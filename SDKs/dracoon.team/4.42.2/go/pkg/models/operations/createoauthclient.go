// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateOAuthClientRequest struct {
	CreateOAuthClientRequest shared.CreateOAuthClientRequest `request:"mediaType=application/json"`
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
}

type CreateOAuthClient400ApplicationJSONType string

const (
	CreateOAuthClient400ApplicationJSONTypeErrorResponse                   CreateOAuthClient400ApplicationJSONType = "ErrorResponse"
	CreateOAuthClient400ApplicationJSONTypePasswordPolicyViolationResponse CreateOAuthClient400ApplicationJSONType = "PasswordPolicyViolationResponse"
)

type CreateOAuthClient400ApplicationJSON struct {
	ErrorResponse                   *shared.ErrorResponse
	PasswordPolicyViolationResponse *shared.PasswordPolicyViolationResponse

	Type CreateOAuthClient400ApplicationJSONType
}

func CreateCreateOAuthClient400ApplicationJSONErrorResponse(errorResponse shared.ErrorResponse) CreateOAuthClient400ApplicationJSON {
	typ := CreateOAuthClient400ApplicationJSONTypeErrorResponse

	return CreateOAuthClient400ApplicationJSON{
		ErrorResponse: &errorResponse,
		Type:          typ,
	}
}

func CreateCreateOAuthClient400ApplicationJSONPasswordPolicyViolationResponse(passwordPolicyViolationResponse shared.PasswordPolicyViolationResponse) CreateOAuthClient400ApplicationJSON {
	typ := CreateOAuthClient400ApplicationJSONTypePasswordPolicyViolationResponse

	return CreateOAuthClient400ApplicationJSON{
		PasswordPolicyViolationResponse: &passwordPolicyViolationResponse,
		Type:                            typ,
	}
}

func (u *CreateOAuthClient400ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorResponse := new(shared.ErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorResponse); err == nil {
		u.ErrorResponse = errorResponse
		u.Type = CreateOAuthClient400ApplicationJSONTypeErrorResponse
		return nil
	}

	passwordPolicyViolationResponse := new(shared.PasswordPolicyViolationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordPolicyViolationResponse); err == nil {
		u.PasswordPolicyViolationResponse = passwordPolicyViolationResponse
		u.Type = CreateOAuthClient400ApplicationJSONTypePasswordPolicyViolationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateOAuthClient400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorResponse != nil {
		return json.Marshal(u.ErrorResponse)
	}

	if u.PasswordPolicyViolationResponse != nil {
		return json.Marshal(u.PasswordPolicyViolationResponse)
	}

	return nil, nil
}

type CreateOAuthClientResponse struct {
	ContentType string
	// Unauthorized
	ErrorResponse *shared.ErrorResponse
	// Created
	OAuthClient *shared.OAuthClient
	StatusCode  int
	RawResponse *http.Response
	// Bad Request
	CreateOAuthClient400ApplicationJSONOneOf *CreateOAuthClient400ApplicationJSON
}
