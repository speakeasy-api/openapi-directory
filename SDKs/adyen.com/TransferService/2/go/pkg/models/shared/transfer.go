// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransferDirectionEnum - The direction of the transfer.
//
// Possible values: **incoming**, **outgoing**.
type TransferDirectionEnum string

const (
	TransferDirectionEnumIncoming TransferDirectionEnum = "incoming"
	TransferDirectionEnumOutgoing TransferDirectionEnum = "outgoing"
)

func (e *TransferDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "incoming":
		fallthrough
	case "outgoing":
		*e = TransferDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferDirectionEnum: %s", s)
	}
}

// TransferReasonEnum - Additional information about the status of the transfer.
type TransferReasonEnum string

const (
	TransferReasonEnumAmountLimitExceded          TransferReasonEnum = "amountLimitExceded"
	TransferReasonEnumApproved                    TransferReasonEnum = "approved"
	TransferReasonEnumCounterpartyAccountBlocked  TransferReasonEnum = "counterpartyAccountBlocked"
	TransferReasonEnumCounterpartyAccountClosed   TransferReasonEnum = "counterpartyAccountClosed"
	TransferReasonEnumCounterpartyAccountNotFound TransferReasonEnum = "counterpartyAccountNotFound"
	TransferReasonEnumCounterpartyAddressRequired TransferReasonEnum = "counterpartyAddressRequired"
	TransferReasonEnumCounterpartyBankTimedOut    TransferReasonEnum = "counterpartyBankTimedOut"
	TransferReasonEnumCounterpartyBankUnavailable TransferReasonEnum = "counterpartyBankUnavailable"
	TransferReasonEnumError                       TransferReasonEnum = "error"
	TransferReasonEnumNotEnoughBalance            TransferReasonEnum = "notEnoughBalance"
	TransferReasonEnumRefusedByCounterpartyBank   TransferReasonEnum = "refusedByCounterpartyBank"
	TransferReasonEnumRouteNotFound               TransferReasonEnum = "routeNotFound"
	TransferReasonEnumUnknown                     TransferReasonEnum = "unknown"
)

func (e *TransferReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "amountLimitExceded":
		fallthrough
	case "approved":
		fallthrough
	case "counterpartyAccountBlocked":
		fallthrough
	case "counterpartyAccountClosed":
		fallthrough
	case "counterpartyAccountNotFound":
		fallthrough
	case "counterpartyAddressRequired":
		fallthrough
	case "counterpartyBankTimedOut":
		fallthrough
	case "counterpartyBankUnavailable":
		fallthrough
	case "error":
		fallthrough
	case "notEnoughBalance":
		fallthrough
	case "refusedByCounterpartyBank":
		fallthrough
	case "routeNotFound":
		fallthrough
	case "unknown":
		*e = TransferReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferReasonEnum: %s", s)
	}
}

// TransferStatusEnum - The result of the transfer.
//
//	For example, **authorised**, **refused**, or **error**.
type TransferStatusEnum string

const (
	TransferStatusEnumAtmWithdrawal                TransferStatusEnum = "atmWithdrawal"
	TransferStatusEnumAtmWithdrawalReversalPending TransferStatusEnum = "atmWithdrawalReversalPending"
	TransferStatusEnumAtmWithdrawalReversed        TransferStatusEnum = "atmWithdrawalReversed"
	TransferStatusEnumAuthAdjustmentAuthorised     TransferStatusEnum = "authAdjustmentAuthorised"
	TransferStatusEnumAuthAdjustmentError          TransferStatusEnum = "authAdjustmentError"
	TransferStatusEnumAuthAdjustmentRefused        TransferStatusEnum = "authAdjustmentRefused"
	TransferStatusEnumAuthorised                   TransferStatusEnum = "authorised"
	TransferStatusEnumBankTransfer                 TransferStatusEnum = "bankTransfer"
	TransferStatusEnumBankTransferPending          TransferStatusEnum = "bankTransferPending"
	TransferStatusEnumBooked                       TransferStatusEnum = "booked"
	TransferStatusEnumBookingPending               TransferStatusEnum = "bookingPending"
	TransferStatusEnumCancelled                    TransferStatusEnum = "cancelled"
	TransferStatusEnumCapturePending               TransferStatusEnum = "capturePending"
	TransferStatusEnumCaptureReversalPending       TransferStatusEnum = "captureReversalPending"
	TransferStatusEnumCaptureReversed              TransferStatusEnum = "captureReversed"
	TransferStatusEnumCaptured                     TransferStatusEnum = "captured"
	TransferStatusEnumChargeback                   TransferStatusEnum = "chargeback"
	TransferStatusEnumChargebackPending            TransferStatusEnum = "chargebackPending"
	TransferStatusEnumChargebackReversalPending    TransferStatusEnum = "chargebackReversalPending"
	TransferStatusEnumChargebackReversed           TransferStatusEnum = "chargebackReversed"
	TransferStatusEnumCredited                     TransferStatusEnum = "credited"
	TransferStatusEnumDepositCorrection            TransferStatusEnum = "depositCorrection"
	TransferStatusEnumDepositCorrectionPending     TransferStatusEnum = "depositCorrectionPending"
	TransferStatusEnumDispute                      TransferStatusEnum = "dispute"
	TransferStatusEnumDisputeClosed                TransferStatusEnum = "disputeClosed"
	TransferStatusEnumDisputeExpired               TransferStatusEnum = "disputeExpired"
	TransferStatusEnumDisputeNeedsReview           TransferStatusEnum = "disputeNeedsReview"
	TransferStatusEnumError                        TransferStatusEnum = "error"
	TransferStatusEnumExpired                      TransferStatusEnum = "expired"
	TransferStatusEnumFailed                       TransferStatusEnum = "failed"
	TransferStatusEnumFee                          TransferStatusEnum = "fee"
	TransferStatusEnumFeePending                   TransferStatusEnum = "feePending"
	TransferStatusEnumInternalTransfer             TransferStatusEnum = "internalTransfer"
	TransferStatusEnumInternalTransferPending      TransferStatusEnum = "internalTransferPending"
	TransferStatusEnumInvoiceDeduction             TransferStatusEnum = "invoiceDeduction"
	TransferStatusEnumInvoiceDeductionPending      TransferStatusEnum = "invoiceDeductionPending"
	TransferStatusEnumManualCorrectionPending      TransferStatusEnum = "manualCorrectionPending"
	TransferStatusEnumManuallyCorrected            TransferStatusEnum = "manuallyCorrected"
	TransferStatusEnumMatchedStatement             TransferStatusEnum = "matchedStatement"
	TransferStatusEnumMatchedStatementPending      TransferStatusEnum = "matchedStatementPending"
	TransferStatusEnumMerchantPayin                TransferStatusEnum = "merchantPayin"
	TransferStatusEnumMerchantPayinPending         TransferStatusEnum = "merchantPayinPending"
	TransferStatusEnumMerchantPayinReversed        TransferStatusEnum = "merchantPayinReversed"
	TransferStatusEnumMerchantPayinReversedPending TransferStatusEnum = "merchantPayinReversedPending"
	TransferStatusEnumMiscCost                     TransferStatusEnum = "miscCost"
	TransferStatusEnumMiscCostPending              TransferStatusEnum = "miscCostPending"
	TransferStatusEnumPaymentCost                  TransferStatusEnum = "paymentCost"
	TransferStatusEnumPaymentCostPending           TransferStatusEnum = "paymentCostPending"
	TransferStatusEnumReceived                     TransferStatusEnum = "received"
	TransferStatusEnumRefundPending                TransferStatusEnum = "refundPending"
	TransferStatusEnumRefundReversalPending        TransferStatusEnum = "refundReversalPending"
	TransferStatusEnumRefundReversed               TransferStatusEnum = "refundReversed"
	TransferStatusEnumRefunded                     TransferStatusEnum = "refunded"
	TransferStatusEnumRefused                      TransferStatusEnum = "refused"
	TransferStatusEnumReserveAdjustment            TransferStatusEnum = "reserveAdjustment"
	TransferStatusEnumReserveAdjustmentPending     TransferStatusEnum = "reserveAdjustmentPending"
	TransferStatusEnumReturned                     TransferStatusEnum = "returned"
	TransferStatusEnumSecondChargeback             TransferStatusEnum = "secondChargeback"
	TransferStatusEnumSecondChargebackPending      TransferStatusEnum = "secondChargebackPending"
	TransferStatusEnumUndefined                    TransferStatusEnum = "undefined"
)

func (e *TransferStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "atmWithdrawal":
		fallthrough
	case "atmWithdrawalReversalPending":
		fallthrough
	case "atmWithdrawalReversed":
		fallthrough
	case "authAdjustmentAuthorised":
		fallthrough
	case "authAdjustmentError":
		fallthrough
	case "authAdjustmentRefused":
		fallthrough
	case "authorised":
		fallthrough
	case "bankTransfer":
		fallthrough
	case "bankTransferPending":
		fallthrough
	case "booked":
		fallthrough
	case "bookingPending":
		fallthrough
	case "cancelled":
		fallthrough
	case "capturePending":
		fallthrough
	case "captureReversalPending":
		fallthrough
	case "captureReversed":
		fallthrough
	case "captured":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargebackPending":
		fallthrough
	case "chargebackReversalPending":
		fallthrough
	case "chargebackReversed":
		fallthrough
	case "credited":
		fallthrough
	case "depositCorrection":
		fallthrough
	case "depositCorrectionPending":
		fallthrough
	case "dispute":
		fallthrough
	case "disputeClosed":
		fallthrough
	case "disputeExpired":
		fallthrough
	case "disputeNeedsReview":
		fallthrough
	case "error":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		fallthrough
	case "fee":
		fallthrough
	case "feePending":
		fallthrough
	case "internalTransfer":
		fallthrough
	case "internalTransferPending":
		fallthrough
	case "invoiceDeduction":
		fallthrough
	case "invoiceDeductionPending":
		fallthrough
	case "manualCorrectionPending":
		fallthrough
	case "manuallyCorrected":
		fallthrough
	case "matchedStatement":
		fallthrough
	case "matchedStatementPending":
		fallthrough
	case "merchantPayin":
		fallthrough
	case "merchantPayinPending":
		fallthrough
	case "merchantPayinReversed":
		fallthrough
	case "merchantPayinReversedPending":
		fallthrough
	case "miscCost":
		fallthrough
	case "miscCostPending":
		fallthrough
	case "paymentCost":
		fallthrough
	case "paymentCostPending":
		fallthrough
	case "received":
		fallthrough
	case "refundPending":
		fallthrough
	case "refundReversalPending":
		fallthrough
	case "refundReversed":
		fallthrough
	case "refunded":
		fallthrough
	case "refused":
		fallthrough
	case "reserveAdjustment":
		fallthrough
	case "reserveAdjustmentPending":
		fallthrough
	case "returned":
		fallthrough
	case "secondChargeback":
		fallthrough
	case "secondChargebackPending":
		fallthrough
	case "undefined":
		*e = TransferStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferStatusEnum: %s", s)
	}
}

// Transfer - OK - the request has succeeded.
type Transfer struct {
	Amount Amount `json:"amount"`
	// The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
	BalanceAccountID *string      `json:"balanceAccountId,omitempty"`
	Bank             *Bank        `json:"bank,omitempty"`
	Counterparty     Counterparty `json:"counterparty"`
	// A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
	Description *string `json:"description,omitempty"`
	// The direction of the transfer.
	//
	// Possible values: **incoming**, **outgoing**.
	Direction *TransferDirectionEnum `json:"direction,omitempty"`
	// The ID of the resource.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the source [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id).
	PaymentInstrumentID *string `json:"paymentInstrumentId,omitempty"`
	// Additional information about the status of the transfer.
	Reason *TransferReasonEnum `json:"reason,omitempty"`
	// Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
	Reference *string `json:"reference,omitempty"`
	//  A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.
	//
	//  Supported characters: **a-z**, **A-Z**, **0-9**. Maximum length: 80 characters.
	ReferenceForBeneficiary *string `json:"referenceForBeneficiary,omitempty"`
	// The result of the transfer.
	//
	//  For example, **authorised**, **refused**, or **error**.
	Status TransferStatusEnum `json:"status"`
}
