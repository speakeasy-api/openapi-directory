/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Account } from "./account";
import { Avatars } from "./avatars";
import { Database } from "./database";
import { Functions } from "./functions";
import { Health } from "./health";
import { Locale } from "./locale";
import { Storage } from "./storage";
import { Teams } from "./teams";
import { Users } from "./users";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://appwrite.io/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * @see {@link https://appwrite.io/docs} - Full API docs, specs and tutorials
 */
export class SDK {
  /**
   * The Account service allows you to authenticate and manage a user account.
   */
  public account: Account;
  /**
   * The Avatars service aims to help you complete everyday tasks related to your app image, icons, and avatars.
   */
  public avatars: Avatars;
  /**
   * The Database service allows you to create structured collections of documents, query and filter lists of documents
   */
  public database: Database;
  /**
   * The Functions Service allows you view, create and manage your Cloud Functions.
   */
  public functions: Functions;
  /**
   * The Health service allows you to both validate and monitor your Appwrite server's health.
   */
  public health: Health;
  /**
   * The Locale service allows you to customize your app based on your users' location.
   */
  public locale: Locale;
  /**
   * The Storage service allows you to manage your project files.
   */
  public storage: Storage;
  /**
   * The Teams service allows you to group users of your project and to enable them to share read and write access to your project resources
   */
  public teams: Teams;
  /**
   * The Users service allows you to manage your project users.
   */
  public users: Users;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.account = new Account(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.avatars = new Avatars(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.database = new Database(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.functions = new Functions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.health = new Health(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.locale = new Locale(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.storage = new Storage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.teams = new Teams(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
