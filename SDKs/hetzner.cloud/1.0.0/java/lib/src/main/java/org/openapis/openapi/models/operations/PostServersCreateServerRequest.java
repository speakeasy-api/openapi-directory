/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostServersCreateServerRequest - Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).
 * 
 * For `server_type` you can either use the ID as listed in `/server_types` or its name.
 * 
 * For `image` you can either use the ID as listed in `/images` or its name.
 * 
 * If you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However we only recommend this if you want to assign a specific Primary IP to the Server which is located in the specified Datacenter.
 * 
 * Some properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.
 * 
 * For accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.
 * 
 * Please note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you don\u2019t use it to store passwords or other sensitive information.
 * 
 * #### Call specific error codes
 * 
 * | Code                             | Description                                                |
 * |----------------------------------|------------------------------------------------------------|
 * | `placement_error`                | An error during the placement occurred                     |
 * | `primary_ip_assigned`            | The specified Primary IP is already assigned to a server   |
 * | `primary_ip_datacenter_mismatch` | The specified Primary IP is in a different datacenter      |
 * | `primary_ip_version_mismatch`    | The specified Primary IP has the wrong IP Version          |
 * 
 */
public class PostServersCreateServerRequest {
    /**
     * Auto-mount Volumes after attach
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automount")
    public Boolean automount;

    public PostServersCreateServerRequest withAutomount(Boolean automount) {
        this.automount = automount;
        return this;
    }
    
    /**
     * ID or name of Datacenter to create Server in (must not be used together with location)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datacenter")
    public String datacenter;

    public PostServersCreateServerRequest withDatacenter(String datacenter) {
        this.datacenter = datacenter;
        return this;
    }
    
    /**
     * Firewalls which should be applied on the Server's public network interface at creation time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firewalls")
    public PostServersCreateServerRequestFirewalls[] firewalls;

    public PostServersCreateServerRequest withFirewalls(PostServersCreateServerRequestFirewalls[] firewalls) {
        this.firewalls = firewalls;
        return this;
    }
    
    /**
     * ID or name of the Image the Server is created from
     */
    @JsonProperty("image")
    public String image;

    public PostServersCreateServerRequest withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, Object> labels;

    public PostServersCreateServerRequest withLabels(java.util.Map<String, Object> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * ID or name of Location to create Server in (must not be used together with datacenter)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public PostServersCreateServerRequest withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)
     */
    @JsonProperty("name")
    public String name;

    public PostServersCreateServerRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Network IDs which should be attached to the Server private network interface at the creation time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networks")
    public Long[] networks;

    public PostServersCreateServerRequest withNetworks(Long[] networks) {
        this.networks = networks;
        return this;
    }
    
    /**
     * ID of the Placement Group the server should be in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placement_group")
    public Long placementGroup;

    public PostServersCreateServerRequest withPlacementGroup(Long placementGroup) {
        this.placementGroup = placementGroup;
        return this;
    }
    
    /**
     * Public Network options
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_net")
    public PostServersCreateServerRequestPublicNet publicNet;

    public PostServersCreateServerRequest withPublicNet(PostServersCreateServerRequestPublicNet publicNet) {
        this.publicNet = publicNet;
        return this;
    }
    
    /**
     * ID or name of the Server type this Server should be created with
     */
    @JsonProperty("server_type")
    public String serverType;

    public PostServersCreateServerRequest withServerType(String serverType) {
        this.serverType = serverType;
        return this;
    }
    
    /**
     * SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh_keys")
    public String[] sshKeys;

    public PostServersCreateServerRequest withSshKeys(String[] sshKeys) {
        this.sshKeys = sshKeys;
        return this;
    }
    
    /**
     * Start Server right after creation. Defaults to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_after_create")
    public Boolean startAfterCreate;

    public PostServersCreateServerRequest withStartAfterCreate(Boolean startAfterCreate) {
        this.startAfterCreate = startAfterCreate;
        return this;
    }
    
    /**
     * Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_data")
    public String userData;

    public PostServersCreateServerRequest withUserData(String userData) {
        this.userData = userData;
        return this;
    }
    
    /**
     * Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public Long[] volumes;

    public PostServersCreateServerRequest withVolumes(Long[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    public PostServersCreateServerRequest(@JsonProperty("image") String image, @JsonProperty("name") String name, @JsonProperty("server_type") String serverType) {
        this.image = image;
        this.name = name;
        this.serverType = serverType;
  }
}
