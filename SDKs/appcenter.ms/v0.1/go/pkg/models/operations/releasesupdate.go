// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReleasesUpdateSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ReleasesUpdatePathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release
	ReleaseID int64 `pathParam:"style=simple,explode=false,name=release_id"`
}

// ReleasesUpdateRequestBodyBuild - Contains metadata about the build that produced the release being uploaded
type ReleasesUpdateRequestBodyBuild struct {
	// The branch name of the build producing the release
	BranchName *string
	// The commit hash of the build producing the release
	CommitHash *string
	// The commit message of the build producing the release
	CommitMessage *string
}

// ReleasesUpdateRequestBodyDestinations - A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
type ReleasesUpdateRequestBodyDestinations struct {
	// Id of a distribution group / store. The release will be associated with this distribution group / store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.
	ID *string
	// Name of a distribution group / distribution store. The release will be associated with this distribution group or store. If the distribution group / store doesn't exist a 400 is returned. If both distribution group / store name and id are passed, the id is taking precedence.
	Name *string
}

// ReleasesUpdateRequestBodyMetadata - An object containing all the release metadata.
type ReleasesUpdateRequestBodyMetadata struct {
	// dsa signature of the release for the sparkle feed.
	DsaSignature *string
	// edDSA signature of the release for the sparkle feed.
	EdSignature *string
}

// ReleasesUpdateRequestBody - A request containing information for updating a release.
type ReleasesUpdateRequestBody struct {
	// Contains metadata about the build that produced the release being uploaded
	Build *ReleasesUpdateRequestBodyBuild
	// OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
	DestinationID *string
	// OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
	DestinationName *string
	// Not used anymore.
	DestinationType *string
	// Distribute this release under the following list of destinations (store groups or distribution groups).
	Destinations []ReleasesUpdateRequestBodyDestinations
	// OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
	DistributionGroupID *string
	// OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
	DistributionGroupName *string
	// A boolean which determines whether this version should be a mandatory update or not.
	MandatoryUpdate *bool
	// An object containing all the release metadata.
	Metadata *ReleasesUpdateRequestBodyMetadata
	// A boolean which determines whether to notify testers of a new release, default to true.
	NotifyTesters *bool
	// Release notes for this release.
	ReleaseNotes *string
}

type ReleasesUpdateRequest struct {
	PathParams ReleasesUpdatePathParams
	// The release information.
	Request  []byte `request:"mediaType=text/plain"`
	Security ReleasesUpdateSecurity
}

type ReleasesUpdate404ApplicationJSONCodeEnum string

const (
	ReleasesUpdate404ApplicationJSONCodeEnumBadRequest          ReleasesUpdate404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdate404ApplicationJSONCodeEnumConflict            ReleasesUpdate404ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdate404ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdate404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdate404ApplicationJSONCodeEnumNotFound            ReleasesUpdate404ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdate404ApplicationJSONCodeEnumInternalServerError ReleasesUpdate404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdate404ApplicationJSONCodeEnumUnauthorized        ReleasesUpdate404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdate404ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdate404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesUpdate404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdate404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdate404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesUpdate404ApplicationJSON - Release not found
type ReleasesUpdate404ApplicationJSON struct {
	Code    ReleasesUpdate404ApplicationJSONCodeEnum `json:"code"`
	Message string                                   `json:"message"`
}

type ReleasesUpdate400ApplicationJSONCodeEnum string

const (
	ReleasesUpdate400ApplicationJSONCodeEnumBadRequest          ReleasesUpdate400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdate400ApplicationJSONCodeEnumConflict            ReleasesUpdate400ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdate400ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdate400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdate400ApplicationJSONCodeEnumNotFound            ReleasesUpdate400ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdate400ApplicationJSONCodeEnumInternalServerError ReleasesUpdate400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdate400ApplicationJSONCodeEnumUnauthorized        ReleasesUpdate400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdate400ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdate400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesUpdate400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdate400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdate400ApplicationJSONCodeEnum: %s", s)
	}
}

type ReleasesUpdate400ApplicationJSONDestinations struct {
	// Error Codes:<br>
	// <b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
	// <b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
	// <b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
	// <b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
	// <b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
	// <b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
	// <b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
	// <b>store_release_not_available</b>: The release is not available.<br>
	// <b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
	//
	Code    *string `json:"code,omitempty"`
	ID      *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// ReleasesUpdate400ApplicationJSON - Failure
type ReleasesUpdate400ApplicationJSON struct {
	Code            ReleasesUpdate400ApplicationJSONCodeEnum       `json:"code"`
	Destinations    []ReleasesUpdate400ApplicationJSONDestinations `json:"destinations,omitempty"`
	MandatoryUpdate *bool                                          `json:"mandatory_update,omitempty"`
	Message         string                                         `json:"message"`
	ReleaseNotes    *string                                        `json:"release_notes,omitempty"`
}

// ReleasesUpdate200ApplicationJSON - Response for updating release details
type ReleasesUpdate200ApplicationJSON struct {
	ReleaseNotes *string `json:"release_notes,omitempty"`
}

type ReleasesUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesUpdate200ApplicationJSONObject *ReleasesUpdate200ApplicationJSON
	// Failure
	ReleasesUpdate400ApplicationJSONObject *ReleasesUpdate400ApplicationJSON
	// Release not found
	ReleasesUpdate404ApplicationJSONObject *ReleasesUpdate404ApplicationJSON
}
