"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OBSCASupportData1AppliedAuthenticationApproachEnum(str, Enum):
    r"""Specifies a character string with a maximum length of 40 characters.
    Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
    """
    CA = 'CA'
    SCA = 'SCA'

class OBSCASupportData1RequestedSCAExemptionTypeEnum(str, Enum):
    r"""This field allows a PISP to request specific SCA Exemption for a Payment Initiation"""
    BILL_PAYMENT = 'BillPayment'
    CONTACTLESS_TRAVEL = 'ContactlessTravel'
    ECOMMERCE_GOODS = 'EcommerceGoods'
    ECOMMERCE_SERVICES = 'EcommerceServices'
    KIOSK = 'Kiosk'
    PARKING = 'Parking'
    PARTY_TO_PARTY = 'PartyToParty'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBSCASupportData1:
    r"""Supporting Data provided by TPP, when requesting SCA Exemption."""
    
    applied_authentication_approach: Optional[OBSCASupportData1AppliedAuthenticationApproachEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppliedAuthenticationApproach'), 'exclude': lambda f: f is None }})
    r"""Specifies a character string with a maximum length of 40 characters.
    Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
    """  
    reference_payment_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferencePaymentOrderId'), 'exclude': lambda f: f is None }})
    r"""If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId"""  
    requested_sca_exemption_type: Optional[OBSCASupportData1RequestedSCAExemptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedSCAExemptionType'), 'exclude': lambda f: f is None }})
    r"""This field allows a PISP to request specific SCA Exemption for a Payment Initiation"""  
    