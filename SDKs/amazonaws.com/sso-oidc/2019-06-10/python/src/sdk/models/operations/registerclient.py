"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import registerclientresponse as shared_registerclientresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterClientRequestBody:
    
    client_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientName') }})
    r"""The friendly name of the client."""  
    client_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientType') }})
    r"""The type of client. The service supports only <code>public</code> as a client type. Anything other than public will be rejected by the service."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""The list of scopes that are defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token."""  
    

@dataclasses.dataclass
class RegisterClientRequest:
    
    request_body: RegisterClientRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class RegisterClientResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_client_metadata_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientMetadataException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    invalid_scope_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidScopeException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    register_client_response: Optional[shared_registerclientresponse.RegisterClientResponse] = dataclasses.field(default=None)
    r"""Success"""  
    