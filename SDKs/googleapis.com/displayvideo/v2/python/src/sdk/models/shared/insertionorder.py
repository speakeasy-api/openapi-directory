"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import biddingstrategy as shared_biddingstrategy
from ..shared import frequencycap as shared_frequencycap
from ..shared import insertionorderbudget as shared_insertionorderbudget
from ..shared import integrationdetails as shared_integrationdetails
from ..shared import pacing as shared_pacing
from ..shared import partnercost as shared_partnercost
from ..shared import performancegoal as shared_performancegoal
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InsertionOrderBillableOutcomeEnum(str, Enum):
    r"""Immutable. The billable outcome of the insertion order."""
    BILLABLE_OUTCOME_UNSPECIFIED = 'BILLABLE_OUTCOME_UNSPECIFIED'
    BILLABLE_OUTCOME_PAY_PER_IMPRESSION = 'BILLABLE_OUTCOME_PAY_PER_IMPRESSION'
    BILLABLE_OUTCOME_PAY_PER_CLICK = 'BILLABLE_OUTCOME_PAY_PER_CLICK'
    BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION = 'BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION'

class InsertionOrderEntityStatusEnum(str, Enum):
    r"""Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'

class InsertionOrderInsertionOrderTypeEnum(str, Enum):
    r"""The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`."""
    INSERTION_ORDER_TYPE_UNSPECIFIED = 'INSERTION_ORDER_TYPE_UNSPECIFIED'
    RTB = 'RTB'
    OVER_THE_TOP = 'OVER_THE_TOP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsertionOrderInput:
    r"""A single insertion order."""
    
    bid_strategy: Optional[shared_biddingstrategy.BiddingStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy. Bid strategy determines the bid price."""  
    billable_outcome: Optional[InsertionOrderBillableOutcomeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billableOutcome'), 'exclude': lambda f: f is None }})
    r"""Immutable. The billable outcome of the insertion order."""  
    budget: Optional[shared_insertionorderbudget.InsertionOrderBudget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget'), 'exclude': lambda f: f is None }})
    r"""Settings that control how insertion order budget is allocated."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the campaign that the insertion order belongs to."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[InsertionOrderEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    insertion_order_type: Optional[InsertionOrderInsertionOrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertionOrderType'), 'exclude': lambda f: f is None }})
    r"""The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    pacing: Optional[shared_pacing.Pacing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pacing'), 'exclude': lambda f: f is None }})
    r"""Settings that control the rate at which a budget is spent."""  
    partner_costs: Optional[list[shared_partnercost.PartnerCost]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerCosts'), 'exclude': lambda f: f is None }})
    r"""The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings."""  
    performance_goal: Optional[shared_performancegoal.PerformanceGoal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoal'), 'exclude': lambda f: f is None }})
    r"""Settings that control the performance goal of a campaign or insertion order."""  
    
class InsertionOrderReservationTypeEnum(str, Enum):
    r"""Output only. The reservation type of the insertion order."""
    RESERVATION_TYPE_UNSPECIFIED = 'RESERVATION_TYPE_UNSPECIFIED'
    RESERVATION_TYPE_NOT_GUARANTEED = 'RESERVATION_TYPE_NOT_GUARANTEED'
    RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED = 'RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED'
    RESERVATION_TYPE_TAG_GUARANTEED = 'RESERVATION_TYPE_TAG_GUARANTEED'
    RESERVATION_TYPE_PETRA_VIRAL = 'RESERVATION_TYPE_PETRA_VIRAL'
    RESERVATION_TYPE_INSTANT_RESERVE = 'RESERVATION_TYPE_INSTANT_RESERVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsertionOrder:
    r"""A single insertion order."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the advertiser the insertion order belongs to."""  
    bid_strategy: Optional[shared_biddingstrategy.BiddingStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bidStrategy'), 'exclude': lambda f: f is None }})
    r"""Settings that control the bid strategy. Bid strategy determines the bid price."""  
    billable_outcome: Optional[InsertionOrderBillableOutcomeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billableOutcome'), 'exclude': lambda f: f is None }})
    r"""Immutable. The billable outcome of the insertion order."""  
    budget: Optional[shared_insertionorderbudget.InsertionOrderBudget] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('budget'), 'exclude': lambda f: f is None }})
    r"""Settings that control how insertion order budget is allocated."""  
    campaign_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('campaignId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the campaign that the insertion order belongs to."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[InsertionOrderEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active."""  
    frequency_cap: Optional[shared_frequencycap.FrequencyCap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequencyCap'), 'exclude': lambda f: f is None }})
    r"""Settings that control the number of times a user may be shown with the same ad during a given time period."""  
    insertion_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertionOrderId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the insertion order. Assigned by the system."""  
    insertion_order_type: Optional[InsertionOrderInsertionOrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertionOrderType'), 'exclude': lambda f: f is None }})
    r"""The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the insertion order."""  
    pacing: Optional[shared_pacing.Pacing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pacing'), 'exclude': lambda f: f is None }})
    r"""Settings that control the rate at which a budget is spent."""  
    partner_costs: Optional[list[shared_partnercost.PartnerCost]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerCosts'), 'exclude': lambda f: f is None }})
    r"""The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings."""  
    performance_goal: Optional[shared_performancegoal.PerformanceGoal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoal'), 'exclude': lambda f: f is None }})
    r"""Settings that control the performance goal of a campaign or insertion order."""  
    reservation_type: Optional[InsertionOrderReservationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservationType'), 'exclude': lambda f: f is None }})
    r"""Output only. The reservation type of the insertion order."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the insertion order was last updated. Assigned by the system."""  
    