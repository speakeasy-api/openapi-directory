/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 * https://www.pdfblocks.com/docs/api/v1 - Documentation and examples
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Global endpoint (default).
         */
        "https://api.pdfblocks.com",
        /**
         * European-only endpoint.
         */
        "https://eu.api.pdfblocks.com",
	};
	
	
	
	
	
	
	
	
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Add an image watermark to a PDF
     * Add an image watermark to each page of a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/add-watermark-image - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddImageWatermarkV1Response addImageWatermarkV1(org.openapis.openapi.models.operations.AddImageWatermarkV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/add_watermark/image");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddImageWatermarkV1Response res = new org.openapis.openapi.models.operations.AddImageWatermarkV1Response(contentType, httpRes.statusCode()) {{
            addImageWatermarkV1200ApplicationPdfBinaryString = null;
            addImageWatermarkV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.addImageWatermarkV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddImageWatermarkV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddImageWatermarkV14XXApplicationProblemPlusJson.class);
                res.addImageWatermarkV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Add a password to a PDF
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * https://www.pdfblocks.com/docs/api/v1/add-password - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddPasswordV1Response addPasswordV1(org.openapis.openapi.models.operations.AddPasswordV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/add_password");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddPasswordV1Response res = new org.openapis.openapi.models.operations.AddPasswordV1Response(contentType, httpRes.statusCode()) {{
            addPasswordV1200ApplicationPdfBinaryString = null;
            addPasswordV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.addPasswordV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddPasswordV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddPasswordV14XXApplicationProblemPlusJson.class);
                res.addPasswordV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Add restrictions to a PDF
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/add-restrictions - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddRestrictionsV1Response addRestrictionsV1(org.openapis.openapi.models.operations.AddRestrictionsV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/add_restrictions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddRestrictionsV1Response res = new org.openapis.openapi.models.operations.AddRestrictionsV1Response(contentType, httpRes.statusCode()) {{
            addRestrictionsV1200ApplicationPdfBinaryString = null;
            addRestrictionsV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.addRestrictionsV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddRestrictionsV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddRestrictionsV14XXApplicationProblemPlusJson.class);
                res.addRestrictionsV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Add a text watermark to a PDF
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * https://www.pdfblocks.com/docs/api/v1/add-watermark-text - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddTextWatermarkV1Response addTextWatermarkV1(org.openapis.openapi.models.operations.AddTextWatermarkV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/add_watermark/text");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AddTextWatermarkV1Response res = new org.openapis.openapi.models.operations.AddTextWatermarkV1Response(contentType, httpRes.statusCode()) {{
            addTextWatermarkV1200ApplicationPdfBinaryString = null;
            addTextWatermarkV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.addTextWatermarkV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.AddTextWatermarkV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.AddTextWatermarkV14XXApplicationProblemPlusJson.class);
                res.addTextWatermarkV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Extract pages from a PDF
     * Extract one or more pages from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/extract-pages - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ExtractPagesV1Response extractPagesV1(org.openapis.openapi.models.operations.ExtractPagesV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/extract_pages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ExtractPagesV1Response res = new org.openapis.openapi.models.operations.ExtractPagesV1Response(contentType, httpRes.statusCode()) {{
            extractPagesV1200ApplicationPdfBinaryString = null;
            extractPagesV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.extractPagesV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ExtractPagesV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ExtractPagesV14XXApplicationProblemPlusJson.class);
                res.extractPagesV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Merge PDF documents
     * Combine multiple PDF documents into a single PDF document.
     * https://www.pdfblocks.com/docs/api/v1/merge-documents - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.MergeDocumentsV1Response mergeDocumentsV1(org.openapis.openapi.models.operations.MergeDocumentsV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/merge_documents");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.MergeDocumentsV1Response res = new org.openapis.openapi.models.operations.MergeDocumentsV1Response(contentType, httpRes.statusCode()) {{
            mergeDocumentsV1200ApplicationPdfBinaryString = null;
            mergeDocumentsV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.mergeDocumentsV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.MergeDocumentsV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.MergeDocumentsV14XXApplicationProblemPlusJson.class);
                res.mergeDocumentsV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Remove pages from a PDF
     * Remove one or more pages from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-pages - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemovePagesV1Response removePagesV1(org.openapis.openapi.models.operations.RemovePagesV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/remove_pages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemovePagesV1Response res = new org.openapis.openapi.models.operations.RemovePagesV1Response(contentType, httpRes.statusCode()) {{
            removePagesV1200ApplicationPdfBinaryString = null;
            removePagesV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.removePagesV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RemovePagesV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RemovePagesV14XXApplicationProblemPlusJson.class);
                res.removePagesV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Remove the password from a PDF
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * https://www.pdfblocks.com/docs/api/v1/remove-password - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemovePasswordV1Response removePasswordV1(org.openapis.openapi.models.operations.RemovePasswordV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/remove_password");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemovePasswordV1Response res = new org.openapis.openapi.models.operations.RemovePasswordV1Response(contentType, httpRes.statusCode()) {{
            removePasswordV1200ApplicationPdfBinaryString = null;
            removePasswordV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.removePasswordV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RemovePasswordV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RemovePasswordV14XXApplicationProblemPlusJson.class);
                res.removePasswordV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Remove the restrictions from a PDF
     * Remove all the restrictions from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-restrictions - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemoveRestrictionsV1Response removeRestrictionsV1(org.openapis.openapi.models.operations.RemoveRestrictionsV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/remove_restrictions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemoveRestrictionsV1Response res = new org.openapis.openapi.models.operations.RemoveRestrictionsV1Response(contentType, httpRes.statusCode()) {{
            removeRestrictionsV1200ApplicationPdfBinaryString = null;
            removeRestrictionsV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.removeRestrictionsV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RemoveRestrictionsV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RemoveRestrictionsV14XXApplicationProblemPlusJson.class);
                res.removeRestrictionsV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Remove the signatures from a PDF
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/remove-signatures - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RemoveSignaturesV1Response removeSignaturesV1(org.openapis.openapi.models.operations.RemoveSignaturesV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/remove_signatures");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RemoveSignaturesV1Response res = new org.openapis.openapi.models.operations.RemoveSignaturesV1Response(contentType, httpRes.statusCode()) {{
            removeSignaturesV1200ApplicationPdfBinaryString = null;
            removeSignaturesV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.removeSignaturesV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RemoveSignaturesV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RemoveSignaturesV14XXApplicationProblemPlusJson.class);
                res.removeSignaturesV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Reverse the pages of a PDF
     * Reverse the order of the pages of a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/reverse-pages - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReversePagesV1Response reversePagesV1(org.openapis.openapi.models.operations.ReversePagesV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/reverse_pages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReversePagesV1Response res = new org.openapis.openapi.models.operations.ReversePagesV1Response(contentType, httpRes.statusCode()) {{
            reversePagesV1200ApplicationPdfBinaryString = null;
            reversePagesV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.reversePagesV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ReversePagesV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ReversePagesV14XXApplicationProblemPlusJson.class);
                res.reversePagesV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Rotate pages in a PDF
     * Rotate one or more pages in a PDF document.
     * https://www.pdfblocks.com/docs/api/v1/rotate-pages - Documentation and examples
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RotatePagesV1Response rotatePagesV1(org.openapis.openapi.models.operations.RotatePagesV1RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/rotate_pages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RotatePagesV1Response res = new org.openapis.openapi.models.operations.RotatePagesV1Response(contentType, httpRes.statusCode()) {{
            rotatePagesV1200ApplicationPdfBinaryString = null;
            rotatePagesV14XXApplicationProblemPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/pdf")) {
                byte[] out = httpRes.body();
                res.rotatePagesV1200ApplicationPdfBinaryString = out;
            }
        }
        else if ((httpRes.statusCode() >= 400 && httpRes.statusCode() < 500)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.RotatePagesV14XXApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.RotatePagesV14XXApplicationProblemPlusJson.class);
                res.rotatePagesV14XXApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }
}