// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LineRouteSequenceDirectionEnum - The direction of travel. Can be inbound or outbound.
type LineRouteSequenceDirectionEnum string

const (
	LineRouteSequenceDirectionEnumInbound  LineRouteSequenceDirectionEnum = "inbound"
	LineRouteSequenceDirectionEnumOutbound LineRouteSequenceDirectionEnum = "outbound"
	LineRouteSequenceDirectionEnumAll      LineRouteSequenceDirectionEnum = "all"
)

func (e LineRouteSequenceDirectionEnum) ToPointer() *LineRouteSequenceDirectionEnum {
	return &e
}

func (e *LineRouteSequenceDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inbound":
		fallthrough
	case "outbound":
		fallthrough
	case "all":
		*e = LineRouteSequenceDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineRouteSequenceDirectionEnum: %v", v)
	}
}

type LineRouteSequenceServiceTypesEnum string

const (
	LineRouteSequenceServiceTypesEnumRegular LineRouteSequenceServiceTypesEnum = "Regular"
	LineRouteSequenceServiceTypesEnumNight   LineRouteSequenceServiceTypesEnum = "Night"
)

func (e LineRouteSequenceServiceTypesEnum) ToPointer() *LineRouteSequenceServiceTypesEnum {
	return &e
}

func (e *LineRouteSequenceServiceTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Regular":
		fallthrough
	case "Night":
		*e = LineRouteSequenceServiceTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineRouteSequenceServiceTypesEnum: %v", v)
	}
}

type LineRouteSequenceRequest struct {
	// The direction of travel. Can be inbound or outbound.
	Direction LineRouteSequenceDirectionEnum `pathParam:"style=simple,explode=false,name=direction"`
	// That excludes crowding from line disruptions. Can be true or false.
	ExcludeCrowding *bool `queryParam:"style=form,explode=true,name=excludeCrowding"`
	// A single line id e.g. victoria
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
	ServiceTypes []LineRouteSequenceServiceTypesEnum `queryParam:"style=form,explode=true,name=serviceTypes"`
}

type LineRouteSequenceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesRouteSequence *shared.TflAPIPresentationEntitiesRouteSequence
}
