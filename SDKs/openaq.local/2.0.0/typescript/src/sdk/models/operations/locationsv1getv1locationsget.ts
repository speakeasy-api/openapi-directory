/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * An enumeration.
 */
export enum Locationsv1GetV1LocationsGetOrderByLocationsOrderEnum {
  City = "city",
  Country = "country",
  Location = "location",
  SourceName = "sourceName",
  FirstUpdated = "firstUpdated",
  LastUpdated = "lastUpdated",
  Count = "count",
  Random = "random",
}

/**
 * An enumeration.
 */
export enum Locationsv1GetV1LocationsGetSortSortEnum {
  Asc = "asc",
  Desc = "desc",
}

export class Locationsv1GetV1LocationsGetRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   *         Limit results by a certain city or cities.
   *         (ex. ?city=Chicago or ?city=Chicago&city=Boston)
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=city" })
  city?: string[];

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=coordinates",
  })
  coordinates?: string;

  /**
   *
   * @remarks
   *         Limit results by a certain country using two letter country code.
   *         (ex. ?country=US or ?country=US&country=MX)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country?: string[];

  /**
   *
   * @remarks
   *         Limit results by a certain country using two letter country code.
   *         (ex. /US)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country_id",
  })
  countryId?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dumpRaw",
  })
  dumpRaw?: boolean;

  /**
   * Source entity type.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=entity",
  })
  entity?: shared.EntityTypesEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=has_geo",
  })
  hasGeo?: boolean;

  /**
   * Data is the product of a previous analysis/aggregation and not raw measurements
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=isAnalysis",
  })
  isAnalysis?: boolean;

  /**
   * Location is mobile
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=isMobile",
  })
  isMobile?: boolean;

  /**
   * Change the number of results returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=location",
  })
  location?: any[];

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=location_id",
  })
  locationId?: number;

  /**
   * Manufacturer of Sensor
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=manufacturerName",
  })
  manufacturerName?: string[];

  /**
   * Model Name of Sensor
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=modelName",
  })
  modelName?: string[];

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Order by a field
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=order_by",
  })
  orderBy?: Locationsv1GetV1LocationsGetOrderByLocationsOrderEnum;

  /**
   * Paginate through results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameter",
  })
  parameter?: any[];

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parameter_id",
  })
  parameterId?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=radius",
  })
  radius?: number;

  /**
   * Type of Sensor
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sensorType",
  })
  sensorType?: shared.SensorTypesEnum;

  /**
   * Sort Direction
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: Locationsv1GetV1LocationsGetSortSortEnum;

  /**
   * Name of the data source
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sourceName",
  })
  sourceName?: string[];

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=unit" })
  unit?: string[];
}

export class Locationsv1GetV1LocationsGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Validation Error
   */
  @SpeakeasyMetadata()
  httpValidationError?: shared.HTTPValidationError;

  /**
   * Successful Response
   */
  @SpeakeasyMetadata()
  openAQResult?: shared.OpenAQResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
