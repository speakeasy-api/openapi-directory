<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Nodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Signs a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceResponse
     */
	public function prodTtSasportalNodesDevicesSignDevice(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:signDevice', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalSignDeviceRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesSignDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a signed device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedResponse
     */
	public function prodTtSasportalNodesDevicesUpdateSigned(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:updateSigned', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalUpdateSignedDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesDevicesUpdateSignedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteResponse
     */
	public function prodTtSasportalNodesNodesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new deployment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateResponse
     */
	public function prodTtSasportalNodesNodesDeploymentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalDeploymentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListResponse
     */
	public function prodTtSasportalNodesNodesDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a device under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateResponse
     */
	public function prodTtSasportalNodesNodesDevicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalDeviceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a signed device under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedResponse
     */
	public function prodTtSasportalNodesNodesDevicesCreateSigned(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices:createSigned', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalCreateSignedDeviceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesCreateSignedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists devices under a node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListResponse
     */
	public function prodTtSasportalNodesNodesDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/devices', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListDevicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a requested node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetResponse
     */
	public function prodTtSasportalNodesNodesGet(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a node under another node or customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveResponse
     */
	public function prodTtSasportalNodesNodesMove(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}:move', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalMoveNodeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateResponse
     */
	public function prodTtSasportalNodesNodesNodesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalNode", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists nodes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListResponse
     */
	public function prodTtSasportalNodesNodesNodesList(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{parent}/nodes', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesNodesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalListNodesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalListNodesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchResponse
     */
	public function prodTtSasportalNodesNodesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha1/{name}', \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sasPortalNode", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProdTtSasportalNodesNodesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sasPortalNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SasPortalNode', 'json');
            }
        }

        return $response;
    }
}