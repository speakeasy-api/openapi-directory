"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class WebhooksMerchantLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_merchants_merchant_id_webhooks_webhook_id(self, request: operations.DeleteMerchantsMerchantIDWebhooksWebhookIDRequest, security: operations.DeleteMerchantsMerchantIDWebhooksWebhookIDSecurity) -> operations.DeleteMerchantsMerchantIDWebhooksWebhookIDResponse:
        r"""Remove a webhook
        Remove the configuration for the webhook identified in the path.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMerchantsMerchantIDWebhooksWebhookIDRequest, base_url, '/merchants/{merchantId}/webhooks/{webhookId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMerchantsMerchantIDWebhooksWebhookIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_webhooks(self, request: operations.GetMerchantsMerchantIDWebhooksRequest, security: operations.GetMerchantsMerchantIDWebhooksSecurity) -> operations.GetMerchantsMerchantIDWebhooksResponse:
        r"""List all webhooks
        Lists all webhook configurations for the merchant account.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDWebhooksRequest, base_url, '/merchants/{merchantId}/webhooks', request)
        
        query_params = utils.get_query_params(operations.GetMerchantsMerchantIDWebhooksRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWebhooksResponse])
                res.list_webhooks_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_webhooks_webhook_id(self, request: operations.GetMerchantsMerchantIDWebhooksWebhookIDRequest, security: operations.GetMerchantsMerchantIDWebhooksWebhookIDSecurity) -> operations.GetMerchantsMerchantIDWebhooksWebhookIDResponse:
        r"""Get a webhook
        Returns the configuration for the webhook identified in the path.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDWebhooksWebhookIDRequest, base_url, '/merchants/{merchantId}/webhooks/{webhookId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDWebhooksWebhookIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_merchants_merchant_id_webhooks_webhook_id(self, request: operations.PatchMerchantsMerchantIDWebhooksWebhookIDRequest, security: operations.PatchMerchantsMerchantIDWebhooksWebhookIDSecurity) -> operations.PatchMerchantsMerchantIDWebhooksWebhookIDResponse:
        r"""Update a webhook
        Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMerchantsMerchantIDWebhooksWebhookIDRequest, base_url, '/merchants/{merchantId}/webhooks/{webhookId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_merchant_webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMerchantsMerchantIDWebhooksWebhookIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_webhooks(self, request: operations.PostMerchantsMerchantIDWebhooksRequest, security: operations.PostMerchantsMerchantIDWebhooksSecurity) -> operations.PostMerchantsMerchantIDWebhooksResponse:
        r"""Set up a webhook
        Subscribe to receive webhook notifications about events related to your merchant account. You can add basic authentication to make sure the data is secure.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDWebhooksRequest, base_url, '/merchants/{merchantId}/webhooks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_merchant_webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_webhooks_webhook_id_generate_hmac(self, request: operations.PostMerchantsMerchantIDWebhooksWebhookIDGenerateHmacRequest, security: operations.PostMerchantsMerchantIDWebhooksWebhookIDGenerateHmacSecurity) -> operations.PostMerchantsMerchantIDWebhooksWebhookIDGenerateHmacResponse:
        r"""Generate an HMAC key
        Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDWebhooksWebhookIDGenerateHmacRequest, base_url, '/merchants/{merchantId}/webhooks/{webhookId}/generateHmac', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDWebhooksWebhookIDGenerateHmacResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateHmacKeyResponse])
                res.generate_hmac_key_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_webhooks_webhook_id_test(self, request: operations.PostMerchantsMerchantIDWebhooksWebhookIDTestRequest, security: operations.PostMerchantsMerchantIDWebhooksWebhookIDTestSecurity) -> operations.PostMerchantsMerchantIDWebhooksWebhookIDTestResponse:
        r"""Test a webhook
        Sends sample notifications to test if the webhook is set up correctly.
        
        We send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.
        
        The response describes the result of the test. The `status` field tells you if the test was successful or not. You can use the other fields to troubleshoot unsuccessful tests.
        
        To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Webhooks read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDWebhooksWebhookIDTestRequest, base_url, '/merchants/{merchantId}/webhooks/{webhookId}/test', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_webhook_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDWebhooksWebhookIDTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestWebhookResponse])
                res.test_webhook_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    