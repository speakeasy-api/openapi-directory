// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkApplianceSsidRequestBodyAuthModeEnum - The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
type UpdateNetworkApplianceSsidRequestBodyAuthModeEnum string

const (
	UpdateNetworkApplianceSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexMeraki UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = "8021x-meraki"
	UpdateNetworkApplianceSsidRequestBodyAuthModeEnumEightThousandAndTwentyOnexRadius UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = "8021x-radius"
	UpdateNetworkApplianceSsidRequestBodyAuthModeEnumOpen                             UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = "open"
	UpdateNetworkApplianceSsidRequestBodyAuthModeEnumPsk                              UpdateNetworkApplianceSsidRequestBodyAuthModeEnum = "psk"
)

func (e *UpdateNetworkApplianceSsidRequestBodyAuthModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8021x-meraki":
		fallthrough
	case "8021x-radius":
		fallthrough
	case "open":
		fallthrough
	case "psk":
		*e = UpdateNetworkApplianceSsidRequestBodyAuthModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceSsidRequestBodyAuthModeEnum: %s", s)
	}
}

// UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication - DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
type UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication struct {
	// Enable DCHP Enforced Deauthentication on the SSID.
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum - The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
type UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum string

const (
	UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnumWep UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum = "wep"
	UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnumWpa UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum = "wpa"
)

func (e *UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wep":
		fallthrough
	case "wpa":
		*e = UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum: %s", s)
	}
}

type UpdateNetworkApplianceSsidRequestBodyRadiusServers struct {
	// The IP address of your RADIUS server.
	Host *string `json:"host,omitempty"`
	// The UDP port your RADIUS servers listens on for Access-requests.
	Port *int64 `json:"port,omitempty"`
	// The RADIUS client shared secret.
	Secret *string `json:"secret,omitempty"`
}

// UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum - The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
type UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum string

const (
	UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnumWpa1AndWpa2        UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = "WPA1 and WPA2"
	UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnumWpa2Only           UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = "WPA2 only"
	UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnumWpa3TransitionMode UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = "WPA3 Transition Mode"
	UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnumWpa3Only           UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum = "WPA3 only"
)

func (e *UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WPA1 and WPA2":
		fallthrough
	case "WPA2 only":
		fallthrough
	case "WPA3 Transition Mode":
		fallthrough
	case "WPA3 only":
		*e = UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum: %s", s)
	}
}

type UpdateNetworkApplianceSsidRequestBody struct {
	// The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
	AuthMode *UpdateNetworkApplianceSsidRequestBodyAuthModeEnum `json:"authMode,omitempty"`
	// The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
	DefaultVlanID *int64 `json:"defaultVlanId,omitempty"`
	// DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
	DhcpEnforcedDeauthentication *UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication `json:"dhcpEnforcedDeauthentication,omitempty"`
	// Whether or not the SSID is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
	EncryptionMode *UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum `json:"encryptionMode,omitempty"`
	// The name of the SSID.
	Name *string `json:"name,omitempty"`
	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk *string `json:"psk,omitempty"`
	// The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.
	RadiusServers []UpdateNetworkApplianceSsidRequestBodyRadiusServers `json:"radiusServers,omitempty"`
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible *bool `json:"visible,omitempty"`
	// The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
	WpaEncryptionMode *UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum `json:"wpaEncryptionMode,omitempty"`
}

type UpdateNetworkApplianceSsidRequest struct {
	RequestBody *UpdateNetworkApplianceSsidRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                 `pathParam:"style=simple,explode=false,name=networkId"`
	Number      string                                 `pathParam:"style=simple,explode=false,name=number"`
}

type UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers struct {
	// The IP address of your RADIUS server.
	Host *string `json:"host,omitempty"`
	// The UDP port your RADIUS servers listens on for Access-requests.
	Port *int64 `json:"port,omitempty"`
}

// UpdateNetworkApplianceSsid200ApplicationJSON - Successful operation
type UpdateNetworkApplianceSsid200ApplicationJSON struct {
	// The association control method for the SSID.
	AuthMode *string `json:"authMode,omitempty"`
	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanID *int64 `json:"defaultVlanId,omitempty"`
	// Whether or not the SSID is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The psk encryption mode for the SSID.
	EncryptionMode *string `json:"encryptionMode,omitempty"`
	// The name of the SSID.
	Name *string `json:"name,omitempty"`
	// The number of the SSID.
	Number *int64 `json:"number,omitempty"`
	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers []UpdateNetworkApplianceSsid200ApplicationJSONRadiusServers `json:"radiusServers,omitempty"`
	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible *bool `json:"visible,omitempty"`
	// WPA encryption mode for the SSID.
	WpaEncryptionMode *string `json:"wpaEncryptionMode,omitempty"`
}

type UpdateNetworkApplianceSsidResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceSsid200ApplicationJSONObject *UpdateNetworkApplianceSsid200ApplicationJSON
}
