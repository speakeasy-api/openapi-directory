/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class DeleteAChatbotMessageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  clientCredentials: string;
}

export class DeleteAChatbotMessageApplicationJSON extends SpeakeasyBase {
  /**
   * The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robot_jid" })
  robotJid: string;

  /**
   * The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_jid" })
  userJid?: string;
}

export class DeleteAChatbotMessageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: DeleteAChatbotMessageApplicationJSON;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=message_id",
  })
  messageId: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Message deleted.
 */
export class DeleteAChatbotMessage200ApplicationXML extends SpeakeasyBase {
  /**
   * Unique identifier of the message that was deleted.
   */
  @SpeakeasyMetadata()
  messageId?: string;

  /**
   * The BotJID of the Chatbot app. It can be found in the Chat Subscription Section on the Features page of your App Dashboard
   */
  @SpeakeasyMetadata()
  robotJid?: string;

  /**
   * The date and time at which the message was deleted.
   */
  @SpeakeasyMetadata()
  sentTime?: string;

  /**
   * The JID of the Channel or User to whom the message was sent.
   */
  @SpeakeasyMetadata()
  toJid?: string;

  /**
   *  The UserJID of the user on whose behalf the message was sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  userJid?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Message deleted.
 */
export class DeleteAChatbotMessage200ApplicationJSON extends SpeakeasyBase {
  /**
   * Unique identifier of the message that was deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_id" })
  messageId?: string;

  /**
   * The BotJID of the Chatbot app. It can be found in the Chat Subscription Section on the Features page of your App Dashboard
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robot_jid" })
  robotJid?: string;

  /**
   * The date and time at which the message was deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sent_time" })
  sentTime?: string;

  /**
   * The JID of the Channel or User to whom the message was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_jid" })
  toJid?: string;

  /**
   *  The UserJID of the user on whose behalf the message was sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_jid" })
  userJid?: string;
}

export class DeleteAChatbotMessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**<br>
   *
   * @remarks
   * Message deleted.
   */
  @SpeakeasyMetadata()
  deleteAChatbotMessage200ApplicationJSONObject?: DeleteAChatbotMessage200ApplicationJSON;
}
