// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateRobotHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateRobotRequestBodyArchitectureEnum - The target architecture of the robot.
type CreateRobotRequestBodyArchitectureEnum string

const (
	CreateRobotRequestBodyArchitectureEnumX8664 CreateRobotRequestBodyArchitectureEnum = "X86_64"
	CreateRobotRequestBodyArchitectureEnumArm64 CreateRobotRequestBodyArchitectureEnum = "ARM64"
	CreateRobotRequestBodyArchitectureEnumArmhf CreateRobotRequestBodyArchitectureEnum = "ARMHF"
)

func (e *CreateRobotRequestBodyArchitectureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "X86_64":
		fallthrough
	case "ARM64":
		fallthrough
	case "ARMHF":
		*e = CreateRobotRequestBodyArchitectureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRobotRequestBodyArchitectureEnum: %s", s)
	}
}

type CreateRobotRequestBody struct {
	// The target architecture of the robot.
	Architecture CreateRobotRequestBodyArchitectureEnum `json:"architecture"`
	// The Greengrass group id.
	GreengrassGroupID string `json:"greengrassGroupId"`
	// The name for the robot.
	Name string `json:"name"`
	// A map that contains tag keys and tag values that are attached to the robot.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateRobotRequest struct {
	Headers CreateRobotHeaders
	Request CreateRobotRequestBody `request:"mediaType=application/json"`
}

type CreateRobotResponse struct {
	ContentType string
	// Success
	CreateRobotResponse *shared.CreateRobotResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
