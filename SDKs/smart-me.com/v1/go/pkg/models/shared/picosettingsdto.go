// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PicoSettingsDtoAuthenticationTypeEnum - The authentication type
type PicoSettingsDtoAuthenticationTypeEnum string

const (
	PicoSettingsDtoAuthenticationTypeEnumNone    PicoSettingsDtoAuthenticationTypeEnum = "None"
	PicoSettingsDtoAuthenticationTypeEnumBackend PicoSettingsDtoAuthenticationTypeEnum = "Backend"
)

func (e *PicoSettingsDtoAuthenticationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Backend":
		*e = PicoSettingsDtoAuthenticationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PicoSettingsDtoAuthenticationTypeEnum: %s", s)
	}
}

// PicoSettingsDto - DTO for the pico charging station settings
type PicoSettingsDto struct {
	// The authentication type
	AuthenticationType *PicoSettingsDtoAuthenticationTypeEnum `json:"AuthenticationType,omitempty"`
	// The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum
	DisplayBrightness *string `json:"DisplayBrightness,omitempty"`
	// The DNS name of the pico's internal ip
	DNSName *string `json:"DnsName,omitempty"`
	// The base 64 string for the "no car connected" image
	IdleImageData *string `json:"IdleImageData,omitempty"`
	// The url of the idle image
	IdleImageURL *string `json:"IdleImageUrl,omitempty"`
	// The internal IP address
	InternalIP *string `json:"InternalIp,omitempty"`
	// The ID of the loadmanagement group
	LoadmanagementGroupID *string `json:"LoadmanagementGroupId,omitempty"`
	// The max current of this station (in A)
	MaxCurrent *int `json:"MaxCurrent,omitempty"`
	// The max current of this station (in A)
	MinCurrent *int `json:"MinCurrent,omitempty"`
	// Flag if ModbusTcp is enabled
	ModbusTCP *bool `json:"ModbusTcp,omitempty"`
	// The name of the station
	Name *string `json:"Name,omitempty"`
}
