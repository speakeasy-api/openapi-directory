/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxonomyAttractions200ApplicationJSONData {
    /**
     * **name** of the city in which the attraction is located
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attractionCity")
    public String attractionCity;

    public TaxonomyAttractions200ApplicationJSONData withAttractionCity(String attractionCity) {
        this.attractionCity = attractionCity;
        return this;
    }
    
    /**
     * **latitude component** of the attraction's location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attractionLatitude")
    public Double attractionLatitude;

    public TaxonomyAttractions200ApplicationJSONData withAttractionLatitude(Double attractionLatitude) {
        this.attractionLatitude = attractionLatitude;
        return this;
    }
    
    /**
     * **longitude component** of the attraction's location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attractionLongitude")
    public Double attractionLongitude;

    public TaxonomyAttractions200ApplicationJSONData withAttractionLongitude(Double attractionLongitude) {
        this.attractionLongitude = attractionLongitude;
        return this;
    }
    
    /**
     * **name** of the state in which the attraction is located
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attractionState")
    public String attractionState;

    public TaxonomyAttractions200ApplicationJSONData withAttractionState(String attractionState) {
        this.attractionState = attractionState;
        return this;
    }
    
    /**
     * **street address** of the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attractionStreetAddress")
    public String attractionStreetAddress;

    public TaxonomyAttractions200ApplicationJSONData withAttractionStreetAddress(String attractionStreetAddress) {
        this.attractionStreetAddress = attractionStreetAddress;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the the destination associated with the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationId")
    public Long destinationId;

    public TaxonomyAttractions200ApplicationJSONData withDestinationId(Long destinationId) {
        this.destinationId = destinationId;
        return this;
    }
    
    /**
     * **URL-formatted title** of the attraction page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageUrlName")
    public String pageUrlName;

    public TaxonomyAttractions200ApplicationJSONData withPageUrlName(String pageUrlName) {
        this.pageUrlName = pageUrlName;
        return this;
    }
    
    /**
     * **number** of user photos published for the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoCount")
    public Long photoCount;

    public TaxonomyAttractions200ApplicationJSONData withPhotoCount(Long photoCount) {
        this.photoCount = photoCount;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the attraction's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationId")
    public Long primaryDestinationId;

    public TaxonomyAttractions200ApplicationJSONData withPrimaryDestinationId(Long primaryDestinationId) {
        this.primaryDestinationId = primaryDestinationId;
        return this;
    }
    
    /**
     * **natural-language name** of the attraction's primary destination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationName")
    public String primaryDestinationName;

    public TaxonomyAttractions200ApplicationJSONData withPrimaryDestinationName(String primaryDestinationName) {
        this.primaryDestinationName = primaryDestinationName;
        return this;
    }
    
    /**
     * **URL-formatted name** of the destination associated with *this* attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryDestinationUrlName")
    public String primaryDestinationUrlName;

    public TaxonomyAttractions200ApplicationJSONData withPrimaryDestinationUrlName(String primaryDestinationUrlName) {
        this.primaryDestinationUrlName = primaryDestinationUrlName;
        return this;
    }
    
    /**
     * **number** of products associated with the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productCount")
    public Long productCount;

    public TaxonomyAttractions200ApplicationJSONData withProductCount(Long productCount) {
        this.productCount = productCount;
        return this;
    }
    
    /**
     * **conventionally-formatted date** on which the attraction was listed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedDate")
    public String publishedDate;

    public TaxonomyAttractions200ApplicationJSONData withPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
        return this;
    }
    
    /**
     * **average user rating** of the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    public Double rating;

    public TaxonomyAttractions200ApplicationJSONData withRating(Double rating) {
        this.rating = rating;
        return this;
    }
    
    /**
     * **unique numeric identifier** of the attraction
     * - use as an input for [/search/products](#operation/searchProducts)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seoId")
    public Long seoId;

    public TaxonomyAttractions200ApplicationJSONData withSeoId(Long seoId) {
        this.seoId = seoId;
        return this;
    }
    
    /**
     * **sort order** of *this* listing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;

    public TaxonomyAttractions200ApplicationJSONData withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * **URL** for the attraction's high-resolution thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailHiResURL")
    public String thumbnailHiResURL;

    public TaxonomyAttractions200ApplicationJSONData withThumbnailHiResURL(String thumbnailHiResURL) {
        this.thumbnailHiResURL = thumbnailHiResURL;
        return this;
    }
    
    /**
     * **URL** the attraction's thumbnail image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailURL")
    public String thumbnailURL;

    public TaxonomyAttractions200ApplicationJSONData withThumbnailURL(String thumbnailURL) {
        this.thumbnailURL = thumbnailURL;
        return this;
    }
    
    /**
     * **natural-language title** of the attraction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public TaxonomyAttractions200ApplicationJSONData withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * ignore (Viator only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webURL")
    public String webURL;

    public TaxonomyAttractions200ApplicationJSONData withWebURL(String webURL) {
        this.webURL = webURL;
        return this;
    }
    
    public TaxonomyAttractions200ApplicationJSONData(){}
}
