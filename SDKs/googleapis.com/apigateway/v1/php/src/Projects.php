<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new ApiConfig in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateResponse
     */
	public function apigatewayProjectsLocationsApisConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/configs', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewayApiConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ApiConfigs in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListResponse
     */
	public function apigatewayProjectsLocationsApisConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/configs', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayListApiConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayListApiConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Api in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateResponse
     */
	public function apigatewayProjectsLocationsApisCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/apis', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewayApiInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Apis in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListResponse
     */
	public function apigatewayProjectsLocationsApisList(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/apis', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsApisListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayListApisResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayListApisResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Gateway in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateResponse
     */
	public function apigatewayProjectsLocationsGatewaysCreate(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/gateways', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewayGatewayInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse
     */
	public function apigatewayProjectsLocationsGatewaysGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Gateways in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListResponse
     */
	public function apigatewayProjectsLocationsGatewaysList(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/gateways', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayListGatewaysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayListGatewaysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the parameters of a single Gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchResponse
     */
	public function apigatewayProjectsLocationsGatewaysPatch(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewayGatewayInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse
     */
	public function apigatewayProjectsLocationsGatewaysSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewaySetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse
     */
	public function apigatewayProjectsLocationsGatewaysTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apigatewayTestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsGatewaysTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayTestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayTestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListResponse
     */
	public function apigatewayProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelResponse
     */
	public function apigatewayProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteResponse
     */
	public function apigatewayProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetResponse
     */
	public function apigatewayProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListResponse
     */
	public function apigatewayProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApigatewayProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apigatewayListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApigatewayListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}