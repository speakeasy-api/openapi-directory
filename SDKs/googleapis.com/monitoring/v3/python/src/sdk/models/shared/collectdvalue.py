"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import typedvalue as shared_typedvalue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CollectdValueDataSourceTypeEnum(str, Enum):
    r"""The type of measurement."""
    UNSPECIFIED_DATA_SOURCE_TYPE = 'UNSPECIFIED_DATA_SOURCE_TYPE'
    GAUGE = 'GAUGE'
    COUNTER = 'COUNTER'
    DERIVE = 'DERIVE'
    ABSOLUTE = 'ABSOLUTE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CollectdValue:
    r"""A single data point from a collectd-based plugin."""
    
    data_source_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceName'), 'exclude': lambda f: f is None }})
    r"""The data source for the collectd value. For example, there are two data sources for network measurements: \\"rx\\" and \\"tx\\"."""  
    data_source_type: Optional[CollectdValueDataSourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceType'), 'exclude': lambda f: f is None }})
    r"""The type of measurement."""  
    value: Optional[shared_typedvalue.TypedValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""A single strongly-typed value."""  
    