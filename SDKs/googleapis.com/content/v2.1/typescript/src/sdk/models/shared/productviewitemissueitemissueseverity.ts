/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ProductViewItemIssueIssueSeverityPerDestination } from "./productviewitemissueissueseverityperdestination";
import { Expose, Type } from "class-transformer";

/**
 * Severity of an issue aggregated for destination.
 */
export enum ProductViewItemIssueItemIssueSeverityAggregatedSeverityEnum {
  AggregatedIssueSeverityUnspecified = "AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED",
  Disapproved = "DISAPPROVED",
  Demoted = "DEMOTED",
  Pending = "PENDING",
}

/**
 * Severity of an issue per destination in a region, and aggregated severity.
 */
export class ProductViewItemIssueItemIssueSeverity extends SpeakeasyBase {
  /**
   * Severity of an issue aggregated for destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aggregatedSeverity" })
  aggregatedSeverity?: ProductViewItemIssueItemIssueSeverityAggregatedSeverityEnum;

  /**
   * Item issue severity for every destination.
   */
  @SpeakeasyMetadata({
    elemType: ProductViewItemIssueIssueSeverityPerDestination,
  })
  @Expose({ name: "severityPerDestination" })
  @Type(() => ProductViewItemIssueIssueSeverityPerDestination)
  severityPerDestination?: ProductViewItemIssueIssueSeverityPerDestination[];
}
