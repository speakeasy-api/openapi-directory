/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateWorkerReservationUpdateWorkerReservationRequest {
    /**
     * Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     */
    @SpeakeasyMetadata("form:name=Beep")
    public String beep;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withBeep(String beep) {
        this.beep = beep;
        return this;
    }
    
    /**
     * Whether to play a notification beep when the customer joins.
     */
    @SpeakeasyMetadata("form:name=BeepOnCustomerEntrance")
    public Boolean beepOnCustomerEntrance;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withBeepOnCustomerEntrance(Boolean beepOnCustomerEntrance) {
        this.beepOnCustomerEntrance = beepOnCustomerEntrance;
        return this;
    }
    
    /**
     * Whether to accept a reservation when executing a Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallAccept")
    public Boolean callAccept;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallAccept(Boolean callAccept) {
        this.callAccept = callAccept;
        return this;
    }
    
    /**
     * The Caller ID of the outbound call when executing a Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallFrom")
    public String callFrom;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallFrom(String callFrom) {
        this.callFrom = callFrom;
        return this;
    }
    
    /**
     * Whether to record both legs of a call when executing a Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallRecord")
    public String callRecord;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallRecord(String callRecord) {
        this.callRecord = callRecord;
        return this;
    }
    
    /**
     * The URL to call for the completed call event when executing a Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallStatusCallbackUrl")
    public String callStatusCallbackUrl;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallStatusCallbackUrl(String callStatusCallbackUrl) {
        this.callStatusCallbackUrl = callStatusCallbackUrl;
        return this;
    }
    
    /**
     * The timeout for a call when executing a Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallTimeout")
    public Long callTimeout;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallTimeout(Long callTimeout) {
        this.callTimeout = callTimeout;
        return this;
    }
    
    /**
     * The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     */
    @SpeakeasyMetadata("form:name=CallTo")
    public String callTo;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallTo(String callTo) {
        this.callTo = callTo;
        return this;
    }
    
    /**
     * TwiML URI executed on answering the worker's leg as a result of the Call instruction.
     */
    @SpeakeasyMetadata("form:name=CallUrl")
    public String callUrl;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withCallUrl(String callUrl) {
        this.callUrl = callUrl;
        return this;
    }
    
    /**
     * Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecord")
    public String conferenceRecord;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceRecord(String conferenceRecord) {
        this.conferenceRecord = conferenceRecord;
        return this;
    }
    
    /**
     * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecordingStatusCallback")
    public String conferenceRecordingStatusCallback;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceRecordingStatusCallback(String conferenceRecordingStatusCallback) {
        this.conferenceRecordingStatusCallback = conferenceRecordingStatusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=ConferenceRecordingStatusCallbackMethod")
    public UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum conferenceRecordingStatusCallbackMethod;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceRecordingStatusCallbackMethod(UpdateWorkerReservationUpdateWorkerReservationRequestConferenceRecordingStatusCallbackMethodEnum conferenceRecordingStatusCallbackMethod) {
        this.conferenceRecordingStatusCallbackMethod = conferenceRecordingStatusCallbackMethod;
        return this;
    }
    
    /**
     * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallback")
    public String conferenceStatusCallback;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceStatusCallback(String conferenceStatusCallback) {
        this.conferenceStatusCallback = conferenceStatusCallback;
        return this;
    }
    
    /**
     * The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallbackEvent")
    public org.openapis.openapi.models.shared.WorkerReservationEnumConferenceEventEnum[] conferenceStatusCallbackEvent;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceStatusCallbackEvent(org.openapis.openapi.models.shared.WorkerReservationEnumConferenceEventEnum[] conferenceStatusCallbackEvent) {
        this.conferenceStatusCallbackEvent = conferenceStatusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=ConferenceStatusCallbackMethod")
    public UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum conferenceStatusCallbackMethod;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceStatusCallbackMethod(UpdateWorkerReservationUpdateWorkerReservationRequestConferenceStatusCallbackMethodEnum conferenceStatusCallbackMethod) {
        this.conferenceStatusCallbackMethod = conferenceStatusCallbackMethod;
        return this;
    }
    
    /**
     * Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     */
    @SpeakeasyMetadata("form:name=ConferenceTrim")
    public String conferenceTrim;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withConferenceTrim(String conferenceTrim) {
        this.conferenceTrim = conferenceTrim;
        return this;
    }
    
    /**
     * The caller ID of the call to the worker when executing a Dequeue instruction.
     */
    @SpeakeasyMetadata("form:name=DequeueFrom")
    public String dequeueFrom;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueFrom(String dequeueFrom) {
        this.dequeueFrom = dequeueFrom;
        return this;
    }
    
    /**
     * The SID of the Activity resource to start after executing a Dequeue instruction.
     */
    @SpeakeasyMetadata("form:name=DequeuePostWorkActivitySid")
    public String dequeuePostWorkActivitySid;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeuePostWorkActivitySid(String dequeuePostWorkActivitySid) {
        this.dequeuePostWorkActivitySid = dequeuePostWorkActivitySid;
        return this;
    }
    
    /**
     * Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.
     */
    @SpeakeasyMetadata("form:name=DequeueRecord")
    public String dequeueRecord;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueRecord(String dequeueRecord) {
        this.dequeueRecord = dequeueRecord;
        return this;
    }
    
    /**
     * The call progress events sent via webhooks as a result of a Dequeue instruction.
     */
    @SpeakeasyMetadata("form:name=DequeueStatusCallbackEvent")
    public String[] dequeueStatusCallbackEvent;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueStatusCallbackEvent(String[] dequeueStatusCallbackEvent) {
        this.dequeueStatusCallbackEvent = dequeueStatusCallbackEvent;
        return this;
    }
    
    /**
     * The callback URL for completed call event when executing a Dequeue instruction.
     */
    @SpeakeasyMetadata("form:name=DequeueStatusCallbackUrl")
    public String dequeueStatusCallbackUrl;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueStatusCallbackUrl(String dequeueStatusCallbackUrl) {
        this.dequeueStatusCallbackUrl = dequeueStatusCallbackUrl;
        return this;
    }
    
    /**
     * The timeout for call when executing a Dequeue instruction.
     */
    @SpeakeasyMetadata("form:name=DequeueTimeout")
    public Long dequeueTimeout;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueTimeout(Long dequeueTimeout) {
        this.dequeueTimeout = dequeueTimeout;
        return this;
    }
    
    /**
     * The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     */
    @SpeakeasyMetadata("form:name=DequeueTo")
    public String dequeueTo;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withDequeueTo(String dequeueTo) {
        this.dequeueTo = dequeueTo;
        return this;
    }
    
    /**
     * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.
     */
    @SpeakeasyMetadata("form:name=EarlyMedia")
    public Boolean earlyMedia;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withEarlyMedia(Boolean earlyMedia) {
        this.earlyMedia = earlyMedia;
        return this;
    }
    
    /**
     * Whether to end the conference when the customer leaves.
     */
    @SpeakeasyMetadata("form:name=EndConferenceOnCustomerExit")
    public Boolean endConferenceOnCustomerExit;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withEndConferenceOnCustomerExit(Boolean endConferenceOnCustomerExit) {
        this.endConferenceOnCustomerExit = endConferenceOnCustomerExit;
        return this;
    }
    
    /**
     * Whether to end the conference when the agent leaves.
     */
    @SpeakeasyMetadata("form:name=EndConferenceOnExit")
    public Boolean endConferenceOnExit;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withEndConferenceOnExit(Boolean endConferenceOnExit) {
        this.endConferenceOnExit = endConferenceOnExit;
        return this;
    }
    
    /**
     * The caller ID of the call to the worker when executing a Conference instruction.
     */
    @SpeakeasyMetadata("form:name=From")
    public String from;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * The assignment instruction for the reservation.
     */
    @SpeakeasyMetadata("form:name=Instruction")
    public String instruction;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withInstruction(String instruction) {
        this.instruction = instruction;
        return this;
    }
    
    /**
     * The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     */
    @SpeakeasyMetadata("form:name=MaxParticipants")
    public Long maxParticipants;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withMaxParticipants(Long maxParticipants) {
        this.maxParticipants = maxParticipants;
        return this;
    }
    
    /**
     * Whether the agent is muted in the conference. Defaults to `false`.
     */
    @SpeakeasyMetadata("form:name=Muted")
    public Boolean muted;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withMuted(Boolean muted) {
        this.muted = muted;
        return this;
    }
    
    /**
     * The new worker activity SID after executing a Conference instruction.
     */
    @SpeakeasyMetadata("form:name=PostWorkActivitySid")
    public String postWorkActivitySid;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withPostWorkActivitySid(String postWorkActivitySid) {
        this.postWorkActivitySid = postWorkActivitySid;
        return this;
    }
    
    /**
     * Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     */
    @SpeakeasyMetadata("form:name=Record")
    public Boolean record;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRecord(Boolean record) {
        this.record = record;
        return this;
    }
    
    /**
     * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     */
    @SpeakeasyMetadata("form:name=RecordingChannels")
    public String recordingChannels;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRecordingChannels(String recordingChannels) {
        this.recordingChannels = recordingChannels;
        return this;
    }
    
    /**
     * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     */
    @SpeakeasyMetadata("form:name=RecordingStatusCallback")
    public String recordingStatusCallback;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRecordingStatusCallback(String recordingStatusCallback) {
        this.recordingStatusCallback = recordingStatusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     */
    @SpeakeasyMetadata("form:name=RecordingStatusCallbackMethod")
    public UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum recordingStatusCallbackMethod;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRecordingStatusCallbackMethod(UpdateWorkerReservationUpdateWorkerReservationRequestRecordingStatusCallbackMethodEnum recordingStatusCallbackMethod) {
        this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
        return this;
    }
    
    /**
     * Whether the reservation should be accepted when executing a Redirect instruction.
     */
    @SpeakeasyMetadata("form:name=RedirectAccept")
    public Boolean redirectAccept;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRedirectAccept(Boolean redirectAccept) {
        this.redirectAccept = redirectAccept;
        return this;
    }
    
    /**
     * The Call SID of the call parked in the queue when executing a Redirect instruction.
     */
    @SpeakeasyMetadata("form:name=RedirectCallSid")
    public String redirectCallSid;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRedirectCallSid(String redirectCallSid) {
        this.redirectCallSid = redirectCallSid;
        return this;
    }
    
    /**
     * TwiML URI to redirect the call to when executing the Redirect instruction.
     */
    @SpeakeasyMetadata("form:name=RedirectUrl")
    public String redirectUrl;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     */
    @SpeakeasyMetadata("form:name=Region")
    public String region;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withRegion(String region) {
        this.region = region;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=ReservationStatus")
    public org.openapis.openapi.models.shared.WorkerReservationEnumStatusEnum reservationStatus;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withReservationStatus(org.openapis.openapi.models.shared.WorkerReservationEnumStatusEnum reservationStatus) {
        this.reservationStatus = reservationStatus;
        return this;
    }
    
    /**
     * The SIP password for authentication.
     */
    @SpeakeasyMetadata("form:name=SipAuthPassword")
    public String sipAuthPassword;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withSipAuthPassword(String sipAuthPassword) {
        this.sipAuthPassword = sipAuthPassword;
        return this;
    }
    
    /**
     * The SIP username used for authentication.
     */
    @SpeakeasyMetadata("form:name=SipAuthUsername")
    public String sipAuthUsername;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withSipAuthUsername(String sipAuthUsername) {
        this.sipAuthUsername = sipAuthUsername;
        return this;
    }
    
    /**
     * Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     */
    @SpeakeasyMetadata("form:name=StartConferenceOnEnter")
    public Boolean startConferenceOnEnter;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withStartConferenceOnEnter(Boolean startConferenceOnEnter) {
        this.startConferenceOnEnter = startConferenceOnEnter;
        return this;
    }
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application.
     */
    @SpeakeasyMetadata("form:name=StatusCallback")
    public String statusCallback;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackEvent")
    public org.openapis.openapi.models.shared.WorkerReservationEnumCallStatusEnum[] statusCallbackEvent;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withStatusCallbackEvent(org.openapis.openapi.models.shared.WorkerReservationEnumCallStatusEnum[] statusCallbackEvent) {
        this.statusCallbackEvent = statusCallbackEvent;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     */
    @SpeakeasyMetadata("form:name=StatusCallbackMethod")
    public UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum statusCallbackMethod;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withStatusCallbackMethod(UpdateWorkerReservationUpdateWorkerReservationRequestStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * The timeout for a call when executing a Conference instruction.
     */
    @SpeakeasyMetadata("form:name=Timeout")
    public Long timeout;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withTimeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }
    
    /**
     * The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.
     */
    @SpeakeasyMetadata("form:name=To")
    public String to;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     */
    @SpeakeasyMetadata("form:name=WaitMethod")
    public UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum waitMethod;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withWaitMethod(UpdateWorkerReservationUpdateWorkerReservationRequestWaitMethodEnum waitMethod) {
        this.waitMethod = waitMethod;
        return this;
    }
    
    /**
     * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     */
    @SpeakeasyMetadata("form:name=WaitUrl")
    public String waitUrl;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withWaitUrl(String waitUrl) {
        this.waitUrl = waitUrl;
        return this;
    }
    
    /**
     * The new worker activity SID if rejecting a reservation.
     */
    @SpeakeasyMetadata("form:name=WorkerActivitySid")
    public String workerActivitySid;

    public UpdateWorkerReservationUpdateWorkerReservationRequest withWorkerActivitySid(String workerActivitySid) {
        this.workerActivitySid = workerActivitySid;
        return this;
    }
    
    public UpdateWorkerReservationUpdateWorkerReservationRequest(){}
}
