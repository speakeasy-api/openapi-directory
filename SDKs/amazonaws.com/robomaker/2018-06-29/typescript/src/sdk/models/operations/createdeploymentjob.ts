/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about a deployment configuration.
 */
export class CreateDeploymentJobRequestBodyDeploymentConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "concurrentDeploymentPercentage" })
  concurrentDeploymentPercentage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "downloadConditionFile" })
  @Type(() => shared.S3Object)
  downloadConditionFile?: shared.S3Object;

  @SpeakeasyMetadata()
  @Expose({ name: "failureThresholdPercentage" })
  failureThresholdPercentage?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "robotDeploymentTimeoutInSeconds" })
  robotDeploymentTimeoutInSeconds?: number;
}

export class CreateDeploymentJobRequestBody extends SpeakeasyBase {
  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken: string;

  /**
   * The deployment application configuration.
   */
  @SpeakeasyMetadata({ elemType: shared.DeploymentApplicationConfig })
  @Expose({ name: "deploymentApplicationConfigs" })
  @Type(() => shared.DeploymentApplicationConfig)
  deploymentApplicationConfigs: shared.DeploymentApplicationConfig[];

  /**
   * Information about a deployment configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deploymentConfig" })
  @Type(() => CreateDeploymentJobRequestBodyDeploymentConfig)
  deploymentConfig?: CreateDeploymentJobRequestBodyDeploymentConfig;

  /**
   * The Amazon Resource Name (ARN) of the fleet to deploy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fleet" })
  fleet: string;

  /**
   * A map that contains tag keys and tag values that are attached to the deployment job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateDeploymentJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDeploymentJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateDeploymentJobResponse extends SpeakeasyBase {
  /**
   * ConcurrentDeploymentException
   */
  @SpeakeasyMetadata()
  concurrentDeploymentException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDeploymentJobResponse?: shared.CreateDeploymentJobResponse;

  /**
   * IdempotentParameterMismatchException
   */
  @SpeakeasyMetadata()
  idempotentParameterMismatchException?: any;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
