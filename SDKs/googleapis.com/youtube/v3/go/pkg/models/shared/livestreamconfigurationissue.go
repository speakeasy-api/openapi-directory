// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LiveStreamConfigurationIssueSeverityEnum - How severe this issue is to the stream.
type LiveStreamConfigurationIssueSeverityEnum string

const (
	LiveStreamConfigurationIssueSeverityEnumInfo    LiveStreamConfigurationIssueSeverityEnum = "info"
	LiveStreamConfigurationIssueSeverityEnumWarning LiveStreamConfigurationIssueSeverityEnum = "warning"
	LiveStreamConfigurationIssueSeverityEnumError   LiveStreamConfigurationIssueSeverityEnum = "error"
)

func (e LiveStreamConfigurationIssueSeverityEnum) ToPointer() *LiveStreamConfigurationIssueSeverityEnum {
	return &e
}

func (e *LiveStreamConfigurationIssueSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warning":
		fallthrough
	case "error":
		*e = LiveStreamConfigurationIssueSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveStreamConfigurationIssueSeverityEnum: %v", v)
	}
}

// LiveStreamConfigurationIssueTypeEnum - The kind of error happening.
type LiveStreamConfigurationIssueTypeEnum string

const (
	LiveStreamConfigurationIssueTypeEnumGopSizeOver                      LiveStreamConfigurationIssueTypeEnum = "gopSizeOver"
	LiveStreamConfigurationIssueTypeEnumGopSizeLong                      LiveStreamConfigurationIssueTypeEnum = "gopSizeLong"
	LiveStreamConfigurationIssueTypeEnumGopSizeShort                     LiveStreamConfigurationIssueTypeEnum = "gopSizeShort"
	LiveStreamConfigurationIssueTypeEnumOpenGop                          LiveStreamConfigurationIssueTypeEnum = "openGop"
	LiveStreamConfigurationIssueTypeEnumBadContainer                     LiveStreamConfigurationIssueTypeEnum = "badContainer"
	LiveStreamConfigurationIssueTypeEnumAudioBitrateHigh                 LiveStreamConfigurationIssueTypeEnum = "audioBitrateHigh"
	LiveStreamConfigurationIssueTypeEnumAudioBitrateLow                  LiveStreamConfigurationIssueTypeEnum = "audioBitrateLow"
	LiveStreamConfigurationIssueTypeEnumAudioSampleRate                  LiveStreamConfigurationIssueTypeEnum = "audioSampleRate"
	LiveStreamConfigurationIssueTypeEnumBitrateHigh                      LiveStreamConfigurationIssueTypeEnum = "bitrateHigh"
	LiveStreamConfigurationIssueTypeEnumBitrateLow                       LiveStreamConfigurationIssueTypeEnum = "bitrateLow"
	LiveStreamConfigurationIssueTypeEnumAudioCodec                       LiveStreamConfigurationIssueTypeEnum = "audioCodec"
	LiveStreamConfigurationIssueTypeEnumVideoCodec                       LiveStreamConfigurationIssueTypeEnum = "videoCodec"
	LiveStreamConfigurationIssueTypeEnumNoAudioStream                    LiveStreamConfigurationIssueTypeEnum = "noAudioStream"
	LiveStreamConfigurationIssueTypeEnumNoVideoStream                    LiveStreamConfigurationIssueTypeEnum = "noVideoStream"
	LiveStreamConfigurationIssueTypeEnumMultipleVideoStreams             LiveStreamConfigurationIssueTypeEnum = "multipleVideoStreams"
	LiveStreamConfigurationIssueTypeEnumMultipleAudioStreams             LiveStreamConfigurationIssueTypeEnum = "multipleAudioStreams"
	LiveStreamConfigurationIssueTypeEnumAudioTooManyChannels             LiveStreamConfigurationIssueTypeEnum = "audioTooManyChannels"
	LiveStreamConfigurationIssueTypeEnumInterlacedVideo                  LiveStreamConfigurationIssueTypeEnum = "interlacedVideo"
	LiveStreamConfigurationIssueTypeEnumFrameRateHigh                    LiveStreamConfigurationIssueTypeEnum = "frameRateHigh"
	LiveStreamConfigurationIssueTypeEnumResolutionMismatch               LiveStreamConfigurationIssueTypeEnum = "resolutionMismatch"
	LiveStreamConfigurationIssueTypeEnumVideoCodecMismatch               LiveStreamConfigurationIssueTypeEnum = "videoCodecMismatch"
	LiveStreamConfigurationIssueTypeEnumVideoInterlaceMismatch           LiveStreamConfigurationIssueTypeEnum = "videoInterlaceMismatch"
	LiveStreamConfigurationIssueTypeEnumVideoProfileMismatch             LiveStreamConfigurationIssueTypeEnum = "videoProfileMismatch"
	LiveStreamConfigurationIssueTypeEnumVideoBitrateMismatch             LiveStreamConfigurationIssueTypeEnum = "videoBitrateMismatch"
	LiveStreamConfigurationIssueTypeEnumFramerateMismatch                LiveStreamConfigurationIssueTypeEnum = "framerateMismatch"
	LiveStreamConfigurationIssueTypeEnumGopMismatch                      LiveStreamConfigurationIssueTypeEnum = "gopMismatch"
	LiveStreamConfigurationIssueTypeEnumAudioSampleRateMismatch          LiveStreamConfigurationIssueTypeEnum = "audioSampleRateMismatch"
	LiveStreamConfigurationIssueTypeEnumAudioStereoMismatch              LiveStreamConfigurationIssueTypeEnum = "audioStereoMismatch"
	LiveStreamConfigurationIssueTypeEnumAudioCodecMismatch               LiveStreamConfigurationIssueTypeEnum = "audioCodecMismatch"
	LiveStreamConfigurationIssueTypeEnumAudioBitrateMismatch             LiveStreamConfigurationIssueTypeEnum = "audioBitrateMismatch"
	LiveStreamConfigurationIssueTypeEnumVideoResolutionSuboptimal        LiveStreamConfigurationIssueTypeEnum = "videoResolutionSuboptimal"
	LiveStreamConfigurationIssueTypeEnumVideoResolutionUnsupported       LiveStreamConfigurationIssueTypeEnum = "videoResolutionUnsupported"
	LiveStreamConfigurationIssueTypeEnumVideoIngestionStarved            LiveStreamConfigurationIssueTypeEnum = "videoIngestionStarved"
	LiveStreamConfigurationIssueTypeEnumVideoIngestionFasterThanRealtime LiveStreamConfigurationIssueTypeEnum = "videoIngestionFasterThanRealtime"
)

func (e LiveStreamConfigurationIssueTypeEnum) ToPointer() *LiveStreamConfigurationIssueTypeEnum {
	return &e
}

func (e *LiveStreamConfigurationIssueTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gopSizeOver":
		fallthrough
	case "gopSizeLong":
		fallthrough
	case "gopSizeShort":
		fallthrough
	case "openGop":
		fallthrough
	case "badContainer":
		fallthrough
	case "audioBitrateHigh":
		fallthrough
	case "audioBitrateLow":
		fallthrough
	case "audioSampleRate":
		fallthrough
	case "bitrateHigh":
		fallthrough
	case "bitrateLow":
		fallthrough
	case "audioCodec":
		fallthrough
	case "videoCodec":
		fallthrough
	case "noAudioStream":
		fallthrough
	case "noVideoStream":
		fallthrough
	case "multipleVideoStreams":
		fallthrough
	case "multipleAudioStreams":
		fallthrough
	case "audioTooManyChannels":
		fallthrough
	case "interlacedVideo":
		fallthrough
	case "frameRateHigh":
		fallthrough
	case "resolutionMismatch":
		fallthrough
	case "videoCodecMismatch":
		fallthrough
	case "videoInterlaceMismatch":
		fallthrough
	case "videoProfileMismatch":
		fallthrough
	case "videoBitrateMismatch":
		fallthrough
	case "framerateMismatch":
		fallthrough
	case "gopMismatch":
		fallthrough
	case "audioSampleRateMismatch":
		fallthrough
	case "audioStereoMismatch":
		fallthrough
	case "audioCodecMismatch":
		fallthrough
	case "audioBitrateMismatch":
		fallthrough
	case "videoResolutionSuboptimal":
		fallthrough
	case "videoResolutionUnsupported":
		fallthrough
	case "videoIngestionStarved":
		fallthrough
	case "videoIngestionFasterThanRealtime":
		*e = LiveStreamConfigurationIssueTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveStreamConfigurationIssueTypeEnum: %v", v)
	}
}

type LiveStreamConfigurationIssue struct {
	// The long-form description of the issue and how to resolve it.
	Description *string `json:"description,omitempty"`
	// The short-form reason for this issue.
	Reason *string `json:"reason,omitempty"`
	// How severe this issue is to the stream.
	Severity *LiveStreamConfigurationIssueSeverityEnum `json:"severity,omitempty"`
	// The kind of error happening.
	Type *LiveStreamConfigurationIssueTypeEnum `json:"type,omitempty"`
}
