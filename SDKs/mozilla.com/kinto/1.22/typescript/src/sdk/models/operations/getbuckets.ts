/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetBucketsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Match",
  })
  ifMatch?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-None-Match",
  })
  ifNoneMatch?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_before",
  })
  before?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=_fields",
  })
  fields?: string[];

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_limit",
  })
  limit?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_since",
  })
  since?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=_sort",
  })
  sort?: string[];

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=_to" })
  to?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=_token",
  })
  token?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=id" })
  id?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=last_modified",
  })
  lastModified?: number;
}

/**
 * The request is invalid.
 */
export class GetBucketsErrorSchema extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: number;

  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  details?: any;

  @SpeakeasyMetadata()
  @Expose({ name: "errno" })
  errno: number;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error: string;

  @SpeakeasyMetadata()
  @Expose({ name: "info" })
  info?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class GetBucketsSchemaData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "collection:schema" })
  collectionSchema?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "group:schema" })
  groupSchema?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "record:schema" })
  recordSchema?: Record<string, any>;
}

/**
 * Return a list of matching objects.
 */
export class GetBucketsSchema extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetBucketsSchemaData })
  @Expose({ name: "data" })
  @Type(() => GetBucketsSchemaData)
  data?: GetBucketsSchemaData[];
}

export class GetBucketsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The request is invalid.
   */
  @SpeakeasyMetadata()
  errorSchema?: GetBucketsErrorSchema;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  /**
   * Return a list of matching objects.
   */
  @SpeakeasyMetadata()
  schema?: GetBucketsSchema;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
