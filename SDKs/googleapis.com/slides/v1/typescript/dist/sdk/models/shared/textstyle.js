"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextStyle = exports.TextStyleBaselineOffsetEnum = void 0;
var utils_1 = require("../../../internal/utils");
var dimension_1 = require("./dimension");
var link_1 = require("./link");
var optionalcolor_1 = require("./optionalcolor");
var weightedfontfamily_1 = require("./weightedfontfamily");
var class_transformer_1 = require("class-transformer");
/**
 * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.
 */
var TextStyleBaselineOffsetEnum;
(function (TextStyleBaselineOffsetEnum) {
    TextStyleBaselineOffsetEnum["BaselineOffsetUnspecified"] = "BASELINE_OFFSET_UNSPECIFIED";
    TextStyleBaselineOffsetEnum["None"] = "NONE";
    TextStyleBaselineOffsetEnum["Superscript"] = "SUPERSCRIPT";
    TextStyleBaselineOffsetEnum["Subscript"] = "SUBSCRIPT";
})(TextStyleBaselineOffsetEnum = exports.TextStyleBaselineOffsetEnum || (exports.TextStyleBaselineOffsetEnum = {}));
/**
 * Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.
 */
var TextStyle = /** @class */ (function (_super) {
    __extends(TextStyle, _super);
    function TextStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "backgroundColor" }),
        (0, class_transformer_1.Type)(function () { return optionalcolor_1.OptionalColor; }),
        __metadata("design:type", optionalcolor_1.OptionalColor)
    ], TextStyle.prototype, "backgroundColor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baselineOffset" }),
        __metadata("design:type", String)
    ], TextStyle.prototype, "baselineOffset", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bold" }),
        __metadata("design:type", Boolean)
    ], TextStyle.prototype, "bold", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fontFamily" }),
        __metadata("design:type", String)
    ], TextStyle.prototype, "fontFamily", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fontSize" }),
        (0, class_transformer_1.Type)(function () { return dimension_1.Dimension; }),
        __metadata("design:type", dimension_1.Dimension)
    ], TextStyle.prototype, "fontSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "foregroundColor" }),
        (0, class_transformer_1.Type)(function () { return optionalcolor_1.OptionalColor; }),
        __metadata("design:type", optionalcolor_1.OptionalColor)
    ], TextStyle.prototype, "foregroundColor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "italic" }),
        __metadata("design:type", Boolean)
    ], TextStyle.prototype, "italic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "link" }),
        (0, class_transformer_1.Type)(function () { return link_1.Link; }),
        __metadata("design:type", link_1.Link)
    ], TextStyle.prototype, "link", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "smallCaps" }),
        __metadata("design:type", Boolean)
    ], TextStyle.prototype, "smallCaps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "strikethrough" }),
        __metadata("design:type", Boolean)
    ], TextStyle.prototype, "strikethrough", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "underline" }),
        __metadata("design:type", Boolean)
    ], TextStyle.prototype, "underline", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "weightedFontFamily" }),
        (0, class_transformer_1.Type)(function () { return weightedfontfamily_1.WeightedFontFamily; }),
        __metadata("design:type", weightedfontfamily_1.WeightedFontFamily)
    ], TextStyle.prototype, "weightedFontFamily", void 0);
    return TextStyle;
}(utils_1.SpeakeasyBase));
exports.TextStyle = TextStyle;
