<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PricesAndFixedPrices 
{
	
	public const GET_COMPUTED_PRICEBYPRICETABLE_SERVERS = [
		'https://api.vtex.com/{account}/pricing',
	];

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create or Update Base Price or Fixed Prices
     * 
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
     * 
     *  <p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>
     * 
     * ```json
     * {
     *     "markup": 30,
     *     "basePrice": 100,
     *     "listPrice": 35,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31,
     *             "listPrice": 32,
     *             "minQuantity": 1,
     *             "dateRange": {
     *                 "from": "2022-05-21T22:00:00Z",
     *                 "to": "2023-05-28T22:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "1",
     *             "value": 31.5,
     *             "listPrice": 33,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceResponse
     */
	public function createUpdatePriceOrFixedPrice(
        \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}', \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePriceOrFixedPriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete Price
     * 
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePriceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePriceResponse
     */
	public function deletePrice(
        \OpenAPI\OpenAPI\Models\Operations\DeletePriceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}', \OpenAPI\OpenAPI\Models\Operations\DeletePriceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete Fixed Prices on a price table or trade policy
     * 
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyResponse
     */
	public function deletefixedpricesonapricetableortradepolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}/fixed/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletefixedpricesonapricetableortradepolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Computed Price by price table or trade policy
     * 
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy. 
     * 
     * ## Response body example
     * 
     * ```json
     * {
     *     "tradePolicyId": "1",
     *     "listPrice": 30,
     *     "costPrice": 76.92,
     *     "sellingPrice": 18.9,
     *     "priceValidUntil": "2018-12-20T18:12:14Z"
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableRequest $request
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableResponse
     */
	public function getComputedPricebypricetable(
        \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableRequest $request,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableResponse
    {
        $baseUrl = PricesAndFixedPrices::GET_COMPUTED_PRICEBYPRICETABLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}/computed/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetComputedPricebypricetableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getcomputedprice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Getcomputedprice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Fixed Prices
     * 
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
     * 
     *  The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
     * 
     *  Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
     * 
     *  Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
     * 
     *  ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-03:00"
     *         }
     *     }
     * ]
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesResponse
     */
	public function getFixedPrices(
        \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}/fixed', \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fixedPrices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FixedPrice>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Fixed Prices on a price table or trade policy
     * 
     * Retrieves all Fixed Prices on a price table or trade policy. 
     * 
     * ## Response body example
     * 
     * ```json
     * [
     *     {
     *         "tradePolicyId": "6",
     *         "value": 20.9,
     *         "listPrice": 22.9,
     *         "minQuantity": 1,
     *         "dateRange": {
     *             "from": "2021-12-30T22:00:00-03:00",
     *             "to": "2021-12-30T22:00:00-04:00"
     *         }
     *     },
     *     {
     *         "tradePolicyId": "1",
     *         "value": 18.9,
     *         "listPrice": null,
     *         "minQuantity": 1
     *     }
     * ]
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableResponse
     */
	public function getFixedPricesonapricetable(
        \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}/fixed/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFixedPricesonapricetableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fixedPrices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FixedPrice>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Price
     * 
     * Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
     * 
     *  ## Response body example
     * 
     * ```json
     * {
     *     "itemId": "1",
     *     "listPrice": 50,
     *     "costPrice": 90,
     *     "markup": 30,
     *     "basePrice": 117,
     *     "fixedPrices": [
     *         {
     *             "tradePolicyId": "1",
     *             "value": 50.5,
     *             "listPrice": 50.5,
     *             "minQuantity": 2,
     *             "dateRange": {
     *                 "from": "2021-12-31T01:00:00Z",
     *                 "to": "2022-12-31T01:00:00Z"
     *             }
     *         },
     *         {
     *             "tradePolicyId": "2",
     *             "value": 30,
     *             "listPrice": 50,
     *             "minQuantity": 2
     *         }
     *     ]
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPriceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPriceResponse
     */
	public function getPrice(
        \OpenAPI\OpenAPI\Models\Operations\GetPriceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}', \OpenAPI\OpenAPI\Models\Operations\GetPriceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getprice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Getprice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or Update Fixed Prices on a price table or trade policy
     * 
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
     * 
     *  ## Request body example
     * 
     * ```json
     * [
     *   {
     *     "value": 50.5,
     *     "listPrice": 50.5,
     *     "minQuantity": 2,
     *     "dateRange": {
     *       "from": "2021-12-30T22:00:00-03:00",
     *       "to": "2021-12-30T22:00:00-04:00"
     *     }
     *   }
     * ]
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyResponse
     */
	public function createorupdatefixedpricesonpricetableortradepolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pricing/prices/{itemId}/fixed/{priceTableId}', \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateorupdatefixedpricesonpricetableortradepolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}