"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProjectDocument:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_project_document(self, request: operations.CreateProjectDocumentRequest) -> operations.CreateProjectDocumentResponse:
        r"""Upload a new document
        Upload a new document
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateProjectDocumentRequest, base_url, '/projects/{projectId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "document_updates", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out
        elif http_res.status_code in [400, 404, 405, 406, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_project_document(self, request: operations.DeleteProjectDocumentRequest) -> operations.DeleteProjectDocumentResponse:
        r"""Delete the document
        Delete the document
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProjectDocumentRequest, base_url, '/projects/{projectId}/documents/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [404, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_project_document(self, request: operations.DownloadProjectDocumentRequest) -> operations.DownloadProjectDocumentResponse:
        r"""Download a project source document
        Download an actual source file you uploaded to be translated in your project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadProjectDocumentRequest, base_url, '/projects/{projectId}/documents/{documentId}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadProjectDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.download_project_document_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def download_translated_document_for_language(self, request: operations.DownloadTranslatedDocumentForLanguageRequest) -> operations.DownloadTranslatedDocumentForLanguageResponse:
        r"""Download translated document
        Download translated document in the given target language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DownloadTranslatedDocumentForLanguageRequest, base_url, '/projects/{projectId}/documents/{documentId}/translations/download/{language}', request)
        
        query_params = utils.get_query_params(operations.DownloadTranslatedDocumentForLanguageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DownloadTranslatedDocumentForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.download_translated_document_for_language_200_application_octet_stream_binary_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project_document(self, request: operations.GetProjectDocumentRequest) -> operations.GetProjectDocumentResponse:
        r"""View a project source document
        View the details of a source file you uploaded to be translated in your project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectDocumentRequest, base_url, '/projects/{projectId}/documents/{documentId}', request)
        
        query_params = utils.get_query_params(operations.GetProjectDocumentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Document])
                res.document = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_project_documents(self, request: operations.GetProjectDocumentsRequest) -> operations.GetProjectDocumentsResponse:
        r"""View project source documents
        Get a list of source files you uploaded to be translated in your project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectDocumentsRequest, base_url, '/projects/{projectId}/documents', request)
        
        query_params = utils.get_query_params(operations.GetProjectDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_project_document_json(self, request: operations.UpdateProjectDocumentJSONRequest) -> operations.UpdateProjectDocumentJSONResponse:
        r"""Update the document.
        Update the document. File name and contents will replaced with the new one.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProjectDocumentJSONRequest, base_url, '/projects/{projectId}/documents/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "document_upload_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectDocumentJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Document])
                res.document = out
        elif http_res.status_code in [400, 404, 405, 406, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_project_document_multipart(self, request: operations.UpdateProjectDocumentMultipartRequest) -> operations.UpdateProjectDocumentMultipartResponse:
        r"""Update the document.
        Update the document. File name and contents will replaced with the new one.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProjectDocumentMultipartRequest, base_url, '/projects/{projectId}/documents/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "document_upload_request1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProjectDocumentMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Document])
                res.document = out
        elif http_res.status_code in [400, 404, 405, 406, 409]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    