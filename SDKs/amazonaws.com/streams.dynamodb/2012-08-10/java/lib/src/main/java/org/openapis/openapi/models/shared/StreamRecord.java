/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * StreamRecord - A description of a single data modification that was performed on an item in a DynamoDB table.
 */
public class StreamRecord {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("ApproximateCreationDateTime")
    public OffsetDateTime approximateCreationDateTime;

    public StreamRecord withApproximateCreationDateTime(OffsetDateTime approximateCreationDateTime) {
        this.approximateCreationDateTime = approximateCreationDateTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Keys")
    public java.util.Map<String, AttributeValue> keys;

    public StreamRecord withKeys(java.util.Map<String, AttributeValue> keys) {
        this.keys = keys;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NewImage")
    public java.util.Map<String, AttributeValue> newImage;

    public StreamRecord withNewImage(java.util.Map<String, AttributeValue> newImage) {
        this.newImage = newImage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OldImage")
    public java.util.Map<String, AttributeValue> oldImage;

    public StreamRecord withOldImage(java.util.Map<String, AttributeValue> oldImage) {
        this.oldImage = oldImage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SequenceNumber")
    public String sequenceNumber;

    public StreamRecord withSequenceNumber(String sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SizeBytes")
    public Long sizeBytes;

    public StreamRecord withSizeBytes(Long sizeBytes) {
        this.sizeBytes = sizeBytes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamViewType")
    public StreamViewTypeEnum streamViewType;

    public StreamRecord withStreamViewType(StreamViewTypeEnum streamViewType) {
        this.streamViewType = streamViewType;
        return this;
    }
    
    public StreamRecord(){}
}
