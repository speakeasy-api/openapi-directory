/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Definitions and configuration for the CRM cards your app can display.
 */
export class Cards {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a card
   *
   * @remarks
   * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
   */
  deleteCrmV3ExtensionsCardsAppIdCardIdArchive(
    req: operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveRequest,
    security: operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/crm/v3/extensions/cards/{appId}/{cardId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse =
        new operations.DeleteCrmV3ExtensionsCardsAppIdCardIdArchiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a card.
   *
   * @remarks
   * Returns the definition for a card with the given ID.
   */
  getCrmV3ExtensionsCardsAppIdCardIdGetById(
    req: operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdRequest,
    security: operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/crm/v3/extensions/cards/{appId}/{cardId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse =
        new operations.GetCrmV3ExtensionsCardsAppIdCardIdGetByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardResponse = utils.objectToClass(
              httpRes?.data,
              shared.CardResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all cards
   *
   * @remarks
   * Returns a list of cards for a given app.
   */
  getCrmV3ExtensionsCardsAppIdGetAll(
    req: operations.GetCrmV3ExtensionsCardsAppIdGetAllRequest,
    security: operations.GetCrmV3ExtensionsCardsAppIdGetAllSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCrmV3ExtensionsCardsAppIdGetAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCrmV3ExtensionsCardsAppIdGetAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/crm/v3/extensions/cards/{appId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetCrmV3ExtensionsCardsAppIdGetAllSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCrmV3ExtensionsCardsAppIdGetAllResponse =
        new operations.GetCrmV3ExtensionsCardsAppIdGetAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardListResponse = utils.objectToClass(
              httpRes?.data,
              shared.CardListResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a card
   *
   * @remarks
   * Update a card definition with new details.
   */
  patchCrmV3ExtensionsCardsAppIdCardIdUpdate(
    req: operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateRequest,
    security: operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/crm/v3/extensions/cards/{appId}/{cardId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cardPatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse =
        new operations.PatchCrmV3ExtensionsCardsAppIdCardIdUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardResponse = utils.objectToClass(
              httpRes?.data,
              shared.CardResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new card
   *
   * @remarks
   * Defines a new card that will become active on an account when this app is installed.
   */
  postCrmV3ExtensionsCardsAppIdCreate(
    req: operations.PostCrmV3ExtensionsCardsAppIdCreateRequest,
    security: operations.PostCrmV3ExtensionsCardsAppIdCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostCrmV3ExtensionsCardsAppIdCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostCrmV3ExtensionsCardsAppIdCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/crm/v3/extensions/cards/{appId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cardCreateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostCrmV3ExtensionsCardsAppIdCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostCrmV3ExtensionsCardsAppIdCreateResponse =
        new operations.PostCrmV3ExtensionsCardsAppIdCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cardResponse = utils.objectToClass(
              httpRes?.data,
              shared.CardResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
