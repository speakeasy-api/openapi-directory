// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateResolverRequestBodyCachingConfig - The caching configuration for a resolver that has caching activated.
type CreateResolverRequestBodyCachingConfig struct {
	CachingKeys []string `json:"cachingKeys,omitempty"`
	TTL         *int64   `json:"ttl,omitempty"`
}

// CreateResolverRequestBodyKindEnum - <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>
type CreateResolverRequestBodyKindEnum string

const (
	CreateResolverRequestBodyKindEnumUnit     CreateResolverRequestBodyKindEnum = "UNIT"
	CreateResolverRequestBodyKindEnumPipeline CreateResolverRequestBodyKindEnum = "PIPELINE"
)

func (e CreateResolverRequestBodyKindEnum) ToPointer() *CreateResolverRequestBodyKindEnum {
	return &e
}

func (e *CreateResolverRequestBodyKindEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNIT":
		fallthrough
	case "PIPELINE":
		*e = CreateResolverRequestBodyKindEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResolverRequestBodyKindEnum: %v", v)
	}
}

// CreateResolverRequestBodyPipelineConfig - The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
type CreateResolverRequestBodyPipelineConfig struct {
	Functions []string `json:"functions,omitempty"`
}

// CreateResolverRequestBodyRuntime - Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
type CreateResolverRequestBodyRuntime struct {
	Name           *shared.RuntimeNameEnum `json:"name,omitempty"`
	RuntimeVersion *string                 `json:"runtimeVersion,omitempty"`
}

// CreateResolverRequestBodySyncConfig - <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
type CreateResolverRequestBodySyncConfig struct {
	ConflictDetection           *shared.ConflictDetectionTypeEnum   `json:"conflictDetection,omitempty"`
	ConflictHandler             *shared.ConflictHandlerTypeEnum     `json:"conflictHandler,omitempty"`
	LambdaConflictHandlerConfig *shared.LambdaConflictHandlerConfig `json:"lambdaConflictHandlerConfig,omitempty"`
}

type CreateResolverRequestBody struct {
	// The caching configuration for a resolver that has caching activated.
	CachingConfig *CreateResolverRequestBodyCachingConfig `json:"cachingConfig,omitempty"`
	// The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.
	Code *string `json:"code,omitempty"`
	// The name of the data source for which the resolver is being created.
	DataSourceName *string `json:"dataSourceName,omitempty"`
	// The name of the field to attach the resolver to.
	FieldName string `json:"fieldName"`
	// <p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li> </ul>
	Kind *CreateResolverRequestBodyKindEnum `json:"kind,omitempty"`
	// The maximum batching size for a resolver.
	MaxBatchSize *int64 `json:"maxBatchSize,omitempty"`
	// The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
	PipelineConfig *CreateResolverRequestBodyPipelineConfig `json:"pipelineConfig,omitempty"`
	// <p>The mapping template to use for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p> <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
	RequestMappingTemplate *string `json:"requestMappingTemplate,omitempty"`
	// The mapping template to use for responses from the data source.
	ResponseMappingTemplate *string `json:"responseMappingTemplate,omitempty"`
	// Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
	Runtime *CreateResolverRequestBodyRuntime `json:"runtime,omitempty"`
	// <p>Describes a Sync configuration for a resolver.</p> <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.</p>
	SyncConfig *CreateResolverRequestBodySyncConfig `json:"syncConfig,omitempty"`
}

type CreateResolverRequest struct {
	RequestBody       CreateResolverRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID for the GraphQL API for which the resolver is being created.
	APIID string `pathParam:"style=simple,explode=false,name=apiId"`
	// The name of the <code>Type</code>.
	TypeName string `pathParam:"style=simple,explode=false,name=typeName"`
}

type CreateResolverResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateResolverResponse *shared.CreateResolverResponse
	// InternalFailureException
	InternalFailureException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
