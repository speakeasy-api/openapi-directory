/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class RestMethod {
    /**
     * Description of this method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public RestMethod withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etagRequired")
    public Boolean etagRequired;
    public RestMethod withEtagRequired(Boolean etagRequired) {
        this.etagRequired = etagRequired;
        return this;
    }
    
    /**
     * The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flatPath")
    public String flatPath;
    public RestMethod withFlatPath(String flatPath) {
        this.flatPath = flatPath;
        return this;
    }
    
    /**
     * HTTP method used by this method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpMethod")
    public String httpMethod;
    public RestMethod withHttpMethod(String httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }
    
    /**
     * A unique ID for this method. This property can be used to match methods between different versions of Discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public RestMethod withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Media upload parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaUpload")
    public RestMethodMediaUpload mediaUpload;
    public RestMethod withMediaUpload(RestMethodMediaUpload mediaUpload) {
        this.mediaUpload = mediaUpload;
        return this;
    }
    
    /**
     * Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameterOrder")
    public String[] parameterOrder;
    public RestMethod withParameterOrder(String[] parameterOrder) {
        this.parameterOrder = parameterOrder;
        return this;
    }
    
    /**
     * Details for all parameters in this method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public java.util.Map<String, JsonSchema> parameters;
    public RestMethod withParameters(java.util.Map<String, JsonSchema> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;
    public RestMethod withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The schema for the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request")
    public RestMethodRequest request;
    public RestMethod withRequest(RestMethodRequest request) {
        this.request = request;
        return this;
    }
    
    /**
     * The schema for the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response")
    public RestMethodResponse response;
    public RestMethod withResponse(RestMethodResponse response) {
        this.response = response;
        return this;
    }
    
    /**
     * OAuth 2.0 scopes applicable to this method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;
    public RestMethod withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * Whether this method supports media downloads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportsMediaDownload")
    public Boolean supportsMediaDownload;
    public RestMethod withSupportsMediaDownload(Boolean supportsMediaDownload) {
        this.supportsMediaDownload = supportsMediaDownload;
        return this;
    }
    
    /**
     * Whether this method supports media uploads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportsMediaUpload")
    public Boolean supportsMediaUpload;
    public RestMethod withSupportsMediaUpload(Boolean supportsMediaUpload) {
        this.supportsMediaUpload = supportsMediaUpload;
        return this;
    }
    
    /**
     * Whether this method supports subscriptions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportsSubscription")
    public Boolean supportsSubscription;
    public RestMethod withSupportsSubscription(Boolean supportsSubscription) {
        this.supportsSubscription = supportsSubscription;
        return this;
    }
    
    /**
     * Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useMediaDownloadService")
    public Boolean useMediaDownloadService;
    public RestMethod withUseMediaDownloadService(Boolean useMediaDownloadService) {
        this.useMediaDownloadService = useMediaDownloadService;
        return this;
    }
    
}
