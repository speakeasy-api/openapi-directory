"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import state as shared_state
from ..shared import updatedetectormodelresponse as shared_updatedetectormodelresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDetectorModelRequestBodyDetectorModelDefinition:
    r"""Information that defines how a detector operates."""
    
    initial_state_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialStateName'), 'exclude': lambda f: f is None }})  
    states: Optional[list[shared_state.State]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('states'), 'exclude': lambda f: f is None }})  
    
class UpdateDetectorModelRequestBodyEvaluationMethodEnum(str, Enum):
    r"""Information about the order in which events are evaluated and how actions are executed."""
    BATCH = 'BATCH'
    SERIAL = 'SERIAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDetectorModelRequestBody:
    
    detector_model_definition: UpdateDetectorModelRequestBodyDetectorModelDefinition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectorModelDefinition') }})
    r"""Information that defines how a detector operates."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The ARN of the role that grants permission to AWS IoT Events to perform its operations."""  
    detector_model_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectorModelDescription'), 'exclude': lambda f: f is None }})
    r"""A brief description of the detector model."""  
    evaluation_method: Optional[UpdateDetectorModelRequestBodyEvaluationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluationMethod'), 'exclude': lambda f: f is None }})
    r"""Information about the order in which events are evaluated and how actions are executed."""  
    

@dataclasses.dataclass
class UpdateDetectorModelRequest:
    
    detector_model_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'detectorModelName', 'style': 'simple', 'explode': False }})
    r"""The name of the detector model that is updated."""  
    request_body: UpdateDetectorModelRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDetectorModelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_detector_model_response: Optional[shared_updatedetectormodelresponse.UpdateDetectorModelResponse] = dataclasses.field(default=None)
    r"""Success"""  
    