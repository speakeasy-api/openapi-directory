// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SavingsPlansFilterNameEnum string

const (
	SavingsPlansFilterNameEnumRegion            SavingsPlansFilterNameEnum = "region"
	SavingsPlansFilterNameEnumEc2InstanceFamily SavingsPlansFilterNameEnum = "ec2-instance-family"
	SavingsPlansFilterNameEnumCommitment        SavingsPlansFilterNameEnum = "commitment"
	SavingsPlansFilterNameEnumUpfront           SavingsPlansFilterNameEnum = "upfront"
	SavingsPlansFilterNameEnumTerm              SavingsPlansFilterNameEnum = "term"
	SavingsPlansFilterNameEnumSavingsPlanType   SavingsPlansFilterNameEnum = "savings-plan-type"
	SavingsPlansFilterNameEnumPaymentOption     SavingsPlansFilterNameEnum = "payment-option"
	SavingsPlansFilterNameEnumStart             SavingsPlansFilterNameEnum = "start"
	SavingsPlansFilterNameEnumEnd               SavingsPlansFilterNameEnum = "end"
)

func (e SavingsPlansFilterNameEnum) ToPointer() *SavingsPlansFilterNameEnum {
	return &e
}

func (e *SavingsPlansFilterNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "region":
		fallthrough
	case "ec2-instance-family":
		fallthrough
	case "commitment":
		fallthrough
	case "upfront":
		fallthrough
	case "term":
		fallthrough
	case "savings-plan-type":
		fallthrough
	case "payment-option":
		fallthrough
	case "start":
		fallthrough
	case "end":
		*e = SavingsPlansFilterNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavingsPlansFilterNameEnum: %v", v)
	}
}
