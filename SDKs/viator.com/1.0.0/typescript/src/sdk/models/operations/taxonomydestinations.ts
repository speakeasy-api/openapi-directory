/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TaxonomyDestinationsRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;
}

export class TaxonomyDestinations200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **currency code** for the currency in which pricing is displayed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultCurrencyCode" })
  defaultCurrencyCode?: string;

  /**
   * **unique numeric identifier** of the destination
   *
   * @remarks
   * - use this value as the `destId` input field for other Viator API services
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationId" })
  destinationId?: number;

  /**
   * **natural-language name** of the destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationName" })
  destinationName?: string;

  /**
   * **destination type specifier**
   *
   * @remarks
   * - `"COUNTRY"`: destination is a country
   * - `"REGION"`: destination is a recognized region of a country, such as a state, island within a country, stretch of coastline, etc.
   * - `"CITY"`: destination is a city
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationType" })
  destinationType?: shared.DestinationTypeEnum;

  /**
   * ignore - (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationUrlName" })
  destinationUrlName?: string;

  /**
   * **IATA airport code** for the destination
   *
   * @remarks
   * - a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world
   * - the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier'
   * - the IATA code is &lt;u&gt;not available&lt;/u&gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iataCode" })
  iataCode?: string;

  /**
   * **latitude component** of the destination's geolocation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude?: number;

  /**
   * **longitude component** of the destination's geolocation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude?: number;

  /**
   * **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes
   *
   * @remarks
   * - e.g. `'8.77.673'` for Chicago
   * - format: [top level `parentId`].[any additional `parentId`].[`destinationId`]
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lookupId" })
  lookupId?: string;

  /**
   * **unique numeric identifier** of the destination's parent destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: number;

  /**
   * ignore - (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selectable" })
  selectable?: boolean;

  /**
   * **sort order** for this response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **time zone** of the destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeZone" })
  timeZone?: string;
}

/**
 * Success
 */
export class TaxonomyDestinations200ApplicationJSON extends SpeakeasyBase {
  /**
   * **array** of destination objects
   */
  @SpeakeasyMetadata({ elemType: TaxonomyDestinations200ApplicationJSONData })
  @Expose({ name: "data" })
  @Type(() => TaxonomyDestinations200ApplicationJSONData)
  data?: TaxonomyDestinations200ApplicationJSONData[];

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class TaxonomyDestinationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  taxonomyDestinations200ApplicationJSONObject?: TaxonomyDestinations200ApplicationJSON;
}
