/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new HMAC key for the specified service account.
   */
  storageProjectsHmacKeysCreate(
    req: operations.StorageProjectsHmacKeysCreateRequest,
    security: operations.StorageProjectsHmacKeysCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsHmacKeysCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsHmacKeysCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/hmacKeys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsHmacKeysCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsHmacKeysCreateResponse =
        new operations.StorageProjectsHmacKeysCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hmacKey = utils.objectToClass(httpRes?.data, shared.HmacKey);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an HMAC key.
   */
  storageProjectsHmacKeysDelete(
    req: operations.StorageProjectsHmacKeysDeleteRequest,
    security: operations.StorageProjectsHmacKeysDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsHmacKeysDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsHmacKeysDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/hmacKeys/{accessId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsHmacKeysDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsHmacKeysDeleteResponse =
        new operations.StorageProjectsHmacKeysDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves an HMAC key's metadata
   */
  storageProjectsHmacKeysGet(
    req: operations.StorageProjectsHmacKeysGetRequest,
    security: operations.StorageProjectsHmacKeysGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsHmacKeysGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsHmacKeysGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/hmacKeys/{accessId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsHmacKeysGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsHmacKeysGetResponse =
        new operations.StorageProjectsHmacKeysGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hmacKeyMetadata = utils.objectToClass(
              httpRes?.data,
              shared.HmacKeyMetadata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of HMAC keys matching the criteria.
   */
  storageProjectsHmacKeysList(
    req: operations.StorageProjectsHmacKeysListRequest,
    security: operations.StorageProjectsHmacKeysListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsHmacKeysListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsHmacKeysListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/hmacKeys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsHmacKeysListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsHmacKeysListResponse =
        new operations.StorageProjectsHmacKeysListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hmacKeysMetadata = utils.objectToClass(
              httpRes?.data,
              shared.HmacKeysMetadata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
   */
  storageProjectsHmacKeysUpdate(
    req: operations.StorageProjectsHmacKeysUpdateRequest,
    security: operations.StorageProjectsHmacKeysUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsHmacKeysUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsHmacKeysUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/hmacKeys/{accessId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "hmacKeyMetadata",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsHmacKeysUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsHmacKeysUpdateResponse =
        new operations.StorageProjectsHmacKeysUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hmacKeyMetadata = utils.objectToClass(
              httpRes?.data,
              shared.HmacKeyMetadata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the email address of this project's Google Cloud Storage service account.
   */
  storageProjectsServiceAccountGet(
    req: operations.StorageProjectsServiceAccountGetRequest,
    security: operations.StorageProjectsServiceAccountGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.StorageProjectsServiceAccountGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StorageProjectsServiceAccountGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{projectId}/serviceAccount",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.StorageProjectsServiceAccountGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StorageProjectsServiceAccountGetResponse =
        new operations.StorageProjectsServiceAccountGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceAccount = utils.objectToClass(
              httpRes?.data,
              shared.ServiceAccount
            );
          }
          break;
      }

      return res;
    });
  }
}
