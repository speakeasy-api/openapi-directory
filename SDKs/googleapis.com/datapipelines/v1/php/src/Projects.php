<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a pipeline. For a batch pipeline, you can pass scheduler information. Data Pipelines uses the scheduler information to create an internal scheduler that runs jobs periodically. If the internal scheduler is not configured, you can use RunPipeline to run jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateResponse
     */
	public function datapipelinesProjectsLocationsPipelinesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/pipelines', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatapipelinesV1PipelineInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1Pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1Pipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a pipeline. If a scheduler job is attached to the pipeline, it will be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteResponse
     */
	public function datapipelinesProjectsLocationsPipelinesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up a single pipeline. Returns a "NOT_FOUND" error if no such pipeline exists. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetResponse
     */
	public function datapipelinesProjectsLocationsPipelinesGet(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1Pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1Pipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists jobs for a given pipeline. Throws a "FORBIDDEN" error if the caller doesn't have permission to access it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListResponse
     */
	public function datapipelinesProjectsLocationsPipelinesJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1ListJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists pipelines. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListResponse
     */
	public function datapipelinesProjectsLocationsPipelinesList(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/pipelines', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1ListPipelinesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1ListPipelinesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a pipeline. If successful, the updated Pipeline is returned. Returns `NOT_FOUND` if the pipeline doesn't exist. If UpdatePipeline does not return successfully, you can retry the UpdatePipeline request until you receive a successful response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchResponse
     */
	public function datapipelinesProjectsLocationsPipelinesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDatapipelinesV1PipelineInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1Pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1Pipeline', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a job for the specified pipeline directly. You can use this method when the internal scheduler is not configured and you want to trigger the job directly or through an external system. Returns a "NOT_FOUND" error if the pipeline doesn't exist. Returns a "FORBIDDEN" error if the user doesn't have permission to access the pipeline or run jobs for the pipeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunResponse
     */
	public function datapipelinesProjectsLocationsPipelinesRun(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1RunPipelineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1RunPipelineResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Freezes pipeline execution permanently. If there's a corresponding scheduler entry, it's deleted, and the pipeline state is changed to "ARCHIVED". However, pipeline metadata is retained.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopResponse
     */
	public function datapipelinesProjectsLocationsPipelinesStop(
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DatapipelinesProjectsLocationsPipelinesStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDatapipelinesV1Pipeline = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDatapipelinesV1Pipeline', 'json');
            }
        }

        return $response;
    }
}