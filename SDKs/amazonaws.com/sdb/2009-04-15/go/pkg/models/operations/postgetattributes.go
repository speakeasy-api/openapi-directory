// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTGetAttributesActionEnum
type POSTGetAttributesActionEnum string

const (
	POSTGetAttributesActionEnumGetAttributes POSTGetAttributesActionEnum = "GetAttributes"
)

func (e *POSTGetAttributesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetAttributes":
		*e = POSTGetAttributesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetAttributesActionEnum: %s", s)
	}
}

// POSTGetAttributesVersionEnum
type POSTGetAttributesVersionEnum string

const (
	POSTGetAttributesVersionEnumTwoThousandAndNine0415 POSTGetAttributesVersionEnum = "2009-04-15"
)

func (e *POSTGetAttributesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2009-04-15":
		*e = POSTGetAttributesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetAttributesVersionEnum: %s", s)
	}
}

type POSTGetAttributesRequest struct {
	AWSAccessKeyID   string                       `queryParam:"style=form,explode=true,name=AWSAccessKeyId"`
	Action           POSTGetAttributesActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody      []byte                       `request:"mediaType=text/xml"`
	Signature        string                       `queryParam:"style=form,explode=true,name=Signature"`
	SignatureMethod  string                       `queryParam:"style=form,explode=true,name=SignatureMethod"`
	SignatureVersion string                       `queryParam:"style=form,explode=true,name=SignatureVersion"`
	Timestamp        string                       `queryParam:"style=form,explode=true,name=Timestamp"`
	Version          POSTGetAttributesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTGetAttributesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
