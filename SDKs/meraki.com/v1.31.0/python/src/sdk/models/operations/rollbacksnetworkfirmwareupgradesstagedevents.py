"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyReasonsCategoryEnum(str, Enum):
    r"""Reason for the rollback"""
    BROKE_OLD_FEATURES = 'broke old features'
    OTHER = 'other'
    PERFORMANCE = 'performance'
    STABILITY = 'stability'
    TESTING = 'testing'
    UNIFYING_NETWORKS_VERSIONS = 'unifying networks versions'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyReasons:
    
    category: RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyReasonsCategoryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""Reason for the rollback"""  
    comment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment') }})
    r"""Additional comment about the rollback"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStagesGroup:
    r"""The Staged Upgrade Group containing the name and ID"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Staged Upgrade Group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStagesMilestones:
    r"""The Staged Upgrade Milestones for the specific stage"""
    
    scheduled_for: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledFor') }})
    r"""The start time of the staged upgrade stage. (In ISO-8601 format, in the time zone of the network.)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStages:
    
    group: Optional[RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStagesGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The Staged Upgrade Group containing the name and ID"""  
    milestones: Optional[RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStagesMilestones] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones'), 'exclude': lambda f: f is None }})
    r"""The Staged Upgrade Milestones for the specific stage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequestBody:
    
    stages: list[RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyStages] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stages') }})
    r"""All completed or in-progress stages in the network with their new start times. All pending stages will be canceled"""  
    reasons: Optional[list[RollbacksNetworkFirmwareUpgradesStagedEventsRequestBodyReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons'), 'exclude': lambda f: f is None }})
    r"""The reason for rolling back the staged upgrade"""  
    

@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: RollbacksNetworkFirmwareUpgradesStagedEventsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitchNextUpgradeToVersion:
    r"""Details of the version the device will upgrade to"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the Version being upgraded to"""  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortName'), 'exclude': lambda f: f is None }})
    r"""Firmware version short name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitchNextUpgrade:
    r"""Details of the next firmware upgrade"""
    
    to_version: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitchNextUpgradeToVersion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toVersion'), 'exclude': lambda f: f is None }})
    r"""Details of the version the device will upgrade to"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitch:
    r"""The Switch network to be updated"""
    
    next_upgrade: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitchNextUpgrade] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextUpgrade'), 'exclude': lambda f: f is None }})
    r"""Details of the next firmware upgrade"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProducts:
    r"""The network devices to be updated"""
    
    switch: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProductsSwitch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch'), 'exclude': lambda f: f is None }})
    r"""The Switch network to be updated"""  
    
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONReasonsCategoryEnum(str, Enum):
    r"""Reason for the rollback"""
    BROKE_OLD_FEATURES = 'broke old features'
    OTHER = 'other'
    PERFORMANCE = 'performance'
    STABILITY = 'stability'
    TESTING = 'testing'
    UNIFYING_NETWORKS_VERSIONS = 'unifying networks versions'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONReasons:
    
    category: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONReasonsCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Reason for the rollback"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Additional comment about the rollback"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStagesGroup:
    r"""The staged upgrade group"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Staged Upgrade Group"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the Staged Upgrade Group"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Staged Upgrade Group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStagesMilestones:
    r"""The Staged Upgrade Milestones for the stage"""
    
    canceled_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceledAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time that the group was canceled"""  
    completed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Finish time for the group"""  
    scheduled_for: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledFor'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Scheduled start time for the group"""  
    started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start time for the group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStages:
    
    group: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStagesGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The staged upgrade group"""  
    milestones: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStagesMilestones] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestones'), 'exclude': lambda f: f is None }})
    r"""The Staged Upgrade Milestones for the stage"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current upgrade status of the group"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON:
    r"""Successful operation"""
    
    products: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONProducts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})
    r"""The network devices to be updated"""  
    reasons: Optional[list[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONReasons]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasons'), 'exclude': lambda f: f is None }})
    r"""Reasons for the rollback"""  
    stages: Optional[list[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSONStages]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stages'), 'exclude': lambda f: f is None }})
    r"""The ordered stages in the network"""  
    

@dataclasses.dataclass
class RollbacksNetworkFirmwareUpgradesStagedEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    rollbacks_network_firmware_upgrades_staged_events_200_application_json_object: Optional[RollbacksNetworkFirmwareUpgradesStagedEvents200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    