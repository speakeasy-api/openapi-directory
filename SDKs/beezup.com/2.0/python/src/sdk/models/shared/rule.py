"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import optimisationactionname_enum as shared_optimisationactionname_enum
from ..shared import rulelastexecutionstatus_enum as shared_rulelastexecutionstatus_enum
from ..shared import rulelinks as shared_rulelinks
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Rule:
    r"""Get Rule"""
    
    action_name: shared_optimisationactionname_enum.OptimisationActionNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionName') }})
    r"""The optimisation action"""  
    enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled') }})
    r"""Is the rule enabled"""  
    links: shared_rulelinks.RuleLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})
    r"""Links to retrieve/action on other entities"""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})
    r"""Rule execution position"""  
    report_filter_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportFilterId') }})
    r"""Report filter identifier linked to the rule"""  
    rule_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleId') }})
    r"""The identifier of the rule"""  
    rule_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleName') }})
    r"""The name of the rule"""  
    last_execution_status: Optional[shared_rulelastexecutionstatus_enum.RuleLastExecutionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastExecutionStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the last execution"""  
    last_execution_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastExecutionUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The utc date of the last execution"""  
    validity_end_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validityEndUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Rule validity end utc date"""  
    validity_start_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validityStartUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Rule validity start utc date"""  
    