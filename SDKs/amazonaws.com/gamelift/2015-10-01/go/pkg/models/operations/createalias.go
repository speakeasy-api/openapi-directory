// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAliasXAmzTargetEnum
type CreateAliasXAmzTargetEnum string

const (
	CreateAliasXAmzTargetEnumGameLiftCreateAlias CreateAliasXAmzTargetEnum = "GameLift.CreateAlias"
)

func (e *CreateAliasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GameLift.CreateAlias":
		*e = CreateAliasXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAliasXAmzTargetEnum: %s", s)
	}
}

type CreateAliasRequest struct {
	CreateAliasInput  shared.CreateAliasInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateAliasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAliasResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateAliasOutput *shared.CreateAliasOutput
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TaggingFailedException
	TaggingFailedException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
