// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum - Eligibility status of the Shopping Ads program.
type ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum string

const (
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumStateUnspecified ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "STATE_UNSPECIFIED"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumApproved         ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "APPROVED"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumDisapproved      ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "DISAPPROVED"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumWarning          ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "WARNING"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumUnderReview      ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "UNDER_REVIEW"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumPendingReview    ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "PENDING_REVIEW"
	ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnumOnboarding       ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum = "ONBOARDING"
)

func (e ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum) ToPointer() *ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum {
	return &e
}

func (e *ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "APPROVED":
		fallthrough
	case "DISAPPROVED":
		fallthrough
	case "WARNING":
		fallthrough
	case "UNDER_REVIEW":
		fallthrough
	case "PENDING_REVIEW":
		fallthrough
	case "ONBOARDING":
		*e = ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum: %v", v)
	}
}

// ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum - If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.
type ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum string

const (
	ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnumReviewEligibilityUnspecified ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum = "REVIEW_ELIGIBILITY_UNSPECIFIED"
	ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnumEligible                     ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum = "ELIGIBLE"
	ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnumIneligible                   ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum = "INELIGIBLE"
)

func (e ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum) ToPointer() *ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum {
	return &e
}

func (e *ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REVIEW_ELIGIBILITY_UNSPECIFIED":
		fallthrough
	case "ELIGIBLE":
		fallthrough
	case "INELIGIBLE":
		*e = ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum: %v", v)
	}
}

// ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum - Review ineligibility reason if account is not eligible for review.
type ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum string

const (
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumReviewIneligibilityReasonUnspecified ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "REVIEW_INELIGIBILITY_REASON_UNSPECIFIED"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumOnboardingIssues                     ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "ONBOARDING_ISSUES"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumNotEnoughOffers                      ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "NOT_ENOUGH_OFFERS"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumInCooldownPeriod                     ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "IN_COOLDOWN_PERIOD"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumAlreadyUnderReview                   ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "ALREADY_UNDER_REVIEW"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumNoReviewRequired                     ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "NO_REVIEW_REQUIRED"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumWillBeReviewedAutomatically          ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "WILL_BE_REVIEWED_AUTOMATICALLY"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumIsRetired                            ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "IS_RETIRED"
	ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnumAlreadyReviewed                      ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum = "ALREADY_REVIEWED"
)

func (e ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum) ToPointer() *ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum {
	return &e
}

func (e *ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REVIEW_INELIGIBILITY_REASON_UNSPECIFIED":
		fallthrough
	case "ONBOARDING_ISSUES":
		fallthrough
	case "NOT_ENOUGH_OFFERS":
		fallthrough
	case "IN_COOLDOWN_PERIOD":
		fallthrough
	case "ALREADY_UNDER_REVIEW":
		fallthrough
	case "NO_REVIEW_REQUIRED":
		fallthrough
	case "WILL_BE_REVIEWED_AUTOMATICALLY":
		fallthrough
	case "IS_RETIRED":
		fallthrough
	case "ALREADY_REVIEWED":
		*e = ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum: %v", v)
	}
}

// ShoppingAdsProgramStatusRegionStatus - Status of program and region.
type ShoppingAdsProgramStatusRegionStatus struct {
	// Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.
	DisapprovalDate *string `json:"disapprovalDate,omitempty"`
	// Eligibility status of the Shopping Ads program.
	EligibilityStatus *ShoppingAdsProgramStatusRegionStatusEligibilityStatusEnum `json:"eligibilityStatus,omitempty"`
	// Issues that must be fixed to be eligible for review.
	OnboardingIssues []string `json:"onboardingIssues,omitempty"`
	// The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.
	RegionCodes []string `json:"regionCodes,omitempty"`
	// If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.
	ReviewEligibilityStatus *ShoppingAdsProgramStatusRegionStatusReviewEligibilityStatusEnum `json:"reviewEligibilityStatus,omitempty"`
	// Review ineligibility reason if account is not eligible for review.
	ReviewIneligibilityReason *ShoppingAdsProgramStatusRegionStatusReviewIneligibilityReasonEnum `json:"reviewIneligibilityReason,omitempty"`
	// Reason a program in a specific region isnâ€™t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.
	ReviewIneligibilityReasonDescription *string `json:"reviewIneligibilityReasonDescription,omitempty"`
	// Additional details for review ineligibility reasons.
	ReviewIneligibilityReasonDetails *ShoppingAdsProgramStatusReviewIneligibilityReasonDetails `json:"reviewIneligibilityReasonDetails,omitempty"`
	// Issues evaluated in the review process. Fix all issues before requesting a review.
	ReviewIssues []string `json:"reviewIssues,omitempty"`
}
