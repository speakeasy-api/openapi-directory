/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.
 */
export enum ReportMeetingsTypeEnum {
  Past = "past",
  PastOne = "pastOne",
}

export class ReportMeetingsRequest extends SpeakeasyBase {
  /**
   * Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=from;dateTimeFormat=YYYY-MM-DD",
  })
  from: Date;

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * End date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=to;dateTimeFormat=YYYY-MM-DD",
  })
  to: Date;

  /**
   * The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: ReportMeetingsTypeEnum;

  /**
   * The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

export class ReportMeetings200ApplicationXMLMeetingsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the user.
   */
  @SpeakeasyMetadata()
  key?: string;

  /**
   * Value of the custom key associated with the user.
   */
  @SpeakeasyMetadata()
  value?: string;
}

export class ReportMeetings200ApplicationXMLMeetings extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: ReportMeetings200ApplicationXMLMeetingsCustomKeys,
  })
  customKeys?: ReportMeetings200ApplicationXMLMeetingsCustomKeys[];

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  duration?: number;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  endTime?: Date;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in "**long**" format(represented as int64
   *
   * @remarks
   * data type in JSON), also known as the meeting number.
   *
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  participantsCount?: number;

  /**
   * Indicates whether the meeting was created directly through Zoom or through an API request.
   */
  @SpeakeasyMetadata()
  source?: string;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  topic?: string;

  /**
   * Sum of meeting minutes from all participants in the meeting.
   */
  @SpeakeasyMetadata()
  totalMinutes?: number;

  /**
   *
   * @remarks
   * Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
   * `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
   * `8` - Recurring Meeting with a fixed time.
   */
  @SpeakeasyMetadata()
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  userName?: string;

  /**
   * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

/**
 * Pagination Object.
 */
export class ReportMeetings200ApplicationXML extends SpeakeasyBase {
  /**
   * Start date for this report.
   */
  @SpeakeasyMetadata()
  from?: Date;

  /**
   * Array of meeting objects.
   */
  @SpeakeasyMetadata({ elemType: ReportMeetings200ApplicationXMLMeetings })
  meetings?: ReportMeetings200ApplicationXMLMeetings[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  pageCount?: number;

  /**
   * **Deprecated**: This field has been deprecated. Please use the "next_page_token" field for pagination instead of this field.
   *
   * @remarks
   *
   * The page number of the current results.
   */
  @SpeakeasyMetadata()
  pageNumber?: number;

  /**
   * The number of records returned with a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  /**
   * End date for this report.
   */
  @SpeakeasyMetadata()
  to?: Date;

  /**
   * The total number of all the records available across pages.
   */
  @SpeakeasyMetadata()
  totalRecords?: number;
}

export class ReportMeetings200ApplicationJSONMeetingsCustomKeys extends SpeakeasyBase {
  /**
   * Custom key associated with the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Value of the custom key associated with the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class ReportMeetings200ApplicationJSONMeetings extends SpeakeasyBase {
  /**
   * Custom keys and values assigned to the meeting.
   */
  @SpeakeasyMetadata({
    elemType: ReportMeetings200ApplicationJSONMeetingsCustomKeys,
  })
  @Expose({ name: "custom_keys" })
  @Type(() => ReportMeetings200ApplicationJSONMeetingsCustomKeys)
  customKeys?: ReportMeetings200ApplicationJSONMeetingsCustomKeys[];

  /**
   * Meeting duration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  /**
   * Meeting end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-):            Unique identifier of the meeting in "**long**" format(represented as int64
   *
   * @remarks
   * data type in JSON), also known as the meeting number.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Number of meeting participants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_count" })
  participantsCount?: number;

  /**
   * Indicates whether the meeting was created directly through Zoom or through an API request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * Meeting start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Meeting topic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topic" })
  topic?: string;

  /**
   * Sum of meeting minutes from all participants in the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_minutes" })
  totalMinutes?: number;

  /**
   *
   * @remarks
   * Meeting Type:<br> `1` - Instant Meeting<br> `2` - Scheduled Meeting<br> `3` - Recurring Meeting with no fixed time.<br>
   * `4` - This value is returned if the meeting was started using a Personal Meeting ID. <br>
   * `8` - Recurring Meeting with a fixed time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: number;

  /**
   * User email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_email" })
  userEmail?: string;

  /**
   * User display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_name" })
  userName?: string;

  /**
   * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

/**
 * Pagination Object.
 */
export class ReportMeetings200ApplicationJSON extends SpeakeasyBase {
  /**
   * Start date for this report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  from?: Date;

  /**
   * Array of meeting objects.
   */
  @SpeakeasyMetadata({ elemType: ReportMeetings200ApplicationJSONMeetings })
  @Expose({ name: "meetings" })
  @Type(() => ReportMeetings200ApplicationJSONMeetings)
  meetings?: ReportMeetings200ApplicationJSONMeetings[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of pages returned for the request made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_count" })
  pageCount?: number;

  /**
   * **Deprecated**: This field has been deprecated. Please use the "next_page_token" field for pagination instead of this field.
   *
   * @remarks
   *
   * The page number of the current results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_number" })
  pageNumber?: number;

  /**
   * The number of records returned with a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * End date for this report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  to?: Date;

  /**
   * The total number of all the records available across pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

export class ReportMeetingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Active or inactive hosts report returned.<br>
   *
   */
  @SpeakeasyMetadata()
  reportMeetings200ApplicationJSONObject?: ReportMeetings200ApplicationJSON;
}
