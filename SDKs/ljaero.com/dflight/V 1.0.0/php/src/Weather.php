<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Weather 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve forecast values within given distance of location for all requested weather elements and time periods.
     * 
     * Retrieve forecast values for selected weather elements and time period. Request body parameters are:
     * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
     * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
     * * distance:  distance in meters (max allowed value is 25000)
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WxByDistanceUsV1WxForecastDistanceQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WxByDistanceUsV1WxForecastDistanceQueryPostResponse
     */
	public function wxByDistanceUsV1WxForecastDistanceQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\WxByDistanceUsV1WxForecastDistanceQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WxByDistanceUsV1WxForecastDistanceQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/wx-forecast/distance-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "wxByDistance", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WxByDistanceUsV1WxForecastDistanceQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wxDistanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WxDistanceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
     * 
     * Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are:
     * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WxByPolyUsV1WxForecastPolygonQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WxByPolyUsV1WxForecastPolygonQueryPostResponse
     */
	public function wxByPolyUsV1WxForecastPolygonQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\WxByPolyUsV1WxForecastPolygonQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WxByPolyUsV1WxForecastPolygonQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/wx-forecast/polygon-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "wxByPolygon", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WxByPolyUsV1WxForecastPolygonQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wxPolyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WxPolyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve forecast values along a route for all requested weather elements and time periods.
     * 
     * Retrieve forecast values along route for requested weather elements and time period. Request body parameters are:
     * * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
     * * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
     * 
     * 
     * The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
     * properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
     * * CIG: meters AGL
     * * DEWPT: degrees Celsius
     * * SKY: % cloud cover
     * * TEMP: degrees Celsius
     * * VIS: meters
     * * WINDDIR: degrees true
     * * WINDGUST: meters/sec
     * * WINDSPEED: meters/sec
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WxByRouteUsV1WxForecastRouteQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WxByRouteUsV1WxForecastRouteQueryPostResponse
     */
	public function wxByRouteUsV1WxForecastRouteQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\WxByRouteUsV1WxForecastRouteQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WxByRouteUsV1WxForecastRouteQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/wx-forecast/route-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "wxByRoute", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WxByRouteUsV1WxForecastRouteQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->wxRouteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WxRouteResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
}