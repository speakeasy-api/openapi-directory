"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SymptomSymptomTypeEnum(str, Enum):
    r"""Type of the Symptom."""
    SYMPTOM_TYPE_UNSPECIFIED = 'SYMPTOM_TYPE_UNSPECIFIED'
    LOW_MEMORY = 'LOW_MEMORY'
    OUT_OF_MEMORY = 'OUT_OF_MEMORY'
    EXECUTE_TIMED_OUT = 'EXECUTE_TIMED_OUT'
    MESH_BUILD_FAIL = 'MESH_BUILD_FAIL'
    HBM_OUT_OF_MEMORY = 'HBM_OUT_OF_MEMORY'
    PROJECT_ABUSE = 'PROJECT_ABUSE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Symptom:
    r"""A Symptom instance."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp when the Symptom is created."""  
    details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Detailed information of the current Symptom."""  
    symptom_type: Optional[SymptomSymptomTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symptomType'), 'exclude': lambda f: f is None }})
    r"""Type of the Symptom."""  
    worker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerId'), 'exclude': lambda f: f is None }})
    r"""A string used to uniquely distinguish a worker within a TPU node."""  
    