/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Category } from "./category";
import { Picture } from "./picture";
import { Tag } from "./tag";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

/**
 * Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.
 */
export class ChannelMetadataConnectionsPrivacyUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the users following or moderating this channel.
 */
export class ChannelMetadataConnectionsUsers extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of users on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Information about the videos that belong to this channel.
 */
export class ChannelMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of information that is connected to this resource.
 */
export class ChannelMetadataConnections extends SpeakeasyBase {
  /**
   * Information provided to channel moderators about which users they have specifically permitted to access a private channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy_users" })
  @Type(() => ChannelMetadataConnectionsPrivacyUsers)
  privacyUsers: ChannelMetadataConnectionsPrivacyUsers;

  /**
   * Information about the users following or moderating this channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  @Type(() => ChannelMetadataConnectionsUsers)
  users: ChannelMetadataConnectionsUsers;

  /**
   * Information about the videos that belong to this channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => ChannelMetadataConnectionsVideos)
  videos: ChannelMetadataConnectionsVideos;
}

/**
 * An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
 */
export class ChannelMetadataInteractionsAddModerators extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
 */
export class ChannelMetadataInteractionsAddTo extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `moderator` - The authenticated user is a moderator.
 *  * `subscriber` - The authenticated user is a subscriber.
 *
 */
export enum ChannelMetadataInteractionsFollowTypeEnum {
  Moderator = "moderator",
  Subscriber = "subscriber",
}

/**
 * An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
 */
export class ChannelMetadataInteractionsFollow extends SpeakeasyBase {
  /**
   * Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added: boolean;

  /**
   * The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_time" })
  addedTime: string;

  /**
   * Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `moderator` - The authenticated user is a moderator.
   *  * `subscriber` - The authenticated user is a subscriber.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: ChannelMetadataInteractionsFollowTypeEnum;

  /**
   * The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
 */
export class ChannelMetadataInteractionsModerateVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the channel.
 */
export class ChannelMetadataInteractions extends SpeakeasyBase {
  /**
   * An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_moderators" })
  @Type(() => ChannelMetadataInteractionsAddModerators)
  addModerators: ChannelMetadataInteractionsAddModerators;

  /**
   * When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_to" })
  @Type(() => ChannelMetadataInteractionsAddTo)
  addTo: ChannelMetadataInteractionsAddTo;

  /**
   * An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "follow" })
  @Type(() => ChannelMetadataInteractionsFollow)
  follow: ChannelMetadataInteractionsFollow;

  /**
   * An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "moderate_videos" })
  @Type(() => ChannelMetadataInteractionsModerateVideos)
  moderateVideos: ChannelMetadataInteractionsModerateVideos;
}

/**
 * Metadata about the channel.
 */
export class ChannelMetadata extends SpeakeasyBase {
  /**
   * A collection of information that is connected to this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => ChannelMetadataConnections)
  connections: ChannelMetadataConnections;

  /**
   * A list of resource URIs related to the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => ChannelMetadataInteractions)
  interactions: ChannelMetadataInteractions;
}

/**
 * Who can view the channel:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the channel.
 *  * `moderators` - Only moderators can view the channel.
 *  * `users` - Only registered users can view the channel.
 *
 */
export enum ChannelPrivacyViewEnum {
  Anybody = "anybody",
  Moderators = "moderators",
  Users = "users",
}

/**
 * The privacy settings of the channel.
 */
export class ChannelPrivacy extends SpeakeasyBase {
  /**
   * Who can view the channel:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the channel.
   *  * `moderators` - Only moderators can view the channel.
   *  * `users` - Only registered users can view the channel.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view: ChannelPrivacyViewEnum;
}

/**
 * The channel was created.
 */
export class Channel extends SpeakeasyBase {
  /**
   * The categories to which this channel belongs as specified by the channel moderators.
   */
  @SpeakeasyMetadata({ elemType: Category })
  @Expose({ name: "categories" })
  @Type(() => Category)
  categories: Category[];

  /**
   * The time in ISO 8601 format when the channel was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * A brief explanation of the channel's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The banner that appears by default at the top of the channel page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "header" })
  @Type(() => Picture)
  header: Picture;

  /**
   * The URL to access the channel in a browser.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * Metadata about the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => ChannelMetadata)
  metadata: ChannelMetadata;

  /**
   * The time in ISO 8601 format when the album was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The display name that identifies the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active image for the channel; defaults to the thumbnail of the last video added to the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  /**
   * The privacy settings of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => ChannelPrivacy)
  privacy: ChannelPrivacy;

  /**
   * The channel resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * An array of all tags assigned to this channel.
   */
  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags: Tag[];

  /**
   * The unique identifier to access the channel resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The Vimeo user who owns the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user: User;
}
