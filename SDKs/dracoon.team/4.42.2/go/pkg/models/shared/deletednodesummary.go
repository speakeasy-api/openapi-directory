// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DeletedNodeSummaryTypeEnum - Node type
type DeletedNodeSummaryTypeEnum string

const (
	DeletedNodeSummaryTypeEnumFolder DeletedNodeSummaryTypeEnum = "folder"
	DeletedNodeSummaryTypeEnumFile   DeletedNodeSummaryTypeEnum = "file"
)

func (e *DeletedNodeSummaryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "folder":
		fallthrough
	case "file":
		*e = DeletedNodeSummaryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletedNodeSummaryTypeEnum: %s", s)
	}
}

// DeletedNodeSummary - Deleted node information (Deleted node can be a folder or file)
type DeletedNodeSummary struct {
	// Number of deleted versions of this file
	CntVersions int `json:"cntVersions"`
	// First deleted version
	FirstDeletedAt time.Time `json:"firstDeletedAt"`
	// Last deleted version
	LastDeletedAt time.Time `json:"lastDeletedAt"`
	// Node ID of last deleted version
	LastDeletedNodeID int64 `json:"lastDeletedNodeId"`
	// Node name
	Name string `json:"name"`
	// Parent node ID (room or folder)
	ParentID int64 `json:"parentId"`
	// Parent node path
	//
	// `/` if node is a root node (room)
	ParentPath string `json:"parentPath"`
	// &#128640; Since v4.37.0
	//
	// Reference ID. Identical across all versions of a file
	ReferenceID *int64 `json:"referenceId,omitempty"`
	// &#128640; Since v4.22.0
	//
	// Time the node was created on external file system
	TimestampCreation *time.Time `json:"timestampCreation,omitempty"`
	// &#128640; Since v4.22.0
	//
	// Time the content of a node was last modified on external file system
	TimestampModification *time.Time `json:"timestampModification,omitempty"`
	// Node type
	Type DeletedNodeSummaryTypeEnum `json:"type"`
}
