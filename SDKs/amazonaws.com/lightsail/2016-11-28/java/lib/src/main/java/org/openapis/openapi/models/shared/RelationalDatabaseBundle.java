/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RelationalDatabaseBundle - Describes a database bundle. A bundle describes the performance specifications of the database.
 */
public class RelationalDatabaseBundle {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundleId")
    public String bundleId;

    public RelationalDatabaseBundle withBundleId(String bundleId) {
        this.bundleId = bundleId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuCount")
    public Long cpuCount;

    public RelationalDatabaseBundle withCpuCount(Long cpuCount) {
        this.cpuCount = cpuCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeInGb")
    public Long diskSizeInGb;

    public RelationalDatabaseBundle withDiskSizeInGb(Long diskSizeInGb) {
        this.diskSizeInGb = diskSizeInGb;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActive")
    public Boolean isActive;

    public RelationalDatabaseBundle withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEncrypted")
    public Boolean isEncrypted;

    public RelationalDatabaseBundle withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public RelationalDatabaseBundle withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Float price;

    public RelationalDatabaseBundle withPrice(Float price) {
        this.price = price;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ramSizeInGb")
    public Float ramSizeInGb;

    public RelationalDatabaseBundle withRamSizeInGb(Float ramSizeInGb) {
        this.ramSizeInGb = ramSizeInGb;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferPerMonthInGb")
    public Long transferPerMonthInGb;

    public RelationalDatabaseBundle withTransferPerMonthInGb(Long transferPerMonthInGb) {
        this.transferPerMonthInGb = transferPerMonthInGb;
        return this;
    }
    
    public RelationalDatabaseBundle(){}
}
