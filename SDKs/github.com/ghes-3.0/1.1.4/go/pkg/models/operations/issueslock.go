// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IssuesLockPathParams struct {
	// issue_number parameter
	IssueNumber int64  `pathParam:"style=simple,explode=false,name=issue_number"`
	Owner       string `pathParam:"style=simple,explode=false,name=owner"`
	Repo        string `pathParam:"style=simple,explode=false,name=repo"`
}

// IssuesLockRequestBodyLockReasonEnum - The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
// \* `off-topic`
// \* `too heated`
// \* `resolved`
// \* `spam`
type IssuesLockRequestBodyLockReasonEnum string

const (
	IssuesLockRequestBodyLockReasonEnumOffTopic  IssuesLockRequestBodyLockReasonEnum = "off-topic"
	IssuesLockRequestBodyLockReasonEnumTooHeated IssuesLockRequestBodyLockReasonEnum = "too heated"
	IssuesLockRequestBodyLockReasonEnumResolved  IssuesLockRequestBodyLockReasonEnum = "resolved"
	IssuesLockRequestBodyLockReasonEnumSpam      IssuesLockRequestBodyLockReasonEnum = "spam"
)

func (e *IssuesLockRequestBodyLockReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "off-topic":
		fallthrough
	case "too heated":
		fallthrough
	case "resolved":
		fallthrough
	case "spam":
		*e = IssuesLockRequestBodyLockReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesLockRequestBodyLockReasonEnum: %s", s)
	}
}

type IssuesLockRequestBody struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
	// \* `off-topic`
	// \* `too heated`
	// \* `resolved`
	// \* `spam`
	LockReason *IssuesLockRequestBodyLockReasonEnum `json:"lock_reason,omitempty"`
}

type IssuesLockRequest struct {
	PathParams IssuesLockPathParams
	Request    *IssuesLockRequestBody `request:"mediaType=application/json"`
}

type IssuesLockResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Validation failed
	ValidationError *shared.ValidationError
}
