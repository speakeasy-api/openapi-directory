"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/csgo/scores",
    "https://azure-api.sportsdata.io/v3/csgo/scores",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""CS:GO v3 Scores"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def areas_countries(self, request: operations.AreasCountriesRequest) -> operations.AreasCountriesResponse:
        r"""Areas (Countries)
        Areas (Countries)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AreasCountriesRequest, base_url, '/{format}/Areas', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreasCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Area]])
                res.areas = out

        return res

    def competition_fixtures_league_details(self, request: operations.CompetitionFixturesLeagueDetailsRequest) -> operations.CompetitionFixturesLeagueDetailsResponse:
        r"""Competition Fixtures (League Details)
        Competition Fixtures (League Details)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompetitionFixturesLeagueDetailsRequest, base_url, '/{format}/CompetitionDetails/{competitionid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompetitionFixturesLeagueDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompetitionDetail])
                res.competition_detail = out

        return res

    def competitions_leagues(self, request: operations.CompetitionsLeaguesRequest) -> operations.CompetitionsLeaguesResponse:
        r"""Competitions (Leagues)
        Competitions (Leagues)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompetitionsLeaguesRequest, base_url, '/{format}/Competitions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompetitionsLeaguesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Competition]])
                res.competitions = out

        return res

    def games_by_date(self, request: operations.GamesByDateRequest) -> operations.GamesByDateResponse:
        r"""Games by Date
        Games by Date
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesByDateRequest, base_url, '/{format}/GamesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def memberships_active(self, request: operations.MembershipsActiveRequest) -> operations.MembershipsActiveResponse:
        r"""Memberships (Active)
        Memberships (Active)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsActiveRequest, base_url, '/{format}/ActiveMemberships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_team_active(self, request: operations.MembershipsByTeamActiveRequest) -> operations.MembershipsByTeamActiveResponse:
        r"""Memberships by Team (Active)
        Memberships by Team (Active)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByTeamActiveRequest, base_url, '/{format}/MembershipsByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByTeamActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_by_team_historical(self, request: operations.MembershipsByTeamHistoricalRequest) -> operations.MembershipsByTeamHistoricalResponse:
        r"""Memberships by Team (Historical)
        Memberships by Team (Historical)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsByTeamHistoricalRequest, base_url, '/{format}/HistoricalMembershipsByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsByTeamHistoricalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def memberships_historical(self, request: operations.MembershipsHistoricalRequest) -> operations.MembershipsHistoricalResponse:
        r"""Memberships (Historical)
        Memberships (Historical)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MembershipsHistoricalRequest, base_url, '/{format}/HistoricalMemberships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MembershipsHistoricalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Membership]])
                res.memberships = out

        return res

    def player(self, request: operations.PlayerRequest) -> operations.PlayerResponse:
        r"""Player
        Player
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerRequest, base_url, '/{format}/Player/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Player])
                res.player = out

        return res

    def players(self, request: operations.PlayersRequest) -> operations.PlayersResponse:
        r"""Players
        Players
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayersRequest, base_url, '/{format}/Players', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def players_by_team(self, request: operations.PlayersByTeamRequest) -> operations.PlayersByTeamResponse:
        r"""Players by Team
        Players by Team
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayersByTeamRequest, base_url, '/{format}/PlayersByTeam/{teamid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayersByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def schedule(self, request: operations.ScheduleRequest) -> operations.ScheduleResponse:
        r"""Schedule
        Schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScheduleRequest, base_url, '/{format}/Schedule/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def season_teams(self, request: operations.SeasonTeamsRequest) -> operations.SeasonTeamsResponse:
        r"""Season Teams
        Season Teams
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SeasonTeamsRequest, base_url, '/{format}/SeasonTeams/{seasonid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SeasonTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SeasonTeam]])
                res.season_teams = out

        return res

    def standings(self, request: operations.StandingsRequest) -> operations.StandingsResponse:
        r"""Standings
        Schedule
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StandingsRequest, base_url, '/{format}/Standings/{roundid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StandingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Standing]])
                res.standings = out

        return res

    def teams(self, request: operations.TeamsRequest) -> operations.TeamsResponse:
        r"""Teams
        Teams
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsRequest, base_url, '/{format}/Teams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    def venues(self, request: operations.VenuesRequest) -> operations.VenuesResponse:
        r"""Venues
        Venues
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VenuesRequest, base_url, '/{format}/Venues', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VenuesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Venue]])
                res.venues = out

        return res

    