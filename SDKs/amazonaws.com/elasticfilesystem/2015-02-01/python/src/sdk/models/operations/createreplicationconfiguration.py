"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import destinationtocreate as shared_destinationtocreate
from ..shared import replicationconfigurationdescription as shared_replicationconfigurationdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateReplicationConfigurationRequestBody:
    
    destinations: list[shared_destinationtocreate.DestinationToCreate] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Destinations') }})
    r"""An array of destination configuration objects. Only one destination configuration object is supported."""  
    

@dataclasses.dataclass
class CreateReplicationConfigurationRequest:
    
    request_body: CreateReplicationConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    source_file_system_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'SourceFileSystemId', 'style': 'simple', 'explode': False }})
    r"""Specifies the Amazon EFS file system that you want to replicate. This file system cannot already be a source or destination file system in another replication configuration."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateReplicationConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequest"""  
    file_system_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""FileSystemLimitExceeded"""  
    file_system_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""FileSystemNotFound"""  
    incorrect_file_system_life_cycle_state: Optional[Any] = dataclasses.field(default=None)
    r"""IncorrectFileSystemLifeCycleState"""  
    insufficient_throughput_capacity: Optional[Any] = dataclasses.field(default=None)
    r"""InsufficientThroughputCapacity"""  
    internal_server_error: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerError"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    replication_configuration_description: Optional[shared_replicationconfigurationdescription.ReplicationConfigurationDescription] = dataclasses.field(default=None)
    r"""Success"""  
    replication_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""ReplicationNotFound"""  
    throughput_limit_exceeded: Optional[Any] = dataclasses.field(default=None)
    r"""ThroughputLimitExceeded"""  
    unsupported_availability_zone: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedAvailabilityZone"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    