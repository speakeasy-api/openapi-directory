"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuIDRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Describes the type of the content being sent."""  
    product_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'productId', 'style': 'simple', 'explode': False }})
    r"""Product unique number identifier."""  
    sku_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'skuId', 'style': 'simple', 'explode': False }})
    r"""Product unique number identifier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONMainImage:
    r"""General information of the main image of the SKU."""
    
    image_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageId') }})
    r"""Unique identifier of the association of the Image to the SKU."""  
    image_label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageLabel') }})
    r"""Image Label."""  
    image_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImagePath') }})
    r"""Image file path."""  
    image_tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageTag') }})
    r"""Image HTML tag."""  
    image_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageText') }})
    r"""General text of the image."""  
    is_main: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsMain') }})
    r"""If the image is the main image of the SKU or not."""  
    is_zoom_size: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsZoomSize') }})
    r"""If the image has zoom applied."""  
    last_modified: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModified') }})
    r"""Time that the image was last modified."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONOffersOffersPerSalesChannel:
    
    available_quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableQuantity') }})
    r"""SKU available quantity."""  
    is_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAvailable') }})
    r"""If the SKU is available or not."""  
    list_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListPrice') }})
    r"""SKU list price."""  
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price') }})
    r"""SKU price."""  
    price_without_discount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceWithoutDiscount') }})
    r"""SKU precie without discount."""  
    sale_channel: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaleChannel') }})
    r"""SKU trade policy."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONOffers:
    
    available_sales_channels: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableSalesChannels') }})
    r"""Trade policy that the SKU in contained."""  
    offers_per_sales_channel: list[GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONOffersOffersPerSalesChannel] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffersPerSalesChannel') }})
    r"""Offers per trade policy."""  
    seller_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerId') }})
    r"""Seller ID."""  
    seller_sku_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SellerSkuId') }})
    r"""ID of the association of the SKU with the seller."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSON:
    
    ean_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EanId') }})
    r"""SKU unique identification code (barcode), accepts up to 13 numerical characters."""  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsActive') }})
    r"""If the SKU is active or not."""  
    last_modified: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModified') }})
    r"""Time that the offer was last modified."""  
    main_image: GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONMainImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MainImage') }})
    r"""General information of the main image of the SKU."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""SKU name."""  
    name_complete: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NameComplete') }})
    r"""SKU complete name."""  
    offers: list[GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSONOffers] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Offers') }})
    r"""AKA Commertial Condition."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductId') }})
    r"""Product ID."""  
    ref_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefId') }})
    r"""Unique reference code used internally for organizational purposes."""  
    sku_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SkuId') }})
    r"""SKU ID."""  
    

@dataclasses.dataclass
class GetAPICatalogSystemPubProductsOffersProductIDSkuSkuIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_api_catalog_system_pub_products_offers_product_id_sku_sku_id_200_application_json_objects: Optional[list[GetAPICatalogSystemPubProductsOffersProductIDSkuSkuID200ApplicationJSON]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    