/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Filter - An expression to filter dimension or metric values.
 */
public class Filter {
    /**
     * To express that the result needs to be between two numbers (inclusive).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("betweenFilter")
    public BetweenFilter betweenFilter;
    public Filter withBetweenFilter(BetweenFilter betweenFilter) {
        this.betweenFilter = betweenFilter;
        return this;
    }
    
    /**
     * The dimension name or metric name. In most methods, dimensions &amp; metrics can be used for the first time in this field. However in a RunPivotReportRequest, this field must be additionally specified by name in the RunPivotReportRequest's dimensions or metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldName")
    public String fieldName;
    public Filter withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }
    
    /**
     * The result needs to be in a list of string values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inListFilter")
    public InListFilter inListFilter;
    public Filter withInListFilter(InListFilter inListFilter) {
        this.inListFilter = inListFilter;
        return this;
    }
    
    /**
     * Filters for numeric or date values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numericFilter")
    public NumericFilter numericFilter;
    public Filter withNumericFilter(NumericFilter numericFilter) {
        this.numericFilter = numericFilter;
        return this;
    }
    
    /**
     * The filter for string
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringFilter")
    public StringFilter stringFilter;
    public Filter withStringFilter(StringFilter stringFilter) {
        this.stringFilter = stringFilter;
        return this;
    }
    
}
