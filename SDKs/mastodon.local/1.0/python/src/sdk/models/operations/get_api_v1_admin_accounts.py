"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import adminaccount as shared_adminaccount
from typing import Optional


@dataclasses.dataclass
class GetAPIV1AdminAccountsSecurity:
    
    bearer_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetAPIV1AdminAccountsRequest:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'active', 'style': 'form', 'explode': True }})
    r"""Filter for currently active accounts?"""  
    by_domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'by_domain', 'style': 'form', 'explode': True }})
    r"""Filter by the given domain"""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'disabled', 'style': 'form', 'explode': True }})
    r"""Filter for currently disabled accounts?"""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'display_name', 'style': 'form', 'explode': True }})
    r"""Display name to search for"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""Lookup a user with this email"""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ip', 'style': 'form', 'explode': True }})
    r"""Lookup a user with this IP"""  
    local: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'local', 'style': 'form', 'explode': True }})
    r"""Filter for local accounts?"""  
    pending: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pending', 'style': 'form', 'explode': True }})
    r"""Filter for currently pending accounts?"""  
    remote: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'remote', 'style': 'form', 'explode': True }})
    r"""Filter for remote accounts?"""  
    silenced: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'silenced', 'style': 'form', 'explode': True }})
    r"""Filter for currently silenced accounts?"""  
    staff: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'staff', 'style': 'form', 'explode': True }})
    r"""Filter for staff accounts?"""  
    suspended: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'suspended', 'style': 'form', 'explode': True }})
    r"""Filter for currently suspended accounts?"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'username', 'style': 'form', 'explode': True }})
    r"""Username to search for"""  
    

@dataclasses.dataclass
class GetAPIV1AdminAccountsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    admin_accounts: Optional[list[shared_adminaccount.AdminAccount]] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    