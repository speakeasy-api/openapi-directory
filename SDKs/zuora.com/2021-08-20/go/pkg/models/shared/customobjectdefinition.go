// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CustomObjectDefinitionSchemaRelationshipsCardinalityEnum - The cardinality of the relationship from this object to another object.
//
// A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
//
// A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
type CustomObjectDefinitionSchemaRelationshipsCardinalityEnum string

const (
	CustomObjectDefinitionSchemaRelationshipsCardinalityEnumManyToOne CustomObjectDefinitionSchemaRelationshipsCardinalityEnum = "manyToOne"
	CustomObjectDefinitionSchemaRelationshipsCardinalityEnumOneToMany CustomObjectDefinitionSchemaRelationshipsCardinalityEnum = "oneToMany"
)

func (e *CustomObjectDefinitionSchemaRelationshipsCardinalityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manyToOne":
		fallthrough
	case "oneToMany":
		*e = CustomObjectDefinitionSchemaRelationshipsCardinalityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomObjectDefinitionSchemaRelationshipsCardinalityEnum: %s", s)
	}
}

type CustomObjectDefinitionSchemaRelationshipsRecordConstraintsCreate struct {
	// Specifies whether Zuora validates the values of mapped fields
	// in custom object records.
	//
	EnforceValidMapping *bool `json:"enforceValidMapping,omitempty"`
}

// CustomObjectDefinitionSchemaRelationshipsRecordConstraints - Specifies contraints to apply to custom object records.
type CustomObjectDefinitionSchemaRelationshipsRecordConstraints struct {
	Create *CustomObjectDefinitionSchemaRelationshipsRecordConstraintsCreate `json:"create,omitempty"`
}

type CustomObjectDefinitionSchemaRelationships struct {
	// The cardinality of the relationship from this object to another object.
	//
	// A `manyToOne` relationship means this object is the child object (the "many" side), and the referenced object (the "one" side) is the parent.
	//
	// A `oneToMany` relationship means this object is the parent object (the "one" side), and the referenced object (the "many" side) is the child.
	//
	Cardinality *CustomObjectDefinitionSchemaRelationshipsCardinalityEnum `json:"cardinality,omitempty"`
	// Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`.
	//
	Fields map[string]string `json:"fields,omitempty"`
	// The namespace where the related object is located
	Namespace *string `json:"namespace,omitempty"`
	// The API name of the related object
	Object *string `json:"object,omitempty"`
	// Specifies contraints to apply to custom object records.
	//
	RecordConstraints *CustomObjectDefinitionSchemaRelationshipsRecordConstraints `json:"recordConstraints,omitempty"`
}

// CustomObjectDefinitionSchemaTypeEnum - The custom object definition type. Can only be `object` currently.
type CustomObjectDefinitionSchemaTypeEnum string

const (
	CustomObjectDefinitionSchemaTypeEnumObject CustomObjectDefinitionSchemaTypeEnum = "object"
)

func (e *CustomObjectDefinitionSchemaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "object":
		*e = CustomObjectDefinitionSchemaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomObjectDefinitionSchemaTypeEnum: %s", s)
	}
}

// CustomObjectDefinitionSchema - The schema of the custom object definition
type CustomObjectDefinitionSchema struct {
	// The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.
	Filterable []string `json:"filterable,omitempty"`
	// A label for the custom object
	Label *string `json:"label,omitempty"`
	// The API name of the custom object
	Object *string `json:"object,omitempty"`
	// The definitions of all the fields in the custom object definition
	Properties map[string]CustomObjectCustomFieldDefinition `json:"properties,omitempty"`
	// An array of relationships with Zuora objects or other custom objects
	Relationships []CustomObjectDefinitionSchemaRelationships `json:"relationships,omitempty"`
	// The required fields of the custom object definition. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.
	Required []string `json:"required,omitempty"`
	// The custom object definition type. Can only be `object` currently.
	Type *CustomObjectDefinitionSchemaTypeEnum `json:"type,omitempty"`
}

// CustomObjectDefinition - OK
type CustomObjectDefinition struct {
	// The creator's Id
	CreatedByID *string `json:"CreatedById,omitempty"`
	// The creation time of the custom object definition in date-time format.
	CreatedDate *time.Time `json:"CreatedDate,omitempty"`
	// The unique Id of the custom object definition
	ID *string `json:"Id,omitempty"`
	// The modifier's Id
	UpdatedByID *string `json:"UpdatedById,omitempty"`
	// The update time of the custom object definition in date-time format.
	UpdatedDate *time.Time `json:"UpdatedDate,omitempty"`
	// The schema of the custom object definition
	Schema *CustomObjectDefinitionSchema `json:"schema,omitempty"`
	// The API name of the custom object
	Type *string `json:"type,omitempty"`
}
