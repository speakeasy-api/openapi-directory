/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * **sort order** in which to return the results that is *one of*:
 *
 * @remarks
 *   * `"SEO_PUBLISHED_DATE_D"`: publish date (descending)
 *   * `"SEO_PUBLISHED_DATE_A"`: publish date (ascending)
 *   * `"SEO_REVIEW_AVG_RATING_D"`: traveler rating (high→low)
 *   * `"SEO_REVIEW_AVG_RATING_A"`: traveler rating (low→high)
 *   * `"SEO_ALPHABETICAL"`: alphabetical (A→Z)
 *
 */
export enum TaxonomyAttractionsRequestBodySortOrderEnum {
  SeoPublishedDateD = "SEO_PUBLISHED_DATE_D",
  SeoPublishedDateA = "SEO_PUBLISHED_DATE_A",
  SeoReviewAvgRatingD = "SEO_REVIEW_AVG_RATING_D",
  SeoReviewAvgRatingA = "SEO_REVIEW_AVG_RATING_A",
  SeoAlphabetical = "SEO_ALPHABETICAL",
}

export class TaxonomyAttractionsRequestBody extends SpeakeasyBase {
  /**
   * **unique numeric identifier** of the destination in which to search for attractions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destId" })
  destId?: number;

  /**
   * **sort order** in which to return the results that is *one of*:
   *
   * @remarks
   *   * `"SEO_PUBLISHED_DATE_D"`: publish date (descending)
   *   * `"SEO_PUBLISHED_DATE_A"`: publish date (ascending)
   *   * `"SEO_REVIEW_AVG_RATING_D"`: traveler rating (high→low)
   *   * `"SEO_REVIEW_AVG_RATING_A"`: traveler rating (low→high)
   *   * `"SEO_ALPHABETICAL"`: alphabetical (A→Z)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: TaxonomyAttractionsRequestBodySortOrderEnum;

  /**
   * **start and end rows** to return in the format {start}-{end}
   *
   * @remarks
   * - e.g. `'1-10'`, `'11-20'`
   *
   * **Note**:
   * - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
   * - if `topX` is not specified, the default is `'1-100'`
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "topX" })
  topX?: string;
}

export class TaxonomyAttractionsRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: TaxonomyAttractionsRequestBody;
}

export class TaxonomyAttractions200ApplicationJSONData extends SpeakeasyBase {
  /**
   * **name** of the city in which the attraction is located
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attractionCity" })
  attractionCity?: string;

  /**
   * **latitude component** of the attraction's location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attractionLatitude" })
  attractionLatitude?: number;

  /**
   * **longitude component** of the attraction's location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attractionLongitude" })
  attractionLongitude?: number;

  /**
   * **name** of the state in which the attraction is located
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attractionState" })
  attractionState?: string;

  /**
   * **street address** of the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attractionStreetAddress" })
  attractionStreetAddress?: string;

  /**
   * **unique numeric identifier** of the the destination associated with the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationId" })
  destinationId?: number;

  /**
   * **URL-formatted title** of the attraction page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pageUrlName" })
  pageUrlName?: string;

  /**
   * **number** of user photos published for the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photoCount" })
  photoCount?: number;

  /**
   * **unique numeric identifier** of the attraction's primary destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryDestinationId" })
  primaryDestinationId?: number;

  /**
   * **natural-language name** of the attraction's primary destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryDestinationName" })
  primaryDestinationName?: string;

  /**
   * **URL-formatted name** of the destination associated with *this* attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryDestinationUrlName" })
  primaryDestinationUrlName?: string;

  /**
   * **number** of products associated with the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCount" })
  productCount?: number;

  /**
   * **conventionally-formatted date** on which the attraction was listed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishedDate" })
  publishedDate?: string;

  /**
   * **average user rating** of the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating?: number;

  /**
   * **unique numeric identifier** of the attraction
   *
   * @remarks
   * - use as an input for [/search/products](#operation/searchProducts)
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "seoId" })
  seoId?: number;

  /**
   * **sort order** of *this* listing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: number;

  /**
   * **URL** for the attraction's high-resolution thumbnail image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnailHiResURL" })
  thumbnailHiResURL?: string;

  /**
   * **URL** the attraction's thumbnail image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnailURL" })
  thumbnailURL?: string;

  /**
   * **natural-language title** of the attraction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webURL" })
  webURL?: string;
}

/**
 * Success
 */
export class TaxonomyAttractions200ApplicationJSON extends SpeakeasyBase {
  /**
   * **array** of attraction objects
   */
  @SpeakeasyMetadata({ elemType: TaxonomyAttractions200ApplicationJSONData })
  @Expose({ name: "data" })
  @Type(() => TaxonomyAttractions200ApplicationJSONData)
  data?: TaxonomyAttractions200ApplicationJSONData[];

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class TaxonomyAttractionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  taxonomyAttractions200ApplicationJSONObject?: TaxonomyAttractions200ApplicationJSON;
}
