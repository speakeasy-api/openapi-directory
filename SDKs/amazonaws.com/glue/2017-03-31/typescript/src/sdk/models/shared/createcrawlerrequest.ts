/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CrawlerTargets } from "./crawlertargets";
import { LakeFormationConfiguration } from "./lakeformationconfiguration";
import { LineageConfiguration } from "./lineageconfiguration";
import { RecrawlPolicy } from "./recrawlpolicy";
import { SchemaChangePolicy } from "./schemachangepolicy";
import { Expose, Type } from "class-transformer";

export class CreateCrawlerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Classifiers" })
  classifiers?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Configuration" })
  configuration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CrawlerSecurityConfiguration" })
  crawlerSecurityConfiguration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DatabaseName" })
  databaseName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LakeFormationConfiguration" })
  @Type(() => LakeFormationConfiguration)
  lakeFormationConfiguration?: LakeFormationConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "LineageConfiguration" })
  @Type(() => LineageConfiguration)
  lineageConfiguration?: LineageConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RecrawlPolicy" })
  @Type(() => RecrawlPolicy)
  recrawlPolicy?: RecrawlPolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "Role" })
  role: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Schedule" })
  schedule?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SchemaChangePolicy" })
  @Type(() => SchemaChangePolicy)
  schemaChangePolicy?: SchemaChangePolicy;

  @SpeakeasyMetadata()
  @Expose({ name: "TablePrefix" })
  tablePrefix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Targets" })
  @Type(() => CrawlerTargets)
  targets: CrawlerTargets;
}
