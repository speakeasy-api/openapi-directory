// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateNetworkSwitchSettingsQosRulePathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum - The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
type CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum string

const (
	CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnumAny CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum = "ANY"
	CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnumTCP CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum = "TCP"
	CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnumUDP CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum = "UDP"
)

func (e *CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ANY":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum: %s", s)
	}
}

type CreateNetworkSwitchSettingsQosRuleRequestBody struct {
	// DSCP tag. Set this to -1 to trust incoming DSCP. Default value is 0
	Dscp *int64 `json:"dscp,omitempty"`
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort *int64 `json:"dstPort,omitempty"`
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange *string `json:"dstPortRange,omitempty"`
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY"
	Protocol *CreateNetworkSwitchSettingsQosRuleRequestBodyProtocolEnum `json:"protocol,omitempty"`
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort *int64 `json:"srcPort,omitempty"`
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange *string `json:"srcPortRange,omitempty"`
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan int64 `json:"vlan"`
}

type CreateNetworkSwitchSettingsQosRuleRequest struct {
	PathParams CreateNetworkSwitchSettingsQosRulePathParams
	Request    CreateNetworkSwitchSettingsQosRuleRequestBody `request:"mediaType=application/json"`
}

type CreateNetworkSwitchSettingsQosRuleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkSwitchSettingsQosRule201ApplicationJSONObject map[string]interface{}
}
