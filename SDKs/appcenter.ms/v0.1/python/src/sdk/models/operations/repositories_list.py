"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class RepositoriesListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class RepositoriesListFormEnum(str, Enum):
    r"""The selected form of the object"""
    LITE = 'lite'
    FULL = 'full'

class RepositoriesListSourceHostEnum(str, Enum):
    r"""The source host"""
    GITHUB = 'github'
    BITBUCKET = 'bitbucket'
    VSTS = 'vsts'
    GITLAB = 'gitlab'


@dataclasses.dataclass
class RepositoriesListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    source_host: RepositoriesListSourceHostEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'source_host', 'style': 'simple', 'explode': False }})
    r"""The source host"""  
    form: Optional[RepositoriesListFormEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'form', 'style': 'form', 'explode': True }})
    r"""The selected form of the object"""  
    service_connection_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'service_connection_id', 'style': 'form', 'explode': True }})
    r"""The id of the service connection (private). Required for GitLab self-hosted repositories"""  
    vsts_account_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vstsAccountName', 'style': 'form', 'explode': True }})
    r"""Filter repositories only for specified account and project, \\"vstsProjectId\\" is required"""  
    vsts_project_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vstsProjectId', 'style': 'form', 'explode': True }})
    r"""Filter repositories only for specified account and project, \\"vstsAccountName\\" is required"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoriesListDefaultApplicationJSON:
    r"""Bad Request"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoriesList200ApplicationJSON:
    r"""The source repository"""
    
    clone_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clone_url'), 'exclude': lambda f: f is None }})
    r"""URL used to clone the repository"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The repository name"""  
    

@dataclasses.dataclass
class RepositoriesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repositories_list_200_application_json_objects: Optional[list[RepositoriesList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    repositories_list_default_application_json_object: Optional[RepositoriesListDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    