<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleChromeManagementV1BatterySampleReport - Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleChromeManagementV1BatterySampleReport
{
    /**
     * Output only. Battery charge percentage.
     * 
     * @var ?int $chargeRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('chargeRate')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $chargeRate = null;
    
    /**
     * Output only. Battery current (mA).
     * 
     * @var ?string $current
     */
	#[\JMS\Serializer\Annotation\SerializedName('current')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $current = null;
    
    /**
     * Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.
     * 
     * @var ?int $dischargeRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('dischargeRate')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $dischargeRate = null;
    
    /**
     * Output only. Battery remaining capacity (mAmpere-hours).
     * 
     * @var ?string $remainingCapacity
     */
	#[\JMS\Serializer\Annotation\SerializedName('remainingCapacity')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $remainingCapacity = null;
    
    /**
     * Output only. Timestamp of when the sample was collected on device
     * 
     * @var ?string $reportTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('reportTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reportTime = null;
    
    /**
     * Output only. Battery status read from sysfs. Example: Discharging
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * Output only. Temperature in Celsius degrees.
     * 
     * @var ?int $temperature
     */
	#[\JMS\Serializer\Annotation\SerializedName('temperature')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $temperature = null;
    
    /**
     * Output only. Battery voltage (millivolt).
     * 
     * @var ?string $voltage
     */
	#[\JMS\Serializer\Annotation\SerializedName('voltage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $voltage = null;
    
	public function __construct()
	{
		$this->chargeRate = null;
		$this->current = null;
		$this->dischargeRate = null;
		$this->remainingCapacity = null;
		$this->reportTime = null;
		$this->status = null;
		$this->temperature = null;
		$this->voltage = null;
	}
}
