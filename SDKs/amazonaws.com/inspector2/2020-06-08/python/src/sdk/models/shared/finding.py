"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import exploitabilitydetails as shared_exploitabilitydetails
from ..shared import exploitavailable_enum as shared_exploitavailable_enum
from ..shared import findingstatus_enum as shared_findingstatus_enum
from ..shared import findingtype_enum as shared_findingtype_enum
from ..shared import fixavailable_enum as shared_fixavailable_enum
from ..shared import inspectorscoredetails as shared_inspectorscoredetails
from ..shared import networkreachabilitydetails as shared_networkreachabilitydetails
from ..shared import packagevulnerabilitydetails as shared_packagevulnerabilitydetails
from ..shared import remediation as shared_remediation
from ..shared import resource as shared_resource
from ..shared import severity_enum as shared_severity_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Finding:
    r"""Details about an Amazon Inspector finding."""
    
    aws_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awsAccountId') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    finding_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingArn') }})  
    first_observed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstObservedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_observed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastObservedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    remediation: shared_remediation.Remediation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediation') }})  
    resources: list[shared_resource.Resource] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})  
    severity: shared_severity_enum.SeverityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity') }})  
    status: shared_findingstatus_enum.FindingStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    type: shared_findingtype_enum.FindingTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    exploitability_details: Optional[shared_exploitabilitydetails.ExploitabilityDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exploitabilityDetails'), 'exclude': lambda f: f is None }})  
    exploit_available: Optional[shared_exploitavailable_enum.ExploitAvailableEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exploitAvailable'), 'exclude': lambda f: f is None }})  
    fix_available: Optional[shared_fixavailable_enum.FixAvailableEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixAvailable'), 'exclude': lambda f: f is None }})  
    inspector_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectorScore'), 'exclude': lambda f: f is None }})  
    inspector_score_details: Optional[shared_inspectorscoredetails.InspectorScoreDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectorScoreDetails'), 'exclude': lambda f: f is None }})  
    network_reachability_details: Optional[shared_networkreachabilitydetails.NetworkReachabilityDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkReachabilityDetails'), 'exclude': lambda f: f is None }})  
    package_vulnerability_details: Optional[shared_packagevulnerabilitydetails.PackageVulnerabilityDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageVulnerabilityDetails'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    