/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class UALookupResponse {
    /**
     * If the client is a web browser which underlying browser engine does it use
     */
    @JsonProperty("browser-engine")
    public String browserEngine;

    public UALookupResponse withBrowserEngine(String browserEngine) {
        this.browserEngine = browserEngine;
        return this;
    }
    
    /**
     * If the client is a web browser which year was this browser version released
     */
    @JsonProperty("browser-release")
    public String browserRelease;

    public UALookupResponse withBrowserRelease(String browserRelease) {
        this.browserRelease = browserRelease;
        return this;
    }
    
    /**
     * The device brand / manufacturer
     */
    @JsonProperty("device-brand")
    public String deviceBrand;

    public UALookupResponse withDeviceBrand(String deviceBrand) {
        this.deviceBrand = deviceBrand;
        return this;
    }
    
    /**
     * The device display height in CSS 'px'
     */
    @JsonProperty("device-height-px")
    public Double deviceHeightPx;

    public UALookupResponse withDeviceHeightPx(Double deviceHeightPx) {
        this.deviceHeightPx = deviceHeightPx;
        return this;
    }
    
    /**
     * The device model
     */
    @JsonProperty("device-model")
    public String deviceModel;

    public UALookupResponse withDeviceModel(String deviceModel) {
        this.deviceModel = deviceModel;
        return this;
    }
    
    /**
     * The device model code
     */
    @JsonProperty("device-model-code")
    public String deviceModelCode;

    public UALookupResponse withDeviceModelCode(String deviceModelCode) {
        this.deviceModelCode = deviceModelCode;
        return this;
    }
    
    /**
     * The device display pixel ratio (the ratio of the resolution in physical pixels to the resolution in CSS pixels)
     */
    @JsonProperty("device-pixel-ratio")
    public Double devicePixelRatio;

    public UALookupResponse withDevicePixelRatio(Double devicePixelRatio) {
        this.devicePixelRatio = devicePixelRatio;
        return this;
    }
    
    /**
     * The device display PPI (pixels per inch)
     */
    @JsonProperty("device-ppi")
    public Double devicePpi;

    public UALookupResponse withDevicePpi(Double devicePpi) {
        this.devicePpi = devicePpi;
        return this;
    }
    
    /**
     * The average device price on release in USD
     */
    @JsonProperty("device-price")
    public Double devicePrice;

    public UALookupResponse withDevicePrice(Double devicePrice) {
        this.devicePrice = devicePrice;
        return this;
    }
    
    /**
     * The year when this device model was released
     */
    @JsonProperty("device-release")
    public String deviceRelease;

    public UALookupResponse withDeviceRelease(String deviceRelease) {
        this.deviceRelease = deviceRelease;
        return this;
    }
    
    /**
     * The device display resolution in physical pixels (e.g. 720x1280)
     */
    @JsonProperty("device-resolution")
    public String deviceResolution;

    public UALookupResponse withDeviceResolution(String deviceResolution) {
        this.deviceResolution = deviceResolution;
        return this;
    }
    
    /**
     * The device display width in CSS 'px'
     */
    @JsonProperty("device-width-px")
    public Double deviceWidthPx;

    public UALookupResponse withDeviceWidthPx(Double deviceWidthPx) {
        this.deviceWidthPx = deviceWidthPx;
        return this;
    }
    
    /**
     * Is this a mobile device (e.g. a phone or tablet)
     */
    @JsonProperty("is-mobile")
    public Boolean isMobile;

    public UALookupResponse withIsMobile(Boolean isMobile) {
        this.isMobile = isMobile;
        return this;
    }
    
    /**
     * Is this a WebView / embedded software client
     */
    @JsonProperty("is-webview")
    public Boolean isWebview;

    public UALookupResponse withIsWebview(Boolean isWebview) {
        this.isWebview = isWebview;
        return this;
    }
    
    /**
     * The client software name
     */
    @JsonProperty("name")
    public String name;

    public UALookupResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The full operating system name
     */
    @JsonProperty("os")
    public String os;

    public UALookupResponse withOs(String os) {
        this.os = os;
        return this;
    }
    
    /**
     * The operating system family. The major OS families are: Android, Windows, macOS, iOS, Linux
     */
    @JsonProperty("os-family")
    public String osFamily;

    public UALookupResponse withOsFamily(String osFamily) {
        this.osFamily = osFamily;
        return this;
    }
    
    /**
     * The operating system full version
     */
    @JsonProperty("os-version")
    public String osVersion;

    public UALookupResponse withOsVersion(String osVersion) {
        this.osVersion = osVersion;
        return this;
    }
    
    /**
     * The operating system major version
     */
    @JsonProperty("os-version-major")
    public String osVersionMajor;

    public UALookupResponse withOsVersionMajor(String osVersionMajor) {
        this.osVersionMajor = osVersionMajor;
        return this;
    }
    
    /**
     * The user agent type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;desktop&lt;/li&gt; &lt;li&gt;phone&lt;/li&gt; &lt;li&gt;tablet&lt;/li&gt; &lt;li&gt;wearable&lt;/li&gt; &lt;li&gt;tv&lt;/li&gt; &lt;li&gt;console&lt;/li&gt; &lt;li&gt;email&lt;/li&gt; &lt;li&gt;library&lt;/li&gt; &lt;li&gt;robot&lt;/li&gt; &lt;li&gt;unknown&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("type")
    public String type;

    public UALookupResponse withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The user agent string
     */
    @JsonProperty("ua")
    public String ua;

    public UALookupResponse withUa(String ua) {
        this.ua = ua;
        return this;
    }
    
    /**
     * The client software full version
     */
    @JsonProperty("version")
    public String version;

    public UALookupResponse withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * The client software major version
     */
    @JsonProperty("version-major")
    public String versionMajor;

    public UALookupResponse withVersionMajor(String versionMajor) {
        this.versionMajor = versionMajor;
        return this;
    }
    
    public UALookupResponse(@JsonProperty("browser-engine") String browserEngine, @JsonProperty("browser-release") String browserRelease, @JsonProperty("device-brand") String deviceBrand, @JsonProperty("device-height-px") Double deviceHeightPx, @JsonProperty("device-model") String deviceModel, @JsonProperty("device-model-code") String deviceModelCode, @JsonProperty("device-pixel-ratio") Double devicePixelRatio, @JsonProperty("device-ppi") Double devicePpi, @JsonProperty("device-price") Double devicePrice, @JsonProperty("device-release") String deviceRelease, @JsonProperty("device-resolution") String deviceResolution, @JsonProperty("device-width-px") Double deviceWidthPx, @JsonProperty("is-mobile") Boolean isMobile, @JsonProperty("is-webview") Boolean isWebview, @JsonProperty("name") String name, @JsonProperty("os") String os, @JsonProperty("os-family") String osFamily, @JsonProperty("os-version") String osVersion, @JsonProperty("os-version-major") String osVersionMajor, @JsonProperty("type") String type, @JsonProperty("ua") String ua, @JsonProperty("version") String version, @JsonProperty("version-major") String versionMajor) {
        this.browserEngine = browserEngine;
        this.browserRelease = browserRelease;
        this.deviceBrand = deviceBrand;
        this.deviceHeightPx = deviceHeightPx;
        this.deviceModel = deviceModel;
        this.deviceModelCode = deviceModelCode;
        this.devicePixelRatio = devicePixelRatio;
        this.devicePpi = devicePpi;
        this.devicePrice = devicePrice;
        this.deviceRelease = deviceRelease;
        this.deviceResolution = deviceResolution;
        this.deviceWidthPx = deviceWidthPx;
        this.isMobile = isMobile;
        this.isWebview = isWebview;
        this.name = name;
        this.os = os;
        this.osFamily = osFamily;
        this.osVersion = osVersion;
        this.osVersionMajor = osVersionMajor;
        this.type = type;
        this.ua = ua;
        this.version = version;
        this.versionMajor = versionMajor;
  }
}
