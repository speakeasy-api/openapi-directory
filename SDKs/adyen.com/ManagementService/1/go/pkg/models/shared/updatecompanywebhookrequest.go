// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateCompanyWebhookRequestCommunicationFormatEnum - Format or protocol for receiving webhooks. Possible values:
// * **soap**
// * **http**
// * **json**
type UpdateCompanyWebhookRequestCommunicationFormatEnum string

const (
	UpdateCompanyWebhookRequestCommunicationFormatEnumHTTP UpdateCompanyWebhookRequestCommunicationFormatEnum = "HTTP"
	UpdateCompanyWebhookRequestCommunicationFormatEnumJSON UpdateCompanyWebhookRequestCommunicationFormatEnum = "JSON"
	UpdateCompanyWebhookRequestCommunicationFormatEnumSoap UpdateCompanyWebhookRequestCommunicationFormatEnum = "SOAP"
)

func (e *UpdateCompanyWebhookRequestCommunicationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "JSON":
		fallthrough
	case "SOAP":
		*e = UpdateCompanyWebhookRequestCommunicationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCompanyWebhookRequestCommunicationFormatEnum: %s", s)
	}
}

// UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum - Shows how merchant accounts are filtered when configuring the webhook. Possible values:
// * **includeAccounts**: The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`.
// * **excludeAccounts**: The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.
// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
type UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum string

const (
	UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnumExcludeList UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "EXCLUDE_LIST"
	UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnumIncludeAll  UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "INCLUDE_ALL"
	UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnumIncludeList UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum = "INCLUDE_LIST"
)

func (e *UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCLUDE_LIST":
		fallthrough
	case "INCLUDE_ALL":
		fallthrough
	case "INCLUDE_LIST":
		*e = UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum: %s", s)
	}
}

// UpdateCompanyWebhookRequestNetworkTypeEnum - Network type for Terminal API notification webhooks. Possible values:
// * **public**
// * **local**
//
// Default Value: **public**.
type UpdateCompanyWebhookRequestNetworkTypeEnum string

const (
	UpdateCompanyWebhookRequestNetworkTypeEnumLocal  UpdateCompanyWebhookRequestNetworkTypeEnum = "LOCAL"
	UpdateCompanyWebhookRequestNetworkTypeEnumPublic UpdateCompanyWebhookRequestNetworkTypeEnum = "PUBLIC"
)

func (e *UpdateCompanyWebhookRequestNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOCAL":
		fallthrough
	case "PUBLIC":
		*e = UpdateCompanyWebhookRequestNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCompanyWebhookRequestNetworkTypeEnum: %s", s)
	}
}

// UpdateCompanyWebhookRequestSslVersionEnum - SSL version to access the public webhook URL specified in the `url` field. Possible values:
// * **TLSv1.3**
// * **TLSv1.2**
// * **HTTP** - Only allowed on Test environment.
//
// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
type UpdateCompanyWebhookRequestSslVersionEnum string

const (
	UpdateCompanyWebhookRequestSslVersionEnumHTTP                 UpdateCompanyWebhookRequestSslVersionEnum = "HTTP"
	UpdateCompanyWebhookRequestSslVersionEnumSsl                  UpdateCompanyWebhookRequestSslVersionEnum = "SSL"
	UpdateCompanyWebhookRequestSslVersionEnumSslv3                UpdateCompanyWebhookRequestSslVersionEnum = "SSLV3"
	UpdateCompanyWebhookRequestSslVersionEnumSslInsecureCiphers   UpdateCompanyWebhookRequestSslVersionEnum = "SSL_INSECURE_CIPHERS"
	UpdateCompanyWebhookRequestSslVersionEnumTLS                  UpdateCompanyWebhookRequestSslVersionEnum = "TLS"
	UpdateCompanyWebhookRequestSslVersionEnumTlsv1                UpdateCompanyWebhookRequestSslVersionEnum = "TLSV1"
	UpdateCompanyWebhookRequestSslVersionEnumTlsv11               UpdateCompanyWebhookRequestSslVersionEnum = "TLSV1_1"
	UpdateCompanyWebhookRequestSslVersionEnumTlsv12               UpdateCompanyWebhookRequestSslVersionEnum = "TLSV1_2"
	UpdateCompanyWebhookRequestSslVersionEnumTlsv13               UpdateCompanyWebhookRequestSslVersionEnum = "TLSV1_3"
	UpdateCompanyWebhookRequestSslVersionEnumTlsv1InsecureCiphers UpdateCompanyWebhookRequestSslVersionEnum = "TLSV1_INSECURE_CIPHERS"
)

func (e *UpdateCompanyWebhookRequestSslVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "SSL":
		fallthrough
	case "SSLV3":
		fallthrough
	case "SSL_INSECURE_CIPHERS":
		fallthrough
	case "TLS":
		fallthrough
	case "TLSV1":
		fallthrough
	case "TLSV1_1":
		fallthrough
	case "TLSV1_2":
		fallthrough
	case "TLSV1_3":
		fallthrough
	case "TLSV1_INSECURE_CIPHERS":
		*e = UpdateCompanyWebhookRequestSslVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCompanyWebhookRequestSslVersionEnum: %s", s)
	}
}

type UpdateCompanyWebhookRequest struct {
	// Indicates if expired SSL certificates are accepted. Default value: **false**.
	AcceptsExpiredCertificate *bool `json:"acceptsExpiredCertificate,omitempty"`
	// Indicates if self-signed SSL certificates are accepted. Default value: **false**.
	AcceptsSelfSignedCertificate *bool `json:"acceptsSelfSignedCertificate,omitempty"`
	// Indicates if untrusted SSL certificates are accepted. Default value: **false**.
	AcceptsUntrustedRootCertificate *bool `json:"acceptsUntrustedRootCertificate,omitempty"`
	// Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
	Active             *bool               `json:"active,omitempty"`
	AdditionalSettings *AdditionalSettings `json:"additionalSettings,omitempty"`
	// Format or protocol for receiving webhooks. Possible values:
	// * **soap**
	// * **http**
	// * **json**
	CommunicationFormat *UpdateCompanyWebhookRequestCommunicationFormatEnum `json:"communicationFormat,omitempty"`
	// Your description for this webhook configuration.
	Description *string `json:"description,omitempty"`
	// Shows how merchant accounts are filtered when configuring the webhook. Possible values:
	// * **includeAccounts**: The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`.
	// * **excludeAccounts**: The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.
	// * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
	FilterMerchantAccountType *UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum `json:"filterMerchantAccountType,omitempty"`
	// A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.
	//
	// Required if `filterMerchantAccountType` is either:
	// * **includeAccounts**
	// * **excludeAccounts**
	//
	// Not needed for `filterMerchantAccountType`: **allAccounts**.
	FilterMerchantAccounts []string `json:"filterMerchantAccounts,omitempty"`
	// Network type for Terminal API notification webhooks. Possible values:
	// * **public**
	// * **local**
	//
	// Default Value: **public**.
	NetworkType *UpdateCompanyWebhookRequestNetworkTypeEnum `json:"networkType,omitempty"`
	// Password to access the webhook URL.
	Password *string `json:"password,omitempty"`
	// Indicates if the SOAP action header needs to be populated. Default value: **false**.
	//
	// Only applies if `communicationFormat`: **soap**.
	PopulateSoapActionHeader *bool `json:"populateSoapActionHeader,omitempty"`
	// SSL version to access the public webhook URL specified in the `url` field. Possible values:
	// * **TLSv1.3**
	// * **TLSv1.2**
	// * **HTTP** - Only allowed on Test environment.
	//
	// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
	SslVersion *UpdateCompanyWebhookRequestSslVersionEnum `json:"sslVersion,omitempty"`
	// Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
	URL string `json:"url"`
	// Username to access the webhook URL.
	Username *string `json:"username,omitempty"`
}
