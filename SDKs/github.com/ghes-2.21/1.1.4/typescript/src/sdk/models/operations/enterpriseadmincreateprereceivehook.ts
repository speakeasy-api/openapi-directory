/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class EnterpriseAdminCreatePreReceiveHookRequestBody extends SpeakeasyBase {
  /**
   * Whether enforcement can be overridden at the org or repo level. default: `false`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_downstream_configuration" })
  allowDownstreamConfiguration?: boolean;

  /**
   * The state of enforcement for this hook. default: `disabled`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enforcement" })
  enforcement?: string;

  /**
   * The pre-receive environment where the script is executed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  environment: Record<string, any>;

  /**
   * The name of the hook.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The script that the hook runs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "script" })
  script: string;

  /**
   * The GitHub repository where the script is kept.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "script_repository" })
  scriptRepository: Record<string, any>;
}

export class EnterpriseAdminCreatePreReceiveHookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  preReceiveHook?: shared.PreReceiveHook;
}
