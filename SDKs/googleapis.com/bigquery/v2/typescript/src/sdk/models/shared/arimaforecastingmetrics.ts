/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ArimaFittingMetrics } from "./arimafittingmetrics";
import { ArimaOrder } from "./arimaorder";
import { ArimaSingleModelForecastingMetrics } from "./arimasinglemodelforecastingmetrics";
import { Expose, Type } from "class-transformer";

export enum ArimaForecastingMetricsSeasonalPeriodsEnum {
  SeasonalPeriodTypeUnspecified = "SEASONAL_PERIOD_TYPE_UNSPECIFIED",
  NoSeasonality = "NO_SEASONALITY",
  Daily = "DAILY",
  Weekly = "WEEKLY",
  Monthly = "MONTHLY",
  Quarterly = "QUARTERLY",
  Yearly = "YEARLY",
}

/**
 * Model evaluation metrics for ARIMA forecasting models.
 */
export class ArimaForecastingMetrics extends SpeakeasyBase {
  /**
   * Arima model fitting metrics.
   */
  @SpeakeasyMetadata({ elemType: ArimaFittingMetrics })
  @Expose({ name: "arimaFittingMetrics" })
  @Type(() => ArimaFittingMetrics)
  arimaFittingMetrics?: ArimaFittingMetrics[];

  /**
   * Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
   */
  @SpeakeasyMetadata({ elemType: ArimaSingleModelForecastingMetrics })
  @Expose({ name: "arimaSingleModelForecastingMetrics" })
  @Type(() => ArimaSingleModelForecastingMetrics)
  arimaSingleModelForecastingMetrics?: ArimaSingleModelForecastingMetrics[];

  /**
   * Whether Arima model fitted with drift or not. It is always false when d is not 1.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasDrift" })
  hasDrift?: boolean[];

  /**
   * Non-seasonal order.
   */
  @SpeakeasyMetadata({ elemType: ArimaOrder })
  @Expose({ name: "nonSeasonalOrder" })
  @Type(() => ArimaOrder)
  nonSeasonalOrder?: ArimaOrder[];

  /**
   * Seasonal periods. Repeated because multiple periods are supported for one time series.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "seasonalPeriods" })
  seasonalPeriods?: ArimaForecastingMetricsSeasonalPeriodsEnum[];

  /**
   * Id to differentiate different time series for the large-scale case.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeSeriesId" })
  timeSeriesId?: string[];
}
