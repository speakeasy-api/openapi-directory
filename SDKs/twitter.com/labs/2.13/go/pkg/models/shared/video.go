// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoNonPublicMetrics - Nonpublic engagement metrics for the Media at the time of the request.
type VideoNonPublicMetrics struct {
	// Number of users who made it through 0% of the video.
	Playback0Count *int `json:"playback_0_count,omitempty"`
	// Number of users who made it through 100% of the video.
	Playback100Count *int `json:"playback_100_count,omitempty"`
	// Number of users who made it through 25% of the video.
	Playback25Count *int `json:"playback_25_count,omitempty"`
	// Number of users who made it through 50% of the video.
	Playback50Count *int `json:"playback_50_count,omitempty"`
	// Number of users who made it through 75% of the video.
	Playback75Count *int `json:"playback_75_count,omitempty"`
}

// VideoOrganicMetrics - Organic nonpublic engagement metrics for the Media at the time of the request.
type VideoOrganicMetrics struct {
	// Number of users who made it through 0% of the video.
	Playback0Count *int `json:"playback_0_count,omitempty"`
	// Number of users who made it through 100% of the video.
	Playback100Count *int `json:"playback_100_count,omitempty"`
	// Number of users who made it through 25% of the video.
	Playback25Count *int `json:"playback_25_count,omitempty"`
	// Number of users who made it through 50% of the video.
	Playback50Count *int `json:"playback_50_count,omitempty"`
	// Number of users who made it through 75% of the video.
	Playback75Count *int `json:"playback_75_count,omitempty"`
	// Number of times this video has been viewed.
	ViewCount *int `json:"view_count,omitempty"`
}

// VideoPromotedMetrics - Promoted nonpublic engagement metrics for the Media at the time of the request.
type VideoPromotedMetrics struct {
	// Number of users who made it through 0% of the video.
	Playback0Count *int `json:"playback_0_count,omitempty"`
	// Number of users who made it through 100% of the video.
	Playback100Count *int `json:"playback_100_count,omitempty"`
	// Number of users who made it through 25% of the video.
	Playback25Count *int `json:"playback_25_count,omitempty"`
	// Number of users who made it through 50% of the video.
	Playback50Count *int `json:"playback_50_count,omitempty"`
	// Number of users who made it through 75% of the video.
	Playback75Count *int `json:"playback_75_count,omitempty"`
	// Number of times this video has been viewed.
	ViewCount *int `json:"view_count,omitempty"`
}

// VideoPublicMetrics - Engagement metrics for the Media at the time of the request.
type VideoPublicMetrics struct {
	// Number of times this video has been viewed.
	ViewCount *int `json:"view_count,omitempty"`
}

type VideoTypeEnum string

const (
	VideoTypeEnumVideo VideoTypeEnum = "video"
)

func (e *VideoTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "video":
		*e = VideoTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoTypeEnum: %s", s)
	}
}

// Video - This contains the list of the fields that are common to all media returned.
type Video struct {
	DurationMs *int64 `json:"duration_ms,omitempty"`
	// The height of the media in pixels
	Height *int64 `json:"height,omitempty"`
	// The Media Key identifier for this attachment.
	MediaKey *string `json:"media_key,omitempty"`
	// Nonpublic engagement metrics for the Media at the time of the request.
	NonPublicMetrics *VideoNonPublicMetrics `json:"non_public_metrics,omitempty"`
	// Organic nonpublic engagement metrics for the Media at the time of the request.
	OrganicMetrics  *VideoOrganicMetrics `json:"organic_metrics,omitempty"`
	PreviewImageURL *string              `json:"preview_image_url,omitempty"`
	// Promoted nonpublic engagement metrics for the Media at the time of the request.
	PromotedMetrics *VideoPromotedMetrics `json:"promoted_metrics,omitempty"`
	// Engagement metrics for the Media at the time of the request.
	PublicMetrics *VideoPublicMetrics `json:"public_metrics,omitempty"`
	Type          VideoTypeEnum       `json:"type"`
	// The width of the media in pixels
	Width *int64 `json:"width,omitempty"`
}
