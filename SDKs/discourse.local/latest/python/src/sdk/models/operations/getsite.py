"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONArchetypes:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    options: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONCategoriesRequiredTagGroups:
    
    min_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_count') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONCategories:
    
    allow_global_tags: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_global_tags') }})  
    allowed_tag_groups: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_tag_groups') }})  
    allowed_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_tags') }})  
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})  
    default_list_filter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_list_filter') }})  
    default_top_period: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_top_period') }})  
    default_view: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_view') }})  
    has_children: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_children') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    minimum_required_tags: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_required_tags') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    navigate_to_first_post_after_read: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigate_to_first_post_after_read') }})  
    notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level') }})  
    num_featured_topics: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_featured_topics') }})  
    permission: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    read_only_banner: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_only_banner') }})  
    read_restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_restricted') }})  
    required_tag_groups: list[GetSite200ApplicationJSONCategoriesRequiredTagGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_tag_groups') }})  
    show_subcategory_list: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_subcategory_list') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    sort_ascending: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_ascending') }})  
    sort_order: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order') }})  
    subcategory_list_style: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategory_list_style') }})  
    text_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_color') }})  
    topic_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_count') }})  
    topic_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_template') }})  
    topic_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_url') }})  
    uploaded_background: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_background') }})  
    uploaded_logo: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo') }})  
    uploaded_logo_dark: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo_dark') }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    description_excerpt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_excerpt'), 'exclude': lambda f: f is None }})  
    description_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_text'), 'exclude': lambda f: f is None }})  
    form_template_ids: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_template_ids'), 'exclude': lambda f: f is None }})  
    parent_category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_category_id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONGroups:
    
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONNotificationTypes:
    
    bookmark_reminder: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmark_reminder') }})  
    chat_group_mention: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_group_mention') }})  
    chat_invitation: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_invitation') }})  
    chat_mention: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_mention') }})  
    chat_message: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_message') }})  
    code_review_commit_approved: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_review_commit_approved') }})  
    custom: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom') }})  
    edited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edited') }})  
    event_invitation: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_invitation') }})  
    event_reminder: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_reminder') }})  
    granted_badge: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('granted_badge') }})  
    group_mentioned: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_mentioned') }})  
    group_message_summary: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_message_summary') }})  
    invited_to_private_message: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited_to_private_message') }})  
    invited_to_topic: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invited_to_topic') }})  
    invitee_accepted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invitee_accepted') }})  
    liked: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liked') }})  
    liked_consolidated: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liked_consolidated') }})  
    linked: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linked') }})  
    membership_request_accepted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_accepted') }})  
    membership_request_consolidated: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_consolidated') }})  
    mentioned: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentioned') }})  
    moved_post: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moved_post') }})  
    post_approved: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_approved') }})  
    posted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posted') }})  
    private_message: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_message') }})  
    quoted: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoted') }})  
    reaction: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reaction') }})  
    replied: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replied') }})  
    topic_reminder: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_reminder') }})  
    votes_released: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('votes_released') }})  
    watching_category_or_tag: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_category_or_tag') }})  
    watching_first_post: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watching_first_post') }})  
    assigned: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigned'), 'exclude': lambda f: f is None }})  
    chat_quoted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat_quoted'), 'exclude': lambda f: f is None }})  
    circles_activity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('circles_activity'), 'exclude': lambda f: f is None }})  
    following: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following'), 'exclude': lambda f: f is None }})  
    following_created_topic: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_created_topic'), 'exclude': lambda f: f is None }})  
    following_replied: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_replied'), 'exclude': lambda f: f is None }})  
    new_features: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_features'), 'exclude': lambda f: f is None }})  
    question_answer_user_commented: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('question_answer_user_commented'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONPostActionTypes:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    is_custom_flag: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_custom_flag') }})  
    is_flag: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_flag') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    name_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name_key') }})  
    short_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_description') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONPostTypes:
    
    moderator_action: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator_action') }})  
    regular: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular') }})  
    small_action: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('small_action') }})  
    whisper: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whisper') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONTopicFlagTypes:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    is_custom_flag: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_custom_flag') }})  
    is_flag: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_flag') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    name_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name_key') }})  
    short_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_description') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONTrustLevels:
    
    basic: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basic') }})  
    leader: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leader') }})  
    member: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('member') }})  
    newuser: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newuser') }})  
    regular: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regular') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONUserColorSchemes:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    is_dark: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_dark') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSONUserThemes:
    
    color_scheme_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color_scheme_id') }})  
    default: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    theme_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme_id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSite200ApplicationJSON:
    r"""success response"""
    
    anonymous_top_menu_items: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anonymous_top_menu_items') }})  
    archetypes: list[GetSite200ApplicationJSONArchetypes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archetypes') }})  
    auth_providers: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_providers') }})  
    can_create_tag: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_tag') }})  
    can_tag_pms: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_tag_pms') }})  
    can_tag_topics: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_tag_topics') }})  
    categories: list[GetSite200ApplicationJSONCategories] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})  
    censored_regexp: list[dict[str, Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('censored_regexp') }})  
    custom_emoji_translation: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_emoji_translation') }})  
    default_archetype: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_archetype') }})  
    default_dark_color_scheme: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_dark_color_scheme') }})  
    filters: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters') }})  
    groups: list[GetSite200ApplicationJSONGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    notification_types: GetSite200ApplicationJSONNotificationTypes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_types') }})  
    periods: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periods') }})  
    post_action_types: list[GetSite200ApplicationJSONPostActionTypes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_action_types') }})  
    post_types: GetSite200ApplicationJSONPostTypes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_types') }})  
    tags_filter_regexp: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags_filter_regexp') }})  
    top_menu_items: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_menu_items') }})  
    top_tags: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('top_tags') }})  
    topic_featured_link_allowed_category_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_featured_link_allowed_category_ids') }})  
    topic_flag_types: list[GetSite200ApplicationJSONTopicFlagTypes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_flag_types') }})  
    trust_levels: GetSite200ApplicationJSONTrustLevels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_levels') }})  
    uncategorized_category_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uncategorized_category_id') }})  
    user_color_schemes: list[GetSite200ApplicationJSONUserColorSchemes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_color_schemes') }})  
    user_field_max_length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_field_max_length') }})  
    user_fields: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_fields') }})  
    user_themes: list[GetSite200ApplicationJSONUserThemes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_themes') }})  
    watched_words_link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_words_link') }})  
    watched_words_replace: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_words_replace') }})  
    can_associate_groups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_associate_groups'), 'exclude': lambda f: f is None }})  
    displayed_about_plugin_stat_groups: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayed_about_plugin_stat_groups'), 'exclude': lambda f: f is None }})  
    hashtag_configurations: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashtag_configurations'), 'exclude': lambda f: f is None }})  
    hashtag_icons: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashtag_icons'), 'exclude': lambda f: f is None }})  
    markdown_additional_options: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markdown_additional_options'), 'exclude': lambda f: f is None }})  
    show_welcome_topic_banner: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_welcome_topic_banner'), 'exclude': lambda f: f is None }})  
    whispers_allowed_groups_names: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whispers_allowed_groups_names'), 'exclude': lambda f: f is None }})  
    wizard_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wizard_required'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSiteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_site_200_application_json_object: Optional[GetSite200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    