// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribePublisherActionEnum
type GETDescribePublisherActionEnum string

const (
	GETDescribePublisherActionEnumDescribePublisher GETDescribePublisherActionEnum = "DescribePublisher"
)

func (e GETDescribePublisherActionEnum) ToPointer() *GETDescribePublisherActionEnum {
	return &e
}

func (e *GETDescribePublisherActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DescribePublisher":
		*e = GETDescribePublisherActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribePublisherActionEnum: %v", v)
	}
}

// GETDescribePublisherVersionEnum
type GETDescribePublisherVersionEnum string

const (
	GETDescribePublisherVersionEnumTwoThousandAndTen0515 GETDescribePublisherVersionEnum = "2010-05-15"
)

func (e GETDescribePublisherVersionEnum) ToPointer() *GETDescribePublisherVersionEnum {
	return &e
}

func (e *GETDescribePublisherVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETDescribePublisherVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribePublisherVersionEnum: %v", v)
	}
}

type GETDescribePublisherRequest struct {
	Action GETDescribePublisherActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The ID of the extension publisher.</p> <p>If you don't supply a <code>PublisherId</code>, and you have registered as an extension publisher, <code>DescribePublisher</code> returns information about your own publisher account.</p>
	PublisherID       *string                         `queryParam:"style=form,explode=true,name=PublisherId"`
	Version           GETDescribePublisherVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribePublisherResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
