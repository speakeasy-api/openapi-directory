"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class StoryCollaborators:
    r"""Story Collaborators"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def story_id_collaborators_get(self, request: operations.StoryIDCollaboratorsGetRequest) -> operations.StoryIDCollaboratorsGetResponse:
        r"""Story Collaborators: List
        Gets a list users that can read or edit this story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsGetRequest, base_url, '/{id}/collaborators', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.StoryCollaborator]])
                res.story_collaborators = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_collaborators_inactive_post(self, request: operations.StoryIDCollaboratorsInactivePostRequest) -> operations.StoryIDCollaboratorsInactivePostResponse:
        r"""Story Collaborators: Edit Inactive User Permission
        Edit story permissions for inactive users.  Requires admin rights.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsInactivePostRequest, base_url, '/{id}/collaborators/inactive', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_inactive_collaborator", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsInactivePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoryCollaborator])
                res.story_collaborator = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_collaborators_post(self, request: operations.StoryIDCollaboratorsPostRequest) -> operations.StoryIDCollaboratorsPostResponse:
        r"""Story Collaborators: Add New User
        Add a colloborator to this story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsPostRequest, base_url, '/{id}/collaborators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_new_collaborator_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoryCollaborator])
                res.story_collaborator = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_collaborators_userid_delete(self, request: operations.StoryIDCollaboratorsUseridDeleteRequest) -> operations.StoryIDCollaboratorsUseridDeleteResponse:
        r"""Story Collaborators: Remove User
        Remove a collaborator from this story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsUseridDeleteRequest, base_url, '/{id}/collaborators/{story_collaborator_userid}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsUseridDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_collaborators_userid_get(self, request: operations.StoryIDCollaboratorsUseridGetRequest) -> operations.StoryIDCollaboratorsUseridGetResponse:
        r"""Story Collaborators: Access Permissions
        Data to help you understand the access rights of a particular collaborator on this story
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsUseridGetRequest, base_url, '/{id}/collaborators/{story_collaborator_userid}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsUseridGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoryCollaborator])
                res.story_collaborator = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    def story_id_collaborators_userid_put(self, request: operations.StoryIDCollaboratorsUseridPutRequest) -> operations.StoryIDCollaboratorsUseridPutResponse:
        r"""Story Collaborators: Edit Access Rights
        Modify a user's access right to this story (e.g., grant edit permissions)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.StoryIDCollaboratorsUseridPutRequest, base_url, '/{id}/collaborators/{story_collaborator_userid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "story_collaborator", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StoryIDCollaboratorsUseridPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StoryCollaborator])
                res.story_collaborator = out
        elif http_res.status_code in [400, 401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProblemDetail])
                res.problem_detail = out

        return res

    