"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import databaseshortinforesponse as shared_databaseshortinforesponse
from ..shared import schemashortinforesponse as shared_schemashortinforesponse
from ..shared import servershortinforesponse as shared_servershortinforesponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaResponse:
    r"""Describes a schema in a Fleet Advisor collector inventory."""
    
    code_line_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeLineCount'), 'exclude': lambda f: f is None }})  
    code_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeSize'), 'exclude': lambda f: f is None }})  
    complexity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Complexity'), 'exclude': lambda f: f is None }})  
    database_instance: Optional[shared_databaseshortinforesponse.DatabaseShortInfoResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseInstance'), 'exclude': lambda f: f is None }})  
    original_schema: Optional[shared_schemashortinforesponse.SchemaShortInfoResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OriginalSchema'), 'exclude': lambda f: f is None }})
    r"""Describes a schema in a Fleet Advisor collector inventory."""  
    schema_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaId'), 'exclude': lambda f: f is None }})  
    schema_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaName'), 'exclude': lambda f: f is None }})  
    server: Optional[shared_servershortinforesponse.ServerShortInfoResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Server'), 'exclude': lambda f: f is None }})  
    similarity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Similarity'), 'exclude': lambda f: f is None }})  
    