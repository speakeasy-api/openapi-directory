"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PasswordValidationPolicyComplexityEnum(str, Enum):
    r"""The complexity of the password."""
    COMPLEXITY_UNSPECIFIED = 'COMPLEXITY_UNSPECIFIED'
    COMPLEXITY_DEFAULT = 'COMPLEXITY_DEFAULT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PasswordValidationPolicy:
    r"""Database instance local user password validation policy"""
    
    complexity: Optional[PasswordValidationPolicyComplexityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complexity'), 'exclude': lambda f: f is None }})
    r"""The complexity of the password."""  
    disallow_username_substring: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disallowUsernameSubstring'), 'exclude': lambda f: f is None }})
    r"""Disallow username as a part of the password."""  
    enable_password_policy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePasswordPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the password policy is enabled or not."""  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minLength'), 'exclude': lambda f: f is None }})
    r"""Minimum number of characters allowed."""  
    password_change_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordChangeInterval'), 'exclude': lambda f: f is None }})
    r"""Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL."""  
    reuse_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reuseInterval'), 'exclude': lambda f: f is None }})
    r"""Number of previous passwords that cannot be reused."""  
    