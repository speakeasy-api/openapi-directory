<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ProcessorBankTransferCreateRequest - Defines the request schema for `/processor/bank_transfer/create`
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ProcessorBankTransferCreateRequest
{
    /**
     * Specifies the use case of the transfer. Required for transfers on an ACH network.
     * 
     * 
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     * 
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     * 
     * `"tel"` - Telephone-Initiated Entry
     * 
     * `"web"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ACHClassEnum $achClass
     */
	#[\JMS\Serializer\Annotation\SerializedName('ach_class')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ACHClassEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ACHClassEnum $achClass = null;
    
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
     * 
     * @var string $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $amount;
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('client_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
     * 
     * @var ?string $customTag
     */
	#[\JMS\Serializer\Annotation\SerializedName('custom_tag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customTag = null;
    
    /**
     * The transfer description. Maximum of 10 characters.
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
     * 
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     * 
     * @var string $idempotencyKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('idempotency_key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $idempotencyKey;
    
    /**
     * The currency of the transfer amount – should be set to "USD".
     * 
     * @var string $isoCurrencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('iso_currency_code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $isoCurrencyCode;
    
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * 
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     * 
     * @var ?array<string, string> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\BankTransferNetworkEnum $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BankTransferNetworkEnum>')]
    public BankTransferNetworkEnum $network;
    
    /**
     * Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified.
     * 
     * @var ?string $originationAccountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('origination_account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originationAccountId = null;
    
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     * 
     * @var string $processorToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('processor_token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $processorToken;
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     * 
     * @var ?string $secret
     */
	#[\JMS\Serializer\Annotation\SerializedName('secret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $secret = null;
    
    /**
     * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\BankTransferTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\BankTransferTypeEnum>')]
    public BankTransferTypeEnum $type;
    
    /**
     * The legal name and other information for the account holder.
     * 
     * @var array<string, mixed> $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    public array $user;
    
	public function __construct()
	{
		$this->achClass = null;
		$this->amount = "";
		$this->clientId = null;
		$this->customTag = null;
		$this->description = "";
		$this->idempotencyKey = "";
		$this->isoCurrencyCode = "";
		$this->metadata = null;
		$this->network = \OpenAPI\OpenAPI\Models\Shared\BankTransferNetworkEnum::ACH;
		$this->originationAccountId = null;
		$this->processorToken = "";
		$this->secret = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\BankTransferTypeEnum::DEBIT;
		$this->user = [];
	}
}
