"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETTaxationItemTypewithSuccessFinanceInformation:
    r"""Container for the finance information related to the taxation item."""
    
    on_account_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onAccountAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code that maps to an on account in your accounting system."""  
    on_account_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onAccountAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the accounting code that maps to an on account in your accounting system."""  
    sales_tax_payable_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesTaxPayableAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the sales taxes payable."""  
    sales_tax_payable_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesTaxPayableAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the accounting code for the sales taxes payable."""  
    
class GETTaxationItemTypewithSuccessTaxRateTypeEnum(str, Enum):
    r"""The type of the tax rate applied to the credit or debit memo."""
    PERCENTAGE = 'Percentage'
    FLAT_FEE = 'FlatFee'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETTaxationItemTypewithSuccess:
    r"""Container for custom fields of a Taxation Item object."""
    
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the taxation item."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format."""  
    exempt_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of taxes or VAT for which the customer has an exemption."""  
    finance_information: Optional[GETTaxationItemTypewithSuccessFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the taxation item."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the taxation item."""  
    jurisdiction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jurisdiction'), 'exclude': lambda f: f is None }})
    r"""The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city."""  
    location_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationCode'), 'exclude': lambda f: f is None }})
    r"""The identifier for the location based on the value of the `taxCode` field."""  
    memo_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the credit or debit memo associated with the taxation item."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the taxation item."""  
    source_tax_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceTaxItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the taxation item of the invoice, which the credit or debit memo is created from."""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the tax applied to the credit or debit memo."""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo."""  
    tax_code_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCodeDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the tax code."""  
    tax_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the tax is applied to the credit or debit memo."""  
    tax_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRate'), 'exclude': lambda f: f is None }})
    r"""The tax rate applied to the credit or debit memo."""  
    tax_rate_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRateDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the tax rate."""  
    tax_rate_type: Optional[GETTaxationItemTypewithSuccessTaxRateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRateType'), 'exclude': lambda f: f is None }})
    r"""The type of the tax rate applied to the credit or debit memo."""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who last updated the taxation item."""  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format."""  
    