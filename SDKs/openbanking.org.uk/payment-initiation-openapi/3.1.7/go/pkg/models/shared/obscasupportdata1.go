// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OBSCASupportData1AppliedAuthenticationApproachEnum - Specifies a character string with a maximum length of 40 characters.
// Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
type OBSCASupportData1AppliedAuthenticationApproachEnum string

const (
	OBSCASupportData1AppliedAuthenticationApproachEnumCa  OBSCASupportData1AppliedAuthenticationApproachEnum = "CA"
	OBSCASupportData1AppliedAuthenticationApproachEnumSca OBSCASupportData1AppliedAuthenticationApproachEnum = "SCA"
)

func (e *OBSCASupportData1AppliedAuthenticationApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CA":
		fallthrough
	case "SCA":
		*e = OBSCASupportData1AppliedAuthenticationApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBSCASupportData1AppliedAuthenticationApproachEnum: %s", s)
	}
}

// OBSCASupportData1RequestedSCAExemptionTypeEnum - This field allows a PISP to request specific SCA Exemption for a Payment Initiation
type OBSCASupportData1RequestedSCAExemptionTypeEnum string

const (
	OBSCASupportData1RequestedSCAExemptionTypeEnumBillPayment       OBSCASupportData1RequestedSCAExemptionTypeEnum = "BillPayment"
	OBSCASupportData1RequestedSCAExemptionTypeEnumContactlessTravel OBSCASupportData1RequestedSCAExemptionTypeEnum = "ContactlessTravel"
	OBSCASupportData1RequestedSCAExemptionTypeEnumEcommerceGoods    OBSCASupportData1RequestedSCAExemptionTypeEnum = "EcommerceGoods"
	OBSCASupportData1RequestedSCAExemptionTypeEnumEcommerceServices OBSCASupportData1RequestedSCAExemptionTypeEnum = "EcommerceServices"
	OBSCASupportData1RequestedSCAExemptionTypeEnumKiosk             OBSCASupportData1RequestedSCAExemptionTypeEnum = "Kiosk"
	OBSCASupportData1RequestedSCAExemptionTypeEnumParking           OBSCASupportData1RequestedSCAExemptionTypeEnum = "Parking"
	OBSCASupportData1RequestedSCAExemptionTypeEnumPartyToParty      OBSCASupportData1RequestedSCAExemptionTypeEnum = "PartyToParty"
)

func (e *OBSCASupportData1RequestedSCAExemptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BillPayment":
		fallthrough
	case "ContactlessTravel":
		fallthrough
	case "EcommerceGoods":
		fallthrough
	case "EcommerceServices":
		fallthrough
	case "Kiosk":
		fallthrough
	case "Parking":
		fallthrough
	case "PartyToParty":
		*e = OBSCASupportData1RequestedSCAExemptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OBSCASupportData1RequestedSCAExemptionTypeEnum: %s", s)
	}
}

// OBSCASupportData1 - Supporting Data provided by TPP, when requesting SCA Exemption.
type OBSCASupportData1 struct {
	// Specifies a character string with a maximum length of 40 characters.
	// Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
	AppliedAuthenticationApproach *OBSCASupportData1AppliedAuthenticationApproachEnum `json:"AppliedAuthenticationApproach,omitempty"`
	// If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId
	ReferencePaymentOrderID *string `json:"ReferencePaymentOrderId,omitempty"`
	// This field allows a PISP to request specific SCA Exemption for a Payment Initiation
	RequestedSCAExemptionType *OBSCASupportData1RequestedSCAExemptionTypeEnum `json:"RequestedSCAExemptionType,omitempty"`
}
