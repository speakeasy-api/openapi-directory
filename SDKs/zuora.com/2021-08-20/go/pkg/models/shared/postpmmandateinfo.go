// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// POSTPMMandateInfoExistingMandateStatusEnum - Indicates whether the mandate is an existing mandate.
type POSTPMMandateInfoExistingMandateStatusEnum string

const (
	POSTPMMandateInfoExistingMandateStatusEnumTrue  POSTPMMandateInfoExistingMandateStatusEnum = "true"
	POSTPMMandateInfoExistingMandateStatusEnumFalse POSTPMMandateInfoExistingMandateStatusEnum = "false"
)

func (e *POSTPMMandateInfoExistingMandateStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = POSTPMMandateInfoExistingMandateStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPMMandateInfoExistingMandateStatusEnum: %s", s)
	}
}

// POSTPMMandateInfoMandateReceivedStatusEnum - Indicates whether the mandate is received from the gateway
type POSTPMMandateInfoMandateReceivedStatusEnum string

const (
	POSTPMMandateInfoMandateReceivedStatusEnumTrue  POSTPMMandateInfoMandateReceivedStatusEnum = "true"
	POSTPMMandateInfoMandateReceivedStatusEnumFalse POSTPMMandateInfoMandateReceivedStatusEnum = "false"
)

func (e *POSTPMMandateInfoMandateReceivedStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = POSTPMMandateInfoMandateReceivedStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPMMandateInfoMandateReceivedStatusEnum: %s", s)
	}
}

type POSTPMMandateInfoMitConsentAgreementSrcEnum string

const (
	POSTPMMandateInfoMitConsentAgreementSrcEnumExternal POSTPMMandateInfoMitConsentAgreementSrcEnum = "External"
)

func (e *POSTPMMandateInfoMitConsentAgreementSrcEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		*e = POSTPMMandateInfoMitConsentAgreementSrcEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPMMandateInfoMitConsentAgreementSrcEnum: %s", s)
	}
}

// POSTPMMandateInfoMitProfileActionEnum - Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
//
// * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
//
//	Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
//
//	If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
//
// * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
type POSTPMMandateInfoMitProfileActionEnum string

const (
	POSTPMMandateInfoMitProfileActionEnumActivate POSTPMMandateInfoMitProfileActionEnum = "Activate"
	POSTPMMandateInfoMitProfileActionEnumPersist  POSTPMMandateInfoMitProfileActionEnum = "Persist"
)

func (e *POSTPMMandateInfoMitProfileActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Activate":
		fallthrough
	case "Persist":
		*e = POSTPMMandateInfoMitProfileActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPMMandateInfoMitProfileActionEnum: %s", s)
	}
}

// POSTPMMandateInfo - The mandate information for the Credit Card, ACH, or Bank Transfer payment method.
//
// The following mandate fields are specific to the ACH and Bank Transfer payment methods:
// * `mandateId`
// * `mandateReceivedStatus`
// * `existingMandateStatus`
// * `mandateCreationDate`
// * `mandateUpdateDate`
// * `mandateStatus`
// * `mandateReason`
//
// The following mandate fields are specific to the Credit Card payment method:
// * `mitTransactionId`
// * `mitProfileAgreedOn`
// * `mitConsentAgreementRef`
// * `mitConsentAgreementSrc`
// * `mitProfileType`
// * `mitProfileAction`
type POSTPMMandateInfo struct {
	// Indicates whether the mandate is an existing mandate.
	//
	ExistingMandateStatus *POSTPMMandateInfoExistingMandateStatusEnum `json:"existingMandateStatus,omitempty"`
	// The date on which the mandate was created.
	//
	MandateCreationDate *types.Date `json:"mandateCreationDate,omitempty"`
	// The mandate ID.
	//
	MandateID *string `json:"mandateId,omitempty"`
	// The reason of the mandate from the gateway side.
	//
	MandateReason *string `json:"mandateReason,omitempty"`
	// Indicates whether the mandate is received from the gateway
	//
	MandateReceivedStatus *POSTPMMandateInfoMandateReceivedStatusEnum `json:"mandateReceivedStatus,omitempty"`
	// The status of the mandate from the gateway side.
	//
	MandateStatus *string `json:"mandateStatus,omitempty"`
	// The date on which the mandate was updated.
	//
	MandateUpdateDate *types.Date `json:"mandateUpdateDate,omitempty"`
	// Reference for the consent agreement that you have established with the customer.
	//
	MitConsentAgreementRef *string                                      `json:"mitConsentAgreementRef,omitempty"`
	MitConsentAgreementSrc *POSTPMMandateInfoMitConsentAgreementSrcEnum `json:"mitConsentAgreementSrc,omitempty"`
	// Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
	//
	// * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
	//
	//   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
	//
	//   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
	//
	//
	// * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
	//
	MitProfileAction *POSTPMMandateInfoMitProfileActionEnum `json:"mitProfileAction,omitempty"`
	// The date on which the stored credential profile is agreed. The date format is `yyyy-mm-dd`.
	//
	MitProfileAgreedOn *types.Date `json:"mitProfileAgreedOn,omitempty"`
	// Indicates the type of the stored credential profile.
	//
	MitProfileType *string `json:"mitProfileType,omitempty"`
	// Specifies the ID of the transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
	//
	MitTransactionID *string `json:"mitTransactionId,omitempty"`
}
