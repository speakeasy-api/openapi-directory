// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// LiveChatMessageSnippetTypeEnum - The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
type LiveChatMessageSnippetTypeEnum string

const (
	LiveChatMessageSnippetTypeEnumInvalidType                 LiveChatMessageSnippetTypeEnum = "invalidType"
	LiveChatMessageSnippetTypeEnumTextMessageEvent            LiveChatMessageSnippetTypeEnum = "textMessageEvent"
	LiveChatMessageSnippetTypeEnumTombstone                   LiveChatMessageSnippetTypeEnum = "tombstone"
	LiveChatMessageSnippetTypeEnumFanFundingEvent             LiveChatMessageSnippetTypeEnum = "fanFundingEvent"
	LiveChatMessageSnippetTypeEnumChatEndedEvent              LiveChatMessageSnippetTypeEnum = "chatEndedEvent"
	LiveChatMessageSnippetTypeEnumSponsorOnlyModeStartedEvent LiveChatMessageSnippetTypeEnum = "sponsorOnlyModeStartedEvent"
	LiveChatMessageSnippetTypeEnumSponsorOnlyModeEndedEvent   LiveChatMessageSnippetTypeEnum = "sponsorOnlyModeEndedEvent"
	LiveChatMessageSnippetTypeEnumNewSponsorEvent             LiveChatMessageSnippetTypeEnum = "newSponsorEvent"
	LiveChatMessageSnippetTypeEnumMemberMilestoneChatEvent    LiveChatMessageSnippetTypeEnum = "memberMilestoneChatEvent"
	LiveChatMessageSnippetTypeEnumMembershipGiftingEvent      LiveChatMessageSnippetTypeEnum = "membershipGiftingEvent"
	LiveChatMessageSnippetTypeEnumGiftMembershipReceivedEvent LiveChatMessageSnippetTypeEnum = "giftMembershipReceivedEvent"
	LiveChatMessageSnippetTypeEnumMessageDeletedEvent         LiveChatMessageSnippetTypeEnum = "messageDeletedEvent"
	LiveChatMessageSnippetTypeEnumMessageRetractedEvent       LiveChatMessageSnippetTypeEnum = "messageRetractedEvent"
	LiveChatMessageSnippetTypeEnumUserBannedEvent             LiveChatMessageSnippetTypeEnum = "userBannedEvent"
	LiveChatMessageSnippetTypeEnumSuperChatEvent              LiveChatMessageSnippetTypeEnum = "superChatEvent"
	LiveChatMessageSnippetTypeEnumSuperStickerEvent           LiveChatMessageSnippetTypeEnum = "superStickerEvent"
)

func (e LiveChatMessageSnippetTypeEnum) ToPointer() *LiveChatMessageSnippetTypeEnum {
	return &e
}

func (e *LiveChatMessageSnippetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalidType":
		fallthrough
	case "textMessageEvent":
		fallthrough
	case "tombstone":
		fallthrough
	case "fanFundingEvent":
		fallthrough
	case "chatEndedEvent":
		fallthrough
	case "sponsorOnlyModeStartedEvent":
		fallthrough
	case "sponsorOnlyModeEndedEvent":
		fallthrough
	case "newSponsorEvent":
		fallthrough
	case "memberMilestoneChatEvent":
		fallthrough
	case "membershipGiftingEvent":
		fallthrough
	case "giftMembershipReceivedEvent":
		fallthrough
	case "messageDeletedEvent":
		fallthrough
	case "messageRetractedEvent":
		fallthrough
	case "userBannedEvent":
		fallthrough
	case "superChatEvent":
		fallthrough
	case "superStickerEvent":
		*e = LiveChatMessageSnippetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveChatMessageSnippetTypeEnum: %v", v)
	}
}

// LiveChatMessageSnippet - Next ID: 33
type LiveChatMessageSnippet struct {
	// The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase
	AuthorChannelID *string `json:"authorChannelId,omitempty"`
	// Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
	DisplayMessage                *string                                `json:"displayMessage,omitempty"`
	FanFundingEventDetails        *LiveChatFanFundingEventDetails        `json:"fanFundingEventDetails,omitempty"`
	GiftMembershipReceivedDetails *LiveChatGiftMembershipReceivedDetails `json:"giftMembershipReceivedDetails,omitempty"`
	// Whether the message has display content that should be displayed to users.
	HasDisplayContent          *bool                               `json:"hasDisplayContent,omitempty"`
	LiveChatID                 *string                             `json:"liveChatId,omitempty"`
	MemberMilestoneChatDetails *LiveChatMemberMilestoneChatDetails `json:"memberMilestoneChatDetails,omitempty"`
	MembershipGiftingDetails   *LiveChatMembershipGiftingDetails   `json:"membershipGiftingDetails,omitempty"`
	MessageDeletedDetails      *LiveChatMessageDeletedDetails      `json:"messageDeletedDetails,omitempty"`
	MessageRetractedDetails    *LiveChatMessageRetractedDetails    `json:"messageRetractedDetails,omitempty"`
	NewSponsorDetails          *LiveChatNewSponsorDetails          `json:"newSponsorDetails,omitempty"`
	// The date and time when the message was orignally published.
	PublishedAt         *time.Time                   `json:"publishedAt,omitempty"`
	SuperChatDetails    *LiveChatSuperChatDetails    `json:"superChatDetails,omitempty"`
	SuperStickerDetails *LiveChatSuperStickerDetails `json:"superStickerDetails,omitempty"`
	TextMessageDetails  *LiveChatTextMessageDetails  `json:"textMessageDetails,omitempty"`
	// The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
	Type              *LiveChatMessageSnippetTypeEnum   `json:"type,omitempty"`
	UserBannedDetails *LiveChatUserBannedMessageDetails `json:"userBannedDetails,omitempty"`
}
