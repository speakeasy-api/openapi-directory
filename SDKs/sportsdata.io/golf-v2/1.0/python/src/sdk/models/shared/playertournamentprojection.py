"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import playerround as shared_playerround
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayerTournamentProjection:
    
    birdies: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Birdies'), 'exclude': lambda f: f is None }})  
    bogey_free_rounds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BogeyFreeRounds'), 'exclude': lambda f: f is None }})  
    bogeys: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Bogeys'), 'exclude': lambda f: f is None }})  
    bounce_back_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BounceBackCount'), 'exclude': lambda f: f is None }})  
    consecutive_birdie_or_better_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsecutiveBirdieOrBetterCount'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})  
    double_bogeys: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoubleBogeys'), 'exclude': lambda f: f is None }})  
    double_eagles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoubleEagles'), 'exclude': lambda f: f is None }})  
    draft_kings_salary: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DraftKingsSalary'), 'exclude': lambda f: f is None }})  
    eagles: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Eagles'), 'exclude': lambda f: f is None }})  
    earnings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Earnings'), 'exclude': lambda f: f is None }})  
    fan_duel_salary: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FanDuelSalary'), 'exclude': lambda f: f is None }})  
    fantasy_draft_salary: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyDraftSalary'), 'exclude': lambda f: f is None }})  
    fantasy_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPoints'), 'exclude': lambda f: f is None }})  
    fantasy_points_draft_kings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsDraftKings'), 'exclude': lambda f: f is None }})  
    fantasy_points_fan_duel: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFanDuel'), 'exclude': lambda f: f is None }})  
    fantasy_points_fantasy_draft: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFantasyDraft'), 'exclude': lambda f: f is None }})  
    fantasy_points_yahoo: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsYahoo'), 'exclude': lambda f: f is None }})  
    fed_ex_points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FedExPoints'), 'exclude': lambda f: f is None }})  
    hole_in_ones: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HoleInOnes'), 'exclude': lambda f: f is None }})  
    is_alternate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAlternate'), 'exclude': lambda f: f is None }})  
    is_withdrawn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsWithdrawn'), 'exclude': lambda f: f is None }})  
    made_cut: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MadeCut'), 'exclude': lambda f: f is None }})  
    made_cut_did_not_finish: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MadeCutDidNotFinish'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    odds_to_win: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OddsToWin'), 'exclude': lambda f: f is None }})  
    odds_to_win_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OddsToWinDescription'), 'exclude': lambda f: f is None }})  
    pars: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pars'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    player_tournament_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerTournamentID'), 'exclude': lambda f: f is None }})  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rank'), 'exclude': lambda f: f is None }})  
    rounds: Optional[list[shared_playerround.PlayerRound]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rounds'), 'exclude': lambda f: f is None }})  
    rounds_under_seventy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoundsUnderSeventy'), 'exclude': lambda f: f is None }})  
    rounds_with_five_or_more_birdies_or_better: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoundsWithFiveOrMoreBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    streaks_of_five_birdies_or_better: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreaksOfFiveBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    streaks_of_four_birdies_or_better: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreaksOfFourBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    streaks_of_six_birdies_or_better: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreaksOfSixBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    streaks_of_three_birdies_or_better: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreaksOfThreeBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    tee_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeeTime'), 'exclude': lambda f: f is None }})  
    total_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalScore'), 'exclude': lambda f: f is None }})  
    total_strokes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalStrokes'), 'exclude': lambda f: f is None }})  
    total_through: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalThrough'), 'exclude': lambda f: f is None }})  
    tournament_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TournamentID'), 'exclude': lambda f: f is None }})  
    tournament_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TournamentStatus'), 'exclude': lambda f: f is None }})  
    triple_bogeys: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TripleBogeys'), 'exclude': lambda f: f is None }})  
    win: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Win'), 'exclude': lambda f: f is None }})  
    worse_than_double_bogey: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorseThanDoubleBogey'), 'exclude': lambda f: f is None }})  
    worse_than_triple_bogey: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorseThanTripleBogey'), 'exclude': lambda f: f is None }})  
    