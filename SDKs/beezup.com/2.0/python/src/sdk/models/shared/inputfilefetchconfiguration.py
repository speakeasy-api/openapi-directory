"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressionformatstrategy_enum as shared_compressionformatstrategy_enum
from ..shared import credential as shared_credential
from ..shared import downloadcatalogstrategy_enum as shared_downloadcatalogstrategy_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InputFileFetchConfiguration:
    r"""Describe the way to download the file"""
    
    download_catalog_strategy: shared_downloadcatalogstrategy_enum.DownloadCatalogStrategyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadCatalogStrategy') }})
    r"""Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)"""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)"""  
    compressed_relative_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compressedRelativePath'), 'exclude': lambda f: f is None }})
    r"""Indicate the relative path in the compressed file"""  
    compression_format_strategy: Optional[shared_compressionformatstrategy_enum.CompressionFormatStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compressionFormatStrategy'), 'exclude': lambda f: f is None }})
    r"""Indicate the compression type"""  
    credential: Optional[shared_credential.Credential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential'), 'exclude': lambda f: f is None }})
    r"""Provides the credentials"""  
    download_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadTimeout'), 'exclude': lambda f: f is None }})
    r"""Indicate the download time out in second"""  
    