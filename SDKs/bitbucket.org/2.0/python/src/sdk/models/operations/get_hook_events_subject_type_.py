"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_hook_events as shared_paginated_hook_events
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetHookEventsSubjectTypeSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetHookEventsSubjectTypeSubjectTypeEnum(str, Enum):
    r"""A resource or subject type."""
    REPOSITORY = 'repository'
    WORKSPACE = 'workspace'


@dataclasses.dataclass
class GetHookEventsSubjectTypeRequest:
    
    subject_type: GetHookEventsSubjectTypeSubjectTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'subject_type', 'style': 'simple', 'explode': False }})
    r"""A resource or subject type."""  
    

@dataclasses.dataclass
class GetHookEventsSubjectTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If an invalid `{subject_type}` value was specified."""  
    paginated_hook_events: Optional[shared_paginated_hook_events.PaginatedHookEvents] = dataclasses.field(default=None)
    r"""A paginated list of webhook types available to subscribe on."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    