"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import errorlimit as shared_errorlimit
from ..shared import orderlist as shared_orderlist
from enum import Enum
from typing import Optional

class ListSortEnum(str, Enum):
    r"""Property name that will be used to sort results. '-' indicates descending"""
    CREATED_AT = 'createdAt'
    MINUS_CREATED_AT = '-createdAt'
    ORDER_ID = 'orderId'
    MINUS_ORDER_ID = '-orderId'
    PRICING_TOTAL = 'pricing.total'
    MINUS_PRICING_TOTAL = '-pricing.total'


@dataclasses.dataclass
class ListRequest:
    
    domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'domain', 'style': 'form', 'explode': True }})
    r"""Domain name to use as the filter of results"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of items to return"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Number of results to skip for pagination"""  
    parent_order_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parentOrderId', 'style': 'form', 'explode': True }})
    r"""Parent order id to use as the filter of results"""  
    payment_profile_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'paymentProfileId', 'style': 'form', 'explode': True }})
    r"""Payment profile id to use as the filter of results"""  
    period_end: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'periodEnd', 'style': 'form', 'explode': True }})
    r"""End of range indicating what time-frame should be returned. Inclusive"""  
    period_start: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'periodStart', 'style': 'form', 'explode': True }})
    r"""Start of range indicating what time-frame should be returned. Inclusive"""  
    product_group_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productGroupId', 'style': 'form', 'explode': True }})
    r"""Product group id to use as the filter of results"""  
    sort: Optional[ListSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Property name that will be used to sort results. '-' indicates descending"""  
    x_market_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Market-Id', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the Market in which the request is happening"""  
    x_shopper_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Shopper-Id', 'style': 'simple', 'explode': False }})
    r"""Shopper ID to be operated on, if different from JWT<br/><b>Reseller subaccounts are not supported</b>"""  
    

@dataclasses.dataclass
class ListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Request was malformed"""  
    error_limit: Optional[shared_errorlimit.ErrorLimit] = dataclasses.field(default=None)
    r"""Too many requests received within interval"""  
    order_list: Optional[shared_orderlist.OrderList] = dataclasses.field(default=None)
    r"""Request was successful"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    