// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IntegralAdScienceDisplayViewabilityEnum - Display Viewability section (applicable to display line items only).
type IntegralAdScienceDisplayViewabilityEnum string

const (
	IntegralAdScienceDisplayViewabilityEnumPerformanceViewabilityUnspecified IntegralAdScienceDisplayViewabilityEnum = "PERFORMANCE_VIEWABILITY_UNSPECIFIED"
	IntegralAdScienceDisplayViewabilityEnumPerformanceViewability40          IntegralAdScienceDisplayViewabilityEnum = "PERFORMANCE_VIEWABILITY_40"
	IntegralAdScienceDisplayViewabilityEnumPerformanceViewability50          IntegralAdScienceDisplayViewabilityEnum = "PERFORMANCE_VIEWABILITY_50"
	IntegralAdScienceDisplayViewabilityEnumPerformanceViewability60          IntegralAdScienceDisplayViewabilityEnum = "PERFORMANCE_VIEWABILITY_60"
	IntegralAdScienceDisplayViewabilityEnumPerformanceViewability70          IntegralAdScienceDisplayViewabilityEnum = "PERFORMANCE_VIEWABILITY_70"
)

func (e IntegralAdScienceDisplayViewabilityEnum) ToPointer() *IntegralAdScienceDisplayViewabilityEnum {
	return &e
}

func (e *IntegralAdScienceDisplayViewabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERFORMANCE_VIEWABILITY_UNSPECIFIED":
		fallthrough
	case "PERFORMANCE_VIEWABILITY_40":
		fallthrough
	case "PERFORMANCE_VIEWABILITY_50":
		fallthrough
	case "PERFORMANCE_VIEWABILITY_60":
		fallthrough
	case "PERFORMANCE_VIEWABILITY_70":
		*e = IntegralAdScienceDisplayViewabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceDisplayViewabilityEnum: %v", v)
	}
}

// IntegralAdScienceExcludedAdFraudRiskEnum - Ad Fraud settings.
type IntegralAdScienceExcludedAdFraudRiskEnum string

const (
	IntegralAdScienceExcludedAdFraudRiskEnumSuspiciousActivityUnspecified IntegralAdScienceExcludedAdFraudRiskEnum = "SUSPICIOUS_ACTIVITY_UNSPECIFIED"
	IntegralAdScienceExcludedAdFraudRiskEnumSuspiciousActivityHr          IntegralAdScienceExcludedAdFraudRiskEnum = "SUSPICIOUS_ACTIVITY_HR"
	IntegralAdScienceExcludedAdFraudRiskEnumSuspiciousActivityHmr         IntegralAdScienceExcludedAdFraudRiskEnum = "SUSPICIOUS_ACTIVITY_HMR"
)

func (e IntegralAdScienceExcludedAdFraudRiskEnum) ToPointer() *IntegralAdScienceExcludedAdFraudRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedAdFraudRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUSPICIOUS_ACTIVITY_UNSPECIFIED":
		fallthrough
	case "SUSPICIOUS_ACTIVITY_HR":
		fallthrough
	case "SUSPICIOUS_ACTIVITY_HMR":
		*e = IntegralAdScienceExcludedAdFraudRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedAdFraudRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedAdultRiskEnum - Brand Safety - **Adult content**.
type IntegralAdScienceExcludedAdultRiskEnum string

const (
	IntegralAdScienceExcludedAdultRiskEnumAdultUnspecified IntegralAdScienceExcludedAdultRiskEnum = "ADULT_UNSPECIFIED"
	IntegralAdScienceExcludedAdultRiskEnumAdultHr          IntegralAdScienceExcludedAdultRiskEnum = "ADULT_HR"
	IntegralAdScienceExcludedAdultRiskEnumAdultHmr         IntegralAdScienceExcludedAdultRiskEnum = "ADULT_HMR"
)

func (e IntegralAdScienceExcludedAdultRiskEnum) ToPointer() *IntegralAdScienceExcludedAdultRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedAdultRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADULT_UNSPECIFIED":
		fallthrough
	case "ADULT_HR":
		fallthrough
	case "ADULT_HMR":
		*e = IntegralAdScienceExcludedAdultRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedAdultRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedAlcoholRiskEnum - Brand Safety - **Alcohol**.
type IntegralAdScienceExcludedAlcoholRiskEnum string

const (
	IntegralAdScienceExcludedAlcoholRiskEnumAlcoholUnspecified IntegralAdScienceExcludedAlcoholRiskEnum = "ALCOHOL_UNSPECIFIED"
	IntegralAdScienceExcludedAlcoholRiskEnumAlcoholHr          IntegralAdScienceExcludedAlcoholRiskEnum = "ALCOHOL_HR"
	IntegralAdScienceExcludedAlcoholRiskEnumAlcoholHmr         IntegralAdScienceExcludedAlcoholRiskEnum = "ALCOHOL_HMR"
)

func (e IntegralAdScienceExcludedAlcoholRiskEnum) ToPointer() *IntegralAdScienceExcludedAlcoholRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedAlcoholRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALCOHOL_UNSPECIFIED":
		fallthrough
	case "ALCOHOL_HR":
		fallthrough
	case "ALCOHOL_HMR":
		*e = IntegralAdScienceExcludedAlcoholRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedAlcoholRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedDrugsRiskEnum - Brand Safety - **Drugs**.
type IntegralAdScienceExcludedDrugsRiskEnum string

const (
	IntegralAdScienceExcludedDrugsRiskEnumDrugsUnspecified IntegralAdScienceExcludedDrugsRiskEnum = "DRUGS_UNSPECIFIED"
	IntegralAdScienceExcludedDrugsRiskEnumDrugsHr          IntegralAdScienceExcludedDrugsRiskEnum = "DRUGS_HR"
	IntegralAdScienceExcludedDrugsRiskEnumDrugsHmr         IntegralAdScienceExcludedDrugsRiskEnum = "DRUGS_HMR"
)

func (e IntegralAdScienceExcludedDrugsRiskEnum) ToPointer() *IntegralAdScienceExcludedDrugsRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedDrugsRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRUGS_UNSPECIFIED":
		fallthrough
	case "DRUGS_HR":
		fallthrough
	case "DRUGS_HMR":
		*e = IntegralAdScienceExcludedDrugsRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedDrugsRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedGamblingRiskEnum - Brand Safety - **Gambling**.
type IntegralAdScienceExcludedGamblingRiskEnum string

const (
	IntegralAdScienceExcludedGamblingRiskEnumGamblingUnspecified IntegralAdScienceExcludedGamblingRiskEnum = "GAMBLING_UNSPECIFIED"
	IntegralAdScienceExcludedGamblingRiskEnumGamblingHr          IntegralAdScienceExcludedGamblingRiskEnum = "GAMBLING_HR"
	IntegralAdScienceExcludedGamblingRiskEnumGamblingHmr         IntegralAdScienceExcludedGamblingRiskEnum = "GAMBLING_HMR"
)

func (e IntegralAdScienceExcludedGamblingRiskEnum) ToPointer() *IntegralAdScienceExcludedGamblingRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedGamblingRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GAMBLING_UNSPECIFIED":
		fallthrough
	case "GAMBLING_HR":
		fallthrough
	case "GAMBLING_HMR":
		*e = IntegralAdScienceExcludedGamblingRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedGamblingRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedHateSpeechRiskEnum - Brand Safety - **Hate speech**.
type IntegralAdScienceExcludedHateSpeechRiskEnum string

const (
	IntegralAdScienceExcludedHateSpeechRiskEnumHateSpeechUnspecified IntegralAdScienceExcludedHateSpeechRiskEnum = "HATE_SPEECH_UNSPECIFIED"
	IntegralAdScienceExcludedHateSpeechRiskEnumHateSpeechHr          IntegralAdScienceExcludedHateSpeechRiskEnum = "HATE_SPEECH_HR"
	IntegralAdScienceExcludedHateSpeechRiskEnumHateSpeechHmr         IntegralAdScienceExcludedHateSpeechRiskEnum = "HATE_SPEECH_HMR"
)

func (e IntegralAdScienceExcludedHateSpeechRiskEnum) ToPointer() *IntegralAdScienceExcludedHateSpeechRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedHateSpeechRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HATE_SPEECH_UNSPECIFIED":
		fallthrough
	case "HATE_SPEECH_HR":
		fallthrough
	case "HATE_SPEECH_HMR":
		*e = IntegralAdScienceExcludedHateSpeechRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedHateSpeechRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedIllegalDownloadsRiskEnum - Brand Safety - **Illegal downloads**.
type IntegralAdScienceExcludedIllegalDownloadsRiskEnum string

const (
	IntegralAdScienceExcludedIllegalDownloadsRiskEnumIllegalDownloadsUnspecified IntegralAdScienceExcludedIllegalDownloadsRiskEnum = "ILLEGAL_DOWNLOADS_UNSPECIFIED"
	IntegralAdScienceExcludedIllegalDownloadsRiskEnumIllegalDownloadsHr          IntegralAdScienceExcludedIllegalDownloadsRiskEnum = "ILLEGAL_DOWNLOADS_HR"
	IntegralAdScienceExcludedIllegalDownloadsRiskEnumIllegalDownloadsHmr         IntegralAdScienceExcludedIllegalDownloadsRiskEnum = "ILLEGAL_DOWNLOADS_HMR"
)

func (e IntegralAdScienceExcludedIllegalDownloadsRiskEnum) ToPointer() *IntegralAdScienceExcludedIllegalDownloadsRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedIllegalDownloadsRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ILLEGAL_DOWNLOADS_UNSPECIFIED":
		fallthrough
	case "ILLEGAL_DOWNLOADS_HR":
		fallthrough
	case "ILLEGAL_DOWNLOADS_HMR":
		*e = IntegralAdScienceExcludedIllegalDownloadsRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedIllegalDownloadsRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedOffensiveLanguageRiskEnum - Brand Safety - **Offensive language**.
type IntegralAdScienceExcludedOffensiveLanguageRiskEnum string

const (
	IntegralAdScienceExcludedOffensiveLanguageRiskEnumOffensiveLanguageUnspecified IntegralAdScienceExcludedOffensiveLanguageRiskEnum = "OFFENSIVE_LANGUAGE_UNSPECIFIED"
	IntegralAdScienceExcludedOffensiveLanguageRiskEnumOffensiveLanguageHr          IntegralAdScienceExcludedOffensiveLanguageRiskEnum = "OFFENSIVE_LANGUAGE_HR"
	IntegralAdScienceExcludedOffensiveLanguageRiskEnumOffensiveLanguageHmr         IntegralAdScienceExcludedOffensiveLanguageRiskEnum = "OFFENSIVE_LANGUAGE_HMR"
)

func (e IntegralAdScienceExcludedOffensiveLanguageRiskEnum) ToPointer() *IntegralAdScienceExcludedOffensiveLanguageRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedOffensiveLanguageRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OFFENSIVE_LANGUAGE_UNSPECIFIED":
		fallthrough
	case "OFFENSIVE_LANGUAGE_HR":
		fallthrough
	case "OFFENSIVE_LANGUAGE_HMR":
		*e = IntegralAdScienceExcludedOffensiveLanguageRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedOffensiveLanguageRiskEnum: %v", v)
	}
}

// IntegralAdScienceExcludedViolenceRiskEnum - Brand Safety - **Violence**.
type IntegralAdScienceExcludedViolenceRiskEnum string

const (
	IntegralAdScienceExcludedViolenceRiskEnumViolenceUnspecified IntegralAdScienceExcludedViolenceRiskEnum = "VIOLENCE_UNSPECIFIED"
	IntegralAdScienceExcludedViolenceRiskEnumViolenceHr          IntegralAdScienceExcludedViolenceRiskEnum = "VIOLENCE_HR"
	IntegralAdScienceExcludedViolenceRiskEnumViolenceHmr         IntegralAdScienceExcludedViolenceRiskEnum = "VIOLENCE_HMR"
)

func (e IntegralAdScienceExcludedViolenceRiskEnum) ToPointer() *IntegralAdScienceExcludedViolenceRiskEnum {
	return &e
}

func (e *IntegralAdScienceExcludedViolenceRiskEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIOLENCE_UNSPECIFIED":
		fallthrough
	case "VIOLENCE_HR":
		fallthrough
	case "VIOLENCE_HMR":
		*e = IntegralAdScienceExcludedViolenceRiskEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceExcludedViolenceRiskEnum: %v", v)
	}
}

// IntegralAdScienceTraqScoreOptionEnum - True advertising quality (applicable to Display line items only).
type IntegralAdScienceTraqScoreOptionEnum string

const (
	IntegralAdScienceTraqScoreOptionEnumTraqUnspecified IntegralAdScienceTraqScoreOptionEnum = "TRAQ_UNSPECIFIED"
	IntegralAdScienceTraqScoreOptionEnumTraq250         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_250"
	IntegralAdScienceTraqScoreOptionEnumTraq500         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_500"
	IntegralAdScienceTraqScoreOptionEnumTraq600         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_600"
	IntegralAdScienceTraqScoreOptionEnumTraq700         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_700"
	IntegralAdScienceTraqScoreOptionEnumTraq750         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_750"
	IntegralAdScienceTraqScoreOptionEnumTraq875         IntegralAdScienceTraqScoreOptionEnum = "TRAQ_875"
	IntegralAdScienceTraqScoreOptionEnumTraq1000        IntegralAdScienceTraqScoreOptionEnum = "TRAQ_1000"
)

func (e IntegralAdScienceTraqScoreOptionEnum) ToPointer() *IntegralAdScienceTraqScoreOptionEnum {
	return &e
}

func (e *IntegralAdScienceTraqScoreOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRAQ_UNSPECIFIED":
		fallthrough
	case "TRAQ_250":
		fallthrough
	case "TRAQ_500":
		fallthrough
	case "TRAQ_600":
		fallthrough
	case "TRAQ_700":
		fallthrough
	case "TRAQ_750":
		fallthrough
	case "TRAQ_875":
		fallthrough
	case "TRAQ_1000":
		*e = IntegralAdScienceTraqScoreOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceTraqScoreOptionEnum: %v", v)
	}
}

// IntegralAdScienceVideoViewabilityEnum - Video Viewability Section (applicable to video line items only).
type IntegralAdScienceVideoViewabilityEnum string

const (
	IntegralAdScienceVideoViewabilityEnumVideoViewabilityUnspecified IntegralAdScienceVideoViewabilityEnum = "VIDEO_VIEWABILITY_UNSPECIFIED"
	IntegralAdScienceVideoViewabilityEnumVideoViewability40          IntegralAdScienceVideoViewabilityEnum = "VIDEO_VIEWABILITY_40"
	IntegralAdScienceVideoViewabilityEnumVideoViewability50          IntegralAdScienceVideoViewabilityEnum = "VIDEO_VIEWABILITY_50"
	IntegralAdScienceVideoViewabilityEnumVideoViewability60          IntegralAdScienceVideoViewabilityEnum = "VIDEO_VIEWABILITY_60"
	IntegralAdScienceVideoViewabilityEnumVideoViewability70          IntegralAdScienceVideoViewabilityEnum = "VIDEO_VIEWABILITY_70"
)

func (e IntegralAdScienceVideoViewabilityEnum) ToPointer() *IntegralAdScienceVideoViewabilityEnum {
	return &e
}

func (e *IntegralAdScienceVideoViewabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIDEO_VIEWABILITY_UNSPECIFIED":
		fallthrough
	case "VIDEO_VIEWABILITY_40":
		fallthrough
	case "VIDEO_VIEWABILITY_50":
		fallthrough
	case "VIDEO_VIEWABILITY_60":
		fallthrough
	case "VIDEO_VIEWABILITY_70":
		*e = IntegralAdScienceVideoViewabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntegralAdScienceVideoViewabilityEnum: %v", v)
	}
}

// IntegralAdScience - Details of Integral Ad Science settings.
type IntegralAdScience struct {
	// The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive.
	CustomSegmentID []string `json:"customSegmentId,omitempty"`
	// Display Viewability section (applicable to display line items only).
	DisplayViewability *IntegralAdScienceDisplayViewabilityEnum `json:"displayViewability,omitempty"`
	// Brand Safety - **Unrateable**.
	ExcludeUnrateable *bool `json:"excludeUnrateable,omitempty"`
	// Ad Fraud settings.
	ExcludedAdFraudRisk *IntegralAdScienceExcludedAdFraudRiskEnum `json:"excludedAdFraudRisk,omitempty"`
	// Brand Safety - **Adult content**.
	ExcludedAdultRisk *IntegralAdScienceExcludedAdultRiskEnum `json:"excludedAdultRisk,omitempty"`
	// Brand Safety - **Alcohol**.
	ExcludedAlcoholRisk *IntegralAdScienceExcludedAlcoholRiskEnum `json:"excludedAlcoholRisk,omitempty"`
	// Brand Safety - **Drugs**.
	ExcludedDrugsRisk *IntegralAdScienceExcludedDrugsRiskEnum `json:"excludedDrugsRisk,omitempty"`
	// Brand Safety - **Gambling**.
	ExcludedGamblingRisk *IntegralAdScienceExcludedGamblingRiskEnum `json:"excludedGamblingRisk,omitempty"`
	// Brand Safety - **Hate speech**.
	ExcludedHateSpeechRisk *IntegralAdScienceExcludedHateSpeechRiskEnum `json:"excludedHateSpeechRisk,omitempty"`
	// Brand Safety - **Illegal downloads**.
	ExcludedIllegalDownloadsRisk *IntegralAdScienceExcludedIllegalDownloadsRiskEnum `json:"excludedIllegalDownloadsRisk,omitempty"`
	// Brand Safety - **Offensive language**.
	ExcludedOffensiveLanguageRisk *IntegralAdScienceExcludedOffensiveLanguageRiskEnum `json:"excludedOffensiveLanguageRisk,omitempty"`
	// Brand Safety - **Violence**.
	ExcludedViolenceRisk *IntegralAdScienceExcludedViolenceRiskEnum `json:"excludedViolenceRisk,omitempty"`
	// True advertising quality (applicable to Display line items only).
	TraqScoreOption *IntegralAdScienceTraqScoreOptionEnum `json:"traqScoreOption,omitempty"`
	// Video Viewability Section (applicable to video line items only).
	VideoViewability *IntegralAdScienceVideoViewabilityEnum `json:"videoViewability,omitempty"`
}
