"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Contacts:
    r"""Create, modify or delete contacts"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def contacts_create_json(self, request: operations.ContactsCreateJSONRequest, security: operations.ContactsCreateJSONSecurity) -> operations.ContactsCreateJSONResponse:
        r"""Create contact"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsCreateJSONRequest, base_url, '/v1/accounts/{accountId}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contact_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactsCreateJSONRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsCreateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.contacts_create_json_201_application_json_one_of = out

        return res

    def contacts_create_string(self, request: operations.ContactsCreateStringRequest, security: operations.ContactsCreateStringSecurity) -> operations.ContactsCreateStringResponse:
        r"""Create contact"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsCreateStringRequest, base_url, '/v1/accounts/{accountId}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContactsCreateStringRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsCreateStringResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.contacts_create_string_201_application_json_one_of = out

        return res

    def contacts_fetch(self, request: operations.ContactsFetchRequest, security: operations.ContactsFetchSecurity) -> operations.ContactsFetchResponse:
        r"""Fetch contact by ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsFetchRequest, base_url, '/v1/accounts/{accountId}/contacts/{contactId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactResponse])
                res.contact_response = out

        return res

    def contacts_fetch_all(self, request: operations.ContactsFetchAllRequest, security: operations.ContactsFetchAllSecurity) -> operations.ContactsFetchAllResponse:
        r"""Fetch contacts"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsFetchAllRequest, base_url, '/v1/accounts/{accountId}/contacts', request)
        
        query_params = utils.get_query_params(operations.ContactsFetchAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsFetchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactsResponse])
                res.contacts_response = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def contacts_remove(self, request: operations.ContactsRemoveRequest, security: operations.ContactsRemoveSecurity) -> operations.ContactsRemoveResponse:
        r"""Deletes a contact"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsRemoveRequest, base_url, '/v1/accounts/{accountId}/contacts/{contactId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ContactsRemove200ApplicationJSON])
                res.contacts_remove_200_application_json_object = out

        return res

    def contacts_update(self, request: operations.ContactsUpdateRequest, security: operations.ContactsUpdateSecurity) -> operations.ContactsUpdateResponse:
        r"""Updates a contact"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContactsUpdateRequest, base_url, '/v1/accounts/{accountId}/contacts/{contactId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContactsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactResponse])
                res.contact_response = out

        return res

    