"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoapNoteCustomReportClinicalNoteField:
    r"""Array of field objects"""
    
    allowed_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_values'), 'exclude': lambda f: f is None }})  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Indicates that the field has been soft-deleted by the doctor"""  
    clinical_note_template: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clinical_note_template'), 'exclude': lambda f: f is None }})  
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_type'), 'exclude': lambda f: f is None }})
    r"""One of `\\"\\"`, `\\"Checkbox\\"`, `\\"NullCheckbox\\"`, `\\"String\\"`, `\\"TwoStrings\\"`, `\\"FreeDraw\\"`, `\\"Photo\\"`, `\\"Header\\"`, `\\"Subheader\\"`"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates that a note should not be locked unless a value is provided for this field"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoapNoteCustomReportSoapNoteCustomReport:
    r"""Order of templates"""
    
    on_complete_note: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_complete_note'), 'exclude': lambda f: f is None }})
    r"""Order of the template on complete notes"""  
    on_ipad: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_ipad'), 'exclude': lambda f: f is None }})
    r"""Order of the template on iPad"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoapNoteCustomReport:
    r"""OK"""
    
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Indicates that the doctor has soft-deleted this template, and will not use it for future appointments"""  
    clinical_note_fields: Optional[list[SoapNoteCustomReportClinicalNoteField]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clinical_note_fields'), 'exclude': lambda f: f is None }})
    r"""clinical note fields"""  
    doctor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    is_onpatient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_onpatient'), 'exclude': lambda f: f is None }})  
    is_persistent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_persistent'), 'exclude': lambda f: f is None }})
    r"""If this is true, this report will be the same across all notes"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    order: Optional[SoapNoteCustomReportSoapNoteCustomReport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""Order of templates"""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    