/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Subnetwork - Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network.
 */
public class Subnetwork {
    /**
     * Whether this subnetwork's ranges can conflict with existing static routes. Setting this to true allows this subnetwork's primary and secondary ranges to overlap with (and contain) static routes that have already been configured on the corresponding network. For example if a static route has range 10.1.0.0/16, a subnet range 10.0.0.0/8 could only be created if allow_conflicting_routes=true. Overlapping is only allowed on subnetwork operations; routes whose ranges conflict with this subnetwork's ranges won't be allowed unless route.allow_conflicting_subnetworks is set to true. Typically packets destined to IPs within the subnetwork (which may contain private/sensitive data) are prevented from leaving the virtual network. Setting this field to true will disable this feature. The default value is false and applies to all existing subnetworks and automatically created subnetworks. This field cannot be set to true at resource creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSubnetCidrRoutesOverlap")
    public Boolean allowSubnetCidrRoutesOverlap;

    public Subnetwork withAllowSubnetCidrRoutesOverlap(Boolean allowSubnetCidrRoutesOverlap) {
        this.allowSubnetCidrRoutesOverlap = allowSubnetCidrRoutesOverlap;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public Subnetwork withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Subnetwork withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableFlowLogs")
    public Boolean enableFlowLogs;

    public Subnetwork withEnableFlowLogs(Boolean enableFlowLogs) {
        this.enableFlowLogs = enableFlowLogs;
        return this;
    }
    
    /**
     * The external IPv6 address range that is owned by this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalIpv6Prefix")
    public String externalIpv6Prefix;

    public Subnetwork withExternalIpv6Prefix(String externalIpv6Prefix) {
        this.externalIpv6Prefix = externalIpv6Prefix;
        return this;
    }
    
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public Subnetwork withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gatewayAddress")
    public String gatewayAddress;

    public Subnetwork withGatewayAddress(String gatewayAddress) {
        this.gatewayAddress = gatewayAddress;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Subnetwork withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internalIpv6Prefix")
    public String internalIpv6Prefix;

    public Subnetwork withInternalIpv6Prefix(String internalIpv6Prefix) {
        this.internalIpv6Prefix = internalIpv6Prefix;
        return this;
    }
    
    /**
     * The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipCidrRange")
    public String ipCidrRange;

    public Subnetwork withIpCidrRange(String ipCidrRange) {
        this.ipCidrRange = ipCidrRange;
        return this;
    }
    
    /**
     * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6AccessType")
    public SubnetworkIpv6AccessTypeEnum ipv6AccessType;

    public Subnetwork withIpv6AccessType(SubnetworkIpv6AccessTypeEnum ipv6AccessType) {
        this.ipv6AccessType = ipv6AccessType;
        return this;
    }
    
    /**
     * [Output Only] This field is for internal use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6CidrRange")
    public String ipv6CidrRange;

    public Subnetwork withIpv6CidrRange(String ipv6CidrRange) {
        this.ipv6CidrRange = ipv6CidrRange;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Subnetwork withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The available logging options for this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logConfig")
    public SubnetworkLogConfig logConfig;

    public Subnetwork withLogConfig(SubnetworkLogConfig logConfig) {
        this.logConfig = logConfig;
        return this;
    }
    
    /**
     * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Subnetwork withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;

    public Subnetwork withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateIpGoogleAccess")
    public Boolean privateIpGoogleAccess;

    public Subnetwork withPrivateIpGoogleAccess(Boolean privateIpGoogleAccess) {
        this.privateIpGoogleAccess = privateIpGoogleAccess;
        return this;
    }
    
    /**
     * This field is for internal use. This field can be both set at resource creation time and updated using patch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateIpv6GoogleAccess")
    public SubnetworkPrivateIpv6GoogleAccessEnum privateIpv6GoogleAccess;

    public Subnetwork withPrivateIpv6GoogleAccess(SubnetworkPrivateIpv6GoogleAccessEnum privateIpv6GoogleAccess) {
        this.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
        return this;
    }
    
    /**
     * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose")
    public SubnetworkPurposeEnum purpose;

    public Subnetwork withPurpose(SubnetworkPurposeEnum purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public Subnetwork withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * The URL of the reserved internal range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservedInternalRange")
    public String reservedInternalRange;

    public Subnetwork withReservedInternalRange(String reservedInternalRange) {
        this.reservedInternalRange = reservedInternalRange;
        return this;
    }
    
    /**
     * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    public SubnetworkRoleEnum role;

    public Subnetwork withRole(SubnetworkRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryIpRanges")
    public SubnetworkSecondaryRange[] secondaryIpRanges;

    public Subnetwork withSecondaryIpRanges(SubnetworkSecondaryRange[] secondaryIpRanges) {
        this.secondaryIpRanges = secondaryIpRanges;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public Subnetwork withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackType")
    public SubnetworkStackTypeEnum stackType;

    public Subnetwork withStackType(SubnetworkStackTypeEnum stackType) {
        this.stackType = stackType;
        return this;
    }
    
    /**
     * [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public SubnetworkStateEnum state;

    public Subnetwork withState(SubnetworkStateEnum state) {
        this.state = state;
        return this;
    }
    
    public Subnetwork(){}
}
