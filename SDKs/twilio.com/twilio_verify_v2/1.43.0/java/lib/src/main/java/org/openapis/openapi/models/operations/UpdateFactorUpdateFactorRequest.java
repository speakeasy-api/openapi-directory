/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateFactorUpdateFactorRequest {
    /**
     * The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
     */
    @SpeakeasyMetadata("form:name=AuthPayload")
    public String authPayload;

    public UpdateFactorUpdateFactorRequest withAuthPayload(String authPayload) {
        this.authPayload = authPayload;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=Config.Alg")
    public org.openapis.openapi.models.shared.FactorEnumTotpAlgorithmsEnum configAlg;

    public UpdateFactorUpdateFactorRequest withConfigAlg(org.openapis.openapi.models.shared.FactorEnumTotpAlgorithmsEnum configAlg) {
        this.configAlg = configAlg;
        return this;
    }
    
    /**
     * Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
     */
    @SpeakeasyMetadata("form:name=Config.CodeLength")
    public Long configCodeLength;

    public UpdateFactorUpdateFactorRequest withConfigCodeLength(Long configCodeLength) {
        this.configCodeLength = configCodeLength;
        return this;
    }
    
    /**
     * The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.
     * 
     * Required when `factor_type` is `push`.
     */
    @SpeakeasyMetadata("form:name=Config.NotificationPlatform")
    public String configNotificationPlatform;

    public UpdateFactorUpdateFactorRequest withConfigNotificationPlatform(String configNotificationPlatform) {
        this.configNotificationPlatform = configNotificationPlatform;
        return this;
    }
    
    /**
     * For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long.
     */
    @SpeakeasyMetadata("form:name=Config.NotificationToken")
    public String configNotificationToken;

    public UpdateFactorUpdateFactorRequest withConfigNotificationToken(String configNotificationToken) {
        this.configNotificationToken = configNotificationToken;
        return this;
    }
    
    /**
     * The Verify Push SDK version used to configure the factor
     */
    @SpeakeasyMetadata("form:name=Config.SdkVersion")
    public String configSDKVersion;

    public UpdateFactorUpdateFactorRequest withConfigSDKVersion(String configSDKVersion) {
        this.configSDKVersion = configSDKVersion;
        return this;
    }
    
    /**
     * The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
     */
    @SpeakeasyMetadata("form:name=Config.Skew")
    public Long configSkew;

    public UpdateFactorUpdateFactorRequest withConfigSkew(Long configSkew) {
        this.configSkew = configSkew;
        return this;
    }
    
    /**
     * Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
     */
    @SpeakeasyMetadata("form:name=Config.TimeStep")
    public Long configTimeStep;

    public UpdateFactorUpdateFactorRequest withConfigTimeStep(Long configTimeStep) {
        this.configTimeStep = configTimeStep;
        return this;
    }
    
    /**
     * The new friendly name of this Factor. It can be up to 64 characters.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;

    public UpdateFactorUpdateFactorRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    public UpdateFactorUpdateFactorRequest(){}
}
