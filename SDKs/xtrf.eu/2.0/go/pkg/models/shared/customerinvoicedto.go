// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CustomerInvoiceDTOStatusEnum string

const (
	CustomerInvoiceDTOStatusEnumNotReady CustomerInvoiceDTOStatusEnum = "NOT_READY"
	CustomerInvoiceDTOStatusEnumReady    CustomerInvoiceDTOStatusEnum = "READY"
	CustomerInvoiceDTOStatusEnumSent     CustomerInvoiceDTOStatusEnum = "SENT"
)

func (e CustomerInvoiceDTOStatusEnum) ToPointer() *CustomerInvoiceDTOStatusEnum {
	return &e
}

func (e *CustomerInvoiceDTOStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NOT_READY":
		fallthrough
	case "READY":
		fallthrough
	case "SENT":
		*e = CustomerInvoiceDTOStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerInvoiceDTOStatusEnum: %v", v)
	}
}

type CustomerInvoiceDTOTypeEnum string

const (
	CustomerInvoiceDTOTypeEnumFinal      CustomerInvoiceDTOTypeEnum = "FINAL"
	CustomerInvoiceDTOTypeEnumDraft      CustomerInvoiceDTOTypeEnum = "DRAFT"
	CustomerInvoiceDTOTypeEnumCreditNote CustomerInvoiceDTOTypeEnum = "CREDIT_NOTE"
)

func (e CustomerInvoiceDTOTypeEnum) ToPointer() *CustomerInvoiceDTOTypeEnum {
	return &e
}

func (e *CustomerInvoiceDTOTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FINAL":
		fallthrough
	case "DRAFT":
		fallthrough
	case "CREDIT_NOTE":
		*e = CustomerInvoiceDTOTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerInvoiceDTOTypeEnum: %v", v)
	}
}

type CustomerInvoiceDTOVatCalculationRuleEnum string

const (
	CustomerInvoiceDTOVatCalculationRuleEnumSumItems   CustomerInvoiceDTOVatCalculationRuleEnum = "SUM_ITEMS"
	CustomerInvoiceDTOVatCalculationRuleEnumByNetTotal CustomerInvoiceDTOVatCalculationRuleEnum = "BY_NET_TOTAL"
)

func (e CustomerInvoiceDTOVatCalculationRuleEnum) ToPointer() *CustomerInvoiceDTOVatCalculationRuleEnum {
	return &e
}

func (e *CustomerInvoiceDTOVatCalculationRuleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUM_ITEMS":
		fallthrough
	case "BY_NET_TOTAL":
		*e = CustomerInvoiceDTOVatCalculationRuleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomerInvoiceDTOVatCalculationRuleEnum: %v", v)
	}
}

// CustomerInvoiceDTO - Success
type CustomerInvoiceDTO struct {
	CurrencyID         *int64                                    `json:"currencyId,omitempty"`
	CustomerDetails    *CustomerDetailsDTO                       `json:"customerDetails,omitempty"`
	CustomerID         *int64                                    `json:"customerId,omitempty"`
	Dates              *CustomerInvoiceDatesDTO                  `json:"dates,omitempty"`
	ID                 *int64                                    `json:"id,omitempty"`
	InvoiceNumber      *string                                   `json:"invoiceNumber,omitempty"`
	PaymentMethodID    *int64                                    `json:"paymentMethodId,omitempty"`
	PaymentTerms       *PaymentTermsDTO                          `json:"paymentTerms,omitempty"`
	Status             *CustomerInvoiceDTOStatusEnum             `json:"status,omitempty"`
	Tasks              []TaskDTO                                 `json:"tasks,omitempty"`
	TasksValue         *float64                                  `json:"tasksValue,omitempty"`
	TotalGross         *float64                                  `json:"totalGross,omitempty"`
	TotalInWords       *string                                   `json:"totalInWords,omitempty"`
	TotalNetto         *float64                                  `json:"totalNetto,omitempty"`
	Type               *CustomerInvoiceDTOTypeEnum               `json:"type,omitempty"`
	VatCalculationRule *CustomerInvoiceDTOVatCalculationRuleEnum `json:"vatCalculationRule,omitempty"`
}
