"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import annotation_enum_answered_by_enum as shared_annotation_enum_answered_by_enum
from ..shared import annotation_enum_connectivity_issue_enum as shared_annotation_enum_connectivity_issue_enum
from ..shared import insights_v1_call_annotation as shared_insights_v1_call_annotation
from typing import Optional

UPDATE_ANNOTATION_SERVERS = [
	"https://insights.twilio.com",
]


@dataclasses.dataclass
class UpdateAnnotationSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class UpdateAnnotationUpdateAnnotationRequest:
    
    answered_by: Optional[shared_annotation_enum_answered_by_enum.AnnotationEnumAnsweredByEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AnsweredBy' }})  
    call_score: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallScore' }})
    r"""Specify the call score. This is of type integer. Use a range of 1-5 to indicate the call experience score, with the following mapping as a reference for rating the call [5: Excellent, 4: Good, 3 : Fair, 2 : Poor, 1: Bad]."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Comment' }})
    r"""Specify any comments pertaining to the call. This of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here."""  
    connectivity_issue: Optional[shared_annotation_enum_connectivity_issue_enum.AnnotationEnumConnectivityIssueEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConnectivityIssue' }})  
    incident: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Incident' }})
    r"""Associate this call with an incident or support ticket. This is of type string with a max limit of 100 characters. Twilio does not treat this field as PII, so don’t put any PII in here."""  
    quality_issues: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'QualityIssues' }})
    r"""Specify if the call had any subjective quality issues. Possible values, one or more of:  no_quality_issue, low_volume, choppy_robotic, echo, dtmf, latency, owa, static_noise. Use comma separated values to indicate multiple quality issues for the same call"""  
    spam: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Spam' }})
    r"""Specify if the call was a spam call. Use this to provide feedback on whether calls placed from your account were marked as spam, or if inbound calls received by your account were unwanted spam. Is of type Boolean: true, false. Use true if the call was a spam call."""  
    

@dataclasses.dataclass
class UpdateAnnotationRequest:
    
    call_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'CallSid', 'style': 'simple', 'explode': False }})
    r"""The unique string that Twilio created to identify this Call resource. It always starts with a CA."""  
    request_body: Optional[UpdateAnnotationUpdateAnnotationRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateAnnotationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    insights_v1_call_annotation: Optional[shared_insights_v1_call_annotation.InsightsV1CallAnnotation] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    