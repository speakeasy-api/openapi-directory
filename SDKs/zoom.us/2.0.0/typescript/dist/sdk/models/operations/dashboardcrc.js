"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardCRCResponse = exports.DashboardCrc200ApplicationJSON = exports.DashboardCrc200ApplicationJSONCRCPortsUsage = exports.DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage = exports.DashboardCrc200ApplicationXML = exports.DashboardCrc200ApplicationXMLCRCPortsUsage = exports.DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage = exports.DashboardCRCRequest = exports.DashboardCRCSecurity = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var DashboardCRCSecurity = /** @class */ (function (_super) {
    __extends(DashboardCRCSecurity, _super);
    function DashboardCRCSecurity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "security, scheme=true;type=oauth2;name=Authorization",
        }),
        __metadata("design:type", String)
    ], DashboardCRCSecurity.prototype, "oAuth", void 0);
    return DashboardCRCSecurity;
}(utils_1.SpeakeasyBase));
exports.DashboardCRCSecurity = DashboardCRCSecurity;
var DashboardCRCRequest = /** @class */ (function (_super) {
    __extends(DashboardCRCRequest, _super);
    function DashboardCRCRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=from;dateTimeFormat=YYYY-MM-DD",
        }),
        __metadata("design:type", Date)
    ], DashboardCRCRequest.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=to;dateTimeFormat=YYYY-MM-DD",
        }),
        __metadata("design:type", Date)
    ], DashboardCRCRequest.prototype, "to", void 0);
    return DashboardCRCRequest;
}(utils_1.SpeakeasyBase));
exports.DashboardCRCRequest = DashboardCRCRequest;
var DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage, _super);
    function DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage.prototype, "hour", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage.prototype, "maxUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage.prototype, "totalUsage", void 0);
    return DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage = DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage;
var DashboardCrc200ApplicationXMLCRCPortsUsage = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationXMLCRCPortsUsage, _super);
    function DashboardCrc200ApplicationXMLCRCPortsUsage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DashboardCrc200ApplicationXMLCRCPortsUsageCRCPortsHourUsage,
        }),
        __metadata("design:type", Array)
    ], DashboardCrc200ApplicationXMLCRCPortsUsage.prototype, "crcPortsHourUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationXMLCRCPortsUsage.prototype, "dateTime", void 0);
    return DashboardCrc200ApplicationXMLCRCPortsUsage;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationXMLCRCPortsUsage = DashboardCrc200ApplicationXMLCRCPortsUsage;
/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * CRC usage returned.<br>
 * Only available for paid accounts that have enabled the Dashboard feature.
 */
var DashboardCrc200ApplicationXML = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationXML, _super);
    function DashboardCrc200ApplicationXML() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DashboardCrc200ApplicationXMLCRCPortsUsage }),
        __metadata("design:type", Array)
    ], DashboardCrc200ApplicationXML.prototype, "crcPortsUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationXML.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationXML.prototype, "to", void 0);
    return DashboardCrc200ApplicationXML;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationXML = DashboardCrc200ApplicationXML;
var DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage, _super);
    function DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hour" }),
        __metadata("design:type", String)
    ], DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage.prototype, "hour", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "max_usage" }),
        __metadata("design:type", Number)
    ], DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage.prototype, "maxUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "total_usage" }),
        __metadata("design:type", Number)
    ], DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage.prototype, "totalUsage", void 0);
    return DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage = DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage;
var DashboardCrc200ApplicationJSONCRCPortsUsage = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationJSONCRCPortsUsage, _super);
    function DashboardCrc200ApplicationJSONCRCPortsUsage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage,
        }),
        (0, class_transformer_1.Expose)({ name: "crc_ports_hour_usage" }),
        (0, class_transformer_1.Type)(function () { return DashboardCrc200ApplicationJSONCRCPortsUsageCRCPortsHourUsage; }),
        __metadata("design:type", Array)
    ], DashboardCrc200ApplicationJSONCRCPortsUsage.prototype, "crcPortsHourUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "date_time" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationJSONCRCPortsUsage.prototype, "dateTime", void 0);
    return DashboardCrc200ApplicationJSONCRCPortsUsage;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationJSONCRCPortsUsage = DashboardCrc200ApplicationJSONCRCPortsUsage;
/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * CRC usage returned.<br>
 * Only available for paid accounts that have enabled the Dashboard feature.
 */
var DashboardCrc200ApplicationJSON = /** @class */ (function (_super) {
    __extends(DashboardCrc200ApplicationJSON, _super);
    function DashboardCrc200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DashboardCrc200ApplicationJSONCRCPortsUsage }),
        (0, class_transformer_1.Expose)({ name: "crc_ports_usage" }),
        (0, class_transformer_1.Type)(function () { return DashboardCrc200ApplicationJSONCRCPortsUsage; }),
        __metadata("design:type", Array)
    ], DashboardCrc200ApplicationJSON.prototype, "crcPortsUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "from" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationJSON.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "to" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], DashboardCrc200ApplicationJSON.prototype, "to", void 0);
    return DashboardCrc200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.DashboardCrc200ApplicationJSON = DashboardCrc200ApplicationJSON;
var DashboardCRCResponse = /** @class */ (function (_super) {
    __extends(DashboardCRCResponse, _super);
    function DashboardCRCResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], DashboardCRCResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DashboardCRCResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DashboardCRCResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], DashboardCRCResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DashboardCrc200ApplicationJSON)
    ], DashboardCRCResponse.prototype, "dashboardCRC200ApplicationJSONObject", void 0);
    return DashboardCRCResponse;
}(utils_1.SpeakeasyBase));
exports.DashboardCRCResponse = DashboardCRCResponse;
