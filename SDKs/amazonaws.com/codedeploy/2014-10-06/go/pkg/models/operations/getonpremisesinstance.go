// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetOnPremisesInstanceXAmzTargetEnum
type GetOnPremisesInstanceXAmzTargetEnum string

const (
	GetOnPremisesInstanceXAmzTargetEnumCodeDeploy20141006GetOnPremisesInstance GetOnPremisesInstanceXAmzTargetEnum = "CodeDeploy_20141006.GetOnPremisesInstance"
)

func (e *GetOnPremisesInstanceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetOnPremisesInstance":
		*e = GetOnPremisesInstanceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOnPremisesInstanceXAmzTargetEnum: %s", s)
	}
}

type GetOnPremisesInstanceRequest struct {
	GetOnPremisesInstanceInput shared.GetOnPremisesInstanceInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 GetOnPremisesInstanceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetOnPremisesInstanceResponse struct {
	ContentType string
	// Success
	GetOnPremisesInstanceOutput *shared.GetOnPremisesInstanceOutput
	// InstanceNameRequiredException
	InstanceNameRequiredException interface{}
	// InstanceNotRegisteredException
	InstanceNotRegisteredException interface{}
	// InvalidInstanceNameException
	InvalidInstanceNameException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
