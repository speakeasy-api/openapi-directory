// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostCommentReplyXAmzTargetEnum
type PostCommentReplyXAmzTargetEnum string

const (
	PostCommentReplyXAmzTargetEnumCodeCommit20150413PostCommentReply PostCommentReplyXAmzTargetEnum = "CodeCommit_20150413.PostCommentReply"
)

func (e *PostCommentReplyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.PostCommentReply":
		*e = PostCommentReplyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCommentReplyXAmzTargetEnum: %s", s)
	}
}

type PostCommentReplyHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PostCommentReplyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PostCommentReplyRequest struct {
	Headers PostCommentReplyHeaders
	Request shared.PostCommentReplyInput `request:"mediaType=application/json"`
}

type PostCommentReplyResponse struct {
	// ClientRequestTokenRequiredException
	ClientRequestTokenRequiredException interface{}
	// CommentContentRequiredException
	CommentContentRequiredException interface{}
	// CommentContentSizeLimitExceededException
	CommentContentSizeLimitExceededException interface{}
	// CommentDoesNotExistException
	CommentDoesNotExistException interface{}
	// CommentIdRequiredException
	CommentIDRequiredException interface{}
	ContentType                string
	// IdempotencyParameterMismatchException
	IdempotencyParameterMismatchException interface{}
	// InvalidClientRequestTokenException
	InvalidClientRequestTokenException interface{}
	// InvalidCommentIdException
	InvalidCommentIDException interface{}
	// Success
	PostCommentReplyOutput *shared.PostCommentReplyOutput
	StatusCode             int
	RawResponse            *http.Response
}
