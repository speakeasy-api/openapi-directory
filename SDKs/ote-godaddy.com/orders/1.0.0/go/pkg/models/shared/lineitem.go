// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LineItemPeriodUnitEnum - The unit of time that periodCount is measured in
type LineItemPeriodUnitEnum string

const (
	LineItemPeriodUnitEnumMonth      LineItemPeriodUnitEnum = "MONTH"
	LineItemPeriodUnitEnumQuarter    LineItemPeriodUnitEnum = "QUARTER"
	LineItemPeriodUnitEnumSemiAnnual LineItemPeriodUnitEnum = "SEMI_ANNUAL"
	LineItemPeriodUnitEnumYear       LineItemPeriodUnitEnum = "YEAR"
	LineItemPeriodUnitEnumOneTime    LineItemPeriodUnitEnum = "ONE_TIME"
)

func (e LineItemPeriodUnitEnum) ToPointer() *LineItemPeriodUnitEnum {
	return &e
}

func (e *LineItemPeriodUnitEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTH":
		fallthrough
	case "QUARTER":
		fallthrough
	case "SEMI_ANNUAL":
		fallthrough
	case "YEAR":
		fallthrough
	case "ONE_TIME":
		*e = LineItemPeriodUnitEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineItemPeriodUnitEnum: %v", v)
	}
}

type LineItem struct {
	// A collection of domain names purchased if the current product is domain
	Domains []string `json:"domains,omitempty"`
	// Human readable description of the current product
	Label  string   `json:"label"`
	Period *float64 `json:"period,omitempty"`
	// The unit of time that periodCount is measured in
	PeriodUnit *LineItemPeriodUnitEnum `json:"periodUnit,omitempty"`
	// Unique identifier of the current product
	Pfid    *int64          `json:"pfid,omitempty"`
	Pricing LineItemPricing `json:"pricing"`
	// Number of the current product included in the specified order
	Quantity     int64                 `json:"quantity"`
	TaxCollector *LineItemTaxCollector `json:"taxCollector,omitempty"`
}
