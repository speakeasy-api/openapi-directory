"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class OrderPlacement:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def place_order(self, request: operations.PlaceOrderRequest) -> operations.PlaceOrderResponse:
        r"""Place order
        Places order without having any prior cart information. This means all information on items, client, payment and shipping must be sent in the body.
        
        >⚠️ The authentication of this endpoint is required if you are creating an order with an item that has an attachment that creates a Subscription. For more information, access [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/checkout/pub/orders'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PlaceOrderRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PlaceOrder200ApplicationJSON])
                res.place_order_200_application_json_object = out

        return res

    def place_order_from_existing_order_form(self, request: operations.PlaceOrderFromExistingOrderFormRequest) -> operations.PlaceOrderFromExistingOrderFormResponse:
        r"""Place order from an existing cart
        This endpoint places an order from an existing `orderForm` object, meaning an existing cart.
        
        
        After the creation of an order with this request, you have five minutes to send payment information and then request payment processing.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlaceOrderFromExistingOrderFormRequest, base_url, '/api/checkout/pub/orderForm/{orderFormId}/transaction', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaceOrderFromExistingOrderFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.place_order_from_existing_order_form_200_application_json_object = out

        return res

    def process_order(self, request: operations.ProcessOrderRequest) -> operations.ProcessOrderResponse:
        r"""Process order
        Order processing callback request, which is made after an order's payment is approved.
        
        
        > This request has to be made until five minutes after the [Place order](https://developers.vtex.com/docs/api-reference/checkout-api#put-/api/checkout/pub/orders) or [Place order from existing cart](https://developers.vtex.com/docs/api-reference/checkout-api#post-/api/checkout/pub/orderForm/-orderFormId-/transaction) request has been made, or else, the order will not be processed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProcessOrderRequest, base_url, '/api/checkout/pub/gatewayCallback/{orderGroup}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProcessOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ProcessOrder500ApplicationJSON])
                res.process_order_500_application_json_object = out

        return res

    