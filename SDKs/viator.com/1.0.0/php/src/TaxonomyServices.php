<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TaxonomyServices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * /taxonomy/attractions
     * 
     * Get attractions
     * - Retrieves a list of attractions (things like the Eiffel Tower or Empire State Building) and their associated unique numeric identifiers
     * - The attraction's identifier (`seoId`) can be used as a means of searching for available products; for example, in the [/search/products](#operation/searchProducts) service.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractionsResponse
     */
	public function taxonomyAttractions(
        \OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/taxonomy/attractions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxonomyAttractions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaxonomyAttractions200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /taxonomy/categories
     * 
     * Get all product categories
     * - Retrieves a list of product categories for a destination that can be used as a means of filtering when searching for products using the [/search/products](/#operation/searchProducts) service
     * - This service can be used to get a list of all categories and subcategories for a destination by including its `destId`, or you can omit the `destId` to get a list of all categories and subcategories
     * - **Note:** If no `destId` is passed, `productCount` and `thumbnailURL` will be `null` as they are destination-specific fields
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesResponse
     */
	public function taxonomyCategories(
        \OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/taxonomy/categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaxonomyCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxonomyCategories200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaxonomyCategories200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * /taxonomy/destinations
     * 
     * Get details of all destinations supported by this API
     * - Retrieves all the country taxonomy/city nodes as a flat list
     * - Returns a complete list of Viator destinations, including destination names and parent identifiers
     * - Used to provide navigation through drill down lists or combo boxes
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinationsResponse
     */
	public function taxonomyDestinations(
        \OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/taxonomy/destinations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->taxonomyDestinations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\TaxonomyDestinations200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}