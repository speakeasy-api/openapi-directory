// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"openapi/pkg/types"
)

type AuditEventContextType string

const (
	AuditEventContextTypeContextAppCreate     AuditEventContextType = "ContextAppCreate"
	AuditEventContextTypeContextNumberLinking AuditEventContextType = "ContextNumberLinking"
	AuditEventContextTypeContextNumberUpdate  AuditEventContextType = "ContextNumberUpdate"
)

type AuditEventContext struct {
	ContextAppCreate     *ContextAppCreate
	ContextNumberLinking *ContextNumberLinking
	ContextNumberUpdate  *ContextNumberUpdate

	Type AuditEventContextType
}

func CreateAuditEventContextContextAppCreate(contextAppCreate ContextAppCreate) AuditEventContext {
	typ := AuditEventContextTypeContextAppCreate

	return AuditEventContext{
		ContextAppCreate: &contextAppCreate,
		Type:             typ,
	}
}

func CreateAuditEventContextContextNumberLinking(contextNumberLinking ContextNumberLinking) AuditEventContext {
	typ := AuditEventContextTypeContextNumberLinking

	return AuditEventContext{
		ContextNumberLinking: &contextNumberLinking,
		Type:                 typ,
	}
}

func CreateAuditEventContextContextNumberUpdate(contextNumberUpdate ContextNumberUpdate) AuditEventContext {
	typ := AuditEventContextTypeContextNumberUpdate

	return AuditEventContext{
		ContextNumberUpdate: &contextNumberUpdate,
		Type:                typ,
	}
}

func (u *AuditEventContext) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	contextAppCreate := new(ContextAppCreate)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contextAppCreate); err == nil {
		u.ContextAppCreate = contextAppCreate
		u.Type = AuditEventContextTypeContextAppCreate
		return nil
	}

	contextNumberLinking := new(ContextNumberLinking)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contextNumberLinking); err == nil {
		u.ContextNumberLinking = contextNumberLinking
		u.Type = AuditEventContextTypeContextNumberLinking
		return nil
	}

	contextNumberUpdate := new(ContextNumberUpdate)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&contextNumberUpdate); err == nil {
		u.ContextNumberUpdate = contextNumberUpdate
		u.Type = AuditEventContextTypeContextNumberUpdate
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuditEventContext) MarshalJSON() ([]byte, error) {
	if u.ContextAppCreate != nil {
		return json.Marshal(u.ContextAppCreate)
	}

	if u.ContextNumberLinking != nil {
		return json.Marshal(u.ContextNumberLinking)
	}

	if u.ContextNumberUpdate != nil {
		return json.Marshal(u.ContextNumberUpdate)
	}

	return nil, nil
}

// AuditEventSourceEnum - The source of the event.
// CD: Customer Dashboard DEVAPI: via Developer API
type AuditEventSourceEnum string

const (
	AuditEventSourceEnumCd     AuditEventSourceEnum = "CD"
	AuditEventSourceEnumDevapi AuditEventSourceEnum = "DEVAPI"
)

func (e *AuditEventSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CD":
		fallthrough
	case "DEVAPI":
		*e = AuditEventSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuditEventSourceEnum: %s", s)
	}
}

// AuditEventSourceDescriptionEnum - Description of the audit event source.
type AuditEventSourceDescriptionEnum string

const (
	AuditEventSourceDescriptionEnumCustomerDashboard AuditEventSourceDescriptionEnum = "Customer Dashboard"
	AuditEventSourceDescriptionEnumDeveloperAPI      AuditEventSourceDescriptionEnum = "Developer API"
)

func (e *AuditEventSourceDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Customer Dashboard":
		fallthrough
	case "Developer API":
		*e = AuditEventSourceDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuditEventSourceDescriptionEnum: %s", s)
	}
}

// AuditEvent - OK
type AuditEvent struct {
	// A link to this audit event object if you were to retrieve it individually.
	Links *EventLink `json:"_links,omitempty"`
	// The NEXMO_API_KEY of the Vonage API account that the audit event is associated with.
	AccountID *string `json:"account_id,omitempty"`
	// A valid JSON object with information detailing the context of the audit event.
	Context *AuditEventContext `json:"context,omitempty"`
	// When the audit event was created.
	CreatedAt *types.Date `json:"created_at,omitempty"`
	// The type of the audit event.
	EventType *EventTypesEnum `json:"event_type,omitempty"`
	// A description of the event type
	EventTypeDescription *string `json:"event_type_description,omitempty"`
	// UUID of the audit event
	ID *string `json:"id,omitempty"`
	// The source of the event.
	// CD: Customer Dashboard DEVAPI: via Developer API
	//
	Source *AuditEventSourceEnum `json:"source,omitempty"`
	// ISO 3166-1 Alpha-2 country code recorded for the event.
	SourceCountry *string `json:"source_country,omitempty"`
	// Description of the audit event source.
	SourceDescription *AuditEventSourceDescriptionEnum `json:"source_description,omitempty"`
	// The IP address used to make the account change.
	SourceIP *string `json:"source_ip,omitempty"`
	// Email of the user whose account the audit event is associated with.
	UserEmail *string `json:"user_email,omitempty"`
	// The ID of the user that the audit event is associated with.
	UserID *int64 `json:"user_id,omitempty"`
}
