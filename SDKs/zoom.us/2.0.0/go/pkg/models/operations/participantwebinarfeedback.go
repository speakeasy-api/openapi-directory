// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ParticipantWebinarFeedbackPathParams struct {
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

// ParticipantWebinarFeedbackTypeEnum - Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
//
// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
type ParticipantWebinarFeedbackTypeEnum string

const (
	ParticipantWebinarFeedbackTypeEnumPast    ParticipantWebinarFeedbackTypeEnum = "past"
	ParticipantWebinarFeedbackTypeEnumPastOne ParticipantWebinarFeedbackTypeEnum = "pastOne"
	ParticipantWebinarFeedbackTypeEnumLive    ParticipantWebinarFeedbackTypeEnum = "live"
)

func (e *ParticipantWebinarFeedbackTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = ParticipantWebinarFeedbackTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantWebinarFeedbackTypeEnum: %s", s)
	}
}

type ParticipantWebinarFeedbackQueryParams struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
	//
	// If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
	Type *ParticipantWebinarFeedbackTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ParticipantWebinarFeedbackRequest struct {
	PathParams  ParticipantWebinarFeedbackPathParams
	QueryParams ParticipantWebinarFeedbackQueryParams
}

// ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum - Feedback submitted by the participant.
//
// * `GOOD`: Thumbs up.
// * `NOT GOOD`: Thumbs down.
type ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum string

const (
	ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnumGood    ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum = "GOOD"
	ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnumNotGood ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum = "NOT GOOD"
)

func (e *ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GOOD":
		fallthrough
	case "NOT GOOD":
		*e = ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum: %s", s)
	}
}

type ParticipantWebinarFeedback200ApplicationXMLParticipants struct {
	// Date and time at which the feedback was submitted.
	DateTime *time.Time
	// Email address of the participant.
	Email *string
	// Feedback submitted by the participant.
	//
	// * `GOOD`: Thumbs up.
	// * `NOT GOOD`: Thumbs down.
	Quality *ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum
	// User ID of the participant.
	UserID *string
}

// ParticipantWebinarFeedback200ApplicationXML - **HTTP Status Code:** `200`<br>
type ParticipantWebinarFeedback200ApplicationXML struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned within a single API call.
	PageSize     *int64
	Participants []ParticipantWebinarFeedback200ApplicationXMLParticipants
}

// ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum - Feedback submitted by the participant.
//
// * `GOOD`: Thumbs up.
// * `NOT GOOD`: Thumbs down.
type ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum string

const (
	ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnumGood    ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum = "GOOD"
	ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnumNotGood ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum = "NOT GOOD"
)

func (e *ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GOOD":
		fallthrough
	case "NOT GOOD":
		*e = ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum: %s", s)
	}
}

type ParticipantWebinarFeedback200ApplicationJSONParticipants struct {
	// Date and time at which the feedback was submitted.
	DateTime *time.Time `json:"date_time,omitempty"`
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Feedback submitted by the participant.
	//
	// * `GOOD`: Thumbs up.
	// * `NOT GOOD`: Thumbs down.
	Quality *ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum `json:"quality,omitempty"`
	// User ID of the participant.
	UserID *string `json:"user_id,omitempty"`
}

// ParticipantWebinarFeedback200ApplicationJSON - **HTTP Status Code:** `200`<br>
type ParticipantWebinarFeedback200ApplicationJSON struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned within a single API call.
	PageSize     *int64                                                     `json:"page_size,omitempty"`
	Participants []ParticipantWebinarFeedback200ApplicationJSONParticipants `json:"participants,omitempty"`
}

type ParticipantWebinarFeedbackResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	//
	//
	ParticipantWebinarFeedback200ApplicationJSONObject *ParticipantWebinarFeedback200ApplicationJSON
}
