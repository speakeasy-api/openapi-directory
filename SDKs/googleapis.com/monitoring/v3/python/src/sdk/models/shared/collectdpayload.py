"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collectdvalue as shared_collectdvalue
from ..shared import typedvalue as shared_typedvalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CollectdPayload:
    r"""A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information."""
    
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'exclude': lambda f: f is None }})
    r"""The end time of the interval."""  
    metadata: Optional[dict[str, shared_typedvalue.TypedValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The measurement metadata. Example: \\"process_id\\" -> 12345"""  
    plugin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plugin'), 'exclude': lambda f: f is None }})
    r"""The name of the plugin. Example: \\"disk\\"."""  
    plugin_instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pluginInstance'), 'exclude': lambda f: f is None }})
    r"""The instance name of the plugin Example: \\"hdcl\\"."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""The start time of the interval."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The measurement type. Example: \\"memory\\"."""  
    type_instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeInstance'), 'exclude': lambda f: f is None }})
    r"""The measurement type instance. Example: \\"used\\"."""  
    values: Optional[list[shared_collectdvalue.CollectdValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})
    r"""The measured values during this time interval. Each value must have a different data_source_name."""  
    