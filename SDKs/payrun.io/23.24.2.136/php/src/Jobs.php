<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Jobs 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the Batch job
     * 
     * Deletes the the Batch job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobResponse
     */
	public function deleteBatchJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBatchJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the CIS job
     * 
     * Deletes the the CIS job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobResponse
     */
	public function deleteCisJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the DPS job
     * 
     * Deletes the the DPS job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobResponse
     */
	public function deleteDpsJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDpsJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the pay run job
     * 
     * Deletes the the payrun job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobResponse
     */
	public function deletePayRunJob(
        \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePayRunJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the RTI job
     * 
     * Deletes the the RTI job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobResponse
     */
	public function deleteRtiJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRtiJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the Third Party job
     * 
     * Deletes the the Third Party job
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobResponse
     */
	public function deleteThirdPartyJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty/{JobId}', \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteThirdPartyJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Batch job information
     * 
     * Return the the Batch job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoResponse
     */
	public function getBatchJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Batch job progress
     * 
     * Return the the Batch job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressResponse
     */
	public function getBatchJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Batch job status
     * 
     * Return the the Batch job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusResponse
     */
	public function getBatchJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Batch jobs
     * 
     * Gets all the Batch jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBatchJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBatchJobsResponse
     */
	public function getBatchJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetBatchJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBatchJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBatchJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the CIS job information
     * 
     * Return the the CIS job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoResponse
     */
	public function getCisJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the CIS job progress
     * 
     * Return the the CIS job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressResponse
     */
	public function getCisJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the CIS job status
     * 
     * Return the the CIS job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusResponse
     */
	public function getCisJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all CIS jobs
     * 
     * Gets all the CIS jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisJobsResponse
     */
	public function getCisJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetCisJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the DPS job information
     * 
     * Return the the DPS job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoResponse
     */
	public function getDpsJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDpsJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the DPS job progress
     * 
     * Return the the DPS job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressResponse
     */
	public function getDpsJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDpsJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the DPS job status
     * 
     * Return the the DPS job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusResponse
     */
	public function getDpsJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDpsJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all DPS jobs
     * 
     * Gets all the DPS jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDpsJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDpsJobsResponse
     */
	public function getDpsJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetDpsJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDpsJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDpsJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all jobs relating to the employer.
     * 
     * Returns all job information objects for the specified employer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsResponse
     */
	public function getEmployerJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Employer/{EmployerId}', \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmployerJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getEmployerJobs200ApplicationJSONBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the pay run job information
     * 
     * Return the the payrun job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoResponse
     */
	public function getPayRunJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the pay run job progress
     * 
     * Return the the payrun job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressResponse
     */
	public function getPayRunJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the pay run job status
     * 
     * Return the the payrun job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusResponse
     */
	public function getPayRunJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all PayRun jobs
     * 
     * Gets all the pay run jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobsResponse
     */
	public function getPayRunJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the RTI job information
     * 
     * Return the the RTI job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoResponse
     */
	public function getRtiJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRtiJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the RTI job progress
     * 
     * Return the the RTI job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressResponse
     */
	public function getRtiJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRtiJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the RTI job status
     * 
     * Return the the RTI job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusResponse
     */
	public function getRtiJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRtiJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all RTI jobs
     * 
     * Gets all the RTI jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRtiJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRtiJobsResponse
     */
	public function getRtiJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetRtiJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRtiJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRtiJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Third Party job information
     * 
     * Return the the Third Party job information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoResponse
     */
	public function getThirdPartyJobInfo(
        \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty/{JobId}/Info', \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->jobInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\JobInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Third Party job progress
     * 
     * Return the the Third Party job progress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressResponse
     */
	public function getThirdPartyJobProgress(
        \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty/{JobId}/Progress', \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the Third Party job status
     * 
     * Return the the Third Party job status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusResponse
     */
	public function getThirdPartyJobStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty/{JobId}/Status', \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Third Party jobs
     * 
     * Gets all the Third Party jobs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobsResponse
     */
	public function getThirdPartyJobs(
        \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetThirdPartyJobsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Batch job
     * 
     * Adds a new Batch job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewBatchJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewBatchJobResponse
     */
	public function postNewBatchJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewBatchJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewBatchJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchJobInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewBatchJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new CIS job
     * 
     * Adds a new CIS job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewCisJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewCisJobResponse
     */
	public function postNewCisJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewCisJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewCisJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Cis');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cisJobInstructionBase", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewCisJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new DPS job
     * 
     * Creates the new DPS job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewDpsJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewDpsJobResponse
     */
	public function postNewDpsJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewDpsJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewDpsJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Dps');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dpsJobInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewDpsJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new PayRun job
     * 
     * Creates the new pay run job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewPayRunJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewPayRunJobResponse
     */
	public function postNewPayRunJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewPayRunJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewPayRunJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/PayRuns');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payRunJobInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewPayRunJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new RTI job
     * 
     * Creates the new RTI job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewRtiJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewRtiJobResponse
     */
	public function postNewRtiJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewRtiJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewRtiJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/Rti');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "rtiJobInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewRtiJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Third Party job
     * 
     * Adds a new Third Party job to the queue and returns the job info
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNewThirdPartyJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNewThirdPartyJobResponse
     */
	public function postNewThirdPartyJob(
        \OpenAPI\OpenAPI\Models\Operations\PostNewThirdPartyJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNewThirdPartyJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Jobs/ThirdParty');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "thirdPartyJobInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNewThirdPartyJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}