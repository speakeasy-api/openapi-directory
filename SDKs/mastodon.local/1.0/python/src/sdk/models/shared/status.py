"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import account as shared_account
from ..shared import application as shared_application
from ..shared import attachment as shared_attachment
from ..shared import card as shared_card
from ..shared import emoji as shared_emoji
from ..shared import mention as shared_mention
from ..shared import poll as shared_poll
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class StatusVisibilityEnum(str, Enum):
    r"""Visibility of this status."""
    PUBLIC = 'public'
    UNLISTED = 'unlisted'
    PRIVATE = 'private'
    DIRECT = 'direct'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Status:
    r"""Represents a status posted by an account.
    https://docs.joinmastodon.org/entities/status/
    """
    
    account: Optional[shared_account.Account] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Represents a user of Mastodon and their associated profile.
    https://docs.joinmastodon.org/entities/account/
    """  
    application: Optional[shared_application.Application] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application'), 'exclude': lambda f: f is None }})
    r"""Represents an application that interfaces with the REST API to access accounts or post statuses.
    https://docs.joinmastodon.org/entities/application/
    """  
    bookmarked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookmarked'), 'exclude': lambda f: f is None }})
    r"""Have you bookmarked this status?"""  
    card: Optional[shared_card.Card] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    r"""Represents a rich preview card that is generated using OpenGraph tags from a URL.
    https://docs.joinmastodon.org/entities/card/
    """  
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""HTML-encoded status content."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when this status was created."""  
    emojis: Optional[list[shared_emoji.Emoji]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emojis'), 'exclude': lambda f: f is None }})
    r"""Custom emoji to be used when rendering status content."""  
    favourited: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('favourited'), 'exclude': lambda f: f is None }})
    r"""Have you favourited this status?"""  
    favourites_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('favourites_count'), 'exclude': lambda f: f is None }})
    r"""How many favourites this status has received."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the status in the database. Cast from an integer but not guaranteed to be a number."""  
    in_reply_to_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_reply_to_account_id'), 'exclude': lambda f: f is None }})
    r"""ID of the account being replied to."""  
    in_reply_to_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_reply_to_id'), 'exclude': lambda f: f is None }})
    r"""ID of the status being replied. Cast from an integer but not guaranteed to be a number."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Primary language of this status. ISO 639 Part 1 two-letter language code."""  
    media_attachments: Optional[list[shared_attachment.Attachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_attachments'), 'exclude': lambda f: f is None }})
    r"""Media that is attached to this status."""  
    mentions: Optional[list[shared_mention.Mention]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentions'), 'exclude': lambda f: f is None }})
    r"""Mentions of users within the status content."""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted'), 'exclude': lambda f: f is None }})
    r"""Have you muted notifications for this status's conversation?"""  
    pinned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned'), 'exclude': lambda f: f is None }})
    r"""Have you pinned this status? Only appears if the status is pinnable."""  
    poll: Optional[shared_poll.Poll] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poll'), 'exclude': lambda f: f is None }})
    r"""Represents a poll attached to a status.
    https://docs.joinmastodon.org/entities/poll/
    """  
    reblog: Optional[Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reblog'), 'exclude': lambda f: f is None }})
    r"""Represents a status posted by an account.
    https://docs.joinmastodon.org/entities/status/
    """  
    reblogged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reblogged'), 'exclude': lambda f: f is None }})
    r"""Have you boosted this status?"""  
    reblogs_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reblogs_count'), 'exclude': lambda f: f is None }})
    r"""How many boosts this status has received."""  
    replies_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replies_count'), 'exclude': lambda f: f is None }})
    r"""How many replies this status has received."""  
    sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sensitive'), 'exclude': lambda f: f is None }})
    r"""Is this status marked as sensitive content?"""  
    spoiler_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spoiler_text'), 'exclude': lambda f: f is None }})
    r"""Subject or summary line, below which status content is collapsed until expanded."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Hashtags used within the status content."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""URI of the status used for federation."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""A link to the status's HTML representation."""  
    visibility: Optional[StatusVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Visibility of this status."""  
    