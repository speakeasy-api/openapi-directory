"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nasetpoint as shared_nasetpoint
from ..shared import nasetpointlog as shared_nasetpointlog
from ..shared import nathermmeasure as shared_nathermmeasure
from ..shared import nathermprogram as shared_nathermprogram
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAThermostat:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id'), 'exclude': lambda f: f is None }})  
    battery_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery_percent'), 'exclude': lambda f: f is None }})
    r"""It contains the current battery level in percentage."""  
    battery_vp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('battery_vp'), 'exclude': lambda f: f is None }})
    r"""It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.
    \"Indoor module Battery range: 6000 ... 4200\" |
    INDOOR_BATTERY_LEVEL_FULL = 5640
    INDOOR_BATTERY_LEVEL_HIGH = 5280
    INDOOR_BATTERY_LEVEL_MEDIUM = 4920
    INDOOR_BATTERY_LEVEL_LOW = 4560
    \"Below 4560: very low\" |
        
    \"Raingauge and outdoor module Battery range: 6000 ... 3600\" |
    BATTERY_LEVEL_FULL = 5500
    BATTERY_LEVEL_HIGH = 5000
    BATTERY_LEVEL_MEDIUM = 4500
    BATTERY_LEVEL_LOW = 4000
    \"Below 4000: very low\" |
        
    \"Thermostat Battery range: 4500 ... 3000\" |
    THERMOSTAT_BATTERY_LEVEL_FULL = 4100
    THERMOSTAT_BATTERY_LEVEL_HIGH = 3600
    THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300
    THERMOSTAT_BATTERY_LEVEL_LOW = 3000
    \"Below 3000: very low\" 
    """  
    firmware: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})  
    last_message: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_message'), 'exclude': lambda f: f is None }})  
    last_therm_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_therm_seen'), 'exclude': lambda f: f is None }})  
    measured: Optional[shared_nathermmeasure.NAThermMeasure] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measured'), 'exclude': lambda f: f is None }})  
    module_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('module_name'), 'exclude': lambda f: f is None }})  
    rf_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rf_status'), 'exclude': lambda f: f is None }})
    r"""\\"It contains the current radio status. The different thresholds to take into account are :\\" |
    RADIO_THRESHOLD_SIGNAL_LOW = 90 
    RADIO_THRESHOLD_SIGNAL_MEDIUM = 80
    RADIO_THRESHOLD_SIGNAL_HIGH = 70
    RADIO_THRESHOLD_SIGNAL_FULL = 60
    """  
    setpoint: Optional[shared_nasetpoint.NASetpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint'), 'exclude': lambda f: f is None }})  
    setpoint_history: Optional[list[shared_nasetpointlog.NASetpointLog]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint_history'), 'exclude': lambda f: f is None }})
    r"""The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered."""  
    setpoint_order: Optional[shared_nasetpoint.NASetpoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setpoint_order'), 'exclude': lambda f: f is None }})  
    therm_orientation: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_orientation'), 'exclude': lambda f: f is None }})  
    therm_program_list: Optional[list[shared_nathermprogram.NAThermProgram]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_program_list'), 'exclude': lambda f: f is None }})
    r"""List of the weekly heating planning used by the thermostat"""  
    therm_relay_cmd: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('therm_relay_cmd'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Included in every device or module. It defines the type of the device/module. Its values are among :
    NAMain : for the base station
    NAModule1 : for the outdoor module
    NAModule4 : for the additionnal indoor module
    NAModule3 : for the rain gauge module
    NAPlug : for the thermostat relay/plug
    NATherm1 : for the thermostat module
    """  
    