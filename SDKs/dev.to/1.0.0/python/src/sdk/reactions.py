"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Reactions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_api_reactions(self, request: operations.PostAPIReactionsRequest) -> operations.PostAPIReactionsResponse:
        r"""create reaction
        This endpoint allows the client to create a reaction to a specified reactable (eg, Article, Comment, or User). For examples:
                * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles
                * \"Like\"ing that Article a second time will return the previous \"like\" 
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/reactions'
        
        query_params = utils.get_query_params(operations.PostAPIReactionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIReactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_reactions_toggle(self, request: operations.PostAPIReactionsToggleRequest) -> operations.PostAPIReactionsToggleResponse:
        r"""toggle reaction
        This endpoint allows the client to toggle the user's reaction to a specified reactable (eg, Article, Comment, or User). For examples:
                * \"Like\"ing an Article will create a new \"like\" Reaction from the user for that Articles
                * \"Like\"ing that Article a second time will remove the \"like\" from the user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/reactions/toggle'
        
        query_params = utils.get_query_params(operations.PostAPIReactionsToggleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIReactionsToggleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    