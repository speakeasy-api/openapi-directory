/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Provisioning {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new Billbee user account with the data passed
   */
  automaticProvisioningCreateAccountForm(
    req: shared.RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer,
    config?: AxiosRequestConfig
  ): Promise<operations.AutomaticProvisioningCreateAccountFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new shared.RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/automaticprovision/createaccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AutomaticProvisioningCreateAccountFormResponse =
        new operations.AutomaticProvisioningCreateAccountFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.automaticProvisioningCreateAccountForm200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.automaticProvisioningCreateAccountForm200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Billbee user account with the data passed
   */
  automaticProvisioningCreateAccountJson(
    req: shared.RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer,
    config?: AxiosRequestConfig
  ): Promise<operations.AutomaticProvisioningCreateAccountJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new shared.RechnungsdruckWebAppControllersApiAutomaticProvisioningControllerCreateAccountContainer(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/automaticprovision/createaccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AutomaticProvisioningCreateAccountJsonResponse =
        new operations.AutomaticProvisioningCreateAccountJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.automaticProvisioningCreateAccountJSON200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.automaticProvisioningCreateAccountJSON200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Billbee user account with the data passed
   */
  automaticProvisioningCreateAccountRaw(
    req: Uint8Array,
    config?: AxiosRequestConfig
  ): Promise<operations.AutomaticProvisioningCreateAccountRawResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/automaticprovision/createaccount";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AutomaticProvisioningCreateAccountRawResponse =
        new operations.AutomaticProvisioningCreateAccountRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.automaticProvisioningCreateAccountRaw200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.automaticProvisioningCreateAccountRaw200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns infos about Billbee terms and conditions
   */
  automaticProvisioningTermsInfo(
    config?: AxiosRequestConfig
  ): Promise<operations.AutomaticProvisioningTermsInfoResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/automaticprovision/termsinfo";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AutomaticProvisioningTermsInfoResponse =
        new operations.AutomaticProvisioningTermsInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.automaticProvisioningTermsInfo200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.automaticProvisioningTermsInfo200TextJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
