/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetProjectUsernameProjectRequest extends SpeakeasyBase {
  /**
   * Restricts which builds are returned.
   *
   * @remarks
   * Set to "completed", "successful", "failed", "running", or defaults to no filter.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: shared.FilterEnum;

  /**
   * The number of builds to return. Maximum 100, defaults to 30.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * The API returns builds starting from this offset, defaults to 0.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * XXXXXXXXX
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=project",
  })
  project: string;

  /**
   * XXXXXXXXX
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=username",
  })
  username: string;
}

export class GetProjectUsernameProjectResponse extends SpeakeasyBase {
  /**
   * Build summary for each of the last 30 builds
   */
  @SpeakeasyMetadata({ elemType: shared.Build })
  builds?: shared.Build[];

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
