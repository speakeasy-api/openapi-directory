// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MnrgaSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type MnrgaRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// MnrgaRequestBodyFormatEnum - The format of the certificate in response.
type MnrgaRequestBodyFormatEnum string

const (
	MnrgaRequestBodyFormatEnumPdf MnrgaRequestBodyFormatEnum = "pdf"
)

func (e *MnrgaRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MnrgaRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MnrgaRequestBodyFormatEnum: %s", s)
	}
}

// MnrgaRequestBody - Request format
type MnrgaRequestBody struct {
	CertificateParameters *MnrgaRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MnrgaRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type MnrgaRequest struct {
	// Request format
	Request  *MnrgaRequestBody `request:"mediaType=application/json"`
	Security MnrgaSecurity
}

type Mnrga504ApplicationJSONErrorEnum string

const (
	Mnrga504ApplicationJSONErrorEnumGatewayTimeout Mnrga504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Mnrga504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Mnrga504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga504ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga504ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mnrga504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Mnrga504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Mnrga504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga504ApplicationJSON - Gateway timeout
type Mnrga504ApplicationJSON struct {
	Error            *Mnrga504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga503ApplicationJSONErrorEnum string

const (
	Mnrga503ApplicationJSONErrorEnumServiceUnavailable Mnrga503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Mnrga503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Mnrga503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga503ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga503ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mnrga503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Mnrga503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Mnrga503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga503ApplicationJSON - Service unavailable
type Mnrga503ApplicationJSON struct {
	Error            *Mnrga503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga502ApplicationJSONErrorEnum string

const (
	Mnrga502ApplicationJSONErrorEnumBadGatewy Mnrga502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Mnrga502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Mnrga502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga502ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga502ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mnrga502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Mnrga502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Mnrga502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga502ApplicationJSON - Bad gateway
type Mnrga502ApplicationJSON struct {
	Error            *Mnrga502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga500ApplicationJSONErrorEnum string

const (
	Mnrga500ApplicationJSONErrorEnumInternalServerError Mnrga500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Mnrga500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Mnrga500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga500ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga500ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga500ApplicationJSONErrorDescriptionEnumInternalServerError Mnrga500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Mnrga500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Mnrga500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga500ApplicationJSON - Internal server error
type Mnrga500ApplicationJSON struct {
	Error            *Mnrga500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga404ApplicationJSONErrorEnum string

const (
	Mnrga404ApplicationJSONErrorEnumRecordNotFound Mnrga404ApplicationJSONErrorEnum = "record_not_found"
	Mnrga404ApplicationJSONErrorEnumURLNotFound    Mnrga404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Mnrga404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mnrga404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga404ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga404ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mnrga404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mnrga404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mnrga404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Mnrga404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mnrga404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga404ApplicationJSON - No record found
type Mnrga404ApplicationJSON struct {
	Error            *Mnrga404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga401ApplicationJSONErrorEnum string

const (
	Mnrga401ApplicationJSONErrorEnumInvalidAuthentication Mnrga401ApplicationJSONErrorEnum = "invalid_authentication"
	Mnrga401ApplicationJSONErrorEnumInvalidAuthorization  Mnrga401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Mnrga401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mnrga401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga401ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga401ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mnrga401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mnrga401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mnrga401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Mnrga401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mnrga401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga401ApplicationJSON - Unauthorized access
type Mnrga401ApplicationJSON struct {
	Error            *Mnrga401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mnrga400ApplicationJSONErrorEnum string

const (
	Mnrga400ApplicationJSONErrorEnumMissingParameter Mnrga400ApplicationJSONErrorEnum = "missing_parameter"
	Mnrga400ApplicationJSONErrorEnumInvalidParameter Mnrga400ApplicationJSONErrorEnum = "invalid_parameter"
	Mnrga400ApplicationJSONErrorEnumInvalidFormat    Mnrga400ApplicationJSONErrorEnum = "invalid_format"
	Mnrga400ApplicationJSONErrorEnumInvalidTxnid     Mnrga400ApplicationJSONErrorEnum = "invalid_txnid"
	Mnrga400ApplicationJSONErrorEnumInvalidConsentid Mnrga400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Mnrga400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mnrga400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga400ApplicationJSONErrorEnum: %s", s)
	}
}

type Mnrga400ApplicationJSONErrorDescriptionEnum string

const (
	Mnrga400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mnrga400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mnrga400ApplicationJSONErrorDescriptionEnumBadRequest                              Mnrga400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mnrga400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mnrga400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mnrga400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mnrga400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mnrga400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mnrga400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Mnrga400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mnrga400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mnrga400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mnrga400ApplicationJSON - Bad request
type Mnrga400ApplicationJSON struct {
	Error            *Mnrga400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mnrga400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MnrgaResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mnrga400ApplicationJSONObject *Mnrga400ApplicationJSON
	// Unauthorized access
	Mnrga401ApplicationJSONObject *Mnrga401ApplicationJSON
	// No record found
	Mnrga404ApplicationJSONObject *Mnrga404ApplicationJSON
	// Internal server error
	Mnrga500ApplicationJSONObject *Mnrga500ApplicationJSON
	// Bad gateway
	Mnrga502ApplicationJSONObject *Mnrga502ApplicationJSON
	// Service unavailable
	Mnrga503ApplicationJSONObject *Mnrga503ApplicationJSON
	// Gateway timeout
	Mnrga504ApplicationJSONObject *Mnrga504ApplicationJSON
}
