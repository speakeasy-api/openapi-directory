/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RegistrationInput - The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
 */
public class RegistrationInput {
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contactSettings")
    public ContactSettings contactSettings;
    public RegistrationInput withContactSettings(ContactSettings contactSettings) {
        this.contactSettings = contactSettings;
        return this;
    }
    
    /**
     * Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dnsSettings")
    public DnsSettingsInput dnsSettings;
    public RegistrationInput withDnsSettings(DnsSettingsInput dnsSettings) {
        this.dnsSettings = dnsSettings;
        return this;
    }
    
    /**
     * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domainName")
    public String domainName;
    public RegistrationInput withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * Set of labels associated with the `Registration`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public RegistrationInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Defines renewal, billing, and transfer settings for a `Registration`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managementSettings")
    public ManagementSettingsInput managementSettings;
    public RegistrationInput withManagementSettings(ManagementSettingsInput managementSettings) {
        this.managementSettings = managementSettings;
        return this;
    }
    
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingContactSettings")
    public ContactSettings pendingContactSettings;
    public RegistrationInput withPendingContactSettings(ContactSettings pendingContactSettings) {
        this.pendingContactSettings = pendingContactSettings;
        return this;
    }
    
}
