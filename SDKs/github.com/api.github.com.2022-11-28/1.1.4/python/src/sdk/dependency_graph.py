"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DependencyGraph:
    r"""Endpoints to access Dependency Graph features."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dependency_graph_create_repository_snapshot(self, request: operations.DependencyGraphCreateRepositorySnapshotRequest) -> operations.DependencyGraphCreateRepositorySnapshotResponse:
        r"""Create a snapshot of dependencies for a repository
        Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
        https://docs.github.com/rest/reference/dependency-graph#create-a-snapshot-of-dependencies-for-a-repository - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependencyGraphCreateRepositorySnapshotRequest, base_url, '/repos/{owner}/{repo}/dependency-graph/snapshots', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snapshot", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependencyGraphCreateRepositorySnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DependencyGraphCreateRepositorySnapshot201ApplicationJSON])
                res.dependency_graph_create_repository_snapshot_201_application_json_object = out

        return res

    def dependency_graph_diff_range(self, request: operations.DependencyGraphDiffRangeRequest) -> operations.DependencyGraphDiffRangeResponse:
        r"""Get a diff of the dependencies between commits
        Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
        https://docs.github.com/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DependencyGraphDiffRangeRequest, base_url, '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}', request)
        
        query_params = utils.get_query_params(operations.DependencyGraphDiffRangeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DependencyGraphDiffRangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DependencyGraphDiff]])
                res.dependency_graph_diff = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    