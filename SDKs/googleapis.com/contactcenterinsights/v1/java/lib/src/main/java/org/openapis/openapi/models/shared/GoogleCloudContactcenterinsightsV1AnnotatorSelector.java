/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudContactcenterinsightsV1AnnotatorSelector - Selector of all available annotators and phrase matchers to run.
 */
public class GoogleCloudContactcenterinsightsV1AnnotatorSelector {
    /**
     * The issue model to run. If not provided, the most recently deployed topic model will be used. The provided issue model will only be used for inference if the issue model is deployed and if run_issue_model_annotator is set to true. If more than one issue model is provided, only the first provided issue model will be used for inference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueModels")
    public String[] issueModels;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withIssueModels(String[] issueModels) {
        this.issueModels = issueModels;
        return this;
    }
    
    /**
     * The list of phrase matchers to run. If not provided, all active phrase matchers will be used. If inactive phrase matchers are provided, they will not be used. Phrase matchers will be run only if run_phrase_matcher_annotator is set to true. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phraseMatchers")
    public String[] phraseMatchers;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withPhraseMatchers(String[] phraseMatchers) {
        this.phraseMatchers = phraseMatchers;
        return this;
    }
    
    /**
     * Whether to run the entity annotator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runEntityAnnotator")
    public Boolean runEntityAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunEntityAnnotator(Boolean runEntityAnnotator) {
        this.runEntityAnnotator = runEntityAnnotator;
        return this;
    }
    
    /**
     * Whether to run the intent annotator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runIntentAnnotator")
    public Boolean runIntentAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunIntentAnnotator(Boolean runIntentAnnotator) {
        this.runIntentAnnotator = runIntentAnnotator;
        return this;
    }
    
    /**
     * Whether to run the interruption annotator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runInterruptionAnnotator")
    public Boolean runInterruptionAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunInterruptionAnnotator(Boolean runInterruptionAnnotator) {
        this.runInterruptionAnnotator = runInterruptionAnnotator;
        return this;
    }
    
    /**
     * Whether to run the issue model annotator. A model should have already been deployed for this to take effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runIssueModelAnnotator")
    public Boolean runIssueModelAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunIssueModelAnnotator(Boolean runIssueModelAnnotator) {
        this.runIssueModelAnnotator = runIssueModelAnnotator;
        return this;
    }
    
    /**
     * Whether to run the active phrase matcher annotator(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runPhraseMatcherAnnotator")
    public Boolean runPhraseMatcherAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunPhraseMatcherAnnotator(Boolean runPhraseMatcherAnnotator) {
        this.runPhraseMatcherAnnotator = runPhraseMatcherAnnotator;
        return this;
    }
    
    /**
     * Whether to run the sentiment annotator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runSentimentAnnotator")
    public Boolean runSentimentAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunSentimentAnnotator(Boolean runSentimentAnnotator) {
        this.runSentimentAnnotator = runSentimentAnnotator;
        return this;
    }
    
    /**
     * Whether to run the silence annotator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runSilenceAnnotator")
    public Boolean runSilenceAnnotator;
    public GoogleCloudContactcenterinsightsV1AnnotatorSelector withRunSilenceAnnotator(Boolean runSilenceAnnotator) {
        this.runSilenceAnnotator = runSilenceAnnotator;
        return this;
    }
    
}
