"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import businesshours as shared_businesshours
from ..shared import coordinates as shared_coordinates
from ..shared import taxids as shared_taxids
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Location:
    
    address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    business_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('business_email'), 'exclude': lambda f: f is None }})
    r"""The email of the location.
    This email is visible to the customers of the location.
    For example, the email appears on customer receipts. 
    For example, `help&#64;squareup.com`.
    """  
    business_hours: Optional[shared_businesshours.BusinessHours] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('business_hours'), 'exclude': lambda f: f is None }})
    r"""Represents the hours of operation for a business location."""  
    business_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('business_name'), 'exclude': lambda f: f is None }})
    r"""The business name of the location
    This is the name visible to the customers of the location.
    For example, this name appears on customer receipts.
    """  
    capabilities: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""The Square features that are enabled for the location.
    See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
    """  
    coordinates: Optional[shared_coordinates.Coordinates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates'), 'exclude': lambda f: f is None }})
    r"""Latitude and longitude coordinates."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""The country of the location, in ISO 3166-1-alpha-2 format.
    
    See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
    """  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The time when the location was created, in RFC 3339 format.
    For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
    """  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency used for all transactions at this location,
    in ISO 4217 format.
    See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the location."""  
    facebook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facebook_url'), 'exclude': lambda f: f is None }})
    r"""The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`."""  
    full_format_logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_format_logo_url'), 'exclude': lambda f: f is None }})
    r"""The URL of a full-format logo image for the location. The Seller must choose this logo in the
    Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
    that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
    and is recommended to be at least 1280x648 pixels.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Square-issued ID of the location."""  
    instagram_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instagram_username'), 'exclude': lambda f: f is None }})
    r"""The Instagram username of the location without the '&#64;' symbol. For example, `square`."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language_code'), 'exclude': lambda f: f is None }})
    r"""The language associated with the location, in
    [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). 
    For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
    """  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the logo image for the location. The Seller must choose this logo in the Seller
    dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
    that Square generates on behalf of the Seller. This image should have an aspect ratio
    close to 1:1 and is recommended to be at least 200x200 pixels.
    """  
    mcc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mcc'), 'exclude': lambda f: f is None }})
    r"""The merchant category code (MCC) of the location, as standardized by ISO 18245.
    The MCC describes the kind of goods or services sold at the location.
    """  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the merchant that owns the location."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the location.
    This information appears in the dashboard as the nickname.
    A location name must be unique within a seller account.
    """  
    phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_number'), 'exclude': lambda f: f is None }})
    r"""The phone number of the location in human readable format. For example, `+353 80 0 098 8099`."""  
    pos_background_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pos_background_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the Point of Sale background image for the location."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the location, either active or inactive."""  
    tax_ids: Optional[shared_taxids.TaxIds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_ids'), 'exclude': lambda f: f is None }})
    r"""The tax IDs that a Location is operating under."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The [IANA Timezone](https://www.iana.org/time-zones) identifier for
    the timezone of the location.
    """  
    twitter_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twitter_username'), 'exclude': lambda f: f is None }})
    r"""The Twitter username of the location without the '&#64;' symbol. For example, `Square`."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the location, either physical or mobile."""  
    website_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website_url'), 'exclude': lambda f: f is None }})
    r"""The website URL of the location.  For example, `https://squareup.com`."""  
    