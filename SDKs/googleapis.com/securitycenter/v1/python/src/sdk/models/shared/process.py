"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import environmentvariable as shared_environmentvariable
from ..shared import file as shared_file
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Process:
    r"""Represents an operating system process."""
    
    args: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('args'), 'exclude': lambda f: f is None }})
    r"""Process arguments as JSON encoded strings."""  
    arguments_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('argumentsTruncated'), 'exclude': lambda f: f is None }})
    r"""True if `args` is incomplete."""  
    binary: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binary'), 'exclude': lambda f: f is None }})
    r"""File information about the related binary/library used by an executable, or the script used by a script interpreter"""  
    env_variables: Optional[list[shared_environmentvariable.EnvironmentVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envVariables'), 'exclude': lambda f: f is None }})
    r"""Process environment variables."""  
    env_variables_truncated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envVariablesTruncated'), 'exclude': lambda f: f is None }})
    r"""True if `env_variables` is incomplete."""  
    libraries: Optional[list[shared_file.File]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('libraries'), 'exclude': lambda f: f is None }})
    r"""File information for libraries loaded by the process."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The process name visible in utilities like `top` and `ps`; it can be accessed via `/proc/[pid]/comm` and changed with `prctl(PR_SET_NAME)`."""  
    parent_pid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentPid'), 'exclude': lambda f: f is None }})
    r"""The parent process id."""  
    pid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pid'), 'exclude': lambda f: f is None }})
    r"""The process id."""  
    script: Optional[shared_file.File] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})
    r"""File information about the related binary/library used by an executable, or the script used by a script interpreter"""  
    