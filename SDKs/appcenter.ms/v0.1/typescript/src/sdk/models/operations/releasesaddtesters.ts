/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ReleasesAddTestersSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * The release information.
 */
export class ReleasesAddTestersRequestBody extends SpeakeasyBase {
  /**
   * Tester's email address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * Flag to mark the release for the provided destinations as mandatory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandatory_update" })
  mandatoryUpdate?: boolean;

  /**
   * Flag to enable or disable notifications to testers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notify_testers" })
  notifyTesters?: boolean;
}

export class ReleasesAddTestersRequest extends SpeakeasyBase {
  /**
   * The release information.
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReleasesAddTestersRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the release
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=release_id",
  })
  releaseId: number;
}

export enum ReleasesAddTesters404ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Release not found
 */
export class ReleasesAddTesters404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesAddTesters404ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export enum ReleasesAddTesters400ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Failure
 */
export class ReleasesAddTesters400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesAddTesters400ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Created
 */
export class ReleasesAddTesters201ApplicationJSON extends SpeakeasyBase {
  /**
   * Unique id for the release destination
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Flag to mark the release for the provided destinations as mandatory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandatory_update" })
  mandatoryUpdate: boolean;

  /**
   * The url to check provisioning status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioning_status_url" })
  provisioningStatusUrl?: string;
}

export class ReleasesAddTestersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  releasesAddTesters201ApplicationJSONObject?: ReleasesAddTesters201ApplicationJSON;

  /**
   * Failure
   */
  @SpeakeasyMetadata()
  releasesAddTesters400ApplicationJSONObject?: ReleasesAddTesters400ApplicationJSON;

  /**
   * Release not found
   */
  @SpeakeasyMetadata()
  releasesAddTesters404ApplicationJSONObject?: ReleasesAddTesters404ApplicationJSON;
}
