// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// InitialTermPeriodTypeEnum - Specify only when the termType is 'TERMED'.
type InitialTermPeriodTypeEnum string

const (
	InitialTermPeriodTypeEnumMonth InitialTermPeriodTypeEnum = "Month"
	InitialTermPeriodTypeEnumYear  InitialTermPeriodTypeEnum = "Year"
	InitialTermPeriodTypeEnumDay   InitialTermPeriodTypeEnum = "Day"
	InitialTermPeriodTypeEnumWeek  InitialTermPeriodTypeEnum = "Week"
)

func (e *InitialTermPeriodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Month":
		fallthrough
	case "Year":
		fallthrough
	case "Day":
		fallthrough
	case "Week":
		*e = InitialTermPeriodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InitialTermPeriodTypeEnum: %s", s)
	}
}

type InitialTermTermTypeEnum string

const (
	InitialTermTermTypeEnumTermed    InitialTermTermTypeEnum = "TERMED"
	InitialTermTermTypeEnumEvergreen InitialTermTermTypeEnum = "EVERGREEN"
)

func (e *InitialTermTermTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TERMED":
		fallthrough
	case "EVERGREEN":
		*e = InitialTermTermTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InitialTermTermTypeEnum: %s", s)
	}
}

// InitialTerm - The length of the period for the current subscription term.
type InitialTerm struct {
	// Specify only when the termType is 'TERMED'.
	Period *int64 `json:"period,omitempty"`
	// Specify only when the termType is 'TERMED'.
	PeriodType *InitialTermPeriodTypeEnum `json:"periodType,omitempty"`
	// The start date of the current term.
	//
	StartDate *types.Date             `json:"startDate,omitempty"`
	TermType  InitialTermTermTypeEnum `json:"termType"`
}
