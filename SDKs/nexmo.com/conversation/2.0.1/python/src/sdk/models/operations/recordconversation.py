"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import action_enum as shared_action_enum
from ..shared import format_enum as shared_format_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional

RECORD_CONVERSATION_SERVERS = [
	"https://api.nexmo.com/v1",
    r"""Override base path for the PUT /conversations/{conversation_id}/record operation"""
]


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecordConversationRequestBody:
    r"""Record Conversation Request Payload Object"""
    
    action: shared_action_enum.ActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""Recording Action"""  
    event_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_method'), 'exclude': lambda f: f is None }})
    r"""The HTTP method used to send event information to event_url."""  
    event_url: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_url'), 'exclude': lambda f: f is None }})
    r"""The webhook endpoint where recording progress events are sent to."""  
    format: Optional[shared_format_enum.FormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format'), 'exclude': lambda f: f is None }})
    r"""Record the Conversation in a specific format."""  
    split: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('split'), 'exclude': lambda f: f is None }})
    r"""Record the sent and received audio in separate channels of a stereo recording"""  
    

@dataclasses.dataclass
class RecordConversationRequest:
    
    conversation_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'conversation_id', 'style': 'simple', 'explode': False }})
    r"""Conversation ID"""  
    request_body: Optional[RecordConversationRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Record Conversation Request Payload Object"""  
    

@dataclasses.dataclass
class RecordConversationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    