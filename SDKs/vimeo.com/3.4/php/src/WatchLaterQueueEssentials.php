<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WatchLaterQueueEssentials 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a video to a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterResponse
     */
	public function addVideoToWatchLater(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a video to a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Response
     */
	public function addVideoToWatchLaterAlt1(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoToWatchLaterAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Check if a user has added a specific video to their Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueResponse
     */
	public function checkWatchLaterQueue(
        \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if a user has added a specific video to their Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Response
     */
	public function checkWatchLaterQueueAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckWatchLaterQueueAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a video from a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterResponse
     */
	public function deleteVideoFromWatchLater(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a video from a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Response
     */
	public function deleteVideoFromWatchLaterAlt1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/watchlater/{video_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoFromWatchLaterAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all the videos in a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueResponse
     */
	public function getWatchLaterQueue(
        \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/watchlater', \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
	
    /**
     * Get all the videos in a user's Watch Later queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Response
     */
	public function getWatchLaterQueueAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/watchlater');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWatchLaterQueueAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }

        return $response;
    }
}