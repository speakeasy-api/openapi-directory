/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Insight {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns address object
   *
   * @remarks
   * Returns NEBL address object containing information on a specific address
   */
  getAddress(
    req: operations.GetAddressRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/ins/addr/{address}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressResponse =
        new operations.GetAddressResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetAddressResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns address balance in sats
   *
   * @remarks
   * Returns NEBL address balance in satoshis
   */
  getAddressBalance(
    req: operations.GetAddressBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/addr/{address}/balance",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressBalanceResponse =
        new operations.GetAddressBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressBalanceResponse = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns total received by address in sats
   *
   * @remarks
   * Returns total NEBL received by address in satoshis
   */
  getAddressTotalReceived(
    req: operations.GetAddressTotalReceivedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressTotalReceivedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressTotalReceivedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/addr/{address}/totalReceived",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressTotalReceivedResponse =
        new operations.GetAddressTotalReceivedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressTotalReceivedResponse = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns total sent by address in sats
   *
   * @remarks
   * Returns total NEBL sent by address in satoshis
   */
  getAddressTotalSent(
    req: operations.GetAddressTotalSentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressTotalSentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressTotalSentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/addr/{address}/totalSent",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressTotalSentResponse =
        new operations.GetAddressTotalSentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressTotalSentResponse = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns address unconfirmed balance in sats
   *
   * @remarks
   * Returns NEBL address unconfirmed balance in satoshis
   */
  getAddressUnconfirmedBalance(
    req: operations.GetAddressUnconfirmedBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressUnconfirmedBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressUnconfirmedBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/addr/{address}/unconfirmedBalance",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressUnconfirmedBalanceResponse =
        new operations.GetAddressUnconfirmedBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressUnconfirmedBalanceResponse = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all UTXOs at a given address
   *
   * @remarks
   * Returns information on each Unspent Transaction Output contained at an address
   */
  getAddressUtxos(
    req: operations.GetAddressUtxosRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressUtxosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressUtxosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/addr/{address}/utxo",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressUtxosResponse =
        new operations.GetAddressUtxosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressUtxosResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getAddressUtxosResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetAddressUtxosResponse,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information regarding a Neblio block
   *
   * @remarks
   * Returns blockchain data for a given block based upon the block hash
   */
  getBlock(
    req: operations.GetBlockRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBlockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBlockRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/block/{blockhash}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBlockResponse = new operations.GetBlockResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBlockResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetBlockResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns block hash of block
   *
   * @remarks
   * Returns the block hash of a block at a given block index
   */
  getBlockIndex(
    req: operations.GetBlockIndexRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBlockIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBlockIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ins/block-index/{blockindex}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBlockIndexResponse =
        new operations.GetBlockIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBlockIndexResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetBlockIndexResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns raw transaction hex
   *
   * @remarks
   * Returns raw transaction hex representing a NEBL transaction
   */
  getRawTx(
    req: operations.GetRawTxRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRawTxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRawTxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/ins/rawtx/{txid}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRawTxResponse = new operations.GetRawTxResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRawTxResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetRawTxResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Utility API for calling several blockchain node functions
   *
   * @remarks
   * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
   */
  getStatus(
    req: operations.GetStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ins/status";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetStatusResponse =
        new operations.GetStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getStatusResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get node sync status
   *
   * @remarks
   * Returns information on the node's sync progress
   */
  getSync(config?: AxiosRequestConfig): Promise<operations.GetSyncResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ins/sync";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSyncResponse = new operations.GetSyncResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSyncResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetSyncResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns transaction object
   *
   * @remarks
   * Returns NEBL transaction object representing a NEBL transaction
   */
  getTx(
    req: operations.GetTxRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/ins/tx/{txid}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTxResponse = new operations.GetTxResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTxResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTxResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get transactions by block or address
   *
   * @remarks
   * Returns all transactions by block or address
   */
  getTxs(
    req: operations.GetTxsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTxsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTxsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ins/txs";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTxsResponse = new operations.GetTxsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTxsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTxsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Broadcasts a signed raw transaction to the network (not NTP1 specific)
   *
   * @remarks
   * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
   *
   */
  sendTx(
    req: shared.SendTxRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SendTxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SendTxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ins/tx/send";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SendTxResponse = new operations.SendTxResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.broadcastTxResponse = utils.objectToClass(
              httpRes?.data,
              shared.BroadcastTxResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
