// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum string

const (
	EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnumSeedPeriodUnspecified EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum = "SEED_PERIOD_UNSPECIFIED"
	EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnumDay                   EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum = "DAY"
	EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnumWeek                  EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum = "WEEK"
	EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnumMonth                 EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum = "MONTH"
)

func (e *EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEED_PERIOD_UNSPECIFIED":
		fallthrough
	case "DAY":
		fallthrough
	case "WEEK":
		fallthrough
	case "MONTH":
		*e = EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum: %s", s)
	}
}

type EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum string

const (
	EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnumSeedScopeUnspecified EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum = "SEED_SCOPE_UNSPECIFIED"
	EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnumEventName            EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum = "EVENT_NAME"
	EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnumTimePeriod           EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum = "TIME_PERIOD"
	EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnumParamName            EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum = "PARAM_NAME"
)

func (e *EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEED_SCOPE_UNSPECIFIED":
		fallthrough
	case "EVENT_NAME":
		fallthrough
	case "TIME_PERIOD":
		fallthrough
	case "PARAM_NAME":
		*e = EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum: %s", s)
	}
}

// EnterpriseCrmEventbusProtoLogSettings - The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
type EnterpriseCrmEventbusProtoLogSettings struct {
	// The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.
	LogFieldName *string `json:"logFieldName,omitempty"`
	// Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5
	SanitizeOptions *EnterpriseCrmLoggingGwsSanitizeOptions              `json:"sanitizeOptions,omitempty"`
	SeedPeriod      *EnterpriseCrmEventbusProtoLogSettingsSeedPeriodEnum `json:"seedPeriod,omitempty"`
	SeedScope       *EnterpriseCrmEventbusProtoLogSettingsSeedScopeEnum  `json:"seedScope,omitempty"`
	// Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6
	ShorteningLimits *EnterpriseCrmLoggingGwsFieldLimits `json:"shorteningLimits,omitempty"`
}
