/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class WebhookTriggersResources extends SpeakeasyBase {
  /**
   * Send webhook messages when resources are compressed into an archive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compress" })
  compress?: boolean;

  /**
   * Send webhook messages when resources are copied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copy" })
  copy?: boolean;

  /**
   * Send webhook messages when a new folder is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createFolder" })
  createFolder?: boolean;

  /**
   * Send webhook messages when resources are deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete?: boolean;

  /**
   * Send webhook messages when resources are downloaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * Send webhook messages when resources are extracted from an archive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extract" })
  extract?: boolean;

  /**
   * Send webhook messages when resources are moved.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "move" })
  move?: boolean;

  /**
   * Send webhook messages when resources are renamed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rename" })
  rename?: boolean;

  /**
   * Send webhook messages when resources are uploaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upload" })
  upload?: boolean;
}

export class WebhookTriggersShares extends SpeakeasyBase {
  /**
   * Send webhook messages when a receive folder form is submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formSubmit" })
  formSubmit?: boolean;
}

export class WebhookTriggers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "resources" })
  @Type(() => WebhookTriggersResources)
  resources?: WebhookTriggersResources;

  @SpeakeasyMetadata()
  @Expose({ name: "shares" })
  @Type(() => WebhookTriggersShares)
  shares?: WebhookTriggersShares;
}
