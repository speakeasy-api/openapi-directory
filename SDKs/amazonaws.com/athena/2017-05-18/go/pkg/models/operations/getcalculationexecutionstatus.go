// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCalculationExecutionStatusXAmzTargetEnum
type GetCalculationExecutionStatusXAmzTargetEnum string

const (
	GetCalculationExecutionStatusXAmzTargetEnumAmazonAthenaGetCalculationExecutionStatus GetCalculationExecutionStatusXAmzTargetEnum = "AmazonAthena.GetCalculationExecutionStatus"
)

func (e *GetCalculationExecutionStatusXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonAthena.GetCalculationExecutionStatus":
		*e = GetCalculationExecutionStatusXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCalculationExecutionStatusXAmzTargetEnum: %s", s)
	}
}

type GetCalculationExecutionStatusHeaders struct {
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetCalculationExecutionStatusXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCalculationExecutionStatusRequest struct {
	Headers GetCalculationExecutionStatusHeaders
	Request shared.GetCalculationExecutionStatusRequest `request:"mediaType=application/json"`
}

type GetCalculationExecutionStatusResponse struct {
	ContentType string
	// Success
	GetCalculationExecutionStatusResponse *shared.GetCalculationExecutionStatusResponse
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
