/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Production server
   */
  "https://gregeoip.com",
  /**
   * Development server
   */
  "https://dev.gregeoip.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This documentation shows how to use Greip API, By highlighting the API methods, options and some other features that allow you to get the most of this API.
 *
 * @see {@link https://docs.greip.io} - Find more info here
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
   *
   * @see {@link https://docs.greip.io/methods/bulk-lookup} - Greip API - Bulk Lookup
   */
  getBulkLookup(
    req: operations.GetBulkLookupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBulkLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBulkLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/BulkLookup";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBulkLookupResponse =
        new operations.GetBulkLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Country endpoint: Returns the information of a specific country by passing the `countrCode`.
   *
   * @see {@link https://docs.greip.io/methods/country-data-api} - Greip API - Country Data API
   */
  getCountry(
    req: operations.GetCountryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCountryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCountryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Country";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCountryResponse =
        new operations.GetCountryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * GeoIP endpoint: Returns the geolocation data of the visitor.
   *
   * @see {@link https://docs.greip.io/methods/retrieve-visitor-info} - Greip API - Retrieve Visitor Info
   */
  getGeoIP(
    req: operations.GetGeoIPRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGeoIPResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGeoIPRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/GeoIP";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGeoIPResponse = new operations.GetGeoIPResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case [200, 400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * IPLookup endpoint: Returns the geolocation data of a specific IP Address.
   *
   * @see {@link https://docs.greip.io/methods/lookup-ip-address} - Greip API - Lookup IP Address
   */
  getIPLookup(
    req: operations.GetIPLookupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIPLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIPLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/IPLookup";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIPLookupResponse =
        new operations.GetIPLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * badWords endpoint: Detects whether user inputs contain profanity or not.
   *
   * @see {@link https://docs.greip.io/methods/profanity-detection} - Greip API - Profanity Detection
   */
  getBadWords(
    req: operations.GetBadWordsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBadWordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBadWordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/badWords";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBadWordsResponse =
        new operations.GetBadWordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
