"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PaymentBatches:
    r"""The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
    
    For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
    
    
    The process is as follows:
    
    **1.**Create a new batch
    
    **2.**Add payments to the batch
    
    **3.**Submit the batch for approval
    
    Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
    
    **Batch Life Cycle Events**
    
    A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
    
    The following events are triggered during a batch:
    
    **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
    
    **batch.item-added:** Details of the item added to the batch
    
    **batch.item-removed:** Details of the item removed from the batch
    
    **batch.cancelled:** Notifies that the batch was cancelled.
    
    **batch.submitted:** Notifes that the batch was submitted
    
    **batch.approved:** Notifies that the batch was approved.
    
    **batch.rejected:** Notifies that the batch was rejected.
    
    **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
    
    **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
    
    Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_bank_transfer_batch_payment(self, request: operations.AddBankTransferBatchPaymentRequest) -> operations.AddBankTransferBatchPaymentResponse:
        r"""Add a bank transfer payment to the batch.
        There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).
        
        **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.
        
        **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddBankTransferBatchPaymentRequest, base_url, '/v1/batches/{batchUuid}/banktransfers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddBankTransferBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddBankTransferBatchPaymentNewBatchItemResponse])
                res.new_batch_item_response = out

        return res

    def add_internal_transfer_batch_payment(self, request: operations.AddInternalTransferBatchPaymentRequest) -> operations.AddInternalTransferBatchPaymentResponse:
        r"""Add an internal transfer payment to the batch
        Simply specify the source account, destination account, amount and a reference.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddInternalTransferBatchPaymentRequest, base_url, '/v1/batches/{batchUuid}/internaltransfers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddInternalTransferBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddInternalTransferBatchPaymentNewBatchItemResponse])
                res.new_batch_item_response = out

        return res

    def cancel_batch_payment(self, request: operations.CancelBatchPaymentRequest) -> operations.CancelBatchPaymentResponse:
        r"""Cancel a batch
        Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelBatchPaymentRequest, base_url, '/v1/batches/{batchUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_batch_payment(self, request: operations.CreateBatchPaymentNewBatch) -> operations.CreateBatchPaymentResponse:
        r"""Create a new batch of payments
        The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
        
        For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
        
        
        The process is as follows:
        
        **1.**Create a new batch
        
        **2.**Add payments to the batch
        
        **3.**Submit the batch for approval
        
        Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
        
        **Batch Life Cycle Events**
        
        A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
        
        The following events are triggered during a batch:
        
        **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
        
        **batch.item-added:** Details of the item added to the batch
        
        **batch.item-removed:** Details of the item removed from the batch
        
        **batch.cancelled:** Notifies that the batch was cancelled.
        
        **batch.submitted:** Notifes that the batch was submitted
        
        **batch.approved:** Notifies that the batch was approved.
        
        **batch.rejected:** Notifies that the batch was rejected.
        
        **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
        
        **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
        
        Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
        
        This is the first step in creating a batch payment.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/batches'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateBatchPaymentNewBatchResponse])
                res.new_batch_response = out

        return res

    def delete_bank_transfer_batch_payment(self, request: operations.DeleteBankTransferBatchPaymentRequest) -> operations.DeleteBankTransferBatchPaymentResponse:
        r"""Remove a Payment from the Batch (Bank Transfers)
        Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBankTransferBatchPaymentRequest, base_url, '/v1/batches/{batchUuid}/banktransfers/{itemUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBankTransferBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_internal_transfer_batch_payment(self, request: operations.DeleteInternalTransferBatchPaymentRequest) -> operations.DeleteInternalTransferBatchPaymentResponse:
        r"""Remove a Payment from the Batch (Internal Transfer)
        Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteInternalTransferBatchPaymentRequest, base_url, '/v1/batches/{batchUuid}/internaltransfers/{itemUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteInternalTransferBatchPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_batches(self, request: operations.GetBatchesRequest) -> operations.GetBatchesResponse:
        r"""List batches
        Returns the list of batch with the specified types and statuses.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/batches'
        
        query_params = utils.get_query_params(operations.GetBatchesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetBatchesBatchItems])
                res.batch_items = out

        return res

    def get_details_single_batch(self, request: operations.GetDetailsSingleBatchRequest) -> operations.GetDetailsSingleBatchResponse:
        r"""Get details of a single Batch
        Returns the details of the batch specified in the API endpoint - {batchUuid}.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDetailsSingleBatchRequest, base_url, '/v1/batches/{batchUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDetailsSingleBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDetailsSingleBatchBatch])
                res.batch = out

        return res

    def get_items_batch_bank_transfer(self, request: operations.GetItemsBatchBankTransferRequest) -> operations.GetItemsBatchBankTransferResponse:
        r"""List items in a Batch
        Returns a paginated list of items in the specified batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemsBatchBankTransferRequest, base_url, '/v1/batches/{batchUuid}/banktransfers', request)
        
        query_params = utils.get_query_params(operations.GetItemsBatchBankTransferRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemsBatchBankTransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetItemsBatchBankTransferBatchItems])
                res.batch_items = out

        return res

    def get_items_batch_internal_trasnfer(self, request: operations.GetItemsBatchInternalTrasnferRequest) -> operations.GetItemsBatchInternalTrasnferResponse:
        r"""List items in a Batch
        Returns a paginated list of items in the specified batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetItemsBatchInternalTrasnferRequest, base_url, '/v1/batches/{batchUuid}/internaltransfers', request)
        
        query_params = utils.get_query_params(operations.GetItemsBatchInternalTrasnferRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetItemsBatchInternalTrasnferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetItemsBatchInternalTrasnferBatchItems])
                res.batch_items = out

        return res

    def get_listof_approvers_for_batch(self, request: operations.GetListofApproversForBatchRequest) -> operations.GetListofApproversForBatchResponse:
        r"""List Approvers for a Batch
        Returns a list of approvers for this batch.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetListofApproversForBatchRequest, base_url, '/v1/batches/{batchUuid}/approvals', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetListofApproversForBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetListofApproversForBatchBatchApprovers])
                res.batch_approvers = out

        return res

    def submit_batch(self, request: operations.SubmitBatchRequest) -> operations.SubmitBatchResponse:
        r"""Submit a batch for approval
        Submits the Batch (for approval in the case of a **BANK_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.
        
        You can only submit a batch while it is in the OPEN state.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitBatchRequest, base_url, '/v1/batches/{batchUuid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    