<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PickupPoints 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create/Update Pickup Point
     * 
     * Creates or updates [pickup points](https://help.vtex.com/en/subcategory/pickup-points--1c5Btie9ou2Gg2iUo0ggqM#) in your store by Pickup Point ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointResponse
     */
	public function createUpdatePickupPoint(
        \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createUpdate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateUpdatePickupPointCreateUpdate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Pickup Point
     * 
     * Deletes a given pickup point for your store, by pickup point ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteResponse
     */
	public function delete(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List Pickup Point By ID
     * 
     * Lists your store's pickup points while searching by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse
     */
	public function getById(
        \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', \OpenAPI\OpenAPI\Models\Operations\GetByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getById = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetByIdGetById', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List paged Pickup Points
     * 
     * Lists paged pickup points in your store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetpagedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetpagedResponse
     */
	public function getpaged(
        \OpenAPI\OpenAPI\Models\Operations\GetpagedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetpagedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/pickuppoints/_search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetpagedRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetpagedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List all pickup points
     * 
     * Lists all of your store's pickup points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpointsResponse
     */
	public function listAllPickupPpoints(
        \OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/pickuppoints');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAllPickupPpoints200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ListAllPickupPpoints200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
}