"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channeltype_enum as shared_channeltype_enum
from ..shared import endpointdemographic as shared_endpointdemographic
from ..shared import endpointlocation as shared_endpointlocation
from ..shared import endpointuser as shared_endpointuser
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicEndpoint:
    r"""Specifies the properties and attributes of an endpoint that's associated with an event."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})  
    attributes: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    channel_type: Optional[shared_channeltype_enum.ChannelTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelType'), 'exclude': lambda f: f is None }})  
    demographic: Optional[shared_endpointdemographic.EndpointDemographic] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Demographic'), 'exclude': lambda f: f is None }})  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'exclude': lambda f: f is None }})  
    endpoint_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointStatus'), 'exclude': lambda f: f is None }})  
    location: Optional[shared_endpointlocation.EndpointLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Location'), 'exclude': lambda f: f is None }})  
    metrics: Optional[dict[str, float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Metrics'), 'exclude': lambda f: f is None }})  
    opt_out: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptOut'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestId'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_endpointuser.EndpointUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('User'), 'exclude': lambda f: f is None }})  
    