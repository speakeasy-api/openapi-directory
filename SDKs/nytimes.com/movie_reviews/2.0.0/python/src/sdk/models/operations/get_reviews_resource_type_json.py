"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import movie as shared_movie
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetReviewsResourceTypeJSONOrderEnum(str, Enum):
    r"""Sets the sort order of the results.
    
    Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
    
    If you do not specify a sort order, the results will be ordered by publication-date.
    """
    BY_TITLE = 'by-title'
    BY_PUBLICATION_DATE = 'by-publication-date'
    BY_OPENING_DATE = 'by-opening-date'

class GetReviewsResourceTypeJSONResourceTypeEnum(str, Enum):
    r"""Specify all to retrieve all reviews, including NYT Critics' Picks.
    
    Specify picks to get NYT Critics' Picks currently in theaters.
    """
    ALL = 'all'
    PICKS = 'picks'


@dataclasses.dataclass
class GetReviewsResourceTypeJSONRequest:
    
    resource_type: GetReviewsResourceTypeJSONResourceTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'resource-type', 'style': 'simple', 'explode': False }})
    r"""Specify all to retrieve all reviews, including NYT Critics' Picks.
    
    Specify picks to get NYT Critics' Picks currently in theaters.
    """  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Positive integer, multiple of 20"""  
    order: Optional[GetReviewsResourceTypeJSONOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Sets the sort order of the results.
    
    Results ordered by-title are in ascending alphabetical order. Results ordered by one of the date parameters are in reverse chronological order.
    
    If you do not specify a sort order, the results will be ordered by publication-date.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetReviewsResourceTypeJSON200ApplicationJSON:
    r"""An array of Movies"""
    
    copyright: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyright'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_results'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_movie.Movie]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetReviewsResourceTypeJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_reviews_resource_type_json_200_application_json_object: Optional[GetReviewsResourceTypeJSON200ApplicationJSON] = dataclasses.field(default=None)
    r"""An array of Movies"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    