// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetSchedulesScheduleFSubIDRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int   `queryParam:"style=form,explode=true,name=per_page"`
	SubID   string `pathParam:"style=simple,explode=false,name=sub_id"`
}

type GetSchedulesScheduleFSubIDDefaultApplicationJSONResults struct {
	ActionCode                          *string `json:"action_code,omitempty"`
	ActionCodeFull                      *string `json:"action_code_full,omitempty"`
	AggregateGeneralElectionExpenditure *string `json:"aggregate_general_election_expenditure,omitempty"`
	BackReferenceScheduleName           *string `json:"back_reference_schedule_name,omitempty"`
	BackReferenceTransactionID          *string `json:"back_reference_transaction_id,omitempty"`
	CandidateFirstName                  *string `json:"candidate_first_name,omitempty"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID         *string `json:"candidate_id,omitempty"`
	CandidateLastName   *string `json:"candidate_last_name,omitempty"`
	CandidateMiddleName *string `json:"candidate_middle_name,omitempty"`
	// Name of candidate running for office
	CandidateName                                      *string                  `json:"candidate_name,omitempty"`
	CandidateOffice                                    *string                  `json:"candidate_office,omitempty"`
	CandidateOfficeDistrict                            *string                  `json:"candidate_office_district,omitempty"`
	CandidateOfficeFull                                *string                  `json:"candidate_office_full,omitempty"`
	CandidateOfficeState                               *string                  `json:"candidate_office_state,omitempty"`
	CandidateOfficeStateFull                           *string                  `json:"candidate_office_state_full,omitempty"`
	CandidatePrefix                                    *string                  `json:"candidate_prefix,omitempty"`
	CandidateSuffix                                    *string                  `json:"candidate_suffix,omitempty"`
	CatologCode                                        *string                  `json:"catolog_code,omitempty"`
	CatologCodeFull                                    *string                  `json:"catolog_code_full,omitempty"`
	Committee                                          *shared.CommitteeHistory `json:"committee,omitempty"`
	CommitteeDesignatedCoordinatedExpenditureIndicator *string                  `json:"committee_designated_coordinated_expenditure_indicator,omitempty"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID             *string    `json:"committee_id,omitempty"`
	CommitteeName           *string    `json:"committee_name,omitempty"`
	ConduitCommitteeCity    *string    `json:"conduit_committee_city,omitempty"`
	ConduitCommitteeID      *string    `json:"conduit_committee_id,omitempty"`
	ConduitCommitteeName    *string    `json:"conduit_committee_name,omitempty"`
	ConduitCommitteeState   *string    `json:"conduit_committee_state,omitempty"`
	ConduitCommitteeStreet1 *string    `json:"conduit_committee_street1,omitempty"`
	ConduitCommitteeStreet2 *string    `json:"conduit_committee_street2,omitempty"`
	ConduitCommitteeZip     *int       `json:"conduit_committee_zip,omitempty"`
	DesignatedCommitteeID   *string    `json:"designated_committee_id,omitempty"`
	DesignatedCommitteeName *string    `json:"designated_committee_name,omitempty"`
	ElectionCycle           *int       `json:"election_cycle,omitempty"`
	EntityType              *string    `json:"entity_type,omitempty"`
	EntityTypeDesc          *string    `json:"entity_type_desc,omitempty"`
	ExpenditureAmount       *int       `json:"expenditure_amount,omitempty"`
	ExpenditureDate         *time.Time `json:"expenditure_date,omitempty"`
	ExpenditurePurposeFull  *string    `json:"expenditure_purpose_full,omitempty"`
	ExpenditureType         *string    `json:"expenditure_type,omitempty"`
	ExpenditureTypeFull     *string    `json:"expenditure_type_full,omitempty"`
	FileNumber              *int       `json:"file_number,omitempty"`
	FilingForm              *string    `json:"filing_form,omitempty"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber     *string    `json:"image_number,omitempty"`
	LineNumber      *string    `json:"line_number,omitempty"`
	LinkID          *int       `json:"link_id,omitempty"`
	LoadDate        *time.Time `json:"load_date,omitempty"`
	MemoCode        *string    `json:"memo_code,omitempty"`
	MemoCodeFull    *string    `json:"memo_code_full,omitempty"`
	MemoText        *string    `json:"memo_text,omitempty"`
	OriginalSubID   *int       `json:"original_sub_id,omitempty"`
	PayeeFirstName  *string    `json:"payee_first_name,omitempty"`
	PayeeLastName   *string    `json:"payee_last_name,omitempty"`
	PayeeMiddleName *string    `json:"payee_middle_name,omitempty"`
	PayeeName       *string    `json:"payee_name,omitempty"`
	PdfURL          *string    `json:"pdf_url,omitempty"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType *string `json:"report_type,omitempty"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear                *int                     `json:"report_year,omitempty"`
	ScheduleType              *string                  `json:"schedule_type,omitempty"`
	ScheduleTypeFull          *string                  `json:"schedule_type_full,omitempty"`
	SubID                     *string                  `json:"sub_id,omitempty"`
	SubordinateCommittee      *shared.CommitteeHistory `json:"subordinate_committee,omitempty"`
	SubordinateCommitteeID    *string                  `json:"subordinate_committee_id,omitempty"`
	TransactionID             *string                  `json:"transaction_id,omitempty"`
	UnlimitedSpendingFlag     *string                  `json:"unlimited_spending_flag,omitempty"`
	UnlimitedSpendingFlagFull *string                  `json:"unlimited_spending_flag_full,omitempty"`
}

type GetSchedulesScheduleFSubIDDefaultApplicationJSON struct {
	Pagination *shared.OffsetInfo                                        `json:"pagination,omitempty"`
	Results    []GetSchedulesScheduleFSubIDDefaultApplicationJSONResults `json:"results,omitempty"`
}

type GetSchedulesScheduleFSubIDResponse struct {
	ContentType                                            string
	StatusCode                                             int
	RawResponse                                            *http.Response
	GetSchedulesScheduleFSubIDDefaultApplicationJSONObject *GetSchedulesScheduleFSubIDDefaultApplicationJSON
}
