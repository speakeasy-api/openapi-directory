"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudauditoptions as shared_cloudauditoptions
from ..shared import counteroptions as shared_counteroptions
from ..shared import dataaccessoptions as shared_dataaccessoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LogConfig:
    r"""Specifies what kind of log the caller must write"""
    
    cloud_audit: Optional[shared_cloudauditoptions.CloudAuditOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudAudit'), 'exclude': lambda f: f is None }})
    r"""Write a Cloud Audit log"""  
    counter: Optional[shared_counteroptions.CounterOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counter'), 'exclude': lambda f: f is None }})
    r"""Increment a streamz counter with the specified metric and field names. Metric names should start with a '/', generally be lowercase-only, and end in \\"_count\\". Field names should not contain an initial slash. The actual exported metric names will have \\"/iam/policy\\" prepended. Field names correspond to IAM request parameters and field values are their respective values. Supported field names: - \\"authority\\", which is \\"[token]\\" if IAMContext.token is present, otherwise the value of IAMContext.authority_selector if present, and otherwise a representation of IAMContext.principal; or - \\"iam_principal\\", a representation of IAMContext.principal even if a token or authority selector is present; or - \\"\\" (empty string), resulting in a counter with no fields. Examples: counter { metric: \\"/debug_access_count\\" field: \\"iam_principal\\" } ==> increment counter /iam/policy/debug_access_count {iam_principal=[value of IAMContext.principal]}"""  
    data_access: Optional[shared_dataaccessoptions.DataAccessOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataAccess'), 'exclude': lambda f: f is None }})
    r"""Write a Data Access (Gin) log"""  
    