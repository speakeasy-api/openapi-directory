// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DeviceToPostDeviceEnergyTypeEnum - The Energy Type of this device
type DeviceToPostDeviceEnergyTypeEnum string

const (
	DeviceToPostDeviceEnergyTypeEnumMeterTypeUnknown       DeviceToPostDeviceEnergyTypeEnum = "MeterTypeUnknown"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeElectricity   DeviceToPostDeviceEnergyTypeEnum = "MeterTypeElectricity"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeWater         DeviceToPostDeviceEnergyTypeEnum = "MeterTypeWater"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeGas           DeviceToPostDeviceEnergyTypeEnum = "MeterTypeGas"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeHeat          DeviceToPostDeviceEnergyTypeEnum = "MeterTypeHeat"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeHca           DeviceToPostDeviceEnergyTypeEnum = "MeterTypeHCA"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeAllMeters     DeviceToPostDeviceEnergyTypeEnum = "MeterTypeAllMeters"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeTemperature   DeviceToPostDeviceEnergyTypeEnum = "MeterTypeTemperature"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeMBusGateway   DeviceToPostDeviceEnergyTypeEnum = "MeterTypeMBusGateway"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeRs485Gateway  DeviceToPostDeviceEnergyTypeEnum = "MeterTypeRS485Gateway"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeCustomDevice  DeviceToPostDeviceEnergyTypeEnum = "MeterTypeCustomDevice"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeCompressedAir DeviceToPostDeviceEnergyTypeEnum = "MeterTypeCompressedAir"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeSolarLog      DeviceToPostDeviceEnergyTypeEnum = "MeterTypeSolarLog"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeVirtualMeter  DeviceToPostDeviceEnergyTypeEnum = "MeterTypeVirtualMeter"
	DeviceToPostDeviceEnergyTypeEnumMeterTypeWmBusGateway  DeviceToPostDeviceEnergyTypeEnum = "MeterTypeWMBusGateway"
)

func (e *DeviceToPostDeviceEnergyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MeterTypeUnknown":
		fallthrough
	case "MeterTypeElectricity":
		fallthrough
	case "MeterTypeWater":
		fallthrough
	case "MeterTypeGas":
		fallthrough
	case "MeterTypeHeat":
		fallthrough
	case "MeterTypeHCA":
		fallthrough
	case "MeterTypeAllMeters":
		fallthrough
	case "MeterTypeTemperature":
		fallthrough
	case "MeterTypeMBusGateway":
		fallthrough
	case "MeterTypeRS485Gateway":
		fallthrough
	case "MeterTypeCustomDevice":
		fallthrough
	case "MeterTypeCompressedAir":
		fallthrough
	case "MeterTypeSolarLog":
		fallthrough
	case "MeterTypeVirtualMeter":
		fallthrough
	case "MeterTypeWMBusGateway":
		*e = DeviceToPostDeviceEnergyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceToPostDeviceEnergyTypeEnum: %s", s)
	}
}

// DeviceToPostMeterSubTypeEnum - The Sub Type of this Meter.
type DeviceToPostMeterSubTypeEnum string

const (
	DeviceToPostMeterSubTypeEnumMeterSubTypeUnknown         DeviceToPostMeterSubTypeEnum = "MeterSubTypeUnknown"
	DeviceToPostMeterSubTypeEnumMeterSubTypeCold            DeviceToPostMeterSubTypeEnum = "MeterSubTypeCold"
	DeviceToPostMeterSubTypeEnumMeterSubTypeHeat            DeviceToPostMeterSubTypeEnum = "MeterSubTypeHeat"
	DeviceToPostMeterSubTypeEnumMeterSubTypeChargingStation DeviceToPostMeterSubTypeEnum = "MeterSubTypeChargingStation"
	DeviceToPostMeterSubTypeEnumMeterSubTypeElectricity     DeviceToPostMeterSubTypeEnum = "MeterSubTypeElectricity"
	DeviceToPostMeterSubTypeEnumMeterSubTypeWater           DeviceToPostMeterSubTypeEnum = "MeterSubTypeWater"
	DeviceToPostMeterSubTypeEnumMeterSubTypeGas             DeviceToPostMeterSubTypeEnum = "MeterSubTypeGas"
	DeviceToPostMeterSubTypeEnumMeterSubTypeElectricityHeat DeviceToPostMeterSubTypeEnum = "MeterSubTypeElectricityHeat"
	DeviceToPostMeterSubTypeEnumMeterSubTypeTemperature     DeviceToPostMeterSubTypeEnum = "MeterSubTypeTemperature"
	DeviceToPostMeterSubTypeEnumMeterSubTypeVirtualBattery  DeviceToPostMeterSubTypeEnum = "MeterSubTypeVirtualBattery"
)

func (e *DeviceToPostMeterSubTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MeterSubTypeUnknown":
		fallthrough
	case "MeterSubTypeCold":
		fallthrough
	case "MeterSubTypeHeat":
		fallthrough
	case "MeterSubTypeChargingStation":
		fallthrough
	case "MeterSubTypeElectricity":
		fallthrough
	case "MeterSubTypeWater":
		fallthrough
	case "MeterSubTypeGas":
		fallthrough
	case "MeterSubTypeElectricityHeat":
		fallthrough
	case "MeterSubTypeTemperature":
		fallthrough
	case "MeterSubTypeVirtualBattery":
		*e = DeviceToPostMeterSubTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceToPostMeterSubTypeEnum: %s", s)
	}
}

// DeviceToPost - Container Class for the Web API
type DeviceToPost struct {
	// The Active Power or current flow rate. In kW or m3/h
	ActivePower *float64 `json:"ActivePower,omitempty" form:"name=ActivePower"`
	// The Meter Counter Reading (Total Energy used) in kWh or m3.
	CounterReading *float64 `json:"CounterReading,omitempty" form:"name=CounterReading"`
	// The Meter Counter Reading only export
	CounterReadingExport *float64 `json:"CounterReadingExport,omitempty" form:"name=CounterReadingExport"`
	// The Meter Counter Reading only export (Tariff 1)
	CounterReadingExportT1 *float64 `json:"CounterReadingExportT1,omitempty" form:"name=CounterReadingExportT1"`
	// The Meter Counter Reading only export (Tariff 2)
	CounterReadingExportT2 *float64 `json:"CounterReadingExportT2,omitempty" form:"name=CounterReadingExportT2"`
	// The Meter Counter Reading Tariff 1 in kWh or m3.
	CounterReadingT1 *float64 `json:"CounterReadingT1,omitempty" form:"name=CounterReadingT1"`
	// The Meter Counter Reading Tariff 2 in kWh or m3.
	CounterReadingT2 *float64 `json:"CounterReadingT2,omitempty" form:"name=CounterReadingT2"`
	// The Current (in A)
	Current *float64 `json:"Current,omitempty" form:"name=Current"`
	// The Current Phase L1 (in A)
	CurrentL1 *float64 `json:"CurrentL1,omitempty" form:"name=CurrentL1"`
	// The Current Phase L2 (in A)
	CurrentL2 *float64 `json:"CurrentL2,omitempty" form:"name=CurrentL2"`
	// The Current Phase L3 (in A)
	CurrentL3 *float64 `json:"CurrentL3,omitempty" form:"name=CurrentL3"`
	// The Energy Type of this device
	DeviceEnergyType *DeviceToPostDeviceEnergyTypeEnum `json:"DeviceEnergyType,omitempty" form:"name=DeviceEnergyType"`
	// The digital input number 1
	DigitalInput1 *bool `json:"DigitalInput1,omitempty" form:"name=DigitalInput1"`
	// The ID of the device
	ID *string `json:"Id,omitempty" form:"name=Id"`
	// The Sub Type of this Meter.
	MeterSubType *DeviceToPostMeterSubTypeEnum `json:"MeterSubType,omitempty" form:"name=MeterSubType"`
	// The Name of the Device
	Name *string `json:"Name,omitempty" form:"name=Name"`
	// The Power Factor (cos phi). Range: 0 - 1
	PowerFactor *float64 `json:"PowerFactor,omitempty" form:"name=PowerFactor"`
	// The Power Factor (cos phi) Phase L1. Range: 0 - 1
	PowerFactorL1 *float64 `json:"PowerFactorL1,omitempty" form:"name=PowerFactorL1"`
	// The Power Factor (cos phi) Phase L2. Range: 0 - 1
	PowerFactorL2 *float64 `json:"PowerFactorL2,omitempty" form:"name=PowerFactorL2"`
	// The Power Factor (cos phi) Phase L3. Range: 0 - 1
	PowerFactorL3 *float64 `json:"PowerFactorL3,omitempty" form:"name=PowerFactorL3"`
	// The Serial number
	Serial *int64 `json:"Serial,omitempty" form:"name=Serial"`
	// The Temperature (in degree celsius)
	Temperature *float64 `json:"Temperature,omitempty" form:"name=Temperature"`
	// The Date of the Value (in UTC). If this is null the Server Time is used.
	ValueDate *time.Time `json:"ValueDate,omitempty" form:"name=ValueDate"`
	// The Voltage (in V)
	Voltage *float64 `json:"Voltage,omitempty" form:"name=Voltage"`
	// The Voltage Phase L1 (in V)
	VoltageL1 *float64 `json:"VoltageL1,omitempty" form:"name=VoltageL1"`
	// The Voltage Phase L2 (in V)
	VoltageL2 *float64 `json:"VoltageL2,omitempty" form:"name=VoltageL2"`
	// The Voltage Phase L3 (in V)
	VoltageL3 *float64 `json:"VoltageL3,omitempty" form:"name=VoltageL3"`
}
