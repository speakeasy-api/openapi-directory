// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PfdawSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PfdawRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	Registration string `json:"Registration"`
}

// PfdawRequestBodyFormatEnum - The format of the certificate in response.
type PfdawRequestBodyFormatEnum string

const (
	PfdawRequestBodyFormatEnumPdf PfdawRequestBodyFormatEnum = "pdf"
)

func (e PfdawRequestBodyFormatEnum) ToPointer() *PfdawRequestBodyFormatEnum {
	return &e
}

func (e *PfdawRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PfdawRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PfdawRequestBodyFormatEnum: %v", v)
	}
}

// PfdawRequestBody - Request format
type PfdawRequestBody struct {
	CertificateParameters *PfdawRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PfdawRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pfdaw504ApplicationJSONErrorEnum string

const (
	Pfdaw504ApplicationJSONErrorEnumGatewayTimeout Pfdaw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Pfdaw504ApplicationJSONErrorEnum) ToPointer() *Pfdaw504ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Pfdaw504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw504ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw504ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pfdaw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Pfdaw504ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Pfdaw504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw504ApplicationJSON - Gateway timeout
type Pfdaw504ApplicationJSON struct {
	Error            *Pfdaw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw503ApplicationJSONErrorEnum string

const (
	Pfdaw503ApplicationJSONErrorEnumServiceUnavailable Pfdaw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Pfdaw503ApplicationJSONErrorEnum) ToPointer() *Pfdaw503ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Pfdaw503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw503ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw503ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pfdaw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Pfdaw503ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Pfdaw503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw503ApplicationJSON - Service unavailable
type Pfdaw503ApplicationJSON struct {
	Error            *Pfdaw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw502ApplicationJSONErrorEnum string

const (
	Pfdaw502ApplicationJSONErrorEnumBadGatewy Pfdaw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Pfdaw502ApplicationJSONErrorEnum) ToPointer() *Pfdaw502ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Pfdaw502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw502ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw502ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pfdaw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Pfdaw502ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Pfdaw502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw502ApplicationJSON - Bad gateway
type Pfdaw502ApplicationJSON struct {
	Error            *Pfdaw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw500ApplicationJSONErrorEnum string

const (
	Pfdaw500ApplicationJSONErrorEnumInternalServerError Pfdaw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Pfdaw500ApplicationJSONErrorEnum) ToPointer() *Pfdaw500ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Pfdaw500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw500ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw500ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw500ApplicationJSONErrorDescriptionEnumInternalServerError Pfdaw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Pfdaw500ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Pfdaw500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw500ApplicationJSON - Internal server error
type Pfdaw500ApplicationJSON struct {
	Error            *Pfdaw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw404ApplicationJSONErrorEnum string

const (
	Pfdaw404ApplicationJSONErrorEnumRecordNotFound Pfdaw404ApplicationJSONErrorEnum = "record_not_found"
	Pfdaw404ApplicationJSONErrorEnumURLNotFound    Pfdaw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Pfdaw404ApplicationJSONErrorEnum) ToPointer() *Pfdaw404ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pfdaw404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw404ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw404ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pfdaw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pfdaw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pfdaw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Pfdaw404ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pfdaw404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw404ApplicationJSON - No record found
type Pfdaw404ApplicationJSON struct {
	Error            *Pfdaw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw401ApplicationJSONErrorEnum string

const (
	Pfdaw401ApplicationJSONErrorEnumInvalidAuthentication Pfdaw401ApplicationJSONErrorEnum = "invalid_authentication"
	Pfdaw401ApplicationJSONErrorEnumInvalidAuthorization  Pfdaw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Pfdaw401ApplicationJSONErrorEnum) ToPointer() *Pfdaw401ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pfdaw401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw401ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw401ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pfdaw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pfdaw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pfdaw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Pfdaw401ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pfdaw401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw401ApplicationJSON - Unauthorized access
type Pfdaw401ApplicationJSON struct {
	Error            *Pfdaw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pfdaw400ApplicationJSONErrorEnum string

const (
	Pfdaw400ApplicationJSONErrorEnumMissingParameter Pfdaw400ApplicationJSONErrorEnum = "missing_parameter"
	Pfdaw400ApplicationJSONErrorEnumInvalidParameter Pfdaw400ApplicationJSONErrorEnum = "invalid_parameter"
	Pfdaw400ApplicationJSONErrorEnumInvalidFormat    Pfdaw400ApplicationJSONErrorEnum = "invalid_format"
	Pfdaw400ApplicationJSONErrorEnumInvalidTxnid     Pfdaw400ApplicationJSONErrorEnum = "invalid_txnid"
	Pfdaw400ApplicationJSONErrorEnumInvalidConsentid Pfdaw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Pfdaw400ApplicationJSONErrorEnum) ToPointer() *Pfdaw400ApplicationJSONErrorEnum {
	return &e
}

func (e *Pfdaw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pfdaw400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw400ApplicationJSONErrorEnum: %v", v)
	}
}

type Pfdaw400ApplicationJSONErrorDescriptionEnum string

const (
	Pfdaw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pfdaw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pfdaw400ApplicationJSONErrorDescriptionEnumBadRequest                              Pfdaw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pfdaw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pfdaw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pfdaw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pfdaw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pfdaw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pfdaw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Pfdaw400ApplicationJSONErrorDescriptionEnum) ToPointer() *Pfdaw400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pfdaw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pfdaw400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pfdaw400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pfdaw400ApplicationJSON - Bad request
type Pfdaw400ApplicationJSON struct {
	Error            *Pfdaw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pfdaw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PfdawResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pfdaw400ApplicationJSONObject *Pfdaw400ApplicationJSON
	// Unauthorized access
	Pfdaw401ApplicationJSONObject *Pfdaw401ApplicationJSON
	// No record found
	Pfdaw404ApplicationJSONObject *Pfdaw404ApplicationJSON
	// Internal server error
	Pfdaw500ApplicationJSONObject *Pfdaw500ApplicationJSON
	// Bad gateway
	Pfdaw502ApplicationJSONObject *Pfdaw502ApplicationJSON
	// Service unavailable
	Pfdaw503ApplicationJSONObject *Pfdaw503ApplicationJSON
	// Gateway timeout
	Pfdaw504ApplicationJSONObject *Pfdaw504ApplicationJSON
}
