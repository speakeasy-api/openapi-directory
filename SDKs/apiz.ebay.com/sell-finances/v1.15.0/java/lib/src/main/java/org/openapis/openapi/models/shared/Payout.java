/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Payout - This type is used to express the details of one seller payout that is returned with the &lt;strong&gt;getPayout&lt;/strong&gt; or &lt;strong&gt;getPayouts&lt;/strong&gt; methods.
 */
public class Payout {
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the &lt;strong&gt;Finances API&lt;/strong&gt;, including an order total, a seller payout, a buyer refund, or a seller credit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Amount amount;

    public Payout withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * This field contains additional information provided by the bank and passed on by the payment processor; e.g., the manner in which the transaction will appear on the seller's bank statement. The field is returned only when provided by the bank and processor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankReference")
    public String bankReference;

    public Payout withBankReference(String bankReference) {
        this.bankReference = bankReference;
        return this;
    }
    
    /**
     * This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the &lt;strong&gt;payoutStatus&lt;/strong&gt; value shows &lt;code&gt;RETRYABLE_FAILED&lt;/code&gt; or &lt;code&gt;TERMINAL_FAILED&lt;/code&gt;. A seller can filter on the &lt;b&gt;lastAttemptedPayoutDate&lt;/b&gt; in a &lt;b&gt;getPayouts&lt;/b&gt; request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastAttemptedPayoutDate")
    public String lastAttemptedPayoutDate;

    public Payout withLastAttemptedPayoutDate(String lastAttemptedPayoutDate) {
        this.lastAttemptedPayoutDate = lastAttemptedPayoutDate;
        return this;
    }
    
    /**
     * This timestamp indicates when the seller payout began processing. The following format is used: &lt;code&gt;YYYY-MM-DDTHH:MM:SS.SSSZ&lt;/code&gt;. For example, &lt;code&gt;2015-08-04T19:09:02.768Z&lt;/code&gt;. This field is still returned even if the payout was pending but failed (&lt;strong&gt;payoutStatus&lt;/strong&gt; value shows &lt;code&gt;RETRYABLE_FAILED&lt;/code&gt; or &lt;code&gt;TERMINAL_FAILED&lt;/code&gt;).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutDate")
    public String payoutDate;

    public Payout withPayoutDate(String payoutDate) {
        this.payoutDate = payoutDate;
        return this;
    }
    
    /**
     * The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutId")
    public String payoutId;

    public Payout withPayoutId(String payoutId) {
        this.payoutId = payoutId;
        return this;
    }
    
    /**
     * This type provides details about the seller's account that received (or is scheduled to receive) a payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutInstrument")
    public PayoutInstrument payoutInstrument;

    public Payout withPayoutInstrument(PayoutInstrument payoutInstrument) {
        this.payoutInstrument = payoutInstrument;
        return this;
    }
    
    /**
     * This field contains information provided by upstream components, based on internal and external commitments. A typical message would contain the expected arrival time of the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutMemo")
    public String payoutMemo;

    public Payout withPayoutMemo(String payoutMemo) {
        this.payoutMemo = payoutMemo;
        return this;
    }
    
    /**
     * This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be &lt;code&gt;SUCCEEDED&lt;/code&gt;. See the &lt;strong&gt;PayoutStatusEnum&lt;/strong&gt; type for more details on each payout status value. For implementation help, refer to &lt;a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'&gt;eBay API documentation&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutStatus")
    public String payoutStatus;

    public Payout withPayoutStatus(String payoutStatus) {
        this.payoutStatus = payoutStatus;
        return this;
    }
    
    /**
     * This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the &lt;strong&gt;payoutStatus&lt;/strong&gt; field. The following shows what description text might appear based on the different &lt;strong&gt;payoutStatus&lt;/strong&gt; values:&lt;ul&gt;&lt;li&gt;&lt;code&gt;INITIATED&lt;/code&gt;: &lt;em&gt;Preparing to send&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;SUCCEEDED&lt;/code&gt;: &lt;em&gt;Funds sent&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;REVERSED&lt;/code&gt;: &lt;em&gt;Waiting to retry : Money rejected by seller's bank&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;RETRYABLE_FAILED&lt;/code&gt;: &lt;em&gt;Waiting to retry&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;TERMINAL_FAILED&lt;/code&gt;: &lt;em&gt;Payout failed&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutStatusDescription")
    public String payoutStatusDescription;

    public Payout withPayoutStatusDescription(String payoutStatusDescription) {
        this.payoutStatusDescription = payoutStatusDescription;
        return this;
    }
    
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the &lt;strong&gt;Finances API&lt;/strong&gt;, including an order total, a seller payout, a buyer refund, or a seller credit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    public Amount totalAmount;

    public Payout withTotalAmount(Amount totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }
    
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the &lt;strong&gt;Finances API&lt;/strong&gt;, including an order total, a seller payout, a buyer refund, or a seller credit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalFee")
    public Amount totalFee;

    public Payout withTotalFee(Amount totalFee) {
        this.totalFee = totalFee;
        return this;
    }
    
    /**
     * This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least &lt;code&gt;1&lt;/code&gt;, since there is at least one order per seller payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCount")
    public Integer transactionCount;

    public Payout withTransactionCount(Integer transactionCount) {
        this.transactionCount = transactionCount;
        return this;
    }
    
    public Payout(){}
}
