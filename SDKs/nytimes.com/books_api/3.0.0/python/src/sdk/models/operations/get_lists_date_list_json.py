"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GETListsDateListJSONSecurity:
    
    api_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api-key' }})  
    
class GETListsDateListJSONSortOrderEnum(str, Enum):
    r"""The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type."""
    ASC = 'ASC'
    DESC = 'DESC'


@dataclasses.dataclass
class GETListsDateListJSONRequest:
    
    date_: str = dataclasses.field(metadata={'path_param': { 'field_name': 'date', 'style': 'simple', 'explode': False }})  
    list_: str = dataclasses.field(metadata={'path_param': { 'field_name': 'list', 'style': 'simple', 'explode': False }})
    r"""Name of the Best Sellers List. You can get the full list from /lists/names.json"""  
    bestsellers_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bestsellers-date', 'style': 'form', 'explode': True }})
    r"""YYYY-MM-DD
    
    The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
    """  
    isbn: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isbn', 'style': 'form', 'explode': True }})
    r"""International Standard Book Number, 10 or 13 digits"""  
    list_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'list-name', 'style': 'form', 'explode': True }})
    r"""The name of the Times best-seller list. To get valid values, use a list names request.
    
    Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.)
    """  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Sets the starting point of the result set"""  
    published_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'published-date', 'style': 'form', 'explode': True }})
    r"""YYYY-MM-DD
    
    The date the best-seller list was published on NYTimes.com (compare bestsellers-date)
    """  
    rank: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rank', 'style': 'form', 'explode': True }})
    r"""The rank of the best seller on list-name as of bestsellers-date"""  
    rank_last_week: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rank-last-week', 'style': 'form', 'explode': True }})
    r"""The rank of the best seller on list-name one week prior to bestsellers-date"""  
    sort_order: Optional[GETListsDateListJSONSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort-order', 'style': 'form', 'explode': True }})
    r"""The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter — for details, see each request type."""  
    weeks_on_list: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'weeks-on-list', 'style': 'form', 'explode': True }})
    r"""The number of weeks that the best seller has been on list-name, as of bestsellers-date"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETListsDateListJSON200ApplicationJSONResultsBooksIsbns:
    
    isbn10: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isbn10'), 'exclude': lambda f: f is None }})  
    isbn13: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isbn13'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETListsDateListJSON200ApplicationJSONResultsBooks:
    
    age_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('age_group'), 'exclude': lambda f: f is None }})  
    amazon_product_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amazon_product_url'), 'exclude': lambda f: f is None }})  
    article_chapter_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('article_chapter_link'), 'exclude': lambda f: f is None }})  
    asterisk: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asterisk'), 'exclude': lambda f: f is None }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author'), 'exclude': lambda f: f is None }})  
    book_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('book_image'), 'exclude': lambda f: f is None }})  
    book_review_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('book_review_link'), 'exclude': lambda f: f is None }})  
    contributor: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor'), 'exclude': lambda f: f is None }})  
    contributor_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor_note'), 'exclude': lambda f: f is None }})  
    dagger: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dagger'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    first_chapter_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_chapter_link'), 'exclude': lambda f: f is None }})  
    isbns: Optional[list[GETListsDateListJSON200ApplicationJSONResultsBooksIsbns]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isbns'), 'exclude': lambda f: f is None }})  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    primary_isbn10: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_isbn10'), 'exclude': lambda f: f is None }})  
    primary_isbn13: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_isbn13'), 'exclude': lambda f: f is None }})  
    publisher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher'), 'exclude': lambda f: f is None }})  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})  
    rank_last_week: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank_last_week'), 'exclude': lambda f: f is None }})  
    sunday_review_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sunday_review_link'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    weeks_on_list: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weeks_on_list'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETListsDateListJSON200ApplicationJSONResults:
    
    bestsellers_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bestsellers_date'), 'exclude': lambda f: f is None }})  
    books: Optional[list[GETListsDateListJSON200ApplicationJSONResultsBooks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('books'), 'exclude': lambda f: f is None }})  
    corrections: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corrections'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name'), 'exclude': lambda f: f is None }})  
    list_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list_name'), 'exclude': lambda f: f is None }})  
    normal_list_ends_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normal_list_ends_at'), 'exclude': lambda f: f is None }})  
    published_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published_date'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETListsDateListJSON200ApplicationJSON:
    
    copyright: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyright'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_modified'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_results'), 'exclude': lambda f: f is None }})  
    results: Optional[GETListsDateListJSON200ApplicationJSONResults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GETListsDateListJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_lists_date_list_json_200_application_json_object: Optional[GETListsDateListJSON200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    