/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StructuredQuery - A Firestore query.
 */
public class StructuredQuery {
    /**
     * A position in a query result set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endAt")
    public Cursor endAt;
    public StructuredQuery withEndAt(Cursor endAt) {
        this.endAt = endAt;
        return this;
    }
    
    /**
     * The collections to query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public CollectionSelector[] from;
    public StructuredQuery withFrom(CollectionSelector[] from) {
        this.from = from;
        return this;
    }
    
    /**
     * The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Integer limit;
    public StructuredQuery withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, &amp; `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Integer offset;
    public StructuredQuery withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a &gt; 1` becomes `WHERE a &gt; 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ &gt; ... AND a &gt; 1` becomes `WHERE __name__ &gt; ... AND a &gt; 1 ORDER BY a ASC, __name__ ASC`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderBy")
    public Order[] orderBy;
    public StructuredQuery withOrderBy(Order[] orderBy) {
        this.orderBy = orderBy;
        return this;
    }
    
    /**
     * The projection of document's fields to return.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("select")
    public Projection select;
    public StructuredQuery withSelect(Projection select) {
        this.select = select;
        return this;
    }
    
    /**
     * A position in a query result set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startAt")
    public Cursor startAt;
    public StructuredQuery withStartAt(Cursor startAt) {
        this.startAt = startAt;
        return this;
    }
    
    /**
     * A filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("where")
    public Filter where;
    public StructuredQuery withWhere(Filter where) {
        this.where = where;
        return this;
    }
    
}
