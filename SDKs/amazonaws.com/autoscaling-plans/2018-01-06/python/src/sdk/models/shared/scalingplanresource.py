"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scalabledimension_enum as shared_scalabledimension_enum
from ..shared import scalingpolicy as shared_scalingpolicy
from ..shared import scalingstatuscode_enum as shared_scalingstatuscode_enum
from ..shared import servicenamespace_enum as shared_servicenamespace_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScalingPlanResource:
    r"""Represents a scalable resource."""
    
    resource_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceId') }})  
    scalable_dimension: shared_scalabledimension_enum.ScalableDimensionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalableDimension') }})  
    scaling_plan_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingPlanName') }})  
    scaling_plan_version: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingPlanVersion') }})  
    scaling_status_code: shared_scalingstatuscode_enum.ScalingStatusCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingStatusCode') }})  
    service_namespace: shared_servicenamespace_enum.ServiceNamespaceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNamespace') }})  
    scaling_policies: Optional[list[shared_scalingpolicy.ScalingPolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingPolicies'), 'exclude': lambda f: f is None }})  
    scaling_status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScalingStatusMessage'), 'exclude': lambda f: f is None }})  
    