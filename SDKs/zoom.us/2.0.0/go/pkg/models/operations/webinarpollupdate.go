// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WebinarPollUpdateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type WebinarPollUpdatePathParams struct {
	// The poll ID
	PollID string `pathParam:"style=simple,explode=false,name=pollId"`
	// The webinar ID in "**long**" format(represented as int64 data type in JSON).
	WebinarID int64 `pathParam:"style=simple,explode=false,name=webinarId"`
}

// WebinarPollUpdatePollQuestionsTypeEnum - Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type WebinarPollUpdatePollQuestionsTypeEnum string

const (
	WebinarPollUpdatePollQuestionsTypeEnumSingle   WebinarPollUpdatePollQuestionsTypeEnum = "single"
	WebinarPollUpdatePollQuestionsTypeEnumMultiple WebinarPollUpdatePollQuestionsTypeEnum = "multiple"
)

func (e *WebinarPollUpdatePollQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = WebinarPollUpdatePollQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebinarPollUpdatePollQuestionsTypeEnum: %s", s)
	}
}

type WebinarPollUpdatePollQuestions struct {
	// Answers to the questions
	Answers []string `json:"answers,omitempty"`
	// Question to be asked to the attendees.
	Name *string `json:"name,omitempty"`
	// Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *WebinarPollUpdatePollQuestionsTypeEnum `json:"type,omitempty"`
}

// WebinarPollUpdatePoll - Poll
type WebinarPollUpdatePoll struct {
	// Array of Polls
	Questions []WebinarPollUpdatePollQuestions `json:"questions,omitempty" multipartForm:"name=questions,json"`
	// Title for the poll.
	Title *string `json:"title,omitempty" multipartForm:"name=title"`
}

type WebinarPollUpdateRequest struct {
	PathParams WebinarPollUpdatePathParams
	// Webinar Poll
	Request  WebinarPollUpdatePoll `request:"mediaType=application/json"`
	Security WebinarPollUpdateSecurity
}

type WebinarPollUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
