"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import audituserpermission as shared_audituserpermission
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuditNodeResponse:
    r"""Audit node report"""
    
    audit_user_permission_list: list[shared_audituserpermission.AuditUserPermission] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditUserPermissionList') }})
    r"""List of assigned users with permissions"""  
    node_cnt_children: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeCntChildren') }})
    r"""Number of direct children
    
    (no recursion; for rooms only)
    """  
    node_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeId') }})
    r"""Node ID"""  
    node_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeName') }})
    r"""Node name"""  
    node_parent_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeParentPath') }})
    r"""Parent node path
    
    `/` if node is a root node (room)
    """  
    node_created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeCreatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Creation date"""  
    node_created_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeCreatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    node_has_activities_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeHasActivitiesLog'), 'exclude': lambda f: f is None }})
    r"""Is activities log active (for rooms only)"""  
    node_has_recycle_bin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeHasRecycleBin'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.10.0
    
    Is recycle bin active (for rooms only)
    
    Recycle bin is always on (disabling is not possible).
    """  
    node_is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeIsEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    node_parent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeParentId'), 'exclude': lambda f: f is None }})
    r"""Parent node ID (room or folder)"""  
    node_quota: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeQuota'), 'exclude': lambda f: f is None }})
    r"""Quota in byte"""  
    node_recycle_bin_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeRecycleBinRetentionPeriod'), 'exclude': lambda f: f is None }})
    r"""Retention period for deleted nodes in days"""  
    node_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeSize'), 'exclude': lambda f: f is None }})
    r"""Node size in byte"""  
    node_updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeUpdatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Modification date"""  
    node_updated_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeUpdatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    