"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import endpointdetails as shared_endpointdetails
from ..shared import endpointtype_enum as shared_endpointtype_enum
from ..shared import identityproviderdetails as shared_identityproviderdetails
from ..shared import protocol_enum as shared_protocol_enum
from ..shared import protocoldetails as shared_protocoldetails
from ..shared import workflowdetails as shared_workflowdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateServerRequest:
    
    server_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerId') }})  
    certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Certificate'), 'exclude': lambda f: f is None }})  
    endpoint_details: Optional[shared_endpointdetails.EndpointDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointDetails'), 'exclude': lambda f: f is None }})  
    endpoint_type: Optional[shared_endpointtype_enum.EndpointTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointType'), 'exclude': lambda f: f is None }})  
    host_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostKey'), 'exclude': lambda f: f is None }})  
    identity_provider_details: Optional[shared_identityproviderdetails.IdentityProviderDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityProviderDetails'), 'exclude': lambda f: f is None }})  
    logging_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoggingRole'), 'exclude': lambda f: f is None }})  
    post_authentication_login_banner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostAuthenticationLoginBanner'), 'exclude': lambda f: f is None }})  
    pre_authentication_login_banner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreAuthenticationLoginBanner'), 'exclude': lambda f: f is None }})  
    protocol_details: Optional[shared_protocoldetails.ProtocolDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProtocolDetails'), 'exclude': lambda f: f is None }})  
    protocols: Optional[list[shared_protocol_enum.ProtocolEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Protocols'), 'exclude': lambda f: f is None }})  
    security_policy_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityPolicyName'), 'exclude': lambda f: f is None }})  
    workflow_details: Optional[shared_workflowdetails.WorkflowDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkflowDetails'), 'exclude': lambda f: f is None }})  
    