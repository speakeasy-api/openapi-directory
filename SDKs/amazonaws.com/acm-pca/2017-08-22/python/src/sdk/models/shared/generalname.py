"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import asn1subject as shared_asn1subject
from ..shared import edipartyname as shared_edipartyname
from ..shared import othername as shared_othername
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneralName:
    r"""Describes an ASN.1 X.400 <code>GeneralName</code> as defined in <a href=\\"https://datatracker.ietf.org/doc/html/rfc5280\\">RFC 5280</a>. Only one of the following naming options should be provided. Providing more than one option results in an <code>InvalidArgsException</code> error."""
    
    directory_name: Optional[shared_asn1subject.Asn1Subject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryName'), 'exclude': lambda f: f is None }})
    r"""Contains information about the certificate subject. The <code>Subject</code> field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The <code>Subject </code>must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate."""  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsName'), 'exclude': lambda f: f is None }})  
    edi_party_name: Optional[shared_edipartyname.EdiPartyName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EdiPartyName'), 'exclude': lambda f: f is None }})  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpAddress'), 'exclude': lambda f: f is None }})  
    other_name: Optional[shared_othername.OtherName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherName'), 'exclude': lambda f: f is None }})  
    registered_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegisteredId'), 'exclude': lambda f: f is None }})  
    rfc822_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rfc822Name'), 'exclude': lambda f: f is None }})  
    uniform_resource_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UniformResourceIdentifier'), 'exclude': lambda f: f is None }})  
    