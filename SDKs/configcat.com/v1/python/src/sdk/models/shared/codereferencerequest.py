"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flagreference as shared_flagreference
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeReferenceRequest:
    
    branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch') }})
    r"""The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)"""  
    config_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configId') }})
    r"""The Config's identifier the scanning was performed against."""  
    repository: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)"""  
    active_branches: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activeBranches'), 'exclude': lambda f: f is None }})
    r"""The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted."""  
    commit_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitHash'), 'exclude': lambda f: f is None }})
    r"""The related commit's hash. (Appears on the ConfigCat Dashboard)"""  
    commit_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commitUrl'), 'exclude': lambda f: f is None }})
    r"""The related commit's URL. (Appears on the ConfigCat Dashboard)"""  
    flag_references: Optional[list[shared_flagreference.FlagReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flagReferences'), 'exclude': lambda f: f is None }})
    r"""The actual code reference collection."""  
    uploader: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploader'), 'exclude': lambda f: f is None }})
    r"""The scanning tool's name. (Appears on the ConfigCat Dashboard)"""  
    