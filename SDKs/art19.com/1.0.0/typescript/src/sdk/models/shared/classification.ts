/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of classification. The type of retrievable classifications depends on the privileges
 *
 * @remarks
 * of the credential being used.
 *
 */
export enum ClassificationAttributesTypeEnum {
  AlternateFeedType = "AlternateFeedType",
  Genre = "Genre",
  Industry = "Industry",
  Language = "Language",
  MediaRating = "MediaRating",
}

export class ClassificationAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Human readable representation of the classification
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * An object with more detailed information about the classification.
   *
   * @remarks
   * The possible members are different per type of classification.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * This will be replaced by the relationship `parent` in a future update.<br/>
   *
   * @remarks
   * For hierarchical classifications, this is the ID of the parent classification
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent_id" })
  parentId?: string;

  /**
   * For hierarchical classifications this is the list of IDs reflecting the hierarchy starting
   *
   * @remarks
   * with the root level node.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tree_path" })
  treePath?: string[];

  /**
   * The type of classification. The type of retrievable classifications depends on the privileges
   *
   * @remarks
   * of the credential being used.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ClassificationAttributesTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The value the classification represents. The meaning of this attribute depends on the type of classification.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;

  /**
   * For hierarchical classifications this is a concatenated string of all the classification
   *
   * @remarks
   * values from the root to this classification using a `: ` as separator.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value_path" })
  valuePath?: string;
}

/**
 * A classification, in general, is something that can describe other resources, such as countries, genres or
 *
 * @remarks
 * languages. How they're described (included or excluded, and whether they're the primary classification
 * of this type) is handled using other resources. Different functions of ART19 rely on classifications differently,
 * and could have an effect only on directory information, or may have an effect on ad decisioning.
 *
 */
export class Classification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => ClassificationAttributes)
  attributes?: ClassificationAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The type of resource. This is always `classifications`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
