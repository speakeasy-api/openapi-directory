import { SpeakeasyBase } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export declare const CreateNotificationServerList: readonly ["https://verify.twilio.com"];
export declare class CreateNotificationSecurity extends SpeakeasyBase {
    password: string;
    username: string;
}
export declare class CreateNotificationCreateNotificationRequest extends SpeakeasyBase {
    /**
     * How long, in seconds, the notification is valid. Can be an integer between 0 and 300. Default is 300. Delivery is attempted until the TTL elapses, even if the device is offline. 0 means that the notification delivery is attempted immediately, only once, and is not stored for future delivery.
     */
    ttl?: number;
}
export declare class CreateNotificationRequest extends SpeakeasyBase {
    /**
     * The unique SID identifier of the Challenge.
     */
    challengeSid: string;
    /**
     * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     */
    identity: string;
    requestBody?: CreateNotificationCreateNotificationRequest;
    /**
     * The unique SID identifier of the Service.
     */
    serviceSid: string;
}
export declare class CreateNotificationResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * Created
     */
    verifyV2ServiceEntityChallengeNotification?: shared.VerifyV2ServiceEntityChallengeNotification;
}
