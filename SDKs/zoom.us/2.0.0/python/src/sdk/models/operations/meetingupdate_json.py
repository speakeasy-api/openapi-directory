"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MeetingUpdateJSONSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""
    MINUS_1 = '-1'
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum(str, Enum):
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'

class MeetingUpdateApplicationJSONRecurrenceTypeEnum(str, Enum):
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""
    ONE = '1'
    TWO = '2'
    THREE = '3'

class MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum(str, Enum):
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONRecurrence:
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""
    
    type: MeetingUpdateApplicationJSONRecurrenceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly."""  
    end_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with \\"end_times\\".)"""  
    end_times: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_times'), 'exclude': lambda f: f is None }})
    r"""Select how many times the meeting should recur before it is canceled. (Cannot be used with \\"end_date_time\\".)"""  
    monthly_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
    
    For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
    """  
    monthly_week: Optional[MeetingUpdateApplicationJSONRecurrenceMonthlyWeekEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month."""  
    monthly_week_day: Optional[MeetingUpdateApplicationJSONRecurrenceMonthlyWeekDayEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly_week_day'), 'exclude': lambda f: f is None }})
    r"""Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
    
    <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    repeat_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeat_interval'), 'exclude': lambda f: f is None }})
    r"""Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
    
    For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
    """  
    weekly_days: Optional[MeetingUpdateApplicationJSONRecurrenceWeeklyDaysEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly_days'), 'exclude': lambda f: f is None }})
    r"""This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `\\"1\\"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `\\"1,3\\"` as the value of this field.
    
     <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
    """  
    
class MeetingUpdateApplicationJSONSettingsApprovalTypeEnum(str, Enum):
    r"""Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
    
    `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
    """
    ZERO = '0'
    ONE = '1'
    TWO = '2'

class MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(str, Enum):
    r"""Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
    `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
    `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
    """
    APPROVE = 'approve'
    DENY = 'deny'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions:
    r"""Approve or block users from specific regions/countries from joining this meeting."""
    
    approved_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_list'), 'exclude': lambda f: f is None }})
    r"""List of countries/regions from where participants can join this meeting."""  
    denied_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('denied_list'), 'exclude': lambda f: f is None }})
    r"""List of countries/regions from where participants can not join this meeting."""  
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""`true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
    
    `false`: Setting disabled.
    """  
    method: Optional[MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
    `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
    `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
    """  
    
class MeetingUpdateApplicationJSONSettingsAudioEnum(str, Enum):
    r"""Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only."""
    BOTH = 'both'
    TELEPHONY = 'telephony'
    VOIP = 'voip'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsAuthenticationException:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the participant."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the participant."""  
    
class MeetingUpdateApplicationJSONSettingsAutoRecordingEnum(str, Enum):
    r"""Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled."""
    LOCAL = 'local'
    CLOUD = 'cloud'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsBreakoutRoomRooms:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the breakout room."""  
    participants: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})
    r"""Email addresses of the participants who are to be assigned to the breakout room."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsBreakoutRoom:
    r"""Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4)."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option."""  
    rooms: Optional[list[MeetingUpdateApplicationJSONSettingsBreakoutRoomRooms]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rooms'), 'exclude': lambda f: f is None }})
    r"""Create room(s)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Custom key associated with the user."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom key associated with the user."""  
    
class MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum(str, Enum):
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """
    ENHANCED_ENCRYPTION = 'enhanced_encryption'
    E2EE = 'e2ee'

class MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum(str, Enum):
    r"""Type of number."""
    TOLL = 'toll'
    TOLLFREE = 'tollfree'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsGlobalDialInNumbers:
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of the number, if any. For example, Chicago."""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Country code. For example, BR."""  
    country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_name'), 'exclude': lambda f: f is None }})
    r"""Full name of country. For example, Brazil."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Phone number. For example, +1 2332357613."""  
    type: Optional[MeetingUpdateApplicationJSONSettingsGlobalDialInNumbersTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of number."""  
    
class MeetingUpdateApplicationJSONSettingsJbhTimeEnum(str, Enum):
    r"""If the value of \\"join_before_host\\" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
    
    *  `0`: Allow participant to join anytime.
    *  `5`: Allow participant to join 5 minutes before meeting start time.
     * `10`: Allow participant to join 10 minutes before meeting start time.
    """
    ZERO = '0'
    FIVE = '5'
    TEN = '10'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsLanguageInterpretationInterpreters:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the interpreter."""  
    languages: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languages'), 'exclude': lambda f: f is None }})
    r"""Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
    
    For example, if the language is to be interpreted from English to Chinese, the value of this field should be \"US,CN\".
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettingsLanguageInterpretation:
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})  
    interpreters: Optional[list[MeetingUpdateApplicationJSONSettingsLanguageInterpretationInterpreters]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interpreters'), 'exclude': lambda f: f is None }})
    r"""Information associated with the interpreter."""  
    
class MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum(str, Enum):
    r"""Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend."""
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONSettings:
    r"""Meeting settings."""
    
    allow_multiple_devices: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_multiple_devices'), 'exclude': lambda f: f is None }})
    r"""Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting)."""  
    alternative_hosts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_hosts'), 'exclude': lambda f: f is None }})
    r"""Alternative host's emails or IDs: multiple values are separated by a semicolon."""  
    alternative_hosts_email_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_hosts_email_notification'), 'exclude': lambda f: f is None }})
    r"""Flag to determine whether to send email notifications to alternative hosts, default value is true."""  
    approval_type: Optional[MeetingUpdateApplicationJSONSettingsApprovalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval_type'), 'exclude': lambda f: f is None }})
    r"""Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
    
    `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
    """  
    approved_or_denied_countries_or_regions: Optional[MeetingUpdateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_or_denied_countries_or_regions'), 'exclude': lambda f: f is None }})
    r"""Approve or block users from specific regions/countries from joining this meeting."""  
    audio: Optional[MeetingUpdateApplicationJSONSettingsAudioEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only."""  
    authentication_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_domains'), 'exclude': lambda f: f is None }})
    r"""If user has configured [\\"Sign Into Zoom with Specified Domains\\"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated."""  
    authentication_exception: Optional[list[MeetingUpdateApplicationJSONSettingsAuthenticationException]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_exception'), 'exclude': lambda f: f is None }})
    r"""The participants added here will receive unique meeting invite links and bypass authentication."""  
    authentication_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_name'), 'exclude': lambda f: f is None }})
    r"""Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f)."""  
    authentication_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication_option'), 'exclude': lambda f: f is None }})
    r"""Meeting authentication option id."""  
    auto_recording: Optional[MeetingUpdateApplicationJSONSettingsAutoRecordingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_recording'), 'exclude': lambda f: f is None }})
    r"""Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled."""  
    breakout_room: Optional[MeetingUpdateApplicationJSONSettingsBreakoutRoom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breakout_room'), 'exclude': lambda f: f is None }})
    r"""Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4)."""  
    close_registration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('close_registration'), 'exclude': lambda f: f is None }})
    r"""Close registration after event date"""  
    cn_meeting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cn_meeting'), 'exclude': lambda f: f is None }})
    r"""Host meeting in China."""  
    contact_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_email'), 'exclude': lambda f: f is None }})
    r"""Contact email for registration"""  
    contact_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_name'), 'exclude': lambda f: f is None }})
    r"""Contact name for registration"""  
    custom_keys: Optional[list[MeetingUpdateApplicationJSONSettingsCustomKeys]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_keys'), 'exclude': lambda f: f is None }})
    r"""Custom keys and values assigned to the meeting."""  
    encryption_type: Optional[MeetingUpdateApplicationJSONSettingsEncryptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_type'), 'exclude': lambda f: f is None }})
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """  
    enforce_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login'), 'exclude': lambda f: f is None }})
    r"""Only signed in users can join this meeting.
    
    **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
    """  
    enforce_login_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login_domains'), 'exclude': lambda f: f is None }})
    r"""Only signed in users with specified domains can join meetings.
    
    **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the \"meeting_authentication\", \"authentication_option\" and \"authentication_domains\" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
    """  
    global_dial_in_countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global_dial_in_countries'), 'exclude': lambda f: f is None }})
    r"""List of global dial-in countries"""  
    global_dial_in_numbers: Optional[list[MeetingUpdateApplicationJSONSettingsGlobalDialInNumbers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global_dial_in_numbers'), 'exclude': lambda f: f is None }})
    r"""Global Dial-in Countries/Regions"""  
    host_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_video'), 'exclude': lambda f: f is None }})
    r"""Start video when the host joins the meeting."""  
    in_meeting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_meeting'), 'exclude': lambda f: f is None }})
    r"""Host meeting in India."""  
    jbh_time: Optional[MeetingUpdateApplicationJSONSettingsJbhTimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jbh_time'), 'exclude': lambda f: f is None }})
    r"""If the value of \\"join_before_host\\" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
    
    *  `0`: Allow participant to join anytime.
    *  `5`: Allow participant to join 5 minutes before meeting start time.
     * `10`: Allow participant to join 10 minutes before meeting start time.
    """  
    join_before_host: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_before_host'), 'exclude': lambda f: f is None }})
    r"""Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings."""  
    language_interpretation: Optional[MeetingUpdateApplicationJSONSettingsLanguageInterpretation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language_interpretation'), 'exclude': lambda f: f is None }})  
    meeting_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_authentication'), 'exclude': lambda f: f is None }})
    r"""`true`- Only authenticated users can join meetings."""  
    mute_upon_entry: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mute_upon_entry'), 'exclude': lambda f: f is None }})
    r"""Mute participants upon entry."""  
    participant_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_video'), 'exclude': lambda f: f is None }})
    r"""Start video when participants join the meeting."""  
    registrants_confirmation_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants_confirmation_email'), 'exclude': lambda f: f is None }})
    r"""Send confirmation Email to Registrants"""  
    registrants_email_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants_email_notification'), 'exclude': lambda f: f is None }})
    r"""Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field."""  
    registration_type: Optional[MeetingUpdateApplicationJSONSettingsRegistrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_type'), 'exclude': lambda f: f is None }})
    r"""Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend."""  
    show_share_button: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_share_button'), 'exclude': lambda f: f is None }})
    r"""Show social share buttons on the meeting registration page.
    This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
    """  
    use_pmi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_pmi'), 'exclude': lambda f: f is None }})
    r"""Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time."""  
    waiting_room: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_room'), 'exclude': lambda f: f is None }})
    r"""Enable waiting room"""  
    watermark: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watermark'), 'exclude': lambda f: f is None }})
    r"""Add watermark when viewing a shared screen."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSONTrackingFields:
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Tracking fields type"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Tracking fields value"""  
    
class MeetingUpdateApplicationJSONTypeEnum(str, Enum):
    r"""Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with a fixed time."""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    EIGHT = '8'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingUpdateApplicationJSON:
    r"""Base object for sessions."""
    
    agenda: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agenda'), 'exclude': lambda f: f is None }})
    r"""Meeting description."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Meeting duration (minutes). Used for scheduled meetings only."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""Meeting passcode. Passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.
    
    **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the  [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
    """  
    recurrence: Optional[MeetingUpdateApplicationJSONRecurrence] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurrence'), 'exclude': lambda f: f is None }})
    r"""Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time."""  
    schedule_for: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_for'), 'exclude': lambda f: f is None }})
    r"""Email or userId if you want to schedule meeting for another user."""  
    settings: Optional[MeetingUpdateApplicationJSONSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting start time. When using a format like \\"yyyy-MM-dd'T'HH:mm:ss'Z'\\", always use GMT time. When using a format like \\"yyyy-MM-dd'T'HH:mm:ss\\", you should use local time and  specify the time zone. Only used for scheduled meetings and recurring meetings with a fixed time."""  
    template_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the meeting template.
    
    Use this field if you would like to [schedule the meeting from a meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). You can retrieve the value of this field by calling the [List meeting templates]() API.
    """  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Time zone to format start_time. For example, \\"America/Los_Angeles\\". For scheduled meetings only. Please reference our [time zone](#timezones) list for supported time zones and their formats."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Meeting topic."""  
    tracking_fields: Optional[list[MeetingUpdateApplicationJSONTrackingFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_fields'), 'exclude': lambda f: f is None }})
    r"""Tracking fields"""  
    type: Optional[MeetingUpdateApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with a fixed time."""  
    

@dataclasses.dataclass
class MeetingUpdateJSONRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    request_body: MeetingUpdateApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Meeting"""  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""Meeting occurrence id. Support change of agenda, start_time, duration, settings: {host_video, participant_video, join_before_host, mute_upon_entry, waiting_room, watermark, auto_recording}"""  
    

@dataclasses.dataclass
class MeetingUpdateJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    