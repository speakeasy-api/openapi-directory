"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyClientVpnEndpointActionEnum(str, Enum):
    MODIFY_CLIENT_VPN_ENDPOINT = 'ModifyClientVpnEndpoint'


@dataclasses.dataclass
class GETModifyClientVpnEndpointClientConnectOptions:
    r"""The options for managing connection authorization for new client connections."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Enabled' }})  
    lambda_function_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LambdaFunctionArn' }})  
    

@dataclasses.dataclass
class GETModifyClientVpnEndpointClientLoginBannerOptions:
    r"""Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established."""
    
    banner_text: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'BannerText' }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Enabled' }})  
    

@dataclasses.dataclass
class GETModifyClientVpnEndpointConnectionLogOptions:
    r"""Describes the client connection logging options for the Client VPN endpoint."""
    
    cloudwatch_log_group: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CloudwatchLogGroup' }})  
    cloudwatch_log_stream: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CloudwatchLogStream' }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Enabled' }})  
    

@dataclasses.dataclass
class GETModifyClientVpnEndpointDNSServers:
    r"""Information about the DNS server to be used."""
    
    custom_dns_servers: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CustomDnsServers' }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Enabled' }})  
    
class GETModifyClientVpnEndpointSelfServicePortalEnum(str, Enum):
    r"""Specify whether to enable the self-service portal for the Client VPN endpoint."""
    ENABLED = 'enabled'
    DISABLED = 'disabled'

class GETModifyClientVpnEndpointVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyClientVpnEndpointRequest:
    
    action: GETModifyClientVpnEndpointActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    client_vpn_endpoint_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ClientVpnEndpointId', 'style': 'form', 'explode': True }})
    r"""The ID of the Client VPN endpoint to modify."""  
    version: GETModifyClientVpnEndpointVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    client_connect_options: Optional[GETModifyClientVpnEndpointClientConnectOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ClientConnectOptions', 'style': 'form', 'explode': True }})
    r"""The options for managing connection authorization for new client connections."""  
    client_login_banner_options: Optional[GETModifyClientVpnEndpointClientLoginBannerOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ClientLoginBannerOptions', 'style': 'form', 'explode': True }})
    r"""Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established."""  
    connection_log_options: Optional[GETModifyClientVpnEndpointConnectionLogOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConnectionLogOptions', 'style': 'form', 'explode': True }})
    r"""<p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul>"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""A brief description of the Client VPN endpoint."""  
    dns_servers: Optional[GETModifyClientVpnEndpointDNSServers] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DnsServers', 'style': 'form', 'explode': True }})
    r"""Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    security_group_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SecurityGroupId', 'style': 'form', 'explode': True }})
    r"""The IDs of one or more security groups to apply to the target network."""  
    self_service_portal: Optional[GETModifyClientVpnEndpointSelfServicePortalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SelfServicePortal', 'style': 'form', 'explode': True }})
    r"""Specify whether to enable the self-service portal for the Client VPN endpoint."""  
    server_certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ServerCertificateArn', 'style': 'form', 'explode': True }})
    r"""The ARN of the server certificate to be used. The server certificate must be provisioned in Certificate Manager (ACM)."""  
    session_timeout_hours: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SessionTimeoutHours', 'style': 'form', 'explode': True }})
    r"""<p>The maximum VPN session duration time in hours.</p> <p>Valid values: <code>8 | 10 | 12 | 24</code> </p> <p>Default value: <code>24</code> </p>"""  
    split_tunnel: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SplitTunnel', 'style': 'form', 'explode': True }})
    r"""<p>Indicates whether the VPN is split-tunnel.</p> <p>For information about split-tunnel VPN endpoints, see <a href=\\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\\">Split-tunnel Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.</p>"""  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpcId', 'style': 'form', 'explode': True }})
    r"""The ID of the VPC to associate with the Client VPN endpoint."""  
    vpn_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpnPort', 'style': 'form', 'explode': True }})
    r"""<p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p> <p>Valid Values: <code>443</code> | <code>1194</code> </p> <p>Default Value: <code>443</code> </p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyClientVpnEndpointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    