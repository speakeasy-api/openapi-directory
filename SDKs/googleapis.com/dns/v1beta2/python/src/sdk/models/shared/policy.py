"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import policyalternativenameserverconfig as shared_policyalternativenameserverconfig
from ..shared import policynetwork as shared_policynetwork
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Policy:
    r"""A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources."""
    
    alternative_name_server_config: Optional[shared_policyalternativenameserverconfig.PolicyAlternativeNameServerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternativeNameServerConfig'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function."""  
    enable_inbound_forwarding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableInboundForwarding'), 'exclude': lambda f: f is None }})
    r"""Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy."""  
    enable_logging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableLogging'), 'exclude': lambda f: f is None }})
    r"""Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the resource; defined by the server (output only)."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User-assigned name for this policy."""  
    networks: Optional[list[shared_policynetwork.PolicyNetwork]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""List of network names specifying networks to which this policy is applied."""  
    