// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImportVolumeResultConversionTaskImportInstancePlatformEnum - The instance operating system.
type ImportVolumeResultConversionTaskImportInstancePlatformEnum string

const (
	ImportVolumeResultConversionTaskImportInstancePlatformEnumWindows ImportVolumeResultConversionTaskImportInstancePlatformEnum = "Windows"
)

func (e *ImportVolumeResultConversionTaskImportInstancePlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		*e = ImportVolumeResultConversionTaskImportInstancePlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportVolumeResultConversionTaskImportInstancePlatformEnum: %s", s)
	}
}

// ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum - The disk image format.
type ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum string

const (
	ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnumVmdk ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum = "VMDK"
	ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnumRaw  ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum = "RAW"
	ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnumVhd  ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum = "VHD"
)

func (e *ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VMDK":
		fallthrough
	case "RAW":
		fallthrough
	case "VHD":
		*e = ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum: %s", s)
	}
}

// ImportVolumeResultConversionTaskImportInstanceVolumesImage - The image.
type ImportVolumeResultConversionTaskImportInstanceVolumesImage struct {
	Checksum          *string
	Format            *ImportVolumeResultConversionTaskImportInstanceVolumesImageFormatEnum
	ImportManifestURL *string
	Size              *int64
}

// ImportVolumeResultConversionTaskImportInstanceVolumesVolume - The volume.
type ImportVolumeResultConversionTaskImportInstanceVolumesVolume struct {
	ID   *string
	Size *int64
}

// ImportVolumeResultConversionTaskImportInstanceVolumes - Describes an import volume task.
type ImportVolumeResultConversionTaskImportInstanceVolumes struct {
	AvailabilityZone *string
	BytesConverted   *int64
	Description      *string
	Image            *ImportVolumeResultConversionTaskImportInstanceVolumesImage
	Status           *string
	StatusMessage    *string
	Volume           *ImportVolumeResultConversionTaskImportInstanceVolumesVolume
}

// ImportVolumeResultConversionTaskImportInstance - If the task is for importing an instance, this contains information about the import instance task.
type ImportVolumeResultConversionTaskImportInstance struct {
	Description *string
	InstanceID  *string
	Platform    *ImportVolumeResultConversionTaskImportInstancePlatformEnum
	Volumes     []ImportVolumeResultConversionTaskImportInstanceVolumes
}

// ImportVolumeResultConversionTaskImportVolumeImageFormatEnum - The disk image format.
type ImportVolumeResultConversionTaskImportVolumeImageFormatEnum string

const (
	ImportVolumeResultConversionTaskImportVolumeImageFormatEnumVmdk ImportVolumeResultConversionTaskImportVolumeImageFormatEnum = "VMDK"
	ImportVolumeResultConversionTaskImportVolumeImageFormatEnumRaw  ImportVolumeResultConversionTaskImportVolumeImageFormatEnum = "RAW"
	ImportVolumeResultConversionTaskImportVolumeImageFormatEnumVhd  ImportVolumeResultConversionTaskImportVolumeImageFormatEnum = "VHD"
)

func (e *ImportVolumeResultConversionTaskImportVolumeImageFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VMDK":
		fallthrough
	case "RAW":
		fallthrough
	case "VHD":
		*e = ImportVolumeResultConversionTaskImportVolumeImageFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportVolumeResultConversionTaskImportVolumeImageFormatEnum: %s", s)
	}
}

// ImportVolumeResultConversionTaskImportVolumeImage - The image.
type ImportVolumeResultConversionTaskImportVolumeImage struct {
	Checksum          *string
	Format            *ImportVolumeResultConversionTaskImportVolumeImageFormatEnum
	ImportManifestURL *string
	Size              *int64
}

// ImportVolumeResultConversionTaskImportVolumeVolume - The volume.
type ImportVolumeResultConversionTaskImportVolumeVolume struct {
	ID   *string
	Size *int64
}

// ImportVolumeResultConversionTaskImportVolume - If the task is for importing a volume, this contains information about the import volume task.
type ImportVolumeResultConversionTaskImportVolume struct {
	AvailabilityZone *string
	BytesConverted   *int64
	Description      *string
	Image            *ImportVolumeResultConversionTaskImportVolumeImage
	Volume           *ImportVolumeResultConversionTaskImportVolumeVolume
}

// ImportVolumeResultConversionTaskStateEnum - The state of the conversion task.
type ImportVolumeResultConversionTaskStateEnum string

const (
	ImportVolumeResultConversionTaskStateEnumActive     ImportVolumeResultConversionTaskStateEnum = "active"
	ImportVolumeResultConversionTaskStateEnumCancelling ImportVolumeResultConversionTaskStateEnum = "cancelling"
	ImportVolumeResultConversionTaskStateEnumCancelled  ImportVolumeResultConversionTaskStateEnum = "cancelled"
	ImportVolumeResultConversionTaskStateEnumCompleted  ImportVolumeResultConversionTaskStateEnum = "completed"
)

func (e *ImportVolumeResultConversionTaskStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "cancelling":
		fallthrough
	case "cancelled":
		fallthrough
	case "completed":
		*e = ImportVolumeResultConversionTaskStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportVolumeResultConversionTaskStateEnum: %s", s)
	}
}

// ImportVolumeResultConversionTaskTags - Describes a tag.
type ImportVolumeResultConversionTaskTags struct {
	Key   *string
	Value *string
}

// ImportVolumeResultConversionTask - Information about the conversion task.
type ImportVolumeResultConversionTask struct {
	ConversionTaskID *string
	ExpirationTime   *string
	ImportInstance   *ImportVolumeResultConversionTaskImportInstance
	ImportVolume     *ImportVolumeResultConversionTaskImportVolume
	State            *ImportVolumeResultConversionTaskStateEnum
	StatusMessage    *string
	Tags             []ImportVolumeResultConversionTaskTags
}

// ImportVolumeResult - Success
type ImportVolumeResult struct {
	ConversionTask *ImportVolumeResultConversionTask
}
