/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Adds a MigratingVm to a Group.
   */
  vmmigrationProjectsLocationsGroupsAddGroupMigration(
    req: operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest,
    security: operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{group}:addGroupMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addGroupMigrationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse =
        new operations.VmmigrationProjectsLocationsGroupsAddGroupMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Group in a given project and location.
   */
  vmmigrationProjectsLocationsGroupsCreate(
    req: operations.VmmigrationProjectsLocationsGroupsCreateRequest,
    security: operations.VmmigrationProjectsLocationsGroupsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsGroupsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsGroupsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/groups", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "groupInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsGroupsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsGroupsCreateResponse =
        new operations.VmmigrationProjectsLocationsGroupsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Groups in a given project and location.
   */
  vmmigrationProjectsLocationsGroupsList(
    req: operations.VmmigrationProjectsLocationsGroupsListRequest,
    security: operations.VmmigrationProjectsLocationsGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsGroupsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/groups", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VmmigrationProjectsLocationsGroupsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsGroupsListResponse =
        new operations.VmmigrationProjectsLocationsGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGroupsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGroupsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes a MigratingVm from a Group.
   */
  vmmigrationProjectsLocationsGroupsRemoveGroupMigration(
    req: operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest,
    security: operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{group}:removeGroupMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "removeGroupMigrationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse =
        new operations.VmmigrationProjectsLocationsGroupsRemoveGroupMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  vmmigrationProjectsLocationsList(
    req: operations.VmmigrationProjectsLocationsListRequest,
    security: operations.VmmigrationProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VmmigrationProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsListResponse =
        new operations.VmmigrationProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  vmmigrationProjectsLocationsOperationsList(
    req: operations.VmmigrationProjectsLocationsOperationsListRequest,
    security: operations.VmmigrationProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsOperationsListResponse =
        new operations.VmmigrationProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Source in a given project and location.
   */
  vmmigrationProjectsLocationsSourcesCreate(
    req: operations.VmmigrationProjectsLocationsSourcesCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsSourcesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/sources", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sourceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new DatacenterConnector in a given Source.
   */
  vmmigrationProjectsLocationsSourcesDatacenterConnectorsCreate(
    req: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/datacenterConnectors",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "datacenterConnectorInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists DatacenterConnectors in a given Source.
   */
  vmmigrationProjectsLocationsSourcesDatacenterConnectorsList(
    req: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/datacenterConnectors",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDatacenterConnectorsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDatacenterConnectorsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upgrades the appliance relate to this DatacenterConnector to the in-place updateable version.
   */
  vmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeAppliance(
    req: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest,
    security: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{datacenterConnector}:upgradeAppliance",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "upgradeApplianceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse =
        new operations.VmmigrationProjectsLocationsSourcesDatacenterConnectorsUpgradeApplianceResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in that source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.
   */
  vmmigrationProjectsLocationsSourcesFetchInventory(
    req: operations.VmmigrationProjectsLocationsSourcesFetchInventoryRequest,
    security: operations.VmmigrationProjectsLocationsSourcesFetchInventorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesFetchInventoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesFetchInventoryRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{source}:fetchInventory",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesFetchInventorySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesFetchInventoryResponse =
        new operations.VmmigrationProjectsLocationsSourcesFetchInventoryResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fetchInventoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.FetchInventoryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Sources in a given project and location.
   */
  vmmigrationProjectsLocationsSourcesList(
    req: operations.VmmigrationProjectsLocationsSourcesListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsSourcesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/sources", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.VmmigrationProjectsLocationsSourcesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesListResponse =
        new operations.VmmigrationProjectsLocationsSourcesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSourcesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSourcesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiates a Clone of a specific migrating VM.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreate(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/cloneJobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cloneJobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists CloneJobs of a given migrating VM.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsList(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/cloneJobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCloneJobsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCloneJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCloneJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new MigratingVm in a given Source.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCreate(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/migratingVms",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "migratingVmInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiates the cancellation of a running cutover job.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancel(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCancelResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreate(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/cutoverJobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cutoverJobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists CutoverJobs of a given migrating VM.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsList(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/cutoverJobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsCutoverJobsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCutoverJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCutoverJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigration(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{migratingVm}:finalizeMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsFinalizeMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists MigratingVms in a given Source.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsList(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/migratingVms",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsListResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMigratingVmsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMigratingVmsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Pauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsPauseMigration(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{migratingVm}:pauseMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsPauseMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ReplicationCycles in a given MigratingVM.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesList(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/replicationCycles",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsReplicationCyclesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReplicationCyclesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReplicationCyclesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Resumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will update the migration to active state and start the process of uploading data and creating snapshots.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsResumeMigration(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{migratingVm}:resumeMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsResumeMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy.
   */
  vmmigrationProjectsLocationsSourcesMigratingVmsStartMigration(
    req: operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest,
    security: operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{migratingVm}:startMigration",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse =
        new operations.VmmigrationProjectsLocationsSourcesMigratingVmsStartMigrationResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new UtilizationReport.
   */
  vmmigrationProjectsLocationsSourcesUtilizationReportsCreate(
    req: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest,
    security: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/utilizationReports",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "utilizationReportInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Utilization Reports of the given Source.
   */
  vmmigrationProjectsLocationsSourcesUtilizationReportsList(
    req: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest,
    security: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/utilizationReports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse =
        new operations.VmmigrationProjectsLocationsSourcesUtilizationReportsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listUtilizationReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListUtilizationReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
   */
  vmmigrationProjectsLocationsTargetProjectsCreate(
    req: operations.VmmigrationProjectsLocationsTargetProjectsCreateRequest,
    security: operations.VmmigrationProjectsLocationsTargetProjectsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsTargetProjectsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsTargetProjectsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/targetProjects",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetProjectInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsTargetProjectsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsTargetProjectsCreateResponse =
        new operations.VmmigrationProjectsLocationsTargetProjectsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
   */
  vmmigrationProjectsLocationsTargetProjectsDelete(
    req: operations.VmmigrationProjectsLocationsTargetProjectsDeleteRequest,
    security: operations.VmmigrationProjectsLocationsTargetProjectsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsTargetProjectsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsTargetProjectsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsTargetProjectsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsTargetProjectsDeleteResponse =
        new operations.VmmigrationProjectsLocationsTargetProjectsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
   */
  vmmigrationProjectsLocationsTargetProjectsGet(
    req: operations.VmmigrationProjectsLocationsTargetProjectsGetRequest,
    security: operations.VmmigrationProjectsLocationsTargetProjectsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsTargetProjectsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VmmigrationProjectsLocationsTargetProjectsGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsTargetProjectsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsTargetProjectsGetResponse =
        new operations.VmmigrationProjectsLocationsTargetProjectsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targetProject = utils.objectToClass(
              httpRes?.data,
              shared.TargetProject
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
   */
  vmmigrationProjectsLocationsTargetProjectsList(
    req: operations.VmmigrationProjectsLocationsTargetProjectsListRequest,
    security: operations.VmmigrationProjectsLocationsTargetProjectsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsTargetProjectsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsTargetProjectsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/targetProjects",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsTargetProjectsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsTargetProjectsListResponse =
        new operations.VmmigrationProjectsLocationsTargetProjectsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTargetProjectsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTargetProjectsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.
   */
  vmmigrationProjectsLocationsTargetProjectsPatch(
    req: operations.VmmigrationProjectsLocationsTargetProjectsPatchRequest,
    security: operations.VmmigrationProjectsLocationsTargetProjectsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.VmmigrationProjectsLocationsTargetProjectsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.VmmigrationProjectsLocationsTargetProjectsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetProjectInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.VmmigrationProjectsLocationsTargetProjectsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VmmigrationProjectsLocationsTargetProjectsPatchResponse =
        new operations.VmmigrationProjectsLocationsTargetProjectsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
