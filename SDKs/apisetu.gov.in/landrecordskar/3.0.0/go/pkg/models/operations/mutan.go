// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MutanSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MutanRequestBodyCertificateParameters struct {
	// Document Number
	DocumentNumber string `json:"DocumentNumber"`
}

// MutanRequestBodyFormatEnum - The format of the certificate in response.
type MutanRequestBodyFormatEnum string

const (
	MutanRequestBodyFormatEnumXML MutanRequestBodyFormatEnum = "xml"
	MutanRequestBodyFormatEnumPdf MutanRequestBodyFormatEnum = "pdf"
)

func (e *MutanRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "pdf":
		*e = MutanRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MutanRequestBodyFormatEnum: %s", s)
	}
}

// MutanRequestBody - Request format
type MutanRequestBody struct {
	CertificateParameters *MutanRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MutanRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mutan504ApplicationJSONErrorEnum string

const (
	Mutan504ApplicationJSONErrorEnumGatewayTimeout Mutan504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Mutan504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Mutan504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan504ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan504ApplicationJSONErrorDescriptionEnum string

const (
	Mutan504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mutan504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Mutan504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Mutan504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan504ApplicationJSON - Gateway timeout
type Mutan504ApplicationJSON struct {
	Error            *Mutan504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan503ApplicationJSONErrorEnum string

const (
	Mutan503ApplicationJSONErrorEnumServiceUnavailable Mutan503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Mutan503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Mutan503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan503ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan503ApplicationJSONErrorDescriptionEnum string

const (
	Mutan503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mutan503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Mutan503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Mutan503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan503ApplicationJSON - Service unavailable
type Mutan503ApplicationJSON struct {
	Error            *Mutan503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan502ApplicationJSONErrorEnum string

const (
	Mutan502ApplicationJSONErrorEnumBadGatewy Mutan502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Mutan502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Mutan502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan502ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan502ApplicationJSONErrorDescriptionEnum string

const (
	Mutan502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mutan502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Mutan502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Mutan502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan502ApplicationJSON - Bad gateway
type Mutan502ApplicationJSON struct {
	Error            *Mutan502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan500ApplicationJSONErrorEnum string

const (
	Mutan500ApplicationJSONErrorEnumInternalServerError Mutan500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Mutan500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Mutan500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan500ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan500ApplicationJSONErrorDescriptionEnum string

const (
	Mutan500ApplicationJSONErrorDescriptionEnumInternalServerError Mutan500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Mutan500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Mutan500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan500ApplicationJSON - Internal server error
type Mutan500ApplicationJSON struct {
	Error            *Mutan500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan404ApplicationJSONErrorEnum string

const (
	Mutan404ApplicationJSONErrorEnumRecordNotFound Mutan404ApplicationJSONErrorEnum = "record_not_found"
	Mutan404ApplicationJSONErrorEnumURLNotFound    Mutan404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Mutan404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mutan404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan404ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan404ApplicationJSONErrorDescriptionEnum string

const (
	Mutan404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mutan404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mutan404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mutan404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Mutan404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mutan404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan404ApplicationJSON - No record found
type Mutan404ApplicationJSON struct {
	Error            *Mutan404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan401ApplicationJSONErrorEnum string

const (
	Mutan401ApplicationJSONErrorEnumInvalidAuthentication Mutan401ApplicationJSONErrorEnum = "invalid_authentication"
	Mutan401ApplicationJSONErrorEnumInvalidAuthorization  Mutan401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Mutan401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mutan401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan401ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan401ApplicationJSONErrorDescriptionEnum string

const (
	Mutan401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mutan401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mutan401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mutan401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Mutan401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mutan401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan401ApplicationJSON - Unauthorized access
type Mutan401ApplicationJSON struct {
	Error            *Mutan401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mutan400ApplicationJSONErrorEnum string

const (
	Mutan400ApplicationJSONErrorEnumMissingParameter Mutan400ApplicationJSONErrorEnum = "missing_parameter"
	Mutan400ApplicationJSONErrorEnumInvalidParameter Mutan400ApplicationJSONErrorEnum = "invalid_parameter"
	Mutan400ApplicationJSONErrorEnumInvalidFormat    Mutan400ApplicationJSONErrorEnum = "invalid_format"
	Mutan400ApplicationJSONErrorEnumInvalidTxnid     Mutan400ApplicationJSONErrorEnum = "invalid_txnid"
	Mutan400ApplicationJSONErrorEnumInvalidConsentid Mutan400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Mutan400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mutan400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan400ApplicationJSONErrorEnum: %s", s)
	}
}

type Mutan400ApplicationJSONErrorDescriptionEnum string

const (
	Mutan400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mutan400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mutan400ApplicationJSONErrorDescriptionEnumBadRequest                              Mutan400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mutan400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mutan400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mutan400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mutan400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mutan400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mutan400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Mutan400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mutan400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mutan400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mutan400ApplicationJSON - Bad request
type Mutan400ApplicationJSON struct {
	Error            *Mutan400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mutan400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MutanResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mutan400ApplicationJSONObject *Mutan400ApplicationJSON
	// Unauthorized access
	Mutan401ApplicationJSONObject *Mutan401ApplicationJSON
	// No record found
	Mutan404ApplicationJSONObject *Mutan404ApplicationJSON
	// Internal server error
	Mutan500ApplicationJSONObject *Mutan500ApplicationJSON
	// Bad gateway
	Mutan502ApplicationJSONObject *Mutan502ApplicationJSON
	// Service unavailable
	Mutan503ApplicationJSONObject *Mutan503ApplicationJSON
	// Gateway timeout
	Mutan504ApplicationJSONObject *Mutan504ApplicationJSON
}
