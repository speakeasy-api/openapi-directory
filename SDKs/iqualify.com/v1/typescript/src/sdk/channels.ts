/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Channels {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove learners from a group channel
   *
   * @remarks
   * Removes a learner from the specified group channel.
   */
  deleteOfferingsOfferingIdChannelsChannelIdLearners(
    req: operations.DeleteOfferingsOfferingIdChannelsChannelIdLearnersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOfferingsOfferingIdChannelsChannelIdLearnersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels/{channelId}/learners",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse =
        new operations.DeleteOfferingsOfferingIdChannelsChannelIdLearnersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find comments
   *
   * @remarks
   * Responds with a list of comments made in any posts in a specified channel, within an offering.
   */
  getOfferingsOfferingIdAnalyticsChannelsChannelIdComments(
    req: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/channels/{channelId}/comments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdCommentsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.comments = utils.objectToClass(
              httpRes?.data,
              shared.Comment,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find posts
   *
   * @remarks
   * Responds with a list of posts made in a specified channel, within an offering.
   */
  getOfferingsOfferingIdAnalyticsChannelsChannelIdPosts(
    req: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/channels/{channelId}/posts",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdPostsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpPosts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.httpPosts = utils.objectToClass(
              httpRes?.data,
              shared.HttpPost,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find replies
   *
   * @remarks
   * Responds with a list of replies to comments in any posts in a specified channel, within an offering.
   */
  getOfferingsOfferingIdAnalyticsChannelsChannelIdReplies(
    req: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/channels/{channelId}/replies",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse =
        new operations.GetOfferingsOfferingIdAnalyticsChannelsChannelIdRepliesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.comments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.comments = utils.objectToClass(
              httpRes?.data,
              shared.Comment,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find channels
   *
   * @remarks
   * Responds with a list of channels in an offering.
   */
  getOfferingsOfferingIdChannels(
    req: operations.GetOfferingsOfferingIdChannelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdChannelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdChannelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdChannelsResponse =
        new operations.GetOfferingsOfferingIdChannelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channelResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.channelResponses = utils.objectToClass(
              httpRes?.data,
              shared.ChannelResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find learners in a group channel
   *
   * @remarks
   * Finds all learners in a specified group channel.
   */
  getOfferingsOfferingIdChannelsChannelIdLearners(
    req: operations.GetOfferingsOfferingIdChannelsChannelIdLearnersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdChannelsChannelIdLearnersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdChannelsChannelIdLearnersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels/{channelId}/learners",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdChannelsChannelIdLearnersResponse =
        new operations.GetOfferingsOfferingIdChannelsChannelIdLearnersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channelResponse = utils.objectToClass(
              httpRes?.data,
              shared.ChannelResponse
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update channel
   *
   * @remarks
   * Updates a channel in an offering.
   */
  patchOfferingsOfferingIdChannelsChannelId(
    req: operations.PatchOfferingsOfferingIdChannelsChannelIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchOfferingsOfferingIdChannelsChannelIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchOfferingsOfferingIdChannelsChannelIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels/{channelId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchOfferingsOfferingIdChannelsChannelIdResponse =
        new operations.PatchOfferingsOfferingIdChannelsChannelIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channelResponse = utils.objectToClass(
              httpRes?.data,
              shared.ChannelResponse
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add channel
   *
   * @remarks
   * Adds new channel to the specified offering.
   */
  postOfferingsOfferingIdChannels(
    req: operations.PostOfferingsOfferingIdChannelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOfferingsOfferingIdChannelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOfferingsOfferingIdChannelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "channelRequired",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOfferingsOfferingIdChannelsResponse =
        new operations.PostOfferingsOfferingIdChannelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.channelResponse = utils.objectToClass(
              httpRes?.data,
              shared.ChannelResponse
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add learners to a group channel
   *
   * @remarks
   * Adds a learner to a specified group channel.
   */
  postOfferingsOfferingIdChannelsChannelIdLearners(
    req: operations.PostOfferingsOfferingIdChannelsChannelIdLearnersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOfferingsOfferingIdChannelsChannelIdLearnersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostOfferingsOfferingIdChannelsChannelIdLearnersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/channels/{channelId}/learners",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOfferingsOfferingIdChannelsChannelIdLearnersResponse =
        new operations.PostOfferingsOfferingIdChannelsChannelIdLearnersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
