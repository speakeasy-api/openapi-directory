// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUploadSigningCertificateActionEnum
type GETUploadSigningCertificateActionEnum string

const (
	GETUploadSigningCertificateActionEnumUploadSigningCertificate GETUploadSigningCertificateActionEnum = "UploadSigningCertificate"
)

func (e *GETUploadSigningCertificateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UploadSigningCertificate":
		*e = GETUploadSigningCertificateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUploadSigningCertificateActionEnum: %s", s)
	}
}

// GETUploadSigningCertificateVersionEnum
type GETUploadSigningCertificateVersionEnum string

const (
	GETUploadSigningCertificateVersionEnumTwoThousandAndTen0508 GETUploadSigningCertificateVersionEnum = "2010-05-08"
)

func (e *GETUploadSigningCertificateVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = GETUploadSigningCertificateVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUploadSigningCertificateVersionEnum: %s", s)
	}
}

type GETUploadSigningCertificateRequest struct {
	Action GETUploadSigningCertificateActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
	CertificateBody string `queryParam:"style=form,explode=true,name=CertificateBody"`
	// <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          *string                                `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETUploadSigningCertificateVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUploadSigningCertificateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
