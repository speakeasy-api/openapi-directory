"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesDestinationPortRange:
    r"""The destination port range assigned to the Traffic Mirror rule."""
    
    from_port: Optional[int] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    
class CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesRuleActionEnum(str, Enum):
    r"""The action assigned to the Traffic Mirror rule."""
    ACCEPT = 'accept'
    REJECT = 'reject'


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesSourcePortRange:
    r"""The source port range assigned to the Traffic Mirror rule."""
    
    from_port: Optional[int] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    
class CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesTrafficDirectionEnum(str, Enum):
    r"""The traffic direction assigned to the Traffic Mirror rule."""
    INGRESS = 'ingress'
    EGRESS = 'egress'


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRules:
    r"""Describes the Traffic Mirror rule."""
    
    description: Optional[str] = dataclasses.field(default=None)  
    destination_cidr_block: Optional[str] = dataclasses.field(default=None)  
    destination_port_range: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesDestinationPortRange] = dataclasses.field(default=None)  
    protocol: Optional[int] = dataclasses.field(default=None)  
    rule_action: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesRuleActionEnum] = dataclasses.field(default=None)  
    rule_number: Optional[int] = dataclasses.field(default=None)  
    source_cidr_block: Optional[str] = dataclasses.field(default=None)  
    source_port_range: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesSourcePortRange] = dataclasses.field(default=None)  
    traffic_direction: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRulesTrafficDirectionEnum] = dataclasses.field(default=None)  
    traffic_mirror_filter_id: Optional[str] = dataclasses.field(default=None)  
    traffic_mirror_filter_rule_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesDestinationPortRange:
    r"""The destination port range assigned to the Traffic Mirror rule."""
    
    from_port: Optional[int] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    
class CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesRuleActionEnum(str, Enum):
    r"""The action assigned to the Traffic Mirror rule."""
    ACCEPT = 'accept'
    REJECT = 'reject'


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesSourcePortRange:
    r"""The source port range assigned to the Traffic Mirror rule."""
    
    from_port: Optional[int] = dataclasses.field(default=None)  
    to_port: Optional[int] = dataclasses.field(default=None)  
    
class CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesTrafficDirectionEnum(str, Enum):
    r"""The traffic direction assigned to the Traffic Mirror rule."""
    INGRESS = 'ingress'
    EGRESS = 'egress'


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRules:
    r"""Describes the Traffic Mirror rule."""
    
    description: Optional[str] = dataclasses.field(default=None)  
    destination_cidr_block: Optional[str] = dataclasses.field(default=None)  
    destination_port_range: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesDestinationPortRange] = dataclasses.field(default=None)  
    protocol: Optional[int] = dataclasses.field(default=None)  
    rule_action: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesRuleActionEnum] = dataclasses.field(default=None)  
    rule_number: Optional[int] = dataclasses.field(default=None)  
    source_cidr_block: Optional[str] = dataclasses.field(default=None)  
    source_port_range: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesSourcePortRange] = dataclasses.field(default=None)  
    traffic_direction: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRulesTrafficDirectionEnum] = dataclasses.field(default=None)  
    traffic_mirror_filter_id: Optional[str] = dataclasses.field(default=None)  
    traffic_mirror_filter_rule_id: Optional[str] = dataclasses.field(default=None)  
    
class CreateTrafficMirrorFilterResultTrafficMirrorFilterNetworkServicesEnum(str, Enum):
    AMAZON_DNS = 'amazon-dns'


@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilterTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateTrafficMirrorFilterResultTrafficMirrorFilter:
    r"""Information about the Traffic Mirror filter."""
    
    description: Optional[str] = dataclasses.field(default=None)  
    egress_filter_rules: Optional[list[CreateTrafficMirrorFilterResultTrafficMirrorFilterEgressFilterRules]] = dataclasses.field(default=None)  
    ingress_filter_rules: Optional[list[CreateTrafficMirrorFilterResultTrafficMirrorFilterIngressFilterRules]] = dataclasses.field(default=None)  
    network_services: Optional[list[CreateTrafficMirrorFilterResultTrafficMirrorFilterNetworkServicesEnum]] = dataclasses.field(default=None)  
    tags: Optional[list[CreateTrafficMirrorFilterResultTrafficMirrorFilterTags]] = dataclasses.field(default=None)  
    traffic_mirror_filter_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateTrafficMirrorFilterResult:
    r"""Success"""
    
    client_token: Optional[str] = dataclasses.field(default=None)  
    traffic_mirror_filter: Optional[CreateTrafficMirrorFilterResultTrafficMirrorFilter] = dataclasses.field(default=None)  
    