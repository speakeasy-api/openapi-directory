// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteAcceleratorXAmzTargetEnum
type DeleteAcceleratorXAmzTargetEnum string

const (
	DeleteAcceleratorXAmzTargetEnumGlobalAcceleratorV20180706DeleteAccelerator DeleteAcceleratorXAmzTargetEnum = "GlobalAccelerator_V20180706.DeleteAccelerator"
)

func (e *DeleteAcceleratorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.DeleteAccelerator":
		*e = DeleteAcceleratorXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteAcceleratorXAmzTargetEnum: %s", s)
	}
}

type DeleteAcceleratorHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteAcceleratorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteAcceleratorRequest struct {
	Headers DeleteAcceleratorHeaders
	Request shared.DeleteAcceleratorRequest `request:"mediaType=application/json"`
}

type DeleteAcceleratorResponse struct {
	// AcceleratorNotDisabledException
	AcceleratorNotDisabledException interface{}
	// AcceleratorNotFoundException
	AcceleratorNotFoundException interface{}
	// AssociatedListenerFoundException
	AssociatedListenerFoundException interface{}
	ContentType                      string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	StatusCode               int
	RawResponse              *http.Response
}
