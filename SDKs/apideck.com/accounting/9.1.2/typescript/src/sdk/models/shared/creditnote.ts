/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CurrencyEnum } from "./currencyenum";
import { InvoiceLineItem, InvoiceLineItemInput } from "./invoicelineitem";
import { LinkedCustomer, LinkedCustomerInput } from "./linkedcustomer";
import {
  LinkedLedgerAccount,
  LinkedLedgerAccountInput,
} from "./linkedledgeraccount";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of entity this payment should be attributed to.
 */
export enum CreditNoteAllocationsAllocationTypeEnum {
  Invoice = "invoice",
  Order = "order",
  Expense = "expense",
  CreditMemo = "credit_memo",
  OverPayment = "over_payment",
  PrePayment = "pre_payment",
}

export class CreditNoteAllocationsInput extends SpeakeasyBase {
  /**
   * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * Unique identifier of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreditNoteAllocationsAllocationTypeEnum;
}

/**
 * Status of credit notes
 */
export enum CreditNoteCreditNoteStatusEnum {
  Draft = "draft",
  Authorised = "authorised",
  Paid = "paid",
  Voided = "voided",
  Deleted = "deleted",
}

/**
 * Type of payment
 */
export enum CreditNoteCreditNoteTypeEnum {
  AccountsReceivableCredit = "accounts_receivable_credit",
  AccountsPayableCredit = "accounts_payable_credit",
}

export class CreditNoteInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => LinkedLedgerAccountInput)
  account?: LinkedLedgerAccountInput;

  @SpeakeasyMetadata({ elemType: CreditNoteAllocationsInput })
  @Expose({ name: "allocations" })
  @Type(() => CreditNoteAllocationsInput)
  allocations?: CreditNoteAllocationsInput[];

  /**
   * The balance reflecting any payments made against the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance?: number;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * Currency Exchange Rate at the time entity was recorded/generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency_rate" })
  currencyRate?: number;

  /**
   * The customer this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer" })
  @Type(() => LinkedCustomerInput)
  customer?: LinkedCustomerInput;

  /**
   * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_issued" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateIssued?: Date;

  /**
   * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_paid" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  datePaid?: Date;

  @SpeakeasyMetadata({ elemType: InvoiceLineItemInput })
  @Expose({ name: "line_items" })
  @Type(() => InvoiceLineItemInput)
  lineItems?: InvoiceLineItemInput[];

  /**
   * Optional note to be associated with the credit note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * Credit note number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  /**
   * Optional reference message ie: Debit remittance detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * Indicates the total credit amount still available to apply towards the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remaining_credit" })
  remainingCredit?: number;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * Status of credit notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreditNoteCreditNoteStatusEnum;

  /**
   * Sub-total amount, normally before tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sub_total" })
  subTotal?: number;

  /**
   * Applicable tax id/code override if tax is not supplied on a line item basis.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_code" })
  taxCode?: string;

  /**
   * Amounts are including tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_inclusive" })
  taxInclusive?: boolean;

  /**
   * Optional terms to be associated with the credit note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "terms" })
  terms?: string;

  /**
   * Amount of transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_amount" })
  totalAmount: number;

  /**
   * Total tax amount applied to this invoice.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tax" })
  totalTax?: number;

  /**
   * Type of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreditNoteCreditNoteTypeEnum;
}

export class CreditNoteAllocations extends SpeakeasyBase {
  /**
   * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Unique identifier of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreditNoteAllocationsAllocationTypeEnum;
}

export class CreditNote extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => LinkedLedgerAccount)
  account?: LinkedLedgerAccount;

  @SpeakeasyMetadata({ elemType: CreditNoteAllocations })
  @Expose({ name: "allocations" })
  @Type(() => CreditNoteAllocations)
  allocations?: CreditNoteAllocations[];

  /**
   * The balance reflecting any payments made against the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance?: number;

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * Currency Exchange Rate at the time entity was recorded/generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency_rate" })
  currencyRate?: number;

  /**
   * The customer this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer" })
  @Type(() => LinkedCustomer)
  customer?: LinkedCustomer;

  /**
   * Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_issued" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateIssued?: Date;

  /**
   * Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_paid" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  datePaid?: Date;

  /**
   * Unique identifier representing the entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata({ elemType: InvoiceLineItem })
  @Expose({ name: "line_items" })
  @Type(() => InvoiceLineItem)
  lineItems?: InvoiceLineItem[];

  /**
   * Optional note to be associated with the credit note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * Credit note number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: string;

  /**
   * Optional reference message ie: Debit remittance detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * Indicates the total credit amount still available to apply towards the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remaining_credit" })
  remainingCredit?: number;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * Status of credit notes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CreditNoteCreditNoteStatusEnum;

  /**
   * Sub-total amount, normally before tax.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sub_total" })
  subTotal?: number;

  /**
   * Applicable tax id/code override if tax is not supplied on a line item basis.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_code" })
  taxCode?: string;

  /**
   * Amounts are including tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tax_inclusive" })
  taxInclusive?: boolean;

  /**
   * Optional terms to be associated with the credit note.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "terms" })
  terms?: string;

  /**
   * Amount of transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_amount" })
  totalAmount: number;

  /**
   * Total tax amount applied to this invoice.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tax" })
  totalTax?: number;

  /**
   * Type of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreditNoteCreditNoteTypeEnum;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;
}
