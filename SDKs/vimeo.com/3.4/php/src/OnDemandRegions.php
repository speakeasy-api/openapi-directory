<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OnDemandRegions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a specific region to an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVodRegionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVodRegionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVodRegionResponse
     */
	public function addVodRegion(
        \OpenAPI\OpenAPI\Models\Operations\AddVodRegionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVodRegionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVodRegionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions/{country}', \OpenAPI\OpenAPI\Models\Operations\AddVodRegionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVodRegionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandRegion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a specific region from an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionResponse
     */
	public function deleteVodRegion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions/{country}', \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a list of regions from an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsResponse
     */
	public function deleteVodRegions(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions', \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVodRegionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandRegion>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific On Demand region
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegionResponse
     */
	public function getRegion(
        \OpenAPI\OpenAPI\Models\Operations\GetRegionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/regions/{country}', \OpenAPI\OpenAPI\Models\Operations\GetRegionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandRegion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the On Demand regions
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegionsResponse
     */
	public function getRegions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/regions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandRegion>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific region of an On Demand page
     * 
     * Checks whether an On Demand page belongs to a region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodRegionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodRegionResponse
     */
	public function getVodRegion(
        \OpenAPI\OpenAPI\Models\Operations\GetVodRegionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodRegionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions/{country}', \OpenAPI\OpenAPI\Models\Operations\GetVodRegionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodRegionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandRegion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the regions of an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsResponse
     */
	public function getVodRegions(
        \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions', \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodRegionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnDemandRegion>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a list of regions to an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsResponse
     */
	public function setVodRegions(
        \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/regions', \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetVodRegionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandRegion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandRegion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.region+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}