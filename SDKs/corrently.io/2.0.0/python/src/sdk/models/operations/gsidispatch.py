"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dispatchlocation as shared_dispatchlocation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GsiDispatchRequest:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""Any valid Stromkonto account (address)."""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zipcode (Postleitzahl) of a city in Germany."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiDispatch200ApplicationJSONTimeframe:
    r"""Evaluated timeframe for this request"""
    
    end: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end'), 'exclude': lambda f: f is None }})
    r"""Ending time of window evaluated for this request/dispatches."""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    r"""Starting time of window evaluated in order to get dispatches"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GsiDispatch200ApplicationJSON:
    r"""Success"""
    
    avg_distance_km: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_distance_km'), 'exclude': lambda f: f is None }})
    r"""Averaged geospatial distance in kilometers between energy generation and usage at requested location."""  
    dispatch_from: Optional[list[shared_dispatchlocation.DispatchLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispatch_from'), 'exclude': lambda f: f is None }})
    r"""List of current sources of green energy (into requested location)"""  
    dispatch_target: Optional[list[shared_dispatchlocation.DispatchLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispatch_target'), 'exclude': lambda f: f is None }})
    r"""List of current targets of green energy (out of requested location)"""  
    postmix: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postmix'), 'exclude': lambda f: f is None }})
    r"""Green Energy Mix after dispatch of given city"""  
    premix: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('premix'), 'exclude': lambda f: f is None }})
    r"""Green Energy Mix prior to dispatch of given city"""  
    timeframe: Optional[GsiDispatch200ApplicationJSONTimeframe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeframe'), 'exclude': lambda f: f is None }})
    r"""Evaluated timeframe for this request"""  
    

@dataclasses.dataclass
class GsiDispatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    gsi_dispatch_200_application_json_object: Optional[GsiDispatch200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    