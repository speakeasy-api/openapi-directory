// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartReplicationTaskAssessmentRunXAmzTargetEnum
type StartReplicationTaskAssessmentRunXAmzTargetEnum string

const (
	StartReplicationTaskAssessmentRunXAmzTargetEnumAmazonDmSv20160101StartReplicationTaskAssessmentRun StartReplicationTaskAssessmentRunXAmzTargetEnum = "AmazonDMSv20160101.StartReplicationTaskAssessmentRun"
)

func (e *StartReplicationTaskAssessmentRunXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDMSv20160101.StartReplicationTaskAssessmentRun":
		*e = StartReplicationTaskAssessmentRunXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartReplicationTaskAssessmentRunXAmzTargetEnum: %s", s)
	}
}

type StartReplicationTaskAssessmentRunHeaders struct {
	XAmzAlgorithm     *string                                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartReplicationTaskAssessmentRunXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartReplicationTaskAssessmentRunRequest struct {
	Headers StartReplicationTaskAssessmentRunHeaders
	Request shared.StartReplicationTaskAssessmentRunMessage `request:"mediaType=application/json"`
}

type StartReplicationTaskAssessmentRunResponse struct {
	// AccessDeniedFault
	AccessDeniedFault interface{}
	ContentType       string
	// InvalidResourceStateFault
	InvalidResourceStateFault interface{}
	// KMSAccessDeniedFault
	KMSAccessDeniedFault interface{}
	// KMSDisabledFault
	KMSDisabledFault interface{}
	// KMSFault
	KMSFault interface{}
	// KMSInvalidStateFault
	KMSInvalidStateFault interface{}
	// KMSKeyNotAccessibleFault
	KMSKeyNotAccessibleFault interface{}
	// KMSNotFoundFault
	KMSNotFoundFault interface{}
	// ResourceAlreadyExistsFault
	ResourceAlreadyExistsFault interface{}
	// ResourceNotFoundFault
	ResourceNotFoundFault interface{}
	// S3AccessDeniedFault
	S3AccessDeniedFault interface{}
	// S3ResourceNotFoundFault
	S3ResourceNotFoundFault interface{}
	// Success
	StartReplicationTaskAssessmentRunResponse *shared.StartReplicationTaskAssessmentRunResponse
	StatusCode                                int
	RawResponse                               *http.Response
}
