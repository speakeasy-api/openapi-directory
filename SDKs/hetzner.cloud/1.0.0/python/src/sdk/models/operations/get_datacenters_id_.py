"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDatacentersIDRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of Datacenter"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDatacentersID200ApplicationJSONDatacenterLocation:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDatacentersID200ApplicationJSONDatacenterServerTypes:
    r"""The Server types the Datacenter can handle"""
    
    available: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    available_for_migration: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_for_migration') }})
    r"""IDs of Server types that are supported and for which the Datacenter has enough resources left"""  
    supported: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supported') }})
    r"""IDs of Server types that are supported in the Datacenter"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDatacentersID200ApplicationJSONDatacenter:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Datacenter"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    location: GetDatacentersID200ApplicationJSONDatacenterLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Datacenter"""  
    server_types: GetDatacentersID200ApplicationJSONDatacenterServerTypes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server_types') }})
    r"""The Server types the Datacenter can handle"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDatacentersID200ApplicationJSON:
    r"""The `datacenter` key in the reply contains a Datacenter object with this structure"""
    
    datacenter: GetDatacentersID200ApplicationJSONDatacenter = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenter') }})  
    

@dataclasses.dataclass
class GetDatacentersIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_datacenters_id_200_application_json_object: Optional[GetDatacentersID200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `datacenter` key in the reply contains a Datacenter object with this structure"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    