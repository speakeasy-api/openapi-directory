/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
 */
export enum CodespacesSetCodespacesBillingRequestBodyVisibilityEnum {
  Disabled = "disabled",
  SelectedMembers = "selected_members",
  AllMembers = "all_members",
  AllMembersAndOutsideCollaborators = "all_members_and_outside_collaborators",
}

export class CodespacesSetCodespacesBillingRequestBody extends SpeakeasyBase {
  /**
   * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selected_usernames" })
  selectedUsernames?: string[];

  /**
   * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility: CodespacesSetCodespacesBillingRequestBodyVisibilityEnum;
}

export class CodespacesSetCodespacesBillingRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CodespacesSetCodespacesBillingRequestBody;

  /**
   * The organization name. The name is not case sensitive.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=org" })
  org: string;
}

export class CodespacesSetCodespacesBillingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
