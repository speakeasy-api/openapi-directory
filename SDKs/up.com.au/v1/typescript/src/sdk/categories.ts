/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Categories enable understanding where your money goes by driving
 *
 * @remarks
 * powerful insights in Up. All categories in Up are pre-defined
 * and are automatically assigned to new purchases in most cases. A
 * parent-child relationship is used to represent categories,
 * however parent categories cannot be directly assigned to
 * transactions.
 *
 */
export class Categories {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List categories
   *
   * @remarks
   * Retrieve a list of all categories and their ancestry. The returned list
   * is not paginated.
   *
   */
  getCategories(
    req: operations.GetCategoriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCategoriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCategoriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/categories";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCategoriesResponse =
        new operations.GetCategoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCategoriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCategoriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve category
   *
   * @remarks
   * Retrieve a specific category by providing its unique identifier.
   *
   */
  getCategoriesId(
    req: operations.GetCategoriesIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCategoriesIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCategoriesIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/categories/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCategoriesIdResponse =
        new operations.GetCategoriesIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCategoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetCategoryResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Categorize transaction
   *
   * @remarks
   * Updates the category associated with a transaction. Only transactions
   * for which `isCategorizable` is set to true support this operation. The
   * `id` is taken from the list exposed on `/categories` and cannot be one of
   * the top-level (parent) categories. To de-categorize a transaction, set
   * the entire `data` key to `null`. An HTTP `204` is returned on success.
   * The associated category, along with its request URL is also exposed via
   * the `category` relationship on the transaction resource returned from
   * `/transactions/{id}`.
   *
   */
  patchTransactionsTransactionIdRelationshipsCategory(
    req: operations.PatchTransactionsTransactionIdRelationshipsCategoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTransactionsTransactionIdRelationshipsCategoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchTransactionsTransactionIdRelationshipsCategoryRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/transactions/{transactionId}/relationships/category",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTransactionCategoryRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTransactionsTransactionIdRelationshipsCategoryResponse =
        new operations.PatchTransactionsTransactionIdRelationshipsCategoryResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
