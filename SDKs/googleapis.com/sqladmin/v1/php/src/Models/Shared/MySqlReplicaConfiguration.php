<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MySqlReplicaConfiguration - Read-replica configuration specific to MySQL databases.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MySqlReplicaConfiguration
{
    /**
     * PEM representation of the trusted CA's x509 certificate.
     * 
     * @var ?string $caCertificate
     */
	#[\JMS\Serializer\Annotation\SerializedName('caCertificate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $caCertificate = null;
    
    /**
     * PEM representation of the replica's x509 certificate.
     * 
     * @var ?string $clientCertificate
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientCertificate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientCertificate = null;
    
    /**
     * PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
     * 
     * @var ?string $clientKey
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientKey')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientKey = null;
    
    /**
     * Seconds to wait between connect retries. MySQL's default is 60 seconds.
     * 
     * @var ?int $connectRetryInterval
     */
	#[\JMS\Serializer\Annotation\SerializedName('connectRetryInterval')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $connectRetryInterval = null;
    
    /**
     * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
     * 
     * @var ?string $dumpFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('dumpFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dumpFilePath = null;
    
    /**
     * This is always `sql#mysqlReplicaConfiguration`.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * Interval in milliseconds between replication heartbeats.
     * 
     * @var ?string $masterHeartbeatPeriod
     */
	#[\JMS\Serializer\Annotation\SerializedName('masterHeartbeatPeriod')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $masterHeartbeatPeriod = null;
    
    /**
     * The password for the replication connection.
     * 
     * @var ?string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $password = null;
    
    /**
     * A list of permissible ciphers to use for SSL encryption.
     * 
     * @var ?string $sslCipher
     */
	#[\JMS\Serializer\Annotation\SerializedName('sslCipher')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sslCipher = null;
    
    /**
     * The username for the replication connection.
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
    /**
     * Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
     * 
     * @var ?bool $verifyServerCertificate
     */
	#[\JMS\Serializer\Annotation\SerializedName('verifyServerCertificate')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $verifyServerCertificate = null;
    
	public function __construct()
	{
		$this->caCertificate = null;
		$this->clientCertificate = null;
		$this->clientKey = null;
		$this->connectRetryInterval = null;
		$this->dumpFilePath = null;
		$this->kind = null;
		$this->masterHeartbeatPeriod = null;
		$this->password = null;
		$this->sslCipher = null;
		$this->username = null;
		$this->verifyServerCertificate = null;
	}
}
