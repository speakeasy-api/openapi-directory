// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody struct {
	// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`
	// ID of the key you used to encrypt the secret.
	KeyID string `json:"key_id"`
	// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
	SelectedRepositoryIds []interface{} `json:"selected_repository_ids,omitempty"`
}

type CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest struct {
	RequestBody CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody `request:"mediaType=application/json"`
	// The name of the secret.
	SecretName string `pathParam:"style=simple,explode=false,name=secret_name"`
}

type CodespacesCreateOrUpdateSecretForAuthenticatedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response after successfully creating a secret
	EmptyObject map[string]interface{}
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
