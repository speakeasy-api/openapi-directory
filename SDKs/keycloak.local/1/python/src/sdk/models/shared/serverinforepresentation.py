"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import memoryinforepresentation as shared_memoryinforepresentation
from ..shared import passwordpolicytyperepresentation as shared_passwordpolicytyperepresentation
from ..shared import profileinforepresentation as shared_profileinforepresentation
from ..shared import systeminforepresentation as shared_systeminforepresentation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerInfoRepresentation:
    r"""success"""
    
    builtin_protocol_mappers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('builtinProtocolMappers'), 'exclude': lambda f: f is None }})  
    client_importers: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientImporters'), 'exclude': lambda f: f is None }})  
    client_installations: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientInstallations'), 'exclude': lambda f: f is None }})  
    component_types: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('componentTypes'), 'exclude': lambda f: f is None }})  
    enums: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enums'), 'exclude': lambda f: f is None }})  
    identity_providers: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviders'), 'exclude': lambda f: f is None }})  
    memory_info: Optional[shared_memoryinforepresentation.MemoryInfoRepresentation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryInfo'), 'exclude': lambda f: f is None }})  
    password_policies: Optional[list[shared_passwordpolicytyperepresentation.PasswordPolicyTypeRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordPolicies'), 'exclude': lambda f: f is None }})  
    profile_info: Optional[shared_profileinforepresentation.ProfileInfoRepresentation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileInfo'), 'exclude': lambda f: f is None }})  
    protocol_mapper_types: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocolMapperTypes'), 'exclude': lambda f: f is None }})  
    providers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providers'), 'exclude': lambda f: f is None }})  
    social_providers: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('socialProviders'), 'exclude': lambda f: f is None }})  
    system_info: Optional[shared_systeminforepresentation.SystemInfoRepresentation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemInfo'), 'exclude': lambda f: f is None }})  
    themes: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themes'), 'exclude': lambda f: f is None }})  
    