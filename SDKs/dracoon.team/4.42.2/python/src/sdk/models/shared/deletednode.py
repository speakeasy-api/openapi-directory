"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import userinfo as shared_userinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DeletedNodeClassificationEnum(str, Enum):
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    (default: classification from parent room)
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class DeletedNodeTypeEnum(str, Enum):
    r"""Node type"""
    FOLDER = 'folder'
    FILE = 'file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeletedNode:
    r"""Deleted node information (Deleted node can be a folder or file)"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Node name"""  
    parent_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentId') }})
    r"""Parent node ID (room or folder)"""  
    parent_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentPath') }})
    r"""Parent node path
    
    `/` if node is a root node (room)
    """  
    type: DeletedNodeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Node type"""  
    accessed_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last access date"""  
    classification: Optional[DeletedNodeClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    (default: classification from parent room)
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Creation date"""  
    created_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    deleted_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Deletion date"""  
    deleted_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Node ID"""  
    is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes"""  
    reference_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.37.0
    
    Reference ID. Identical across all versions of a file
    """  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""Node size in byte"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Modification date"""  
    updated_by: Optional[shared_userinfo.UserInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})
    r"""User information"""  
    