// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CompatibilityEnum string

const (
	CompatibilityEnumNone        CompatibilityEnum = "NONE"
	CompatibilityEnumDisabled    CompatibilityEnum = "DISABLED"
	CompatibilityEnumBackward    CompatibilityEnum = "BACKWARD"
	CompatibilityEnumBackwardAll CompatibilityEnum = "BACKWARD_ALL"
	CompatibilityEnumForward     CompatibilityEnum = "FORWARD"
	CompatibilityEnumForwardAll  CompatibilityEnum = "FORWARD_ALL"
	CompatibilityEnumFull        CompatibilityEnum = "FULL"
	CompatibilityEnumFullAll     CompatibilityEnum = "FULL_ALL"
)

func (e CompatibilityEnum) ToPointer() *CompatibilityEnum {
	return &e
}

func (e *CompatibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "DISABLED":
		fallthrough
	case "BACKWARD":
		fallthrough
	case "BACKWARD_ALL":
		fallthrough
	case "FORWARD":
		fallthrough
	case "FORWARD_ALL":
		fallthrough
	case "FULL":
		fallthrough
	case "FULL_ALL":
		*e = CompatibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompatibilityEnum: %v", v)
	}
}
