<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://content.twilio.com',
	];
	
	public const DELETE_CONTENT_SERVERS = [
		'https://content.twilio.com',
	];
	
	public const FETCH_APPROVAL_FETCH_SERVERS = [
		'https://content.twilio.com',
	];
	
	public const FETCH_CONTENT_SERVERS = [
		'https://content.twilio.com',
	];
	
	public const LIST_CONTENT_SERVERS = [
		'https://content.twilio.com',
	];
	
	public const LIST_CONTENT_AND_APPROVALS_SERVERS = [
		'https://content.twilio.com',
	];
	
	public const LIST_LEGACY_CONTENT_SERVERS = [
		'https://content.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Deletes a Content resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteContentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteContentResponse
     */
	public function deleteContent(
        \OpenAPI\OpenAPI\Models\Operations\DeleteContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteContentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteContentResponse
    {
        $baseUrl = SDK::DELETE_CONTENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Content/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch a Content resource's approval status by its unique Content Sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchResponse
     */
	public function fetchApprovalFetch(
        \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchResponse
    {
        $baseUrl = SDK::FETCH_APPROVAL_FETCH_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Content/{Sid}/ApprovalRequests', \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchApprovalFetchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contentV1ContentApprovalFetch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContentV1ContentApprovalFetch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Content resource by its unique Content Sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchContentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchContentResponse
     */
	public function fetchContent(
        \OpenAPI\OpenAPI\Models\Operations\FetchContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchContentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchContentResponse
    {
        $baseUrl = SDK::FETCH_CONTENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Content/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contentV1Content = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContentV1Content', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Contents belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListContentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListContentResponse
     */
	public function listContent(
        \OpenAPI\OpenAPI\Models\Operations\ListContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListContentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListContentResponse
    {
        $baseUrl = SDK::LIST_CONTENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Content');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListContentListContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Contents with approval statuses belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsResponse
     */
	public function listContentAndApprovals(
        \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsResponse
    {
        $baseUrl = SDK::LIST_CONTENT_AND_APPROVALS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ContentAndApprovals');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listContentAndApprovalsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListContentAndApprovalsListContentAndApprovalsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Legacy Contents belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentResponse
     */
	public function listLegacyContent(
        \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentResponse
    {
        $baseUrl = SDK::LIST_LEGACY_CONTENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/LegacyContent');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLegacyContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLegacyContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLegacyContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListLegacyContentListLegacyContentResponse', 'json');
            }
        }

        return $response;
    }
}