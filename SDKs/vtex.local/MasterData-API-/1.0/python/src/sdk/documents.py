"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Documents:
    r"""The APIs within this group are used to save documents and query them by id.
    
    If the document has the id attribute or has fields that have been set to indexes with unique values, VTEX Master Data will attempt to identify the document. If the document is found a change will be made. If it is not found, an inclusion will be made. ** This scenario does not apply to the API with the POST verb**.
    
    Another important note: The id field will only be considered on the **POST** verb if the ID type entered in the Data Entity is the option:
    
    ```
    A chave primária será informada pelo cliente através do atributo 'id'
    ```
    
    Otherwise, a new document will always be created.
    
    ### Response status code
    
    1. Status Code 201: Document created successfully
    2. Status Code 200: Document changed successfully
    3. Status Code 304: There were no changes to the document
    4. Status Code 400: Invalid information in JSON
    5. Status Code 403: Unauthorized access
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def createnewdocument(self, request: operations.CreatenewdocumentRequest) -> operations.CreatenewdocumentResponse:
        r"""Create new document
        Creates documents through a JSON object where the key is the name of the field.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatenewdocumentRequest, base_url, '/api/dataentities/{acronym}/documents', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatenewdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Createnewdocument])
                res.createnewdocument = out

        return res

    def createorupdateentiredocument(self, request: operations.CreateorupdateentiredocumentRequest) -> operations.CreateorupdateentiredocumentResponse:
        r"""Create or update entire document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateorupdateentiredocumentRequest, base_url, '/api/dataentities/{acronym}/documents', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateorupdateentiredocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def createorupdatepartialdocument(self, request: operations.CreateorupdatepartialdocumentRequest) -> operations.CreateorupdatepartialdocumentResponse:
        r"""Create or update partial document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateorupdatepartialdocumentRequest, base_url, '/api/dataentities/{acronym}/documents', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateorupdatepartialdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def deletedocument(self, request: operations.DeletedocumentRequest) -> operations.DeletedocumentResponse:
        r"""Delete document
        It allows to delete a document.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletedocumentRequest, base_url, '/api/dataentities/{acronym}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletedocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getdocument(self, request: operations.GetdocumentRequest) -> operations.GetdocumentResponse:
        r"""Get document
        Retrieves a document.
        
        Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetdocumentRequest, base_url, '/api/dataentities/{acronym}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Usingfilters])
                res.usingfilters = out

        return res

    def updateentiredocument(self, request: operations.UpdateentiredocumentRequest) -> operations.UpdateentiredocumentResponse:
        r"""Update entire document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateentiredocumentRequest, base_url, '/api/dataentities/{acronym}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateentiredocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def updatepartialdocument(self, request: operations.UpdatepartialdocumentRequest) -> operations.UpdatepartialdocumentResponse:
        r"""Update partial document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatepartialdocumentRequest, base_url, '/api/dataentities/{acronym}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatepartialdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    