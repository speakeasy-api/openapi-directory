// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UnitEnum string

const (
	UnitEnumSeconds         UnitEnum = "Seconds"
	UnitEnumMicroseconds    UnitEnum = "Microseconds"
	UnitEnumMilliseconds    UnitEnum = "Milliseconds"
	UnitEnumBytes           UnitEnum = "Bytes"
	UnitEnumKilobytes       UnitEnum = "Kilobytes"
	UnitEnumMegabytes       UnitEnum = "Megabytes"
	UnitEnumGigabytes       UnitEnum = "Gigabytes"
	UnitEnumTerabytes       UnitEnum = "Terabytes"
	UnitEnumBits            UnitEnum = "Bits"
	UnitEnumKilobits        UnitEnum = "Kilobits"
	UnitEnumMegabits        UnitEnum = "Megabits"
	UnitEnumGigabits        UnitEnum = "Gigabits"
	UnitEnumTerabits        UnitEnum = "Terabits"
	UnitEnumPercent         UnitEnum = "Percent"
	UnitEnumCount           UnitEnum = "Count"
	UnitEnumBytesSecond     UnitEnum = "Bytes/Second"
	UnitEnumKilobytesSecond UnitEnum = "Kilobytes/Second"
	UnitEnumMegabytesSecond UnitEnum = "Megabytes/Second"
	UnitEnumGigabytesSecond UnitEnum = "Gigabytes/Second"
	UnitEnumTerabytesSecond UnitEnum = "Terabytes/Second"
	UnitEnumBitsSecond      UnitEnum = "Bits/Second"
	UnitEnumKilobitsSecond  UnitEnum = "Kilobits/Second"
	UnitEnumMegabitsSecond  UnitEnum = "Megabits/Second"
	UnitEnumGigabitsSecond  UnitEnum = "Gigabits/Second"
	UnitEnumTerabitsSecond  UnitEnum = "Terabits/Second"
	UnitEnumCountSecond     UnitEnum = "Count/Second"
	UnitEnumNone            UnitEnum = "None"
)

func (e *UnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Count":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		fallthrough
	case "None":
		*e = UnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnitEnum: %s", s)
	}
}
