/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { InstanceConfig, InstanceConfigInput } from "./instanceconfig";
import { NetworkConfig, NetworkConfigInput } from "./networkconfig";
import { VolumeConfig, VolumeConfigInput } from "./volumeconfig";
import { Expose, Type } from "class-transformer";

/**
 * A provisioning configuration.
 */
export class ProvisioningConfigInput extends SpeakeasyBase {
  /**
   * Optional. The user-defined identifier of the provisioning config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customId" })
  customId?: string;

  /**
   * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * A service account to enable customers to access instance credentials upon handover.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "handoverServiceAccount" })
  handoverServiceAccount?: string;

  /**
   * Instances to be created.
   */
  @SpeakeasyMetadata({ elemType: InstanceConfigInput })
  @Expose({ name: "instances" })
  @Type(() => InstanceConfigInput)
  instances?: InstanceConfigInput[];

  /**
   * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Networks to be created.
   */
  @SpeakeasyMetadata({ elemType: NetworkConfigInput })
  @Expose({ name: "networks" })
  @Type(() => NetworkConfigInput)
  networks?: NetworkConfigInput[];

  /**
   * Optional status messages associated with the FAILED state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  /**
   * A generated ticket id to track provisioning request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ticketId" })
  ticketId?: string;

  /**
   * Volumes to be created.
   */
  @SpeakeasyMetadata({ elemType: VolumeConfigInput })
  @Expose({ name: "volumes" })
  @Type(() => VolumeConfigInput)
  volumes?: VolumeConfigInput[];

  /**
   * If true, VPC SC is enabled for the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpcScEnabled" })
  vpcScEnabled?: boolean;
}

/**
 * Output only. State of ProvisioningConfig.
 */
export enum ProvisioningConfigStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Draft = "DRAFT",
  Submitted = "SUBMITTED",
  Provisioning = "PROVISIONING",
  Provisioned = "PROVISIONED",
  Validated = "VALIDATED",
  Cancelled = "CANCELLED",
  Failed = "FAILED",
}

/**
 * A provisioning configuration.
 */
export class ProvisioningConfig extends SpeakeasyBase {
  /**
   * Output only. URI to Cloud Console UI view of this provisioning config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloudConsoleUri" })
  cloudConsoleUri?: string;

  /**
   * Optional. The user-defined identifier of the provisioning config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customId" })
  customId?: string;

  /**
   * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * A service account to enable customers to access instance credentials upon handover.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "handoverServiceAccount" })
  handoverServiceAccount?: string;

  /**
   * Instances to be created.
   */
  @SpeakeasyMetadata({ elemType: InstanceConfig })
  @Expose({ name: "instances" })
  @Type(() => InstanceConfig)
  instances?: InstanceConfig[];

  /**
   * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Output only. The system-generated name of the provisioning config. This follows the UUID format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Networks to be created.
   */
  @SpeakeasyMetadata({ elemType: NetworkConfig })
  @Expose({ name: "networks" })
  @Type(() => NetworkConfig)
  networks?: NetworkConfig[];

  /**
   * Output only. State of ProvisioningConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: ProvisioningConfigStateEnum;

  /**
   * Optional status messages associated with the FAILED state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  /**
   * A generated ticket id to track provisioning request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ticketId" })
  ticketId?: string;

  /**
   * Output only. Last update timestamp.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;

  /**
   * Volumes to be created.
   */
  @SpeakeasyMetadata({ elemType: VolumeConfig })
  @Expose({ name: "volumes" })
  @Type(() => VolumeConfig)
  volumes?: VolumeConfig[];

  /**
   * If true, VPC SC is enabled for the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpcScEnabled" })
  vpcScEnabled?: boolean;
}
