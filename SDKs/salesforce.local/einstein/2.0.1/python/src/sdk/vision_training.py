"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VisionTraining:
    r"""Resources that handle image dataset training."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_train_status_and_progress_1(self, request: operations.GetTrainStatusAndProgress1Request, security: operations.GetTrainStatusAndProgress1Security) -> operations.GetTrainStatusAndProgress1Response:
        r"""Get Training Status
        Returns the status of a model's training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTrainStatusAndProgress1Request, base_url, '/v2/vision/train/{modelId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrainStatusAndProgress1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrainResponse])
                res.train_response = out

        return res

    def retrain_1(self, request: operations.Retrain1RequestBody, security: operations.Retrain1Security) -> operations.Retrain1Response:
        r"""Retrain a Dataset
        Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/retrain'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Retrain1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrainResponse])
                res.train_response = out

        return res

    def train_1(self, request: operations.Train1RequestBody, security: operations.Train1Security) -> operations.Train1Response:
        r"""Train a Dataset
        Trains a dataset and creates a model.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/train'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Train1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrainResponse])
                res.train_response = out

        return res

    