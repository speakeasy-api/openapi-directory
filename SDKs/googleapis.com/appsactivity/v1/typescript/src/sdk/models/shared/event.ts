/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Move } from "./move";
import { PermissionChange } from "./permissionchange";
import { Rename } from "./rename";
import { Target } from "./target";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

export enum EventAdditionalEventTypesEnum {
  Comment = "comment",
  Create = "create",
  Edit = "edit",
  EmptyTrash = "emptyTrash",
  Move = "move",
  PermissionChange = "permissionChange",
  Rename = "rename",
  Trash = "trash",
  Unknown = "unknown",
  Untrash = "untrash",
  Upload = "upload",
}

/**
 * The main type of event that occurred.
 */
export enum EventPrimaryEventTypeEnum {
  Comment = "comment",
  Create = "create",
  Edit = "edit",
  EmptyTrash = "emptyTrash",
  Move = "move",
  PermissionChange = "permissionChange",
  Rename = "rename",
  Trash = "trash",
  Unknown = "unknown",
  Untrash = "untrash",
  Upload = "upload",
}

/**
 * Represents the changes associated with an action taken by a user.
 */
export class Event extends SpeakeasyBase {
  /**
   * Additional event types. Some events may have multiple types when multiple actions are part of a single event. For example, creating a document, renaming it, and sharing it may be part of a single file-creation event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additionalEventTypes" })
  additionalEventTypes?: EventAdditionalEventTypesEnum[];

  /**
   * The time at which the event occurred formatted as Unix time in milliseconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTimeMillis" })
  eventTimeMillis?: string;

  /**
   * Whether this event is caused by a user being deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromUserDeletion" })
  fromUserDeletion?: boolean;

  /**
   * Contains information about changes in an object's parents as a result of a move type event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "move" })
  @Type(() => Move)
  move?: Move;

  /**
   * Extra information for permissionChange type events, such as the user or group the new permission applies to.
   */
  @SpeakeasyMetadata({ elemType: PermissionChange })
  @Expose({ name: "permissionChanges" })
  @Type(() => PermissionChange)
  permissionChanges?: PermissionChange[];

  /**
   * The main type of event that occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryEventType" })
  primaryEventType?: EventPrimaryEventTypeEnum;

  /**
   * Contains information about a renametype event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rename" })
  @Type(() => Rename)
  rename?: Rename;

  /**
   * Information about the object modified by the event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => Target)
  target?: Target;

  /**
   * A representation of a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user?: User;
}
