/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class CandidateHistoryTotal {
    /**
     * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_through")
    public Integer activeThrough;

    public CandidateHistoryTotal withActiveThrough(Integer activeThrough) {
        this.activeThrough = activeThrough;
        return this;
    }
    
    /**
     * City of candidate's address, as reported on their Form 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_city")
    public String addressCity;

    public CandidateHistoryTotal withAddressCity(String addressCity) {
        this.addressCity = addressCity;
        return this;
    }
    
    /**
     * State of candidate's address, as reported on their Form 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_state")
    public String addressState;

    public CandidateHistoryTotal withAddressState(String addressState) {
        this.addressState = addressState;
        return this;
    }
    
    /**
     * Street of candidate's address, as reported on their Form 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_street_1")
    public String addressStreet1;

    public CandidateHistoryTotal withAddressStreet1(String addressStreet1) {
        this.addressStreet1 = addressStreet1;
        return this;
    }
    
    /**
     * Additional street information of candidate's address, as reported on their Form 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_street_2")
    public String addressStreet2;

    public CandidateHistoryTotal withAddressStreet2(String addressStreet2) {
        this.addressStreet2 = addressStreet2;
        return this;
    }
    
    /**
     * Zip code of candidate's address, as reported on their Form 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_zip")
    public String addressZip;

    public CandidateHistoryTotal withAddressZip(String addressZip) {
        this.addressZip = addressZip;
        return this;
    }
    
    /**
     * The last year of the cycle for this election.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_election_year")
    public Integer candidateElectionYear;

    public CandidateHistoryTotal withCandidateElectionYear(Integer candidateElectionYear) {
        this.candidateElectionYear = candidateElectionYear;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * First character indicates office - [P]residential, [H]ouse, [S]enate].
     * Second character is the last digit of the two-year period the ID was created.
     * Third and fourth is the candidate state. Presidential IDs don't have state.
     * Fifth and sixth is the district when the candidate first ran. This does not change if the
     * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
     * The rest is sequence.
     * 
     */
    @JsonProperty("candidate_id")
    public String candidateId;

    public CandidateHistoryTotal withCandidateId(String candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * True indicates that a candidate is inactive.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_inactive")
    public Boolean candidateInactive;

    public CandidateHistoryTotal withCandidateInactive(Boolean candidateInactive) {
        this.candidateInactive = candidateInactive;
        return this;
    }
    
    /**
     * One-letter code explaining if the candidate is:
     *         - C present candidate
     *         - F future candidate
     *         - N not yet a candidate
     *         - P prior candidate
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_status")
    public String candidateStatus;

    public CandidateHistoryTotal withCandidateStatus(String candidateStatus) {
        this.candidateStatus = candidateStatus;
        return this;
    }
    
    /**
     * Ending cash balance on the most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_on_hand_end_period")
    public Double cashOnHandEndPeriod;

    public CandidateHistoryTotal withCashOnHandEndPeriod(Double cashOnHandEndPeriod) {
        this.cashOnHandEndPeriod = cashOnHandEndPeriod;
        return this;
    }
    
    /**
     * Ending date of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("coverage_end_date")
    public LocalDate coverageEndDate;

    public CandidateHistoryTotal withCoverageEndDate(LocalDate coverageEndDate) {
        this.coverageEndDate = coverageEndDate;
        return this;
    }
    
    /**
     * Beginning date of the reporting period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("coverage_start_date")
    public LocalDate coverageStartDate;

    public CandidateHistoryTotal withCoverageStartDate(LocalDate coverageStartDate) {
        this.coverageStartDate = coverageStartDate;
        return this;
    }
    
    /**
     * Filter records to only those that are applicable to a given two-year
     * period. This cycle follows the traditional House election cycle and
     * subdivides the presidential and Senate elections into comparable
     * two-year blocks. The cycle begins with an odd year and is named for its
     * ending, even year.
     * 
     */
    @JsonProperty("cycle")
    public Integer cycle;

    public CandidateHistoryTotal withCycle(Integer cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * Two-year election cycle in which a candidate runs for office.
     * Calculated from Form 2. The cycle begins with
     * an odd year and is named for its ending, even year. This cycle follows
     * the traditional house election cycle and subdivides the presidential
     * and Senate elections into comparable two-year blocks. To retrieve data for
     * the entire four years of a presidential term or six years of a senatorial term,
     * you will need the `election_full` flag.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycles")
    public Integer[] cycles;

    public CandidateHistoryTotal withCycles(Integer[] cycles) {
        this.cycles = cycles;
        return this;
    }
    
    /**
     * Debts owed by the committee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debts_owed_by_committee")
    public Double debtsOwedByCommittee;

    public CandidateHistoryTotal withDebtsOwedByCommittee(Double debtsOwedByCommittee) {
        this.debtsOwedByCommittee = debtsOwedByCommittee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disbursements")
    public Double disbursements;

    public CandidateHistoryTotal withDisbursements(Double disbursements) {
        this.disbursements = disbursements;
        return this;
    }
    
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("district")
    public String district;

    public CandidateHistoryTotal withDistrict(String district) {
        this.district = district;
        return this;
    }
    
    /**
     * One-letter code explaining if the candidate is:
     *         - C present candidate
     *         - F future candidate
     *         - N not yet a candidate
     *         - P prior candidate
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("district_number")
    public Integer districtNumber;

    public CandidateHistoryTotal withDistrictNumber(Integer districtNumber) {
        this.districtNumber = districtNumber;
        return this;
    }
    
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election_districts")
    public String[] electionDistricts;

    public CandidateHistoryTotal withElectionDistricts(String[] electionDistricts) {
        this.electionDistricts = electionDistricts;
        return this;
    }
    
    /**
     * Year of election
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election_year")
    public Integer electionYear;

    public CandidateHistoryTotal withElectionYear(Integer electionYear) {
        this.electionYear = electionYear;
        return this;
    }
    
    /**
     * Years in which a candidate ran for office.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("election_years")
    public Integer[] electionYears;

    public CandidateHistoryTotal withElectionYears(Integer[] electionYears) {
        this.electionYears = electionYears;
        return this;
    }
    
    /**
     * FEC cycles are included in candidate election years.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fec_cycles_in_election")
    public Integer[] fecCyclesInElection;

    public CandidateHistoryTotal withFecCyclesInElection(Integer[] fecCyclesInElection) {
        this.fecCyclesInElection = fecCyclesInElection;
        return this;
    }
    
    /**
     * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("federal_funds_flag")
    public Boolean federalFundsFlag;

    public CandidateHistoryTotal withFederalFundsFlag(Boolean federalFundsFlag) {
        this.federalFundsFlag = federalFundsFlag;
        return this;
    }
    
    /**
     * The day the FEC received the candidate's first filing. This is a F2 candidate registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("first_file_date")
    public LocalDate firstFileDate;

    public CandidateHistoryTotal withFirstFileDate(LocalDate firstFileDate) {
        this.firstFileDate = firstFileDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flags")
    public String flags;

    public CandidateHistoryTotal withFlags(String flags) {
        this.flags = flags;
        return this;
    }
    
    /**
     * A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_raised_funds")
    public Boolean hasRaisedFunds;

    public CandidateHistoryTotal withHasRaisedFunds(Boolean hasRaisedFunds) {
        this.hasRaisedFunds = hasRaisedFunds;
        return this;
    }
    
    /**
     * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incumbent_challenge")
    public String incumbentChallenge;

    public CandidateHistoryTotal withIncumbentChallenge(String incumbentChallenge) {
        this.incumbentChallenge = incumbentChallenge;
        return this;
    }
    
    /**
     * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incumbent_challenge_full")
    public String incumbentChallengeFull;

    public CandidateHistoryTotal withIncumbentChallengeFull(String incumbentChallengeFull) {
        this.incumbentChallengeFull = incumbentChallengeFull;
        return this;
    }
    
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individual_itemized_contributions")
    public Double individualItemizedContributions;

    public CandidateHistoryTotal withIndividualItemizedContributions(Double individualItemizedContributions) {
        this.individualItemizedContributions = individualItemizedContributions;
        return this;
    }
    
    @JsonProperty("is_election")
    public Boolean isElection;

    public CandidateHistoryTotal withIsElection(Boolean isElection) {
        this.isElection = isElection;
        return this;
    }
    
    /**
     * The day the FEC received the candidate's most recent Form 2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_f2_date")
    public LocalDate lastF2Date;

    public CandidateHistoryTotal withLastF2Date(LocalDate lastF2Date) {
        this.lastF2Date = lastF2Date;
        return this;
    }
    
    /**
     * The day the FEC received the candidate's most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_file_date")
    public LocalDate lastFileDate;

    public CandidateHistoryTotal withLastFileDate(LocalDate lastFileDate) {
        this.lastFileDate = lastFileDate;
        return this;
    }
    
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("load_date")
    public OffsetDateTime loadDate;

    public CandidateHistoryTotal withLoadDate(OffsetDateTime loadDate) {
        this.loadDate = loadDate;
        return this;
    }
    
    /**
     * Name of candidate running for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CandidateHistoryTotal withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Federal office candidate runs for: H, S or P
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office")
    public String office;

    public CandidateHistoryTotal withOffice(String office) {
        this.office = office;
        return this;
    }
    
    /**
     * Federal office candidate runs for: House, Senate or presidential
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office_full")
    public String officeFull;

    public CandidateHistoryTotal withOfficeFull(String officeFull) {
        this.officeFull = officeFull;
        return this;
    }
    
    /**
     * Other committees contributions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_political_committee_contributions")
    public Double otherPoliticalCommitteeContributions;

    public CandidateHistoryTotal withOtherPoliticalCommitteeContributions(Double otherPoliticalCommitteeContributions) {
        this.otherPoliticalCommitteeContributions = otherPoliticalCommitteeContributions;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party")
    public String party;

    public CandidateHistoryTotal withParty(String party) {
        this.party = party;
        return this;
    }
    
    /**
     * Party affiliated with a candidate or committee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party_full")
    public String partyFull;

    public CandidateHistoryTotal withPartyFull(String partyFull) {
        this.partyFull = partyFull;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receipts")
    public Double receipts;

    public CandidateHistoryTotal withReceipts(Double receipts) {
        this.receipts = receipts;
        return this;
    }
    
    /**
     * Rounded election years in which a candidate ran for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rounded_election_years")
    public Integer[] roundedElectionYears;

    public CandidateHistoryTotal withRoundedElectionYears(Integer[] roundedElectionYears) {
        this.roundedElectionYears = roundedElectionYears;
        return this;
    }
    
    /**
     * US state or territory where a candidate runs for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public CandidateHistoryTotal withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * US state or territory where a candidate runs for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_full")
    public String stateFull;

    public CandidateHistoryTotal withStateFull(String stateFull) {
        this.stateFull = stateFull;
        return this;
    }
    
    /**
     * Transfers from authorized committees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfers_from_other_authorized_committee")
    public Double transfersFromOtherAuthorizedCommittee;

    public CandidateHistoryTotal withTransfersFromOtherAuthorizedCommittee(Double transfersFromOtherAuthorizedCommittee) {
        this.transfersFromOtherAuthorizedCommittee = transfersFromOtherAuthorizedCommittee;
        return this;
    }
    
    /**
     * Two-year election cycle in which a candidate runs for office.
     * Calculated from Form 2. The cycle begins with
     * an odd year and is named for its ending, even year. This cycle follows
     * the traditional house election cycle and subdivides the presidential
     * and Senate elections into comparable two-year blocks. To retrieve data for
     * the entire four years of a presidential term or six years of a senatorial term,
     * you will need the `election_full` flag.
     * 
     */
    @JsonProperty("two_year_period")
    public Integer twoYearPeriod;

    public CandidateHistoryTotal withTwoYearPeriod(Integer twoYearPeriod) {
        this.twoYearPeriod = twoYearPeriod;
        return this;
    }
    
    public CandidateHistoryTotal(@JsonProperty("candidate_id") String candidateId, @JsonProperty("cycle") Integer cycle, @JsonProperty("is_election") Boolean isElection, @JsonProperty("two_year_period") Integer twoYearPeriod) {
        this.candidateId = candidateId;
        this.cycle = cycle;
        this.isElection = isElection;
        this.twoYearPeriod = twoYearPeriod;
  }
}
