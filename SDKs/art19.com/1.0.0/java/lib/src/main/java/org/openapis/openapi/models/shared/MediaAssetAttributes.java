/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MediaAssetAttributes {
    /**
     * This will be replaced by the relationship `attachment` in a future update.&lt;br/&gt;
     * The ID of the entity this media asset is attached to
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_id")
    public String attachmentId;

    public MediaAssetAttributes withAttachmentId(String attachmentId) {
        this.attachmentId = attachmentId;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `attachment` in a future update.&lt;br/&gt;
     * The type of the entity this media asset is attached to
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_type")
    public MediaAssetAttributesAttachmentTypeEnum attachmentType;

    public MediaAssetAttributes withAttachmentType(MediaAssetAttributesAttachmentTypeEnum attachmentType) {
        this.attachmentType = attachmentType;
        return this;
    }
    
    /**
     * The CDN-URL where the media asset is available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cdn_url")
    public String cdnUrl;

    public MediaAssetAttributes withCdnUrl(String cdnUrl) {
        this.cdnUrl = cdnUrl;
        return this;
    }
    
    /**
     * The MIME type of the media asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_type")
    public String contentType;

    public MediaAssetAttributes withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public MediaAssetAttributes withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The filename of the media asset without any path components.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name")
    public String fileName;

    public MediaAssetAttributes withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }
    
    /**
     * The size in bytes of the media asset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_size")
    public Long fileSize;

    public MediaAssetAttributes withFileSize(Long fileSize) {
        this.fileSize = fileSize;
        return this;
    }
    
    /**
     * The height in pixels of the media asset, if the media asset is an image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size_height")
    public Long sizeHeight;

    public MediaAssetAttributes withSizeHeight(Long sizeHeight) {
        this.sizeHeight = sizeHeight;
        return this;
    }
    
    /**
     * The width in pixels of the media asset, if the media asset is an image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size_width")
    public Long sizeWidth;

    public MediaAssetAttributes withSizeWidth(Long sizeWidth) {
        this.sizeWidth = sizeWidth;
        return this;
    }
    
    /**
     * The style of the media asset. A media asset is part of a collection of related media files,
     * for example an image or an episode (audio). Images usually have differently sized versions,
     * and episodes can have different audio formats.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("style")
    public MediaAssetAttributesStyleEnum style;

    public MediaAssetAttributes withStyle(MediaAssetAttributesStyleEnum style) {
        this.style = style;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public MediaAssetAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public MediaAssetAttributes(){}
}
