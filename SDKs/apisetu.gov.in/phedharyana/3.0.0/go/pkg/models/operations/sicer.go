// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SicerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SicerRequestBodyCertificateParameters struct {
	// Name
	Name string `json:"_name"`
	// Consumer ID
	ConsumerID string `json:"consumer_id"`
}

// SicerRequestBodyFormatEnum - The format of the certificate in response.
type SicerRequestBodyFormatEnum string

const (
	SicerRequestBodyFormatEnumPdf SicerRequestBodyFormatEnum = "pdf"
)

func (e SicerRequestBodyFormatEnum) ToPointer() *SicerRequestBodyFormatEnum {
	return &e
}

func (e *SicerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SicerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SicerRequestBodyFormatEnum: %v", v)
	}
}

// SicerRequestBody - Request format
type SicerRequestBody struct {
	CertificateParameters *SicerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SicerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Sicer504ApplicationJSONErrorEnum string

const (
	Sicer504ApplicationJSONErrorEnumGatewayTimeout Sicer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Sicer504ApplicationJSONErrorEnum) ToPointer() *Sicer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Sicer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer504ApplicationJSONErrorDescriptionEnum string

const (
	Sicer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sicer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Sicer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Sicer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer504ApplicationJSON - Gateway timeout
type Sicer504ApplicationJSON struct {
	Error            *Sicer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer503ApplicationJSONErrorEnum string

const (
	Sicer503ApplicationJSONErrorEnumServiceUnavailable Sicer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Sicer503ApplicationJSONErrorEnum) ToPointer() *Sicer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Sicer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer503ApplicationJSONErrorDescriptionEnum string

const (
	Sicer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sicer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Sicer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Sicer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer503ApplicationJSON - Service unavailable
type Sicer503ApplicationJSON struct {
	Error            *Sicer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer502ApplicationJSONErrorEnum string

const (
	Sicer502ApplicationJSONErrorEnumBadGatewy Sicer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Sicer502ApplicationJSONErrorEnum) ToPointer() *Sicer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Sicer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer502ApplicationJSONErrorDescriptionEnum string

const (
	Sicer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sicer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Sicer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Sicer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer502ApplicationJSON - Bad gateway
type Sicer502ApplicationJSON struct {
	Error            *Sicer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer500ApplicationJSONErrorEnum string

const (
	Sicer500ApplicationJSONErrorEnumInternalServerError Sicer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Sicer500ApplicationJSONErrorEnum) ToPointer() *Sicer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Sicer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer500ApplicationJSONErrorDescriptionEnum string

const (
	Sicer500ApplicationJSONErrorDescriptionEnumInternalServerError Sicer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Sicer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Sicer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer500ApplicationJSON - Internal server error
type Sicer500ApplicationJSON struct {
	Error            *Sicer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer404ApplicationJSONErrorEnum string

const (
	Sicer404ApplicationJSONErrorEnumRecordNotFound Sicer404ApplicationJSONErrorEnum = "record_not_found"
	Sicer404ApplicationJSONErrorEnumURLNotFound    Sicer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Sicer404ApplicationJSONErrorEnum) ToPointer() *Sicer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sicer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer404ApplicationJSONErrorDescriptionEnum string

const (
	Sicer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sicer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sicer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sicer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Sicer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sicer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer404ApplicationJSON - No record found
type Sicer404ApplicationJSON struct {
	Error            *Sicer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer401ApplicationJSONErrorEnum string

const (
	Sicer401ApplicationJSONErrorEnumInvalidAuthentication Sicer401ApplicationJSONErrorEnum = "invalid_authentication"
	Sicer401ApplicationJSONErrorEnumInvalidAuthorization  Sicer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Sicer401ApplicationJSONErrorEnum) ToPointer() *Sicer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sicer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer401ApplicationJSONErrorDescriptionEnum string

const (
	Sicer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sicer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sicer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sicer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Sicer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sicer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer401ApplicationJSON - Unauthorized access
type Sicer401ApplicationJSON struct {
	Error            *Sicer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sicer400ApplicationJSONErrorEnum string

const (
	Sicer400ApplicationJSONErrorEnumMissingParameter Sicer400ApplicationJSONErrorEnum = "missing_parameter"
	Sicer400ApplicationJSONErrorEnumInvalidParameter Sicer400ApplicationJSONErrorEnum = "invalid_parameter"
	Sicer400ApplicationJSONErrorEnumInvalidFormat    Sicer400ApplicationJSONErrorEnum = "invalid_format"
	Sicer400ApplicationJSONErrorEnumInvalidTxnid     Sicer400ApplicationJSONErrorEnum = "invalid_txnid"
	Sicer400ApplicationJSONErrorEnumInvalidConsentid Sicer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Sicer400ApplicationJSONErrorEnum) ToPointer() *Sicer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Sicer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sicer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Sicer400ApplicationJSONErrorDescriptionEnum string

const (
	Sicer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sicer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sicer400ApplicationJSONErrorDescriptionEnumBadRequest                              Sicer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sicer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sicer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sicer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sicer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sicer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sicer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Sicer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Sicer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Sicer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sicer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sicer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Sicer400ApplicationJSON - Bad request
type Sicer400ApplicationJSON struct {
	Error            *Sicer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sicer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SicerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sicer400ApplicationJSONObject *Sicer400ApplicationJSON
	// Unauthorized access
	Sicer401ApplicationJSONObject *Sicer401ApplicationJSON
	// No record found
	Sicer404ApplicationJSONObject *Sicer404ApplicationJSON
	// Internal server error
	Sicer500ApplicationJSONObject *Sicer500ApplicationJSON
	// Bad gateway
	Sicer502ApplicationJSONObject *Sicer502ApplicationJSON
	// Service unavailable
	Sicer503ApplicationJSONObject *Sicer503ApplicationJSON
	// Gateway timeout
	Sicer504ApplicationJSONObject *Sicer504ApplicationJSON
}
