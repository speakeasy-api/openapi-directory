"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetAccountLockSettingsRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the account. To retrieve locked settings of the master account or a regular account, provide \\"me\\" as the value of this field. <br> To retrieve locked settings of a sub account, provide the Account ID of the sub account in this field."""  
    custom_query_fields: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'custom_query_fields', 'style': 'form', 'explode': True }})
    r"""Provide the name of the field by which you would like to filter the response. For example, if you provide \\"host_video\\" as the value of this field, you will get a response similar to the following:<br>
    {
        \"schedule_meeting\": {
            \"host_video\": false
        }
    }
    <br>You can provide multiple values by separating them with commas(example: \"host_video,participant_video‚Äù).
    """  
    option: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'option', 'style': 'form', 'explode': True }})
    r"""`meeting_security`: Use this query parameter to view meeting security settings applied on the account.<br>"""  
    
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(str, Enum):
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """
    ENHANCED_ENCRYPTION = 'enhanced_encryption'
    E2EE = 'e2ee'

class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(str, Enum):
    ZERO = '0'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'


@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement:
    r"""Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604)."""
    
    consecutive_characters_length: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum] = dataclasses.field(default=None)  
    have_letter: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...)."""  
    have_number: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...)."""  
    have_special_character: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the passcode must have at least 1 special character (!,@,#...)."""  
    have_upper_and_lower_characters: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the passcode must include both uppercase and lowercase characters."""  
    length: Optional[int] = dataclasses.field(default=None)
    r"""The minimum length that the meeting/webinar passcode needs to have."""  
    only_allow_numeric: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the passcode must only contain numbers and no other characters."""  
    weak_enhance_detection: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, users will be informed if the provided passcode is weak."""  
    
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(str, Enum):
    r"""Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
    `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
    """
    ZERO = '0'
    ONE = '1'
    TWO = '2'


@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings:
    r"""Specify the settings to be applied if waiting room is enabled."""
    
    participants_to_place_in_waiting_room: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum] = dataclasses.field(default=None)
    r"""Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
    `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
    """  
    users_who_can_admit_participants_from_waiting_room: Optional[int] = dataclasses.field(default=None)
    r"""Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
    `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
    """  
    whitelisted_domains_for_waiting_room: Optional[str] = dataclasses.field(default=None)
    r"""If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: \\"aaa.com,bbb.com\\")."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity:
    
    auto_security: Optional[bool] = dataclasses.field(default=None)
    r"""`true`: Require that all meetings are secured with at least one security option.
    
    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
    """  
    embed_password_in_join_link: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode."""  
    encryption_type: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum] = dataclasses.field(default=None)
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """  
    end_to_end_encrypted_meetings: Optional[bool] = dataclasses.field(default=None)
    r"""Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field."""  
    meeting_password: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting."""  
    meeting_password_requirement: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement] = dataclasses.field(default=None)
    r"""Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604)."""  
    phone_password: Optional[bool] = dataclasses.field(default=None)
    r"""Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated."""  
    pmi_password: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected."""  
    require_password_for_scheduled_meeting: Optional[bool] = dataclasses.field(default=None)
    r"""Require a passcode for meetings which have already been scheduled."""  
    require_password_for_scheduled_webinar: Optional[bool] = dataclasses.field(default=None)
    r"""Require a passcode for webinars which have already been scheduled."""  
    waiting_room: Optional[bool] = dataclasses.field(default=None)
    r"""When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host."""  
    waiting_room_settings: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings] = dataclasses.field(default=None)
    r"""Specify the settings to be applied if waiting room is enabled."""  
    webinar_password: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettings:
    
    meeting_security: Optional[GetAccountLockSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1EmailNotification:
    
    alternative_host_reminder: Optional[bool] = dataclasses.field(default=None)
    r"""Notify the alternative host who is set or removed."""  
    cancel_meeting_reminder: Optional[bool] = dataclasses.field(default=None)
    r"""Notify host and participants when the meeting is cancelled."""  
    cloud_recording_available_reminder: Optional[bool] = dataclasses.field(default=None)
    r"""Notify host when cloud recording is available."""  
    jbh_reminder: Optional[bool] = dataclasses.field(default=None)
    r"""Notify host when participants join the meeting before them."""  
    schedule_for_host_reminder: Optional[bool] = dataclasses.field(default=None)
    r"""Notify the host there is a meeting is scheduled, rescheduled, or cancelled."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1InMeeting:
    
    alert_guest_join: Optional[bool] = dataclasses.field(default=None)
    r"""Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar."""  
    allow_show_zoom_windows: Optional[bool] = dataclasses.field(default=None)
    r"""Show Zoom windows during screen share."""  
    annotation: Optional[bool] = dataclasses.field(default=None)
    r"""Allow participants to use annotation tools to add information to shared screens."""  
    anonymous_question_answer: Optional[bool] = dataclasses.field(default=None)  
    attendee_on_hold: Optional[bool] = dataclasses.field(default=None)
    r"""Allow host to put attendee on hold.
    
    **This field has been deprecated and is no longer supported.**
    """  
    auto_answer: Optional[bool] = dataclasses.field(default=None)
    r"""Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered."""  
    auto_saving_chat: Optional[bool] = dataclasses.field(default=None)
    r"""Automatically save all in-meeting chats."""  
    breakout_room: Optional[bool] = dataclasses.field(default=None)
    r"""Allow host to split meeting participants into separate, smaller rooms."""  
    chat: Optional[bool] = dataclasses.field(default=None)
    r"""Allow meeting participants to send chat message visible to all participants."""  
    closed_caption: Optional[bool] = dataclasses.field(default=None)
    r"""Allow host to type closed captions or assign a participant/third party device to add closed captions."""  
    co_host: Optional[bool] = dataclasses.field(default=None)
    r"""Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host."""  
    custom_data_center_regions: Optional[bool] = dataclasses.field(default=None)
    r"""Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by the account."""  
    dscp_marking: Optional[bool] = dataclasses.field(default=None)
    r"""Enable DSCP marking for signaling and media packets. (Default is 56 for audio, 40 for video, and 40 for signaling.)"""  
    e2e_encryption: Optional[bool] = dataclasses.field(default=None)
    r"""Require that all meetings are encrypted using AES."""  
    entry_exit_chime: Optional[str] = dataclasses.field(default=None)
    r"""Play sound when participants join or leave."""  
    far_end_camera_control: Optional[bool] = dataclasses.field(default=None)
    r"""Allow another user to take control of the camera during a meeting."""  
    feedback: Optional[bool] = dataclasses.field(default=None)
    r"""Enable users to provide feedback to Zoom at the end of the meeting."""  
    file_transfer: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for all users on the account or not."""  
    group_hd: Optional[bool] = dataclasses.field(default=None)
    r"""Enable higher quality video for host and participants. This will require more bandwidth."""  
    original_audio: Optional[bool] = dataclasses.field(default=None)
    r"""Allow users to select original sound during a meeting."""  
    polling: Optional[bool] = dataclasses.field(default=None)
    r"""Add 'Polls' to the meeting controls. This allows the host to survey the attendees."""  
    post_meeting_feedback: Optional[bool] = dataclasses.field(default=None)
    r"""Display end-of-meeting experience feedback survey."""  
    private_chat: Optional[bool] = dataclasses.field(default=None)
    r"""Allow meeting participants to send a private 1:1 message to another participant."""  
    remote_control: Optional[bool] = dataclasses.field(default=None)
    r"""During screen sharing, allow the person who is sharing to let others control the shared content."""  
    request_permission_to_unmute: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option is enabled and locked for the account or not."""  
    screen_sharing: Optional[bool] = dataclasses.field(default=None)
    r"""Allow host and participants to share their screen or content during meetings."""  
    sending_default_email_invites: Optional[bool] = dataclasses.field(default=None)
    r"""Allow users to invite participants by email only by default."""  
    show_meeting_control_toolbar: Optional[bool] = dataclasses.field(default=None)
    r"""Always show meeting controls during a meeting."""  
    stereo_audio: Optional[bool] = dataclasses.field(default=None)
    r"""Allow users to select stereo audio during a meeting."""  
    use_html_format_email: Optional[bool] = dataclasses.field(default=None)
    r"""Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin."""  
    virtual_background: Optional[bool] = dataclasses.field(default=None)
    r"""Enable virtual background."""  
    webinar_question_answer: Optional[bool] = dataclasses.field(default=None)
    r"""Allow attendees to ask questions for the host and panelists to answer in the webinar."""  
    whiteboard: Optional[bool] = dataclasses.field(default=None)
    r"""Allow participants to share a whiteboard that includes annotation tools."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1RecordingIPAddressAccessControl:
    r"""Setting to allow cloud recording access only from specific IP address ranges."""
    
    enable: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property."""  
    ip_addresses_or_ranges: Optional[str] = dataclasses.field(default=None)
    r"""IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
    
    Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
    """  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1Recording:
    
    account_user_access_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Make cloud recordings accessible to account members only."""  
    auto_delete_cmr: Optional[bool] = dataclasses.field(default=None)
    r"""Allow Zoom to automatically delete recordings permanently after a specified number of days."""  
    auto_recording: Optional[str] = dataclasses.field(default=None)
    r"""Record meetings automatically as they start."""  
    cloud_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Allow hosts to record and save the meeting / webinar in the cloud."""  
    cloud_recording_download: Optional[bool] = dataclasses.field(default=None)
    r"""Allow anyone with a link to the cloud recording to download."""  
    host_delete_cloud_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them."""  
    ip_address_access_control: Optional[GetAccountLockSettings200ApplicationXML1RecordingIPAddressAccessControl] = dataclasses.field(default=None)
    r"""Setting to allow cloud recording access only from specific IP address ranges."""  
    local_recording: Optional[bool] = dataclasses.field(default=None)
    r"""Allow hosts and participants to record the meeting to a local file."""  
    prevent_host_access_recording: Optional[bool] = dataclasses.field(default=None)
    r"""If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them."""  
    recording_authentication: Optional[str] = dataclasses.field(default=None)
    r"""Only authenticated users can view cloud recordings"""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1ScheduleMeeting:
    
    audio_type: Optional[bool] = dataclasses.field(default=None)
    r"""Determine how participants can join the audio portion of the meeting."""  
    embed_password_in_join_link: Optional[bool] = dataclasses.field(default=None)
    r"""If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password."""  
    enforce_login: Optional[bool] = dataclasses.field(default=None)
    r"""Allow only signed-in users to join meetings."""  
    enforce_login_domains: Optional[str] = dataclasses.field(default=None)
    r"""Specify the domains from which users can join a meeting."""  
    enforce_login_with_domains: Optional[bool] = dataclasses.field(default=None)
    r"""Allow only signed-in users with specified domains to join meetings."""  
    host_video: Optional[bool] = dataclasses.field(default=None)
    r"""Start meetings with host video on."""  
    join_before_host: Optional[bool] = dataclasses.field(default=None)
    r"""Allow participants to join the meeting before the host arrives"""  
    meeting_authentication: Optional[bool] = dataclasses.field(default=None)
    r"""Only authenticated users can join meetings"""  
    not_store_meeting_topic: Optional[bool] = dataclasses.field(default=None)
    r"""Hide actual meeting topic and display \\"Zoom Meeting\\" for your scheduled meetings"""  
    participant_video: Optional[bool] = dataclasses.field(default=None)
    r"""Start meetings with participant video on."""  
    require_password_for_instant_meetings: Optional[bool] = dataclasses.field(default=None)
    r"""Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    require_password_for_pmi_meetings: Optional[bool] = dataclasses.field(default=None)
    r"""Require participants to enter password for PMI meetings. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    require_password_for_scheduling_new_meetings: Optional[bool] = dataclasses.field(default=None)
    r"""This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1Telephony:
    
    telephony_regions: Optional[bool] = dataclasses.field(default=None)  
    third_party_audio: Optional[bool] = dataclasses.field(default=None)
    r"""Allow users to join the meeting using the existing 3rd party audio configuration."""  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1Tsp:
    
    call_out: Optional[bool] = dataclasses.field(default=None)  
    show_international_numbers_link: Optional[bool] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetAccountLockSettings200ApplicationXML1:
    
    email_notification: Optional[GetAccountLockSettings200ApplicationXML1EmailNotification] = dataclasses.field(default=None)  
    in_meeting: Optional[GetAccountLockSettings200ApplicationXML1InMeeting] = dataclasses.field(default=None)  
    recording: Optional[GetAccountLockSettings200ApplicationXML1Recording] = dataclasses.field(default=None)  
    schedule_meeting: Optional[GetAccountLockSettings200ApplicationXML1ScheduleMeeting] = dataclasses.field(default=None)  
    telephony: Optional[GetAccountLockSettings200ApplicationXML1Telephony] = dataclasses.field(default=None)  
    tsp: Optional[GetAccountLockSettings200ApplicationXML1Tsp] = dataclasses.field(default=None)  
    
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum(str, Enum):
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """
    ENHANCED_ENCRYPTION = 'enhanced_encryption'
    E2EE = 'e2ee'

class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum(str, Enum):
    ZERO = '0'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement:
    r"""Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604)."""
    
    consecutive_characters_length: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consecutive_characters_length'), 'exclude': lambda f: f is None }})  
    have_letter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('have_letter'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...)."""  
    have_number: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('have_number'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...)."""  
    have_special_character: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('have_special_character'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the passcode must have at least 1 special character (!,@,#...)."""  
    have_upper_and_lower_characters: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('have_upper_and_lower_characters'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the passcode must include both uppercase and lowercase characters."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""The minimum length that the meeting/webinar passcode needs to have."""  
    only_allow_numeric: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('only_allow_numeric'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the passcode must only contain numbers and no other characters."""  
    weak_enhance_detection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weak_enhance_detection'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, users will be informed if the provided passcode is weak."""  
    
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum(str, Enum):
    r"""Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
    `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
    """
    ZERO = '0'
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings:
    r"""Specify the settings to be applied if waiting room is enabled."""
    
    participants_to_place_in_waiting_room: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants_to_place_in_waiting_room'), 'exclude': lambda f: f is None }})
    r"""Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
    `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
    """  
    users_who_can_admit_participants_from_waiting_room: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users_who_can_admit_participants_from_waiting_room'), 'exclude': lambda f: f is None }})
    r"""Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
    `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
    """  
    whitelisted_domains_for_waiting_room: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whitelisted_domains_for_waiting_room'), 'exclude': lambda f: f is None }})
    r"""If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: \\"aaa.com,bbb.com\\")."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity:
    
    auto_security: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_security'), 'exclude': lambda f: f is None }})
    r"""`true`: Require that all meetings are secured with at least one security option.
    
    This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
    """  
    embed_password_in_join_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed_password_in_join_link'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode."""  
    encryption_type: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryption_type'), 'exclude': lambda f: f is None }})
    r"""Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
    `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
    
    `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
    """  
    end_to_end_encrypted_meetings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_to_end_encrypted_meetings'), 'exclude': lambda f: f is None }})
    r"""Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field."""  
    meeting_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_password'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting."""  
    meeting_password_requirement: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_password_requirement'), 'exclude': lambda f: f is None }})
    r"""Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604)."""  
    phone_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_password'), 'exclude': lambda f: f is None }})
    r"""Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated."""  
    pmi_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pmi_password'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected."""  
    require_password_for_scheduled_meeting: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_password_for_scheduled_meeting'), 'exclude': lambda f: f is None }})
    r"""Require a passcode for meetings which have already been scheduled."""  
    require_password_for_scheduled_webinar: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_password_for_scheduled_webinar'), 'exclude': lambda f: f is None }})
    r"""Require a passcode for webinars which have already been scheduled."""  
    waiting_room: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_room'), 'exclude': lambda f: f is None }})
    r"""When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host."""  
    waiting_room_settings: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_room_settings'), 'exclude': lambda f: f is None }})
    r"""Specify the settings to be applied if waiting room is enabled."""  
    webinar_password: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webinar_password'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettings:
    
    meeting_security: Optional[GetAccountLockSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_security'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1EmailNotification:
    
    alternative_host_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_host_reminder'), 'exclude': lambda f: f is None }})
    r"""Notify the alternative host who is set or removed."""  
    cancel_meeting_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancel_meeting_reminder'), 'exclude': lambda f: f is None }})
    r"""Notify host and participants when the meeting is cancelled."""  
    cloud_recording_available_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloud_recording_available_reminder'), 'exclude': lambda f: f is None }})
    r"""Notify host when cloud recording is available."""  
    jbh_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jbh_reminder'), 'exclude': lambda f: f is None }})
    r"""Notify host when participants join the meeting before them."""  
    schedule_for_host_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_for_host_reminder'), 'exclude': lambda f: f is None }})
    r"""Notify the host there is a meeting is scheduled, rescheduled, or cancelled."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1InMeeting:
    
    alert_guest_join: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alert_guest_join'), 'exclude': lambda f: f is None }})
    r"""Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar."""  
    allow_show_zoom_windows: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_show_zoom_windows'), 'exclude': lambda f: f is None }})
    r"""Show Zoom windows during screen share."""  
    annotation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotation'), 'exclude': lambda f: f is None }})
    r"""Allow participants to use annotation tools to add information to shared screens."""  
    anonymous_question_answer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anonymous_question_answer'), 'exclude': lambda f: f is None }})  
    attendee_on_hold: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attendee_on_hold'), 'exclude': lambda f: f is None }})
    r"""Allow host to put attendee on hold.
    
    **This field has been deprecated and is no longer supported.**
    """  
    auto_answer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_answer'), 'exclude': lambda f: f is None }})
    r"""Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered."""  
    auto_saving_chat: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_saving_chat'), 'exclude': lambda f: f is None }})
    r"""Automatically save all in-meeting chats."""  
    breakout_room: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breakout_room'), 'exclude': lambda f: f is None }})
    r"""Allow host to split meeting participants into separate, smaller rooms."""  
    chat: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chat'), 'exclude': lambda f: f is None }})
    r"""Allow meeting participants to send chat message visible to all participants."""  
    closed_caption: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_caption'), 'exclude': lambda f: f is None }})
    r"""Allow host to type closed captions or assign a participant/third party device to add closed captions."""  
    co_host: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co_host'), 'exclude': lambda f: f is None }})
    r"""Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host."""  
    custom_data_center_regions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_data_center_regions'), 'exclude': lambda f: f is None }})
    r"""Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by the account."""  
    dscp_marking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dscp_marking'), 'exclude': lambda f: f is None }})
    r"""Enable DSCP marking for signaling and media packets. (Default is 56 for audio, 40 for video, and 40 for signaling.)"""  
    e2e_encryption: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('e2e_encryption'), 'exclude': lambda f: f is None }})
    r"""Require that all meetings are encrypted using AES."""  
    entry_exit_chime: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entry_exit_chime'), 'exclude': lambda f: f is None }})
    r"""Play sound when participants join or leave."""  
    far_end_camera_control: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('far_end_camera_control'), 'exclude': lambda f: f is None }})
    r"""Allow another user to take control of the camera during a meeting."""  
    feedback: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedback'), 'exclude': lambda f: f is None }})
    r"""Enable users to provide feedback to Zoom at the end of the meeting."""  
    file_transfer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_transfer'), 'exclude': lambda f: f is None }})
    r"""Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for all users on the account or not."""  
    group_hd: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_hd'), 'exclude': lambda f: f is None }})
    r"""Enable higher quality video for host and participants. This will require more bandwidth."""  
    original_audio: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_audio'), 'exclude': lambda f: f is None }})
    r"""Allow users to select original sound during a meeting."""  
    polling: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polling'), 'exclude': lambda f: f is None }})
    r"""Add 'Polls' to the meeting controls. This allows the host to survey the attendees."""  
    post_meeting_feedback: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_meeting_feedback'), 'exclude': lambda f: f is None }})
    r"""Display end-of-meeting experience feedback survey."""  
    private_chat: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_chat'), 'exclude': lambda f: f is None }})
    r"""Allow meeting participants to send a private 1:1 message to another participant."""  
    remote_control: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_control'), 'exclude': lambda f: f is None }})
    r"""During screen sharing, allow the person who is sharing to let others control the shared content."""  
    request_permission_to_unmute: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_permission_to_unmute'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option is enabled and locked for the account or not."""  
    screen_sharing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_sharing'), 'exclude': lambda f: f is None }})
    r"""Allow host and participants to share their screen or content during meetings."""  
    sending_default_email_invites: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sending_default_email_invites'), 'exclude': lambda f: f is None }})
    r"""Allow users to invite participants by email only by default."""  
    show_meeting_control_toolbar: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_meeting_control_toolbar'), 'exclude': lambda f: f is None }})
    r"""Always show meeting controls during a meeting."""  
    stereo_audio: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stereo_audio'), 'exclude': lambda f: f is None }})
    r"""Allow users to select stereo audio during a meeting."""  
    use_html_format_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_html_format_email'), 'exclude': lambda f: f is None }})
    r"""Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin."""  
    virtual_background: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtual_background'), 'exclude': lambda f: f is None }})
    r"""Enable virtual background."""  
    webinar_question_answer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webinar_question_answer'), 'exclude': lambda f: f is None }})
    r"""Allow attendees to ask questions for the host and panelists to answer in the webinar."""  
    whiteboard: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('whiteboard'), 'exclude': lambda f: f is None }})
    r"""Allow participants to share a whiteboard that includes annotation tools."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1RecordingIPAddressAccessControl:
    r"""Setting to allow cloud recording access only from specific IP address ranges."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property."""  
    ip_addresses_or_ranges: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_addresses_or_ranges'), 'exclude': lambda f: f is None }})
    r"""IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
    
    Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1Recording:
    
    account_user_access_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_user_access_recording'), 'exclude': lambda f: f is None }})
    r"""Make cloud recordings accessible to account members only."""  
    auto_delete_cmr: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_delete_cmr'), 'exclude': lambda f: f is None }})
    r"""Allow Zoom to automatically delete recordings permanently after a specified number of days."""  
    auto_recording: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_recording'), 'exclude': lambda f: f is None }})
    r"""Record meetings automatically as they start."""  
    cloud_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloud_recording'), 'exclude': lambda f: f is None }})
    r"""Allow hosts to record and save the meeting / webinar in the cloud."""  
    cloud_recording_download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloud_recording_download'), 'exclude': lambda f: f is None }})
    r"""Allow anyone with a link to the cloud recording to download."""  
    host_delete_cloud_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_delete_cloud_recording'), 'exclude': lambda f: f is None }})
    r"""Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them."""  
    ip_address_access_control: Optional[GetAccountLockSettings200ApplicationJSON1RecordingIPAddressAccessControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_address_access_control'), 'exclude': lambda f: f is None }})
    r"""Setting to allow cloud recording access only from specific IP address ranges."""  
    local_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local_recording'), 'exclude': lambda f: f is None }})
    r"""Allow hosts and participants to record the meeting to a local file."""  
    prevent_host_access_recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prevent_host_access_recording'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them."""  
    recording_authentication: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_authentication'), 'exclude': lambda f: f is None }})
    r"""Only authenticated users can view cloud recordings"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1ScheduleMeeting:
    
    audio_type: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_type'), 'exclude': lambda f: f is None }})
    r"""Determine how participants can join the audio portion of the meeting."""  
    embed_password_in_join_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed_password_in_join_link'), 'exclude': lambda f: f is None }})
    r"""If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password."""  
    enforce_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login'), 'exclude': lambda f: f is None }})
    r"""Allow only signed-in users to join meetings."""  
    enforce_login_domains: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login_domains'), 'exclude': lambda f: f is None }})
    r"""Specify the domains from which users can join a meeting."""  
    enforce_login_with_domains: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforce_login_with_domains'), 'exclude': lambda f: f is None }})
    r"""Allow only signed-in users with specified domains to join meetings."""  
    host_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_video'), 'exclude': lambda f: f is None }})
    r"""Start meetings with host video on."""  
    join_before_host: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_before_host'), 'exclude': lambda f: f is None }})
    r"""Allow participants to join the meeting before the host arrives"""  
    meeting_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_authentication'), 'exclude': lambda f: f is None }})
    r"""Only authenticated users can join meetings"""  
    not_store_meeting_topic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_store_meeting_topic'), 'exclude': lambda f: f is None }})
    r"""Hide actual meeting topic and display \\"Zoom Meeting\\" for your scheduled meetings"""  
    participant_video: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participant_video'), 'exclude': lambda f: f is None }})
    r"""Start meetings with participant video on."""  
    require_password_for_instant_meetings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_password_for_instant_meetings'), 'exclude': lambda f: f is None }})
    r"""Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    require_password_for_pmi_meetings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_password_for_pmi_meetings'), 'exclude': lambda f: f is None }})
    r"""Require participants to enter password for PMI meetings. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    require_password_for_scheduling_new_meetings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_password_for_scheduling_new_meetings'), 'exclude': lambda f: f is None }})
    r"""This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1Telephony:
    
    telephony_regions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephony_regions'), 'exclude': lambda f: f is None }})  
    third_party_audio: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('third_party_audio'), 'exclude': lambda f: f is None }})
    r"""Allow users to join the meeting using the existing 3rd party audio configuration."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1Tsp:
    
    call_out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_out'), 'exclude': lambda f: f is None }})  
    show_international_numbers_link: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_international_numbers_link'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountLockSettings200ApplicationJSON1:
    
    email_notification: Optional[GetAccountLockSettings200ApplicationJSON1EmailNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_notification'), 'exclude': lambda f: f is None }})  
    in_meeting: Optional[GetAccountLockSettings200ApplicationJSON1InMeeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_meeting'), 'exclude': lambda f: f is None }})  
    recording: Optional[GetAccountLockSettings200ApplicationJSON1Recording] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording'), 'exclude': lambda f: f is None }})  
    schedule_meeting: Optional[GetAccountLockSettings200ApplicationJSON1ScheduleMeeting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_meeting'), 'exclude': lambda f: f is None }})  
    telephony: Optional[GetAccountLockSettings200ApplicationJSON1Telephony] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephony'), 'exclude': lambda f: f is None }})  
    tsp: Optional[GetAccountLockSettings200ApplicationJSON1Tsp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tsp'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAccountLockSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_account_lock_settings_200_application_json_object: Optional[Any] = dataclasses.field(default=None)
    r"""**Error Code:** `200`<br>
    Only available for paid account:$accountId.
    
    **HTTP Status Code:** `200`<br>
    Locked settings for the Account returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    