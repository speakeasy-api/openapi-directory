"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CisLineCisLinePayFrequencyEnum(str, Enum):
    r"""The cis lines' pay frequency"""
    MONTHLY = 'Monthly'
    WEEKLY = 'Weekly'

class CisLineCisLineTaxTreatmentEnum(str, Enum):
    r"""The cis lines' tax treatment"""
    TAXABLE = 'Taxable'
    NON_TAXABLE = 'NonTaxable'
    NOTIONAL = 'Notional'
    MATERIALS = 'Materials'

class CisLineCisLineUOMEnum(str, Enum):
    r"""The cis lines' u o m"""
    NOT_SET = 'NotSet'
    MINUTE = 'Minute'
    HOUR = 'Hour'
    DAY = 'Day'
    WEEK = 'Week'
    MONTH = 'Month'
    YEAR = 'Year'
    UNIT = 'Unit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CisLineCisLine:
    
    cis_deduction: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CisDeduction'), 'exclude': lambda f: f is None }})
    r"""The cis lines' cis deduction"""  
    cis_line_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CisLineType'), 'exclude': lambda f: f is None }})
    r"""The cis lines' cis line type"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The cis lines' description"""  
    generated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Generated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The cis lines' generated"""  
    gross_pay: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GrossPay'), 'exclude': lambda f: f is None }})
    r"""The cis lines' gross pay"""  
    nominal_code_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NominalCodeKey'), 'exclude': lambda f: f is None }})
    r"""The cis lines' nominal code key"""  
    pay_frequency: Optional[CisLineCisLinePayFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayFrequency'), 'exclude': lambda f: f is None }})
    r"""The cis lines' pay frequency"""  
    tax_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxMonth'), 'exclude': lambda f: f is None }})
    r"""The cis lines' tax month"""  
    tax_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxPeriod'), 'exclude': lambda f: f is None }})
    r"""The cis lines' tax period"""  
    tax_treatment: Optional[CisLineCisLineTaxTreatmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxTreatment'), 'exclude': lambda f: f is None }})
    r"""The cis lines' tax treatment"""  
    tax_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxYear'), 'exclude': lambda f: f is None }})
    r"""The cis lines' tax year"""  
    unit_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnitRate'), 'exclude': lambda f: f is None }})
    r"""The cis lines' unit rate"""  
    units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Units'), 'exclude': lambda f: f is None }})
    r"""The cis lines' units"""  
    uom: Optional[CisLineCisLineUOMEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UOM'), 'exclude': lambda f: f is None }})
    r"""The cis lines' u o m"""  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VAT'), 'exclude': lambda f: f is None }})
    r"""The cis lines' v a t"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CisLine:
    r"""The cis line object."""
    
    cis_line: Optional[CisLineCisLine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CisLine'), 'exclude': lambda f: f is None }})  
    