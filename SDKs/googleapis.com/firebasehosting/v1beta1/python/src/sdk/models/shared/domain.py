"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import domainprovisioning as shared_domainprovisioning
from ..shared import domainredirect as shared_domainredirect
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DomainStatusEnum(str, Enum):
    r"""Output only. Additional status of the domain association."""
    DOMAIN_STATUS_UNSPECIFIED = 'DOMAIN_STATUS_UNSPECIFIED'
    DOMAIN_CHANGE_PENDING = 'DOMAIN_CHANGE_PENDING'
    DOMAIN_ACTIVE = 'DOMAIN_ACTIVE'
    DOMAIN_VERIFICATION_REQUIRED = 'DOMAIN_VERIFICATION_REQUIRED'
    DOMAIN_VERIFICATION_LOST = 'DOMAIN_VERIFICATION_LOST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Domain:
    r"""The intended behavior and status information of a domain."""
    
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""Required. The domain name of the association."""  
    domain_redirect: Optional[shared_domainredirect.DomainRedirect] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainRedirect'), 'exclude': lambda f: f is None }})
    r"""Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration."""  
    provisioning: Optional[shared_domainprovisioning.DomainProvisioning] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning'), 'exclude': lambda f: f is None }})
    r"""The current certificate provisioning status information for a domain."""  
    site: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})
    r"""Required. The site name of the association."""  
    status: Optional[DomainStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional status of the domain association."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which the domain was last updated."""  
    