// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams struct {
	// The name of the package.
	PackageName string `pathParam:"style=simple,explode=false,name=package_name"`
	// The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
	PackageType shared.PackageTypeEnum `pathParam:"style=simple,explode=false,name=package_type"`
}

// PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum - The state of the package, either active or deleted.
type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum string

const (
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnumActive  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum = "active"
	PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnumDeleted PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum = "deleted"
)

func (e *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "deleted":
		*e = PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum: %s", s)
	}
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams struct {
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The state of the package, either active or deleted.
	State *PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserRequest struct {
	PathParams  PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPathParams
	QueryParams PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQueryParams
}

type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Requires authentication
	BasicError *shared.BasicError
	// Response
	PackageVersions []shared.PackageVersion
}
