/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Transaction - Successful DELETE on Transaction resource
 */
public class Transaction {
    /**
     * If false, PFM services will ignore this transaction
     */
    @JsonProperty("active")
    public Boolean active;
    public Transaction withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Date considered by PFM services. It is used to change the month of a transaction, for example.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("application_date")
    public LocalDate applicationDate;
    public Transaction withApplicationDate(LocalDate applicationDate) {
        this.applicationDate = applicationDate;
        return this;
    }
    
    /**
     * Date used by the bank for the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("bdate")
    public LocalDate bdate;
    public Transaction withBdate(LocalDate bdate) {
        this.bdate = bdate;
        return this;
    }
    
    /**
     * Datetime used by the bank
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("bdatetime")
    public OffsetDateTime bdatetime;
    public Transaction withBdatetime(OffsetDateTime bdatetime) {
        this.bdatetime = bdatetime;
        return this;
    }
    
    /**
     * Card number associated to the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("card")
    public String card;
    public Transaction withCard(String card) {
        this.card = card;
        return this;
    }
    
    /**
     * If true, this transaction hasn't been yet debited
     */
    @JsonProperty("coming")
    public Boolean coming;
    public Transaction withComing(Boolean coming) {
        this.coming = coming;
        return this;
    }
    
    /**
     * User comment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public Transaction withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * Commission taken on the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commission")
    public Float commission;
    public Transaction withCommission(Float commission) {
        this.commission = commission;
        return this;
    }
    
    /**
     * Commission currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commission_currency")
    public java.util.Map<String, Object> commissionCurrency;
    public Transaction withCommissionCurrency(java.util.Map<String, Object> commissionCurrency) {
        this.commissionCurrency = commissionCurrency;
        return this;
    }
    
    /**
     * Counterparty
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counterparty")
    public String counterparty;
    public Transaction withCounterparty(String counterparty) {
        this.counterparty = counterparty;
        return this;
    }
    
    /**
     * Original country
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public Transaction withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Debit date
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date")
    public LocalDate date;
    public Transaction withDate(LocalDate date) {
        this.date = date;
        return this;
    }
    
    /**
     * Date when the transaction has been seen
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_scraped")
    public OffsetDateTime dateScraped;
    public Transaction withDateScraped(OffsetDateTime dateScraped) {
        this.dateScraped = dateScraped;
        return this;
    }
    
    /**
     * Datetime of the debit of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("datetime")
    public OffsetDateTime datetime;
    public Transaction withDatetime(OffsetDateTime datetime) {
        this.datetime = datetime;
        return this;
    }
    
    /**
     * If set, this transaction has been removed from the bank
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deleted")
    public OffsetDateTime deleted;
    public Transaction withDeleted(OffsetDateTime deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * Gross value of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_value")
    public Float grossValue;
    public Transaction withGrossValue(Float grossValue) {
        this.grossValue = grossValue;
        return this;
    }
    
    /**
     * ID of the transaction
     */
    @JsonProperty("id")
    public Long id;
    public Transaction withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the related account
     */
    @JsonProperty("id_account")
    public Long idAccount;
    public Transaction withIdAccount(Long idAccount) {
        this.idAccount = idAccount;
        return this;
    }
    
    /**
     * ID of the related category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_category")
    public Long idCategory;
    public Transaction withIdCategory(Long idCategory) {
        this.idCategory = idCategory;
        return this;
    }
    
    /**
     * If the transaction is part of a cluster
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_cluster")
    public Long idCluster;
    public Transaction withIdCluster(Long idCluster) {
        this.idCluster = idCluster;
        return this;
    }
    
    /**
     * Last update of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_update")
    public OffsetDateTime lastUpdate;
    public Transaction withLastUpdate(OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }
    
    /**
     * Type of transaction
     */
    @JsonProperty("nature")
    public String nature;
    public Transaction withNature(String nature) {
        this.nature = nature;
        return this;
    }
    
    /**
     * Original currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_currency")
    public java.util.Map<String, Object> originalCurrency;
    public Transaction withOriginalCurrency(java.util.Map<String, Object> originalCurrency) {
        this.originalCurrency = originalCurrency;
        return this;
    }
    
    /**
     * Gross value in the original currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_gross_value")
    public Float originalGrossValue;
    public Transaction withOriginalGrossValue(Float originalGrossValue) {
        this.originalGrossValue = originalGrossValue;
        return this;
    }
    
    /**
     * Value in the original currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_value")
    public Float originalValue;
    public Transaction withOriginalValue(Float originalValue) {
        this.originalValue = originalValue;
        return this;
    }
    
    /**
     * Full label of the transaction
     */
    @JsonProperty("original_wording")
    public String originalWording;
    public Transaction withOriginalWording(String originalWording) {
        this.originalWording = originalWording;
        return this;
    }
    
    /**
     * Realization of the transaction
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("rdate")
    public LocalDate rdate;
    public Transaction withRdate(LocalDate rdate) {
        this.rdate = rdate;
        return this;
    }
    
    /**
     * Datetime of the realization of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("rdatetime")
    public OffsetDateTime rdatetime;
    public Transaction withRdatetime(OffsetDateTime rdatetime) {
        this.rdatetime = rdatetime;
        return this;
    }
    
    /**
     * Simplified label of the transaction
     */
    @JsonProperty("simplified_wording")
    public String simplifiedWording;
    public Transaction withSimplifiedWording(String simplifiedWording) {
        this.simplifiedWording = simplifiedWording;
        return this;
    }
    
    /**
     * Internal state of the transaction
     */
    @JsonProperty("state")
    public String state;
    public Transaction withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Do not use it
     */
    @JsonProperty("stemmed_wording")
    public String stemmedWording;
    public Transaction withStemmedWording(String stemmedWording) {
        this.stemmedWording = stemmedWording;
        return this;
    }
    
    /**
     * Value of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public Float value;
    public Transaction withValue(Float value) {
        this.value = value;
        return this;
    }
    
    /**
     * Value date of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("vdate")
    public LocalDate vdate;
    public Transaction withVdate(LocalDate vdate) {
        this.vdate = vdate;
        return this;
    }
    
    /**
     * Datetime of the Value of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("vdatetime")
    public OffsetDateTime vdatetime;
    public Transaction withVdatetime(OffsetDateTime vdatetime) {
        this.vdatetime = vdatetime;
        return this;
    }
    
    /**
     * Webid of the transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webid")
    public String webid;
    public Transaction withWebid(String webid) {
        this.webid = webid;
        return this;
    }
    
    /**
     * Label set by the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wording")
    public String wording;
    public Transaction withWording(String wording) {
        this.wording = wording;
        return this;
    }
    
}
