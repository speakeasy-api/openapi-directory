// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ArticleMediaType string

const (
	ArticleMediaTypeArrayOfany ArticleMediaType = "arrayOfany"
	ArticleMediaTypeStr        ArticleMediaType = "str"
)

type ArticleMedia struct {
	ArrayOfany []interface{}
	Str        *string

	Type ArticleMediaType
}

func CreateArticleMediaArrayOfany(arrayOfany []interface{}) ArticleMedia {
	typ := ArticleMediaTypeArrayOfany

	return ArticleMedia{
		ArrayOfany: arrayOfany,
		Type:       typ,
	}
}

func CreateArticleMediaStr(str string) ArticleMedia {
	typ := ArticleMediaTypeStr

	return ArticleMedia{
		Str:  &str,
		Type: typ,
	}
}

func (u *ArticleMedia) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfany := []interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfany); err == nil {
		u.ArrayOfany = arrayOfany
		u.Type = ArticleMediaTypeArrayOfany
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = ArticleMediaTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ArticleMedia) MarshalJSON() ([]byte, error) {
	if u.ArrayOfany != nil {
		return json.Marshal(u.ArrayOfany)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

type Article struct {
	Abstract      *string       `json:"abstract,omitempty"`
	Byline        *string       `json:"byline,omitempty"`
	Column        *string       `json:"column,omitempty"`
	DesFacet      *DesFacet     `json:"des_facet,omitempty"`
	GeoFacet      *GeoFacet     `json:"geo_facet,omitempty"`
	Media         *ArticleMedia `json:"media,omitempty"`
	OrgFacet      []interface{} `json:"org_facet,omitempty"`
	PerFacet      []interface{} `json:"per_facet,omitempty"`
	PublishedDate *string       `json:"published_date,omitempty"`
	Section       *string       `json:"section,omitempty"`
	Source        *string       `json:"source,omitempty"`
	Title         *string       `json:"title,omitempty"`
	URL           *string       `json:"url,omitempty"`
}
