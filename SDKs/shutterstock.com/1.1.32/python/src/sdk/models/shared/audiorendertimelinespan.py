"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import audiorendertimelinespaninstrumentgroup as shared_audiorendertimelinespaninstrumentgroup
from ..shared import audiorendertimelinespanregion as shared_audiorendertimelinespanregion
from ..shared import audiorendertimelinespantempochanges as shared_audiorendertimelinespantempochanges
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AudioRenderTimelineSpanSpanTypeEnum(str, Enum):
    r"""Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span"""
    METERED = 'metered'
    UNMETERED = 'unmetered'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AudioRenderTimelineSpan:
    r"""The beginning of a non-overlapping period of absolute time"""
    
    span_type: AudioRenderTimelineSpanSpanTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('span_type') }})
    r"""Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span"""  
    time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})
    r"""The absolute time, in seconds, at which the span starts"""  
    id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An identifier which must be unique within the parent span"""  
    instrument_groups: Optional[list[shared_audiorendertimelinespaninstrumentgroup.AudioRenderTimelineSpanInstrumentGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instrument_groups'), 'exclude': lambda f: f is None }})
    r"""An array of instrument_group objects that are used in this span"""  
    regions: Optional[list[shared_audiorendertimelinespanregion.AudioRenderTimelineSpanRegion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regions'), 'exclude': lambda f: f is None }})
    r"""An array of region objects within the span"""  
    tempo: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tempo'), 'exclude': lambda f: f is None }})
    r"""The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo"""  
    tempo_changes: Optional[list[shared_audiorendertimelinespantempochanges.AudioRenderTimelineSpanTempoChanges]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tempo_changes'), 'exclude': lambda f: f is None }})
    r"""Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change"""  
    