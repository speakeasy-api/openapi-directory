"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleanalyticsadminv1alphaaccessfilter as shared_googleanalyticsadminv1alphaaccessfilter
from ..shared import googleanalyticsadminv1alphaaccessfilterexpressionlist as shared_googleanalyticsadminv1alphaaccessfilterexpressionlist
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1alphaAccessFilterExpression:
    r"""Expresses dimension or metric filters. The fields in the same expression need to be either all dimensions or all metrics."""
    
    access_filter: Optional[shared_googleanalyticsadminv1alphaaccessfilter.GoogleAnalyticsAdminV1alphaAccessFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessFilter'), 'exclude': lambda f: f is None }})
    r"""An expression to filter dimension or metric values."""  
    and_group: Optional[shared_googleanalyticsadminv1alphaaccessfilterexpressionlist.GoogleAnalyticsAdminV1alphaAccessFilterExpressionList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('andGroup'), 'exclude': lambda f: f is None }})
    r"""A list of filter expressions."""  
    not_expression: Optional[GoogleAnalyticsAdminV1alphaAccessFilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notExpression'), 'exclude': lambda f: f is None }})
    r"""Expresses dimension or metric filters. The fields in the same expression need to be either all dimensions or all metrics."""  
    or_group: Optional[shared_googleanalyticsadminv1alphaaccessfilterexpressionlist.GoogleAnalyticsAdminV1alphaAccessFilterExpressionList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orGroup'), 'exclude': lambda f: f is None }})
    r"""A list of filter expressions."""  
    