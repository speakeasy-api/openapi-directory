"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from enum import Enum
from typing import Optional

class PagespeedonlinePagespeedapiRunpagespeedStrategyEnum(str, Enum):
    r"""The analysis strategy to use"""
    DESKTOP = 'desktop'
    MOBILE = 'mobile'


@dataclasses.dataclass
class PagespeedonlinePagespeedapiRunpagespeedRequest:
    
    url: str = dataclasses.field(metadata={'query_param': { 'field_name': 'url', 'style': 'form', 'explode': True }})
    r"""The URL to fetch and analyze"""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    filter_third_party_resources: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter_third_party_resources', 'style': 'form', 'explode': True }})
    r"""Indicates if third party resources should be filtered out before PageSpeed analysis."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale used to localize formatted results"""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    rule: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rule', 'style': 'form', 'explode': True }})
    r"""A PageSpeed rule to run; if none are given, all rules are run"""  
    screenshot: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'screenshot', 'style': 'form', 'explode': True }})
    r"""Indicates if binary data containing a screenshot should be included"""  
    strategy: Optional[PagespeedonlinePagespeedapiRunpagespeedStrategyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'strategy', 'style': 'form', 'explode': True }})
    r"""The analysis strategy to use"""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class PagespeedonlinePagespeedapiRunpagespeedResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    