"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ec as shared_ec
from typing import Optional


@dataclasses.dataclass
class GetEcRequest:
    
    password: str = dataclasses.field(metadata={'query_param': { 'field_name': 'password', 'style': 'form', 'explode': True }})
    r"""**The password to be analyzed.**
    
    Minimum length is 4 characters; maximum length is 128 characters.
    
    Beware that certain characters like '&#35;', '&#61;' or '&#63;' must be properly encoded.
    
    For more information about this issue, please refer to RFC 3986 (\"*Uniform Resource Identifier (URI): Generic Syntax*\"), sections 2.1, 2.2 and 2.4.
    """  
    output_format: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'outputFormat', 'style': 'form', 'explode': True }})
    r"""**The format of the returned analysis.**
    
    Allowed values are *json*, *xml* and *yaml*.
    
    The default value is *xml*.
    """  
    penalty: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'penalty', 'style': 'form', 'explode': True }})
    r"""**The penalty applied to each character that is part of a word, number sequence, alphabet sequence, etc.**
    
    The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
    
    The character used as decimal separator is always '&#46;'. Hence, a parameter value like *0,33* would be illegal.
    
    The default value is *0.25*.
    """  
    req_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reqId', 'style': 'form', 'explode': True }})
    r"""**An identifier for this request.**
    
    The request identifier is a string that must match the regular expression */(?i)^[a-z0-9]{8,16}$/*.
    
    This identifier is echoed in the returned response. Its value has no effect on the password analysis.
    
    If this parameter is unset, a randomly generated identifier will be automatically assigned to this request.
    """  
    

@dataclasses.dataclass
class GetEcResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    ec: Optional[shared_ec.Ec] = dataclasses.field(default=None)
    r"""The password analysis, including the calculated entropy."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    