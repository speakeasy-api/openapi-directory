<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SSHKeys 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an SSH key
     * 
     * Deletes an SSH key. It cannot be used anymore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdResponse
     */
	public function deleteSshKeysId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh_keys/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSshKeysIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all SSH keys
     * 
     * Returns all SSH key objects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSshKeysRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSshKeysResponse
     */
	public function getSshKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetSshKeysRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSshKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh_keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSshKeysRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSshKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSshKeys200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSshKeys200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a SSH key
     * 
     * Returns a specific SSH key object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdResponse
     */
	public function getSshKeysId(
        \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh_keys/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSshKeysIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSshKeysId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSshKeysId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an SSH key
     * 
     * Creates a new SSH key with the given `name` and `public_key`. Once an SSH key is created, it can be used in other calls such as creating Servers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSshKeysRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSshKeysResponse
     */
	public function postSshKeys(
        \OpenAPI\OpenAPI\Models\Operations\PostSshKeysRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSshKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh_keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSshKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSshKeys201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostSshKeys201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an SSH key
     * 
     * Updates an SSH key. You can update an SSH key name and an SSH key labels.
     * 
     * Please note that when updating labels, the SSH key current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdResponse
     */
	public function putSshKeysId(
        \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh_keys/{id}', \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSshKeysIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putSshKeysId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutSshKeysId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}