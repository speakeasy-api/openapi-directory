// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UsersUpdateSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// UsersUpdateRequestBody - The data for the created user
type UsersUpdateRequestBody struct {
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
}

type UsersUpdateDefaultApplicationJSONErrorCodeEnum string

const (
	UsersUpdateDefaultApplicationJSONErrorCodeEnumBadRequest          UsersUpdateDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumConflict            UsersUpdateDefaultApplicationJSONErrorCodeEnum = "Conflict"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumNotAcceptable       UsersUpdateDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumNotFound            UsersUpdateDefaultApplicationJSONErrorCodeEnum = "NotFound"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumInternalServerError UsersUpdateDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumUnauthorized        UsersUpdateDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	UsersUpdateDefaultApplicationJSONErrorCodeEnumTooManyRequests     UsersUpdateDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UsersUpdateDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UsersUpdateDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersUpdateDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UsersUpdateDefaultApplicationJSONError struct {
	Code    UsersUpdateDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                         `json:"message"`
}

// UsersUpdateDefaultApplicationJSON - Error
type UsersUpdateDefaultApplicationJSON struct {
	Error UsersUpdateDefaultApplicationJSONError `json:"error"`
}

// UsersUpdate200ApplicationJSONOriginEnum - The creation origin of this user
type UsersUpdate200ApplicationJSONOriginEnum string

const (
	UsersUpdate200ApplicationJSONOriginEnumAppcenter UsersUpdate200ApplicationJSONOriginEnum = "appcenter"
	UsersUpdate200ApplicationJSONOriginEnumHockeyapp UsersUpdate200ApplicationJSONOriginEnum = "hockeyapp"
	UsersUpdate200ApplicationJSONOriginEnumCodepush  UsersUpdate200ApplicationJSONOriginEnum = "codepush"
)

func (e *UsersUpdate200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = UsersUpdate200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersUpdate200ApplicationJSONOriginEnum: %s", s)
	}
}

type UsersUpdate200ApplicationJSONPermissionsEnum string

const (
	UsersUpdate200ApplicationJSONPermissionsEnumManager   UsersUpdate200ApplicationJSONPermissionsEnum = "manager"
	UsersUpdate200ApplicationJSONPermissionsEnumDeveloper UsersUpdate200ApplicationJSONPermissionsEnum = "developer"
	UsersUpdate200ApplicationJSONPermissionsEnumViewer    UsersUpdate200ApplicationJSONPermissionsEnum = "viewer"
	UsersUpdate200ApplicationJSONPermissionsEnumTester    UsersUpdate200ApplicationJSONPermissionsEnum = "tester"
)

func (e *UsersUpdate200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = UsersUpdate200ApplicationJSONPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsersUpdate200ApplicationJSONPermissionsEnum: %s", s)
	}
}

// UsersUpdate200ApplicationJSON - Success
type UsersUpdate200ApplicationJSON struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID string `json:"id"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The creation origin of this user
	Origin UsersUpdate200ApplicationJSONOriginEnum `json:"origin"`
	// The permissions the user has for the app
	Permissions []UsersUpdate200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type UsersUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UsersUpdate200ApplicationJSONObject *UsersUpdate200ApplicationJSON
	// Error
	UsersUpdateDefaultApplicationJSONObject *UsersUpdateDefaultApplicationJSON
}
