<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * WorkItemServiceState - The Dataflow service's idea of the current state of a WorkItem being processed by a worker.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class WorkItemServiceState
{
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Status $completeWorkStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('completeWorkStatus')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Status')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Status $completeWorkStatus = null;
    
    /**
     * Other data returned by the service, specific to the particular worker harness.
     * 
     * @var ?array<string, mixed> $harnessData
     */
	#[\JMS\Serializer\Annotation\SerializedName('harnessData')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $harnessData = null;
    
    /**
     * Proto describing a hot key detected on a given WorkItem.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HotKeyDetection $hotKeyDetection
     */
	#[\JMS\Serializer\Annotation\SerializedName('hotKeyDetection')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\HotKeyDetection')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HotKeyDetection $hotKeyDetection = null;
    
    /**
     * Time at which the current lease will expire.
     * 
     * @var ?string $leaseExpireTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('leaseExpireTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $leaseExpireTime = null;
    
    /**
     * The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\MetricShortId> $metricShortId
     */
	#[\JMS\Serializer\Annotation\SerializedName('metricShortId')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\MetricShortId>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metricShortId = null;
    
    /**
     * The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.
     * 
     * @var ?string $nextReportIndex
     */
	#[\JMS\Serializer\Annotation\SerializedName('nextReportIndex')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $nextReportIndex = null;
    
    /**
     * New recommended reporting interval.
     * 
     * @var ?string $reportStatusInterval
     */
	#[\JMS\Serializer\Annotation\SerializedName('reportStatusInterval')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reportStatusInterval = null;
    
    /**
     * A suggestion by the service to the worker to dynamically split the WorkItem.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ApproximateSplitRequest $splitRequest
     */
	#[\JMS\Serializer\Annotation\SerializedName('splitRequest')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ApproximateSplitRequest')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ApproximateSplitRequest $splitRequest = null;
    
    /**
     * Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ApproximateProgress $suggestedStopPoint
     */
	#[\JMS\Serializer\Annotation\SerializedName('suggestedStopPoint')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ApproximateProgress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ApproximateProgress $suggestedStopPoint = null;
    
    /**
     * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Position $suggestedStopPosition
     */
	#[\JMS\Serializer\Annotation\SerializedName('suggestedStopPosition')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Position')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Position $suggestedStopPosition = null;
    
	public function __construct()
	{
		$this->completeWorkStatus = null;
		$this->harnessData = null;
		$this->hotKeyDetection = null;
		$this->leaseExpireTime = null;
		$this->metricShortId = null;
		$this->nextReportIndex = null;
		$this->reportStatusInterval = null;
		$this->splitRequest = null;
		$this->suggestedStopPoint = null;
		$this->suggestedStopPosition = null;
	}
}
