"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import issuancepolicy as shared_issuancepolicy
from ..shared import publishingoptions as shared_publishingoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CaPoolTierEnum(str, Enum):
    r"""Required. Immutable. The Tier of this CaPool."""
    TIER_UNSPECIFIED = 'TIER_UNSPECIFIED'
    ENTERPRISE = 'ENTERPRISE'
    DEVOPS = 'DEVOPS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CaPool:
    r"""A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor."""
    
    issuance_policy: Optional[shared_issuancepolicy.IssuancePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuancePolicy'), 'exclude': lambda f: f is None }})
    r"""Defines controls over all certificate issuance within a CaPool."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Labels with user-defined metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`."""  
    publishing_options: Optional[shared_publishingoptions.PublishingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishingOptions'), 'exclude': lambda f: f is None }})
    r"""Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool."""  
    tier: Optional[CaPoolTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The Tier of this CaPool."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CaPoolInput:
    r"""A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor."""
    
    issuance_policy: Optional[shared_issuancepolicy.IssuancePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuancePolicy'), 'exclude': lambda f: f is None }})
    r"""Defines controls over all certificate issuance within a CaPool."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Labels with user-defined metadata."""  
    publishing_options: Optional[shared_publishingoptions.PublishingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishingOptions'), 'exclude': lambda f: f is None }})
    r"""Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool."""  
    tier: Optional[CaPoolTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The Tier of this CaPool."""  
    