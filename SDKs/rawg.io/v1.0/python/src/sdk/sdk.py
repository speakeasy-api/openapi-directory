"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .creator_roles import CreatorRoles
from .creators import Creators
from .developers import Developers
from .games import Games
from .genres import Genres
from .platforms import Platforms
from .publishers import Publishers
from .stores import Stores
from .tags import Tags

SERVERS = [
    "https://api.rawg.io/api",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The largest open video games database.
    
    ### Why build on RAWG
    - More than 350,000 games for 50 platforms including mobiles.
    - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates,
    Metacritic ratings.
    - Where to buy: links to digital distribution services
    - Similar games based on visual similarity.
    - Player activity data: Steam average playtime and RAWG player counts and ratings.
    - Actively developing and constantly getting better by user contribution and our algorithms.
    
    ### Terms of Use
    - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active
    hyperlink from every page where the data of RAWG is used.
    - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000
    page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for
    commercial terms.
    - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy
    to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt,
    and we will talk it through.
    - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs.
    If you donâ€™t provide it, we may ban your requests.
    
    __[Read more](https://rawg.io/apidocs)__.
    """
    creator_roles: CreatorRoles
    creators: Creators
    developers: Developers
    games: Games
    genres: Genres
    platforms: Platforms
    publishers: Publishers
    stores: Stores
    tags: Tags

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.creator_roles = CreatorRoles(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.creators = Creators(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.developers = Developers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.games = Games(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.genres = Genres(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.platforms = Platforms(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.publishers = Publishers(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stores = Stores(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tags = Tags(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    