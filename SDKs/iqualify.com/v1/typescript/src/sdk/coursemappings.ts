/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CourseMappings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove course mapping
   *
   * @remarks
   * Removes the course mapping between the offering and the externalCourseId.
   */
  deleteCourseMappingsOfferingIdExternalCourseId(
    req: operations.DeleteCourseMappingsOfferingIdExternalCourseIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteCourseMappingsOfferingIdExternalCourseIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteCourseMappingsOfferingIdExternalCourseIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/course-mappings/{offeringId}/{externalCourseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteCourseMappingsOfferingIdExternalCourseIdResponse =
        new operations.DeleteCourseMappingsOfferingIdExternalCourseIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteCourseMappingsOfferingIdExternalCourseId200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find course mappings
   *
   * @remarks
   * Returns all course mappings for course offerings.
   */
  getCourseMappings(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCourseMappingsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/course-mappings";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCourseMappingsResponse =
        new operations.GetCourseMappingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.courseMappings = utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find course mappings by externalCourseId
   *
   * @remarks
   * Responds with course mapping details by externalCourseId.
   */
  getCourseMappingsExternalcourseExternalCourseId(
    req: operations.GetCourseMappingsExternalcourseExternalCourseIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCourseMappingsExternalcourseExternalCourseIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetCourseMappingsExternalcourseExternalCourseIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/course-mappings/externalcourse/{externalCourseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCourseMappingsExternalcourseExternalCourseIdResponse =
        new operations.GetCourseMappingsExternalcourseExternalCourseIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCourseMappingsExternalcourseExternalCourseId200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find course mappings by offeringId
   *
   * @remarks
   * Responds with course mapping details by offeringId.
   */
  getCourseMappingsOfferingId(
    req: operations.GetCourseMappingsOfferingIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCourseMappingsOfferingIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCourseMappingsOfferingIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/course-mappings/{offeringId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCourseMappingsOfferingIdResponse =
        new operations.GetCourseMappingsOfferingIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getCourseMappingsOfferingId200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add course mapping
   *
   * @remarks
   * Creates a mapping between the offering and the externalCourseId.
   */
  putCourseMappingsOfferingIdExternalCourseId(
    req: operations.PutCourseMappingsOfferingIdExternalCourseIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutCourseMappingsOfferingIdExternalCourseIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutCourseMappingsOfferingIdExternalCourseIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/course-mappings/{offeringId}/{externalCourseId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutCourseMappingsOfferingIdExternalCourseIdResponse =
        new operations.PutCourseMappingsOfferingIdExternalCourseIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putCourseMappingsOfferingIdExternalCourseId200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
