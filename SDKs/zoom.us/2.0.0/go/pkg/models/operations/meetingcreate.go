// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum string

const (
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnumMinus1 MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum = "-1"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnumOne    MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum = "1"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnumTwo    MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum = "2"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnumThree  MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum = "3"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnumFour   MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum = "4"
)

func (e *MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum string

const (
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumOne   MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "1"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumTwo   MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "2"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumThree MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "3"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumFour  MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "4"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumFive  MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "5"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumSix   MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "6"
	MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnumSeven MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type MeetingCreateApplicationJSONRecurrenceTypeEnum string

const (
	MeetingCreateApplicationJSONRecurrenceTypeEnumOne   MeetingCreateApplicationJSONRecurrenceTypeEnum = "1"
	MeetingCreateApplicationJSONRecurrenceTypeEnumTwo   MeetingCreateApplicationJSONRecurrenceTypeEnum = "2"
	MeetingCreateApplicationJSONRecurrenceTypeEnumThree MeetingCreateApplicationJSONRecurrenceTypeEnum = "3"
)

func (e *MeetingCreateApplicationJSONRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreateApplicationJSONRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONRecurrenceTypeEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum string

const (
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumOne   MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "1"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumTwo   MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "2"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumThree MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "3"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumFour  MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "4"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumFive  MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "5"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumSix   MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "6"
	MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnumSeven MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum = "7"
)

func (e *MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type MeetingCreateApplicationJSONRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *MeetingCreateApplicationJSONRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *MeetingCreateApplicationJSONRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type MeetingCreateApplicationJSONRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *MeetingCreateApplicationJSONRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

// MeetingCreateApplicationJSONSettingsApprovalTypeEnum - The default value is `2`. To enable registration required, set the approval type to `0` or `1`. Values include:<br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type MeetingCreateApplicationJSONSettingsApprovalTypeEnum string

const (
	MeetingCreateApplicationJSONSettingsApprovalTypeEnumZero MeetingCreateApplicationJSONSettingsApprovalTypeEnum = "0"
	MeetingCreateApplicationJSONSettingsApprovalTypeEnumOne  MeetingCreateApplicationJSONSettingsApprovalTypeEnum = "1"
	MeetingCreateApplicationJSONSettingsApprovalTypeEnumTwo  MeetingCreateApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *MeetingCreateApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = MeetingCreateApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string `json:"approved_list,omitempty"`
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string `json:"denied_list,omitempty"`
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool `json:"enable,omitempty"`
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum `json:"method,omitempty"`
}

// MeetingCreateApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type MeetingCreateApplicationJSONSettingsAudioEnum string

const (
	MeetingCreateApplicationJSONSettingsAudioEnumBoth      MeetingCreateApplicationJSONSettingsAudioEnum = "both"
	MeetingCreateApplicationJSONSettingsAudioEnumTelephony MeetingCreateApplicationJSONSettingsAudioEnum = "telephony"
	MeetingCreateApplicationJSONSettingsAudioEnumVoip      MeetingCreateApplicationJSONSettingsAudioEnum = "voip"
)

func (e *MeetingCreateApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = MeetingCreateApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsAudioEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type MeetingCreateApplicationJSONSettingsAutoRecordingEnum string

const (
	MeetingCreateApplicationJSONSettingsAutoRecordingEnumLocal MeetingCreateApplicationJSONSettingsAutoRecordingEnum = "local"
	MeetingCreateApplicationJSONSettingsAutoRecordingEnumCloud MeetingCreateApplicationJSONSettingsAutoRecordingEnum = "cloud"
	MeetingCreateApplicationJSONSettingsAutoRecordingEnumNone  MeetingCreateApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *MeetingCreateApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = MeetingCreateApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

type MeetingCreateApplicationJSONSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string `json:"name,omitempty"`
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string `json:"participants,omitempty"`
}

// MeetingCreateApplicationJSONSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type MeetingCreateApplicationJSONSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool `json:"enable,omitempty"`
	// Create room(s).
	Rooms []MeetingCreateApplicationJSONSettingsBreakoutRoomRooms `json:"rooms,omitempty"`
}

// MeetingCreateApplicationJSONSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type MeetingCreateApplicationJSONSettingsEncryptionTypeEnum string

const (
	MeetingCreateApplicationJSONSettingsEncryptionTypeEnumEnhancedEncryption MeetingCreateApplicationJSONSettingsEncryptionTypeEnum = "enhanced_encryption"
	MeetingCreateApplicationJSONSettingsEncryptionTypeEnumE2ee               MeetingCreateApplicationJSONSettingsEncryptionTypeEnum = "e2ee"
)

func (e *MeetingCreateApplicationJSONSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = MeetingCreateApplicationJSONSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsEncryptionTypeEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type MeetingCreateApplicationJSONSettingsJbhTimeEnum string

const (
	MeetingCreateApplicationJSONSettingsJbhTimeEnumZero MeetingCreateApplicationJSONSettingsJbhTimeEnum = "0"
	MeetingCreateApplicationJSONSettingsJbhTimeEnumFive MeetingCreateApplicationJSONSettingsJbhTimeEnum = "5"
	MeetingCreateApplicationJSONSettingsJbhTimeEnumTen  MeetingCreateApplicationJSONSettingsJbhTimeEnum = "10"
)

func (e *MeetingCreateApplicationJSONSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = MeetingCreateApplicationJSONSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsJbhTimeEnum: %s", s)
	}
}

type MeetingCreateApplicationJSONSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string `json:"email,omitempty"`
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string `json:"languages,omitempty"`
}

// MeetingCreateApplicationJSONSettingsLanguageInterpretation - Language interpretation [settings](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for meetings.
//
// **Note:** This feature is only available on certain Webinar add-on, Education, Business and higher plans. If this feature is not enabled on the host's account, this setting will not be applied for the meeting.
type MeetingCreateApplicationJSONSettingsLanguageInterpretation struct {
	// Indicate whether or not you would like to enable [language interpretation](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for this meeting.
	Enable *bool `json:"enable,omitempty"`
	// Information associated with the interpreter.
	Interpreters []MeetingCreateApplicationJSONSettingsLanguageInterpretationInterpreters `json:"interpreters,omitempty"`
}

// MeetingCreateApplicationJSONSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type MeetingCreateApplicationJSONSettingsRegistrationTypeEnum string

const (
	MeetingCreateApplicationJSONSettingsRegistrationTypeEnumOne   MeetingCreateApplicationJSONSettingsRegistrationTypeEnum = "1"
	MeetingCreateApplicationJSONSettingsRegistrationTypeEnumTwo   MeetingCreateApplicationJSONSettingsRegistrationTypeEnum = "2"
	MeetingCreateApplicationJSONSettingsRegistrationTypeEnumThree MeetingCreateApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *MeetingCreateApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreateApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// MeetingCreateApplicationJSONSettings - Meeting settings.
type MeetingCreateApplicationJSONSettings struct {
	// Enable additional [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) for this meeting. Provide the value in the form of array of country code(s) for the countries which are available as data center regions in the [account settings](https://zoom.us/account/setting) but have been opt out of in the user settings. For instance, let's say that in your account settings, the data center regions that have been selected are Europe, Honkong, Australia, India, Latin America, Japan, China, United States,and Canada. The complete list of available data center regions for your account is: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]. In [user settings](https://zoom.us/profile/setting), you have opted out of India(IN) and Japan(TY) for meeting and webinar traffic routing. If you would like, you can still include India and Japan as additional data centers for this meeting using this field. To include India and Japan as additional data center regions, you would provide ["IN", "TY"] as the value.
	AdditionalDataCenterRegions []string `json:"additional_data_center_regions,omitempty"`
	// If set to `true`, attendees will be allowed to join a meeting from multiple devices.
	//
	// **Note:** This setting is only applied for meetings that have enabled registration.
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host's emails or IDs: multiple values separated by a comma.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool `json:"alternative_hosts_email_notification,omitempty"`
	// The default value is `2`. To enable registration required, set the approval type to `0` or `1`. Values include:<br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *MeetingCreateApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *MeetingCreateApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions `json:"approved_or_denied_countries_or_regions,omitempty"`
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *MeetingCreateApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// Meeting authentication domains. This option, allows you to specify the rule so that Zoom users, whose email address contains a certain domain, can join the meeting. You can either provide multiple domains, using a comma in between and/or use a wildcard for listing domains.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Specify the authentication type for users to join a meeting with`meeting_authentication` setting set to `true`. The value of this field can be retrieved from the `id` field within `authentication_options` array in the response of [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings).
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *MeetingCreateApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *MeetingCreateApplicationJSONSettingsBreakoutRoom `json:"breakout_room,omitempty"`
	// Close registration after event date
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Host meeting in China.
	CnMeeting *bool `json:"cn_meeting,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *MeetingCreateApplicationJSONSettingsEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Start video when the host joins the meeting.
	HostVideo *bool `json:"host_video,omitempty"`
	// Host meeting in India.
	InMeeting *bool `json:"in_meeting,omitempty"`
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *MeetingCreateApplicationJSONSettingsJbhTimeEnum `json:"jbh_time,omitempty"`
	// Allow participants to join the meeting before the host starts the meeting. This field can only used for scheduled or recurring meetings.
	//
	// **Note:** If waiting room is enabled, the **join before host** setting will be disabled.
	JoinBeforeHost *bool `json:"join_before_host,omitempty"`
	// Language interpretation [settings](https://support.zoom.us/hc/en-us/articles/360034919791-Language-interpretation-in-meetings-and-webinars#h_01EGGQFD3Q4BST3378SA762MJ1) for meetings.
	//
	// **Note:** This feature is only available on certain Webinar add-on, Education, Business and higher plans. If this feature is not enabled on the host's account, this setting will not be applied for the meeting.
	LanguageInterpretation *MeetingCreateApplicationJSONSettingsLanguageInterpretation `json:"language_interpretation,omitempty"`
	// Only [authenticated](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) users can join meeting if the value of this field is set to `true`.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Mute participants upon entry.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start video when participants join the meeting.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *MeetingCreateApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// If set to `true`, the registration page for the meeting will include social share buttons.
	//
	// **Note:** This setting is only applied for meetings that have enabled registration.
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Use Personal Meeting ID instead of an automatically generated meeting ID. It can only be used for scheduled meetings, instant meetings and recurring meetings with no fixed time.
	UsePmi *bool `json:"use_pmi,omitempty"`
	// Enable waiting room. Note that if the value of this field is set to `true`, it will override and disable the `join_before_host` setting.
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Add watermark when viewing a shared screen.
	Watermark *bool `json:"watermark,omitempty"`
}

type MeetingCreateApplicationJSONTrackingFields struct {
	// Label of the tracking field.
	Field string `json:"field"`
	// Tracking fields value
	Value *string `json:"value,omitempty"`
}

// MeetingCreateApplicationJSONTypeEnum - Meeting Type:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.
type MeetingCreateApplicationJSONTypeEnum string

const (
	MeetingCreateApplicationJSONTypeEnumOne   MeetingCreateApplicationJSONTypeEnum = "1"
	MeetingCreateApplicationJSONTypeEnumTwo   MeetingCreateApplicationJSONTypeEnum = "2"
	MeetingCreateApplicationJSONTypeEnumThree MeetingCreateApplicationJSONTypeEnum = "3"
	MeetingCreateApplicationJSONTypeEnumEight MeetingCreateApplicationJSONTypeEnum = "8"
)

func (e *MeetingCreateApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = MeetingCreateApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreateApplicationJSONTypeEnum: %s", s)
	}
}

// MeetingCreateApplicationJSON - Base object for meeting.
type MeetingCreateApplicationJSON struct {
	// Meeting description.
	Agenda *string `json:"agenda,omitempty"`
	// Meeting duration (minutes). Used for scheduled meetings only.
	Duration *int64 `json:"duration,omitempty"`
	// Passcode to join the meeting. By default, passcode may only contain the following characters: [a-z A-Z 0-9 @ - _ *] and can have a maximum of 10 characters.
	//
	// **Note:** If the account owner or the admin has configured [minimum passcode requirement settings](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604), the passcode value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	Password *string `json:"password,omitempty"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *MeetingCreateApplicationJSONRecurrence `json:"recurrence,omitempty"`
	// If you would like to schedule this meeting for someone else in your account, provide the Zoom user id or email address of the user here.
	ScheduleFor *string `json:"schedule_for,omitempty"`
	// Meeting settings.
	Settings *MeetingCreateApplicationJSONSettings `json:"settings,omitempty"`
	// Meeting start time. We support two formats for `start_time` - local time and GMT.<br>
	//
	// To set time as GMT the format should be `yyyy-MM-dd`T`HH:mm:ssZ`. Example: "2020-03-31T12:02:00Z"
	//
	// To set time using a specific timezone, use `yyyy-MM-dd`T`HH:mm:ss` format and specify the timezone [ID](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) in the `timezone` field OR leave it blank and the timezone set on your Zoom account will be used. You can also set the time as UTC as the timezone field.
	//
	// The `start_time` should only be used for scheduled and / or recurring webinars with fixed time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Unique identifier of the **admin meeting template**. To create admin meeting templates, contact the Zoom support team.
	//
	// Use this field if you would like to [schedule the meeting from a admin meeting template](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates#h_86f06cff-0852-4998-81c5-c83663c176fb). You can retrieve the value of this field by calling the [List meeting templates](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/listmeetingtemplates) API.
	TemplateID *string `json:"template_id,omitempty"`
	// Time zone to format start_time. For example, "America/Los_Angeles". For scheduled meetings only. Please reference our [time zone](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#timezones) list for supported time zones and their formats.
	Timezone *string `json:"timezone,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []MeetingCreateApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting Type:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.
	Type *MeetingCreateApplicationJSONTypeEnum `json:"type,omitempty"`
}

type MeetingCreateRequest struct {
	// Meeting object.
	RequestBody MeetingCreateApplicationJSON `request:"mediaType=application/json"`
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// MeetingCreate201ApplicationXMLOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type MeetingCreate201ApplicationXMLOccurrences struct {
	// Duration.
	Duration *int64
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string
	// Start time.
	StartTime *time.Time
	// Occurrence status.
	Status *string
}

// MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum string

const (
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnumMinus1 MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum = "-1"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnumOne    MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum = "1"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnumTwo    MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum = "2"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnumThree  MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum = "3"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnumFour   MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum = "4"
)

func (e *MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum string

const (
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumOne   MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "1"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumTwo   MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "2"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumThree MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "3"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumFour  MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "4"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumFive  MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "5"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumSix   MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "6"
	MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnumSeven MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type MeetingCreate201ApplicationXMLRecurrenceTypeEnum string

const (
	MeetingCreate201ApplicationXMLRecurrenceTypeEnumOne   MeetingCreate201ApplicationXMLRecurrenceTypeEnum = "1"
	MeetingCreate201ApplicationXMLRecurrenceTypeEnumTwo   MeetingCreate201ApplicationXMLRecurrenceTypeEnum = "2"
	MeetingCreate201ApplicationXMLRecurrenceTypeEnumThree MeetingCreate201ApplicationXMLRecurrenceTypeEnum = "3"
)

func (e *MeetingCreate201ApplicationXMLRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreate201ApplicationXMLRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLRecurrenceTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum string

const (
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumOne   MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "1"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumTwo   MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "2"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumThree MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "3"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumFour  MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "4"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumFive  MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "5"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumSix   MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "6"
	MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnumSeven MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum = "7"
)

func (e *MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type MeetingCreate201ApplicationXMLRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekEnum
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *MeetingCreate201ApplicationXMLRecurrenceMonthlyWeekDayEnum
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type MeetingCreate201ApplicationXMLRecurrenceTypeEnum
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *MeetingCreate201ApplicationXMLRecurrenceWeeklyDaysEnum
}

// MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum - Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum string

const (
	MeetingCreate201ApplicationXMLSettingsApprovalTypeEnumZero MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum = "0"
	MeetingCreate201ApplicationXMLSettingsApprovalTypeEnumOne  MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum = "1"
	MeetingCreate201ApplicationXMLSettingsApprovalTypeEnumTwo  MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum = "2"
)

func (e *MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum
}

// MeetingCreate201ApplicationXMLSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type MeetingCreate201ApplicationXMLSettingsAudioEnum string

const (
	MeetingCreate201ApplicationXMLSettingsAudioEnumBoth      MeetingCreate201ApplicationXMLSettingsAudioEnum = "both"
	MeetingCreate201ApplicationXMLSettingsAudioEnumTelephony MeetingCreate201ApplicationXMLSettingsAudioEnum = "telephony"
	MeetingCreate201ApplicationXMLSettingsAudioEnumVoip      MeetingCreate201ApplicationXMLSettingsAudioEnum = "voip"
)

func (e *MeetingCreate201ApplicationXMLSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = MeetingCreate201ApplicationXMLSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsAudioEnum: %s", s)
	}
}

type MeetingCreate201ApplicationXMLSettingsAuthenticationException struct {
	// Email address of the participant.
	Email *string
	// Name of the participant.
	Name *string
}

// MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum string

const (
	MeetingCreate201ApplicationXMLSettingsAutoRecordingEnumLocal MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum = "local"
	MeetingCreate201ApplicationXMLSettingsAutoRecordingEnumCloud MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum = "cloud"
	MeetingCreate201ApplicationXMLSettingsAutoRecordingEnumNone  MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum = "none"
)

func (e *MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum: %s", s)
	}
}

type MeetingCreate201ApplicationXMLSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string
}

// MeetingCreate201ApplicationXMLSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type MeetingCreate201ApplicationXMLSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool
	// Create room(s).
	Rooms []MeetingCreate201ApplicationXMLSettingsBreakoutRoomRooms
}

type MeetingCreate201ApplicationXMLSettingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string
	// Value of the custom key associated with the user.
	Value *string
}

// MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum string

const (
	MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnumEnhancedEncryption MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum = "enhanced_encryption"
	MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnumE2ee               MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum = "e2ee"
)

func (e *MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum - Type of number.
type MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum string

const (
	MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnumToll     MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum = "toll"
	MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnumTollfree MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum = "tollfree"
)

func (e *MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		*e = MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum: %s", s)
	}
}

type MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbers struct {
	// City of the number, if any. For example, Chicago.
	City *string
	// Country code. For example, BR.
	Country *string
	// Full name of country. For example, Brazil.
	CountryName *string
	// Phone number. For example, +1 2332357613.
	Number *string
	// Type of number.
	Type *MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbersTypeEnum
}

// MeetingCreate201ApplicationXMLSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type MeetingCreate201ApplicationXMLSettingsJbhTimeEnum string

const (
	MeetingCreate201ApplicationXMLSettingsJbhTimeEnumZero MeetingCreate201ApplicationXMLSettingsJbhTimeEnum = "0"
	MeetingCreate201ApplicationXMLSettingsJbhTimeEnumFive MeetingCreate201ApplicationXMLSettingsJbhTimeEnum = "5"
	MeetingCreate201ApplicationXMLSettingsJbhTimeEnumTen  MeetingCreate201ApplicationXMLSettingsJbhTimeEnum = "10"
)

func (e *MeetingCreate201ApplicationXMLSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = MeetingCreate201ApplicationXMLSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsJbhTimeEnum: %s", s)
	}
}

type MeetingCreate201ApplicationXMLSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string
}

type MeetingCreate201ApplicationXMLSettingsLanguageInterpretation struct {
	Enable *bool
	// Information associated with the interpreter.
	Interpreters []MeetingCreate201ApplicationXMLSettingsLanguageInterpretationInterpreters
}

// MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum string

const (
	MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnumOne   MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum = "1"
	MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnumTwo   MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum = "2"
	MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnumThree MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum = "3"
)

func (e *MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXMLSettings - Meeting settings.
type MeetingCreate201ApplicationXMLSettings struct {
	// Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	AllowMultipleDevices *bool
	// Alternative host's emails or IDs: multiple values are separated by a semicolon.
	AlternativeHosts *string
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool
	// Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *MeetingCreate201ApplicationXMLSettingsApprovalTypeEnum
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *MeetingCreate201ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *MeetingCreate201ApplicationXMLSettingsAudioEnum
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string
	// The participants added here will receive unique meeting invite links and bypass authentication.
	AuthenticationException []MeetingCreate201ApplicationXMLSettingsAuthenticationException
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string
	// Meeting authentication option id.
	AuthenticationOption *string
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *MeetingCreate201ApplicationXMLSettingsAutoRecordingEnum
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *MeetingCreate201ApplicationXMLSettingsBreakoutRoom
	// Close registration after event date
	CloseRegistration *bool
	// Host meeting in China.
	CnMeeting *bool
	// Contact email for registration
	ContactEmail *string
	// Contact name for registration
	ContactName *string
	// Custom keys and values assigned to the meeting.
	CustomKeys []MeetingCreate201ApplicationXMLSettingsCustomKeys
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *MeetingCreate201ApplicationXMLSettingsEncryptionTypeEnum
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLogin *bool
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLoginDomains *string
	// List of global dial-in countries
	GlobalDialInCountries []string
	// Global Dial-in Countries/Regions
	GlobalDialInNumbers []MeetingCreate201ApplicationXMLSettingsGlobalDialInNumbers
	// Start video when the host joins the meeting.
	HostVideo *bool
	// Host meeting in India.
	InMeeting *bool
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *MeetingCreate201ApplicationXMLSettingsJbhTimeEnum
	// Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
	JoinBeforeHost         *bool
	LanguageInterpretation *MeetingCreate201ApplicationXMLSettingsLanguageInterpretation
	// `true`- Only authenticated users can join meetings.
	MeetingAuthentication *bool
	// Mute participants upon entry.
	MuteUponEntry *bool
	// Start video when participants join the meeting.
	ParticipantVideo *bool
	// Send confirmation email to registrants upon successful registration.
	RegistrantsConfirmationEmail *bool
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *MeetingCreate201ApplicationXMLSettingsRegistrationTypeEnum
	// Show social share buttons on the meeting registration page.
	// This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	ShowShareButton *bool
	// Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
	UsePmi *bool
	// Enable waiting room
	WaitingRoom *bool
	// Add watermark when viewing a shared screen.
	Watermark *bool
}

type MeetingCreate201ApplicationXMLTrackingFields struct {
	// Label of the tracking field.
	Field *string
	// Value for the field.
	Value *string
	// Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
	//
	// `true`: Tracking field is visible. <br>
	//
	// `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
	Visible *bool
}

// MeetingCreate201ApplicationXMLTypeEnum - Meeting Type
type MeetingCreate201ApplicationXMLTypeEnum string

const (
	MeetingCreate201ApplicationXMLTypeEnumOne   MeetingCreate201ApplicationXMLTypeEnum = "1"
	MeetingCreate201ApplicationXMLTypeEnumTwo   MeetingCreate201ApplicationXMLTypeEnum = "2"
	MeetingCreate201ApplicationXMLTypeEnumThree MeetingCreate201ApplicationXMLTypeEnum = "3"
	MeetingCreate201ApplicationXMLTypeEnumEight MeetingCreate201ApplicationXMLTypeEnum = "8"
)

func (e *MeetingCreate201ApplicationXMLTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = MeetingCreate201ApplicationXMLTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationXMLTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationXML - Meeting object
type MeetingCreate201ApplicationXML struct {
	// Agenda
	Agenda *string
	// Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
	AssistantID *string
	// The date and time at which this meeting was created.
	CreatedAt *time.Time
	// Meeting duration.
	Duration *int64
	// H.323/SIP room system password
	H323Password *string
	// Email address of the meeting host.
	HostEmail *string
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
	JoinURL *string
	// Array of occurrence objects.
	Occurrences []MeetingCreate201ApplicationXMLOccurrences
	// Meeting password. Password may only contain the following characters: `[a-z A-Z 0-9 @ - _ * !]`
	//
	// If "Require a password when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the password field will be autogenerated in the response even if it is not provided in the API request.
	//
	//
	//
	Password *string
	// Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
	Pmi *int64
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *MeetingCreate201ApplicationXMLRecurrence
	// URL using which registrants can register for a meeting. This field is only returned for meetings that have enabled registration.
	RegistrationURL *string
	// Meeting settings.
	Settings *MeetingCreate201ApplicationXMLSettings
	// Meeting start date-time in UTC/GMT. Example: "2020-03-31T12:02:00Z"
	StartTime *time.Time
	// URL to start the meeting. This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
	StartURL *string
	// Timezone to format start_time
	Timezone *string
	// Meeting topic
	Topic *string
	// Tracking fields
	TrackingFields []MeetingCreate201ApplicationXMLTrackingFields
	// Meeting Type
	Type *MeetingCreate201ApplicationXMLTypeEnum
}

// MeetingCreate201ApplicationJSONOccurrences - Occurence object. This object is only returned for Recurring Webinars.
type MeetingCreate201ApplicationJSONOccurrences struct {
	// Duration.
	Duration *int64 `json:"duration,omitempty"`
	// Occurrence ID: Unique Identifier that identifies an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences.
	OccurrenceID *string `json:"occurrence_id,omitempty"`
	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Occurrence status.
	Status *string `json:"status,omitempty"`
}

// MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
type MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum string

const (
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnumMinus1 MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum = "-1"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnumOne    MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum = "1"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnumTwo    MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum = "2"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnumThree  MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum = "3"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnumFour   MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum = "4"
)

func (e *MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "-1":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum - Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
//
// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum string

const (
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumOne   MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "1"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumTwo   MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "2"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumThree MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "3"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumFour  MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "4"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumFive  MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "5"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumSix   MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "6"
	MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnumSeven MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum = "7"
)

func (e *MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONRecurrenceTypeEnum - Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
type MeetingCreate201ApplicationJSONRecurrenceTypeEnum string

const (
	MeetingCreate201ApplicationJSONRecurrenceTypeEnumOne   MeetingCreate201ApplicationJSONRecurrenceTypeEnum = "1"
	MeetingCreate201ApplicationJSONRecurrenceTypeEnumTwo   MeetingCreate201ApplicationJSONRecurrenceTypeEnum = "2"
	MeetingCreate201ApplicationJSONRecurrenceTypeEnumThree MeetingCreate201ApplicationJSONRecurrenceTypeEnum = "3"
)

func (e *MeetingCreate201ApplicationJSONRecurrenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreate201ApplicationJSONRecurrenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONRecurrenceTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum - This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
//
//	<br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
type MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum string

const (
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumOne   MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "1"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumTwo   MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "2"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumThree MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "3"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumFour  MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "4"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumFive  MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "5"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumSix   MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "6"
	MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnumSeven MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum = "7"
)

func (e *MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		fallthrough
	case "6":
		fallthrough
	case "7":
		*e = MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONRecurrence - Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
type MeetingCreate201ApplicationJSONRecurrence struct {
	// Select the final date on which the meeting will recur before it is canceled. Should be in UTC time, such as 2017-11-25T12:00:00Z. (Cannot be used with "end_times".)
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Select how many times the meeting should recur before it is canceled. (Cannot be used with "end_date_time".)
	EndTimes *int64 `json:"end_times,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state which day in a month, the meeting should recur. The value range is from 1 to 31.
	//
	// For instance, if you would like the meeting to recur on 23rd of each month, provide `23` as the value of this field and `1` as the value of the `repeat_interval` field. Instead, if you would like the meeting to recur every three months, on 23rd of the month, change the value of the `repeat_interval` field to `3`.
	MonthlyDay *int64 `json:"monthly_day,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state the week of the month when the meeting should recur. If you use this field, **you must also use the `monthly_week_day` field to state the day of the week when the meeting should recur.** <br>`-1` - Last week of the month.<br>`1` - First week of the month.<br>`2` - Second week of the month.<br>`3` - Third week of the month.<br>`4` - Fourth week of the month.
	MonthlyWeek *MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekEnum `json:"monthly_week,omitempty"`
	// Use this field **only if you're scheduling a recurring meeting of type** `3` to state a specific day in a week when the monthly meeting should recur. To use this field, you must also use the `monthly_week` field.
	//
	// <br>`1` - Sunday.<br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` - Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	MonthlyWeekDay *MeetingCreate201ApplicationJSONRecurrenceMonthlyWeekDayEnum `json:"monthly_week_day,omitempty"`
	// Define the interval at which the meeting should recur. For instance, if you would like to schedule a meeting that recurs every two months, you must set the value of this field as `2` and the value of the `type` parameter as `3`.
	//
	// For a daily meeting, the maximum interval you can set is `90` days. For a weekly meeting the maximum interval that you can set is  of `12` weeks. For a monthly meeting, there is a maximum of `3` months.
	//
	//
	RepeatInterval *int64 `json:"repeat_interval,omitempty"`
	// Recurrence meeting types:<br>`1` - Daily.<br>`2` - Weekly.<br>`3` - Monthly.
	Type MeetingCreate201ApplicationJSONRecurrenceTypeEnum `json:"type"`
	// This field is required **if you're scheduling a recurring meeting of type** `2` to state which day(s) of the week the meeting should repeat. <br> <br> The value for this field could be a number between `1` to `7` in string format. For instance, if the meeting should recur on Sunday, provide `"1"` as the value of this field.<br><br> **Note:** If you would like the meeting to occur on multiple days of a week, you should provide comma separated values for this field. For instance, if the meeting should recur on Sundays and Tuesdays provide `"1,3"` as the value of this field.
	//
	//  <br>`1`  - Sunday. <br>`2` - Monday.<br>`3` - Tuesday.<br>`4` -  Wednesday.<br>`5` -  Thursday.<br>`6` - Friday.<br>`7` - Saturday.
	WeeklyDays *MeetingCreate201ApplicationJSONRecurrenceWeeklyDaysEnum `json:"weekly_days,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum - Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
//
// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
type MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum string

const (
	MeetingCreate201ApplicationJSONSettingsApprovalTypeEnumZero MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum = "0"
	MeetingCreate201ApplicationJSONSettingsApprovalTypeEnumOne  MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum = "1"
	MeetingCreate201ApplicationJSONSettingsApprovalTypeEnumTwo  MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum = "2"
)

func (e *MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum - Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
type MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum string

const (
	MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumApprove MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "approve"
	MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnumDeny    MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum = "deny"
)

func (e *MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions - Approve or block users from specific regions/countries from joining this meeting.
type MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions struct {
	// List of countries/regions from where participants can join this meeting.
	ApprovedList []string `json:"approved_list,omitempty"`
	// List of countries/regions from where participants can not join this meeting.
	DeniedList []string `json:"denied_list,omitempty"`
	// `true`: Setting enabled to either allow users or block users from specific regions to join your meetings. <br>
	//
	// `false`: Setting disabled.
	Enable *bool `json:"enable,omitempty"`
	// Specify whether to allow users from specific regions to join this meeting; or block users from specific regions from joining this meeting. <br><br>
	// `approve`: Allow users from specific regions/countries to join this meeting. If this setting is selected, the approved regions/countries must be included in the `approved_list`.<br><br>
	// `deny`: Block users from specific regions/countries from joining this meeting. If this setting is selected, the approved regions/countries must be included in the `denied_list`
	Method *MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegionsMethodEnum `json:"method,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsAudioEnum - Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
type MeetingCreate201ApplicationJSONSettingsAudioEnum string

const (
	MeetingCreate201ApplicationJSONSettingsAudioEnumBoth      MeetingCreate201ApplicationJSONSettingsAudioEnum = "both"
	MeetingCreate201ApplicationJSONSettingsAudioEnumTelephony MeetingCreate201ApplicationJSONSettingsAudioEnum = "telephony"
	MeetingCreate201ApplicationJSONSettingsAudioEnumVoip      MeetingCreate201ApplicationJSONSettingsAudioEnum = "voip"
)

func (e *MeetingCreate201ApplicationJSONSettingsAudioEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "both":
		fallthrough
	case "telephony":
		fallthrough
	case "voip":
		*e = MeetingCreate201ApplicationJSONSettingsAudioEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsAudioEnum: %s", s)
	}
}

type MeetingCreate201ApplicationJSONSettingsAuthenticationException struct {
	// Email address of the participant.
	Email *string `json:"email,omitempty"`
	// Name of the participant.
	Name *string `json:"name,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum - Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
type MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum string

const (
	MeetingCreate201ApplicationJSONSettingsAutoRecordingEnumLocal MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum = "local"
	MeetingCreate201ApplicationJSONSettingsAutoRecordingEnumCloud MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum = "cloud"
	MeetingCreate201ApplicationJSONSettingsAutoRecordingEnumNone  MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum = "none"
)

func (e *MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "cloud":
		fallthrough
	case "none":
		*e = MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum: %s", s)
	}
}

type MeetingCreate201ApplicationJSONSettingsBreakoutRoomRooms struct {
	// Name of the breakout room.
	Name *string `json:"name,omitempty"`
	// Email addresses of the participants who are to be assigned to the breakout room.
	Participants []string `json:"participants,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsBreakoutRoom - Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
type MeetingCreate201ApplicationJSONSettingsBreakoutRoom struct {
	// Set the value of this field to `true` if you would like to enable the [breakout room pre-assign](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4) option.
	Enable *bool `json:"enable,omitempty"`
	// Create room(s).
	Rooms []MeetingCreate201ApplicationJSONSettingsBreakoutRoomRooms `json:"rooms,omitempty"`
}

type MeetingCreate201ApplicationJSONSettingsCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum string

const (
	MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnumEnhancedEncryption MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum = "enhanced_encryption"
	MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnumE2ee               MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum = "e2ee"
)

func (e *MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum - Type of number.
type MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum string

const (
	MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnumToll     MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "toll"
	MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnumTollfree MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum = "tollfree"
)

func (e *MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "toll":
		fallthrough
	case "tollfree":
		*e = MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum: %s", s)
	}
}

type MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbers struct {
	// City of the number, if any. For example, Chicago.
	City *string `json:"city,omitempty"`
	// Country code. For example, BR.
	Country *string `json:"country,omitempty"`
	// Full name of country. For example, Brazil.
	CountryName *string `json:"country_name,omitempty"`
	// Phone number. For example, +1 2332357613.
	Number *string `json:"number,omitempty"`
	// Type of number.
	Type *MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbersTypeEnum `json:"type,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsJbhTimeEnum - If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
//
// *  `0`: Allow participant to join anytime.
// *  `5`: Allow participant to join 5 minutes before meeting start time.
//   - `10`: Allow participant to join 10 minutes before meeting start time.
type MeetingCreate201ApplicationJSONSettingsJbhTimeEnum string

const (
	MeetingCreate201ApplicationJSONSettingsJbhTimeEnumZero MeetingCreate201ApplicationJSONSettingsJbhTimeEnum = "0"
	MeetingCreate201ApplicationJSONSettingsJbhTimeEnumFive MeetingCreate201ApplicationJSONSettingsJbhTimeEnum = "5"
	MeetingCreate201ApplicationJSONSettingsJbhTimeEnumTen  MeetingCreate201ApplicationJSONSettingsJbhTimeEnum = "10"
)

func (e *MeetingCreate201ApplicationJSONSettingsJbhTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "5":
		fallthrough
	case "10":
		*e = MeetingCreate201ApplicationJSONSettingsJbhTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsJbhTimeEnum: %s", s)
	}
}

type MeetingCreate201ApplicationJSONSettingsLanguageInterpretationInterpreters struct {
	// Email address of the interpreter.
	Email *string `json:"email,omitempty"`
	// Languages for interpretation. The string must contain two [country Ids](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) separated by a comma.
	//
	// For example, if the language is to be interpreted from English to Chinese, the value of this field should be "US,CN".
	Languages *string `json:"languages,omitempty"`
}

type MeetingCreate201ApplicationJSONSettingsLanguageInterpretation struct {
	Enable *bool `json:"enable,omitempty"`
	// Information associated with the interpreter.
	Interpreters []MeetingCreate201ApplicationJSONSettingsLanguageInterpretationInterpreters `json:"interpreters,omitempty"`
}

// MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum - Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
type MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum string

const (
	MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnumOne   MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum = "1"
	MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnumTwo   MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum = "2"
	MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnumThree MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum = "3"
)

func (e *MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		*e = MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSONSettings - Meeting settings.
type MeetingCreate201ApplicationJSONSettings struct {
	// Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	AllowMultipleDevices *bool `json:"allow_multiple_devices,omitempty"`
	// Alternative host's emails or IDs: multiple values are separated by a semicolon.
	AlternativeHosts *string `json:"alternative_hosts,omitempty"`
	// Flag to determine whether to send email notifications to alternative hosts, default value is true.
	AlternativeHostsEmailNotification *bool `json:"alternative_hosts_email_notification,omitempty"`
	// Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** <br><br>
	//
	// `0` - Automatically approve.<br>`1` - Manually approve.<br>`2` - No registration required.
	ApprovalType *MeetingCreate201ApplicationJSONSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Approve or block users from specific regions/countries from joining this meeting.
	//
	ApprovedOrDeniedCountriesOrRegions *MeetingCreate201ApplicationJSONSettingsApprovedOrDeniedCountriesOrRegions `json:"approved_or_denied_countries_or_regions,omitempty"`
	// Determine how participants can join the audio portion of the meeting.<br>`both` - Both Telephony and VoIP.<br>`telephony` - Telephony only.<br>`voip` - VoIP only.
	Audio *MeetingCreate201ApplicationJSONSettingsAudioEnum `json:"audio,omitempty"`
	// If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// The participants added here will receive unique meeting invite links and bypass authentication.
	AuthenticationException []MeetingCreate201ApplicationJSONSettingsAuthenticationException `json:"authentication_exception,omitempty"`
	// Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
	AuthenticationName *string `json:"authentication_name,omitempty"`
	// Meeting authentication option id.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Automatic recording:<br>`local` - Record on local.<br>`cloud` -  Record on cloud.<br>`none` - Disabled.
	AutoRecording *MeetingCreate201ApplicationJSONSettingsAutoRecordingEnum `json:"auto_recording,omitempty"`
	// Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
	BreakoutRoom *MeetingCreate201ApplicationJSONSettingsBreakoutRoom `json:"breakout_room,omitempty"`
	// Close registration after event date
	CloseRegistration *bool `json:"close_registration,omitempty"`
	// Host meeting in China.
	CnMeeting *bool `json:"cn_meeting,omitempty"`
	// Contact email for registration
	ContactEmail *string `json:"contact_email,omitempty"`
	// Contact name for registration
	ContactName *string `json:"contact_name,omitempty"`
	// Custom keys and values assigned to the meeting.
	CustomKeys []MeetingCreate201ApplicationJSONSettingsCustomKeys `json:"custom_keys,omitempty"`
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *MeetingCreate201ApplicationJSONSettingsEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Only signed in users can join this meeting.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLogin *bool `json:"enforce_login,omitempty"`
	// Only signed in users with specified domains can join meetings.
	//
	// **This field is deprecated and will not be supported in the future.**  <br><br>As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
	EnforceLoginDomains *string `json:"enforce_login_domains,omitempty"`
	// List of global dial-in countries
	GlobalDialInCountries []string `json:"global_dial_in_countries,omitempty"`
	// Global Dial-in Countries/Regions
	GlobalDialInNumbers []MeetingCreate201ApplicationJSONSettingsGlobalDialInNumbers `json:"global_dial_in_numbers,omitempty"`
	// Start video when the host joins the meeting.
	HostVideo *bool `json:"host_video,omitempty"`
	// Host meeting in India.
	InMeeting *bool `json:"in_meeting,omitempty"`
	// If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
	//
	// *  `0`: Allow participant to join anytime.
	// *  `5`: Allow participant to join 5 minutes before meeting start time.
	//  * `10`: Allow participant to join 10 minutes before meeting start time.
	JbhTime *MeetingCreate201ApplicationJSONSettingsJbhTimeEnum `json:"jbh_time,omitempty"`
	// Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
	JoinBeforeHost         *bool                                                          `json:"join_before_host,omitempty"`
	LanguageInterpretation *MeetingCreate201ApplicationJSONSettingsLanguageInterpretation `json:"language_interpretation,omitempty"`
	// `true`- Only authenticated users can join meetings.
	MeetingAuthentication *bool `json:"meeting_authentication,omitempty"`
	// Mute participants upon entry.
	MuteUponEntry *bool `json:"mute_upon_entry,omitempty"`
	// Start video when participants join the meeting.
	ParticipantVideo *bool `json:"participant_video,omitempty"`
	// Send confirmation email to registrants upon successful registration.
	RegistrantsConfirmationEmail *bool `json:"registrants_confirmation_email,omitempty"`
	// Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
	RegistrantsEmailNotification *bool `json:"registrants_email_notification,omitempty"`
	// Registration type. Used for recurring meeting with fixed time only. <br>`1` Attendees register once and can attend any of the occurrences.<br>`2` Attendees need to register for each occurrence to attend.<br>`3` Attendees register once and can choose one or more occurrences to attend.
	RegistrationType *MeetingCreate201ApplicationJSONSettingsRegistrationTypeEnum `json:"registration_type,omitempty"`
	// Show social share buttons on the meeting registration page.
	// This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
	ShowShareButton *bool `json:"show_share_button,omitempty"`
	// Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
	UsePmi *bool `json:"use_pmi,omitempty"`
	// Enable waiting room
	WaitingRoom *bool `json:"waiting_room,omitempty"`
	// Add watermark when viewing a shared screen.
	Watermark *bool `json:"watermark,omitempty"`
}

type MeetingCreate201ApplicationJSONTrackingFields struct {
	// Label of the tracking field.
	Field *string `json:"field,omitempty"`
	// Value for the field.
	Value *string `json:"value,omitempty"`
	// Indicates whether the [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) is visible in the meeting scheduling options in the Zoom Web Portal or not.
	//
	// `true`: Tracking field is visible. <br>
	//
	// `false`: Tracking field is not visible to the users in the meeting options in the Zoom Web Portal but the field was used while scheduling this meeting via API. An invisible tracking field can be used by users while scheduling meetings via API only.
	Visible *bool `json:"visible,omitempty"`
}

// MeetingCreate201ApplicationJSONTypeEnum - Meeting Type
type MeetingCreate201ApplicationJSONTypeEnum string

const (
	MeetingCreate201ApplicationJSONTypeEnumOne   MeetingCreate201ApplicationJSONTypeEnum = "1"
	MeetingCreate201ApplicationJSONTypeEnumTwo   MeetingCreate201ApplicationJSONTypeEnum = "2"
	MeetingCreate201ApplicationJSONTypeEnumThree MeetingCreate201ApplicationJSONTypeEnum = "3"
	MeetingCreate201ApplicationJSONTypeEnumEight MeetingCreate201ApplicationJSONTypeEnum = "8"
)

func (e *MeetingCreate201ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = MeetingCreate201ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingCreate201ApplicationJSONTypeEnum: %s", s)
	}
}

// MeetingCreate201ApplicationJSON - Meeting object
type MeetingCreate201ApplicationJSON struct {
	// Agenda
	Agenda *string `json:"agenda,omitempty"`
	// Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
	AssistantID *string `json:"assistant_id,omitempty"`
	// The date and time at which this meeting was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// H.323/SIP room system password
	H323Password *string `json:"h323_password,omitempty"`
	// Email address of the meeting host.
	HostEmail *string `json:"host_email,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
	JoinURL *string `json:"join_url,omitempty"`
	// Array of occurrence objects.
	Occurrences []MeetingCreate201ApplicationJSONOccurrences `json:"occurrences,omitempty"`
	// Meeting password. Password may only contain the following characters: `[a-z A-Z 0-9 @ - _ * !]`
	//
	// If "Require a password when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the password field will be autogenerated in the response even if it is not provided in the API request.
	//
	//
	//
	Password *string `json:"password,omitempty"`
	// Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
	Pmi *int64 `json:"pmi,omitempty"`
	// Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time.
	Recurrence *MeetingCreate201ApplicationJSONRecurrence `json:"recurrence,omitempty"`
	// URL using which registrants can register for a meeting. This field is only returned for meetings that have enabled registration.
	RegistrationURL *string `json:"registration_url,omitempty"`
	// Meeting settings.
	Settings *MeetingCreate201ApplicationJSONSettings `json:"settings,omitempty"`
	// Meeting start date-time in UTC/GMT. Example: "2020-03-31T12:02:00Z"
	StartTime *time.Time `json:"start_time,omitempty"`
	// URL to start the meeting. This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
	StartURL *string `json:"start_url,omitempty"`
	// Timezone to format start_time
	Timezone *string `json:"timezone,omitempty"`
	// Meeting topic
	Topic *string `json:"topic,omitempty"`
	// Tracking fields
	TrackingFields []MeetingCreate201ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting Type
	Type *MeetingCreate201ApplicationJSONTypeEnum `json:"type,omitempty"`
}

type MeetingCreateResponse struct {
	Body        []byte
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201`<br>
	// Meeting created.
	MeetingCreate201ApplicationJSONObject *MeetingCreate201ApplicationJSON
}
