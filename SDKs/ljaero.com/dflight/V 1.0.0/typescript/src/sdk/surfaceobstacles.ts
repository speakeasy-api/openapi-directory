/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * #### All known structures whose presence might interfere with airborne activity, as defined in [14 CFR Part 77.9](https://www.ecfr.gov/current/title-14/chapter-I/subchapter-E/part-77#77.9).
 *
 * @remarks
 * This information is updated daily and includes the following details:
 * * Location
 * * Type
 * * Number of separate structures in case of a group
 * * Height (in ft. AGL)
 * * Lighting and other markings
 */
export class SurfaceObstacles {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve obstacles within given distance of location.
   *
   * @remarks
   * Retrieve obstacles within given distance of a point. Request body parameters are:
   * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
   * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
   * * distance:  distance in meters (max allowed value is 25000)
   */
  obstaclesByDistanceUsV1ObstaclesDistanceQueryPost(
    req: operations.ObstaclesByDistanceUsV1ObstaclesDistanceQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObstaclesByDistanceUsV1ObstaclesDistanceQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ObstaclesByDistanceUsV1ObstaclesDistanceQueryPostRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/obstacles/distance-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obstaclesByDistance",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObstaclesByDistanceUsV1ObstaclesDistanceQueryPostResponse =
        new operations.ObstaclesByDistanceUsV1ObstaclesDistanceQueryPostResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obstacleDistanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ObstacleDistanceResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve obstacles located within given area.
   *
   * @remarks
   * Retrieve obstacles located within given area. Request body parameters are:
   * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
   */
  obstaclesByPolyUsV1ObstaclesPolygonQueryPost(
    req: operations.ObstaclesByPolyUsV1ObstaclesPolygonQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObstaclesByPolyUsV1ObstaclesPolygonQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObstaclesByPolyUsV1ObstaclesPolygonQueryPostRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/obstacles/polygon-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obstaclesByPolygon",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObstaclesByPolyUsV1ObstaclesPolygonQueryPostResponse =
        new operations.ObstaclesByPolyUsV1ObstaclesPolygonQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obstaclePolyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ObstaclePolyResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve obstacles found along a route.
   *
   * @remarks
   * Retrieve obstacles found along a route. Request body parameters are:
   * * route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
   */
  obstaclesByRouteUsV1ObstaclesRouteQueryPost(
    req: operations.ObstaclesByRouteUsV1ObstaclesRouteQueryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObstaclesByRouteUsV1ObstaclesRouteQueryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObstaclesByRouteUsV1ObstaclesRouteQueryPostRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/us/v1/obstacles/route-query";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obstaclesByRoute",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObstaclesByRouteUsV1ObstaclesRouteQueryPostResponse =
        new operations.ObstaclesByRouteUsV1ObstaclesRouteQueryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obstacleRouteResponse = utils.objectToClass(
              httpRes?.data,
              shared.ObstacleRouteResponse
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
