// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransactionRuleInfoEntryModesEnum string

const (
	TransactionRuleInfoEntryModesEnumBarcode     TransactionRuleInfoEntryModesEnum = "barcode"
	TransactionRuleInfoEntryModesEnumChip        TransactionRuleInfoEntryModesEnum = "chip"
	TransactionRuleInfoEntryModesEnumCof         TransactionRuleInfoEntryModesEnum = "cof"
	TransactionRuleInfoEntryModesEnumContactless TransactionRuleInfoEntryModesEnum = "contactless"
	TransactionRuleInfoEntryModesEnumMagstripe   TransactionRuleInfoEntryModesEnum = "magstripe"
	TransactionRuleInfoEntryModesEnumManual      TransactionRuleInfoEntryModesEnum = "manual"
	TransactionRuleInfoEntryModesEnumOcr         TransactionRuleInfoEntryModesEnum = "ocr"
	TransactionRuleInfoEntryModesEnumServer      TransactionRuleInfoEntryModesEnum = "server"
	TransactionRuleInfoEntryModesEnumUnknown     TransactionRuleInfoEntryModesEnum = "unknown"
)

func (e TransactionRuleInfoEntryModesEnum) ToPointer() *TransactionRuleInfoEntryModesEnum {
	return &e
}

func (e *TransactionRuleInfoEntryModesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "barcode":
		fallthrough
	case "chip":
		fallthrough
	case "cof":
		fallthrough
	case "contactless":
		fallthrough
	case "magstripe":
		fallthrough
	case "manual":
		fallthrough
	case "ocr":
		fallthrough
	case "server":
		fallthrough
	case "unknown":
		*e = TransactionRuleInfoEntryModesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleInfoEntryModesEnum: %v", v)
	}
}

type TransactionRuleInfoProcessingTypesEnum string

const (
	TransactionRuleInfoProcessingTypesEnumAtmWithdraw    TransactionRuleInfoProcessingTypesEnum = "atmWithdraw"
	TransactionRuleInfoProcessingTypesEnumBalanceInquiry TransactionRuleInfoProcessingTypesEnum = "balanceInquiry"
	TransactionRuleInfoProcessingTypesEnumEcommerce      TransactionRuleInfoProcessingTypesEnum = "ecommerce"
	TransactionRuleInfoProcessingTypesEnumMoto           TransactionRuleInfoProcessingTypesEnum = "moto"
	TransactionRuleInfoProcessingTypesEnumPos            TransactionRuleInfoProcessingTypesEnum = "pos"
	TransactionRuleInfoProcessingTypesEnumRecurring      TransactionRuleInfoProcessingTypesEnum = "recurring"
	TransactionRuleInfoProcessingTypesEnumToken          TransactionRuleInfoProcessingTypesEnum = "token"
	TransactionRuleInfoProcessingTypesEnumUnknown        TransactionRuleInfoProcessingTypesEnum = "unknown"
)

func (e TransactionRuleInfoProcessingTypesEnum) ToPointer() *TransactionRuleInfoProcessingTypesEnum {
	return &e
}

func (e *TransactionRuleInfoProcessingTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atmWithdraw":
		fallthrough
	case "balanceInquiry":
		fallthrough
	case "ecommerce":
		fallthrough
	case "moto":
		fallthrough
	case "pos":
		fallthrough
	case "recurring":
		fallthrough
	case "token":
		fallthrough
	case "unknown":
		*e = TransactionRuleInfoProcessingTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleInfoProcessingTypesEnum: %v", v)
	}
}

// TransactionRuleInfoStatusEnum - The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
// with an **active** status.
//
// Possible values: **active**, **inactive**.
type TransactionRuleInfoStatusEnum string

const (
	TransactionRuleInfoStatusEnumActive   TransactionRuleInfoStatusEnum = "active"
	TransactionRuleInfoStatusEnumInactive TransactionRuleInfoStatusEnum = "inactive"
)

func (e TransactionRuleInfoStatusEnum) ToPointer() *TransactionRuleInfoStatusEnum {
	return &e
}

func (e *TransactionRuleInfoStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = TransactionRuleInfoStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleInfoStatusEnum: %v", v)
	}
}

// TransactionRuleInfoTypeEnum - Type of conditions provided in the rule.
//
// Possible values:
//   - **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
//   - **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
//   - **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
//   - **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
type TransactionRuleInfoTypeEnum string

const (
	TransactionRuleInfoTypeEnumAllowList TransactionRuleInfoTypeEnum = "allowList"
	TransactionRuleInfoTypeEnumBlockList TransactionRuleInfoTypeEnum = "blockList"
	TransactionRuleInfoTypeEnumMaxUsage  TransactionRuleInfoTypeEnum = "maxUsage"
	TransactionRuleInfoTypeEnumVelocity  TransactionRuleInfoTypeEnum = "velocity"
)

func (e TransactionRuleInfoTypeEnum) ToPointer() *TransactionRuleInfoTypeEnum {
	return &e
}

func (e *TransactionRuleInfoTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allowList":
		fallthrough
	case "blockList":
		fallthrough
	case "maxUsage":
		fallthrough
	case "velocity":
		*e = TransactionRuleInfoTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionRuleInfoTypeEnum: %v", v)
	}
}

type TransactionRuleInfo struct {
	Amount *Amount `json:"amount,omitempty"`
	// The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.
	BalancePlatformID *string `json:"balancePlatformId,omitempty"`
	// List of countries to which the rule applies. For example: **["NL","US"]**.
	Countries []string `json:"countries,omitempty"`
	// Your description for the transaction rule, maximum 300 characters.
	Description string `json:"description"`
	// The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
	//
	// If not provided, the rule will be evaluated until the rule status is set to **inactive**.
	EndDate *string `json:"endDate,omitempty"`
	// List of point-of-sale entry modes to which the rule applies.
	//
	// Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
	EntryModes []TransactionRuleInfoEntryModesEnum `json:"entryModes,omitempty"`
	Interval   TransactionRuleInterval             `json:"interval"`
	// The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`.
	MaxTransactions *int `json:"maxTransactions,omitempty"`
	// List of Merchant Category Codes (MCCs) to which the rule applies.
	Mccs []string `json:"mccs,omitempty"`
	// The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies.
	PaymentInstrumentGroupID *string `json:"paymentInstrumentGroupId,omitempty"`
	// The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies.
	PaymentInstrumentID *string `json:"paymentInstrumentId,omitempty"`
	// List of processing types to which the rule applies.
	//
	// Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
	ProcessingTypes []TransactionRuleInfoProcessingTypesEnum `json:"processingTypes,omitempty"`
	// Your reference for the transaction rule, maximum 150 characters.
	Reference string `json:"reference"`
	// The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
	//
	// If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.
	//
	//
	StartDate *string `json:"startDate,omitempty"`
	// The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
	// with an **active** status.
	//
	// Possible values: **active**, **inactive**.
	Status *TransactionRuleInfoStatusEnum `json:"status,omitempty"`
	// Type of conditions provided in the rule.
	//
	// Possible values:
	//   * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
	//  * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
	//  * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
	//  * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
	//
	Type TransactionRuleInfoTypeEnum `json:"type"`
}
