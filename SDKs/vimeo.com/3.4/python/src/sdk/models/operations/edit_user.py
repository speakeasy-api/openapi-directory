"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EditUserRequestBodyVideosPrivacyCommentsEnum(str, Enum):
    r"""Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads."""
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class EditUserRequestBodyVideosPrivacyEmbedEnum(str, Enum):
    r"""The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains."""
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class EditUserRequestBodyVideosPrivacyViewEnum(str, Enum):
    r"""Who can view the video. This value becomes the default view setting for all future videos that this user uploads."""
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditUserRequestBodyVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user."""  
    comments: Optional[EditUserRequestBodyVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads."""  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads."""  
    embed: Optional[EditUserRequestBodyVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains."""  
    view: Optional[EditUserRequestBodyVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""Who can view the video. This value becomes the default view setting for all future videos that this user uploads."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditUserRequestBodyVideos:
    
    privacy: Optional[EditUserRequestBodyVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditUserRequestBody:
    
    bio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio'), 'exclude': lambda f: f is None }})
    r"""The user's bio."""  
    content_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The user's custom Vimeo URL slug."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""The user's location."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The user's display name."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`."""  
    videos: Optional[EditUserRequestBodyVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class EditUserRequest:
    
    user_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the user."""  
    request_body: Optional[EditUserRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/vnd.vimeo.user+json' }})  
    

@dataclasses.dataclass
class EditUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user: Optional[shared_user.User] = dataclasses.field(default=None)
    r"""The user was edited."""  
    