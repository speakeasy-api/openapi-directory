/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.
 */
export enum PostCertificatesCreateCertificateRequestTypeEnum {
  Uploaded = "uploaded",
  Managed = "managed",
}

export class PostCertificatesCreateCertificateRequest extends SpeakeasyBase {
  /**
   * Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  certificate?: string;

  /**
   * Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_names" })
  domainNames?: string[];

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * Name of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Certificate key in PEM format. Required for type `uploaded` Certificates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private_key" })
  privateKey?: string;

  /**
   * Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostCertificatesCreateCertificateRequestTypeEnum;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostCertificatesCreateCertificateResponseNullableActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostCertificatesCreateCertificateResponseNullableActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostCertificatesCreateCertificateResponseNullableActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostCertificatesCreateCertificateResponseNullableAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostCertificatesCreateCertificateResponseNullableActionError)
  error: PostCertificatesCreateCertificateResponseNullableActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostCertificatesCreateCertificateResponseNullableActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostCertificatesCreateCertificateResponseNullableActionResources)
  resources: PostCertificatesCreateCertificateResponseNullableActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostCertificatesCreateCertificateResponseNullableActionStatusEnum;
}

/**
 * If issuance or renewal reports `failed`, this property contains information about what happened
 */
export class PostCertificatesCreateCertificateResponseCertificateStatusError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * Status of the issuance process of the Certificate
 */
export enum PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum {
  Pending = "pending",
  Completed = "completed",
  Failed = "failed",
}

/**
 * Status of the renewal process of the Certificate.
 */
export enum PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum {
  Scheduled = "scheduled",
  Pending = "pending",
  Failed = "failed",
  Unavailable = "unavailable",
}

/**
 * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
 */
export class PostCertificatesCreateCertificateResponseCertificateStatus extends SpeakeasyBase {
  /**
   * If issuance or renewal reports `failed`, this property contains information about what happened
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostCertificatesCreateCertificateResponseCertificateStatusError)
  error?: PostCertificatesCreateCertificateResponseCertificateStatusError;

  /**
   * Status of the issuance process of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuance" })
  issuance?: PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum;

  /**
   * Status of the renewal process of the Certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewal" })
  renewal?: PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum;
}

/**
 * Type of the Certificate
 */
export enum PostCertificatesCreateCertificateResponseCertificateTypeEnum {
  Uploaded = "uploaded",
  Managed = "managed",
}

export class PostCertificatesCreateCertificateResponseCertificateUsedBy extends SpeakeasyBase {
  /**
   * ID of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class PostCertificatesCreateCertificateResponseCertificate extends SpeakeasyBase {
  /**
   * Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  certificate: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Domains and subdomains covered by the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_names" })
  domainNames: string[];

  /**
   * SHA256 fingerprint of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Point in time when the Certificate stops being valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_after" })
  notValidAfter: string;

  /**
   * Point in time when the Certificate becomes valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_before" })
  notValidBefore: string;

  /**
   * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => PostCertificatesCreateCertificateResponseCertificateStatus)
  status?: PostCertificatesCreateCertificateResponseCertificateStatus;

  /**
   * Type of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostCertificatesCreateCertificateResponseCertificateTypeEnum;

  /**
   * Resources currently using the Certificate
   */
  @SpeakeasyMetadata({
    elemType: PostCertificatesCreateCertificateResponseCertificateUsedBy,
  })
  @Expose({ name: "used_by" })
  @Type(() => PostCertificatesCreateCertificateResponseCertificateUsedBy)
  usedBy: PostCertificatesCreateCertificateResponseCertificateUsedBy[];
}

/**
 * The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
 */
export class PostCertificatesCreateCertificateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostCertificatesCreateCertificateResponseNullableAction)
  action?: PostCertificatesCreateCertificateResponseNullableAction;

  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  @Type(() => PostCertificatesCreateCertificateResponseCertificate)
  certificate: PostCertificatesCreateCertificateResponseCertificate;
}

export class PostCertificatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
   */
  @SpeakeasyMetadata()
  createCertificateResponse?: PostCertificatesCreateCertificateResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
