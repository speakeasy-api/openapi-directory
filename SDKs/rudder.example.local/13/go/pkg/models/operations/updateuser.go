// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateUserPathParams struct {
	// Username of an user (unique)
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type UpdateUserRequest struct {
	PathParams UpdateUserPathParams
	Request    shared.Users `request:"mediaType=application/json"`
}

// UpdateUser200ApplicationJSONActionEnum - The id of the action
type UpdateUser200ApplicationJSONActionEnum string

const (
	UpdateUser200ApplicationJSONActionEnumUpdateUser UpdateUser200ApplicationJSONActionEnum = "updateUser"
)

func (e *UpdateUser200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateUser":
		*e = UpdateUser200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUser200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateUser200ApplicationJSONDataUpdatedUser struct {
	// New password given
	Password string `json:"password"`
	// defined user's permissions
	Role []string `json:"role"`
	// New Username
	Username string `json:"username"`
}

type UpdateUser200ApplicationJSONData struct {
	UpdatedUser UpdateUser200ApplicationJSONDataUpdatedUser `json:"updatedUser"`
}

// UpdateUser200ApplicationJSONResultEnum - Result of the request
type UpdateUser200ApplicationJSONResultEnum string

const (
	UpdateUser200ApplicationJSONResultEnumSuccess UpdateUser200ApplicationJSONResultEnum = "success"
	UpdateUser200ApplicationJSONResultEnumError   UpdateUser200ApplicationJSONResultEnum = "error"
)

func (e *UpdateUser200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateUser200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUser200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateUser200ApplicationJSON - Updated
type UpdateUser200ApplicationJSON struct {
	// The id of the action
	Action UpdateUser200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateUser200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateUser200ApplicationJSONResultEnum `json:"result"`
}

type UpdateUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Updated
	UpdateUser200ApplicationJSONObject *UpdateUser200ApplicationJSON
}
