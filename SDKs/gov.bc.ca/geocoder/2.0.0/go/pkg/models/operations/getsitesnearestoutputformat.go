// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSitesNearestOutputFormatLocationDescriptorEnum - Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
type GetSitesNearestOutputFormatLocationDescriptorEnum string

const (
	GetSitesNearestOutputFormatLocationDescriptorEnumAny            GetSitesNearestOutputFormatLocationDescriptorEnum = "any"
	GetSitesNearestOutputFormatLocationDescriptorEnumAccessPoint    GetSitesNearestOutputFormatLocationDescriptorEnum = "accessPoint"
	GetSitesNearestOutputFormatLocationDescriptorEnumFrontDoorPoint GetSitesNearestOutputFormatLocationDescriptorEnum = "frontDoorPoint"
	GetSitesNearestOutputFormatLocationDescriptorEnumParcelPoint    GetSitesNearestOutputFormatLocationDescriptorEnum = "parcelPoint"
	GetSitesNearestOutputFormatLocationDescriptorEnumRooftopPoint   GetSitesNearestOutputFormatLocationDescriptorEnum = "rooftopPoint"
	GetSitesNearestOutputFormatLocationDescriptorEnumRoutingPoint   GetSitesNearestOutputFormatLocationDescriptorEnum = "routingPoint"
)

func (e GetSitesNearestOutputFormatLocationDescriptorEnum) ToPointer() *GetSitesNearestOutputFormatLocationDescriptorEnum {
	return &e
}

func (e *GetSitesNearestOutputFormatLocationDescriptorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "accessPoint":
		fallthrough
	case "frontDoorPoint":
		fallthrough
	case "parcelPoint":
		fallthrough
	case "rooftopPoint":
		fallthrough
	case "routingPoint":
		*e = GetSitesNearestOutputFormatLocationDescriptorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesNearestOutputFormatLocationDescriptorEnum: %v", v)
	}
}

// GetSitesNearestOutputFormatOutputFormatEnum - Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
//
// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
type GetSitesNearestOutputFormatOutputFormatEnum string

const (
	GetSitesNearestOutputFormatOutputFormatEnumJSON    GetSitesNearestOutputFormatOutputFormatEnum = "json"
	GetSitesNearestOutputFormatOutputFormatEnumGeojson GetSitesNearestOutputFormatOutputFormatEnum = "geojson"
	GetSitesNearestOutputFormatOutputFormatEnumXhtml   GetSitesNearestOutputFormatOutputFormatEnum = "xhtml"
	GetSitesNearestOutputFormatOutputFormatEnumKml     GetSitesNearestOutputFormatOutputFormatEnum = "kml"
	GetSitesNearestOutputFormatOutputFormatEnumGml     GetSitesNearestOutputFormatOutputFormatEnum = "gml"
	GetSitesNearestOutputFormatOutputFormatEnumCsv     GetSitesNearestOutputFormatOutputFormatEnum = "csv"
	GetSitesNearestOutputFormatOutputFormatEnumShpz    GetSitesNearestOutputFormatOutputFormatEnum = "shpz"
)

func (e GetSitesNearestOutputFormatOutputFormatEnum) ToPointer() *GetSitesNearestOutputFormatOutputFormatEnum {
	return &e
}

func (e *GetSitesNearestOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "geojson":
		fallthrough
	case "xhtml":
		fallthrough
	case "kml":
		fallthrough
	case "gml":
		fallthrough
	case "csv":
		fallthrough
	case "shpz":
		*e = GetSitesNearestOutputFormatOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesNearestOutputFormatOutputFormatEnum: %v", v)
	}
}

// GetSitesNearestOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetSitesNearestOutputFormatOutputSrsEnum int64

const (
	GetSitesNearestOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetSitesNearestOutputFormatOutputSrsEnum = 4326
	GetSitesNearestOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetSitesNearestOutputFormatOutputSrsEnum = 4269
	GetSitesNearestOutputFormatOutputSrsEnumThreeThousandAndFive                  GetSitesNearestOutputFormatOutputSrsEnum = 3005
	GetSitesNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetSitesNearestOutputFormatOutputSrsEnum = 26907
	GetSitesNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetSitesNearestOutputFormatOutputSrsEnum = 26908
	GetSitesNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetSitesNearestOutputFormatOutputSrsEnum = 26909
	GetSitesNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetSitesNearestOutputFormatOutputSrsEnum = 26910
	GetSitesNearestOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetSitesNearestOutputFormatOutputSrsEnum = 26911
)

func (e GetSitesNearestOutputFormatOutputSrsEnum) ToPointer() *GetSitesNearestOutputFormatOutputSrsEnum {
	return &e
}

func (e *GetSitesNearestOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetSitesNearestOutputFormatOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesNearestOutputFormatOutputSrsEnum: %v", v)
	}
}

type GetSitesNearestOutputFormatRequest struct {
	// If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
	Brief *bool `queryParam:"style=form,explode=true,name=brief"`
	// If true, excludes sites that are units of a parent site
	ExcludeUnits *bool `queryParam:"style=form,explode=true,name=excludeUnits"`
	// Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
	LocationDescriptor *GetSitesNearestOutputFormatLocationDescriptorEnum `queryParam:"style=form,explode=true,name=locationDescriptor"`
	// The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
	MaxDistance *int64 `queryParam:"style=form,explode=true,name=maxDistance"`
	// If true, excludes sites without a civic address
	OnlyCivic *bool `queryParam:"style=form,explode=true,name=onlyCivic"`
	// Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target="_blank">outputFormat</a>.
	//
	// Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
	OutputFormat GetSitesNearestOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *GetSitesNearestOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// Centre point of search. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#point target="_blank">point</a>
	Point string `queryParam:"style=form,explode=true,name=point"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SetBack *int64 `queryParam:"style=form,explode=true,name=setBack"`
}

type GetSitesNearestOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
