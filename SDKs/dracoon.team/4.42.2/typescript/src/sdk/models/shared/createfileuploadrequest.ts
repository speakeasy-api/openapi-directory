/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ObjectExpiration } from "./objectexpiration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Classification ID:
 *
 * @remarks
 *
 * * `1` - public
 *
 * * `2` - internal
 *
 * * `3` - confidential
 *
 * * `4` - strictly confidential
 *
 *
 *
 * (default: classification from parent room)
 */
export enum CreateFileUploadRequestClassificationEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

/**
 * Request model for creating an upload channel
 */
export class CreateFileUploadRequest extends SpeakeasyBase {
  /**
   * Classification ID:
   *
   * @remarks
   *
   * * `1` - public
   *
   * * `2` - internal
   *
   * * `3` - confidential
   *
   * * `4` - strictly confidential
   *
   *
   *
   * (default: classification from parent room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "classification" })
  classification?: CreateFileUploadRequestClassificationEnum;

  /**
   * &#128640; Since v4.15.0
   *
   * @remarks
   *
   * Upload direct to S3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directS3Upload" })
  directS3Upload?: boolean;

  /**
   * Expiration information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiration" })
  @Type(() => ObjectExpiration)
  expiration?: ObjectExpiration;

  /**
   * File name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * User notes
   *
   * @remarks
   *
   * Use empty string to remove.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * Parent node ID (room or folder)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId: number;

  /**
   * File size in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the node was created on external file system
   *
   * (default: current server datetime in UTC format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampCreation" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampCreation?: Date;

  /**
   * &#128640; Since v4.22.0
   *
   * @remarks
   *
   * Time the content of a node was last modified on external file system
   *
   * (default: current server datetime in UTC format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestampModification" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestampModification?: Date;
}
