"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Activity:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_activities(self, request: operations.GetActivitiesRequest) -> operations.GetActivitiesResponse:
        r"""Monitor project activities
        Get a list of real-time activities in the project, such as translation suggestion and translation approval.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetActivitiesRequest, base_url, '/projects/{projectId}/activities', request)
        
        query_params = utils.get_query_params(operations.GetActivitiesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActivityList])
                res.activity_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_activity(self, request: operations.GetActivityRequest) -> operations.GetActivityResponse:
        r"""View an activity
        View the details of an activity in the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetActivityRequest, base_url, '/projects/{projectId}/activities/{activityId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Activity])
                res.activity = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_activity_comments(self, request: operations.GetActivityCommentsRequest) -> operations.GetActivityCommentsResponse:
        r"""View activity comments
        View a list of comments added to this activity.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetActivityCommentsRequest, base_url, '/projects/{projectId}/activities/{activityId}/comments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetActivityCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentList])
                res.comment_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_comments(self, request: operations.GetCommentsRequest) -> operations.GetCommentsResponse:
        r"""View all project comments
        View a list of activity comments in the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommentsRequest, base_url, '/projects/{projectId}/comments', request)
        
        query_params = utils.get_query_params(operations.GetCommentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentList])
                res.comment_list = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_sales_activities(self, request: operations.GetSalesActivitiesRequest) -> operations.GetSalesActivitiesResponse:
        r"""Get sales activities for a project"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSalesActivitiesRequest, base_url, '/projects/{id}/sales/activities', request)
        
        query_params = utils.get_query_params(operations.GetSalesActivitiesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSalesActivitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SalesActivities])
                res.sales_activities = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def insert_sales_activity(self, request: operations.InsertSalesActivityRequest) -> operations.InsertSalesActivityResponse:
        r"""Insert sales activity for a project"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.InsertSalesActivityRequest, base_url, '/projects/{id}/sales/activities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "new_sales_activity", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertSalesActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def submit_comment_json(self, request: operations.SubmitCommentJSONRequest) -> operations.SubmitCommentJSONResponse:
        r"""Submit comment to an activity
        Submit a comment to an activity in the project, such as translation or editing.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitCommentJSONRequest, base_url, '/projects/{projectId}/activities/{activityId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitCommentJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def submit_comment_multipart(self, request: operations.SubmitCommentMultipartRequest) -> operations.SubmitCommentMultipartResponse:
        r"""Submit comment to an activity
        Submit a comment to an activity in the project, such as translation or editing.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitCommentMultipartRequest, base_url, '/projects/{projectId}/activities/{activityId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment1", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitCommentMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    