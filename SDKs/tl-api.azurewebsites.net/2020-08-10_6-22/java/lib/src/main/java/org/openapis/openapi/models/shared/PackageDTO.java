/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PackageDTO - The PackageDTO Class.
 * Contains relevant fields of Package DTO by masking actual Package entity's fields in application.
 *             
 */
public class PackageDTO {
    /**
     * Extra articles list added to the given package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addOns")
    public PackageItemDTO[] addOns;
    public PackageDTO withAddOns(PackageItemDTO[] addOns) {
        this.addOns = addOns;
        return this;
    }
    
    /**
     * sum of addon fees.
     * incoming values for this filed will ignore.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addonFee")
    public Double addonFee;
    public PackageDTO withAddonFee(Double addonFee) {
        this.addonFee = addonFee;
        return this;
    }
    
    /**
     * Boolean value to indicate wheather package is available in all the gyms.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyForAllGyms")
    public Boolean applyForAllGyms;
    public PackageDTO withApplyForAllGyms(Boolean applyForAllGyms) {
        this.applyForAllGyms = applyForAllGyms;
        return this;
    }
    
    /**
     * Gyms list where this package is available.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableGyms")
    public GymDTO[] availableGyms;
    public PackageDTO withAvailableGyms(GymDTO[] availableGyms) {
        this.availableGyms = availableGyms;
        return this;
    }
    
    /**
     * Range of period a member is bound to the contract if he/she choose this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindingPeriod")
    public Integer bindingPeriod;
    public PackageDTO withBindingPeriod(Integer bindingPeriod) {
        this.bindingPeriod = bindingPeriod;
        return this;
    }
    
    /**
     * Package created DateTime.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public PackageDTO withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Package created user.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdUser")
    public String createdUser;
    public PackageDTO withCreatedUser(String createdUser) {
        this.createdUser = createdUser;
        return this;
    }
    
    /**
     * Common descriptions about package.If there are more instructions 
     *              can be stored as comma separated values.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PackageDTO withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * End date of the package.After that package is not valid for use.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endDate")
    public OffsetDateTime endDate;
    public PackageDTO withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * No of months the fixed package is valid for sale
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireInMonths")
    public Integer expireInMonths;
    public PackageDTO withExpireInMonths(Integer expireInMonths) {
        this.expireInMonths = expireInMonths;
        return this;
    }
    
    /**
     * What are the facilities, features available for package.ex:- wifi,
     * ACm etc.Can be stored as comma seperated values.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public String features;
    public PackageDTO withFeatures(String features) {
        this.features = features;
        return this;
    }
    
    /**
     * No of months gym member can come without payments.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeMonths")
    public Integer freeMonths;
    public PackageDTO withFreeMonths(Integer freeMonths) {
        this.freeMonths = freeMonths;
        return this;
    }
    
    /**
     * Instruction to the gym members relevant to the package.
     *              If there are more instructions can be stored as comma seperated values.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instructionsToGymUsers")
    public String instructionsToGymUsers;
    public PackageDTO withInstructionsToGymUsers(String instructionsToGymUsers) {
        this.instructionsToGymUsers = instructionsToGymUsers;
        return this;
    }
    
    /**
     * Instruction to the MRM members relevant to the package.
     *              If there are more instructions can be stored as comma seperated values.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instructionsToWebUsers")
    public String instructionsToWebUsers;
    public PackageDTO withInstructionsToWebUsers(String instructionsToWebUsers) {
        this.instructionsToWebUsers = instructionsToWebUsers;
        return this;
    }
    
    /**
     * Boolean value to indicate this package is still active or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isActive")
    public Boolean isActive;
    public PackageDTO withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    /**
     * Boolean value to indicate ATG transaction from bank is applicable or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAtg")
    public Boolean isAtg;
    public PackageDTO withIsAtg(Boolean isAtg) {
        this.isAtg = isAtg;
        return this;
    }
    
    /**
     * Boolean value to indicate the contract will auto renew after expiration 
     *              if this package would be chosen.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isAutoRenew")
    public Boolean isAutoRenew;
    public PackageDTO withIsAutoRenew(Boolean isAutoRenew) {
        this.isAutoRenew = isAutoRenew;
        return this;
    }
    
    /**
     * Boolean value to indicate if the first month charges is free.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstMonthFree")
    public Boolean isFirstMonthFree;
    public PackageDTO withIsFirstMonthFree(Boolean isFirstMonthFree) {
        this.isFirstMonthFree = isFirstMonthFree;
        return this;
    }
    
    /**
     * Boolean value to indicate this package has registration fee or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRegistrationFee")
    public Boolean isRegistrationFee;
    public PackageDTO withIsRegistrationFee(Boolean isRegistrationFee) {
        this.isRegistrationFee = isRegistrationFee;
        return this;
    }
    
    /**
     * Boolean value to indicate rest amount is applicable or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRestAmount")
    public Boolean isRestAmount;
    public PackageDTO withIsRestAmount(Boolean isRestAmount) {
        this.isRestAmount = isRestAmount;
        return this;
    }
    
    /**
     * Boolean value to indicate package is visible in Mobile App or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isShownInMobile")
    public Boolean isShownInMobile;
    public PackageDTO withIsShownInMobile(Boolean isShownInMobile) {
        this.isShownInMobile = isShownInMobile;
        return this;
    }
    
    /**
     * Boolean value to indicate package can be sponsored or not by other party.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSponsorPackage")
    public Boolean isSponsorPackage;
    public PackageDTO withIsSponsorPackage(Boolean isSponsorPackage) {
        this.isSponsorPackage = isSponsorPackage;
        return this;
    }
    
    /**
     * If a member join the gym middle of a month via this package, 
     *              what is the maximum amount of price can be neglected from payment from the member.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumGiveAwayRestAmount")
    public Double maximumGiveAwayRestAmount;
    public PackageDTO withMaximumGiveAwayRestAmount(Double maximumGiveAwayRestAmount) {
        this.maximumGiveAwayRestAmount = maximumGiveAwayRestAmount;
        return this;
    }
    
    /**
     * Boolean value to indicate member can add extra addons he wish if he choose this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberCanAddAddOns")
    public Boolean memberCanAddAddOns;
    public PackageDTO withMemberCanAddAddOns(Boolean memberCanAddAddOns) {
        this.memberCanAddAddOns = memberCanAddAddOns;
        return this;
    }
    
    /**
     * Boolean value to indicate if member can leave from contract within 
     *              free period if he/she choose this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberCanLeaveWithinFreePeriod")
    public Boolean memberCanLeaveWithinFreePeriod;
    public PackageDTO withMemberCanLeaveWithinFreePeriod(Boolean memberCanLeaveWithinFreePeriod) {
        this.memberCanLeaveWithinFreePeriod = memberCanLeaveWithinFreePeriod;
        return this;
    }
    
    /**
     * Boolean value to indicate member can remove already added addons if he choose this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memberCanRemoveAddOns")
    public Boolean memberCanRemoveAddOns;
    public PackageDTO withMemberCanRemoveAddOns(Boolean memberCanRemoveAddOns) {
        this.memberCanRemoveAddOns = memberCanRemoveAddOns;
        return this;
    }
    
    /**
     * Package last modified DateTime.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedDate")
    public OffsetDateTime modifiedDate;
    public PackageDTO withModifiedDate(OffsetDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * Package last modified user.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedUser")
    public String modifiedUser;
    public PackageDTO withModifiedUser(String modifiedUser) {
        this.modifiedUser = modifiedUser;
        return this;
    }
    
    /**
     * Monthly installment fee if package is not fixed visit.
     * addition of the servicefee and addon fees divided by binding period.
     *              read only
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monthlyFee")
    public Double monthlyFee;
    public PackageDTO withMonthlyFee(Double monthlyFee) {
        this.monthlyFee = monthlyFee;
        return this;
    }
    
    /**
     * Next Package the contract continue after the binding period of this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPackageNumber")
    public Integer nextPackageNumber;
    public PackageDTO withNextPackageNumber(Integer nextPackageNumber) {
        this.nextPackageNumber = nextPackageNumber;
        return this;
    }
    
    /**
     * Maximum Number of installment a member can divide the package price/cost to pay.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfInstallments")
    public Integer numberOfInstallments;
    public PackageDTO withNumberOfInstallments(Integer numberOfInstallments) {
        this.numberOfInstallments = numberOfInstallments;
        return this;
    }
    
    /**
     * If package is fixed visit type, then how many visits are available for this package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfVisits")
    public Integer numberOfVisits;
    public PackageDTO withNumberOfVisits(Integer numberOfVisits) {
        this.numberOfVisits = numberOfVisits;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageId")
    public Integer packageId;
    public PackageDTO withPackageId(Integer packageId) {
        this.packageId = packageId;
        return this;
    }
    
    @JsonProperty("packageName")
    public String packageName;
    public PackageDTO withPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packageNumber")
    public String packageNumber;
    public PackageDTO withPackageNumber(String packageNumber) {
        this.packageNumber = packageNumber;
        return this;
    }
    
    /**
     * Package type can be either fixed visit or unlimited.
     *             
     */
    @JsonProperty("packageType")
    public String packageType;
    public PackageDTO withPackageType(String packageType) {
        this.packageType = packageType;
        return this;
    }
    
    /**
     * Cost/Price of the single visit to gym.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perVisitPrice")
    public Double perVisitPrice;
    public PackageDTO withPerVisitPrice(Double perVisitPrice) {
        this.perVisitPrice = perVisitPrice;
        return this;
    }
    
    /**
     * Registartion fee for the package at a gym.
     *              read only
     *             
     */
    @JsonProperty("registrationFee")
    public Double registrationFee;
    public PackageDTO withRegistrationFee(Double registrationFee) {
        this.registrationFee = registrationFee;
        return this;
    }
    
    /**
     * total Service charge of the package for entire period.
     *             
     */
    @JsonProperty("serviceFee")
    public Double serviceFee;
    public PackageDTO withServiceFee(Double serviceFee) {
        this.serviceFee = serviceFee;
        return this;
    }
    
    /**
     * Boolean value to show this package in MRM system or not.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shownInWeb")
    public Boolean shownInWeb;
    public PackageDTO withShownInWeb(Boolean shownInWeb) {
        this.shownInWeb = shownInWeb;
        return this;
    }
    
    /**
     * Start date of the package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startDate")
    public OffsetDateTime startDate;
    public PackageDTO withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Comma separated string values in case of need of maintain some labels kind of 
     *              stuff relevant to the package.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String tags;
    public PackageDTO withTags(String tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * total price for the package including Addon fees, service fee and registration fee.
     * incoming values for this field will ignore.
     *             
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPrice")
    public Double totalPrice;
    public PackageDTO withTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }
    
}
