"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductsApproveRequest = exports.ProductsApproveRequestApprovedPermissionsEnum = void 0;
var utils_1 = require("../../../internal/utils");
var approvalurlinfo_1 = require("./approvalurlinfo");
var class_transformer_1 = require("class-transformer");
/**
 * Sets how new permission requests for the product are handled. "allPermissions" automatically approves all current and future permissions for the product. "currentPermissionsOnly" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.
 */
var ProductsApproveRequestApprovedPermissionsEnum;
(function (ProductsApproveRequestApprovedPermissionsEnum) {
    ProductsApproveRequestApprovedPermissionsEnum["CurrentPermissionsOnly"] = "currentPermissionsOnly";
    ProductsApproveRequestApprovedPermissionsEnum["AllPermissions"] = "allPermissions";
})(ProductsApproveRequestApprovedPermissionsEnum = exports.ProductsApproveRequestApprovedPermissionsEnum || (exports.ProductsApproveRequestApprovedPermissionsEnum = {}));
var ProductsApproveRequest = /** @class */ (function (_super) {
    __extends(ProductsApproveRequest, _super);
    function ProductsApproveRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "approvalUrlInfo" }),
        (0, class_transformer_1.Type)(function () { return approvalurlinfo_1.ApprovalUrlInfo; }),
        __metadata("design:type", approvalurlinfo_1.ApprovalUrlInfo)
    ], ProductsApproveRequest.prototype, "approvalUrlInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "approvedPermissions" }),
        __metadata("design:type", String)
    ], ProductsApproveRequest.prototype, "approvedPermissions", void 0);
    return ProductsApproveRequest;
}(utils_1.SpeakeasyBase));
exports.ProductsApproveRequest = ProductsApproveRequest;
