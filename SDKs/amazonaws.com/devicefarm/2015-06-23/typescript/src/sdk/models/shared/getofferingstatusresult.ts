/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { OfferingStatus } from "./offeringstatus";
import { Expose, Transform } from "class-transformer";

/**
 * Returns the status result for a device offering.
 */
export class GetOfferingStatusResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: OfferingStatus })
  @Expose({ name: "current" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OfferingStatus> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OfferingStatus);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  current?: Record<string, OfferingStatus>;

  @SpeakeasyMetadata({ elemType: OfferingStatus })
  @Expose({ name: "nextPeriod" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, OfferingStatus> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], OfferingStatus);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  nextPeriod?: Record<string, OfferingStatus>;

  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}
