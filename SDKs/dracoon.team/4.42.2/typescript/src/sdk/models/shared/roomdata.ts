/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NodePermissions } from "./nodepermissions";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Node type
 */
export enum RoomDataTypeEnum {
  Room = "room",
}

/**
 * Room information
 */
export class RoomData extends SpeakeasyBase {
  /**
   * &#128679; Deprecated since v4.10.0
   *
   * @remarks
   *
   * List of rooms, where this room is a parent (if exist)
   */
  @SpeakeasyMetadata({ elemType: RoomData })
  @Expose({ name: "children" })
  @Type(() => RoomData)
  children?: RoomData[];

  /**
   * Returns the number of Download Shares of this node.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntDownloadShares" })
  cntDownloadShares?: number;

  /**
   * Returns the number of Upload Shares of this node.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cntUploadShares" })
  cntUploadShares?: number;

  /**
   * Expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  @Type(() => UserInfo)
  createdBy?: UserInfo;

  /**
   * &#128679; Deprecated since v4.10.0
   *
   * @remarks
   *
   * Is recycle bin active (for rooms only)
   *
   * Recycle bin is always on (disabling is not possible).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasRecycleBin" })
  hasRecycleBin: boolean;

  /**
   * Room ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isEncrypted" })
  isEncrypted: boolean;

  /**
   * Node is marked as favorite (for rooms / folders only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isFavorite" })
  isFavorite?: boolean;

  /**
   * Is user granted room permissions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isGranted" })
  isGranted: boolean;

  /**
   * Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Parent node ID (room or folder)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentId" })
  parentId?: number;

  /**
   * Node permissions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => NodePermissions)
  permissions?: NodePermissions;

  /**
   * Quota in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quota" })
  quota?: number;

  /**
   * Retention period for deleted nodes in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recycleBinRetentionPeriod" })
  recycleBinRetentionPeriod: number;

  /**
   * Room size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * Node type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: RoomDataTypeEnum;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  @Type(() => UserInfo)
  updatedBy?: UserInfo;
}
