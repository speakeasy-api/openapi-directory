/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkerHealthReport - WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
 */
public class WorkerHealthReport {
    /**
     * Message describing any unusual health reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("msg")
    public String msg;
    public WorkerHealthReport withMsg(String msg) {
        this.msg = msg;
        return this;
    }
    
    /**
     * The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pods")
    public java.util.Map<String, Object>[] pods;
    public WorkerHealthReport withPods(java.util.Map<String, Object>[] pods) {
        this.pods = pods;
        return this;
    }
    
    /**
     * The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportInterval")
    public String reportInterval;
    public WorkerHealthReport withReportInterval(String reportInterval) {
        this.reportInterval = reportInterval;
        return this;
    }
    
    /**
     * Code to describe a specific reason, if known, that a VM has reported broken state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmBrokenCode")
    public String vmBrokenCode;
    public WorkerHealthReport withVmBrokenCode(String vmBrokenCode) {
        this.vmBrokenCode = vmBrokenCode;
        return this;
    }
    
    /**
     * Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmIsBroken")
    public Boolean vmIsBroken;
    public WorkerHealthReport withVmIsBroken(Boolean vmIsBroken) {
        this.vmIsBroken = vmIsBroken;
        return this;
    }
    
    /**
     * Whether the VM is currently healthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmIsHealthy")
    public Boolean vmIsHealthy;
    public WorkerHealthReport withVmIsHealthy(Boolean vmIsHealthy) {
        this.vmIsHealthy = vmIsHealthy;
        return this;
    }
    
    /**
     * The time the VM was booted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vmStartupTime")
    public String vmStartupTime;
    public WorkerHealthReport withVmStartupTime(String vmStartupTime) {
        this.vmStartupTime = vmStartupTime;
        return this;
    }
    
}
