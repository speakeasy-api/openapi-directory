/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Keywords {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Find keyword lease configs
   *
   * @remarks
   * Searches for all keyword lease configs for the user. Returns a paged list of KeywordConfig
   */
  findKeywordLeaseConfigs(
    req: operations.FindKeywordLeaseConfigsRequest,
    security: operations.FindKeywordLeaseConfigsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindKeywordLeaseConfigsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindKeywordLeaseConfigsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/keywords/leases/configs";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindKeywordLeaseConfigsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindKeywordLeaseConfigsResponse =
        new operations.FindKeywordLeaseConfigsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find keyword leases
   *
   * @remarks
   * Searches for all keywords owned by user. A keyword lease is the ownership information involving a keyword
   */
  findKeywordLeases(
    req: operations.FindKeywordLeasesRequest,
    security: operations.FindKeywordLeasesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindKeywordLeasesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindKeywordLeasesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/keywords/leases";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindKeywordLeasesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindKeywordLeasesResponse =
        new operations.FindKeywordLeasesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordLeasePage = utils.objectToClass(
              httpRes?.data,
              shared.KeywordLeasePage
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find keywords
   *
   * @remarks
   * Searches for all keywords available for purchase on the CallFire platform. If a keyword appears in the response, it is available for purchase. List the 'keywords' in a query parameter to search for multiple keywords (at least one keyword should be sent in request). Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
   */
  findKeywords(
    req: operations.FindKeywordsRequest,
    security: operations.FindKeywordsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindKeywordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindKeywordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/keywords";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindKeywordsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindKeywordsResponse =
        new operations.FindKeywordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordList = utils.objectToClass(
              httpRes?.data,
              shared.KeywordList
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find a specific lease
   *
   * @remarks
   * Searches for all keywords owned by user
   */
  getKeywordLease(
    req: operations.GetKeywordLeaseRequest,
    security: operations.GetKeywordLeaseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetKeywordLeaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetKeywordLeaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/leases/{keyword}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetKeywordLeaseSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetKeywordLeaseResponse =
        new operations.GetKeywordLeaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordLease = utils.objectToClass(
              httpRes?.data,
              shared.KeywordLease
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find a keyword by id
   *
   * @remarks
   * Get keyword by id
   */
  getKeywordLeaseById(
    req: operations.GetKeywordLeaseByIdRequest,
    security: operations.GetKeywordLeaseByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetKeywordLeaseByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetKeywordLeaseByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/leases/id/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetKeywordLeaseByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetKeywordLeaseByIdResponse =
        new operations.GetKeywordLeaseByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordLease = utils.objectToClass(
              httpRes?.data,
              shared.KeywordLease
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find a specific keyword lease config
   *
   * @remarks
   * Returns a single KeywordConfig instance for a given keyword lease
   */
  getKeywordLeaseConfig(
    req: operations.GetKeywordLeaseConfigRequest,
    security: operations.GetKeywordLeaseConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetKeywordLeaseConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetKeywordLeaseConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/leases/configs/{keyword}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetKeywordLeaseConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetKeywordLeaseConfigResponse =
        new operations.GetKeywordLeaseConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordConfig = utils.objectToClass(
              httpRes?.data,
              shared.KeywordConfig
            );
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check for a specific keyword
   *
   * @remarks
   * Searches for the specific keyword to purchase on the CallFire platform. Returns 'true' if keyword is available. Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
   */
  isKeywordAvailable(
    req: operations.IsKeywordAvailableRequest,
    security: operations.IsKeywordAvailableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IsKeywordAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IsKeywordAvailableRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/{keyword}/available",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IsKeywordAvailableSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IsKeywordAvailableResponse =
        new operations.IsKeywordAvailableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.isKeywordAvailable200ApplicationJSONBoolean = httpRes?.data;
          }
          break;
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a lease
   *
   * @remarks
   * Updates a keyword lease. Turns the autoRenew on/off. Configure double opt in feature. Add/remove contact list from keyword.
   */
  updateKeywordLease(
    req: operations.UpdateKeywordLeaseRequest,
    security: operations.UpdateKeywordLeaseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateKeywordLeaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateKeywordLeaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/leases/{keyword}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "keywordLease",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateKeywordLeaseSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateKeywordLeaseResponse =
        new operations.UpdateKeywordLeaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a keyword lease config
   *
   * @remarks
   * Updates a keyword lease configuration. Use this API endpoint to enable/disable inbound SMS forwarding, set forward number. Forward number must be in E.164 format)
   */
  updateKeywordLeaseConfig(
    req: operations.UpdateKeywordLeaseConfigRequest,
    security: operations.UpdateKeywordLeaseConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateKeywordLeaseConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateKeywordLeaseConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/keywords/leases/configs/{keyword}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "keywordConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateKeywordLeaseConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateKeywordLeaseConfigResponse =
        new operations.UpdateKeywordLeaseConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [400, 401, 403, 404, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
