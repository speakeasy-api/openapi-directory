// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum - The type of attachment used to provide connectivity between the Amazon Web Services Verified Access endpoint and the application.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum string

const (
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnumVpc DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum = "vpc"
)

func (e DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum) ToPointer() *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum {
	return &e
}

func (e *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpc":
		*e = DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum: %v", v)
	}
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum - The type of Amazon Web Services Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum string

const (
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnumLoadBalancer     DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum = "load-balancer"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnumNetworkInterface DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum = "network-interface"
)

func (e DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum) ToPointer() *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum {
	return &e
}

func (e *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "load-balancer":
		fallthrough
	case "network-interface":
		*e = DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum: %v", v)
	}
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum - The IP protocol.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum string

const (
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnumHTTP  DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum = "http"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnumHTTPS DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum = "https"
)

func (e DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum) ToPointer() *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum {
	return &e
}

func (e *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum: %v", v)
	}
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptions - The load balancer details if creating the Amazon Web Services Verified Access endpoint as <code>load-balancer</code>type.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptions struct {
	LoadBalancerArn *string
	Port            *int64
	Protocol        *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptionsProtocolEnum
	SubnetIds       []string
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum - The IP protocol.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum string

const (
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnumHTTP  DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum = "http"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnumHTTPS DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum = "https"
)

func (e DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum) ToPointer() *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum {
	return &e
}

func (e *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum: %v", v)
	}
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptions - The options for network-interface type endpoint.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptions struct {
	NetworkInterfaceID *string
	Port               *int64
	Protocol           *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptionsProtocolEnum
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum - The status code of the Verified Access endpoint.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum string

const (
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnumPending  DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum = "pending"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnumActive   DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum = "active"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnumUpdating DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum = "updating"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnumDeleting DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum = "deleting"
	DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnumDeleted  DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum = "deleted"
)

func (e DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum) ToPointer() *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum {
	return &e
}

func (e *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "active":
		fallthrough
	case "updating":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		*e = DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum: %v", v)
	}
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatus - The endpoint status.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatus struct {
	Code    *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatusCodeEnum
	Message *string
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsTags - Describes a tag.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsTags struct {
	Key   *string
	Value *string
}

// DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpoints - An Amazon Web Services Verified Access endpoint specifies the application that Amazon Web Services Verified Access provides access to. It must be attached to an Amazon Web Services Verified Access group. An Amazon Web Services Verified Access endpoint must also have an attached access policy before you attached it to a group.
type DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpoints struct {
	ApplicationDomain        *string
	AttachmentType           *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsAttachmentTypeEnum
	CreationTime             *string
	DeletionTime             *string
	Description              *string
	DeviceValidationDomain   *string
	DomainCertificateArn     *string
	EndpointDomain           *string
	EndpointType             *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsEndpointTypeEnum
	LastUpdatedTime          *string
	LoadBalancerOptions      *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsLoadBalancerOptions
	NetworkInterfaceOptions  *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsNetworkInterfaceOptions
	SecurityGroupIds         []string
	Status                   *DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsStatus
	Tags                     []DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpointsTags
	VerifiedAccessEndpointID *string
	VerifiedAccessGroupID    *string
	VerifiedAccessInstanceID *string
}

// DescribeVerifiedAccessEndpointsResult - Success
type DescribeVerifiedAccessEndpointsResult struct {
	NextToken               *string
	VerifiedAccessEndpoints []DescribeVerifiedAccessEndpointsResultVerifiedAccessEndpoints
}
