"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConversionProperties:
    r"""Properties of a conversion job"""
    
    data_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataTimestamp'), 'exclude': lambda f: f is None }})  
    force_uefi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forceUefi'), 'exclude': lambda f: f is None }})  
    root_volume_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootVolumeName'), 'exclude': lambda f: f is None }})  
    volume_to_conversion_map: Optional[dict[str, dict[str, str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeToConversionMap'), 'exclude': lambda f: f is None }})  
    volume_to_volume_size: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeToVolumeSize'), 'exclude': lambda f: f is None }})  
    