// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DetailScopeEnum - Does the error apply to one item
type DetailScopeEnum string

const (
	DetailScopeEnumParameter DetailScopeEnum = "Parameter"
	DetailScopeEnumReport    DetailScopeEnum = "Report"
	DetailScopeEnumItem      DetailScopeEnum = "Item"
)

func (e DetailScopeEnum) ToPointer() *DetailScopeEnum {
	return &e
}

func (e *DetailScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Parameter":
		fallthrough
	case "Report":
		fallthrough
	case "Item":
		*e = DetailScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DetailScopeEnum: %v", v)
	}
}

type Detail struct {
	// The details of the error
	Detail *string `json:"detail,omitempty"`
	// Depends on scope, either the item's id (message_id) or the report's id
	ID *string `json:"id,omitempty"`
	// Does the error apply to one item
	Scope *DetailScopeEnum `json:"scope,omitempty"`
}
