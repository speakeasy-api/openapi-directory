"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetVolumesSortEnum(str, Enum):
    r"""Can be used multiple times."""
    ID = 'id'
    ID_ASC = 'id:asc'
    ID_DESC = 'id:desc'
    NAME = 'name'
    NAME_ASC = 'name:asc'
    NAME_DESC = 'name:desc'
    CREATED = 'created'
    CREATED_ASC = 'created:asc'
    CREATED_DESC = 'created:desc'

class GetVolumesStatusEnum(str, Enum):
    r"""Can be used multiple times. The response will only contain Volumes matching the status."""
    AVAILABLE = 'available'
    CREATING = 'creating'


@dataclasses.dataclass
class GetVolumesRequest:
    
    label_selector: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label_selector', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by labels. The response will only contain resources matching the label selector."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Can be used to filter resources by their name. The response will only contain the resources matching the specified name"""  
    sort: Optional[GetVolumesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times."""  
    status: Optional[GetVolumesStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Can be used multiple times. The response will only contain Volumes matching the status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSONMetaPagination:
    
    last_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page') }})
    r"""ID of the last page available. Can be null if the current page is the last one."""  
    next_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page') }})
    r"""ID of the next page. Can be null if the current page is the last one."""  
    page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page') }})
    r"""Current page number"""  
    per_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_page') }})
    r"""Maximum number of items shown per page in the response"""  
    previous_page: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page') }})
    r"""ID of the previous page. Can be null if the current page is the first one."""  
    total_entries: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_entries') }})
    r"""The total number of entries that exist in the database for this query. Nullable if unknown."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSONMeta:
    
    pagination: GetVolumes200ApplicationJSONMetaPagination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pagination') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSONVolumesLocation:
    r"""Location of the Volume. Volume can only be attached to Servers in the same Location."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City the Location is closest to"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""ISO 3166-1 alpha-2 code of the country the Location resides in"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the Location"""  
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Location"""  
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""Latitude of the city closest to the Location"""  
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""Longitude of the city closest to the Location"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Unique identifier of the Location"""  
    network_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_zone') }})
    r"""Name of network zone this Location resides in"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSONVolumesProtection:
    r"""Protection configuration for the Resource"""
    
    delete: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete') }})
    r"""If true, prevents the Resource from being deleted"""  
    
class GetVolumes200ApplicationJSONVolumesStatusEnum(str, Enum):
    r"""Current status of the Volume"""
    CREATING = 'creating'
    AVAILABLE = 'available'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSONVolumes:
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    format: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    r"""Filesystem of the Volume if formatted on creation, null if not formatted on creation"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    linux_device: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linux_device') }})
    r"""Device path on the file system for the Volume"""  
    location: GetVolumes200ApplicationJSONVolumesLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""Location of the Volume. Volume can only be attached to Servers in the same Location."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    protection: GetVolumes200ApplicationJSONVolumesProtection = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protection') }})
    r"""Protection configuration for the Resource"""  
    server: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server') }})
    r"""ID of the Server the Volume is attached to, null if it is not attached at all"""  
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Size in GB of the Volume"""  
    status: GetVolumes200ApplicationJSONVolumesStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the Volume"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetVolumes200ApplicationJSON:
    r"""The `volumes` key contains a list of volumes"""
    
    volumes: list[GetVolumes200ApplicationJSONVolumes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumes') }})  
    meta: Optional[GetVolumes200ApplicationJSONMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetVolumesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_volumes_200_application_json_object: Optional[GetVolumes200ApplicationJSON] = dataclasses.field(default=None)
    r"""The `volumes` key contains a list of volumes"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    