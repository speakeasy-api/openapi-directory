// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PullsCreateReviewCommentRequestBodySideEnum - **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
type PullsCreateReviewCommentRequestBodySideEnum string

const (
	PullsCreateReviewCommentRequestBodySideEnumLeft  PullsCreateReviewCommentRequestBodySideEnum = "LEFT"
	PullsCreateReviewCommentRequestBodySideEnumRight PullsCreateReviewCommentRequestBodySideEnum = "RIGHT"
)

func (e PullsCreateReviewCommentRequestBodySideEnum) ToPointer() *PullsCreateReviewCommentRequestBodySideEnum {
	return &e
}

func (e *PullsCreateReviewCommentRequestBodySideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEFT":
		fallthrough
	case "RIGHT":
		*e = PullsCreateReviewCommentRequestBodySideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsCreateReviewCommentRequestBodySideEnum: %v", v)
	}
}

// PullsCreateReviewCommentRequestBodyStartSideEnum - **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
type PullsCreateReviewCommentRequestBodyStartSideEnum string

const (
	PullsCreateReviewCommentRequestBodyStartSideEnumLeft  PullsCreateReviewCommentRequestBodyStartSideEnum = "LEFT"
	PullsCreateReviewCommentRequestBodyStartSideEnumRight PullsCreateReviewCommentRequestBodyStartSideEnum = "RIGHT"
	PullsCreateReviewCommentRequestBodyStartSideEnumSide  PullsCreateReviewCommentRequestBodyStartSideEnum = "side"
)

func (e PullsCreateReviewCommentRequestBodyStartSideEnum) ToPointer() *PullsCreateReviewCommentRequestBodyStartSideEnum {
	return &e
}

func (e *PullsCreateReviewCommentRequestBodyStartSideEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEFT":
		fallthrough
	case "RIGHT":
		fallthrough
	case "side":
		*e = PullsCreateReviewCommentRequestBodyStartSideEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsCreateReviewCommentRequestBodyStartSideEnum: %v", v)
	}
}

type PullsCreateReviewCommentRequestBody struct {
	// The text of the review comment.
	Body string `json:"body"`
	// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
	CommitID *string `json:"commit_id,omitempty"`
	// The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
	InReplyTo *int64 `json:"in_reply_to,omitempty"`
	// **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
	Line *int64 `json:"line,omitempty"`
	// The relative path to the file that necessitates a comment.
	Path *string `json:"path,omitempty"`
	// **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
	Position *int64 `json:"position,omitempty"`
	// **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
	Side *PullsCreateReviewCommentRequestBodySideEnum `json:"side,omitempty"`
	// **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
	StartLine *int64 `json:"start_line,omitempty"`
	// **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
	StartSide *PullsCreateReviewCommentRequestBodyStartSideEnum `json:"start_side,omitempty"`
}

type PullsCreateReviewCommentRequest struct {
	RequestBody PullsCreateReviewCommentRequestBody `request:"mediaType=application/json"`
	Owner       string                              `pathParam:"style=simple,explode=false,name=owner"`
	PullNumber  int64                               `pathParam:"style=simple,explode=false,name=pull_number"`
	Repo        string                              `pathParam:"style=simple,explode=false,name=repo"`
}

type PullsCreateReviewCommentResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	PullRequestReviewComment *shared.PullRequestReviewComment
	// Validation failed
	ValidationError *shared.ValidationError
}
