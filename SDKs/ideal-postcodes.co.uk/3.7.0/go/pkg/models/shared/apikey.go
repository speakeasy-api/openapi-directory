// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type APIKeyContextType string

const (
	APIKeyContextTypeStr           APIKeyContextType = "str"
	APIKeyContextTypeNoContextEnum APIKeyContextType = "NoContext_Enum"
)

type APIKeyContext struct {
	Str           *string
	NoContextEnum *NoContextEnum

	Type APIKeyContextType
}

func CreateAPIKeyContextStr(str string) APIKeyContext {
	typ := APIKeyContextTypeStr

	return APIKeyContext{
		Str:  &str,
		Type: typ,
	}
}

func CreateAPIKeyContextNoContextEnum(noContextEnum NoContextEnum) APIKeyContext {
	typ := APIKeyContextTypeNoContextEnum

	return APIKeyContext{
		NoContextEnum: &noContextEnum,
		Type:          typ,
	}
}

func (u *APIKeyContext) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = APIKeyContextTypeStr
		return nil
	}

	noContextEnum := new(NoContextEnum)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&noContextEnum); err == nil {
		u.NoContextEnum = noContextEnum
		u.Type = APIKeyContextTypeNoContextEnum
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u APIKeyContext) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.NoContextEnum != nil {
		return json.Marshal(u.NoContextEnum)
	}

	return nil, nil
}

type APIKey struct {
	// Determines whether the key can be used by the requesting agent.
	//
	// Returns false if one of the following conditions are met:
	//   - Key has no lookups remaining
	//   - Daily limit has been reached on the key
	//   - Daily individual limit has been reached
	//   - Key is not being used via an authorised URL
	//   - (Sublicensed key only) Key has a valid licensee attached
	//   - (Sublicensed key only) Key is not being used via an authorised URL specified by licensee
	//
	Available bool `json:"available"`
	// Returns current context if it is in the list of available contexts for this key.
	//
	Context APIKeyContext `json:"context"`
	// A list of available contexts for a key
	Contexts []AvailableContexts `json:"contexts"`
}
