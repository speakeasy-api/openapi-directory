/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ProductListPage {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get list of banners registered for query
   *
   * @remarks
   * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
   */
  getBannersFacets(
    req: operations.GetBannersFacetsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBannersFacetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBannersFacetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/banners/{facets}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBannersFacetsResponse =
        new operations.GetBannersFacetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.banners = utils.objectToClass(httpRes?.data, shared.Banners);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get attempt of correction of a misspelled term
   *
   * @remarks
   * Tries to correct a misspelled term from the search.
   */
  getCorrectionSearch(
    req: operations.GetCorrectionSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorrectionSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCorrectionSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/correction_search";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorrectionSearchResponse =
        new operations.GetCorrectionSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.correction = utils.objectToClass(
              httpRes?.data,
              shared.Correction
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of the possible facets for a given query
   *
   * @remarks
   * Lists the possible facets for a given query
   */
  getFacetsFacets(
    req: operations.GetFacetsFacetsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFacetsFacetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFacetsFacetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/facets/{facets}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFacetsFacetsResponse =
        new operations.GetFacetsFacetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facets = utils.objectToClass(httpRes?.data, shared.Facets);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of products for a query
   *
   * @remarks
   * Lists the products for a given query.
   */
  getProductSearchFacets(
    req: operations.GetProductSearchFacetsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProductSearchFacetsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProductSearchFacetsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/product_search/{facets}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProductSearchFacetsResponse =
        new operations.GetProductSearchFacetsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productSearch = utils.objectToClass(
              httpRes?.data,
              shared.ProductSearch
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of suggested terms similar to the search term
   *
   * @remarks
   * Lists suggested terms similar to the search term.
   */
  getSearchSuggestions(
    req: operations.GetSearchSuggestionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchSuggestionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchSuggestionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/search_suggestions";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchSuggestionsResponse =
        new operations.GetSearchSuggestionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchSuggestions = utils.objectToClass(
              httpRes?.data,
              shared.SearchSuggestions
            );
          }
          break;
        case httpRes?.status >= 500 && httpRes?.status < 600:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
