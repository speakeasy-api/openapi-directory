// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BuildsListToolsetProjectsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// BuildsListToolsetProjectsOsEnum - The desired OS for the project scan; normally the same as the app OS
type BuildsListToolsetProjectsOsEnum string

const (
	BuildsListToolsetProjectsOsEnumIOs     BuildsListToolsetProjectsOsEnum = "iOS"
	BuildsListToolsetProjectsOsEnumAndroid BuildsListToolsetProjectsOsEnum = "Android"
	BuildsListToolsetProjectsOsEnumWindows BuildsListToolsetProjectsOsEnum = "Windows"
	BuildsListToolsetProjectsOsEnumMacOs   BuildsListToolsetProjectsOsEnum = "macOS"
)

func (e *BuildsListToolsetProjectsOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "iOS":
		fallthrough
	case "Android":
		fallthrough
	case "Windows":
		fallthrough
	case "macOS":
		*e = BuildsListToolsetProjectsOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsListToolsetProjectsOsEnum: %s", s)
	}
}

// BuildsListToolsetProjectsPlatformEnum - The desired platform for the project scan
type BuildsListToolsetProjectsPlatformEnum string

const (
	BuildsListToolsetProjectsPlatformEnumObjectiveCSwift BuildsListToolsetProjectsPlatformEnum = "Objective-C-Swift"
	BuildsListToolsetProjectsPlatformEnumReactNative     BuildsListToolsetProjectsPlatformEnum = "React-Native"
	BuildsListToolsetProjectsPlatformEnumXamarin         BuildsListToolsetProjectsPlatformEnum = "Xamarin"
	BuildsListToolsetProjectsPlatformEnumJava            BuildsListToolsetProjectsPlatformEnum = "Java"
	BuildsListToolsetProjectsPlatformEnumUwp             BuildsListToolsetProjectsPlatformEnum = "UWP"
)

func (e *BuildsListToolsetProjectsPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Objective-C-Swift":
		fallthrough
	case "React-Native":
		fallthrough
	case "Xamarin":
		fallthrough
	case "Java":
		fallthrough
	case "UWP":
		*e = BuildsListToolsetProjectsPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsListToolsetProjectsPlatformEnum: %s", s)
	}
}

type BuildsListToolsetProjectsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The branch name
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The depth of the repository to search for project files
	MaxSearchDepth *int64 `queryParam:"style=form,explode=true,name=maxSearchDepth"`
	// The desired OS for the project scan; normally the same as the app OS
	Os BuildsListToolsetProjectsOsEnum `queryParam:"style=form,explode=true,name=os"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The desired platform for the project scan
	Platform BuildsListToolsetProjectsPlatformEnum `queryParam:"style=form,explode=true,name=platform"`
}

// BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig - Android signing config. Null if not specified
type BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig struct {
	// Indicates if storeFile is specified in the signing configuration
	HasStoreFile *bool `json:"hasStoreFile,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations struct {
	// Name of build configuration (the same as a build type name)
	Name string `json:"name"`
	// Android signing config. Null if not specified
	SigningConfig *BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig `json:"signingConfig,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules struct {
	// The detected build configurations of the Android module
	BuildConfigurations []BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations `json:"buildConfigurations,omitempty"`
	// The detected build types of the Android module
	BuildTypes []string `json:"buildTypes,omitempty"`
	// The detected build variants of the Android module (matrix of product flavor + build type (debug|release))
	BuildVariants []string `json:"buildVariants,omitempty"`
	// Module contains bundle settings
	HasBundle *bool `json:"hasBundle,omitempty"`
	// Whether the module is at the root level of the project
	IsRoot *bool `json:"isRoot,omitempty"`
	// Name of the Android module
	Name string `json:"name"`
	// The product flavors of the Android module
	ProductFlavors []string `json:"productFlavors,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONAndroid struct {
	// Android Gradle modules
	AndroidModules []BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules `json:"androidModules"`
	// The path of the Gradle wrapper
	GradleWrapperPath *string `json:"gradleWrapperPath,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions struct {
	// The path to the detected package.json
	PackageJSONPath string `json:"packageJsonPath"`
	// Version of React Native from package.json files
	ReactNativeVersion *string `json:"reactNativeVersion,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONJavascript struct {
	// The React Native solutions detected
	JavascriptSolutions []BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions `json:"javascriptSolutions,omitempty"`
	// Paths for detected package.json files
	PackageJSONPaths []string `json:"packageJsonPaths"`
}

type BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties struct {
	Configurations []string `json:"configurations,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum string

const (
	BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnumAppium    BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = "Appium"
	BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnumCalabash  BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = "Calabash"
	BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnumEspresso  BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = "Espresso"
	BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnumUITest    BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = "UITest"
	BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnumGenerated BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum = "Generated"
)

func (e *BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Appium":
		fallthrough
	case "Calabash":
		fallthrough
	case "Espresso":
		fallthrough
	case "UITest":
		fallthrough
	case "Generated":
		*e = BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum: %s", s)
	}
}

type BuildsListToolsetProjects200ApplicationJSONTestcloudProjects struct {
	FrameworkProperties *BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties `json:"frameworkProperties,omitempty"`
	FrameworkType       BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum    `json:"frameworkType"`
	// The path to the TestCloud project
	Path string `json:"path"`
}

type BuildsListToolsetProjects200ApplicationJSONTestcloud struct {
	// The TestCloud projects detected
	Projects []BuildsListToolsetProjects200ApplicationJSONTestcloudProjects `json:"projects"`
}

type BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions struct {
	// The possible configurations detected for the UWP solution
	Configurations []string `json:"configurations"`
	// The path to the UWP solution
	Path string `json:"path"`
}

type BuildsListToolsetProjects200ApplicationJSONUwp struct {
	// The UWP solutions detected
	UwpSolutions []BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions `json:"uwpSolutions"`
}

type BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions struct {
	// Solution configurations
	Configurations []string `json:"configurations"`
	// Solution default configuration
	DefaultConfiguration *string `json:"defaultConfiguration,omitempty"`
	// Path to solution
	Path string `json:"path"`
}

type BuildsListToolsetProjects200ApplicationJSONXamarin struct {
	// Xamarin solutions for the toolset
	XamarinSolutions []BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions `json:"xamarinSolutions"`
}

// BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets - App extension information
type BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets struct {
	// App extension name
	Name string `json:"name"`
	// App extension bundle identifier
	TargetBundleIdentifier string `json:"targetBundleIdentifier"`
}

type BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject struct {
	// The Id of the target to archive
	ArchiveTargetID string `json:"archiveTargetId"`
	// The project to archive container name
	ProjectName string `json:"projectName"`
	// Full path of the target project
	ProjectPath *string `json:"projectPath,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes struct {
	// Build configuration set in Archive action
	ArchiveConfiguration *string                                                                                           `json:"archiveConfiguration,omitempty"`
	ArchiveProject       *BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject `json:"archiveProject,omitempty"`
	// Does scheme have a test action?
	HasTestAction bool `json:"hasTestAction"`
	// Scheme name
	Name string `json:"name"`
}

type BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers struct {
	// Information regarding project app extensions, if present
	AppExtensionTargets []BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets `json:"appExtensionTargets,omitempty"`
	// Path to Carthage file, if present
	CartfilePath *string `json:"cartfilePath,omitempty"`
	// Path to project
	Path string `json:"path"`
	// Path to CocoaPods file, if present
	PodfilePath *string `json:"podfilePath,omitempty"`
	// Project schemes
	SharedSchemes []BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes `json:"sharedSchemes"`
	// Related projects paths for xcworkspace
	WorkspaceProjectPaths *string `json:"workspaceProjectPaths,omitempty"`
	// repo object Id of the pbxproject
	XcodeProjectSha *string `json:"xcodeProjectSha,omitempty"`
}

type BuildsListToolsetProjects200ApplicationJSONXcode struct {
	// The Xcode scheme containers
	XcodeSchemeContainers []BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers `json:"xcodeSchemeContainers"`
}

// BuildsListToolsetProjects200ApplicationJSON - A collection of projects for each type of toolset
type BuildsListToolsetProjects200ApplicationJSON struct {
	Android *BuildsListToolsetProjects200ApplicationJSONAndroid `json:"android,omitempty"`
	// A collection of detected pre/post buildscripts for current platform toolset
	Buildscripts interface{} `json:"buildscripts,omitempty"`
	// The commit hash of the analyzed commit
	Commit     *string                                                `json:"commit,omitempty"`
	Javascript *BuildsListToolsetProjects200ApplicationJSONJavascript `json:"javascript,omitempty"`
	Testcloud  *BuildsListToolsetProjects200ApplicationJSONTestcloud  `json:"testcloud,omitempty"`
	Uwp        *BuildsListToolsetProjects200ApplicationJSONUwp        `json:"uwp,omitempty"`
	Xamarin    *BuildsListToolsetProjects200ApplicationJSONXamarin    `json:"xamarin,omitempty"`
	Xcode      *BuildsListToolsetProjects200ApplicationJSONXcode      `json:"xcode,omitempty"`
}

type BuildsListToolsetProjectsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BuildsListToolsetProjects200ApplicationJSONObject *BuildsListToolsetProjects200ApplicationJSON
}
