// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AccountBrandEnum - ~
type AccountBrandEnum string

const (
	AccountBrandEnumEztexting    AccountBrandEnum = "EZTEXTING"
	AccountBrandEnumClubtexting  AccountBrandEnum = "CLUBTEXTING"
	AccountBrandEnumGrouptexting AccountBrandEnum = "GROUPTEXTING"
	AccountBrandEnumTellmycell   AccountBrandEnum = "TELLMYCELL"
	AccountBrandEnumEz           AccountBrandEnum = "EZ"
	AccountBrandEnumCallfire     AccountBrandEnum = "CALLFIRE"
	AccountBrandEnumTesla        AccountBrandEnum = "TESLA"
)

func (e *AccountBrandEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EZTEXTING":
		fallthrough
	case "CLUBTEXTING":
		fallthrough
	case "GROUPTEXTING":
		fallthrough
	case "TELLMYCELL":
		fallthrough
	case "EZ":
		fallthrough
	case "CALLFIRE":
		fallthrough
	case "TESLA":
		*e = AccountBrandEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountBrandEnum: %s", s)
	}
}

// AccountCountryEnum - ~
type AccountCountryEnum string

const (
	AccountCountryEnumUs AccountCountryEnum = "US"
	AccountCountryEnumCa AccountCountryEnum = "CA"
)

func (e *AccountCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US":
		fallthrough
	case "CA":
		*e = AccountCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCountryEnum: %s", s)
	}
}

// AccountCountryOrDefaultEnum - ~
type AccountCountryOrDefaultEnum string

const (
	AccountCountryOrDefaultEnumUs AccountCountryOrDefaultEnum = "US"
	AccountCountryOrDefaultEnumCa AccountCountryOrDefaultEnum = "CA"
)

func (e *AccountCountryOrDefaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US":
		fallthrough
	case "CA":
		*e = AccountCountryOrDefaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountCountryOrDefaultEnum: %s", s)
	}
}

// AccountEntityTypeEnum - ~
type AccountEntityTypeEnum string

const (
	AccountEntityTypeEnumSp      AccountEntityTypeEnum = "SP"
	AccountEntityTypeEnumCompany AccountEntityTypeEnum = "COMPANY"
)

func (e *AccountEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SP":
		fallthrough
	case "COMPANY":
		*e = AccountEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountEntityTypeEnum: %s", s)
	}
}

// AccountIndustryEnum - ~
type AccountIndustryEnum string

const (
	AccountIndustryEnumUnknown         AccountIndustryEnum = "UNKNOWN"
	AccountIndustryEnumAdvertising     AccountIndustryEnum = "ADVERTISING"
	AccountIndustryEnumAutomotive      AccountIndustryEnum = "AUTOMOTIVE"
	AccountIndustryEnumCollections     AccountIndustryEnum = "COLLECTIONS"
	AccountIndustryEnumConsulting      AccountIndustryEnum = "CONSULTING"
	AccountIndustryEnumDecline         AccountIndustryEnum = "DECLINE"
	AccountIndustryEnumEducation       AccountIndustryEnum = "EDUCATION"
	AccountIndustryEnumEmergency       AccountIndustryEnum = "EMERGENCY"
	AccountIndustryEnumEntertainment   AccountIndustryEnum = "ENTERTAINMENT"
	AccountIndustryEnumFinance         AccountIndustryEnum = "FINANCE"
	AccountIndustryEnumHospitality     AccountIndustryEnum = "HOSPITALITY"
	AccountIndustryEnumHealthfitness   AccountIndustryEnum = "HEALTHFITNESS"
	AccountIndustryEnumHealthcare      AccountIndustryEnum = "HEALTHCARE"
	AccountIndustryEnumInsurance       AccountIndustryEnum = "INSURANCE"
	AccountIndustryEnumLead            AccountIndustryEnum = "LEAD"
	AccountIndustryEnumOther           AccountIndustryEnum = "OTHER"
	AccountIndustryEnumPolitical       AccountIndustryEnum = "POLITICAL"
	AccountIndustryEnumRealEstate      AccountIndustryEnum = "REAL_ESTATE"
	AccountIndustryEnumRetail          AccountIndustryEnum = "RETAIL"
	AccountIndustryEnumSearchMarketing AccountIndustryEnum = "SEARCH_MARKETING"
	AccountIndustryEnumTelecom         AccountIndustryEnum = "TELECOM"
)

func (e *AccountIndustryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "ADVERTISING":
		fallthrough
	case "AUTOMOTIVE":
		fallthrough
	case "COLLECTIONS":
		fallthrough
	case "CONSULTING":
		fallthrough
	case "DECLINE":
		fallthrough
	case "EDUCATION":
		fallthrough
	case "EMERGENCY":
		fallthrough
	case "ENTERTAINMENT":
		fallthrough
	case "FINANCE":
		fallthrough
	case "HOSPITALITY":
		fallthrough
	case "HEALTHFITNESS":
		fallthrough
	case "HEALTHCARE":
		fallthrough
	case "INSURANCE":
		fallthrough
	case "LEAD":
		fallthrough
	case "OTHER":
		fallthrough
	case "POLITICAL":
		fallthrough
	case "REAL_ESTATE":
		fallthrough
	case "RETAIL":
		fallthrough
	case "SEARCH_MARKETING":
		fallthrough
	case "TELECOM":
		*e = AccountIndustryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountIndustryEnum: %s", s)
	}
}

// AccountReceiverPeriodTimeUnitEnum - ~
type AccountReceiverPeriodTimeUnitEnum string

const (
	AccountReceiverPeriodTimeUnitEnumNanoseconds  AccountReceiverPeriodTimeUnitEnum = "NANOSECONDS"
	AccountReceiverPeriodTimeUnitEnumMicroseconds AccountReceiverPeriodTimeUnitEnum = "MICROSECONDS"
	AccountReceiverPeriodTimeUnitEnumMilliseconds AccountReceiverPeriodTimeUnitEnum = "MILLISECONDS"
	AccountReceiverPeriodTimeUnitEnumSeconds      AccountReceiverPeriodTimeUnitEnum = "SECONDS"
	AccountReceiverPeriodTimeUnitEnumMinutes      AccountReceiverPeriodTimeUnitEnum = "MINUTES"
	AccountReceiverPeriodTimeUnitEnumHours        AccountReceiverPeriodTimeUnitEnum = "HOURS"
	AccountReceiverPeriodTimeUnitEnumDays         AccountReceiverPeriodTimeUnitEnum = "DAYS"
)

func (e *AccountReceiverPeriodTimeUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NANOSECONDS":
		fallthrough
	case "MICROSECONDS":
		fallthrough
	case "MILLISECONDS":
		fallthrough
	case "SECONDS":
		fallthrough
	case "MINUTES":
		fallthrough
	case "HOURS":
		fallthrough
	case "DAYS":
		*e = AccountReceiverPeriodTimeUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountReceiverPeriodTimeUnitEnum: %s", s)
	}
}

// AccountStatusEnum - ~
type AccountStatusEnum string

const (
	AccountStatusEnumActive           AccountStatusEnum = "ACTIVE"
	AccountStatusEnumPendingCancelled AccountStatusEnum = "PENDING_CANCELLED"
	AccountStatusEnumCancelled        AccountStatusEnum = "CANCELLED"
	AccountStatusEnumArchived         AccountStatusEnum = "ARCHIVED"
)

func (e *AccountStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACTIVE":
		fallthrough
	case "PENDING_CANCELLED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "ARCHIVED":
		*e = AccountStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountStatusEnum: %s", s)
	}
}

// AccountTrustLevelEnum - ~
type AccountTrustLevelEnum string

const (
	AccountTrustLevelEnumLocked    AccountTrustLevelEnum = "LOCKED"
	AccountTrustLevelEnumSuspended AccountTrustLevelEnum = "SUSPENDED"
	AccountTrustLevelEnumProbation AccountTrustLevelEnum = "PROBATION"
	AccountTrustLevelEnumNormal    AccountTrustLevelEnum = "NORMAL"
	AccountTrustLevelEnumTrusted   AccountTrustLevelEnum = "TRUSTED"
)

func (e *AccountTrustLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOCKED":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "PROBATION":
		fallthrough
	case "NORMAL":
		fallthrough
	case "TRUSTED":
		*e = AccountTrustLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTrustLevelEnum: %s", s)
	}
}

// Account - Object represents user account in Callfire system
type Account struct {
	// ~
	Active *bool `json:"active,omitempty"`
	// ~
	Address *string `json:"address,omitempty"`
	// ~
	Age *Duration `json:"age,omitempty"`
	// ~
	AgencyManagedAccounts *bool `json:"agencyManagedAccounts,omitempty"`
	// ~
	AllowedToCreateCampaign *bool `json:"allowedToCreateCampaign,omitempty"`
	// ~
	APICallLimit *int `json:"apiCallLimit,omitempty"`
	// ~
	Archived *bool `json:"archived,omitempty"`
	// ~
	AutoAddDoNotContact *bool `json:"autoAddDoNotContact,omitempty"`
	// ~
	Brand *AccountBrandEnum `json:"brand,omitempty"`
	// ~
	Canceled *bool `json:"canceled,omitempty"`
	// ~
	CanceledOrArchived *bool `json:"canceledOrArchived,omitempty"`
	// ~
	City *string `json:"city,omitempty"`
	// ~
	CompanyName *string `json:"companyName,omitempty"`
	// ~
	Country *AccountCountryEnum `json:"country,omitempty"`
	// ~
	CountryOrDefault *AccountCountryOrDefaultEnum `json:"countryOrDefault,omitempty"`
	// ~
	Created *time.Time `json:"created,omitempty"`
	// ~
	DateTimeZone *DateTimeZone `json:"dateTimeZone,omitempty"`
	// ~
	DefaultNotificationTTLMillis *int64 `json:"defaultNotificationTtlMillis,omitempty"`
	// ~
	DefaultNumberID *int64 `json:"defaultNumberId,omitempty"`
	// ~
	Ein *string `json:"ein,omitempty"`
	// ~
	EntityType *AccountEntityTypeEnum `json:"entityType,omitempty"`
	// ~
	Ez *bool `json:"ez,omitempty"`
	// ~
	FailedVerificationAttempts *int `json:"failedVerificationAttempts,omitempty"`
	// ~
	FromNumberPool *string `json:"fromNumberPool,omitempty"`
	// An id of an account
	ID *int64 `json:"id,omitempty"`
	// ~
	Industry *AccountIndustryEnum `json:"industry,omitempty"`
	// ~
	IndustryName *string `json:"industryName,omitempty"`
	// ~
	Key *string `json:"key,omitempty"`
	// ~
	LocalTimeZoneRestriction *LocalTimeZoneRestriction `json:"localTimeZoneRestriction,omitempty"`
	// ~
	Locale *Locale `json:"locale,omitempty"`
	// ~
	MaxAgents *int `json:"maxAgents,omitempty"`
	// ~
	MessageClass *string `json:"messageClass,omitempty"`
	// ~
	MessageFlows []string `json:"messageFlows,omitempty"`
	// Name associated with an account
	Name *string `json:"name,omitempty"`
	// ~
	OutboundThreshold *int `json:"outboundThreshold,omitempty"`
	// ~
	ReceiverPeriodCall *int `json:"receiverPeriodCall,omitempty"`
	// ~
	ReceiverPeriodEnabled *bool `json:"receiverPeriodEnabled,omitempty"`
	// ~
	ReceiverPeriodGlobal *int `json:"receiverPeriodGlobal,omitempty"`
	// ~
	ReceiverPeriodText *int `json:"receiverPeriodText,omitempty"`
	// ~
	ReceiverPeriodTimeUnit *AccountReceiverPeriodTimeUnitEnum `json:"receiverPeriodTimeUnit,omitempty"`
	// ~
	RetainOnlyMetadata *bool `json:"retainOnlyMetadata,omitempty"`
	// ~
	RetainOnlyMetadataLastDetailRecordID *int64 `json:"retainOnlyMetadataLastDetailRecordId,omitempty"`
	// ~
	RetainOnlyMetadataLastModified *time.Time `json:"retainOnlyMetadataLastModified,omitempty"`
	// ~
	Scrub *bool `json:"scrub,omitempty"`
	// ~
	SharedShortCodeAllowed *bool `json:"sharedShortCodeAllowed,omitempty"`
	// ~
	SharedShortCodeID *int64 `json:"sharedShortCodeId,omitempty"`
	// Object represents user account in Callfire system
	SoaAccount *Account `json:"soaAccount,omitempty"`
	// ~
	StartCapable *bool `json:"startCapable,omitempty"`
	// ~
	State *string `json:"state,omitempty"`
	// ~
	Status *AccountStatusEnum `json:"status,omitempty"`
	// ~
	TextOutboundThreshold *int `json:"textOutboundThreshold,omitempty"`
	// ~
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	// ~
	TimeZoneID *ZoneID `json:"timeZoneId,omitempty"`
	// ~
	TrustLevel *AccountTrustLevelEnum `json:"trustLevel,omitempty"`
	// ~
	TsrAgreement *time.Time `json:"tsrAgreement,omitempty"`
	// ~
	TsrInitials *string `json:"tsrInitials,omitempty"`
	// ~
	UIContext *string `json:"uiContext,omitempty"`
	// ~
	Universal *bool `json:"universal,omitempty"`
	// ~
	Website *string `json:"website,omitempty"`
	// ~
	Zipcode *string `json:"zipcode,omitempty"`
}
