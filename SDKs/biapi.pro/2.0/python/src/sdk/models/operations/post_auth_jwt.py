"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PostAuthJwtRequestBody:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'client_id' }})
    r"""id of the client"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'client_secret' }})
    r"""secret for the client"""  
    expire: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'expire' }})
    r"""if set to True, the token will expire n minutes after its creation, n being the value of configuration key auth.default_token_expire (default: True)"""  
    id_user: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'id_user' }})
    r"""user for whom the token has to be generated. If not supplied, a user will be created"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'scope' }})
    r"""scope requested for the token"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAuthJwt200ApplicationJSON:
    
    jwt_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwt_token') }})
    r"""the jwt token"""  
    payload: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload') }})
    r"""the payload contained in the jwt token"""  
    

@dataclasses.dataclass
class PostAuthJwtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_auth_jwt_200_application_json_object: Optional[PostAuthJwt200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    