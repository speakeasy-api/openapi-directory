/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The three letter code for the currency - either `EUR` or `GBP`.
 */
export enum GetDirectDebitMandatesMandatesMandateCurrencyCodeEnum {
  Eur = "EUR",
  Gbp = "GBP",
}

/**
 * The currency.
 */
export class GetDirectDebitMandatesMandatesMandateCurrency extends SpeakeasyBase {
  /**
   * The three letter code for the currency - either `EUR` or `GBP`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: GetDirectDebitMandatesMandatesMandateCurrencyCodeEnum;

  /**
   * The name of the currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;
}

/**
 * Rejection reason if transaction is rejected
 */
export enum GetDirectDebitMandatesMandatesMandateFireRejectionReasonEnum {
  AccountDoesNotAcceptDirectDebits = "ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS",
  Ddic = "DDIC",
  AccountNotFound = "ACCOUNT_NOT_FOUND",
  AccountNotLive = "ACCOUNT_NOT_LIVE",
  CustomerNotFound = "CUSTOMER_NOT_FOUND",
  BusinessNotLive = "BUSINESS_NOT_LIVE",
  BusinessNotFull = "BUSINESS_NOT_FULL",
  PersonalUserNotLive = "PERSONAL_USER_NOT_LIVE",
  PersonalUserNotFull = "PERSONAL_USER_NOT_FULL",
  MandateAlreadyExists = "MANDATE_ALREADY_EXISTS",
  MandateWithDiferentAccount = "MANDATE_WITH_DIFERENT_ACCOUNT",
  NullMandateReference = "NULL_MANDATE_REFERENCE",
  InvalidAccountCurrency = "INVALID_ACCOUNT_CURRENCY",
  InvalidMandateReference = "INVALID_MANDATE_REFERENCE",
  RequestedByCustomerViaSupport = "REQUESTED_BY_CUSTOMER_VIA_SUPPORT",
  CustomerAccountClosed = "CUSTOMER_ACCOUNT_CLOSED",
  CustomerDeceased = "CUSTOMER_DECEASED",
  AccountTransferred = "ACCOUNT_TRANSFERRED",
  MandateNotFound = "MANDATE_NOT_FOUND",
  AccountTransferredToDifferentAccount = "ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT",
  InvalidAccountType = "INVALID_ACCOUNT_TYPE",
  MandateExpired = "MANDATE_EXPIRED",
  MandateCancelled = "MANDATE_CANCELLED",
  RequestedByCustomer = "REQUESTED_BY_CUSTOMER",
}

/**
 * The status of the mandate.
 *
 * @remarks
 * * 'CREATED'
 * * 'LIVE'
 * * 'REJECT_REQUESTED'
 * * 'REJECT_RECORD_IN_PROGRESS'
 * * 'REJECT_RECORDED'
 * * 'REJECT_FILE_CREATED'
 * * 'REJECT_FILE_SENT'
 * * 'CANCEL_REQUESTED'
 * * 'CANCEL_RECORD_IN_PROGRESS'
 * * 'CANCEL_RECORDED'
 * * 'CANCEL_FILE_CREATED'
 * * 'CANCEL_FILE_SENT'
 * * 'COMPLETE'
 * * 'DORMANT'
 *
 */
export enum GetDirectDebitMandatesMandatesMandateStatusEnum {
  Created = "CREATED",
  Live = "LIVE",
  RejectRequested = "REJECT_REQUESTED",
  RejectRecordInProgress = "REJECT_RECORD_IN_PROGRESS",
  RejectRecorded = "REJECT_RECORDED",
  RejectFileCreated = "REJECT_FILE_CREATED",
  RejectFileSent = "REJECT_FILE_SENT",
  CancelRequested = "CANCEL_REQUESTED",
  CancelRecordInProgress = "CANCEL_RECORD_IN_PROGRESS",
  CancelRecorded = "CANCEL_RECORDED",
  CancelFileCreated = "CANCEL_FILE_CREATED",
  CancelFileSent = "CANCEL_FILE_SENT",
  Complete = "COMPLETE",
  Dormant = "DORMANT",
}

export class GetDirectDebitMandatesMandatesMandate extends SpeakeasyBase {
  /**
   * The name of the alias
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alias" })
  alias?: string;

  /**
   * The currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  @Type(() => GetDirectDebitMandatesMandatesMandateCurrency)
  currency?: GetDirectDebitMandatesMandatesMandateCurrency;

  /**
   * Date the direct debit was canceled. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCancelled" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCancelled?: Date;

  /**
   * Date the direct debit was completed. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCompleted" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCompleted?: Date;

  /**
   * Date the direct debit was created. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * Rejection reason if transaction is rejected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fireRejectionReason" })
  fireRejectionReason?: GetDirectDebitMandatesMandatesMandateFireRejectionReasonEnum;

  /**
   * Date the direct debit was last updated. Milliseconds since the epoch (1970).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  /**
   * The value of largest direct debit collected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latestDirectDebitAmount" })
  latestDirectDebitAmount?: number;

  /**
   * The date of latest direct debit collected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latestDirectDebitDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  latestDirectDebitDate?: Date;

  /**
   * the reference of the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateReference" })
  mandateReference?: string;

  /**
   * The UUID for the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateUuid" })
  mandateUuid?: string;

  /**
   * The number of direct debits collected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfDirectDebitCollected" })
  numberOfDirectDebitCollected?: number;

  /**
   * The name of the alias
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorAlias" })
  originatorAlias?: string;

  /**
   * Logo url from party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorLogoUrlLarge" })
  originatorLogoUrlLarge?: string;

  /**
   * Logo url from party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorLogoUrlSmall" })
  originatorLogoUrlSmall?: string;

  /**
   * The creator of the party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorName" })
  originatorName?: string;

  /**
   * Set by party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorReference" })
  originatorReference?: string;

  /**
   * Reason for cancelation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schemeCancelReason" })
  schemeCancelReason?: string;

  /**
   * The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schemeCancelReasonCode" })
  schemeCancelReasonCode?: string;

  /**
   * The status of the mandate.
   *
   * @remarks
   * * 'CREATED'
   * * 'LIVE'
   * * 'REJECT_REQUESTED'
   * * 'REJECT_RECORD_IN_PROGRESS'
   * * 'REJECT_RECORDED'
   * * 'REJECT_FILE_CREATED'
   * * 'REJECT_FILE_SENT'
   * * 'CANCEL_REQUESTED'
   * * 'CANCEL_RECORD_IN_PROGRESS'
   * * 'CANCEL_RECORDED'
   * * 'CANCEL_FILE_CREATED'
   * * 'CANCEL_FILE_SENT'
   * * 'COMPLETE'
   * * 'DORMANT'
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: GetDirectDebitMandatesMandatesMandateStatusEnum;

  /**
   * Identifier for the fire.com account (assigned by fire.com)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetIcan" })
  targetIcan?: number;

  /**
   * The value of direct debits collected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueOfDirectDebitCollected" })
  valueOfDirectDebitCollected?: number;
}

/**
 * List all direct debit mandates.
 */
export class GetDirectDebitMandatesMandates extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: GetDirectDebitMandatesMandatesMandate })
  @Expose({ name: "mandates" })
  @Type(() => GetDirectDebitMandatesMandatesMandate)
  mandates?: GetDirectDebitMandatesMandatesMandate[];

  /**
   * Number of direct debits found
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;
}

export class GetDirectDebitMandatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * List all direct debit mandates.
   */
  @SpeakeasyMetadata()
  mandates?: GetDirectDebitMandatesMandates;
}
