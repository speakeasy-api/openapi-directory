"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MarketFilterBettingTypesEnum(str, Enum):
    ODDS = 'ODDS'
    LINE = 'LINE'
    RANGE = 'RANGE'
    ASIAN_HANDICAP_DOUBLE_LINE = 'ASIAN_HANDICAP_DOUBLE_LINE'
    ASIAN_HANDICAP_SINGLE_LINE = 'ASIAN_HANDICAP_SINGLE_LINE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarketFilter:
    
    betting_types: Optional[list[MarketFilterBettingTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bettingTypes'), 'exclude': lambda f: f is None }})  
    bsp_market: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bspMarket'), 'exclude': lambda f: f is None }})  
    country_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCodes'), 'exclude': lambda f: f is None }})  
    event_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventIds'), 'exclude': lambda f: f is None }})  
    event_type_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTypeIds'), 'exclude': lambda f: f is None }})  
    market_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketIds'), 'exclude': lambda f: f is None }})  
    market_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketTypes'), 'exclude': lambda f: f is None }})  
    race_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raceTypes'), 'exclude': lambda f: f is None }})  
    turn_in_play_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('turnInPlayEnabled'), 'exclude': lambda f: f is None }})  
    venues: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('venues'), 'exclude': lambda f: f is None }})  
    