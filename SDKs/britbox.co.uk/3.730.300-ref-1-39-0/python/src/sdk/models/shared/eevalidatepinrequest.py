"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EeValidatePinRequest:
    r"""Data for validating PIN."""
    
    access_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessToken') }})
    r"""EE API authorization Token received from GET /ee/token/create."""  
    pin: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pin') }})
    r"""The pin entered by a user. 6 digits"""  
    pin_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinReference') }})
    r"""The pinReference."""  
    tracking_header: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingHeader'), 'exclude': lambda f: f is None }})
    r"""Tracking header to be able to search logs for a specific user requests. If not provided it will be generated. FE should store it for later user."""  
    