/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Position {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accuracy")
    public Double accuracy;

    public Position withAccuracy(Double accuracy) {
        this.accuracy = accuracy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public Position withAddress(String address) {
        this.address = address;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("altitude")
    public Double altitude;

    public Position withAltitude(Double altitude) {
        this.altitude = altitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    public java.util.Map<String, Object> attributes;

    public Position withAttributes(java.util.Map<String, Object> attributes) {
        this.attributes = attributes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("course")
    public Double course;

    public Position withCourse(Double course) {
        this.course = course;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceId")
    public Long deviceId;

    public Position withDeviceId(Long deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    
    /**
     * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deviceTime")
    public OffsetDateTime deviceTime;

    public Position withDeviceTime(OffsetDateTime deviceTime) {
        this.deviceTime = deviceTime;
        return this;
    }
    
    /**
     * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("fixTime")
    public OffsetDateTime fixTime;

    public Position withFixTime(OffsetDateTime fixTime) {
        this.fixTime = fixTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Position withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Double latitude;

    public Position withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Double longitude;

    public Position withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public java.util.Map<String, Object> network;

    public Position withNetwork(java.util.Map<String, Object> network) {
        this.network = network;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outdated")
    public Boolean outdated;

    public Position withOutdated(Boolean outdated) {
        this.outdated = outdated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;

    public Position withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("serverTime")
    public OffsetDateTime serverTime;

    public Position withServerTime(OffsetDateTime serverTime) {
        this.serverTime = serverTime;
        return this;
    }
    
    /**
     * in knots
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speed")
    public Double speed;

    public Position withSpeed(Double speed) {
        this.speed = speed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid")
    public Boolean valid;

    public Position withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    public Position(){}
}
