"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import playstat as shared_playstat
from typing import Optional


@dataclasses.dataclass
class GetPlayStatsRequest:
    
    athlete_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'athleteId', 'style': 'form', 'explode': True }})
    r"""athleteId filter (from /roster endpoint)"""  
    conference: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'conference', 'style': 'form', 'explode': True }})
    r"""conference abbreviation filter"""  
    game_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gameId', 'style': 'form', 'explode': True }})
    r"""gameId filter (from /games endpoint)"""  
    season_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'seasonType', 'style': 'form', 'explode': True }})
    r"""regular, postseason, or both"""  
    stat_type_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'statTypeId', 'style': 'form', 'explode': True }})
    r"""statTypeId filter (from /play/stat/types endpoint)"""  
    team: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'team', 'style': 'form', 'explode': True }})
    r"""Team filter"""  
    week: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'week', 'style': 'form', 'explode': True }})
    r"""Week filter"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""Year filter"""  
    

@dataclasses.dataclass
class GetPlayStatsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    play_stats: Optional[list[shared_playstat.PlayStat]] = dataclasses.field(default=None)
    r"""successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    