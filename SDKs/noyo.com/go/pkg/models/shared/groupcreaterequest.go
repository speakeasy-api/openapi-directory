// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// GroupCreateRequestBusinessDetailsEmployerTypeEnum - Type or classification of the group as an employer
type GroupCreateRequestBusinessDetailsEmployerTypeEnum string

const (
	GroupCreateRequestBusinessDetailsEmployerTypeEnumForeignGovernment GroupCreateRequestBusinessDetailsEmployerTypeEnum = "foreign_government"
	GroupCreateRequestBusinessDetailsEmployerTypeEnumPrivateSector     GroupCreateRequestBusinessDetailsEmployerTypeEnum = "private_sector"
	GroupCreateRequestBusinessDetailsEmployerTypeEnumReligiousEmployer GroupCreateRequestBusinessDetailsEmployerTypeEnum = "religious_employer"
	GroupCreateRequestBusinessDetailsEmployerTypeEnumStateGovernment   GroupCreateRequestBusinessDetailsEmployerTypeEnum = "state_government"
	GroupCreateRequestBusinessDetailsEmployerTypeEnumTribalGovernment  GroupCreateRequestBusinessDetailsEmployerTypeEnum = "tribal_government"
)

func (e *GroupCreateRequestBusinessDetailsEmployerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "foreign_government":
		fallthrough
	case "private_sector":
		fallthrough
	case "religious_employer":
		fallthrough
	case "state_government":
		fallthrough
	case "tribal_government":
		*e = GroupCreateRequestBusinessDetailsEmployerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupCreateRequestBusinessDetailsEmployerTypeEnum: %s", s)
	}
}

// GroupCreateRequestBusinessDetailsEntityTypeEnum - Type of legal or business entity
type GroupCreateRequestBusinessDetailsEntityTypeEnum string

const (
	GroupCreateRequestBusinessDetailsEntityTypeEnumCCorp       GroupCreateRequestBusinessDetailsEntityTypeEnum = "c_corp"
	GroupCreateRequestBusinessDetailsEntityTypeEnumLlc         GroupCreateRequestBusinessDetailsEntityTypeEnum = "llc"
	GroupCreateRequestBusinessDetailsEntityTypeEnumLlp         GroupCreateRequestBusinessDetailsEntityTypeEnum = "llp"
	GroupCreateRequestBusinessDetailsEntityTypeEnumPartnership GroupCreateRequestBusinessDetailsEntityTypeEnum = "partnership"
	GroupCreateRequestBusinessDetailsEntityTypeEnumSCorp       GroupCreateRequestBusinessDetailsEntityTypeEnum = "s_corp"
)

func (e *GroupCreateRequestBusinessDetailsEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "c_corp":
		fallthrough
	case "llc":
		fallthrough
	case "llp":
		fallthrough
	case "partnership":
		fallthrough
	case "s_corp":
		*e = GroupCreateRequestBusinessDetailsEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupCreateRequestBusinessDetailsEntityTypeEnum: %s", s)
	}
}

// GroupCreateRequestBusinessDetails - Details about business or industry of the group
type GroupCreateRequestBusinessDetails struct {
	// General description of the type of business
	CompanyDescription *string `json:"company_description,omitempty"`
	// Date the company was established
	DateEstablished *types.Date `json:"date_established,omitempty"`
	// Type or classification of the group as an employer
	EmployerType *GroupCreateRequestBusinessDetailsEmployerTypeEnum `json:"employer_type,omitempty"`
	// Type of legal or business entity
	EntityType *GroupCreateRequestBusinessDetailsEntityTypeEnum `json:"entity_type,omitempty"`
}

// GroupCreateRequestInsuranceDetails - General details about the group insurance offerings
type GroupCreateRequestInsuranceDetails struct {
	// True if the group is compliant with ERISA regulation
	IsErisaCompliant *bool `json:"is_erisa_compliant,omitempty"`
	// True if company is subject to ERISA regulation
	IsErisaSubject *bool `json:"is_erisa_subject,omitempty"`
}

type GroupCreateRequest struct {
	// Details about business or industry of the group
	BusinessDetails *GroupCreateRequestBusinessDetails `json:"business_details,omitempty"`
	// DBA name for the company, if applicable
	DbaName *string `json:"dba_name,omitempty"`
	// Federal Employer Identification Number for the group/company
	FederalEin *string `json:"federal_ein,omitempty"`
	// General details about the group insurance offerings
	InsuranceDetails *GroupCreateRequestInsuranceDetails `json:"insurance_details,omitempty"`
	// Name of the group/company
	Name string `json:"name"`
	// Unique identifier of the platform or broker organization in the Noyo system
	OrganizationID *string `json:"organization_id,omitempty"`
	// SIC Code for the group/company
	SicCode *string `json:"sic_code,omitempty"`
}
