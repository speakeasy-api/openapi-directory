// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DeviceClientTypesEnum string

const (
	DeviceClientTypesEnumClientTypeUnspecified               DeviceClientTypesEnum = "CLIENT_TYPE_UNSPECIFIED"
	DeviceClientTypesEnumDriveFs                             DeviceClientTypesEnum = "DRIVE_FS"
	DeviceClientTypesEnumFundamental                         DeviceClientTypesEnum = "FUNDAMENTAL"
	DeviceClientTypesEnumEndpointVerification                DeviceClientTypesEnum = "ENDPOINT_VERIFICATION"
	DeviceClientTypesEnumWindowsAdvanced                     DeviceClientTypesEnum = "WINDOWS_ADVANCED"
	DeviceClientTypesEnumGoogleCredentialsProviderForWindows DeviceClientTypesEnum = "GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS"
)

func (e *DeviceClientTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CLIENT_TYPE_UNSPECIFIED":
		fallthrough
	case "DRIVE_FS":
		fallthrough
	case "FUNDAMENTAL":
		fallthrough
	case "ENDPOINT_VERIFICATION":
		fallthrough
	case "WINDOWS_ADVANCED":
		fallthrough
	case "GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS":
		*e = DeviceClientTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceClientTypesEnum: %s", s)
	}
}

// DeviceCompromisedStateEnum - Output only. Represents whether the Device is compromised.
type DeviceCompromisedStateEnum string

const (
	DeviceCompromisedStateEnumCompromisedStateUnspecified DeviceCompromisedStateEnum = "COMPROMISED_STATE_UNSPECIFIED"
	DeviceCompromisedStateEnumCompromised                 DeviceCompromisedStateEnum = "COMPROMISED"
	DeviceCompromisedStateEnumUncompromised               DeviceCompromisedStateEnum = "UNCOMPROMISED"
)

func (e *DeviceCompromisedStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMPROMISED_STATE_UNSPECIFIED":
		fallthrough
	case "COMPROMISED":
		fallthrough
	case "UNCOMPROMISED":
		*e = DeviceCompromisedStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceCompromisedStateEnum: %s", s)
	}
}

// DeviceDeviceTypeEnum - Output only. Type of device.
type DeviceDeviceTypeEnum string

const (
	DeviceDeviceTypeEnumDeviceTypeUnspecified DeviceDeviceTypeEnum = "DEVICE_TYPE_UNSPECIFIED"
	DeviceDeviceTypeEnumAndroid               DeviceDeviceTypeEnum = "ANDROID"
	DeviceDeviceTypeEnumIos                   DeviceDeviceTypeEnum = "IOS"
	DeviceDeviceTypeEnumGoogleSync            DeviceDeviceTypeEnum = "GOOGLE_SYNC"
	DeviceDeviceTypeEnumWindows               DeviceDeviceTypeEnum = "WINDOWS"
	DeviceDeviceTypeEnumMacOs                 DeviceDeviceTypeEnum = "MAC_OS"
	DeviceDeviceTypeEnumLinux                 DeviceDeviceTypeEnum = "LINUX"
	DeviceDeviceTypeEnumChromeOs              DeviceDeviceTypeEnum = "CHROME_OS"
)

func (e *DeviceDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEVICE_TYPE_UNSPECIFIED":
		fallthrough
	case "ANDROID":
		fallthrough
	case "IOS":
		fallthrough
	case "GOOGLE_SYNC":
		fallthrough
	case "WINDOWS":
		fallthrough
	case "MAC_OS":
		fallthrough
	case "LINUX":
		fallthrough
	case "CHROME_OS":
		*e = DeviceDeviceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceDeviceTypeEnum: %s", s)
	}
}

// DeviceEncryptionStateEnum - Output only. Device encryption state.
type DeviceEncryptionStateEnum string

const (
	DeviceEncryptionStateEnumEncryptionStateUnspecified DeviceEncryptionStateEnum = "ENCRYPTION_STATE_UNSPECIFIED"
	DeviceEncryptionStateEnumUnsupportedByDevice        DeviceEncryptionStateEnum = "UNSUPPORTED_BY_DEVICE"
	DeviceEncryptionStateEnumEncrypted                  DeviceEncryptionStateEnum = "ENCRYPTED"
	DeviceEncryptionStateEnumNotEncrypted               DeviceEncryptionStateEnum = "NOT_ENCRYPTED"
)

func (e *DeviceEncryptionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENCRYPTION_STATE_UNSPECIFIED":
		fallthrough
	case "UNSUPPORTED_BY_DEVICE":
		fallthrough
	case "ENCRYPTED":
		fallthrough
	case "NOT_ENCRYPTED":
		*e = DeviceEncryptionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceEncryptionStateEnum: %s", s)
	}
}

// DeviceManagementStateEnum - Output only. Management state of the device
type DeviceManagementStateEnum string

const (
	DeviceManagementStateEnumManagementStateUnspecified DeviceManagementStateEnum = "MANAGEMENT_STATE_UNSPECIFIED"
	DeviceManagementStateEnumApproved                   DeviceManagementStateEnum = "APPROVED"
	DeviceManagementStateEnumBlocked                    DeviceManagementStateEnum = "BLOCKED"
	DeviceManagementStateEnumPending                    DeviceManagementStateEnum = "PENDING"
	DeviceManagementStateEnumUnprovisioned              DeviceManagementStateEnum = "UNPROVISIONED"
	DeviceManagementStateEnumWiping                     DeviceManagementStateEnum = "WIPING"
	DeviceManagementStateEnumWiped                      DeviceManagementStateEnum = "WIPED"
)

func (e *DeviceManagementStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MANAGEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "APPROVED":
		fallthrough
	case "BLOCKED":
		fallthrough
	case "PENDING":
		fallthrough
	case "UNPROVISIONED":
		fallthrough
	case "WIPING":
		fallthrough
	case "WIPED":
		*e = DeviceManagementStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceManagementStateEnum: %s", s)
	}
}

// DeviceOwnerTypeEnum - Output only. Whether the device is owned by the company or an individual
type DeviceOwnerTypeEnum string

const (
	DeviceOwnerTypeEnumDeviceOwnershipUnspecified DeviceOwnerTypeEnum = "DEVICE_OWNERSHIP_UNSPECIFIED"
	DeviceOwnerTypeEnumCompany                    DeviceOwnerTypeEnum = "COMPANY"
	DeviceOwnerTypeEnumByod                       DeviceOwnerTypeEnum = "BYOD"
)

func (e *DeviceOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEVICE_OWNERSHIP_UNSPECIFIED":
		fallthrough
	case "COMPANY":
		fallthrough
	case "BYOD":
		*e = DeviceOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceOwnerTypeEnum: %s", s)
	}
}

// Device - A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.
type Device struct {
	// Resource representing the Android specific attributes of a Device.
	AndroidSpecificAttributes *AndroidAttributes `json:"androidSpecificAttributes,omitempty"`
	// Asset tag of the device.
	AssetTag *string `json:"assetTag,omitempty"`
	// Output only. Baseband version of the device.
	BasebandVersion *string `json:"basebandVersion,omitempty"`
	// Output only. Device bootloader version. Example: 0.6.7.
	BootloaderVersion *string `json:"bootloaderVersion,omitempty"`
	// Output only. Device brand. Example: Samsung.
	Brand *string `json:"brand,omitempty"`
	// Output only. Build number of the device.
	BuildNumber *string `json:"buildNumber,omitempty"`
	// List of the clients the device is reporting to.
	ClientTypes []DeviceClientTypesEnum `json:"clientTypes,omitempty"`
	// Output only. Represents whether the Device is compromised.
	CompromisedState *DeviceCompromisedStateEnum `json:"compromisedState,omitempty"`
	// Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.
	CreateTime *string `json:"createTime,omitempty"`
	// Unique identifier for the device.
	DeviceID *string `json:"deviceId,omitempty"`
	// Output only. Type of device.
	DeviceType *DeviceDeviceTypeEnum `json:"deviceType,omitempty"`
	// Output only. Whether developer options is enabled on device.
	EnabledDeveloperOptions *bool `json:"enabledDeveloperOptions,omitempty"`
	// Output only. Whether USB debugging is enabled on device.
	EnabledUsbDebugging *bool `json:"enabledUsbDebugging,omitempty"`
	// Output only. Device encryption state.
	EncryptionState *DeviceEncryptionStateEnum `json:"encryptionState,omitempty"`
	// Resource representing the Endpoint Verification-specific attributes of a Device. https://cloud.google.com/endpoint-verification/docs/overview
	EndpointVerificationSpecificAttributes *EndpointVerificationSpecificAttributes `json:"endpointVerificationSpecificAttributes,omitempty"`
	// Host name of the device.
	Hostname *string `json:"hostname,omitempty"`
	// Output only. IMEI number of device if GSM device; empty otherwise.
	Imei *string `json:"imei,omitempty"`
	// Output only. Kernel version of the device.
	KernelVersion *string `json:"kernelVersion,omitempty"`
	// Most recent time when device synced with this service.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`
	// Output only. Management state of the device
	ManagementState *DeviceManagementStateEnum `json:"managementState,omitempty"`
	// Output only. Device manufacturer. Example: Motorola.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Output only. MEID number of device if CDMA device; empty otherwise.
	Meid *string `json:"meid,omitempty"`
	// Output only. Model name of device. Example: Pixel 3.
	Model *string `json:"model,omitempty"`
	// Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device_id}`, where device_id is the unique id assigned to the Device.
	Name *string `json:"name,omitempty"`
	// Output only. Mobile or network operator of device, if available.
	NetworkOperator *string `json:"networkOperator,omitempty"`
	// Output only. OS version of the device. Example: Android 8.1.0.
	OsVersion *string `json:"osVersion,omitempty"`
	// Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: "com.example", "xyz.com".
	OtherAccounts []string `json:"otherAccounts,omitempty"`
	// Output only. Whether the device is owned by the company or an individual
	OwnerType *DeviceOwnerTypeEnum `json:"ownerType,omitempty"`
	// Output only. OS release version. Example: 6.0.
	ReleaseVersion *string `json:"releaseVersion,omitempty"`
	// Output only. OS security patch update time on device.
	SecurityPatchTime *string `json:"securityPatchTime,omitempty"`
	// Serial Number of device. Example: HT82V1A01076.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// WiFi MAC addresses of device.
	WifiMacAddresses []string `json:"wifiMacAddresses,omitempty"`
}

// DeviceInput - A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.
type DeviceInput struct {
	// Resource representing the Android specific attributes of a Device.
	AndroidSpecificAttributes *AndroidAttributes `json:"androidSpecificAttributes,omitempty"`
	// Asset tag of the device.
	AssetTag *string `json:"assetTag,omitempty"`
	// List of the clients the device is reporting to.
	ClientTypes []DeviceClientTypesEnum `json:"clientTypes,omitempty"`
	// Unique identifier for the device.
	DeviceID *string `json:"deviceId,omitempty"`
	// Resource representing the Endpoint Verification-specific attributes of a Device. https://cloud.google.com/endpoint-verification/docs/overview
	EndpointVerificationSpecificAttributes *EndpointVerificationSpecificAttributes `json:"endpointVerificationSpecificAttributes,omitempty"`
	// Host name of the device.
	Hostname *string `json:"hostname,omitempty"`
	// Most recent time when device synced with this service.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`
	// Serial Number of device. Example: HT82V1A01076.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// WiFi MAC addresses of device.
	WifiMacAddresses []string `json:"wifiMacAddresses,omitempty"`
}
