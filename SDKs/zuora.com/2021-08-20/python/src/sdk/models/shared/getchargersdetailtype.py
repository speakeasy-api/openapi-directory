"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import getrevenueitemtyperesponse as shared_getrevenueitemtyperesponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETChargeRSDetailType:
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""An account ID."""  
    amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as *JPY 30* or USD *30.15*. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned:  *\\"Allocation amount with wrong decimal places.\\"*"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The type of currency used."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Additional information about this record."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The charge revenue summary number."""  
    recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the recognition rule."""  
    recognized_revenue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenue'), 'exclude': lambda f: f is None }})
    r"""The revenue that was distributed in a closed accounting period."""  
    revenue_items: Optional[list[shared_getrevenueitemtyperesponse.GETRevenueItemTypeResponse]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueItems'), 'exclude': lambda f: f is None }})
    r"""Revenue items are listed in ascending order by the accounting period start date."""  
    subscription_charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionChargeId'), 'exclude': lambda f: f is None }})
    r"""The original subscription charge ID."""  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId'), 'exclude': lambda f: f is None }})
    r"""The original subscription ID."""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Returns `true` if the request was processed successfully."""  
    undistributed_unrecognized_revenue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('undistributedUnrecognizedRevenue'), 'exclude': lambda f: f is None }})
    r"""Revenue in the open-ended accounting period."""  
    unrecognized_revenue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unrecognizedRevenue'), 'exclude': lambda f: f is None }})
    r"""Revenue distributed in all open accounting periods, which includes the open-ended accounting period."""  
    