// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsCreateForOrgSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// AppsCreateForOrgRequestBodyOsEnum - The OS the app will be running on
type AppsCreateForOrgRequestBodyOsEnum string

const (
	AppsCreateForOrgRequestBodyOsEnumAndroid AppsCreateForOrgRequestBodyOsEnum = "Android"
	AppsCreateForOrgRequestBodyOsEnumIOs     AppsCreateForOrgRequestBodyOsEnum = "iOS"
	AppsCreateForOrgRequestBodyOsEnumMacOs   AppsCreateForOrgRequestBodyOsEnum = "macOS"
	AppsCreateForOrgRequestBodyOsEnumTizen   AppsCreateForOrgRequestBodyOsEnum = "Tizen"
	AppsCreateForOrgRequestBodyOsEnumTvOs    AppsCreateForOrgRequestBodyOsEnum = "tvOS"
	AppsCreateForOrgRequestBodyOsEnumWindows AppsCreateForOrgRequestBodyOsEnum = "Windows"
	AppsCreateForOrgRequestBodyOsEnumLinux   AppsCreateForOrgRequestBodyOsEnum = "Linux"
	AppsCreateForOrgRequestBodyOsEnumCustom  AppsCreateForOrgRequestBodyOsEnum = "Custom"
)

func (e AppsCreateForOrgRequestBodyOsEnum) ToPointer() *AppsCreateForOrgRequestBodyOsEnum {
	return &e
}

func (e *AppsCreateForOrgRequestBodyOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrgRequestBodyOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrgRequestBodyOsEnum: %v", v)
	}
}

// AppsCreateForOrgRequestBodyPlatformEnum - The platform of the app
type AppsCreateForOrgRequestBodyPlatformEnum string

const (
	AppsCreateForOrgRequestBodyPlatformEnumJava            AppsCreateForOrgRequestBodyPlatformEnum = "Java"
	AppsCreateForOrgRequestBodyPlatformEnumObjectiveCSwift AppsCreateForOrgRequestBodyPlatformEnum = "Objective-C-Swift"
	AppsCreateForOrgRequestBodyPlatformEnumUwp             AppsCreateForOrgRequestBodyPlatformEnum = "UWP"
	AppsCreateForOrgRequestBodyPlatformEnumCordova         AppsCreateForOrgRequestBodyPlatformEnum = "Cordova"
	AppsCreateForOrgRequestBodyPlatformEnumReactNative     AppsCreateForOrgRequestBodyPlatformEnum = "React-Native"
	AppsCreateForOrgRequestBodyPlatformEnumXamarin         AppsCreateForOrgRequestBodyPlatformEnum = "Xamarin"
	AppsCreateForOrgRequestBodyPlatformEnumUnity           AppsCreateForOrgRequestBodyPlatformEnum = "Unity"
	AppsCreateForOrgRequestBodyPlatformEnumElectron        AppsCreateForOrgRequestBodyPlatformEnum = "Electron"
	AppsCreateForOrgRequestBodyPlatformEnumWpf             AppsCreateForOrgRequestBodyPlatformEnum = "WPF"
	AppsCreateForOrgRequestBodyPlatformEnumWinForms        AppsCreateForOrgRequestBodyPlatformEnum = "WinForms"
	AppsCreateForOrgRequestBodyPlatformEnumCustom          AppsCreateForOrgRequestBodyPlatformEnum = "Custom"
)

func (e AppsCreateForOrgRequestBodyPlatformEnum) ToPointer() *AppsCreateForOrgRequestBodyPlatformEnum {
	return &e
}

func (e *AppsCreateForOrgRequestBodyPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Xamarin":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrgRequestBodyPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrgRequestBodyPlatformEnum: %v", v)
	}
}

// AppsCreateForOrgRequestBody - The data for the app
type AppsCreateForOrgRequestBody struct {
	// A short text describing the app
	Description *string `json:"description,omitempty"`
	// The descriptive name of the app. This can contain any characters
	DisplayName string `json:"display_name"`
	// The name of the app used in URLs
	Name *string `json:"name,omitempty"`
	// The OS the app will be running on
	Os AppsCreateForOrgRequestBodyOsEnum `json:"os"`
	// The platform of the app
	Platform AppsCreateForOrgRequestBodyPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
}

type AppsCreateForOrgRequest struct {
	// The data for the app
	RequestBody AppsCreateForOrgRequestBody `request:"mediaType=application/json"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumConflict            AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumNotFound            AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsCreateForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsCreateForOrgDefaultApplicationJSONError struct {
	Code    AppsCreateForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                              `json:"message"`
}

// AppsCreateForOrgDefaultApplicationJSON - Error
type AppsCreateForOrgDefaultApplicationJSON struct {
	Error AppsCreateForOrgDefaultApplicationJSONError `json:"error"`
}

type AppsCreateForOrg201ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum string

const (
	AppsCreateForOrg201ApplicationJSONMemberPermissionsEnumManager   AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum = "manager"
	AppsCreateForOrg201ApplicationJSONMemberPermissionsEnumDeveloper AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum = "developer"
	AppsCreateForOrg201ApplicationJSONMemberPermissionsEnumViewer    AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsCreateForOrg201ApplicationJSONMemberPermissionsEnumTester    AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum) ToPointer() *AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum {
	return &e
}

func (e *AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum: %v", v)
	}
}

// AppsCreateForOrg201ApplicationJSONOriginEnum - The creation origin of this app
type AppsCreateForOrg201ApplicationJSONOriginEnum string

const (
	AppsCreateForOrg201ApplicationJSONOriginEnumAppcenter AppsCreateForOrg201ApplicationJSONOriginEnum = "appcenter"
	AppsCreateForOrg201ApplicationJSONOriginEnumHockeyapp AppsCreateForOrg201ApplicationJSONOriginEnum = "hockeyapp"
	AppsCreateForOrg201ApplicationJSONOriginEnumCodepush  AppsCreateForOrg201ApplicationJSONOriginEnum = "codepush"
)

func (e AppsCreateForOrg201ApplicationJSONOriginEnum) ToPointer() *AppsCreateForOrg201ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsCreateForOrg201ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsCreateForOrg201ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg201ApplicationJSONOriginEnum: %v", v)
	}
}

// AppsCreateForOrg201ApplicationJSONOsEnum - The OS the app will be running on
type AppsCreateForOrg201ApplicationJSONOsEnum string

const (
	AppsCreateForOrg201ApplicationJSONOsEnumAndroid AppsCreateForOrg201ApplicationJSONOsEnum = "Android"
	AppsCreateForOrg201ApplicationJSONOsEnumIOs     AppsCreateForOrg201ApplicationJSONOsEnum = "iOS"
	AppsCreateForOrg201ApplicationJSONOsEnumMacOs   AppsCreateForOrg201ApplicationJSONOsEnum = "macOS"
	AppsCreateForOrg201ApplicationJSONOsEnumTizen   AppsCreateForOrg201ApplicationJSONOsEnum = "Tizen"
	AppsCreateForOrg201ApplicationJSONOsEnumTvOs    AppsCreateForOrg201ApplicationJSONOsEnum = "tvOS"
	AppsCreateForOrg201ApplicationJSONOsEnumWindows AppsCreateForOrg201ApplicationJSONOsEnum = "Windows"
	AppsCreateForOrg201ApplicationJSONOsEnumLinux   AppsCreateForOrg201ApplicationJSONOsEnum = "Linux"
	AppsCreateForOrg201ApplicationJSONOsEnumCustom  AppsCreateForOrg201ApplicationJSONOsEnum = "Custom"
)

func (e AppsCreateForOrg201ApplicationJSONOsEnum) ToPointer() *AppsCreateForOrg201ApplicationJSONOsEnum {
	return &e
}

func (e *AppsCreateForOrg201ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrg201ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg201ApplicationJSONOsEnum: %v", v)
	}
}

// AppsCreateForOrg201ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsCreateForOrg201ApplicationJSONOwnerTypeEnum string

const (
	AppsCreateForOrg201ApplicationJSONOwnerTypeEnumOrg  AppsCreateForOrg201ApplicationJSONOwnerTypeEnum = "org"
	AppsCreateForOrg201ApplicationJSONOwnerTypeEnumUser AppsCreateForOrg201ApplicationJSONOwnerTypeEnum = "user"
)

func (e AppsCreateForOrg201ApplicationJSONOwnerTypeEnum) ToPointer() *AppsCreateForOrg201ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *AppsCreateForOrg201ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = AppsCreateForOrg201ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg201ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// AppsCreateForOrg201ApplicationJSONOwner - The information about the app's owner
type AppsCreateForOrg201ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsCreateForOrg201ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsCreateForOrg201ApplicationJSONPlatformEnum - The platform of the app
type AppsCreateForOrg201ApplicationJSONPlatformEnum string

const (
	AppsCreateForOrg201ApplicationJSONPlatformEnumJava            AppsCreateForOrg201ApplicationJSONPlatformEnum = "Java"
	AppsCreateForOrg201ApplicationJSONPlatformEnumObjectiveCSwift AppsCreateForOrg201ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsCreateForOrg201ApplicationJSONPlatformEnumUwp             AppsCreateForOrg201ApplicationJSONPlatformEnum = "UWP"
	AppsCreateForOrg201ApplicationJSONPlatformEnumCordova         AppsCreateForOrg201ApplicationJSONPlatformEnum = "Cordova"
	AppsCreateForOrg201ApplicationJSONPlatformEnumReactNative     AppsCreateForOrg201ApplicationJSONPlatformEnum = "React-Native"
	AppsCreateForOrg201ApplicationJSONPlatformEnumUnity           AppsCreateForOrg201ApplicationJSONPlatformEnum = "Unity"
	AppsCreateForOrg201ApplicationJSONPlatformEnumElectron        AppsCreateForOrg201ApplicationJSONPlatformEnum = "Electron"
	AppsCreateForOrg201ApplicationJSONPlatformEnumXamarin         AppsCreateForOrg201ApplicationJSONPlatformEnum = "Xamarin"
	AppsCreateForOrg201ApplicationJSONPlatformEnumWpf             AppsCreateForOrg201ApplicationJSONPlatformEnum = "WPF"
	AppsCreateForOrg201ApplicationJSONPlatformEnumWinForms        AppsCreateForOrg201ApplicationJSONPlatformEnum = "WinForms"
	AppsCreateForOrg201ApplicationJSONPlatformEnumUnknown         AppsCreateForOrg201ApplicationJSONPlatformEnum = "Unknown"
	AppsCreateForOrg201ApplicationJSONPlatformEnumCustom          AppsCreateForOrg201ApplicationJSONPlatformEnum = "Custom"
)

func (e AppsCreateForOrg201ApplicationJSONPlatformEnum) ToPointer() *AppsCreateForOrg201ApplicationJSONPlatformEnum {
	return &e
}

func (e *AppsCreateForOrg201ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrg201ApplicationJSONPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg201ApplicationJSONPlatformEnum: %v", v)
	}
}

// AppsCreateForOrg201ApplicationJSON - Success
type AppsCreateForOrg201ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                               `json:"app_secret"`
	AzureSubscription *AppsCreateForOrg201ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsCreateForOrg201ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsCreateForOrg201ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsCreateForOrg201ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsCreateForOrg201ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsCreateForOrg201ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsCreateForOrg200ApplicationJSONAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum string

const (
	AppsCreateForOrg200ApplicationJSONMemberPermissionsEnumManager   AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum = "manager"
	AppsCreateForOrg200ApplicationJSONMemberPermissionsEnumDeveloper AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum = "developer"
	AppsCreateForOrg200ApplicationJSONMemberPermissionsEnumViewer    AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum = "viewer"
	AppsCreateForOrg200ApplicationJSONMemberPermissionsEnumTester    AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum = "tester"
)

func (e AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum) ToPointer() *AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum {
	return &e
}

func (e *AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum: %v", v)
	}
}

// AppsCreateForOrg200ApplicationJSONOriginEnum - The creation origin of this app
type AppsCreateForOrg200ApplicationJSONOriginEnum string

const (
	AppsCreateForOrg200ApplicationJSONOriginEnumAppcenter AppsCreateForOrg200ApplicationJSONOriginEnum = "appcenter"
	AppsCreateForOrg200ApplicationJSONOriginEnumHockeyapp AppsCreateForOrg200ApplicationJSONOriginEnum = "hockeyapp"
	AppsCreateForOrg200ApplicationJSONOriginEnumCodepush  AppsCreateForOrg200ApplicationJSONOriginEnum = "codepush"
)

func (e AppsCreateForOrg200ApplicationJSONOriginEnum) ToPointer() *AppsCreateForOrg200ApplicationJSONOriginEnum {
	return &e
}

func (e *AppsCreateForOrg200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppsCreateForOrg200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg200ApplicationJSONOriginEnum: %v", v)
	}
}

// AppsCreateForOrg200ApplicationJSONOsEnum - The OS the app will be running on
type AppsCreateForOrg200ApplicationJSONOsEnum string

const (
	AppsCreateForOrg200ApplicationJSONOsEnumAndroid AppsCreateForOrg200ApplicationJSONOsEnum = "Android"
	AppsCreateForOrg200ApplicationJSONOsEnumIOs     AppsCreateForOrg200ApplicationJSONOsEnum = "iOS"
	AppsCreateForOrg200ApplicationJSONOsEnumMacOs   AppsCreateForOrg200ApplicationJSONOsEnum = "macOS"
	AppsCreateForOrg200ApplicationJSONOsEnumTizen   AppsCreateForOrg200ApplicationJSONOsEnum = "Tizen"
	AppsCreateForOrg200ApplicationJSONOsEnumTvOs    AppsCreateForOrg200ApplicationJSONOsEnum = "tvOS"
	AppsCreateForOrg200ApplicationJSONOsEnumWindows AppsCreateForOrg200ApplicationJSONOsEnum = "Windows"
	AppsCreateForOrg200ApplicationJSONOsEnumLinux   AppsCreateForOrg200ApplicationJSONOsEnum = "Linux"
	AppsCreateForOrg200ApplicationJSONOsEnumCustom  AppsCreateForOrg200ApplicationJSONOsEnum = "Custom"
)

func (e AppsCreateForOrg200ApplicationJSONOsEnum) ToPointer() *AppsCreateForOrg200ApplicationJSONOsEnum {
	return &e
}

func (e *AppsCreateForOrg200ApplicationJSONOsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrg200ApplicationJSONOsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg200ApplicationJSONOsEnum: %v", v)
	}
}

// AppsCreateForOrg200ApplicationJSONOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppsCreateForOrg200ApplicationJSONOwnerTypeEnum string

const (
	AppsCreateForOrg200ApplicationJSONOwnerTypeEnumOrg  AppsCreateForOrg200ApplicationJSONOwnerTypeEnum = "org"
	AppsCreateForOrg200ApplicationJSONOwnerTypeEnumUser AppsCreateForOrg200ApplicationJSONOwnerTypeEnum = "user"
)

func (e AppsCreateForOrg200ApplicationJSONOwnerTypeEnum) ToPointer() *AppsCreateForOrg200ApplicationJSONOwnerTypeEnum {
	return &e
}

func (e *AppsCreateForOrg200ApplicationJSONOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org":
		fallthrough
	case "user":
		*e = AppsCreateForOrg200ApplicationJSONOwnerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg200ApplicationJSONOwnerTypeEnum: %v", v)
	}
}

// AppsCreateForOrg200ApplicationJSONOwner - The information about the app's owner
type AppsCreateForOrg200ApplicationJSONOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppsCreateForOrg200ApplicationJSONOwnerTypeEnum `json:"type"`
}

// AppsCreateForOrg200ApplicationJSONPlatformEnum - The platform of the app
type AppsCreateForOrg200ApplicationJSONPlatformEnum string

const (
	AppsCreateForOrg200ApplicationJSONPlatformEnumJava            AppsCreateForOrg200ApplicationJSONPlatformEnum = "Java"
	AppsCreateForOrg200ApplicationJSONPlatformEnumObjectiveCSwift AppsCreateForOrg200ApplicationJSONPlatformEnum = "Objective-C-Swift"
	AppsCreateForOrg200ApplicationJSONPlatformEnumUwp             AppsCreateForOrg200ApplicationJSONPlatformEnum = "UWP"
	AppsCreateForOrg200ApplicationJSONPlatformEnumCordova         AppsCreateForOrg200ApplicationJSONPlatformEnum = "Cordova"
	AppsCreateForOrg200ApplicationJSONPlatformEnumReactNative     AppsCreateForOrg200ApplicationJSONPlatformEnum = "React-Native"
	AppsCreateForOrg200ApplicationJSONPlatformEnumUnity           AppsCreateForOrg200ApplicationJSONPlatformEnum = "Unity"
	AppsCreateForOrg200ApplicationJSONPlatformEnumElectron        AppsCreateForOrg200ApplicationJSONPlatformEnum = "Electron"
	AppsCreateForOrg200ApplicationJSONPlatformEnumXamarin         AppsCreateForOrg200ApplicationJSONPlatformEnum = "Xamarin"
	AppsCreateForOrg200ApplicationJSONPlatformEnumWpf             AppsCreateForOrg200ApplicationJSONPlatformEnum = "WPF"
	AppsCreateForOrg200ApplicationJSONPlatformEnumWinForms        AppsCreateForOrg200ApplicationJSONPlatformEnum = "WinForms"
	AppsCreateForOrg200ApplicationJSONPlatformEnumUnknown         AppsCreateForOrg200ApplicationJSONPlatformEnum = "Unknown"
	AppsCreateForOrg200ApplicationJSONPlatformEnumCustom          AppsCreateForOrg200ApplicationJSONPlatformEnum = "Custom"
)

func (e AppsCreateForOrg200ApplicationJSONPlatformEnum) ToPointer() *AppsCreateForOrg200ApplicationJSONPlatformEnum {
	return &e
}

func (e *AppsCreateForOrg200ApplicationJSONPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppsCreateForOrg200ApplicationJSONPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsCreateForOrg200ApplicationJSONPlatformEnum: %v", v)
	}
}

// AppsCreateForOrg200ApplicationJSON - Success
type AppsCreateForOrg200ApplicationJSON struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                               `json:"app_secret"`
	AzureSubscription *AppsCreateForOrg200ApplicationJSONAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppsCreateForOrg200ApplicationJSONMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppsCreateForOrg200ApplicationJSONOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppsCreateForOrg200ApplicationJSONOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppsCreateForOrg200ApplicationJSONOwner `json:"owner"`
	// The platform of the app
	Platform AppsCreateForOrg200ApplicationJSONPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type AppsCreateForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppsCreateForOrg200ApplicationJSONObject *AppsCreateForOrg200ApplicationJSON
	// Success
	AppsCreateForOrg201ApplicationJSONObject *AppsCreateForOrg201ApplicationJSON
	// Error
	AppsCreateForOrgDefaultApplicationJSONObject *AppsCreateForOrgDefaultApplicationJSON
}
