// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HandshakeResourceTypeEnum string

const (
	HandshakeResourceTypeEnumAccount                HandshakeResourceTypeEnum = "ACCOUNT"
	HandshakeResourceTypeEnumOrganization           HandshakeResourceTypeEnum = "ORGANIZATION"
	HandshakeResourceTypeEnumOrganizationFeatureSet HandshakeResourceTypeEnum = "ORGANIZATION_FEATURE_SET"
	HandshakeResourceTypeEnumEmail                  HandshakeResourceTypeEnum = "EMAIL"
	HandshakeResourceTypeEnumMasterEmail            HandshakeResourceTypeEnum = "MASTER_EMAIL"
	HandshakeResourceTypeEnumMasterName             HandshakeResourceTypeEnum = "MASTER_NAME"
	HandshakeResourceTypeEnumNotes                  HandshakeResourceTypeEnum = "NOTES"
	HandshakeResourceTypeEnumParentHandshake        HandshakeResourceTypeEnum = "PARENT_HANDSHAKE"
)

func (e HandshakeResourceTypeEnum) ToPointer() *HandshakeResourceTypeEnum {
	return &e
}

func (e *HandshakeResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT":
		fallthrough
	case "ORGANIZATION":
		fallthrough
	case "ORGANIZATION_FEATURE_SET":
		fallthrough
	case "EMAIL":
		fallthrough
	case "MASTER_EMAIL":
		fallthrough
	case "MASTER_NAME":
		fallthrough
	case "NOTES":
		fallthrough
	case "PARENT_HANDSHAKE":
		*e = HandshakeResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HandshakeResourceTypeEnum: %v", v)
	}
}
