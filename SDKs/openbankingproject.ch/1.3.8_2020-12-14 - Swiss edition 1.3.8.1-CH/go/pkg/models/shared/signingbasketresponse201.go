// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SigningBasketResponse201 - Body of the JSON response for a successful create signing basket request.
type SigningBasketResponse201 struct {
	// A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the
	// response depend on the dynamical decisions of the ASPSP when processing the request.
	//
	// Remark: All links can be relative or full links, to be decided by the ASPSP.
	// Type of links admitted in this response, (further links might be added for ASPSP defined
	// extensions):
	//
	//   * 'scaRedirect':
	//     In case of an SCA Redirect Approach, the ASPSP is transmitting the link to
	//     which to redirect the PSU browser.
	//   * 'scaOAuth':
	//     In case of a SCA OAuth2 Approach, the ASPSP is transmitting the URI where the configuration of
	//     the Authorisation Server can be retrieved. The configuration follows the
	//     OAuth 2.0 Authorisation Server Metadata specification.
	//   * 'startAuthorisation':
	//     In case, where an explicit start of the transaction authorisation is needed,
	//     but no more data needs to be updated (no authentication method to be selected,
	//     no PSU identification nor PSU authentication data to be uploaded).
	//   * 'startAuthorisationWithPsuIdentification':
	//     The link to the authorisation end-point, where the authorisation sub-resource
	//     has to be generated while uploading the PSU identification data.
	//   * 'startAuthorisationWithPsuAuthentication':
	//     The link to the authorisation end-point, where the authorisation sub-resource
	//     has to be generated while uploading the PSU authentication data.
	//   * 'startAuthorisationWithEncryptedPsuAuthentication':
	//     The link to the authorisation end-point, where the authorisation sub-resource has
	//     to be generated while uploading the encrypted PSU authentication data.
	//   * 'startAuthorisationWithAuthenticationMethodSelection':
	//     The link to the authorisation end-point, where the authorisation sub-resource
	//     has to be generated while selecting the authentication method.
	//     This link is contained under exactly the same conditions as the data element 'scaMethods'
	//   * 'startAuthorisationWithTransactionAuthorisation':
	//     The link to the authorisation end-point, where the authorisation sub-resource
	//     has to be generated while authorising the transaction e.g. by uploading an
	//     OTP received by SMS.
	//   * 'self':
	//     The link to the payment initiation resource created by this request.
	//     This link can be used to retrieve the resource data.
	//   * 'status':
	//     The link to retrieve the transaction status of the payment initiation.
	//   * 'scaStatus':
	//     The link to retrieve the scaStatus of the corresponding authorisation sub-resource.
	//     This link is only contained, if an authorisation sub-resource has been already created.
	//
	Links LinksSigningBasket `json:"_links"`
	// Resource identification of the generated signing basket resource.
	BasketID string `json:"basketId"`
	// It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
	// In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
	//
	ChallengeData *ChallengeData `json:"challengeData,omitempty"`
	// Authentication object.
	//
	ChosenScaMethod *ChosenScaMethod `json:"chosenScaMethod,omitempty"`
	// Text to be displayed to the PSU.
	PsuMessage *string `json:"psuMessage,omitempty"`
	// This data element might be contained, if SCA is required and if the PSU has a choice between different
	// authentication methods.
	//
	// Depending on the risk management of the ASPSP this choice might be offered before or after the PSU
	// has been identified with the first relevant factor, or if an access token is transported.
	//
	// If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection'
	// contained in the response body.
	//
	// These methods shall be presented towards the PSU for selection by the TPP.
	//
	ScaMethods  []AuthenticationObject `json:"scaMethods,omitempty"`
	TppMessages []TppMessage2XX        `json:"tppMessages,omitempty"`
	// The transaction status is filled with codes of the ISO 20022 data table.
	// Only the codes RCVD, PATC, ACTC, ACWC and RJCT are used:
	// - 'ACSP': 'AcceptedSettlementInProcess' -
	//   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
	// - 'ACTC': 'AcceptedTechnicalValidation' -
	//   Authentication and syntactical and semantical validation are successful.
	// - 'ACWC': 'AcceptedWithChange' -
	//   Instruction is accepted but a change will be made, such as date or remittance not sent.
	// - 'RCVD': 'Received' -
	//   Payment initiation has been received by the receiving agent.
	// - 'RJCT': 'Rejected' -
	//   Payment initiation or individual transaction included in the payment initiation has been rejected.
	//
	TransactionStatus TransactionStatusSBSEnum `json:"transactionStatus"`
}
