/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ConnectorResourcesOneSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey: string;
}

export class ConnectorResourcesOneRequest extends SpeakeasyBase {
  /**
   * ID of the record you are acting upon.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * ID of the resource you are acting upon.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=resource_id",
  })
  resourceId: string;

  /**
   * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=unified_api",
  })
  unifiedApi?: shared.UnifiedApiIdEnum;

  /**
   * The ID of your Unify application
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-apideck-app-id",
  })
  xApideckAppId: string;
}

export class ConnectorResourcesOneResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ConnectorResources
   */
  @SpeakeasyMetadata()
  getConnectorResourceResponse?: shared.GetConnectorResourceResponse;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  notFoundResponse?: shared.NotFoundResponse;

  /**
   * Payment Required
   */
  @SpeakeasyMetadata()
  paymentRequiredResponse?: shared.PaymentRequiredResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  unauthorizedResponse?: shared.UnauthorizedResponse;

  /**
   * Unexpected error
   */
  @SpeakeasyMetadata()
  unexpectedErrorResponse?: shared.UnexpectedErrorResponse;
}
