/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.nexmo.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The [Reports API](/reports/overview) enables you to request a report of activity for your Vonage account.
 *
 * @remarks
 *
 * Depending on your query pattern, you can choose from one of the two versions of the Reports API: asynchronous and synchronous. The asynchronous version is optimized for infrequent and large data queries (from several records to tens of millions). The synchronous version is optimized for frequent and periodic retrievals of small batches of data records (from one record to tens of thousand per query).
 *
 * Only synchronous version supports retrival of data records by message/record ID.
 *
 * Vonage recommends that you limit asynchronous queries to a maximum of 20 million records, by setting the start and end dates accordingly. On average, the asynchronous Reports API takes 5 - 10 minutes to generate 1 million records.
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Cancel the execution of a report
   *
   * @remarks
   * Cancel the execution of a pending or processing report.
   */
  cancelReport(
    req: operations.CancelReportRequest,
    security: operations.CancelReportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CancelReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CancelReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/reports/{report_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CancelReportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CancelReportResponse =
        new operations.CancelReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelReport200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelReport401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CancelReport401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelReport404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CancelReport404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cancelReport409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CancelReport409ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an asynchronous report
   *
   * @remarks
   * Request a report on your account activity
   */
  createAsyncReport(
    req: any,
    security: operations.CreateAsyncReportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAsyncReportResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/reports";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAsyncReportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAsyncReportResponse =
        new operations.CreateAsyncReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAsyncReport200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAsyncReport400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateAsyncReport400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAsyncReport401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateAsyncReport401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAsyncReport403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateAsyncReport403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAsyncReport422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateAsyncReport422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get report data
   *
   * @remarks
   * Download a zipped archive of the rendered report. The file is available for download for 72 hours.<br> The zip file will be named `<PRODUCT>_<REPORT_ID>.zip`<br> The csv file in the zip archive will be named as `report_<PRODUCT>_<ACCOUNT_ID>_<DATE>.csv` the date will be formatted as `yyyyMMdd`.
   *
   */
  downloadReport(
    req: operations.DownloadReportRequest,
    security: operations.DownloadReportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DownloadReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DownloadReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v3/media/{file_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DownloadReportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DownloadReportResponse =
        new operations.DownloadReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/octet-stream`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.downloadReport401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DownloadReport401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.downloadReport404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DownloadReport404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Load records synchronously
   *
   * @remarks
   * Fetch usage data synchronously
   */
  getRecords(
    req: operations.GetRecordsRequest,
    security: operations.GetRecordsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRecordsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRecordsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/reports/records";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetRecordsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRecordsResponse =
        new operations.GetRecordsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRecords200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRecords403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetRecords403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRecords422ApplicationJSONOneOf = httpRes?.data;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get status of report
   *
   * @remarks
   * Retrieve status and metadata about a requested report.
   */
  getReport(
    req: operations.GetReportRequest,
    security: operations.GetReportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/reports/{report_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetReportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportResponse =
        new operations.GetReportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReport200ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReport401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetReport401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getReport404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetReport404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List reports
   *
   * @remarks
   * List reports created by the specified account based on filtered provided.
   */
  listReports(
    req: operations.ListReportsRequest,
    security: operations.ListReportsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListReportsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListReportsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/reports";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListReportsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListReportsResponse =
        new operations.ListReportsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReports200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListReports200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReports400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListReports400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReports401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListReports401ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
