<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://okta.local',
		'https://,',
	];
  	
	public CreateUser $createUser;
	
	public CredentialOperations $credentialOperations;
	
	public LifecycleOperations $lifecycleOperations;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->createUser = new CreateUser(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->credentialOperations = new CredentialOperations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->lifecycleOperations = new LifecycleOperations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * Clear User Sessions
     * 
     * Clear User Sessions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsResponse
     */
	public function clearUserSessions(
        \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/sessions', \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClearUserSessionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find User
     * 
     * Find User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FindUserResponse
     */
	public function findUser(
        \OpenAPI\OpenAPI\Models\Operations\FindUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FindUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Assigned App Links
     * 
     * Get Assigned App Links
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksResponse
     */
	public function getAssignedAppLinks(
        \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/appLinks', \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAssignedAppLinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Current User
     * 
     * Get Current User
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCurrentUserResponse
     */
	public function getCurrentUser(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCurrentUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/me');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCurrentUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Groups for User
     * 
     * Get Groups for User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserResponse
     */
	public function getGroupsForUser(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/groups', \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupsForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get User
     * 
     * Get User
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
     */
	public function getUser(
        \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\GetUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset Factors
     * 
     * Reset Factors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetFactorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetFactorsResponse
     */
	public function resetFactors(
        \OpenAPI\OpenAPI\Models\Operations\ResetFactorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetFactorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/users/{userId}/lifecycle/reset_factors', \OpenAPI\OpenAPI\Models\Operations\ResetFactorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetFactorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}