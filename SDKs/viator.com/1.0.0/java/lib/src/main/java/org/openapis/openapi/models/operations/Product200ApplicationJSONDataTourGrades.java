/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Product200ApplicationJSONDataTourGrades {
    /**
     * **currency code** of the currency *this* product's tour grades prices are shown in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;

    public Product200ApplicationJSONDataTourGrades withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * **language code** of the standard language for *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultLanguageCode")
    public String defaultLanguageCode;

    public Product200ApplicationJSONDataTourGrades withDefaultLanguageCode(String defaultLanguageCode) {
        this.defaultLanguageCode = defaultLanguageCode;
        return this;
    }
    
    /**
     * **unique alphanumeric identifier** of *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeCode")
    public String gradeCode;

    public Product200ApplicationJSONDataTourGrades withGradeCode(String gradeCode) {
        this.gradeCode = gradeCode;
        return this;
    }
    
    /**
     * **departure time** for *this* tour grade if available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeDepartureTime")
    public String gradeDepartureTime;

    public Product200ApplicationJSONDataTourGrades withGradeDepartureTime(String gradeDepartureTime) {
        this.gradeDepartureTime = gradeDepartureTime;
        return this;
    }
    
    /**
     * **natural-language description** of *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeDescription")
    public String gradeDescription;

    public Product200ApplicationJSONDataTourGrades withGradeDescription(String gradeDescription) {
        this.gradeDescription = gradeDescription;
        return this;
    }
    
    /**
     * **natural-language description** of *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gradeTitle")
    public String gradeTitle;

    public Product200ApplicationJSONDataTourGrades withGradeTitle(String gradeTitle) {
        this.gradeTitle = gradeTitle;
        return this;
    }
    
    /**
     * **dictionary** of language service codes and their natural-language descriptors
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("langServices")
    public java.util.Map<String, String> langServices;

    public Product200ApplicationJSONDataTourGrades withLangServices(java.util.Map<String, String> langServices) {
        this.langServices = langServices;
        return this;
    }
    
    /**
     * Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFrom")
    public Double merchantNetPriceFrom;

    public Product200ApplicationJSONDataTourGrades withMerchantNetPriceFrom(Double merchantNetPriceFrom) {
        this.merchantNetPriceFrom = merchantNetPriceFrom;
        return this;
    }
    
    /**
     * Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)
     * 
     * For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantNetPriceFromFormatted")
    public String merchantNetPriceFromFormatted;

    public Product200ApplicationJSONDataTourGrades withMerchantNetPriceFromFormatted(String merchantNetPriceFromFormatted) {
        this.merchantNetPriceFromFormatted = merchantNetPriceFromFormatted;
        return this;
    }
    
    /**
     * **numeric suggested retail price** for *this* tour grade
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFrom")
    public Double priceFrom;

    public Product200ApplicationJSONDataTourGrades withPriceFrom(Double priceFrom) {
        this.priceFrom = priceFrom;
        return this;
    }
    
    /**
     * **currency-formatted suggested retail price** for *this* tour grade
     * - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceFromFormatted")
    public String priceFromFormatted;

    public Product200ApplicationJSONDataTourGrades withPriceFromFormatted(String priceFromFormatted) {
        this.priceFromFormatted = priceFromFormatted;
        return this;
    }
    
    /**
     * **sort order** of *this* tour grade
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortOrder")
    public Long sortOrder;

    public Product200ApplicationJSONDataTourGrades withSortOrder(Long sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    public Product200ApplicationJSONDataTourGrades(){}
}
