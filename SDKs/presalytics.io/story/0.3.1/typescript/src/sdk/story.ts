/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Story
 */
export class Story {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Story: Get List of User Stories
   *
   * @remarks
   * Returns a list of stories for this user identifie via the access token presentated to the api
   */
  storyGet(
    req: operations.StoryGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryGetResponse = new operations.StoryGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.stories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.stories = utils.objectToClass(
              httpRes?.data,
              shared.Story,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: View Analytics
   *
   * @remarks
   * returns an html document containing session and event metrics for the story
   */
  storyIdAnalytics(
    req: operations.StoryIdAnalyticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdAnalyticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdAnalyticsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/analytics", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdAnalyticsResponse =
        new operations.StoryIdAnalyticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revealJsPresenationWithAnalyticsData = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `text/html`)) {
            res.loginButton = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Delete by Id
   *
   * @remarks
   * Remove a story and dependant data.
   */
  storyIdDelete(
    req: operations.StoryIdDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdDeleteResponse =
        new operations.StoryIdDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Delete Subdocument
   *
   * @remarks
   * Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
   */
  storyIdFileOoxmlautomationidDelete(
    req: operations.StoryIdFileOoxmlautomationidDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdFileOoxmlautomationidDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdFileOoxmlautomationidDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/file/{ooxml_automation_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdFileOoxmlautomationidDeleteResponse =
        new operations.StoryIdFileOoxmlautomationidDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Download Updated File
   *
   * @remarks
   * Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
   */
  storyIdFileOoxmlautomationidGet(
    req: operations.StoryIdFileOoxmlautomationidGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdFileOoxmlautomationidGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdFileOoxmlautomationidGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{id}/file/{ooxml_automation_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdFileOoxmlautomationidGetResponse =
        new operations.StoryIdFileOoxmlautomationidGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.presentationml.presentation`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.powerpointPresentation = out;
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.wordDocument = out;
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.wordprocessingml.document`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.excelSpreadsheet = out;
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Upload a File To Existing Story
   *
   * @remarks
   * Upload a file to an existing story
   */
  storyIdFilePost(
    req: operations.StoryIdFilePostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdFilePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdFilePostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/file", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdFilePostResponse =
        new operations.StoryIdFilePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [415, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Get by Id
   *
   * @remarks
   * Returns story metadata, inlcuding json object with story outline
   */
  storyIdGet(
    req: operations.StoryIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdGetResponse =
        new operations.StoryIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Get Story Outline
   *
   * @remarks
   * Returns Story's outline
   */
  storyIdOutlineGet(
    req: operations.StoryIdOutlineGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdOutlineGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdOutlineGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/outline", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdOutlineGetResponse =
        new operations.StoryIdOutlineGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.storyIdOutlineGet200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.objectToClass(httpRes?.data, shared.Status);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
        case httpRes?.status == 410:
          break;
      }

      return res;
    });
  }

  /**
   * Story: Post Story Outline
   *
   * @remarks
   * Update a story outline.
   */
  storyIdOutlinePost(
    req: operations.StoryIdOutlinePostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdOutlinePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdOutlinePostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/outline", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdOutlinePostResponse =
        new operations.StoryIdOutlinePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Public Link to Story Reveal.js Document
   *
   * @remarks
   * returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True
   */
  storyIdPublic(
    req: operations.StoryIdPublicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdPublicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdPublicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/public/", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdPublicResponse =
        new operations.StoryIdPublicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revealJsPresenation = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 302:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Modify
   *
   * @remarks
   * Update story metadata, including story outline
   */
  storyIdPut(
    req: operations.StoryIdPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "story",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdPutResponse =
        new operations.StoryIdPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Get Story at Reveal.js Document
   *
   * @remarks
   * returns an html document containing a reveal.js epresentation of the story
   */
  storyIdReveal(
    req: operations.StoryIdRevealRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdRevealResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdRevealRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/reveal", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdRevealResponse =
        new operations.StoryIdRevealResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.revealJsPresenation = JSON.stringify(httpRes?.data);
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `text/html`)) {
            res.loginButton = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Get Story Status
   *
   * @remarks
   * Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
   */
  storyIdStatusGet(
    req: operations.StoryIdStatusGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryIdStatusGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryIdStatusGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/status", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryIdStatusGetResponse =
        new operations.StoryIdStatusGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.status = utils.objectToClass(httpRes?.data, shared.Status);
          }
          break;
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Upload
   *
   * @remarks
   * Upload new story to presalytics api
   */
  storyPost(
    req: operations.StoryPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "outline",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryPostResponse =
        new operations.StoryPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [415, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Upload a File
   *
   * @remarks
   * Upload new story to presalytics api via an Open Office Xml file
   */
  storyPostFile(
    req: operations.StoryPostFileRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryPostFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryPostFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryPostFileResponse =
        new operations.StoryPostFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [415, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Story: Upload a File (base64)
   *
   * @remarks
   * Upload new story to presalytics api via an Open Office Xml file
   */
  storyPostFileJson(
    req: operations.StoryPostFileJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StoryPostFileJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StoryPostFileJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file/json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "fileUpload",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StoryPostFileJsonResponse =
        new operations.StoryPostFileJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.story = utils.objectToClass(httpRes?.data, shared.Story);
          }
          break;
        case [415, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }
}
