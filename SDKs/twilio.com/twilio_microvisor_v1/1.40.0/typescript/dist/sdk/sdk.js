"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://microvisor.twilio.com"];
/**
 * This is the public Twilio REST API.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
    }
    /**
     * Create a config for an Account.
     */
    SDK.prototype.createAccountConfig = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateAccountConfigCreateAccountConfigRequest(req);
        }
        var baseURL = operations.CreateAccountConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Configs";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateAccountConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateAccountConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a secret for an Account.
     */
    SDK.prototype.createAccountSecret = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateAccountSecretCreateAccountSecretRequest(req);
        }
        var baseURL = operations.CreateAccountSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Secrets";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateAccountSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateAccountSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountSecret);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a config for a Microvisor Device.
     */
    SDK.prototype.createDeviceConfig = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateDeviceConfigRequest(req);
        }
        var baseURL = operations.CreateDeviceConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Configs", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateDeviceConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateDeviceConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create a secret for a Microvisor Device.
     */
    SDK.prototype.createDeviceSecret = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateDeviceSecretRequest(req);
        }
        var baseURL = operations.CreateDeviceSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Secrets", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateDeviceSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateDeviceSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceSecret);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a config for an Account.
     */
    SDK.prototype.deleteAccountConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteAccountConfigRequest(req);
        }
        var baseURL = operations.DeleteAccountConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Configs/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteAccountConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteAccountConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a secret for an Account.
     */
    SDK.prototype.deleteAccountSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteAccountSecretRequest(req);
        }
        var baseURL = operations.DeleteAccountSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Secrets/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteAccountSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteAccountSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific App.
     */
    SDK.prototype.deleteApp = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteAppRequest(req);
        }
        var baseURL = operations.DeleteAppServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Apps/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteAppSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteAppResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a config for a Microvisor Device.
     */
    SDK.prototype.deleteDeviceConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteDeviceConfigRequest(req);
        }
        var baseURL = operations.DeleteDeviceConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Configs/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteDeviceConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteDeviceConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a secret for a Microvisor Device.
     */
    SDK.prototype.deleteDeviceSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteDeviceSecretRequest(req);
        }
        var baseURL = operations.DeleteDeviceSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Secrets/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteDeviceSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteDeviceSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a Config for an Account.
     */
    SDK.prototype.fetchAccountConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchAccountConfigRequest(req);
        }
        var baseURL = operations.FetchAccountConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Configs/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchAccountConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchAccountConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a Secret for an Account.
     */
    SDK.prototype.fetchAccountSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchAccountSecretRequest(req);
        }
        var baseURL = operations.FetchAccountSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Secrets/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchAccountSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchAccountSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountSecret);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific App.
     */
    SDK.prototype.fetchApp = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchAppRequest(req);
        }
        var baseURL = operations.FetchAppServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Apps/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchAppSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchAppResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1App = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1App);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve the Manifest for an App.
     */
    SDK.prototype.fetchAppManifest = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchAppManifestRequest(req);
        }
        var baseURL = operations.FetchAppManifestServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Apps/{AppSid}/Manifest", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchAppManifestSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchAppManifestResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AppAppManifest = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AppAppManifest);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Fetch a specific Device.
     */
    SDK.prototype.fetchDevice = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchDeviceRequest(req);
        }
        var baseURL = operations.FetchDeviceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchDeviceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchDeviceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1Device = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1Device);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a Config for a Device.
     */
    SDK.prototype.fetchDeviceConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchDeviceConfigRequest(req);
        }
        var baseURL = operations.FetchDeviceConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Configs/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchDeviceConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchDeviceConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a Secret for a Device.
     */
    SDK.prototype.fetchDeviceSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchDeviceSecretRequest(req);
        }
        var baseURL = operations.FetchDeviceSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Secrets/{Key}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchDeviceSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchDeviceSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceSecret);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Configs for an Account.
     */
    SDK.prototype.listAccountConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAccountConfigRequest(req);
        }
        var baseURL = operations.ListAccountConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Configs";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListAccountConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListAccountConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listAccountConfigResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListAccountConfigListAccountConfigResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Secrets for an Account.
     */
    SDK.prototype.listAccountSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAccountSecretRequest(req);
        }
        var baseURL = operations.ListAccountSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Secrets";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListAccountSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListAccountSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listAccountSecretResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListAccountSecretListAccountSecretResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Apps for an Account.
     */
    SDK.prototype.listApp = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAppRequest(req);
        }
        var baseURL = operations.ListAppServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Apps";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListAppSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListAppResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listAppResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListAppListAppResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Devices registered with the Account.
     */
    SDK.prototype.listDevice = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListDeviceRequest(req);
        }
        var baseURL = operations.ListDeviceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Devices";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListDeviceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListDeviceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listDeviceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListDeviceListDeviceResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Configs for a Device.
     */
    SDK.prototype.listDeviceConfig = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListDeviceConfigRequest(req);
        }
        var baseURL = operations.ListDeviceConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Configs", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListDeviceConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListDeviceConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listDeviceConfigResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListDeviceConfigListDeviceConfigResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Retrieve a list of all Secrets for a Device.
     */
    SDK.prototype.listDeviceSecret = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListDeviceSecretRequest(req);
        }
        var baseURL = operations.ListDeviceSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Secrets", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListDeviceSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListDeviceSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listDeviceSecretResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListDeviceSecretListDeviceSecretResponse);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a config for an Account.
     */
    SDK.prototype.updateAccountConfig = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateAccountConfigRequest(req);
        }
        var baseURL = operations.UpdateAccountConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Configs/{Key}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateAccountConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateAccountConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a secret for an Account.
     */
    SDK.prototype.updateAccountSecret = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateAccountSecretRequest(req);
        }
        var baseURL = operations.UpdateAccountSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Secrets/{Key}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateAccountSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateAccountSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1AccountSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1AccountSecret);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a specific Device.
     */
    SDK.prototype.updateDevice = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateDeviceRequest(req);
        }
        var baseURL = operations.UpdateDeviceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateDeviceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateDeviceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1Device = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1Device);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a config for a Microvisor Device.
     */
    SDK.prototype.updateDeviceConfig = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateDeviceConfigRequest(req);
        }
        var baseURL = operations.UpdateDeviceConfigServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Configs/{Key}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateDeviceConfigSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateDeviceConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceConfig);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a secret for a Microvisor Device.
     */
    SDK.prototype.updateDeviceSecret = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateDeviceSecretRequest(req);
        }
        var baseURL = operations.UpdateDeviceSecretServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Devices/{DeviceSid}/Secrets/{Key}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateDeviceSecretSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateDeviceSecretResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.microvisorV1DeviceDeviceSecret = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MicrovisorV1DeviceDeviceSecret);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
