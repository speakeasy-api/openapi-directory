// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LccepSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LccepRequestBodyCertificateParameters struct {
	// Certificate Number
	CertificateNumber string `json:"CertificateNumber"`
}

// LccepRequestBodyFormatEnum - The format of the certificate in response.
type LccepRequestBodyFormatEnum string

const (
	LccepRequestBodyFormatEnumPdf LccepRequestBodyFormatEnum = "pdf"
)

func (e LccepRequestBodyFormatEnum) ToPointer() *LccepRequestBodyFormatEnum {
	return &e
}

func (e *LccepRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = LccepRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LccepRequestBodyFormatEnum: %v", v)
	}
}

// LccepRequestBody - Request format
type LccepRequestBody struct {
	CertificateParameters *LccepRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LccepRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lccep504ApplicationJSONErrorEnum string

const (
	Lccep504ApplicationJSONErrorEnumGatewayTimeout Lccep504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Lccep504ApplicationJSONErrorEnum) ToPointer() *Lccep504ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Lccep504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep504ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep504ApplicationJSONErrorDescriptionEnum string

const (
	Lccep504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lccep504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Lccep504ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Lccep504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep504ApplicationJSON - Gateway timeout
type Lccep504ApplicationJSON struct {
	Error            *Lccep504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep503ApplicationJSONErrorEnum string

const (
	Lccep503ApplicationJSONErrorEnumServiceUnavailable Lccep503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Lccep503ApplicationJSONErrorEnum) ToPointer() *Lccep503ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Lccep503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep503ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep503ApplicationJSONErrorDescriptionEnum string

const (
	Lccep503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lccep503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Lccep503ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Lccep503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep503ApplicationJSON - Service unavailable
type Lccep503ApplicationJSON struct {
	Error            *Lccep503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep502ApplicationJSONErrorEnum string

const (
	Lccep502ApplicationJSONErrorEnumBadGatewy Lccep502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Lccep502ApplicationJSONErrorEnum) ToPointer() *Lccep502ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Lccep502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep502ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep502ApplicationJSONErrorDescriptionEnum string

const (
	Lccep502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lccep502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Lccep502ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Lccep502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep502ApplicationJSON - Bad gateway
type Lccep502ApplicationJSON struct {
	Error            *Lccep502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep500ApplicationJSONErrorEnum string

const (
	Lccep500ApplicationJSONErrorEnumInternalServerError Lccep500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Lccep500ApplicationJSONErrorEnum) ToPointer() *Lccep500ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Lccep500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep500ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep500ApplicationJSONErrorDescriptionEnum string

const (
	Lccep500ApplicationJSONErrorDescriptionEnumInternalServerError Lccep500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Lccep500ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Lccep500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep500ApplicationJSON - Internal server error
type Lccep500ApplicationJSON struct {
	Error            *Lccep500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep404ApplicationJSONErrorEnum string

const (
	Lccep404ApplicationJSONErrorEnumRecordNotFound Lccep404ApplicationJSONErrorEnum = "record_not_found"
	Lccep404ApplicationJSONErrorEnumURLNotFound    Lccep404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Lccep404ApplicationJSONErrorEnum) ToPointer() *Lccep404ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lccep404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep404ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep404ApplicationJSONErrorDescriptionEnum string

const (
	Lccep404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lccep404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lccep404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lccep404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Lccep404ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lccep404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep404ApplicationJSON - No record found
type Lccep404ApplicationJSON struct {
	Error            *Lccep404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep401ApplicationJSONErrorEnum string

const (
	Lccep401ApplicationJSONErrorEnumInvalidAuthentication Lccep401ApplicationJSONErrorEnum = "invalid_authentication"
	Lccep401ApplicationJSONErrorEnumInvalidAuthorization  Lccep401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Lccep401ApplicationJSONErrorEnum) ToPointer() *Lccep401ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lccep401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep401ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep401ApplicationJSONErrorDescriptionEnum string

const (
	Lccep401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lccep401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lccep401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lccep401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Lccep401ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lccep401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep401ApplicationJSON - Unauthorized access
type Lccep401ApplicationJSON struct {
	Error            *Lccep401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lccep400ApplicationJSONErrorEnum string

const (
	Lccep400ApplicationJSONErrorEnumMissingParameter Lccep400ApplicationJSONErrorEnum = "missing_parameter"
	Lccep400ApplicationJSONErrorEnumInvalidParameter Lccep400ApplicationJSONErrorEnum = "invalid_parameter"
	Lccep400ApplicationJSONErrorEnumInvalidFormat    Lccep400ApplicationJSONErrorEnum = "invalid_format"
	Lccep400ApplicationJSONErrorEnumInvalidTxnid     Lccep400ApplicationJSONErrorEnum = "invalid_txnid"
	Lccep400ApplicationJSONErrorEnumInvalidConsentid Lccep400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Lccep400ApplicationJSONErrorEnum) ToPointer() *Lccep400ApplicationJSONErrorEnum {
	return &e
}

func (e *Lccep400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lccep400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep400ApplicationJSONErrorEnum: %v", v)
	}
}

type Lccep400ApplicationJSONErrorDescriptionEnum string

const (
	Lccep400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lccep400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lccep400ApplicationJSONErrorDescriptionEnumBadRequest                              Lccep400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lccep400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lccep400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lccep400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lccep400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lccep400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lccep400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Lccep400ApplicationJSONErrorDescriptionEnum) ToPointer() *Lccep400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Lccep400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lccep400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Lccep400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Lccep400ApplicationJSON - Bad request
type Lccep400ApplicationJSON struct {
	Error            *Lccep400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lccep400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LccepResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lccep400ApplicationJSONObject *Lccep400ApplicationJSON
	// Unauthorized access
	Lccep401ApplicationJSONObject *Lccep401ApplicationJSON
	// No record found
	Lccep404ApplicationJSONObject *Lccep404ApplicationJSON
	// Internal server error
	Lccep500ApplicationJSONObject *Lccep500ApplicationJSON
	// Bad gateway
	Lccep502ApplicationJSONObject *Lccep502ApplicationJSON
	// Service unavailable
	Lccep503ApplicationJSONObject *Lccep503ApplicationJSON
	// Gateway timeout
	Lccep504ApplicationJSONObject *Lccep504ApplicationJSON
}
