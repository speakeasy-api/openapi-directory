"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import imageasset as shared_imageasset
from ..shared import youtubevideodetails as shared_youtubevideodetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoPerformanceAd:
    r"""Details for a video performance ad."""
    
    action_button_labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionButtonLabels'), 'exclude': lambda f: f is None }})
    r"""The list of text assets shown on the call-to-action button."""  
    companion_banners: Optional[list[shared_imageasset.ImageAsset]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companionBanners'), 'exclude': lambda f: f is None }})
    r"""The list of companion banners used by this ad."""  
    custom_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customParameters'), 'exclude': lambda f: f is None }})
    r"""The custom parameters to pass custom values to tracking URL template."""  
    descriptions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptions'), 'exclude': lambda f: f is None }})
    r"""The list of descriptions shown on the call-to-action banner."""  
    display_url_breadcrumb1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayUrlBreadcrumb1'), 'exclude': lambda f: f is None }})
    r"""The first piece after the domain in the display URL."""  
    display_url_breadcrumb2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayUrlBreadcrumb2'), 'exclude': lambda f: f is None }})
    r"""The second piece after the domain in the display URL."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""The domain of the display URL."""  
    final_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalUrl'), 'exclude': lambda f: f is None }})
    r"""The URL address of the webpage that people reach after they click the ad."""  
    headlines: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headlines'), 'exclude': lambda f: f is None }})
    r"""The list of headlines shown on the call-to-action banner."""  
    long_headlines: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longHeadlines'), 'exclude': lambda f: f is None }})
    r"""The list of lone headlines shown on the call-to-action banner."""  
    tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingUrl'), 'exclude': lambda f: f is None }})
    r"""The URL address loaded in the background for tracking purposes."""  
    videos: Optional[list[shared_youtubevideodetails.YoutubeVideoDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})
    r"""The list of YouTube video assets used by this ad."""  
    