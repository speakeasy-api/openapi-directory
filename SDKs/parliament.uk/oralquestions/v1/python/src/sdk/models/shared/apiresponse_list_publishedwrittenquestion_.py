"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import paginginfo as shared_paginginfo
from ..shared import publishedwrittenquestion as shared_publishedwrittenquestion
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class APIResponseListPublishedWrittenQuestionStatusCodeEnum(str, Enum):
    CONTINUE = 'Continue'
    SWITCHING_PROTOCOLS = 'SwitchingProtocols'
    OK = 'OK'
    CREATED = 'Created'
    ACCEPTED = 'Accepted'
    NON_AUTHORITATIVE_INFORMATION = 'NonAuthoritativeInformation'
    NO_CONTENT = 'NoContent'
    RESET_CONTENT = 'ResetContent'
    PARTIAL_CONTENT = 'PartialContent'
    MULTIPLE_CHOICES = 'MultipleChoices'
    AMBIGUOUS = 'Ambiguous'
    MOVED_PERMANENTLY = 'MovedPermanently'
    MOVED = 'Moved'
    FOUND = 'Found'
    REDIRECT = 'Redirect'
    SEE_OTHER = 'SeeOther'
    REDIRECT_METHOD = 'RedirectMethod'
    NOT_MODIFIED = 'NotModified'
    USE_PROXY = 'UseProxy'
    UNUSED = 'Unused'
    TEMPORARY_REDIRECT = 'TemporaryRedirect'
    REDIRECT_KEEP_VERB = 'RedirectKeepVerb'
    BAD_REQUEST = 'BadRequest'
    UNAUTHORIZED = 'Unauthorized'
    PAYMENT_REQUIRED = 'PaymentRequired'
    FORBIDDEN = 'Forbidden'
    NOT_FOUND = 'NotFound'
    METHOD_NOT_ALLOWED = 'MethodNotAllowed'
    NOT_ACCEPTABLE = 'NotAcceptable'
    PROXY_AUTHENTICATION_REQUIRED = 'ProxyAuthenticationRequired'
    REQUEST_TIMEOUT = 'RequestTimeout'
    CONFLICT = 'Conflict'
    GONE = 'Gone'
    LENGTH_REQUIRED = 'LengthRequired'
    PRECONDITION_FAILED = 'PreconditionFailed'
    REQUEST_ENTITY_TOO_LARGE = 'RequestEntityTooLarge'
    REQUEST_URI_TOO_LONG = 'RequestUriTooLong'
    UNSUPPORTED_MEDIA_TYPE = 'UnsupportedMediaType'
    REQUESTED_RANGE_NOT_SATISFIABLE = 'RequestedRangeNotSatisfiable'
    EXPECTATION_FAILED = 'ExpectationFailed'
    UPGRADE_REQUIRED = 'UpgradeRequired'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    NOT_IMPLEMENTED = 'NotImplemented'
    BAD_GATEWAY = 'BadGateway'
    SERVICE_UNAVAILABLE = 'ServiceUnavailable'
    GATEWAY_TIMEOUT = 'GatewayTimeout'
    HTTP_VERSION_NOT_SUPPORTED = 'HttpVersionNotSupported'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIResponseListPublishedWrittenQuestion:
    r"""OK"""
    
    errors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Errors'), 'exclude': lambda f: f is None }})  
    paging_info: Optional[shared_paginginfo.PagingInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PagingInfo'), 'exclude': lambda f: f is None }})  
    response: Optional[list[shared_publishedwrittenquestion.PublishedWrittenQuestion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Response'), 'exclude': lambda f: f is None }})  
    status_code: Optional[APIResponseListPublishedWrittenQuestionStatusCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusCode'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Success'), 'exclude': lambda f: f is None }})  
    