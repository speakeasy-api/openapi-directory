"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def orgpolicy_projects_constraints_list(self, request: operations.OrgpolicyProjectsConstraintsListRequest, security: operations.OrgpolicyProjectsConstraintsListSecurity) -> operations.OrgpolicyProjectsConstraintsListResponse:
        r"""Lists constraints that could be applied on the specified resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsConstraintsListRequest, base_url, '/v2/{parent}/constraints', request)
        
        query_params = utils.get_query_params(operations.OrgpolicyProjectsConstraintsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsConstraintsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2ListConstraintsResponse])
                res.google_cloud_orgpolicy_v2_list_constraints_response = out

        return res

    def orgpolicy_projects_policies_create(self, request: operations.OrgpolicyProjectsPoliciesCreateRequest, security: operations.OrgpolicyProjectsPoliciesCreateSecurity) -> operations.OrgpolicyProjectsPoliciesCreateResponse:
        r"""Creates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Google Cloud resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesCreateRequest, base_url, '/v2/{parent}/policies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_orgpolicy_v2_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2Policy])
                res.google_cloud_orgpolicy_v2_policy = out

        return res

    def orgpolicy_projects_policies_delete(self, request: operations.OrgpolicyProjectsPoliciesDeleteRequest, security: operations.OrgpolicyProjectsPoliciesDeleteSecurity) -> operations.OrgpolicyProjectsPoliciesDeleteResponse:
        r"""Deletes a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or organization policy does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesDeleteRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def orgpolicy_projects_policies_get(self, request: operations.OrgpolicyProjectsPoliciesGetRequest, security: operations.OrgpolicyProjectsPoliciesGetSecurity) -> operations.OrgpolicyProjectsPoliciesGetResponse:
        r"""Gets a policy on a resource. If no policy is set on the resource, `NOT_FOUND` is returned. The `etag` value can be used with `UpdatePolicy()` to update a policy during read-modify-write."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesGetRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2Policy])
                res.google_cloud_orgpolicy_v2_policy = out

        return res

    def orgpolicy_projects_policies_get_effective_policy(self, request: operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest, security: operations.OrgpolicyProjectsPoliciesGetEffectivePolicySecurity) -> operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse:
        r"""Gets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an `etag` or `condition` set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest, base_url, '/v2/{name}:getEffectivePolicy', request)
        
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesGetEffectivePolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesGetEffectivePolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2Policy])
                res.google_cloud_orgpolicy_v2_policy = out

        return res

    def orgpolicy_projects_policies_list(self, request: operations.OrgpolicyProjectsPoliciesListRequest, security: operations.OrgpolicyProjectsPoliciesListSecurity) -> operations.OrgpolicyProjectsPoliciesListResponse:
        r"""Retrieves all of the policies that exist on a particular resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesListRequest, base_url, '/v2/{parent}/policies', request)
        
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2ListPoliciesResponse])
                res.google_cloud_orgpolicy_v2_list_policies_response = out

        return res

    def orgpolicy_projects_policies_patch(self, request: operations.OrgpolicyProjectsPoliciesPatchRequest, security: operations.OrgpolicyProjectsPoliciesPatchSecurity) -> operations.OrgpolicyProjectsPoliciesPatchResponse:
        r"""Updates a policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OrgpolicyProjectsPoliciesPatchRequest, base_url, '/v2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_orgpolicy_v2_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OrgpolicyProjectsPoliciesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OrgpolicyProjectsPoliciesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudOrgpolicyV2Policy])
                res.google_cloud_orgpolicy_v2_policy = out

        return res

    