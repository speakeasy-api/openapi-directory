/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Event - Successful response
 */
public class Event {
    /**
     * Address of the event's venue, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public Event withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * City, town, village, etc. the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public Event withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Country the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public Event withCountry(String country) {
        this.country = country;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("district")
    public DistrictList district;

    public Event withDistrict(DistrictList district) {
        this.district = district;
        return this;
    }
    
    /**
     * An array of event keys for the divisions at this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division_keys")
    public String[] divisionKeys;

    public Event withDivisionKeys(String[] divisionKeys) {
        this.divisionKeys = divisionKeys;
        return this;
    }
    
    /**
     * Event end date in `yyyy-mm-dd` format.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("end_date")
    public LocalDate endDate;

    public Event withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Event short code, as provided by FIRST.
     */
    @JsonProperty("event_code")
    public String eventCode;

    public Event withEventCode(String eventCode) {
        this.eventCode = eventCode;
        return this;
    }
    
    /**
     * Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
     */
    @JsonProperty("event_type")
    public Long eventType;

    public Event withEventType(Long eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Event Type, eg Regional, District, or Offseason.
     */
    @JsonProperty("event_type_string")
    public String eventTypeString;

    public Event withEventTypeString(String eventTypeString) {
        this.eventTypeString = eventTypeString;
        return this;
    }
    
    /**
     * Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_event_code")
    public String firstEventCode;

    public Event withFirstEventCode(String firstEventCode) {
        this.firstEventCode = firstEventCode;
        return this;
    }
    
    /**
     * The FIRST internal Event ID, used to link to the event on the FRC webpage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_event_id")
    public String firstEventId;

    public Event withFirstEventId(String firstEventId) {
        this.firstEventId = firstEventId;
        return this;
    }
    
    /**
     * Google Maps Place ID for the event address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmaps_place_id")
    public String gmapsPlaceId;

    public Event withGmapsPlaceId(String gmapsPlaceId) {
        this.gmapsPlaceId = gmapsPlaceId;
        return this;
    }
    
    /**
     * Link to address location on Google Maps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmaps_url")
    public String gmapsUrl;

    public Event withGmapsUrl(String gmapsUrl) {
        this.gmapsUrl = gmapsUrl;
        return this;
    }
    
    /**
     * TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     */
    @JsonProperty("key")
    public String key;

    public Event withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Latitude for the event address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lat")
    public Double lat;

    public Event withLat(Double lat) {
        this.lat = lat;
        return this;
    }
    
    /**
     * Longitude for the event address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lng")
    public Double lng;

    public Event withLng(Double lng) {
        this.lng = lng;
        return this;
    }
    
    /**
     * Name of the location at the address for the event, eg. Blue Alliance High School.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_name")
    public String locationName;

    public Event withLocationName(String locationName) {
        this.locationName = locationName;
        return this;
    }
    
    /**
     * Official name of event on record either provided by FIRST or organizers of offseason event.
     */
    @JsonProperty("name")
    public String name;

    public Event withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_event_key")
    public String parentEventKey;

    public Event withParentEventKey(String parentEventKey) {
        this.parentEventKey = parentEventKey;
        return this;
    }
    
    /**
     * Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playoff_type")
    public Long playoffType;

    public Event withPlayoffType(Long playoffType) {
        this.playoffType = playoffType;
        return this;
    }
    
    /**
     * String representation of the `playoff_type`, or null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playoff_type_string")
    public String playoffTypeString;

    public Event withPlayoffTypeString(String playoffTypeString) {
        this.playoffTypeString = playoffTypeString;
        return this;
    }
    
    /**
     * Postal code from the event address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    public String postalCode;

    public Event withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("short_name")
    public String shortName;

    public Event withShortName(String shortName) {
        this.shortName = shortName;
        return this;
    }
    
    /**
     * Event start date in `yyyy-mm-dd` format.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_date")
    public LocalDate startDate;

    public Event withStartDate(LocalDate startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * State or Province the event is located in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_prov")
    public String stateProv;

    public Event withStateProv(String stateProv) {
        this.stateProv = stateProv;
        return this;
    }
    
    /**
     * Timezone name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public Event withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webcasts")
    public Webcast[] webcasts;

    public Event withWebcasts(Webcast[] webcasts) {
        this.webcasts = webcasts;
        return this;
    }
    
    /**
     * The event's website, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;

    public Event withWebsite(String website) {
        this.website = website;
        return this;
    }
    
    /**
     * Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("week")
    public Long week;

    public Event withWeek(Long week) {
        this.week = week;
        return this;
    }
    
    /**
     * Year the event data is for.
     */
    @JsonProperty("year")
    public Long year;

    public Event withYear(Long year) {
        this.year = year;
        return this;
    }
    
    public Event(@JsonProperty("end_date") LocalDate endDate, @JsonProperty("event_code") String eventCode, @JsonProperty("event_type") Long eventType, @JsonProperty("event_type_string") String eventTypeString, @JsonProperty("key") String key, @JsonProperty("name") String name, @JsonProperty("start_date") LocalDate startDate, @JsonProperty("year") Long year) {
        this.endDate = endDate;
        this.eventCode = eventCode;
        this.eventType = eventType;
        this.eventTypeString = eventTypeString;
        this.key = key;
        this.name = name;
        this.startDate = startDate;
        this.year = year;
  }
}
