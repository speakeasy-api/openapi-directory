/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class AnalyticsTestAudienceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export enum AnalyticsTestAudienceRequestBodyCustomPropertiesEnum {
  String = "string",
  Number = "number",
  Boolean = "boolean",
  DateTime = "date_time",
}

/**
 * Audience definition.
 */
export class AnalyticsTestAudienceRequestBody extends SpeakeasyBase {
  /**
   * Custom properties used in the definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_properties" })
  customProperties?: Record<
    string,
    AnalyticsTestAudienceRequestBodyCustomPropertiesEnum
  >;

  /**
   * Audience definition in OData format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "definition" })
  definition: string;

  /**
   * Audience description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

export class AnalyticsTestAudienceRequest extends SpeakeasyBase {
  /**
   * Audience definition
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AnalyticsTestAudienceRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

export enum AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class AnalyticsTestAudienceDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: AnalyticsTestAudienceDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason
 */
export class AnalyticsTestAudienceDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => AnalyticsTestAudienceDefaultApplicationJSONError)
  error: AnalyticsTestAudienceDefaultApplicationJSONError;
}

export enum AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum {
  String = "string",
  Number = "number",
  Boolean = "boolean",
  DateTime = "date_time",
}

/**
 * Audience test result.
 */
export class AnalyticsTestAudience200ApplicationJSON extends SpeakeasyBase {
  /**
   * Custom properties used in the definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_properties" })
  customProperties?: Record<
    string,
    AnalyticsTestAudience200ApplicationJSONCustomPropertiesEnum
  >;

  /**
   * Audience definition in OData format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "definition" })
  definition?: string;

  /**
   * Estimated audience size.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "estimated_count" })
  estimatedCount?: number;

  /**
   * Estimated total audience size.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "estimated_total_count" })
  estimatedTotalCount?: number;
}

export class AnalyticsTestAudienceResponse extends SpeakeasyBase {
  /**
   * Tests audience definition.
   */
  @SpeakeasyMetadata()
  analyticsTestAudience200ApplicationJSONObject?: AnalyticsTestAudience200ApplicationJSON;

  /**
   * Error code with reason
   */
  @SpeakeasyMetadata()
  analyticsTestAudienceDefaultApplicationJSONObject?: AnalyticsTestAudienceDefaultApplicationJSON;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
