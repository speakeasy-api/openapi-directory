/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Finishes enrolling a second factor for the user.
   */
  identitytoolkitAccountsMfaEnrollmentFinalize(
    req: operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeRequest,
    security: operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/accounts/mfaEnrollment:finalize";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse =
        new operations.IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user.
   */
  identitytoolkitAccountsMfaEnrollmentStart(
    req: operations.IdentitytoolkitAccountsMfaEnrollmentStartRequest,
    security: operations.IdentitytoolkitAccountsMfaEnrollmentStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitAccountsMfaEnrollmentStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitAccountsMfaEnrollmentStartRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/accounts/mfaEnrollment:start";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitV2StartMfaEnrollmentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitAccountsMfaEnrollmentStartSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitAccountsMfaEnrollmentStartResponse =
        new operations.IdentitytoolkitAccountsMfaEnrollmentStartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitV2StartMfaEnrollmentResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Revokes one second factor from the enrolled second factors for an account.
   */
  identitytoolkitAccountsMfaEnrollmentWithdraw(
    req: operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawRequest,
    security: operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/accounts/mfaEnrollment:withdraw";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitV2WithdrawMfaRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse =
        new operations.IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitV2WithdrawMfaResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitV2WithdrawMfaResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verifies the MFA challenge and performs sign-in
   */
  identitytoolkitAccountsMfaSignInFinalize(
    req: operations.IdentitytoolkitAccountsMfaSignInFinalizeRequest,
    security: operations.IdentitytoolkitAccountsMfaSignInFinalizeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitAccountsMfaSignInFinalizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitAccountsMfaSignInFinalizeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/accounts/mfaSignIn:finalize";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitV2FinalizeMfaSignInRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.IdentitytoolkitAccountsMfaSignInFinalizeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitAccountsMfaSignInFinalizeResponse =
        new operations.IdentitytoolkitAccountsMfaSignInFinalizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitV2FinalizeMfaSignInResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sends the MFA challenge
   */
  identitytoolkitAccountsMfaSignInStart(
    req: operations.IdentitytoolkitAccountsMfaSignInStartRequest,
    security: operations.IdentitytoolkitAccountsMfaSignInStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.IdentitytoolkitAccountsMfaSignInStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.IdentitytoolkitAccountsMfaSignInStartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/accounts/mfaSignIn:start";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudIdentitytoolkitV2StartMfaSignInRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.IdentitytoolkitAccountsMfaSignInStartSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.IdentitytoolkitAccountsMfaSignInStartResponse =
        new operations.IdentitytoolkitAccountsMfaSignInStartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudIdentitytoolkitV2StartMfaSignInResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudIdentitytoolkitV2StartMfaSignInResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
