"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MeetingRegistrantStatusSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class MeetingRegistrantStatusApplicationJSONActionEnum(str, Enum):
    r"""Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant."""
    APPROVE = 'approve'
    CANCEL = 'cancel'
    DENY = 'deny'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingRegistrantStatusApplicationJSONRegistrants:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingRegistrantStatusApplicationJSON:
    
    action: MeetingRegistrantStatusApplicationJSONActionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    r"""Registrant Status:<br>`approve` - Approve registrant.<br>`cancel` - Cancel previously approved registrant's registration.<br>`deny` - Deny registrant."""  
    registrants: Optional[list[MeetingRegistrantStatusApplicationJSONRegistrants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrants'), 'exclude': lambda f: f is None }})
    r"""List of registrants."""  
    

@dataclasses.dataclass
class MeetingRegistrantStatusRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    request_body: MeetingRegistrantStatusApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""The meeting occurrence ID."""  
    

@dataclasses.dataclass
class MeetingRegistrantStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    