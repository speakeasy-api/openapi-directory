"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any

class Mme:
    r"""Match patients with similar diseases and non-human genes based on their phenotypes"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_disease_mme(self, request: dict[str, Any]) -> operations.PostDiseaseMmeResponse:
        r"""Match a patient to diseases based on their phenotypes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mme/disease'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDiseaseMmeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_fly_mme(self, request: dict[str, Any]) -> operations.PostFlyMmeResponse:
        r"""Match a patient to fruit fly genes based on similar phenotypes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mme/fly'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFlyMmeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_mouse_mme(self, request: dict[str, Any]) -> operations.PostMouseMmeResponse:
        r"""Match a patient to mouse genes based on similar phenotypes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mme/mouse'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMouseMmeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_nematode_mme(self, request: dict[str, Any]) -> operations.PostNematodeMmeResponse:
        r"""Match a patient to nematode genes based on similar phenotypes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mme/nematode'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNematodeMmeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_zebrafish_mme(self, request: dict[str, Any]) -> operations.PostZebrafishMmeResponse:
        r"""Match a patient to zebrafish genes based on similar phenotypes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mme/zebrafish'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostZebrafishMmeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    