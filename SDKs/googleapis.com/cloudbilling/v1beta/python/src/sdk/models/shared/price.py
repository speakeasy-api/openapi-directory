"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import estimationtimepoint as shared_estimationtimepoint
from ..shared import rate as shared_rate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Price:
    r"""The price of a SKU at a point int time."""
    
    effective_time: Optional[shared_estimationtimepoint.EstimationTimePoint] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveTime'), 'exclude': lambda f: f is None }})
    r"""Represents a point in time."""  
    price_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceType'), 'exclude': lambda f: f is None }})
    r"""The type of price. Possible values: \\"RATE\\" """  
    rate: Optional[shared_rate.Rate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""A SKU price consisting of tiered rates."""  
    