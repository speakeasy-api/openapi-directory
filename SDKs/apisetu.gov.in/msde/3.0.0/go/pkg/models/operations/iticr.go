// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IticrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type IticrRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Certificate No.
	Certno string `json:"certno"`
}

// IticrRequestBodyFormatEnum - The format of the certificate in response.
type IticrRequestBodyFormatEnum string

const (
	IticrRequestBodyFormatEnumPdf IticrRequestBodyFormatEnum = "pdf"
)

func (e *IticrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = IticrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IticrRequestBodyFormatEnum: %s", s)
	}
}

// IticrRequestBody - Request format
type IticrRequestBody struct {
	CertificateParameters *IticrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IticrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Iticr504ApplicationJSONErrorEnum string

const (
	Iticr504ApplicationJSONErrorEnumGatewayTimeout Iticr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Iticr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Iticr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr504ApplicationJSONErrorDescriptionEnum string

const (
	Iticr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Iticr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Iticr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Iticr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr504ApplicationJSON - Gateway timeout
type Iticr504ApplicationJSON struct {
	Error            *Iticr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr503ApplicationJSONErrorEnum string

const (
	Iticr503ApplicationJSONErrorEnumServiceUnavailable Iticr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Iticr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Iticr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr503ApplicationJSONErrorDescriptionEnum string

const (
	Iticr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Iticr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Iticr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Iticr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr503ApplicationJSON - Service unavailable
type Iticr503ApplicationJSON struct {
	Error            *Iticr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr502ApplicationJSONErrorEnum string

const (
	Iticr502ApplicationJSONErrorEnumBadGatewy Iticr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Iticr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Iticr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr502ApplicationJSONErrorDescriptionEnum string

const (
	Iticr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Iticr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Iticr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Iticr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr502ApplicationJSON - Bad gateway
type Iticr502ApplicationJSON struct {
	Error            *Iticr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr500ApplicationJSONErrorEnum string

const (
	Iticr500ApplicationJSONErrorEnumInternalServerError Iticr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Iticr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Iticr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr500ApplicationJSONErrorDescriptionEnum string

const (
	Iticr500ApplicationJSONErrorDescriptionEnumInternalServerError Iticr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Iticr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Iticr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr500ApplicationJSON - Internal server error
type Iticr500ApplicationJSON struct {
	Error            *Iticr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr404ApplicationJSONErrorEnum string

const (
	Iticr404ApplicationJSONErrorEnumRecordNotFound Iticr404ApplicationJSONErrorEnum = "record_not_found"
	Iticr404ApplicationJSONErrorEnumURLNotFound    Iticr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Iticr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Iticr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr404ApplicationJSONErrorDescriptionEnum string

const (
	Iticr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Iticr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Iticr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Iticr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Iticr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Iticr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr404ApplicationJSON - No record found
type Iticr404ApplicationJSON struct {
	Error            *Iticr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr401ApplicationJSONErrorEnum string

const (
	Iticr401ApplicationJSONErrorEnumInvalidAuthentication Iticr401ApplicationJSONErrorEnum = "invalid_authentication"
	Iticr401ApplicationJSONErrorEnumInvalidAuthorization  Iticr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Iticr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Iticr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr401ApplicationJSONErrorDescriptionEnum string

const (
	Iticr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Iticr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Iticr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Iticr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Iticr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Iticr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr401ApplicationJSON - Unauthorized access
type Iticr401ApplicationJSON struct {
	Error            *Iticr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Iticr400ApplicationJSONErrorEnum string

const (
	Iticr400ApplicationJSONErrorEnumMissingParameter Iticr400ApplicationJSONErrorEnum = "missing_parameter"
	Iticr400ApplicationJSONErrorEnumInvalidParameter Iticr400ApplicationJSONErrorEnum = "invalid_parameter"
	Iticr400ApplicationJSONErrorEnumInvalidFormat    Iticr400ApplicationJSONErrorEnum = "invalid_format"
	Iticr400ApplicationJSONErrorEnumInvalidTxnid     Iticr400ApplicationJSONErrorEnum = "invalid_txnid"
	Iticr400ApplicationJSONErrorEnumInvalidConsentid Iticr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Iticr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Iticr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Iticr400ApplicationJSONErrorDescriptionEnum string

const (
	Iticr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Iticr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Iticr400ApplicationJSONErrorDescriptionEnumBadRequest                              Iticr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Iticr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Iticr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Iticr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Iticr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Iticr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Iticr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Iticr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Iticr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Iticr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Iticr400ApplicationJSON - Bad request
type Iticr400ApplicationJSON struct {
	Error            *Iticr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Iticr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IticrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Iticr400ApplicationJSONObject *Iticr400ApplicationJSON
	// Unauthorized access
	Iticr401ApplicationJSONObject *Iticr401ApplicationJSON
	// No record found
	Iticr404ApplicationJSONObject *Iticr404ApplicationJSON
	// Internal server error
	Iticr500ApplicationJSONObject *Iticr500ApplicationJSON
	// Bad gateway
	Iticr502ApplicationJSONObject *Iticr502ApplicationJSON
	// Service unavailable
	Iticr503ApplicationJSONObject *Iticr503ApplicationJSON
	// Gateway timeout
	Iticr504ApplicationJSONObject *Iticr504ApplicationJSON
}
