// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DeletionResponseStatusOfTheDeletionEnum string

const (
	DeletionResponseStatusOfTheDeletionEnumQueued                          DeletionResponseStatusOfTheDeletionEnum = "QUEUED"
	DeletionResponseStatusOfTheDeletionEnumRunning                         DeletionResponseStatusOfTheDeletionEnum = "RUNNING"
	DeletionResponseStatusOfTheDeletionEnumSucceededWaitingForCacheRemoval DeletionResponseStatusOfTheDeletionEnum = "SUCCEEDED_WAITING_FOR_CACHE_REMOVAL"
	DeletionResponseStatusOfTheDeletionEnumSucceeded                       DeletionResponseStatusOfTheDeletionEnum = "SUCCEEDED"
	DeletionResponseStatusOfTheDeletionEnumKilled                          DeletionResponseStatusOfTheDeletionEnum = "KILLED"
	DeletionResponseStatusOfTheDeletionEnumFailed                          DeletionResponseStatusOfTheDeletionEnum = "FAILED"
	DeletionResponseStatusOfTheDeletionEnumRetry                           DeletionResponseStatusOfTheDeletionEnum = "RETRY"
)

func (e DeletionResponseStatusOfTheDeletionEnum) ToPointer() *DeletionResponseStatusOfTheDeletionEnum {
	return &e
}

func (e *DeletionResponseStatusOfTheDeletionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED_WAITING_FOR_CACHE_REMOVAL":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "KILLED":
		fallthrough
	case "FAILED":
		fallthrough
	case "RETRY":
		*e = DeletionResponseStatusOfTheDeletionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletionResponseStatusOfTheDeletionEnum: %v", v)
	}
}

type DeletionResponseObjectThatSBeingDeletedEnum string

const (
	DeletionResponseObjectThatSBeingDeletedEnumDataset DeletionResponseObjectThatSBeingDeletedEnum = "DATASET"
	DeletionResponseObjectThatSBeingDeletedEnumModel   DeletionResponseObjectThatSBeingDeletedEnum = "MODEL"
)

func (e DeletionResponseObjectThatSBeingDeletedEnum) ToPointer() *DeletionResponseObjectThatSBeingDeletedEnum {
	return &e
}

func (e *DeletionResponseObjectThatSBeingDeletedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATASET":
		fallthrough
	case "MODEL":
		*e = DeletionResponseObjectThatSBeingDeletedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeletionResponseObjectThatSBeingDeletedEnum: %v", v)
	}
}

// DeletionResponse - Success
type DeletionResponse struct {
	DeletedObjectID *string                                      `json:"deletedObjectId,omitempty"`
	ID              *string                                      `json:"id,omitempty"`
	Message         *string                                      `json:"message,omitempty"`
	Object          *string                                      `json:"object,omitempty"`
	OrganizationID  *string                                      `json:"organizationId,omitempty"`
	Progress        *float64                                     `json:"progress,omitempty"`
	Status          *DeletionResponseStatusOfTheDeletionEnum     `json:"status,omitempty"`
	Type            *DeletionResponseObjectThatSBeingDeletedEnum `json:"type,omitempty"`
}
