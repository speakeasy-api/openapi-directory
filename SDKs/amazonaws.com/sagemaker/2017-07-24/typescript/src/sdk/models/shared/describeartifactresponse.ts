/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ArtifactSource } from "./artifactsource";
import { MetadataProperties } from "./metadataproperties";
import { UserContext } from "./usercontext";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeArtifactResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ArtifactArn" })
  artifactArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ArtifactName" })
  artifactName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ArtifactType" })
  artifactType?: string;

  /**
   * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBy" })
  @Type(() => UserContext)
  createdBy?: UserContext;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  /**
   * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedBy" })
  @Type(() => UserContext)
  lastModifiedBy?: UserContext;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LineageGroupArn" })
  lineageGroupArn?: string;

  /**
   * Metadata properties of the tracking entity, trial, or trial component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetadataProperties" })
  @Type(() => MetadataProperties)
  metadataProperties?: MetadataProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "Properties" })
  properties?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Source" })
  @Type(() => ArtifactSource)
  source?: ArtifactSource;
}
