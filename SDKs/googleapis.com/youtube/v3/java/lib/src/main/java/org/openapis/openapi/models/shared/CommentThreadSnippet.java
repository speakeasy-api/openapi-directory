/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CommentThreadSnippet - Basic details about a comment thread.
 */
public class CommentThreadSnippet {
    /**
     * Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canReply")
    public Boolean canReply;
    public CommentThreadSnippet withCanReply(Boolean canReply) {
        this.canReply = canReply;
        return this;
    }
    
    /**
     * The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    public String channelId;
    public CommentThreadSnippet withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * Whether the thread (and therefore all its comments) is visible to all YouTube users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPublic")
    public Boolean isPublic;
    public CommentThreadSnippet withIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }
    
    /**
     * A *comment* represents a single YouTube comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topLevelComment")
    public Comment topLevelComment;
    public CommentThreadSnippet withTopLevelComment(Comment topLevelComment) {
        this.topLevelComment = topLevelComment;
        return this;
    }
    
    /**
     * The total number of replies (not including the top level comment).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalReplyCount")
    public Long totalReplyCount;
    public CommentThreadSnippet withTotalReplyCount(Long totalReplyCount) {
        this.totalReplyCount = totalReplyCount;
        return this;
    }
    
    /**
     * The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoId")
    public String videoId;
    public CommentThreadSnippet withVideoId(String videoId) {
        this.videoId = videoId;
        return this;
    }
    
}
