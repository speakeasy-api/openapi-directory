// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RegriiSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RegriiRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Regitration No
	Regno string `json:"regno"`
	// SRO Name
	SroID string `json:"sro_id"`
	// Year
	Yr string `json:"yr"`
}

// RegriiRequestBodyFormatEnum - The format of the certificate in response.
type RegriiRequestBodyFormatEnum string

const (
	RegriiRequestBodyFormatEnumPdf RegriiRequestBodyFormatEnum = "pdf"
)

func (e *RegriiRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = RegriiRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegriiRequestBodyFormatEnum: %s", s)
	}
}

// RegriiRequestBody - Request format
type RegriiRequestBody struct {
	CertificateParameters *RegriiRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema           `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RegriiRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Regrii504ApplicationJSONErrorEnum string

const (
	Regrii504ApplicationJSONErrorEnumGatewayTimeout Regrii504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Regrii504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Regrii504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii504ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii504ApplicationJSONErrorDescriptionEnum string

const (
	Regrii504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Regrii504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Regrii504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Regrii504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii504ApplicationJSON - Gateway timeout
type Regrii504ApplicationJSON struct {
	Error            *Regrii504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii503ApplicationJSONErrorEnum string

const (
	Regrii503ApplicationJSONErrorEnumServiceUnavailable Regrii503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Regrii503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Regrii503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii503ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii503ApplicationJSONErrorDescriptionEnum string

const (
	Regrii503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Regrii503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Regrii503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Regrii503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii503ApplicationJSON - Service unavailable
type Regrii503ApplicationJSON struct {
	Error            *Regrii503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii502ApplicationJSONErrorEnum string

const (
	Regrii502ApplicationJSONErrorEnumBadGatewy Regrii502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Regrii502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Regrii502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii502ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii502ApplicationJSONErrorDescriptionEnum string

const (
	Regrii502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Regrii502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Regrii502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Regrii502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii502ApplicationJSON - Bad gateway
type Regrii502ApplicationJSON struct {
	Error            *Regrii502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii500ApplicationJSONErrorEnum string

const (
	Regrii500ApplicationJSONErrorEnumInternalServerError Regrii500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Regrii500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Regrii500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii500ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii500ApplicationJSONErrorDescriptionEnum string

const (
	Regrii500ApplicationJSONErrorDescriptionEnumInternalServerError Regrii500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Regrii500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Regrii500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii500ApplicationJSON - Internal server error
type Regrii500ApplicationJSON struct {
	Error            *Regrii500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii404ApplicationJSONErrorEnum string

const (
	Regrii404ApplicationJSONErrorEnumRecordNotFound Regrii404ApplicationJSONErrorEnum = "record_not_found"
	Regrii404ApplicationJSONErrorEnumURLNotFound    Regrii404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Regrii404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Regrii404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii404ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii404ApplicationJSONErrorDescriptionEnum string

const (
	Regrii404ApplicationJSONErrorDescriptionEnumNoRecordFound               Regrii404ApplicationJSONErrorDescriptionEnum = "No record found"
	Regrii404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Regrii404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Regrii404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Regrii404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii404ApplicationJSON - No record found
type Regrii404ApplicationJSON struct {
	Error            *Regrii404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii401ApplicationJSONErrorEnum string

const (
	Regrii401ApplicationJSONErrorEnumInvalidAuthentication Regrii401ApplicationJSONErrorEnum = "invalid_authentication"
	Regrii401ApplicationJSONErrorEnumInvalidAuthorization  Regrii401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Regrii401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Regrii401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii401ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii401ApplicationJSONErrorDescriptionEnum string

const (
	Regrii401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Regrii401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Regrii401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Regrii401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Regrii401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Regrii401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii401ApplicationJSON - Unauthorized access
type Regrii401ApplicationJSON struct {
	Error            *Regrii401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Regrii400ApplicationJSONErrorEnum string

const (
	Regrii400ApplicationJSONErrorEnumMissingParameter Regrii400ApplicationJSONErrorEnum = "missing_parameter"
	Regrii400ApplicationJSONErrorEnumInvalidParameter Regrii400ApplicationJSONErrorEnum = "invalid_parameter"
	Regrii400ApplicationJSONErrorEnumInvalidFormat    Regrii400ApplicationJSONErrorEnum = "invalid_format"
	Regrii400ApplicationJSONErrorEnumInvalidTxnid     Regrii400ApplicationJSONErrorEnum = "invalid_txnid"
	Regrii400ApplicationJSONErrorEnumInvalidConsentid Regrii400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Regrii400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Regrii400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii400ApplicationJSONErrorEnum: %s", s)
	}
}

type Regrii400ApplicationJSONErrorDescriptionEnum string

const (
	Regrii400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Regrii400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Regrii400ApplicationJSONErrorDescriptionEnumBadRequest                              Regrii400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Regrii400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Regrii400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Regrii400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Regrii400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Regrii400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Regrii400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Regrii400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Regrii400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Regrii400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Regrii400ApplicationJSON - Bad request
type Regrii400ApplicationJSON struct {
	Error            *Regrii400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Regrii400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RegriiResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Regrii400ApplicationJSONObject *Regrii400ApplicationJSON
	// Unauthorized access
	Regrii401ApplicationJSONObject *Regrii401ApplicationJSON
	// No record found
	Regrii404ApplicationJSONObject *Regrii404ApplicationJSON
	// Internal server error
	Regrii500ApplicationJSONObject *Regrii500ApplicationJSON
	// Bad gateway
	Regrii502ApplicationJSONObject *Regrii502ApplicationJSON
	// Service unavailable
	Regrii503ApplicationJSONObject *Regrii503ApplicationJSON
	// Gateway timeout
	Regrii504ApplicationJSONObject *Regrii504ApplicationJSON
}
