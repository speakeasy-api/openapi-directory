// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RunTimeAssessmentStatusEnum string

const (
	RunTimeAssessmentStatusEnumDataCollectionTaskToBeScheduled  RunTimeAssessmentStatusEnum = "dataCollectionTaskToBeScheduled"
	RunTimeAssessmentStatusEnumDataCollectionTaskScheduled      RunTimeAssessmentStatusEnum = "dataCollectionTaskScheduled"
	RunTimeAssessmentStatusEnumDataCollectionTaskStarted        RunTimeAssessmentStatusEnum = "dataCollectionTaskStarted"
	RunTimeAssessmentStatusEnumDataCollectionTaskStopped        RunTimeAssessmentStatusEnum = "dataCollectionTaskStopped"
	RunTimeAssessmentStatusEnumDataCollectionTaskSuccess        RunTimeAssessmentStatusEnum = "dataCollectionTaskSuccess"
	RunTimeAssessmentStatusEnumDataCollectionTaskFailed         RunTimeAssessmentStatusEnum = "dataCollectionTaskFailed"
	RunTimeAssessmentStatusEnumDataCollectionTaskPartialSuccess RunTimeAssessmentStatusEnum = "dataCollectionTaskPartialSuccess"
)

func (e RunTimeAssessmentStatusEnum) ToPointer() *RunTimeAssessmentStatusEnum {
	return &e
}

func (e *RunTimeAssessmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dataCollectionTaskToBeScheduled":
		fallthrough
	case "dataCollectionTaskScheduled":
		fallthrough
	case "dataCollectionTaskStarted":
		fallthrough
	case "dataCollectionTaskStopped":
		fallthrough
	case "dataCollectionTaskSuccess":
		fallthrough
	case "dataCollectionTaskFailed":
		fallthrough
	case "dataCollectionTaskPartialSuccess":
		*e = RunTimeAssessmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunTimeAssessmentStatusEnum: %v", v)
	}
}
