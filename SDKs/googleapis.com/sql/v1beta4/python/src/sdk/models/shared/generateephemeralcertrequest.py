"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GenerateEphemeralCertRequest:
    r"""Ephemeral certificate creation request."""
    
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_token'), 'exclude': lambda f: f is None }})
    r"""Optional. Access token to include in the signed certificate."""  
    public_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_key'), 'exclude': lambda f: f is None }})
    r"""PEM encoded public key to include in the signed certificate."""  
    read_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Optional snapshot read timestamp to trade freshness for performance."""  
    valid_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validDuration'), 'exclude': lambda f: f is None }})
    r"""Optional. If set, it will contain the cert valid duration."""  
    