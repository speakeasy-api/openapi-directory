// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DpicrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DpicrRequestBodyCertificateParameters struct {
	// CERTIFICATE NO
	CertNo string `json:"CERT_NO"`
	// Full name
	FullName string `json:"FullName"`
}

// DpicrRequestBodyFormatEnum - The format of the certificate in response.
type DpicrRequestBodyFormatEnum string

const (
	DpicrRequestBodyFormatEnumPdf DpicrRequestBodyFormatEnum = "pdf"
)

func (e DpicrRequestBodyFormatEnum) ToPointer() *DpicrRequestBodyFormatEnum {
	return &e
}

func (e *DpicrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DpicrRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DpicrRequestBodyFormatEnum: %v", v)
	}
}

// DpicrRequestBody - Request format
type DpicrRequestBody struct {
	CertificateParameters *DpicrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DpicrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dpicr504ApplicationJSONErrorEnum string

const (
	Dpicr504ApplicationJSONErrorEnumGatewayTimeout Dpicr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dpicr504ApplicationJSONErrorEnum) ToPointer() *Dpicr504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dpicr504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr504ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dpicr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dpicr504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dpicr504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr504ApplicationJSON - Gateway timeout
type Dpicr504ApplicationJSON struct {
	Error            *Dpicr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr503ApplicationJSONErrorEnum string

const (
	Dpicr503ApplicationJSONErrorEnumServiceUnavailable Dpicr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dpicr503ApplicationJSONErrorEnum) ToPointer() *Dpicr503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dpicr503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr503ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dpicr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dpicr503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dpicr503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr503ApplicationJSON - Service unavailable
type Dpicr503ApplicationJSON struct {
	Error            *Dpicr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr502ApplicationJSONErrorEnum string

const (
	Dpicr502ApplicationJSONErrorEnumBadGatewy Dpicr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dpicr502ApplicationJSONErrorEnum) ToPointer() *Dpicr502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dpicr502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr502ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dpicr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dpicr502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dpicr502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr502ApplicationJSON - Bad gateway
type Dpicr502ApplicationJSON struct {
	Error            *Dpicr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr500ApplicationJSONErrorEnum string

const (
	Dpicr500ApplicationJSONErrorEnumInternalServerError Dpicr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dpicr500ApplicationJSONErrorEnum) ToPointer() *Dpicr500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dpicr500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr500ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr500ApplicationJSONErrorDescriptionEnumInternalServerError Dpicr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dpicr500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dpicr500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr500ApplicationJSON - Internal server error
type Dpicr500ApplicationJSON struct {
	Error            *Dpicr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr404ApplicationJSONErrorEnum string

const (
	Dpicr404ApplicationJSONErrorEnumRecordNotFound Dpicr404ApplicationJSONErrorEnum = "record_not_found"
	Dpicr404ApplicationJSONErrorEnumURLNotFound    Dpicr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dpicr404ApplicationJSONErrorEnum) ToPointer() *Dpicr404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dpicr404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr404ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dpicr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dpicr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dpicr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dpicr404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dpicr404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr404ApplicationJSON - No record found
type Dpicr404ApplicationJSON struct {
	Error            *Dpicr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr401ApplicationJSONErrorEnum string

const (
	Dpicr401ApplicationJSONErrorEnumInvalidAuthentication Dpicr401ApplicationJSONErrorEnum = "invalid_authentication"
	Dpicr401ApplicationJSONErrorEnumInvalidAuthorization  Dpicr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dpicr401ApplicationJSONErrorEnum) ToPointer() *Dpicr401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dpicr401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr401ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dpicr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dpicr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dpicr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dpicr401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dpicr401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr401ApplicationJSON - Unauthorized access
type Dpicr401ApplicationJSON struct {
	Error            *Dpicr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpicr400ApplicationJSONErrorEnum string

const (
	Dpicr400ApplicationJSONErrorEnumMissingParameter Dpicr400ApplicationJSONErrorEnum = "missing_parameter"
	Dpicr400ApplicationJSONErrorEnumInvalidParameter Dpicr400ApplicationJSONErrorEnum = "invalid_parameter"
	Dpicr400ApplicationJSONErrorEnumInvalidFormat    Dpicr400ApplicationJSONErrorEnum = "invalid_format"
	Dpicr400ApplicationJSONErrorEnumInvalidTxnid     Dpicr400ApplicationJSONErrorEnum = "invalid_txnid"
	Dpicr400ApplicationJSONErrorEnumInvalidConsentid Dpicr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dpicr400ApplicationJSONErrorEnum) ToPointer() *Dpicr400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dpicr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dpicr400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dpicr400ApplicationJSONErrorDescriptionEnum string

const (
	Dpicr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dpicr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dpicr400ApplicationJSONErrorDescriptionEnumBadRequest                              Dpicr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dpicr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dpicr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dpicr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dpicr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dpicr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dpicr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dpicr400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dpicr400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dpicr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dpicr400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpicr400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dpicr400ApplicationJSON - Bad request
type Dpicr400ApplicationJSON struct {
	Error            *Dpicr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpicr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DpicrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dpicr400ApplicationJSONObject *Dpicr400ApplicationJSON
	// Unauthorized access
	Dpicr401ApplicationJSONObject *Dpicr401ApplicationJSON
	// No record found
	Dpicr404ApplicationJSONObject *Dpicr404ApplicationJSON
	// Internal server error
	Dpicr500ApplicationJSONObject *Dpicr500ApplicationJSON
	// Bad gateway
	Dpicr502ApplicationJSONObject *Dpicr502ApplicationJSON
	// Service unavailable
	Dpicr503ApplicationJSONObject *Dpicr503ApplicationJSON
	// Gateway timeout
	Dpicr504ApplicationJSONObject *Dpicr504ApplicationJSON
}
