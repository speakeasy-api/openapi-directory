<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class OnDemandPromotions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a promotion to an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionResponse
     */
	public function createVodPromotion(
        \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/promotions', \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVodPromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPromotion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandPromotion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a promotion from an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionResponse
     */
	public function deleteVodPromotion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVodPromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific promotion on an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionResponse
     */
	public function getVodPromotion(
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}', \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPromotion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandPromotion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the codes of a promotion on an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesResponse
     */
	public function getVodPromotionCodes(
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes', \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionCodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promocode+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPromotionCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandPromotionCode', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promocode+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the promotions on an On Demand page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsResponse
     */
	public function getVodPromotions(
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ondemand/pages/{ondemand_id}/promotions', \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVodPromotionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onDemandPromotion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnDemandPromotion', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.ondemand.promotion+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}