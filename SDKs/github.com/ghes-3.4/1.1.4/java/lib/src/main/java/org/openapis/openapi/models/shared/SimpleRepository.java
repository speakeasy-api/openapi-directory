/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SimpleRepository - A GitHub repository.
 */
public class SimpleRepository {
    /**
     * A template for the API URL to download the repository as an archive.
     */
    @JsonProperty("archive_url")
    public String archiveUrl;

    public SimpleRepository withArchiveUrl(String archiveUrl) {
        this.archiveUrl = archiveUrl;
        return this;
    }
    
    /**
     * A template for the API URL to list the available assignees for issues in the repository.
     */
    @JsonProperty("assignees_url")
    public String assigneesUrl;

    public SimpleRepository withAssigneesUrl(String assigneesUrl) {
        this.assigneesUrl = assigneesUrl;
        return this;
    }
    
    /**
     * A template for the API URL to create or retrieve a raw Git blob in the repository.
     */
    @JsonProperty("blobs_url")
    public String blobsUrl;

    public SimpleRepository withBlobsUrl(String blobsUrl) {
        this.blobsUrl = blobsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about branches in the repository.
     */
    @JsonProperty("branches_url")
    public String branchesUrl;

    public SimpleRepository withBranchesUrl(String branchesUrl) {
        this.branchesUrl = branchesUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about collaborators of the repository.
     */
    @JsonProperty("collaborators_url")
    public String collaboratorsUrl;

    public SimpleRepository withCollaboratorsUrl(String collaboratorsUrl) {
        this.collaboratorsUrl = collaboratorsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about comments on the repository.
     */
    @JsonProperty("comments_url")
    public String commentsUrl;

    public SimpleRepository withCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about commits on the repository.
     */
    @JsonProperty("commits_url")
    public String commitsUrl;

    public SimpleRepository withCommitsUrl(String commitsUrl) {
        this.commitsUrl = commitsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to compare two commits or refs.
     */
    @JsonProperty("compare_url")
    public String compareUrl;

    public SimpleRepository withCompareUrl(String compareUrl) {
        this.compareUrl = compareUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get the contents of the repository.
     */
    @JsonProperty("contents_url")
    public String contentsUrl;

    public SimpleRepository withContentsUrl(String contentsUrl) {
        this.contentsUrl = contentsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to list the contributors to the repository.
     */
    @JsonProperty("contributors_url")
    public String contributorsUrl;

    public SimpleRepository withContributorsUrl(String contributorsUrl) {
        this.contributorsUrl = contributorsUrl;
        return this;
    }
    
    /**
     * The API URL to list the deployments of the repository.
     */
    @JsonProperty("deployments_url")
    public String deploymentsUrl;

    public SimpleRepository withDeploymentsUrl(String deploymentsUrl) {
        this.deploymentsUrl = deploymentsUrl;
        return this;
    }
    
    /**
     * The repository description.
     */
    @JsonProperty("description")
    public String description;

    public SimpleRepository withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The API URL to list the downloads on the repository.
     */
    @JsonProperty("downloads_url")
    public String downloadsUrl;

    public SimpleRepository withDownloadsUrl(String downloadsUrl) {
        this.downloadsUrl = downloadsUrl;
        return this;
    }
    
    /**
     * The API URL to list the events of the repository.
     */
    @JsonProperty("events_url")
    public String eventsUrl;

    public SimpleRepository withEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
        return this;
    }
    
    /**
     * Whether the repository is a fork.
     */
    @JsonProperty("fork")
    public Boolean fork;

    public SimpleRepository withFork(Boolean fork) {
        this.fork = fork;
        return this;
    }
    
    /**
     * The API URL to list the forks of the repository.
     */
    @JsonProperty("forks_url")
    public String forksUrl;

    public SimpleRepository withForksUrl(String forksUrl) {
        this.forksUrl = forksUrl;
        return this;
    }
    
    /**
     * The full, globally unique, name of the repository.
     */
    @JsonProperty("full_name")
    public String fullName;

    public SimpleRepository withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    /**
     * A template for the API URL to get information about Git commits of the repository.
     */
    @JsonProperty("git_commits_url")
    public String gitCommitsUrl;

    public SimpleRepository withGitCommitsUrl(String gitCommitsUrl) {
        this.gitCommitsUrl = gitCommitsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about Git refs of the repository.
     */
    @JsonProperty("git_refs_url")
    public String gitRefsUrl;

    public SimpleRepository withGitRefsUrl(String gitRefsUrl) {
        this.gitRefsUrl = gitRefsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about Git tags of the repository.
     */
    @JsonProperty("git_tags_url")
    public String gitTagsUrl;

    public SimpleRepository withGitTagsUrl(String gitTagsUrl) {
        this.gitTagsUrl = gitTagsUrl;
        return this;
    }
    
    /**
     * The API URL to list the hooks on the repository.
     */
    @JsonProperty("hooks_url")
    public String hooksUrl;

    public SimpleRepository withHooksUrl(String hooksUrl) {
        this.hooksUrl = hooksUrl;
        return this;
    }
    
    /**
     * The URL to view the repository on GitHub.com.
     */
    @JsonProperty("html_url")
    public String htmlUrl;

    public SimpleRepository withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * A unique identifier of the repository.
     */
    @JsonProperty("id")
    public Long id;

    public SimpleRepository withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * A template for the API URL to get information about issue comments on the repository.
     */
    @JsonProperty("issue_comment_url")
    public String issueCommentUrl;

    public SimpleRepository withIssueCommentUrl(String issueCommentUrl) {
        this.issueCommentUrl = issueCommentUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about issue events on the repository.
     */
    @JsonProperty("issue_events_url")
    public String issueEventsUrl;

    public SimpleRepository withIssueEventsUrl(String issueEventsUrl) {
        this.issueEventsUrl = issueEventsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about issues on the repository.
     */
    @JsonProperty("issues_url")
    public String issuesUrl;

    public SimpleRepository withIssuesUrl(String issuesUrl) {
        this.issuesUrl = issuesUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about deploy keys on the repository.
     */
    @JsonProperty("keys_url")
    public String keysUrl;

    public SimpleRepository withKeysUrl(String keysUrl) {
        this.keysUrl = keysUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about labels of the repository.
     */
    @JsonProperty("labels_url")
    public String labelsUrl;

    public SimpleRepository withLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
        return this;
    }
    
    /**
     * The API URL to get information about the languages of the repository.
     */
    @JsonProperty("languages_url")
    public String languagesUrl;

    public SimpleRepository withLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
        return this;
    }
    
    /**
     * The API URL to merge branches in the repository.
     */
    @JsonProperty("merges_url")
    public String mergesUrl;

    public SimpleRepository withMergesUrl(String mergesUrl) {
        this.mergesUrl = mergesUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about milestones of the repository.
     */
    @JsonProperty("milestones_url")
    public String milestonesUrl;

    public SimpleRepository withMilestonesUrl(String milestonesUrl) {
        this.milestonesUrl = milestonesUrl;
        return this;
    }
    
    /**
     * The name of the repository.
     */
    @JsonProperty("name")
    public String name;

    public SimpleRepository withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The GraphQL identifier of the repository.
     */
    @JsonProperty("node_id")
    public String nodeId;

    public SimpleRepository withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * A template for the API URL to get information about notifications on the repository.
     */
    @JsonProperty("notifications_url")
    public String notificationsUrl;

    public SimpleRepository withNotificationsUrl(String notificationsUrl) {
        this.notificationsUrl = notificationsUrl;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonProperty("owner")
    public SimpleUser owner;

    public SimpleRepository withOwner(SimpleUser owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Whether the repository is private.
     */
    @JsonProperty("private")
    public Boolean private_;

    public SimpleRepository withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    /**
     * A template for the API URL to get information about pull requests on the repository.
     */
    @JsonProperty("pulls_url")
    public String pullsUrl;

    public SimpleRepository withPullsUrl(String pullsUrl) {
        this.pullsUrl = pullsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about releases on the repository.
     */
    @JsonProperty("releases_url")
    public String releasesUrl;

    public SimpleRepository withReleasesUrl(String releasesUrl) {
        this.releasesUrl = releasesUrl;
        return this;
    }
    
    /**
     * The API URL to list the stargazers on the repository.
     */
    @JsonProperty("stargazers_url")
    public String stargazersUrl;

    public SimpleRepository withStargazersUrl(String stargazersUrl) {
        this.stargazersUrl = stargazersUrl;
        return this;
    }
    
    /**
     * A template for the API URL to get information about statuses of a commit.
     */
    @JsonProperty("statuses_url")
    public String statusesUrl;

    public SimpleRepository withStatusesUrl(String statusesUrl) {
        this.statusesUrl = statusesUrl;
        return this;
    }
    
    /**
     * The API URL to list the subscribers on the repository.
     */
    @JsonProperty("subscribers_url")
    public String subscribersUrl;

    public SimpleRepository withSubscribersUrl(String subscribersUrl) {
        this.subscribersUrl = subscribersUrl;
        return this;
    }
    
    /**
     * The API URL to subscribe to notifications for this repository.
     */
    @JsonProperty("subscription_url")
    public String subscriptionUrl;

    public SimpleRepository withSubscriptionUrl(String subscriptionUrl) {
        this.subscriptionUrl = subscriptionUrl;
        return this;
    }
    
    /**
     * The API URL to get information about tags on the repository.
     */
    @JsonProperty("tags_url")
    public String tagsUrl;

    public SimpleRepository withTagsUrl(String tagsUrl) {
        this.tagsUrl = tagsUrl;
        return this;
    }
    
    /**
     * The API URL to list the teams on the repository.
     */
    @JsonProperty("teams_url")
    public String teamsUrl;

    public SimpleRepository withTeamsUrl(String teamsUrl) {
        this.teamsUrl = teamsUrl;
        return this;
    }
    
    /**
     * A template for the API URL to create or retrieve a raw Git tree of the repository.
     */
    @JsonProperty("trees_url")
    public String treesUrl;

    public SimpleRepository withTreesUrl(String treesUrl) {
        this.treesUrl = treesUrl;
        return this;
    }
    
    /**
     * The URL to get more information about the repository from the GitHub API.
     */
    @JsonProperty("url")
    public String url;

    public SimpleRepository withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public SimpleRepository(@JsonProperty("archive_url") String archiveUrl, @JsonProperty("assignees_url") String assigneesUrl, @JsonProperty("blobs_url") String blobsUrl, @JsonProperty("branches_url") String branchesUrl, @JsonProperty("collaborators_url") String collaboratorsUrl, @JsonProperty("comments_url") String commentsUrl, @JsonProperty("commits_url") String commitsUrl, @JsonProperty("compare_url") String compareUrl, @JsonProperty("contents_url") String contentsUrl, @JsonProperty("contributors_url") String contributorsUrl, @JsonProperty("deployments_url") String deploymentsUrl, @JsonProperty("description") String description, @JsonProperty("downloads_url") String downloadsUrl, @JsonProperty("events_url") String eventsUrl, @JsonProperty("fork") Boolean fork, @JsonProperty("forks_url") String forksUrl, @JsonProperty("full_name") String fullName, @JsonProperty("git_commits_url") String gitCommitsUrl, @JsonProperty("git_refs_url") String gitRefsUrl, @JsonProperty("git_tags_url") String gitTagsUrl, @JsonProperty("hooks_url") String hooksUrl, @JsonProperty("html_url") String htmlUrl, @JsonProperty("id") Long id, @JsonProperty("issue_comment_url") String issueCommentUrl, @JsonProperty("issue_events_url") String issueEventsUrl, @JsonProperty("issues_url") String issuesUrl, @JsonProperty("keys_url") String keysUrl, @JsonProperty("labels_url") String labelsUrl, @JsonProperty("languages_url") String languagesUrl, @JsonProperty("merges_url") String mergesUrl, @JsonProperty("milestones_url") String milestonesUrl, @JsonProperty("name") String name, @JsonProperty("node_id") String nodeId, @JsonProperty("notifications_url") String notificationsUrl, @JsonProperty("owner") SimpleUser owner, @JsonProperty("private") Boolean private_, @JsonProperty("pulls_url") String pullsUrl, @JsonProperty("releases_url") String releasesUrl, @JsonProperty("stargazers_url") String stargazersUrl, @JsonProperty("statuses_url") String statusesUrl, @JsonProperty("subscribers_url") String subscribersUrl, @JsonProperty("subscription_url") String subscriptionUrl, @JsonProperty("tags_url") String tagsUrl, @JsonProperty("teams_url") String teamsUrl, @JsonProperty("trees_url") String treesUrl, @JsonProperty("url") String url) {
        this.archiveUrl = archiveUrl;
        this.assigneesUrl = assigneesUrl;
        this.blobsUrl = blobsUrl;
        this.branchesUrl = branchesUrl;
        this.collaboratorsUrl = collaboratorsUrl;
        this.commentsUrl = commentsUrl;
        this.commitsUrl = commitsUrl;
        this.compareUrl = compareUrl;
        this.contentsUrl = contentsUrl;
        this.contributorsUrl = contributorsUrl;
        this.deploymentsUrl = deploymentsUrl;
        this.description = description;
        this.downloadsUrl = downloadsUrl;
        this.eventsUrl = eventsUrl;
        this.fork = fork;
        this.forksUrl = forksUrl;
        this.fullName = fullName;
        this.gitCommitsUrl = gitCommitsUrl;
        this.gitRefsUrl = gitRefsUrl;
        this.gitTagsUrl = gitTagsUrl;
        this.hooksUrl = hooksUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.issueCommentUrl = issueCommentUrl;
        this.issueEventsUrl = issueEventsUrl;
        this.issuesUrl = issuesUrl;
        this.keysUrl = keysUrl;
        this.labelsUrl = labelsUrl;
        this.languagesUrl = languagesUrl;
        this.mergesUrl = mergesUrl;
        this.milestonesUrl = milestonesUrl;
        this.name = name;
        this.nodeId = nodeId;
        this.notificationsUrl = notificationsUrl;
        this.owner = owner;
        this.private_ = private_;
        this.pullsUrl = pullsUrl;
        this.releasesUrl = releasesUrl;
        this.stargazersUrl = stargazersUrl;
        this.statusesUrl = statusesUrl;
        this.subscribersUrl = subscribersUrl;
        this.subscriptionUrl = subscriptionUrl;
        this.tagsUrl = tagsUrl;
        this.teamsUrl = teamsUrl;
        this.treesUrl = treesUrl;
        this.url = url;
  }
}
