"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestBodyIpv4:
    r"""The IPv4 attributes of the trusted server being added"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The IPv4 address of the trusted server being added"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestBody:
    
    ipv4: CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestBodyIpv4 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4') }})
    r"""The IPv4 attributes of the trusted server being added"""  
    mac: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac') }})
    r"""The mac address of the trusted server being added"""  
    vlan: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan') }})
    r"""The VLAN of the trusted server being added. It must be between 1 and 4094"""  
    

@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSONIpv4:
    r"""IPv4 attributes of the trusted server."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IPv4 address of the trusted server."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON:
    r"""Successful operation"""
    
    ipv4: Optional[CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSONIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""IPv4 attributes of the trusted server."""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""Mac address of the trusted server."""  
    trusted_server_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustedServerId'), 'exclude': lambda f: f is None }})
    r"""ID of the trusted server."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Vlan ID of the trusted server."""  
    

@dataclasses.dataclass
class CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_201_application_json_object: Optional[CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    