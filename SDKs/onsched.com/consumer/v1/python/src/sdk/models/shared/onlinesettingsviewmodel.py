"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OnlineSettingsViewModel:
    
    availability_form: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityForm'), 'exclude': lambda f: f is None }})  
    book_ahead_unit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookAheadUnit'), 'exclude': lambda f: f is None }})  
    book_ahead_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookAheadValue'), 'exclude': lambda f: f is None }})  
    book_in_advance: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookInAdvance'), 'exclude': lambda f: f is None }})  
    booking_confirmation_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingConfirmationMessage'), 'exclude': lambda f: f is None }})  
    booking_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingMessage'), 'exclude': lambda f: f is None }})  
    booking_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingPolicy'), 'exclude': lambda f: f is None }})  
    booking_timer_mins: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingTimerMins'), 'exclude': lambda f: f is None }})  
    book_with_account: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookWithAccount'), 'exclude': lambda f: f is None }})  
    business_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('businessId'), 'exclude': lambda f: f is None }})  
    company_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyId'), 'exclude': lambda f: f is None }})  
    customer_bookings_per_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerBookingsPerDay'), 'exclude': lambda f: f is None }})  
    customer_verification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerVerification'), 'exclude': lambda f: f is None }})  
    default_service: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultService'), 'exclude': lambda f: f is None }})  
    default_to_customer_timezone: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultToCustomerTimezone'), 'exclude': lambda f: f is None }})  
    disable_authorization: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableAuthorization'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    enable_world_timezones: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableWorldTimezones'), 'exclude': lambda f: f is None }})  
    family_members_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('familyMembersEnabled'), 'exclude': lambda f: f is None }})  
    first_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstAvailable'), 'exclude': lambda f: f is None }})  
    form_flow: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFlow'), 'exclude': lambda f: f is None }})  
    hide_bread_crumb_nav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideBreadCrumbNav'), 'exclude': lambda f: f is None }})  
    hide_continue_booking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideContinueBooking'), 'exclude': lambda f: f is None }})  
    hide_location_nav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideLocationNav'), 'exclude': lambda f: f is None }})  
    hide_nav_bar: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideNavBar'), 'exclude': lambda f: f is None }})  
    hide_service_groups_nav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideServiceGroupsNav'), 'exclude': lambda f: f is None }})  
    hide_services_nav: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hideServicesNav'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    late_cancel_action: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lateCancelAction'), 'exclude': lambda f: f is None }})  
    late_cancel_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lateCancelHours'), 'exclude': lambda f: f is None }})  
    late_reschedule_action: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lateRescheduleAction'), 'exclude': lambda f: f is None }})  
    late_reschedule_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lateRescheduleHours'), 'exclude': lambda f: f is None }})  
    live_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveMode'), 'exclude': lambda f: f is None }})  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationId'), 'exclude': lambda f: f is None }})  
    object: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})  
    resource_any_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceAnyLabel'), 'exclude': lambda f: f is None }})  
    resource_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceLabel'), 'exclude': lambda f: f is None }})  
    resource_selection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceSelection'), 'exclude': lambda f: f is None }})  
    return_to_availability: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnToAvailability'), 'exclude': lambda f: f is None }})  
    return_to_service: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnToService'), 'exclude': lambda f: f is None }})  
    service_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceLabel'), 'exclude': lambda f: f is None }})  
    show_business_logo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showBusinessLogo'), 'exclude': lambda f: f is None }})  
    show_on_sched_logo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showOnSchedLogo'), 'exclude': lambda f: f is None }})  
    show_service_groups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showServiceGroups'), 'exclude': lambda f: f is None }})  
    