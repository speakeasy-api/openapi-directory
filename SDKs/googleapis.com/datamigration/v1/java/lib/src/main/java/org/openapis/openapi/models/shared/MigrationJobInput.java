/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MigrationJobInput - Represents a Database Migration Service migration job object.
 */
public class MigrationJobInput {
    /**
     * A conversion workspace's version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversionWorkspace")
    public ConversionWorkspaceInfo conversionWorkspace;

    public MigrationJobInput withConversionWorkspace(ConversionWorkspaceInfo conversionWorkspace) {
        this.conversionWorkspace = conversionWorkspace;
        return this;
    }
    
    /**
     * Required. The resource name (URI) of the destination connection profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    public String destination;

    public MigrationJobInput withDestination(String destination) {
        this.destination = destination;
        return this;
    }
    
    /**
     * A message defining the database engine and provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationDatabase")
    public DatabaseType destinationDatabase;

    public MigrationJobInput withDestinationDatabase(DatabaseType destinationDatabase) {
        this.destinationDatabase = destinationDatabase;
        return this;
    }
    
    /**
     * The migration job display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public MigrationJobInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Dump flags definition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dumpFlags")
    public DumpFlags dumpFlags;

    public MigrationJobInput withDumpFlags(DumpFlags dumpFlags) {
        this.dumpFlags = dumpFlags;
        return this;
    }
    
    /**
     * The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the "dump_flags" field are mutually exclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dumpPath")
    public String dumpPath;

    public MigrationJobInput withDumpPath(String dumpPath) {
        this.dumpPath = dumpPath;
        return this;
    }
    
    /**
     * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public Status error;

    public MigrationJobInput withError(Status error) {
        this.error = error;
        return this;
    }
    
    /**
     * This field can be used to select the entities to migrate as part of the migration job. It uses AIP-160 notation to select a subset of the entities configured on the associated conversion-workspace. This field should not be set on migration-jobs that are not associated with a conversion workspace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public String filter;

    public MigrationJobInput withFilter(String filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public MigrationJobInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public MigrationJobInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reverseSshConnectivity")
    public ReverseSshConnectivity reverseSshConnectivity;

    public MigrationJobInput withReverseSshConnectivity(ReverseSshConnectivity reverseSshConnectivity) {
        this.reverseSshConnectivity = reverseSshConnectivity;
        return this;
    }
    
    /**
     * Required. The resource name (URI) of the source connection profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;

    public MigrationJobInput withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * A message defining the database engine and provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceDatabase")
    public DatabaseType sourceDatabase;

    public MigrationJobInput withSourceDatabase(DatabaseType sourceDatabase) {
        this.sourceDatabase = sourceDatabase;
        return this;
    }
    
    /**
     * The current migration job state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public MigrationJobStateEnum state;

    public MigrationJobInput withState(MigrationJobStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("staticIpConnectivity")
    public java.util.Map<String, Object> staticIpConnectivity;

    public MigrationJobInput withStaticIpConnectivity(java.util.Map<String, Object> staticIpConnectivity) {
        this.staticIpConnectivity = staticIpConnectivity;
        return this;
    }
    
    /**
     * Required. The migration job type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public MigrationJobTypeEnum type;

    public MigrationJobInput withType(MigrationJobTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcPeeringConnectivity")
    public VpcPeeringConnectivity vpcPeeringConnectivity;

    public MigrationJobInput withVpcPeeringConnectivity(VpcPeeringConnectivity vpcPeeringConnectivity) {
        this.vpcPeeringConnectivity = vpcPeeringConnectivity;
        return this;
    }
    
    public MigrationJobInput(){}
}
