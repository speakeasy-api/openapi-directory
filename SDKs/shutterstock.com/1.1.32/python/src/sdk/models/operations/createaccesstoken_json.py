"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import oauthaccesstokenresponse as shared_oauthaccesstokenresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateAccessTokenApplicationJSONGrantTypeEnum(str, Enum):
    r"""Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants"""
    AUTHORIZATION_CODE = 'authorization_code'
    CLIENT_CREDENTIALS = 'client_credentials'
    REFRESH_TOKEN = 'refresh_token'

class CreateAccessTokenApplicationJSONRealmEnum(str, Enum):
    r"""User type to be authorized (usually 'customer')"""
    CUSTOMER = 'customer'
    CONTRIBUTOR = 'contributor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAccessTokenApplicationJSON:
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""Client ID (Consumer Key) of your application"""  
    grant_type: CreateAccessTokenApplicationJSONGrantTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_type') }})
    r"""Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }})
    r"""Client Secret (Consumer Secret) of your application"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Response code from the /oauth/authorize flow; required if grant_type=authorization_code"""  
    expires: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires'), 'exclude': lambda f: f is None }})
    r"""Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token"""  
    realm: Optional[CreateAccessTokenApplicationJSONRealmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('realm'), 'exclude': lambda f: f is None }})
    r"""User type to be authorized (usually 'customer')"""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }})
    r"""Pass this along with grant_type=refresh_token to get a fresh access token"""  
    

@dataclasses.dataclass
class CreateAccessTokenJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    oauth_access_token_response: Optional[shared_oauthaccesstokenresponse.OauthAccessTokenResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    