// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum - Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
type UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum string

const (
	UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnumBalanced     UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum = "balanced"
	UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnumConnectivity UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum = "connectivity"
	UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnumSecurity     UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum = "security"
)

func (e *UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "balanced":
		fallthrough
	case "connectivity":
		fallthrough
	case "security":
		*e = UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum: %s", s)
	}
}

// UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum - Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
type UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum string

const (
	UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnumDetection  UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum = "detection"
	UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnumDisabled   UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum = "disabled"
	UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnumPrevention UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum = "prevention"
)

func (e *UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "detection":
		fallthrough
	case "disabled":
		fallthrough
	case "prevention":
		*e = UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum: %s", s)
	}
}

// UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks - Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
type UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks struct {
	// list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)
	ExcludedCidr []string `json:"excludedCidr,omitempty"`
	// list of IP addresses or subnets being protected (required if 'useDefault' is false)
	IncludedCidr []string `json:"includedCidr,omitempty"`
	// true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved
	UseDefault *bool `json:"useDefault,omitempty"`
}

type UpdateNetworkSecurityIntrusionSettingsRequestBody struct {
	// Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
	IdsRulesets *UpdateNetworkSecurityIntrusionSettingsRequestBodyIdsRulesetsEnum `json:"idsRulesets,omitempty"`
	// Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
	Mode *UpdateNetworkSecurityIntrusionSettingsRequestBodyModeEnum `json:"mode,omitempty"`
	// Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
	ProtectedNetworks *UpdateNetworkSecurityIntrusionSettingsRequestBodyProtectedNetworks `json:"protectedNetworks,omitempty"`
}

type UpdateNetworkSecurityIntrusionSettingsRequest struct {
	RequestBody *UpdateNetworkSecurityIntrusionSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                             `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkSecurityIntrusionSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSecurityIntrusionSettings200ApplicationJSONObject map[string]interface{}
}
