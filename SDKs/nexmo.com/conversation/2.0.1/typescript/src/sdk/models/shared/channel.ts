/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChannelTypeEnum } from "./channeltypeenum";
import { Expose, Type } from "class-transformer";

/**
 * Connect to a VBC extension
 */
export class ChannelFrom5 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "extension" })
  extension: string;

  /**
   * The type of connection. Must be `vbc`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export enum ChannelFrom4ContentTypeEnum {
  AudioL16RateEqual8000 = "audio/l16;rate=8000",
  AudioL16RateEqual16000 = "audio/l16;rate=16000",
}

/**
 * Details of the Websocket you want to connect to
 */
export class ChannelFrom4Headers extends SpeakeasyBase {
  /**
   * This is an example header. You can provide any headers you may need
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer_id" })
  customerId?: string;
}

/**
 * Connect to a Websocket
 */
export class ChannelFrom4 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "content-type" })
  contentType: ChannelFrom4ContentTypeEnum;

  /**
   * Details of the Websocket you want to connect to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headers" })
  @Type(() => ChannelFrom4Headers)
  headers?: ChannelFrom4Headers;

  /**
   * The type of connection. Must be `websocket`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Connect to a SIP Endpoint
 */
export class ChannelFrom3 extends SpeakeasyBase {
  /**
   * The type of connection. Must be `sip`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  /**
   * The SIP URI to connect to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Connect to a Phone (PSTN) number
 */
export class ChannelFrom2 extends SpeakeasyBase {
  /**
   * The phone number to connect to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * The type of connection. Must be `phone`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Connect to an App User
 */
export class ChannelFrom1 extends SpeakeasyBase {
  /**
   * The type of connection. Must be `app`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  /**
   * The username to connect to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user: string;
}

export class ChannelLegIds extends SpeakeasyBase {
  /**
   * The id of the leg. rtc_id and call_id are leg id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leg_id" })
  legId?: string;
}

/**
 * Connect to a Phone (PSTN) number
 */
export class ChannelTo2 extends SpeakeasyBase {
  /**
   * Provide [DTMF digits](https://developer.nexmo.com/voice/voice-api/guides/dtmf) to send when the call is answered
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dtmfAnswer" })
  dtmfAnswer?: string;

  /**
   * The phone number to connect to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: string;

  /**
   * The type of connection. Must be `phone`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
 */
export class Channel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: any;

  /**
   * The id of the leg. rtc_id and call_id are leg id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leg_id" })
  legId?: string;

  /**
   * Leg ids associated with this Channel. The first item in the array represents the main active Leg. The second item, if exists, represents a screen-share Leg.
   */
  @SpeakeasyMetadata({ elemType: ChannelLegIds })
  @Expose({ name: "leg_ids" })
  @Type(() => ChannelLegIds)
  legIds?: ChannelLegIds[];

  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to?: any;

  /**
   * Channel type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ChannelTypeEnum;
}
