"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBodyAudienceANDCustomAttribute:
    
    comparison: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comparison'), 'exclude': lambda f: f is None }})  
    custom_attribute_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute_name'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBodyAudienceAND:
    
    custom_attribute: Optional[ScheduleAPITriggeredCanvasesRequestBodyAudienceANDCustomAttribute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attribute'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBodyAudience:
    
    and_: Optional[list[ScheduleAPITriggeredCanvasesRequestBodyAudienceAND]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AND'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBodyRecipients:
    
    canvas_entry_properties: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canvas_entry_properties'), 'exclude': lambda f: f is None }})  
    external_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_user_id'), 'exclude': lambda f: f is None }})  
    trigger_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger_properties'), 'exclude': lambda f: f is None }})  
    user_alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_alias'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBodySchedule:
    
    at_optimal_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('at_optimal_time'), 'exclude': lambda f: f is None }})  
    in_local_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_local_time'), 'exclude': lambda f: f is None }})  
    time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesRequestBody:
    
    audience: Optional[ScheduleAPITriggeredCanvasesRequestBodyAudience] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audience'), 'exclude': lambda f: f is None }})  
    broadcast: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('broadcast'), 'exclude': lambda f: f is None }})  
    canvas_entry_properties: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canvas_entry_properties'), 'exclude': lambda f: f is None }})  
    canvas_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canvas_id'), 'exclude': lambda f: f is None }})  
    recipients: Optional[list[ScheduleAPITriggeredCanvasesRequestBodyRecipients]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})  
    schedule: Optional[ScheduleAPITriggeredCanvasesRequestBodySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ScheduleAPITriggeredCanvasesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    