/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The pay codes' nominal code
 */
export class PayCodePayCodeNominalCode extends SpeakeasyBase {
  /**
   * The links' href
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@href" })
  atHref?: string;

  /**
   * The links' target type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@rel" })
  atRel?: string;

  /**
   * The links' title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@title" })
  atTitle?: string;
}

/**
 * The pay codes' region
 */
export enum PayCodePayCodeRegionEnum {
  NotSet = "NotSet",
  England = "England",
  Scotland = "Scotland",
  Wales = "Wales",
}

/**
 * The pay codes' territory
 */
export enum PayCodePayCodeTerritoryEnum {
  UnitedKingdom = "UnitedKingdom",
}

/**
 * The pay codes' type
 */
export enum PayCodePayCodeTypeEnum {
  NotSet = "NotSet",
  Payment = "Payment",
  Deduction = "Deduction",
}

export class PayCodePayCode extends SpeakeasyBase {
  /**
   * The pay codes' benefit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Benefit" })
  benefit?: boolean;

  /**
   * The pay codes' code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Code" })
  code?: string;

  /**
   * The pay codes' description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * The pay codes' effective date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The pay codes' meta data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetaData" })
  metaData?: Record<string, any>;

  /**
   * The pay codes' next revision date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextRevisionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nextRevisionDate?: Date;

  /**
   * The pay codes' niable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Niable" })
  niable?: boolean;

  /**
   * The pay codes' nominal code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NominalCode" })
  @Type(() => PayCodePayCodeNominalCode)
  nominalCode?: PayCodePayCodeNominalCode;

  /**
   * The pay codes' non arrestable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonArrestable" })
  nonArrestable?: boolean;

  /**
   * The pay codes' notional
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notional" })
  notional?: boolean;

  /**
   * The pay codes' readonly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Readonly" })
  readonly?: boolean;

  /**
   * The pay codes' region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Region" })
  region?: PayCodePayCodeRegionEnum;

  /**
   * The pay codes' revision
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Revision" })
  revision?: number;

  /**
   * The pay codes' taxable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Taxable" })
  taxable?: boolean;

  /**
   * The pay codes' territory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Territory" })
  territory?: PayCodePayCodeTerritoryEnum;

  /**
   * The pay codes' type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type?: PayCodePayCodeTypeEnum;
}

/**
 * The pay code object.
 */
export class PayCode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "PayCode" })
  @Type(() => PayCodePayCode)
  payCode?: PayCodePayCode;
}
