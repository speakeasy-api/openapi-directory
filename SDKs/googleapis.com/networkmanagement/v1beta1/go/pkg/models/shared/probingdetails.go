// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProbingDetailsAbortCauseEnum - The reason probing was aborted.
type ProbingDetailsAbortCauseEnum string

const (
	ProbingDetailsAbortCauseEnumProbingAbortCauseUnspecified ProbingDetailsAbortCauseEnum = "PROBING_ABORT_CAUSE_UNSPECIFIED"
	ProbingDetailsAbortCauseEnumPermissionDenied             ProbingDetailsAbortCauseEnum = "PERMISSION_DENIED"
	ProbingDetailsAbortCauseEnumNoSourceLocation             ProbingDetailsAbortCauseEnum = "NO_SOURCE_LOCATION"
)

func (e *ProbingDetailsAbortCauseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROBING_ABORT_CAUSE_UNSPECIFIED":
		fallthrough
	case "PERMISSION_DENIED":
		fallthrough
	case "NO_SOURCE_LOCATION":
		*e = ProbingDetailsAbortCauseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProbingDetailsAbortCauseEnum: %s", s)
	}
}

// ProbingDetailsResultEnum - The overall result of active probing.
type ProbingDetailsResultEnum string

const (
	ProbingDetailsResultEnumProbingResultUnspecified ProbingDetailsResultEnum = "PROBING_RESULT_UNSPECIFIED"
	ProbingDetailsResultEnumReachable                ProbingDetailsResultEnum = "REACHABLE"
	ProbingDetailsResultEnumUnreachable              ProbingDetailsResultEnum = "UNREACHABLE"
	ProbingDetailsResultEnumReachabilityInconsistent ProbingDetailsResultEnum = "REACHABILITY_INCONSISTENT"
	ProbingDetailsResultEnumUndetermined             ProbingDetailsResultEnum = "UNDETERMINED"
)

func (e *ProbingDetailsResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROBING_RESULT_UNSPECIFIED":
		fallthrough
	case "REACHABLE":
		fallthrough
	case "UNREACHABLE":
		fallthrough
	case "REACHABILITY_INCONSISTENT":
		fallthrough
	case "UNDETERMINED":
		*e = ProbingDetailsResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProbingDetailsResultEnum: %s", s)
	}
}

// ProbingDetails - Results of active probing from the last run of the test.
type ProbingDetails struct {
	// The reason probing was aborted.
	AbortCause *ProbingDetailsAbortCauseEnum `json:"abortCause,omitempty"`
	// Representation of a network edge location as per https://cloud.google.com/vpc/docs/edge-locations.
	DestinationEgressLocation *EdgeLocation `json:"destinationEgressLocation,omitempty"`
	// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
	EndpointInfo *EndpointInfo `json:"endpointInfo,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// Describes measured latency distribution.
	ProbingLatency *LatencyDistribution `json:"probingLatency,omitempty"`
	// The overall result of active probing.
	Result *ProbingDetailsResultEnum `json:"result,omitempty"`
	// Number of probes sent.
	SentProbeCount *int `json:"sentProbeCount,omitempty"`
	// Number of probes that reached the destination.
	SuccessfulProbeCount *int `json:"successfulProbeCount,omitempty"`
	// The time that reachability was assessed through active probing.
	VerifyTime *string `json:"verifyTime,omitempty"`
}
