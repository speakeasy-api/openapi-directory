"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CropProperties:
    r"""The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped."""
    
    angle: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('angle'), 'exclude': lambda f: f is None }})
    r"""The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets."""  
    offset_bottom: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetBottom'), 'exclude': lambda f: f is None }})
    r"""The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height."""  
    offset_left: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetLeft'), 'exclude': lambda f: f is None }})
    r"""The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width."""  
    offset_right: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetRight'), 'exclude': lambda f: f is None }})
    r"""The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width."""  
    offset_top: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offsetTop'), 'exclude': lambda f: f is None }})
    r"""The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height."""  
    