"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import mediaitemwrapped as shared_mediaitemwrapped
from datetime import date
from typing import Optional


@dataclasses.dataclass
class GetResourcesMediaJSONRequest:
    
    collection_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'collectionId', 'style': 'form', 'explode': False }})
    r"""Restrict filtering to media items in a specific collection."""  
    content_authored_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentAuthoredBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items authored before the provided day (RFC 3339, time ignored)."""  
    content_authored_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentAuthoredInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored)."""  
    content_authored_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentAuthoredSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items authored since the provided day (RFC 3339, time ignored)."""  
    content_published_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentPublishedBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items published before the provided day (RFC 3339, time ignored)."""  
    content_published_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentPublishedInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored)."""  
    content_published_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentPublishedSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items updated since the provided day (RFC 3339, time ignored)."""  
    content_reviewed_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentReviewedBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items reviewed before the provided day (RFC 3339, time ignored)."""  
    content_reviewed_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentReviewedInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored)."""  
    content_reviewed_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentReviewedSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items reviewed since the provided day (RFC 3339, time ignored)."""  
    content_updated_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentUpdatedBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items updated before the provided day (RFC 3339, time ignored)."""  
    content_updated_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentUpdatedInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored)."""  
    content_updated_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contentUpdatedSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items updated since the provided day (RFC 3339, time ignored)."""  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBy', 'style': 'form', 'explode': False }})
    r"""Find all media items containing the createdBy value."""  
    custom_thumbnail_url: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customThumbnailUrl', 'style': 'form', 'explode': False }})
    r"""Find all media items which have the provided customThumbnailUrl, case insensitive."""  
    custom_thumbnail_url_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customThumbnailUrlContains', 'style': 'form', 'explode': False }})
    r"""Find all media items which contain the provided partial customThumbnailUrl, case insensitive."""  
    date_content_authored: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateContentAuthored', 'style': 'form', 'explode': False }})
    r"""Find all media items authored on the provided day (RFC 3339, time ignored)."""  
    date_content_published: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateContentPublished', 'style': 'form', 'explode': False }})
    r"""Find all media items published on the provided day (RFC 3339, time ignored)."""  
    date_content_reviewed: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateContentReviewed', 'style': 'form', 'explode': False }})
    r"""Find all media items reviewed on the provided day (RFC 3339, time ignored)."""  
    date_content_updated: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateContentUpdated', 'style': 'form', 'explode': False }})
    r"""Find all media items updated on the provided day (RFC 3339, time ignored)."""  
    date_syndication_captured: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateSyndicationCaptured', 'style': 'form', 'explode': False }})
    r"""Find all media items syndicated on the provided day (RFC 3339, time ignored)."""  
    date_syndication_updated: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateSyndicationUpdated', 'style': 'form', 'explode': False }})
    r"""Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored)."""  
    description_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'descriptionContains', 'style': 'form', 'explode': False }})
    r"""Find all media items containing the provided partial description, case insensitive."""  
    hash: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hash', 'style': 'form', 'explode': False }})
    r"""Find all media items which match the provided hash, case insensitive."""  
    hash_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hashContains', 'style': 'form', 'explode': False }})
    r"""Find all media items which match the provided partial hash, case insensitive."""  
    language_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'languageId', 'style': 'form', 'explode': False }})
    r"""Find all media items written in the language specified by Id."""  
    language_iso_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'languageIsoCode', 'style': 'form', 'explode': False }})
    r"""Find all media items written in the language specified by 639-2 isoCode , case insensitive."""  
    language_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'languageName', 'style': 'form', 'explode': False }})
    r"""Find all media items written in the language specified by name, case insensitive."""  
    max: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max', 'style': 'form', 'explode': False }})
    r"""The maximum number of records to return"""  
    media_types: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mediaTypes', 'style': 'form', 'explode': False }})
    r"""Find all media items belonging to the specified media type[s]."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': False }})
    r"""Find all media items containing the provided name, case insensitive."""  
    name_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nameContains', 'style': 'form', 'explode': False }})
    r"""Find all media items containing the partial name, case insensitive."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': False }})
    r"""The offset of the records set to return for pagination."""  
    order: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': False }})
    r"""* The ascending or descending order."""  
    restrict_to_set: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'restrictToSet', 'style': 'form', 'explode': False }})
    r"""Find only media from within the supplied list of Ids."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': False }})
    r"""* Set of fields to sort the records by."""  
    source_acronym: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceAcronym', 'style': 'form', 'explode': False }})
    r"""Find all media items that belong to the source specified by acronym, case insensitive."""  
    source_acronym_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceAcronymContains', 'style': 'form', 'explode': False }})
    r"""Find all media items that belong to the source specified by partial acronym, case insensitive."""  
    source_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceId', 'style': 'form', 'explode': False }})
    r"""Find all media items that belong to the source specified by Id."""  
    source_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceName', 'style': 'form', 'explode': False }})
    r"""Find all media items that belong to the source specified by name, case insensitive."""  
    source_name_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceNameContains', 'style': 'form', 'explode': False }})
    r"""Find all media items that belong to the source specified by partial name, case insensitive."""  
    source_url: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceUrl', 'style': 'form', 'explode': False }})
    r"""Find all media items which have the provided sourceUrl, case insensitive."""  
    source_url_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceUrlContains', 'style': 'form', 'explode': False }})
    r"""Find all media items which contain the provided partial sourceUrl, case insensitive."""  
    syndication_captured_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationCapturedBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items authored before the provided day (RFC 3339, time ignored)."""  
    syndication_captured_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationCapturedInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored)."""  
    syndication_captured_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationCapturedSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items authored since the provided day (RFC 3339, time ignored)."""  
    syndication_updated_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationUpdatedBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items updated before the provided day, (RFC 3339, time ignored)."""  
    syndication_updated_in_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationUpdatedInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored)."""  
    syndication_updated_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationUpdatedSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items updated since the provided day, (RFC 3339, time ignored)."""  
    syndication_visible_before_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationVisibleBeforeDate', 'style': 'form', 'explode': False }})
    r"""Find all media items visible before the provided day, (RFC 3339, time ignored)."""  
    syndication_visible_in_range: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationVisibleInRange', 'style': 'form', 'explode': False }})
    r"""Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored)."""  
    syndication_visible_since_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syndicationVisibleSinceDate', 'style': 'form', 'explode': False }})
    r"""Find all media items visible since the provided day, (RFC 3339, time ignored)."""  
    tag_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagIds', 'style': 'form', 'explode': False }})
    r"""Find only media items tagged with the specified tag Ids."""  
    

@dataclasses.dataclass
class GetResourcesMediaJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    media_item_wrappeds: Optional[list[shared_mediaitemwrapped.MediaItemWrapped]] = dataclasses.field(default=None)
    r"""Returns the list of MediaItems matching the specified query parameters."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    