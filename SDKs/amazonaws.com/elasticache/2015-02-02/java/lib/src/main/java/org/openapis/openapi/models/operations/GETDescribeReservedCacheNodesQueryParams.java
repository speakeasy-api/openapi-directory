/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GETDescribeReservedCacheNodesQueryParams {
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Action")
    public GETDescribeReservedCacheNodesActionEnum action;
    public GETDescribeReservedCacheNodesQueryParams withAction(GETDescribeReservedCacheNodesActionEnum action) {
        this.action = action;
        return this;
    }
    
    /**
     * &lt;p&gt;The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion"&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion"&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=CacheNodeType")
    public String cacheNodeType;
    public GETDescribeReservedCacheNodesQueryParams withCacheNodeType(String cacheNodeType) {
        this.cacheNodeType = cacheNodeType;
        return this;
    }
    
    /**
     * &lt;p&gt;The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Duration")
    public String duration;
    public GETDescribeReservedCacheNodesQueryParams withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Marker")
    public String marker;
    public GETDescribeReservedCacheNodesQueryParams withMarker(String marker) {
        this.marker = marker;
        return this;
    }
    
    /**
     * &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MaxRecords")
    public Long maxRecords;
    public GETDescribeReservedCacheNodesQueryParams withMaxRecords(Long maxRecords) {
        this.maxRecords = maxRecords;
        return this;
    }
    
    /**
     * &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;"Light Utilization"|"Medium Utilization"|"Heavy Utilization"|"All Upfront"|"Partial Upfront"| "No Upfront"&lt;/code&gt; &lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=OfferingType")
    public String offeringType;
    public GETDescribeReservedCacheNodesQueryParams withOfferingType(String offeringType) {
        this.offeringType = offeringType;
        return this;
    }
    
    /**
     * The product description filter value. Use this parameter to show only those reservations matching the specified product description.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ProductDescription")
    public String productDescription;
    public GETDescribeReservedCacheNodesQueryParams withProductDescription(String productDescription) {
        this.productDescription = productDescription;
        return this;
    }
    
    /**
     * The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ReservedCacheNodeId")
    public String reservedCacheNodeId;
    public GETDescribeReservedCacheNodesQueryParams withReservedCacheNodeId(String reservedCacheNodeId) {
        this.reservedCacheNodeId = reservedCacheNodeId;
        return this;
    }
    
    /**
     * The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ReservedCacheNodesOfferingId")
    public String reservedCacheNodesOfferingId;
    public GETDescribeReservedCacheNodesQueryParams withReservedCacheNodesOfferingId(String reservedCacheNodesOfferingId) {
        this.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Version")
    public GETDescribeReservedCacheNodesVersionEnum version;
    public GETDescribeReservedCacheNodesQueryParams withVersion(GETDescribeReservedCacheNodesVersionEnum version) {
        this.version = version;
        return this;
    }
    
}
