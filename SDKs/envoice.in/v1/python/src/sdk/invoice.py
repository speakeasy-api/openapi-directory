"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Invoice:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def invoice_api_all(self, request: operations.InvoiceAPIAllRequest) -> operations.InvoiceAPIAllResponse:
        r"""Return all invoices for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/all'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.InvoiceAPIAllRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultInvoiceDetailsAPIModel])
                res.list_result_invoice_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultInvoiceDetailsAPIModel])
                res.list_result_invoice_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_change_status_form(self, request: operations.InvoiceAPIChangeStatusFormRequest) -> operations.InvoiceAPIChangeStatusFormResponse:
        r"""Change invoice status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "change_status_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIChangeStatusFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_form_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_form_200_text_json_boolean = out

        return res

    def invoice_api_change_status_json(self, request: operations.InvoiceAPIChangeStatusJSONRequest) -> operations.InvoiceAPIChangeStatusJSONResponse:
        r"""Change invoice status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "change_status_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIChangeStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_json_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_json_200_text_json_boolean = out

        return res

    def invoice_api_change_status_raw(self, request: operations.InvoiceAPIChangeStatusRawRequest) -> operations.InvoiceAPIChangeStatusRawResponse:
        r"""Change invoice status"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/changestatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIChangeStatusRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_raw_200_application_json_boolean = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.invoice_api_change_status_raw_200_text_json_boolean = out

        return res

    def invoice_api_delete_form(self, request: operations.InvoiceAPIDeleteFormRequest) -> operations.InvoiceAPIDeleteFormResponse:
        r"""Delete an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIDeleteFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_form_200_text_json_int32_integer = out

        return res

    def invoice_api_delete_json(self, request: operations.InvoiceAPIDeleteJSONRequest) -> operations.InvoiceAPIDeleteJSONResponse:
        r"""Delete an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIDeleteJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_json_200_text_json_int32_integer = out

        return res

    def invoice_api_delete_raw(self, request: operations.InvoiceAPIDeleteRawRequest) -> operations.InvoiceAPIDeleteRawResponse:
        r"""Delete an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/delete'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIDeleteRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_delete_raw_200_text_json_int32_integer = out

        return res

    def invoice_api_details(self, request: operations.InvoiceAPIDetailsRequest) -> operations.InvoiceAPIDetailsResponse:
        r"""Return invoice data"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/details'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.InvoiceAPIDetailsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_new_form(self, request: operations.InvoiceAPINewFormRequest) -> operations.InvoiceAPINewFormResponse:
        r"""Create an invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPINewFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_new_json(self, request: operations.InvoiceAPINewJSONRequest) -> operations.InvoiceAPINewJSONResponse:
        r"""Create an invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPINewJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_new_raw(self, request: operations.InvoiceAPINewRawRequest) -> operations.InvoiceAPINewRawResponse:
        r"""Create an invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/new'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPINewRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_pdf(self, request: operations.InvoiceAPIPdfRequest) -> operations.InvoiceAPIPdfResponse:
        r"""Return the PDF for the invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/pdf'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.InvoiceAPIPdfRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIPdfResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceURIAPIModel])
                res.invoice_uri_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceURIAPIModel])
                res.invoice_uri_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_send_to_accountant_form(self, request: operations.InvoiceAPISendToAccountantFormRequest) -> operations.InvoiceAPISendToAccountantFormResponse:
        r"""Send the provided invoice to the accountant"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoaccountant'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_invoice_to_accountant_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToAccountantFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_form_200_text_json_int32_integer = out

        return res

    def invoice_api_send_to_accountant_json(self, request: operations.InvoiceAPISendToAccountantJSONRequest) -> operations.InvoiceAPISendToAccountantJSONResponse:
        r"""Send the provided invoice to the accountant"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoaccountant'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_invoice_to_accountant_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToAccountantJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_json_200_text_json_int32_integer = out

        return res

    def invoice_api_send_to_accountant_raw(self, request: operations.InvoiceAPISendToAccountantRawRequest) -> operations.InvoiceAPISendToAccountantRawResponse:
        r"""Send the provided invoice to the accountant"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoaccountant'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToAccountantRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_accountant_raw_200_text_json_int32_integer = out

        return res

    def invoice_api_send_to_client_form(self, request: operations.InvoiceAPISendToClientFormRequest) -> operations.InvoiceAPISendToClientFormResponse:
        r"""Send the provided invoice to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_invoice_to_client_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToClientFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_form_200_text_json_int32_integer = out

        return res

    def invoice_api_send_to_client_json(self, request: operations.InvoiceAPISendToClientJSONRequest) -> operations.InvoiceAPISendToClientJSONResponse:
        r"""Send the provided invoice to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "send_invoice_to_client_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToClientJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_json_200_text_json_int32_integer = out

        return res

    def invoice_api_send_to_client_raw(self, request: operations.InvoiceAPISendToClientRawRequest) -> operations.InvoiceAPISendToClientRawResponse:
        r"""Send the provided invoice to the client"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/sendtoclient'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPISendToClientRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.invoice_api_send_to_client_raw_200_text_json_int32_integer = out

        return res

    def invoice_api_status(self, request: operations.InvoiceAPIStatusRequest) -> operations.InvoiceAPIStatusResponse:
        r"""Retrieve the status of the invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/status'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.InvoiceAPIStatusRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InvoiceAPIStatus200ApplicationJSONEnum])
                res.invoice_api_status_200_application_json_string_enum = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InvoiceAPIStatus200TextJSONEnum])
                res.invoice_api_status_200_text_json_string_enum = out

        return res

    def invoice_api_update_form(self, request: operations.InvoiceAPIUpdateFormRequest) -> operations.InvoiceAPIUpdateFormResponse:
        r"""Update an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_update_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIUpdateFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_update_json(self, request: operations.InvoiceAPIUpdateJSONRequest) -> operations.InvoiceAPIUpdateJSONResponse:
        r"""Update an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_update_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIUpdateJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_update_raw(self, request: operations.InvoiceAPIUpdateRawRequest) -> operations.InvoiceAPIUpdateRawResponse:
        r"""Update an existing invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/update'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIUpdateRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceFullDetailsAPIModel])
                res.invoice_full_details_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def invoice_api_uri(self, request: operations.InvoiceAPIURIRequest) -> operations.InvoiceAPIURIResponse:
        r"""Return the unique url to the client's invoice"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/uri'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.InvoiceAPIURIRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceAPIURIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceURIAPIModel])
                res.invoice_uri_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceURIAPIModel])
                res.invoice_uri_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_api_invoice_allcategories(self, request: operations.GetAPIInvoiceAllcategoriesRequest) -> operations.GetAPIInvoiceAllcategoriesResponse:
        r"""Return all invoice categories for the account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/allcategories'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAPIInvoiceAllcategoriesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIInvoiceAllcategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultInvoiceCategoryAPIModel])
                res.list_result_invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResultInvoiceCategoryAPIModel])
                res.list_result_invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_deletecategory_form(self, request: operations.PostAPIInvoiceDeletecategoryFormRequest) -> operations.PostAPIInvoiceDeletecategoryFormResponse:
        r"""Delete an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/deletecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_delete_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceDeletecategoryFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_form_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_form_200_text_json_int32_integer = out

        return res

    def post_api_invoice_deletecategory_json(self, request: operations.PostAPIInvoiceDeletecategoryJSONRequest) -> operations.PostAPIInvoiceDeletecategoryJSONResponse:
        r"""Delete an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/deletecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_delete_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceDeletecategoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_json_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_json_200_text_json_int32_integer = out

        return res

    def post_api_invoice_deletecategory_raw(self, request: operations.PostAPIInvoiceDeletecategoryRawRequest) -> operations.PostAPIInvoiceDeletecategoryRawResponse:
        r"""Delete an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/deletecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceDeletecategoryRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_raw_200_application_json_int32_integer = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.post_api_invoice_deletecategory_raw_200_text_json_int32_integer = out

        return res

    def post_api_invoice_newcategory_form(self, request: operations.PostAPIInvoiceNewcategoryFormRequest) -> operations.PostAPIInvoiceNewcategoryFormResponse:
        r"""Create an invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/newcategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_create_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceNewcategoryFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_newcategory_json(self, request: operations.PostAPIInvoiceNewcategoryJSONRequest) -> operations.PostAPIInvoiceNewcategoryJSONResponse:
        r"""Create an invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/newcategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_create_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceNewcategoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_newcategory_raw(self, request: operations.PostAPIInvoiceNewcategoryRawRequest) -> operations.PostAPIInvoiceNewcategoryRawResponse:
        r"""Create an invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/newcategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceNewcategoryRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_updatecategory_form(self, request: operations.PostAPIInvoiceUpdatecategoryFormRequest) -> operations.PostAPIInvoiceUpdatecategoryFormResponse:
        r"""Update an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/updatecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_update_api_model", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceUpdatecategoryFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_updatecategory_json(self, request: operations.PostAPIInvoiceUpdatecategoryJSONRequest) -> operations.PostAPIInvoiceUpdatecategoryJSONResponse:
        r"""Update an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/updatecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_category_update_api_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceUpdatecategoryJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def post_api_invoice_updatecategory_raw(self, request: operations.PostAPIInvoiceUpdatecategoryRawRequest) -> operations.PostAPIInvoiceUpdatecategoryRawResponse:
        r"""Update an existing invoice category"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/invoice/updatecategory'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIInvoiceUpdatecategoryRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceCategoryAPIModel])
                res.invoice_category_api_model = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    