/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ECSServiceRecommendationOption -  Describes the recommendation options for an Amazon ECS service. 
 */
public class ECSServiceRecommendationOption {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerRecommendations")
    public ContainerRecommendation[] containerRecommendations;
    public ECSServiceRecommendationOption withContainerRecommendations(ContainerRecommendation[] containerRecommendations) {
        this.containerRecommendations = containerRecommendations;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpu")
    public Long cpu;
    public ECSServiceRecommendationOption withCpu(Long cpu) {
        this.cpu = cpu;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory")
    public Long memory;
    public ECSServiceRecommendationOption withMemory(Long memory) {
        this.memory = memory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectedUtilizationMetrics")
    public ECSServiceProjectedUtilizationMetric[] projectedUtilizationMetrics;
    public ECSServiceRecommendationOption withProjectedUtilizationMetrics(ECSServiceProjectedUtilizationMetric[] projectedUtilizationMetrics) {
        this.projectedUtilizationMetrics = projectedUtilizationMetrics;
        return this;
    }
    
    /**
     * &lt;p&gt;Describes the savings opportunity for recommendations of a given resource type or for the recommendation option of an individual resource.&lt;/p&gt; &lt;p&gt;Savings opportunity represents the estimated monthly savings you can achieve by implementing a given Compute Optimizer recommendation.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Savings opportunity data requires that you opt in to Cost Explorer, as well as activate &lt;b&gt;Receive Amazon EC2 resource recommendations&lt;/b&gt; in the Cost Explorer preferences page. That creates a connection between Cost Explorer and Compute Optimizer. With this connection, Cost Explorer generates savings estimates considering the price of existing resources, the price of recommended resources, and historical usage data. Estimated monthly savings reflects the projected dollar savings associated with each of the recommendations generated. For more information, see &lt;a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-enable.html"&gt;Enabling Cost Explorer&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/cost-management/latest/userguide/ce-rightsizing.html"&gt;Optimizing your cost with Rightsizing Recommendations&lt;/a&gt; in the &lt;i&gt;Cost Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("savingsOpportunity")
    public SavingsOpportunity savingsOpportunity;
    public ECSServiceRecommendationOption withSavingsOpportunity(SavingsOpportunity savingsOpportunity) {
        this.savingsOpportunity = savingsOpportunity;
        return this;
    }
    
}
