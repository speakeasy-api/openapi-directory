// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MalcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MalcsRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// MalcsRequestBodyFormatEnum - The format of the certificate in response.
type MalcsRequestBodyFormatEnum string

const (
	MalcsRequestBodyFormatEnumPdf MalcsRequestBodyFormatEnum = "pdf"
)

func (e MalcsRequestBodyFormatEnum) ToPointer() *MalcsRequestBodyFormatEnum {
	return &e
}

func (e *MalcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = MalcsRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MalcsRequestBodyFormatEnum: %v", v)
	}
}

// MalcsRequestBody - Request format
type MalcsRequestBody struct {
	CertificateParameters *MalcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MalcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Malcs504ApplicationJSONErrorEnum string

const (
	Malcs504ApplicationJSONErrorEnumGatewayTimeout Malcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Malcs504ApplicationJSONErrorEnum) ToPointer() *Malcs504ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Malcs504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs504ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs504ApplicationJSONErrorDescriptionEnum string

const (
	Malcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Malcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Malcs504ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Malcs504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs504ApplicationJSON - Gateway timeout
type Malcs504ApplicationJSON struct {
	Error            *Malcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs503ApplicationJSONErrorEnum string

const (
	Malcs503ApplicationJSONErrorEnumServiceUnavailable Malcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Malcs503ApplicationJSONErrorEnum) ToPointer() *Malcs503ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Malcs503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs503ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs503ApplicationJSONErrorDescriptionEnum string

const (
	Malcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Malcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Malcs503ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Malcs503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs503ApplicationJSON - Service unavailable
type Malcs503ApplicationJSON struct {
	Error            *Malcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs502ApplicationJSONErrorEnum string

const (
	Malcs502ApplicationJSONErrorEnumBadGatewy Malcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Malcs502ApplicationJSONErrorEnum) ToPointer() *Malcs502ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Malcs502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs502ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs502ApplicationJSONErrorDescriptionEnum string

const (
	Malcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Malcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Malcs502ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Malcs502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs502ApplicationJSON - Bad gateway
type Malcs502ApplicationJSON struct {
	Error            *Malcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs500ApplicationJSONErrorEnum string

const (
	Malcs500ApplicationJSONErrorEnumInternalServerError Malcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Malcs500ApplicationJSONErrorEnum) ToPointer() *Malcs500ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Malcs500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs500ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs500ApplicationJSONErrorDescriptionEnum string

const (
	Malcs500ApplicationJSONErrorDescriptionEnumInternalServerError Malcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Malcs500ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Malcs500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs500ApplicationJSON - Internal server error
type Malcs500ApplicationJSON struct {
	Error            *Malcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs404ApplicationJSONErrorEnum string

const (
	Malcs404ApplicationJSONErrorEnumRecordNotFound Malcs404ApplicationJSONErrorEnum = "record_not_found"
	Malcs404ApplicationJSONErrorEnumURLNotFound    Malcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Malcs404ApplicationJSONErrorEnum) ToPointer() *Malcs404ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Malcs404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs404ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs404ApplicationJSONErrorDescriptionEnum string

const (
	Malcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Malcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Malcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Malcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Malcs404ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Malcs404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs404ApplicationJSON - No record found
type Malcs404ApplicationJSON struct {
	Error            *Malcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs401ApplicationJSONErrorEnum string

const (
	Malcs401ApplicationJSONErrorEnumInvalidAuthentication Malcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Malcs401ApplicationJSONErrorEnumInvalidAuthorization  Malcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Malcs401ApplicationJSONErrorEnum) ToPointer() *Malcs401ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Malcs401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs401ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs401ApplicationJSONErrorDescriptionEnum string

const (
	Malcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Malcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Malcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Malcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Malcs401ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Malcs401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs401ApplicationJSON - Unauthorized access
type Malcs401ApplicationJSON struct {
	Error            *Malcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Malcs400ApplicationJSONErrorEnum string

const (
	Malcs400ApplicationJSONErrorEnumMissingParameter Malcs400ApplicationJSONErrorEnum = "missing_parameter"
	Malcs400ApplicationJSONErrorEnumInvalidParameter Malcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Malcs400ApplicationJSONErrorEnumInvalidFormat    Malcs400ApplicationJSONErrorEnum = "invalid_format"
	Malcs400ApplicationJSONErrorEnumInvalidTxnid     Malcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Malcs400ApplicationJSONErrorEnumInvalidConsentid Malcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Malcs400ApplicationJSONErrorEnum) ToPointer() *Malcs400ApplicationJSONErrorEnum {
	return &e
}

func (e *Malcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Malcs400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs400ApplicationJSONErrorEnum: %v", v)
	}
}

type Malcs400ApplicationJSONErrorDescriptionEnum string

const (
	Malcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Malcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Malcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Malcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Malcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Malcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Malcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Malcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Malcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Malcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Malcs400ApplicationJSONErrorDescriptionEnum) ToPointer() *Malcs400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Malcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Malcs400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Malcs400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Malcs400ApplicationJSON - Bad request
type Malcs400ApplicationJSON struct {
	Error            *Malcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Malcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MalcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Malcs400ApplicationJSONObject *Malcs400ApplicationJSON
	// Unauthorized access
	Malcs401ApplicationJSONObject *Malcs401ApplicationJSON
	// No record found
	Malcs404ApplicationJSONObject *Malcs404ApplicationJSON
	// Internal server error
	Malcs500ApplicationJSONObject *Malcs500ApplicationJSON
	// Bad gateway
	Malcs502ApplicationJSONObject *Malcs502ApplicationJSON
	// Service unavailable
	Malcs503ApplicationJSONObject *Malcs503ApplicationJSON
	// Gateway timeout
	Malcs504ApplicationJSONObject *Malcs504ApplicationJSON
}
