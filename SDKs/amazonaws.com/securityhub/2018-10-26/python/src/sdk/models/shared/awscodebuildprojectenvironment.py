"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awscodebuildprojectenvironmentenvironmentvariablesdetails as shared_awscodebuildprojectenvironmentenvironmentvariablesdetails
from ..shared import awscodebuildprojectenvironmentregistrycredential as shared_awscodebuildprojectenvironmentregistrycredential
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsCodeBuildProjectEnvironment:
    r"""Information about the build environment for this build project."""
    
    certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Certificate'), 'exclude': lambda f: f is None }})  
    environment_variables: Optional[list[shared_awscodebuildprojectenvironmentenvironmentvariablesdetails.AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentVariables'), 'exclude': lambda f: f is None }})  
    image_pull_credentials_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImagePullCredentialsType'), 'exclude': lambda f: f is None }})  
    privileged_mode: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivilegedMode'), 'exclude': lambda f: f is None }})  
    registry_credential: Optional[shared_awscodebuildprojectenvironmentregistrycredential.AwsCodeBuildProjectEnvironmentRegistryCredential] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegistryCredential'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    