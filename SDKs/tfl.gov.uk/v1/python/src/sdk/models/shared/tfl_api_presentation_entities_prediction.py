"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import tfl_api_presentation_entities_predictiontiming as shared_tfl_api_presentation_entities_predictiontiming
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesPrediction:
    r"""DTO to capture the prediction details"""
    
    bearing: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bearing'), 'exclude': lambda f: f is None }})
    r"""Bearing (between 0 to 359)"""  
    current_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentLocation'), 'exclude': lambda f: f is None }})
    r"""The current location of the vehicle."""  
    destination_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationName'), 'exclude': lambda f: f is None }})
    r"""Name of the destination"""  
    destination_naptan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationNaptanId'), 'exclude': lambda f: f is None }})
    r"""Naptan Identifier for the prediction's destination"""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""Direction (unified to inbound/outbound)"""  
    expected_arrival: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedArrival'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The expected arrival time of the vehicle at the stop/station"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The identitier for the prediction"""  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the Line"""  
    line_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineName'), 'exclude': lambda f: f is None }})
    r"""Line Name"""  
    mode_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modeName'), 'exclude': lambda f: f is None }})
    r"""The mode name of the station/line the prediction relates to"""  
    naptan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naptanId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the prediction"""  
    operation_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationType'), 'exclude': lambda f: f is None }})
    r"""The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)"""  
    platform_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformName'), 'exclude': lambda f: f is None }})
    r"""Platform name (for bus, this is the stop letter)"""  
    station_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stationName'), 'exclude': lambda f: f is None }})
    r"""Station name"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)"""  
    time_to_live: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToLive'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The expiry time for the prediction"""  
    time_to_station: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeToStation'), 'exclude': lambda f: f is None }})
    r"""Prediction of the Time to station in seconds"""  
    timing: Optional[shared_tfl_api_presentation_entities_predictiontiming.TflAPIPresentationEntitiesPredictionTiming] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timing'), 'exclude': lambda f: f is None }})  
    towards: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('towards'), 'exclude': lambda f: f is None }})
    r"""Routing information or other descriptive text about the path of the vehicle towards the destination"""  
    vehicle_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vehicleId'), 'exclude': lambda f: f is None }})
    r"""The actual vehicle in transit (for train modes, the leading car of the rolling set)"""  
    