"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchemaChargeState:
    
    charge_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeRate'), 'exclude': lambda f: f is None }})
    r"""The current charge rate in kW.
    
    This property is only available when the charger is actively charging a vehicle, and is `null` any other time.
    """  
    is_charging: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCharging'), 'exclude': lambda f: f is None }})
    r"""Current charging status"""  
    is_plugged_in: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPluggedIn'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchemaInformation:
    r"""Descriptive information about the Charger"""
    
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""Charger brand"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Charger ID"""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Charger model"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""Charger production year"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchema:
    
    charge_state: Optional[Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchemaChargeState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeState'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Charger ID"""  
    information: Optional[Onechargers1Percent7BchargerIDPercent7DGetResponses200ContentApplication1jsonSchemaInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('information'), 'exclude': lambda f: f is None }})
    r"""Descriptive information about the Charger"""  
    is_reachable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isReachable'), 'exclude': lambda f: f is None }})
    r"""Is the charger currently reachable?"""  
    last_seen: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSeen'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last time the charger was successfully communicated with"""  
    