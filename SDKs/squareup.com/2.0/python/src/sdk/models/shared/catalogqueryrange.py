"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogQueryRange:
    r"""The query filter to return the search result whose named attribute values fall between the specified range."""
    
    attribute_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute_name') }})
    r"""The name of the attribute to be searched."""  
    attribute_max_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute_max_value'), 'exclude': lambda f: f is None }})
    r"""The desired maximum value for the search attribute (inclusive)."""  
    attribute_min_value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribute_min_value'), 'exclude': lambda f: f is None }})
    r"""The desired minimum value for the search attribute (inclusive)."""  
    