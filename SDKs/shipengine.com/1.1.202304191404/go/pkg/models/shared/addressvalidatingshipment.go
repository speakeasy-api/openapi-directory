// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// AddressValidatingShipmentDeliveryConfirmationEnum - The possible delivery confirmation values
type AddressValidatingShipmentDeliveryConfirmationEnum string

const (
	AddressValidatingShipmentDeliveryConfirmationEnumNone               AddressValidatingShipmentDeliveryConfirmationEnum = "none"
	AddressValidatingShipmentDeliveryConfirmationEnumDelivery           AddressValidatingShipmentDeliveryConfirmationEnum = "delivery"
	AddressValidatingShipmentDeliveryConfirmationEnumSignature          AddressValidatingShipmentDeliveryConfirmationEnum = "signature"
	AddressValidatingShipmentDeliveryConfirmationEnumAdultSignature     AddressValidatingShipmentDeliveryConfirmationEnum = "adult_signature"
	AddressValidatingShipmentDeliveryConfirmationEnumDirectSignature    AddressValidatingShipmentDeliveryConfirmationEnum = "direct_signature"
	AddressValidatingShipmentDeliveryConfirmationEnumDeliveryMailed     AddressValidatingShipmentDeliveryConfirmationEnum = "delivery_mailed"
	AddressValidatingShipmentDeliveryConfirmationEnumVerbalConfirmation AddressValidatingShipmentDeliveryConfirmationEnum = "verbal_confirmation"
)

func (e AddressValidatingShipmentDeliveryConfirmationEnum) ToPointer() *AddressValidatingShipmentDeliveryConfirmationEnum {
	return &e
}

func (e *AddressValidatingShipmentDeliveryConfirmationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "delivery":
		fallthrough
	case "signature":
		fallthrough
	case "adult_signature":
		fallthrough
	case "direct_signature":
		fallthrough
	case "delivery_mailed":
		fallthrough
	case "verbal_confirmation":
		*e = AddressValidatingShipmentDeliveryConfirmationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentDeliveryConfirmationEnum: %v", v)
	}
}

// AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum - The possible package contents values
type AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum string

const (
	AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnumMerchandise   AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum = "merchandise"
	AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnumDocuments     AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum = "documents"
	AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnumGift          AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum = "gift"
	AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnumReturnedGoods AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum = "returned_goods"
	AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnumSample        AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum = "sample"
)

func (e AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum) ToPointer() *AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum {
	return &e
}

func (e *AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "merchandise":
		fallthrough
	case "documents":
		fallthrough
	case "gift":
		fallthrough
	case "returned_goods":
		fallthrough
	case "sample":
		*e = AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum: %v", v)
	}
}

// AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum - The possible non delivery values
type AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum string

const (
	AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnumReturnToSender   AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum = "return_to_sender"
	AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnumTreatAsAbandoned AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum = "treat_as_abandoned"
)

func (e AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum) ToPointer() *AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum {
	return &e
}

func (e *AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "return_to_sender":
		fallthrough
	case "treat_as_abandoned":
		*e = AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum: %v", v)
	}
}

// AddressValidatingShipmentInternationalShipmentOptionsInput - Options for international shipments, such as customs declarations.
type AddressValidatingShipmentInternationalShipmentOptionsInput struct {
	// The type of contents in this shipment.  This may impact import duties or customs treatment.
	Contents AddressValidatingShipmentInternationalShipmentOptionsPackageContentsEnum `json:"contents"`
	// Customs declarations for each item in the shipment.
	CustomsItems []CustomsItemInput `json:"customs_items,omitempty"`
	// Indicates what to do if a package is unable to be delivered.
	NonDelivery AddressValidatingShipmentInternationalShipmentOptionsNonDeliveryEnum `json:"non_delivery"`
}

// AddressValidatingShipmentInsuranceProviderEnum - The possible insurance provider values
type AddressValidatingShipmentInsuranceProviderEnum string

const (
	AddressValidatingShipmentInsuranceProviderEnumNone        AddressValidatingShipmentInsuranceProviderEnum = "none"
	AddressValidatingShipmentInsuranceProviderEnumShipsurance AddressValidatingShipmentInsuranceProviderEnum = "shipsurance"
	AddressValidatingShipmentInsuranceProviderEnumCarrier     AddressValidatingShipmentInsuranceProviderEnum = "carrier"
	AddressValidatingShipmentInsuranceProviderEnumThirdParty  AddressValidatingShipmentInsuranceProviderEnum = "third_party"
)

func (e AddressValidatingShipmentInsuranceProviderEnum) ToPointer() *AddressValidatingShipmentInsuranceProviderEnum {
	return &e
}

func (e *AddressValidatingShipmentInsuranceProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "shipsurance":
		fallthrough
	case "carrier":
		fallthrough
	case "third_party":
		*e = AddressValidatingShipmentInsuranceProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentInsuranceProviderEnum: %v", v)
	}
}

// AddressValidatingShipmentOriginTypeEnum - Indicates if the package will be picked up or dropped off by the carrier
type AddressValidatingShipmentOriginTypeEnum string

const (
	AddressValidatingShipmentOriginTypeEnumPickup  AddressValidatingShipmentOriginTypeEnum = "pickup"
	AddressValidatingShipmentOriginTypeEnumDropOff AddressValidatingShipmentOriginTypeEnum = "drop_off"
)

func (e AddressValidatingShipmentOriginTypeEnum) ToPointer() *AddressValidatingShipmentOriginTypeEnum {
	return &e
}

func (e *AddressValidatingShipmentOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pickup":
		fallthrough
	case "drop_off":
		*e = AddressValidatingShipmentOriginTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentOriginTypeEnum: %v", v)
	}
}

// AddressValidatingShipmentValidateAddressEnum - The possible validate address values
type AddressValidatingShipmentValidateAddressEnum string

const (
	AddressValidatingShipmentValidateAddressEnumNoValidation     AddressValidatingShipmentValidateAddressEnum = "no_validation"
	AddressValidatingShipmentValidateAddressEnumValidateOnly     AddressValidatingShipmentValidateAddressEnum = "validate_only"
	AddressValidatingShipmentValidateAddressEnumValidateAndClean AddressValidatingShipmentValidateAddressEnum = "validate_and_clean"
)

func (e AddressValidatingShipmentValidateAddressEnum) ToPointer() *AddressValidatingShipmentValidateAddressEnum {
	return &e
}

func (e *AddressValidatingShipmentValidateAddressEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_validation":
		fallthrough
	case "validate_only":
		fallthrough
	case "validate_and_clean":
		*e = AddressValidatingShipmentValidateAddressEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressValidatingShipmentValidateAddressEnum: %v", v)
	}
}

// AddressValidatingShipmentInput - The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
type AddressValidatingShipmentInput struct {
	// Advanced shipment options.  These are entirely optional.
	AdvancedOptions *AdvancedShipmentOptions `json:"advanced_options,omitempty"`
	// The carrier account that is billed for the shipping charges
	CarrierID string `json:"carrier_id"`
	// The type of delivery confirmation that is required for this shipment.
	Confirmation *AddressValidatingShipmentDeliveryConfirmationEnum `json:"confirmation,omitempty"`
	// Customs information.  This is usually only needed for international shipments.
	//
	Customs *AddressValidatingShipmentInternationalShipmentOptionsInput `json:"customs,omitempty"`
	// ID that the Order Source assigned
	ExternalOrderID *string `json:"external_order_id,omitempty"`
	// A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
	//
	// > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
	//
	ExternalShipmentID *string `json:"external_shipment_id,omitempty"`
	// The insurance provider to use for any insured packages in the shipment.
	//
	InsuranceProvider *AddressValidatingShipmentInsuranceProviderEnum `json:"insurance_provider,omitempty"`
	// An optional indicator if the shipment is intended to be a return. Defaults to false if not provided.
	//
	IsReturn *bool `json:"is_return,omitempty"`
	// Describe the packages included in this shipment as related to potential metadata that was imported from
	// external order sources
	//
	Items           []ShipmentItem       `json:"items,omitempty"`
	OrderSourceCode *OrderSourceNameEnum `json:"order_source_code,omitempty"`
	// Indicates if the package will be picked up or dropped off by the carrier
	OriginType *AddressValidatingShipmentOriginTypeEnum `json:"origin_type,omitempty"`
	// The packages in the shipment.
	//
	// > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
	//
	Packages []PackageInput `json:"packages,omitempty"`
	// The return address for this shipment.  Defaults to the `ship_from` address.
	//
	ReturnTo *ShippingAddress `json:"return_to,omitempty"`
	// The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
	//
	ServiceCode string `json:"service_code"`
	// The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
	//
	ShipDate *time.Time `json:"ship_date,omitempty"`
	// The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time.
	//
	ShipFrom ShippingAddress `json:"ship_from"`
	// The recipient's mailing address
	ShipTo ShippingAddress `json:"ship_to"`
	// A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
	//
	// > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
	//
	ShipmentNumber  *string                                       `json:"shipment_number,omitempty"`
	TaxIdentifiers  []TaxIdentifier                               `json:"tax_identifiers,omitempty"`
	ValidateAddress *AddressValidatingShipmentValidateAddressEnum `json:"validate_address,omitempty"`
	// The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
	//
	WarehouseID *string `json:"warehouse_id,omitempty"`
}
