// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// VideoStatusFailureReasonEnum - This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
type VideoStatusFailureReasonEnum string

const (
	VideoStatusFailureReasonEnumConversion    VideoStatusFailureReasonEnum = "conversion"
	VideoStatusFailureReasonEnumInvalidFile   VideoStatusFailureReasonEnum = "invalidFile"
	VideoStatusFailureReasonEnumEmptyFile     VideoStatusFailureReasonEnum = "emptyFile"
	VideoStatusFailureReasonEnumTooSmall      VideoStatusFailureReasonEnum = "tooSmall"
	VideoStatusFailureReasonEnumCodec         VideoStatusFailureReasonEnum = "codec"
	VideoStatusFailureReasonEnumUploadAborted VideoStatusFailureReasonEnum = "uploadAborted"
)

func (e VideoStatusFailureReasonEnum) ToPointer() *VideoStatusFailureReasonEnum {
	return &e
}

func (e *VideoStatusFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "conversion":
		fallthrough
	case "invalidFile":
		fallthrough
	case "emptyFile":
		fallthrough
	case "tooSmall":
		fallthrough
	case "codec":
		fallthrough
	case "uploadAborted":
		*e = VideoStatusFailureReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusFailureReasonEnum: %v", v)
	}
}

// VideoStatusLicenseEnum - The video's license. @mutable youtube.videos.insert youtube.videos.update
type VideoStatusLicenseEnum string

const (
	VideoStatusLicenseEnumYoutube        VideoStatusLicenseEnum = "youtube"
	VideoStatusLicenseEnumCreativeCommon VideoStatusLicenseEnum = "creativeCommon"
)

func (e VideoStatusLicenseEnum) ToPointer() *VideoStatusLicenseEnum {
	return &e
}

func (e *VideoStatusLicenseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "youtube":
		fallthrough
	case "creativeCommon":
		*e = VideoStatusLicenseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusLicenseEnum: %v", v)
	}
}

// VideoStatusPrivacyStatusEnum - The video's privacy status.
type VideoStatusPrivacyStatusEnum string

const (
	VideoStatusPrivacyStatusEnumPublic   VideoStatusPrivacyStatusEnum = "public"
	VideoStatusPrivacyStatusEnumUnlisted VideoStatusPrivacyStatusEnum = "unlisted"
	VideoStatusPrivacyStatusEnumPrivate  VideoStatusPrivacyStatusEnum = "private"
)

func (e VideoStatusPrivacyStatusEnum) ToPointer() *VideoStatusPrivacyStatusEnum {
	return &e
}

func (e *VideoStatusPrivacyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "unlisted":
		fallthrough
	case "private":
		*e = VideoStatusPrivacyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusPrivacyStatusEnum: %v", v)
	}
}

// VideoStatusRejectionReasonEnum - This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
type VideoStatusRejectionReasonEnum string

const (
	VideoStatusRejectionReasonEnumCopyright                VideoStatusRejectionReasonEnum = "copyright"
	VideoStatusRejectionReasonEnumInappropriate            VideoStatusRejectionReasonEnum = "inappropriate"
	VideoStatusRejectionReasonEnumDuplicate                VideoStatusRejectionReasonEnum = "duplicate"
	VideoStatusRejectionReasonEnumTermsOfUse               VideoStatusRejectionReasonEnum = "termsOfUse"
	VideoStatusRejectionReasonEnumUploaderAccountSuspended VideoStatusRejectionReasonEnum = "uploaderAccountSuspended"
	VideoStatusRejectionReasonEnumLength                   VideoStatusRejectionReasonEnum = "length"
	VideoStatusRejectionReasonEnumClaim                    VideoStatusRejectionReasonEnum = "claim"
	VideoStatusRejectionReasonEnumUploaderAccountClosed    VideoStatusRejectionReasonEnum = "uploaderAccountClosed"
	VideoStatusRejectionReasonEnumTrademark                VideoStatusRejectionReasonEnum = "trademark"
	VideoStatusRejectionReasonEnumLegal                    VideoStatusRejectionReasonEnum = "legal"
)

func (e VideoStatusRejectionReasonEnum) ToPointer() *VideoStatusRejectionReasonEnum {
	return &e
}

func (e *VideoStatusRejectionReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "copyright":
		fallthrough
	case "inappropriate":
		fallthrough
	case "duplicate":
		fallthrough
	case "termsOfUse":
		fallthrough
	case "uploaderAccountSuspended":
		fallthrough
	case "length":
		fallthrough
	case "claim":
		fallthrough
	case "uploaderAccountClosed":
		fallthrough
	case "trademark":
		fallthrough
	case "legal":
		*e = VideoStatusRejectionReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusRejectionReasonEnum: %v", v)
	}
}

// VideoStatusUploadStatusEnum - The status of the uploaded video.
type VideoStatusUploadStatusEnum string

const (
	VideoStatusUploadStatusEnumUploaded  VideoStatusUploadStatusEnum = "uploaded"
	VideoStatusUploadStatusEnumProcessed VideoStatusUploadStatusEnum = "processed"
	VideoStatusUploadStatusEnumFailed    VideoStatusUploadStatusEnum = "failed"
	VideoStatusUploadStatusEnumRejected  VideoStatusUploadStatusEnum = "rejected"
	VideoStatusUploadStatusEnumDeleted   VideoStatusUploadStatusEnum = "deleted"
)

func (e VideoStatusUploadStatusEnum) ToPointer() *VideoStatusUploadStatusEnum {
	return &e
}

func (e *VideoStatusUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uploaded":
		fallthrough
	case "processed":
		fallthrough
	case "failed":
		fallthrough
	case "rejected":
		fallthrough
	case "deleted":
		*e = VideoStatusUploadStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatusUploadStatusEnum: %v", v)
	}
}

// VideoStatus - Basic details about a video category, such as its localized title. Next Id: 18
type VideoStatus struct {
	// This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
	Embeddable *bool `json:"embeddable,omitempty"`
	// This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
	FailureReason *VideoStatusFailureReasonEnum `json:"failureReason,omitempty"`
	// The video's license. @mutable youtube.videos.insert youtube.videos.update
	License     *VideoStatusLicenseEnum `json:"license,omitempty"`
	MadeForKids *bool                   `json:"madeForKids,omitempty"`
	// The video's privacy status.
	PrivacyStatus *VideoStatusPrivacyStatusEnum `json:"privacyStatus,omitempty"`
	// This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
	PublicStatsViewable *bool `json:"publicStatsViewable,omitempty"`
	// The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
	PublishAt *time.Time `json:"publishAt,omitempty"`
	// This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
	RejectionReason         *VideoStatusRejectionReasonEnum `json:"rejectionReason,omitempty"`
	SelfDeclaredMadeForKids *bool                           `json:"selfDeclaredMadeForKids,omitempty"`
	// The status of the uploaded video.
	UploadStatus *VideoStatusUploadStatusEnum `json:"uploadStatus,omitempty"`
}
