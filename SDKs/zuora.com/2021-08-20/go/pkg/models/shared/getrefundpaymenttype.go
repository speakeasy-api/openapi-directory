// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum - Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum string

const (
	GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnumProcessing GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum = "Processing"
	GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnumYes        GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum = "Yes"
	GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnumNo         GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum = "No"
	GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnumError      GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum = "Error"
	GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnumIgnore     GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum = "Ignore"
)

func (e *GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "No":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum: %s", s)
	}
}

// GETRefundPaymentTypeFinanceInformation - Container for the finance information related to the refund.
type GETRefundPaymentTypeFinanceInformation struct {
	// The accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCode *string `json:"bankAccountAccountingCode,omitempty"`
	// The type of the accounting code that maps to a bank account in your accounting system.
	//
	BankAccountAccountingCodeType *string `json:"bankAccountAccountingCodeType,omitempty"`
	// Whether the refund was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *GETRefundPaymentTypeFinanceInformationTransferredToAccountingEnum `json:"transferredToAccounting,omitempty"`
	// The accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCode *string `json:"unappliedPaymentAccountingCode,omitempty"`
	// The type of the accounting code for the unapplied payment.
	//
	UnappliedPaymentAccountingCodeType *string `json:"unappliedPaymentAccountingCodeType,omitempty"`
}

// GETRefundPaymentTypeGatewayStateEnum - The status of the refund in the gateway.
type GETRefundPaymentTypeGatewayStateEnum string

const (
	GETRefundPaymentTypeGatewayStateEnumMarkedForSubmission GETRefundPaymentTypeGatewayStateEnum = "MarkedForSubmission"
	GETRefundPaymentTypeGatewayStateEnumSubmitted           GETRefundPaymentTypeGatewayStateEnum = "Submitted"
	GETRefundPaymentTypeGatewayStateEnumSettled             GETRefundPaymentTypeGatewayStateEnum = "Settled"
	GETRefundPaymentTypeGatewayStateEnumNotSubmitted        GETRefundPaymentTypeGatewayStateEnum = "NotSubmitted"
	GETRefundPaymentTypeGatewayStateEnumFailedToSettle      GETRefundPaymentTypeGatewayStateEnum = "FailedToSettle"
)

func (e *GETRefundPaymentTypeGatewayStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MarkedForSubmission":
		fallthrough
	case "Submitted":
		fallthrough
	case "Settled":
		fallthrough
	case "NotSubmitted":
		fallthrough
	case "FailedToSettle":
		*e = GETRefundPaymentTypeGatewayStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundPaymentTypeGatewayStateEnum: %s", s)
	}
}

// GETRefundPaymentTypeMethodTypeEnum - How an external refund was issued to a customer.
type GETRefundPaymentTypeMethodTypeEnum string

const (
	GETRefundPaymentTypeMethodTypeEnumAch                            GETRefundPaymentTypeMethodTypeEnum = "ACH"
	GETRefundPaymentTypeMethodTypeEnumCash                           GETRefundPaymentTypeMethodTypeEnum = "Cash"
	GETRefundPaymentTypeMethodTypeEnumCheck                          GETRefundPaymentTypeMethodTypeEnum = "Check"
	GETRefundPaymentTypeMethodTypeEnumCreditCard                     GETRefundPaymentTypeMethodTypeEnum = "CreditCard"
	GETRefundPaymentTypeMethodTypeEnumPayPal                         GETRefundPaymentTypeMethodTypeEnum = "PayPal"
	GETRefundPaymentTypeMethodTypeEnumWireTransfer                   GETRefundPaymentTypeMethodTypeEnum = "WireTransfer"
	GETRefundPaymentTypeMethodTypeEnumDebitCard                      GETRefundPaymentTypeMethodTypeEnum = "DebitCard"
	GETRefundPaymentTypeMethodTypeEnumCreditCardReferenceTransaction GETRefundPaymentTypeMethodTypeEnum = "CreditCardReferenceTransaction"
	GETRefundPaymentTypeMethodTypeEnumBankTransfer                   GETRefundPaymentTypeMethodTypeEnum = "BankTransfer"
	GETRefundPaymentTypeMethodTypeEnumOther                          GETRefundPaymentTypeMethodTypeEnum = "Other"
)

func (e *GETRefundPaymentTypeMethodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACH":
		fallthrough
	case "Cash":
		fallthrough
	case "Check":
		fallthrough
	case "CreditCard":
		fallthrough
	case "PayPal":
		fallthrough
	case "WireTransfer":
		fallthrough
	case "DebitCard":
		fallthrough
	case "CreditCardReferenceTransaction":
		fallthrough
	case "BankTransfer":
		fallthrough
	case "Other":
		*e = GETRefundPaymentTypeMethodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundPaymentTypeMethodTypeEnum: %s", s)
	}
}

// GETRefundPaymentTypeStatusEnum - The status of the refund.
type GETRefundPaymentTypeStatusEnum string

const (
	GETRefundPaymentTypeStatusEnumProcessed  GETRefundPaymentTypeStatusEnum = "Processed"
	GETRefundPaymentTypeStatusEnumCanceled   GETRefundPaymentTypeStatusEnum = "Canceled"
	GETRefundPaymentTypeStatusEnumError      GETRefundPaymentTypeStatusEnum = "Error"
	GETRefundPaymentTypeStatusEnumProcessing GETRefundPaymentTypeStatusEnum = "Processing"
)

func (e *GETRefundPaymentTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processed":
		fallthrough
	case "Canceled":
		fallthrough
	case "Error":
		fallthrough
	case "Processing":
		*e = GETRefundPaymentTypeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundPaymentTypeStatusEnum: %s", s)
	}
}

// GETRefundPaymentTypeTypeEnum - The type of the refund.
type GETRefundPaymentTypeTypeEnum string

const (
	GETRefundPaymentTypeTypeEnumExternal   GETRefundPaymentTypeTypeEnum = "External"
	GETRefundPaymentTypeTypeEnumElectronic GETRefundPaymentTypeTypeEnum = "Electronic"
)

func (e *GETRefundPaymentTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "External":
		fallthrough
	case "Electronic":
		*e = GETRefundPaymentTypeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRefundPaymentTypeTypeEnum: %s", s)
	}
}

// GETRefundPaymentType - Container for custom fields of a Refund object.
type GETRefundPaymentType struct {
	// ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationIDNS *string `json:"IntegrationId__NS,omitempty"`
	// Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationStatusNS *string `json:"IntegrationStatus__NS,omitempty"`
	// Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	OriginNS *string `json:"Origin__NS,omitempty"`
	// Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SyncDateNS *string `json:"SyncDate__NS,omitempty"`
	// Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SynctoNetSuiteNS *string `json:"SynctoNetSuite__NS,omitempty"`
	// The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The total amount of the refund.
	//
	Amount *float64 `json:"amount,omitempty"`
	// The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Comments about the refund.
	//
	Comment *string `json:"comment,omitempty"`
	// The ID of the Zuora user who created the refund.
	//
	CreatedByID *string `json:"createdById,omitempty"`
	// The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The ID of the credit memo associated with the refund.
	//
	CreditMemoID *string `json:"creditMemoId,omitempty"`
	// Container for the finance information related to the refund.
	//
	FinanceInformation *GETRefundPaymentTypeFinanceInformation `json:"financeInformation,omitempty"`
	// The ID of the gateway instance that processes the refund.
	//
	GatewayID *string `json:"gatewayId,omitempty"`
	// The reason of gateway reconciliation.
	//
	GatewayReconciliationReason *string `json:"gatewayReconciliationReason,omitempty"`
	// The status of gateway reconciliation.
	//
	GatewayReconciliationStatus *string `json:"gatewayReconciliationStatus,omitempty"`
	// The message returned from the payment gateway for the refund. This message is gateway-dependent.
	//
	GatewayResponse *string `json:"gatewayResponse,omitempty"`
	// The code returned from the payment gateway for the refund. This code is gateway-dependent.
	//
	GatewayResponseCode *string `json:"gatewayResponseCode,omitempty"`
	// The status of the refund in the gateway.
	//
	GatewayState *GETRefundPaymentTypeGatewayStateEnum `json:"gatewayState,omitempty"`
	// The ID of the created refund.
	//
	ID *string `json:"id,omitempty"`
	// The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.
	//
	MarkedForSubmissionOn *time.Time `json:"markedForSubmissionOn,omitempty"`
	// How an external refund was issued to a customer.
	//
	MethodType *GETRefundPaymentTypeMethodTypeEnum `json:"methodType,omitempty"`
	// The unique identification number of the refund.
	//
	Number *string `json:"number,omitempty"`
	// The ID of the payment that is refunded.
	//
	PaymentID *string `json:"paymentId,omitempty"`
	// The unique ID of the payment method that the customer used to make the refund.
	//
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
	// The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.
	//
	PaymentMethodSnapshotID *string `json:"paymentMethodSnapshotId,omitempty"`
	// The payout ID of the refund from the gateway side.
	//
	PayoutID *string `json:"payoutId,omitempty"`
	// A code identifying the reason for the transaction.
	//
	ReasonCode *string `json:"reasonCode,omitempty"`
	// The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
	//
	ReferenceID *string `json:"referenceId,omitempty"`
	// The date when the refund takes effect, in `yyyy-mm-dd` format.
	//
	RefundDate *types.Date `json:"refundDate,omitempty"`
	// The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.
	//
	RefundTransactionTime *time.Time `json:"refundTransactionTime,omitempty"`
	// The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.
	//
	SecondRefundReferenceID *string `json:"secondRefundReferenceId,omitempty"`
	// The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.
	//
	SettledOn *time.Time `json:"settledOn,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptor *string `json:"softDescriptor,omitempty"`
	// A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.
	//
	SoftDescriptorPhone *string `json:"softDescriptorPhone,omitempty"`
	// The status of the refund.
	//
	Status *GETRefundPaymentTypeStatusEnum `json:"status,omitempty"`
	// The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.
	//
	SubmittedOn *time.Time `json:"submittedOn,omitempty"`
	// Returns `true` if the request was processed successfully.
	Success *bool `json:"success,omitempty"`
	// The type of the refund.
	//
	Type *GETRefundPaymentTypeTypeEnum `json:"type,omitempty"`
	// The ID of the the Zuora user who last updated the refund.
	//
	UpdatedByID *string `json:"updatedById,omitempty"`
	// The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
	//
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}
