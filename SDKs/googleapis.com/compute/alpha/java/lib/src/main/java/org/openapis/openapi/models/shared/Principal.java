/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Principal - [Deprecated] All fields defined in a principal are ANDed.
 */
public class Principal {
    /**
     * An expression to specify custom condition.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public String condition;

    public Principal withCondition(String condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * The groups the principal belongs to. Exact match, prefix match, and suffix match are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    public String[] groups;

    public Principal withGroups(String[] groups) {
        this.groups = groups;
        return this;
    }
    
    /**
     * IPv4 or IPv6 address or range (In CIDR format)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ips")
    public String[] ips;

    public Principal withIps(String[] ips) {
        this.ips = ips;
        return this;
    }
    
    /**
     * The namespaces. Exact match, prefix match, and suffix match are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaces")
    public String[] namespaces;

    public Principal withNamespaces(String[] namespaces) {
        this.namespaces = namespaces;
        return this;
    }
    
    /**
     * Negate of groups. Specifies exclusions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notGroups")
    public String[] notGroups;

    public Principal withNotGroups(String[] notGroups) {
        this.notGroups = notGroups;
        return this;
    }
    
    /**
     * Negate of IPs. Specifies exclusions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notIps")
    public String[] notIps;

    public Principal withNotIps(String[] notIps) {
        this.notIps = notIps;
        return this;
    }
    
    /**
     * Negate of namespaces. Specifies exclusions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notNamespaces")
    public String[] notNamespaces;

    public Principal withNotNamespaces(String[] notNamespaces) {
        this.notNamespaces = notNamespaces;
        return this;
    }
    
    /**
     * Negate of users. Specifies exclusions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notUsers")
    public String[] notUsers;

    public Principal withNotUsers(String[] notUsers) {
        this.notUsers = notUsers;
        return this;
    }
    
    /**
     * A map of Istio attribute to expected values. Exact match, prefix match, and suffix match are supported for values. For example, `request.headers[version]: "v1"`. The properties are ANDed together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public java.util.Map<String, String> properties;

    public Principal withProperties(java.util.Map<String, String> properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * The user names/IDs or service accounts. Exact match, prefix match, and suffix match are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("users")
    public String[] users;

    public Principal withUsers(String[] users) {
        this.users = users;
        return this;
    }
    
    public Principal(){}
}
