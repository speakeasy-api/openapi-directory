"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import registerorganizationdelegatedadminrequest as shared_registerorganizationdelegatedadminrequest
from enum import Enum
from typing import Any, Optional

class RegisterOrganizationDelegatedAdminXAmzTargetEnum(str, Enum):
    COM_AMAZONAWS_CLOUDTRAIL_V20131101_CLOUD_TRAIL_20131101_REGISTER_ORGANIZATION_DELEGATED_ADMIN = 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RegisterOrganizationDelegatedAdmin'


@dataclasses.dataclass
class RegisterOrganizationDelegatedAdminRequest:
    
    register_organization_delegated_admin_request: shared_registerorganizationdelegatedadminrequest.RegisterOrganizationDelegatedAdminRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: RegisterOrganizationDelegatedAdminXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class RegisterOrganizationDelegatedAdminResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountNotFoundException"""  
    account_registered_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountRegisteredException"""  
    cannot_delegate_management_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CannotDelegateManagementAccountException"""  
    cloud_trail_access_not_enabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CloudTrailAccessNotEnabledException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    delegated_admin_account_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DelegatedAdminAccountLimitExceededException"""  
    insufficient_dependency_service_access_permission_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InsufficientDependencyServiceAccessPermissionException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    not_organization_management_account_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotOrganizationManagementAccountException"""  
    operation_not_permitted_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationNotPermittedException"""  
    organization_not_in_all_features_mode_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OrganizationNotInAllFeaturesModeException"""  
    organizations_not_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OrganizationsNotInUseException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    register_organization_delegated_admin_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    unsupported_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedOperationException"""  
    