"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Routing:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_routing_version_number_calculate_reachable_range_origin_content_type_(self, request: operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest) -> operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse:
        r"""Reachable Range
        Calculates a set of locations that can be reached from the origin point.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest, base_url, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', request)
        
        query_params = utils.get_query_params(operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_routing_version_number_calculate_route_locations_content_type_(self, request: operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest) -> operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse:
        r"""Calculate Route
        Calculates a route between an origin and a destination.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest, base_url, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', request)
        
        query_params = utils.get_query_params(operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRoutingVersionNumberCalculateRouteLocationsContentTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_routing_version_number_calculate_reachable_range_origin_content_type_json(self, request: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJSONRequest) -> operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJSONResponse:
        r"""Reachable Range
        Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJSONRequest, base_url, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calculate_reachable_range_post_data_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_routing_version_number_calculate_reachable_range_origin_content_type_raw(self, request: operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest) -> operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse:
        r"""Reachable Range
        Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest, base_url, '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_routing_version_number_calculate_route_locations_content_type_json(self, request: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJSONRequest) -> operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJSONResponse:
        r"""Calculate Route
        Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJSONRequest, base_url, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calculate_route_post_data_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_routing_version_number_calculate_route_locations_content_type_raw(self, request: operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest) -> operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse:
        r"""Calculate Route
        Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest, base_url, '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRoutingVersionNumberCalculateRouteLocationsContentTypeRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    