// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum - The default value for a merge commit message.
//
// - `PR_TITLE` - default to the pull request's title.
// - `PR_BODY` - default to the pull request's body.
// - `BLANK` - default to a blank commit message.
type ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum string

const (
	ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnumPrBody  ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum = "PR_BODY"
	ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnumPrTitle ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum = "PR_TITLE"
	ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnumBlank   ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum = "BLANK"
)

func (e ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum) ToPointer() *ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum {
	return &e
}

func (e *ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PR_BODY":
		fallthrough
	case "PR_TITLE":
		fallthrough
	case "BLANK":
		*e = ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum: %v", v)
	}
}

// ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum - The default value for a merge commit title.
//
// - `PR_TITLE` - default to the pull request's title.
// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum string

const (
	ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnumPrTitle      ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum = "PR_TITLE"
	ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnumMergeMessage ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum = "MERGE_MESSAGE"
)

func (e ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum) ToPointer() *ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum {
	return &e
}

func (e *ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PR_TITLE":
		fallthrough
	case "MERGE_MESSAGE":
		*e = ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum: %v", v)
	}
}

// ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum - The default value for a squash merge commit message:
//
// - `PR_BODY` - default to the pull request's body.
// - `COMMIT_MESSAGES` - default to the branch's commit messages.
// - `BLANK` - default to a blank commit message.
type ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum string

const (
	ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnumPrBody         ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum = "PR_BODY"
	ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnumCommitMessages ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum = "COMMIT_MESSAGES"
	ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnumBlank          ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum = "BLANK"
)

func (e ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum) ToPointer() *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum {
	return &e
}

func (e *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PR_BODY":
		fallthrough
	case "COMMIT_MESSAGES":
		fallthrough
	case "BLANK":
		*e = ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum: %v", v)
	}
}

// ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum - The default value for a squash merge commit title:
//
// - `PR_TITLE` - default to the pull request's title.
// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
type ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum string

const (
	ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnumPrTitle         ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum = "PR_TITLE"
	ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnumCommitOrPrTitle ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum = "COMMIT_OR_PR_TITLE"
)

func (e ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum) ToPointer() *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum {
	return &e
}

func (e *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PR_TITLE":
		fallthrough
	case "COMMIT_OR_PR_TITLE":
		*e = ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum: %v", v)
	}
}

type ReposCreateForAuthenticatedUserRequestBody struct {
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Whether the repository is initialized with a minimal README.
	AutoInit *bool `json:"auto_init,omitempty"`
	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// A short description of the repository.
	Description *string `json:"description,omitempty"`
	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`
	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`
	// Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`
	// Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`
	// Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`
	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	// The license keyword of the open source license for this repository.
	LicenseTemplate *string `json:"license_template,omitempty"`
	// The default value for a merge commit message.
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `PR_BODY` - default to the pull request's body.
	// - `BLANK` - default to a blank commit message.
	MergeCommitMessage *ReposCreateForAuthenticatedUserRequestBodyMergeCommitMessageEnum `json:"merge_commit_message,omitempty"`
	// The default value for a merge commit title.
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *ReposCreateForAuthenticatedUserRequestBodyMergeCommitTitleEnum `json:"merge_commit_title,omitempty"`
	// The name of the repository.
	Name string `json:"name"`
	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`
	// The default value for a squash merge commit message:
	//
	// - `PR_BODY` - default to the pull request's body.
	// - `COMMIT_MESSAGES` - default to the branch's commit messages.
	// - `BLANK` - default to a blank commit message.
	SquashMergeCommitMessage *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitMessageEnum `json:"squash_merge_commit_message,omitempty"`
	// The default value for a squash merge commit title:
	//
	// - `PR_TITLE` - default to the pull request's title.
	// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
	SquashMergeCommitTitle *ReposCreateForAuthenticatedUserRequestBodySquashMergeCommitTitleEnum `json:"squash_merge_commit_title,omitempty"`
	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamID *int64 `json:"team_id,omitempty"`
}

type ReposCreateForAuthenticatedUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Bad Request
	BasicError *shared.BasicError
	// Response
	Repository *shared.Repository
	// Bad Request
	ScimError *shared.ScimError
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
