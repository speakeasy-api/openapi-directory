/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxFields {
    /**
     * Unique identifier of the category of the Tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    public Integer categoryId;
    public TaxFields withCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * Country name where the Tax applies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public TaxFields withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * True if the tax has a fixed valued amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed")
    public Boolean fixed;
    public TaxFields withFixed(Boolean fixed) {
        this.fixed = fixed;
        return this;
    }
    
    /**
     * Unique identifier of the Tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;
    public TaxFields withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Name that identifies tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public TaxFields withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Region name where the Tax applies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public TaxFields withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * True if the tax should be applied to shipping costs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping")
    public Boolean shipping;
    public TaxFields withShipping(Boolean shipping) {
        this.shipping = shipping;
        return this;
    }
    
    /**
     * Tax value for the given Tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    public Float taxAmount;
    public TaxFields withTaxAmount(Float taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
}
