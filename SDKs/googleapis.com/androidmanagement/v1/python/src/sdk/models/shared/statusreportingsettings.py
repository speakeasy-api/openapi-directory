"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationreportingsettings as shared_applicationreportingsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatusReportingSettings:
    r"""Settings controlling the behavior of status reports."""
    
    application_reporting_settings: Optional[shared_applicationreportingsettings.ApplicationReportingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationReportingSettings'), 'exclude': lambda f: f is None }})
    r"""Settings controlling the behavior of application reports."""  
    application_reports_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationReportsEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether app reports are enabled."""  
    common_criteria_mode_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonCriteriaModeEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether Common Criteria Mode reporting is enabled."""  
    device_settings_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSettingsEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether device settings reporting is enabled."""  
    display_info_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayInfoEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles."""  
    hardware_status_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardwareStatusEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles."""  
    memory_info_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryInfoEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether memory event reporting is enabled."""  
    network_info_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkInfoEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether network info reporting is enabled."""  
    power_management_events_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerManagementEventsEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles."""  
    software_info_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareInfoEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether software info reporting is enabled."""  
    system_properties_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemPropertiesEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether system properties reporting is enabled."""  
    