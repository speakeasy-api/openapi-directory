/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum PatientAutoAccidentInsuranceAutoAccidentClaimRepStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export enum PatientAutoAccidentInsuranceAutoAccidentPatientRelationshipToSubscriberEnum {
  Unknown = "",
  One = "01",
  Four = "04",
  Five = "05",
  Seven = "07",
  Ten = "10",
  Fifteen = "15",
  Seventeen = "17",
  Nineteen = "19",
  Twenty = "20",
  TwentyOne = "21",
  TwentyTwo = "22",
  TwentyThree = "23",
  TwentyFour = "24",
  TwentyNine = "29",
  ThirtyTwo = "32",
  ThirtyThree = "33",
  ThirtySix = "36",
  ThirtyNine = "39",
  Forty = "40",
  FortyOne = "41",
  FortyThree = "43",
  FiftyThree = "53",
  SeventySix = "76",
  G8 = "G8",
}

export enum PatientAutoAccidentInsuranceAutoAccidentPayerStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export enum PatientAutoAccidentInsuranceAutoAccidentSignificantInjuryEnum {
  Yes = "YES",
  No = "NO",
  NA = "NA",
}

export enum PatientAutoAccidentInsuranceAutoAccidentStateOfOccurrenceEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export enum PatientAutoAccidentInsuranceAutoAccidentSubscriberStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export class PatientAutoAccidentInsurance extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_case_number" })
  autoAccidentCaseNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_address" })
  autoAccidentClaimRepAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_city" })
  autoAccidentClaimRepCity?: string;

  /**
   * Is the insurer's claim representative the insurer?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_is_insurer" })
  autoAccidentClaimRepIsInsurer?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_name" })
  autoAccidentClaimRepName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_state" })
  autoAccidentClaimRepState?: PatientAutoAccidentInsuranceAutoAccidentClaimRepStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_claim_rep_zip" })
  autoAccidentClaimRepZip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_company" })
  autoAccidentCompany?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_date_of_accident" })
  autoAccidentDateOfAccident?: string;

  /**
   * Patient was disabled (unable to work) from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_disabled_from_date" })
  autoAccidentDisabledFromDate?: string;

  /**
   * Patient was disabled (unable to work) to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_disabled_to_date" })
  autoAccidentDisabledToDate?: string;

  /**
   * Has the patient had same or similar condition?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_had_similar_condition" })
  autoAccidentHadSimilarCondition?: boolean;

  /**
   * True if the insurance policy is under patient's own name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_is_subscriber_the_patient" })
  autoAccidentIsSubscriberThePatient?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_notes" })
  autoAccidentNotes?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_patient_relationship_to_subscriber" })
  autoAccidentPatientRelationshipToSubscriber?: PatientAutoAccidentInsuranceAutoAccidentPatientRelationshipToSubscriberEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_payer_address" })
  autoAccidentPayerAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_payer_city" })
  autoAccidentPayerCity?: string;

  /**
   * Auto Accident Payer ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_payer_id" })
  autoAccidentPayerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_payer_state" })
  autoAccidentPayerState?: PatientAutoAccidentInsuranceAutoAccidentPayerStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_payer_zip" })
  autoAccidentPayerZip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_policy_number" })
  autoAccidentPolicyNumber?: string;

  /**
   * If still disabled, patient should be able to return to work on
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_return_to_work_date" })
  autoAccidentReturnToWorkDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_significant_injury" })
  autoAccidentSignificantInjury?: PatientAutoAccidentInsuranceAutoAccidentSignificantInjuryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_significant_injury_notes" })
  autoAccidentSignificantInjuryNotes?: string;

  /**
   * Date of same or similar condition
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_similar_condition_date" })
  autoAccidentSimilarConditionDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_similar_condition_notes" })
  autoAccidentSimilarConditionNotes?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_state_of_occurrence" })
  autoAccidentStateOfOccurrence?: PatientAutoAccidentInsuranceAutoAccidentStateOfOccurrenceEnum;

  /**
   * Is patient still under your care for this condition?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_still_under_care" })
  autoAccidentStillUnderCare?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_address" })
  autoAccidentSubscriberAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_city" })
  autoAccidentSubscriberCity?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_date_of_birth" })
  autoAccidentSubscriberDateOfBirth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_first_name" })
  autoAccidentSubscriberFirstName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_last_name" })
  autoAccidentSubscriberLastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_middle_name" })
  autoAccidentSubscriberMiddleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_phone_number" })
  autoAccidentSubscriberPhoneNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_social_security" })
  autoAccidentSubscriberSocialSecurity?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_state" })
  autoAccidentSubscriberState?: PatientAutoAccidentInsuranceAutoAccidentSubscriberStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_suffix" })
  autoAccidentSubscriberSuffix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_subscriber_zip_code" })
  autoAccidentSubscriberZipCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_treatment_duration" })
  autoAccidentTreatmentDuration?: string;

  /**
   * Will the patient require rehabilitation and/or occupational therapy as a result of the injuries sustained in this accident?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_will_require_therapy" })
  autoAccidentWillRequireTherapy?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_will_require_therapy_rec" })
  autoAccidentWillRequireTherapyRec?: string;
}

/**
 * Custom demographic values the patient has
 */
export class PatientCustomPatientFieldValue extends SpeakeasyBase {
  /**
   * ID of the `/api/custom_demographics` object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_type" })
  fieldType?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * One of `"blank"`, `"hispanic"`, `"not_hispanic"` or `"declined"`
 */
export enum PatientEthnicityEnum {
  Blank = "blank",
  Hispanic = "hispanic",
  NotHispanic = "not_hispanic",
  Declined = "declined",
}

/**
 * One of `"Male"`, `"Female"`, or `"Other"`
 */
export enum PatientGenderEnum {
  Unknown = "",
  Male = "Male",
  Female = "Female",
  Other = "Other",
  Unk = "UNK",
  Asku = "ASKU",
}

/**
 * Array of patien flag type objects
 */
export class PatientPatientFlagType extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * ID of doctor who owns the flag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "doctor" })
  doctor?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "priority" })
  priority?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;
}

/**
 * Array of patient flag objects
 */
export class PatientPatientFlag extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "archived" })
  archived?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * Description of the patient flag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flag_text" })
  flagText?: string;

  /**
   * ID of the associated `/api/patient_flag_types` object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flag_type" })
  flagType?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;
}

/**
 * One of `""`, `"Cash"`, `"Insurance"`, `"Insurance Out of Network"`, `"Auto Accident"` or `"Worker's Comp"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen.
 */
export enum PatientPatientPaymentProfileEnum {
  Unknown = "",
  Cash = "Cash",
  Insurance = "Insurance",
  InsuranceOutOfNetwork = "Insurance Out of Network",
  AutoAccident = "Auto Accident",
  WorkerSComp = "Worker's Comp",
}

/**
 * One of `"A"` (active), `"I"` (inactive), `"D"` (inactive-deceased)
 */
export enum PatientPatientStatusEnum {
  A = "A",
  I = "I",
  D = "D",
}

/**
 * Use ISO 639 alpha-3 codes
 */
export enum PatientPreferredLanguageEnum {
  Blank = "blank",
  Eng = "eng",
  Zho = "zho",
  Fra = "fra",
  Ita = "ita",
  Jpn = "jpn",
  Por = "por",
  Rus = "rus",
  Spa = "spa",
  Other = "other",
  Unknown = "unknown",
  Declined = "declined",
}

export enum PatientPrimaryInsuranceInsurancePlanTypeEnum {
  Unknown = "",
  Am = "AM",
  Bl = "BL",
  Ch = "CH",
  Ci = "CI",
  Seventeen = "17",
  Ds = "DS",
  Fourteen = "14",
  Fi = "FI",
  Hm = "HM",
  Sixteen = "16",
  Fifteen = "15",
  Lm = "LM",
  Mc = "MC",
  Ma = "MA",
  Mb = "MB",
  Zz = "ZZ",
  Of = "OF",
  Eleven = "11",
  Thirteen = "13",
  Twelve = "12",
  Tv = "TV",
  Va = "VA",
  Wc = "WC",
}

/**
 * HCFA/1500 individual relationship code
 */
export enum PatientPrimaryInsurancePatientRelationshipToSubscriberEnum {
  Unknown = "",
  One = "01",
  Four = "04",
  Five = "05",
  Seven = "07",
  Ten = "10",
  Fifteen = "15",
  Seventeen = "17",
  Nineteen = "19",
  Twenty = "20",
  TwentyOne = "21",
  TwentyTwo = "22",
  TwentyThree = "23",
  TwentyFour = "24",
  TwentyNine = "29",
  ThirtyTwo = "32",
  ThirtyThree = "33",
  ThirtySix = "36",
  ThirtyNine = "39",
  Forty = "40",
  FortyOne = "41",
  FortyThree = "43",
  FiftyThree = "53",
  SeventySix = "76",
  G8 = "G8",
}

/**
 * Two-letter country code
 */
export enum PatientPrimaryInsuranceSubscriberCountryEnum {
  Unknown = "",
  Af = "AF",
  Ax = "AX",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Ci = "CI",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Cym = "CYM",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Xk = "XK",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Re = "RE",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
}

/**
 * One of `"Male"` or `"Female"`
 */
export enum PatientPrimaryInsuranceSubscriberGenderEnum {
  Unknown = "",
  Male = "Male",
  Female = "Female",
  Other = "Other",
  Unk = "UNK",
  Asku = "ASKU",
}

/**
 * Two-letter state code
 */
export enum PatientPrimaryInsuranceSubscriberStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

/**
 * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
 */
export class PatientPrimaryInsurance extends SpeakeasyBase {
  /**
   * Insurance office phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_claim_office_number" })
  insuranceClaimOfficeNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_company" })
  insuranceCompany?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_name" })
  insuranceGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_number" })
  insuranceGroupNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_id_number" })
  insuranceIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_payer_id" })
  insurancePayerId?: string;

  /**
   * Name of insurance plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_name" })
  insurancePlanName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_type" })
  insurancePlanType?: PatientPrimaryInsuranceInsurancePlanTypeEnum;

  /**
   * True if the insurance policy is under patient's own name. Defaults to true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_subscriber_the_patient" })
  isSubscriberThePatient?: boolean;

  /**
   * HCFA/1500 individual relationship code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_relationship_to_subscriber" })
  patientRelationshipToSubscriber?: PatientPrimaryInsurancePatientRelationshipToSubscriberEnum;

  /**
   * Photo of back of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_back" })
  photoBack?: string;

  /**
   * Photo of front of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_front" })
  photoFront?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_address" })
  subscriberAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_city" })
  subscriberCity?: string;

  /**
   * Two-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_country" })
  subscriberCountry?: PatientPrimaryInsuranceSubscriberCountryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_date_of_birth" })
  subscriberDateOfBirth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_first_name" })
  subscriberFirstName?: string;

  /**
   * One of `"Male"` or `"Female"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_gender" })
  subscriberGender?: PatientPrimaryInsuranceSubscriberGenderEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_last_name" })
  subscriberLastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_middle_name" })
  subscriberMiddleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_social_security" })
  subscriberSocialSecurity?: string;

  /**
   * Two-letter state code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_state" })
  subscriberState?: PatientPrimaryInsuranceSubscriberStateEnum;

  /**
   * E.g. `"II"` or `"III"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_suffix" })
  subscriberSuffix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_zip_code" })
  subscriberZipCode?: string;
}

/**
 * One of `"blank"`, `"indian"`, `"asian"`, `"black"`, `"hawaiian"`, `"white"` or `"declined"`
 */
export enum PatientRaceEnum {
  Blank = "blank",
  Indian = "indian",
  Asian = "asian",
  Black = "black",
  Hawaiian = "hawaiian",
  White = "white",
  Other = "other",
  Declined = "declined",
}

/**
 * Can be one of following, `''`, `'0B'`(State License #), `'1G'`(Provider UPIN #), `'G2'`(Provider Commercial #)
 */
export enum PatientPatientProviderQualifierEnum {
  Unknown = "",
  ZeroB = "0B",
  OneG = "1G",
  G2 = "G2",
}

/**
 * Can be one of following, `''`, `'Acupuncture'`, `'Advanced Practice Midwife'`, `'Aesthetic Medicine'`, `'Aesthetician'`, `'Allergist/Immunologist'`, `'Anesthesiologist'`, `'Cardiac Electrophysiologist'`, `'Cardiologist'`, `'Cardiothoracic Surgeon'`, `'Child/Adolescent Psychiatry'`, `'Chiropractor'`, `'Clinical Social Worker'`, `'Colorectal Surgeon'`, `'Correactology'`, `'Cosmetic Medicine'`, `'Counselor Mental Health'`, `'Counselor Professional'`, `'Counselor'`, `'Dentist'`, `'Diabetology'`, `'Dermatologist'`, `'Diagnostic Medical Sonographer'`, `'Dietitian, Registered'`, `'Ear-Nose-Throat Specialist (ENT)'`, `'Emergency Medicine Physician'`, `'Endocrinologist'`, `'Endodontist'`, `'Epidemiologist'`, `'Family Practitioner'`, `'Gastroenterologist'`, `'General Practice'`, `'General Surgeon'`, `'Geneticist'`, `'Geriatrician'`, `'Gerontologist'`, `'Gynecologist (no OB)'`, `'Gynegologic Oncologist'`, `'Hand Surgeon'`, `'Hematologist'`, `'Home Care'`, `'Hospice'`, `'Hospitalist'`, `'Infectious Disease Specialist'`, `'Integrative and Functional Medicine'`, `'Integrative Medicine'`, `'Internist'`, `'Interventional Radiology'`, `'Laboratory Medicine Specialist'`, `'Laser Surgery'`, `'Massage Therapist'`, `'Naturopathic Physician'`, `'Neonatologist'`, `'Nephrologist'`, `'Neurologist'`, `'Neuropsychology'`, `'Neurosurgeon'`, `'Not Actively Practicing'`, `'Nuclear Medicine Specialist'`, `'Nurse Practitioner'`, `'Nursing'`, `'Nutritionist'`, `'Obstetrician/Gynecologist'`, `'Occupational Medicine'`, `'Occupational Therapist'`, `'Oncologist'`, `'Ophthalmologist'`, `'Optometrist'`, `'Oral Surgeon'`, `'Orofacial Pain'`, `'Orthodontist'`, `'Orthopedic Surgeon'`, `'Orthotist'`, `'Other'`, `'Pain Management Specialist'`, `'Pathologist'`, `'Pediatric Dentist'`, `'Pediatric Gastroenterology'`, `'Pediatric Surgeon'`, `'Pediatrician'`, `'Perinatologist'`, `'Periodontist'`, `'Physical Medicine and Rehab Specialist'`, `'Physical Therapist'`, `'Physician Assistant'`, `'Plastic Surgeon'`, `'Podiatrist'`, `'Preventive-Aging Medicine'`, `'Preventive Medicine/Occupational-Environmental Medicine'`, `'Primary Care Physician'`, `'Prosthetist'`, `'Prosthodontist'`, `'Psychiatrist'`, `'Psychologist'`, `'Public Health Professional'`, `'Pulmonologist'`, `'Radiation Oncologist'`, `'Radiologist'`, `'Registered Nurse'`, `'Religious Nonmedical Practitioner'`, `'Reproductive Endocrinologist'`, `'Reproductive Medicine'`, `'Rheumatologist'`, `'Sleep Medicine'`, `'Speech-Language Pathologist'`, `'Sports Medicine Specialist'`, `'Urologist'`, `'Urgent Care'`, `'Vascular Surgeon'`
 */
export enum PatientPatientSpecialtyEnum {
  Unknown = "",
  Acupuncture = "Acupuncture",
  AdvancedPracticeMidwife = "Advanced Practice Midwife",
  AestheticMedicine = "Aesthetic Medicine",
  Aesthetician = "Aesthetician",
  AllergistImmunologist = "Allergist/Immunologist",
  Anesthesiologist = "Anesthesiologist",
  CardiacElectrophysiologist = "Cardiac Electrophysiologist",
  Cardiologist = "Cardiologist",
  CardiothoracicSurgeon = "Cardiothoracic Surgeon",
  ChildAdolescentPsychiatry = "Child/Adolescent Psychiatry",
  Chiropractor = "Chiropractor",
  ClinicalSocialWorker = "Clinical Social Worker",
  ColorectalSurgeon = "Colorectal Surgeon",
  Correactology = "Correactology",
  CosmeticMedicine = "Cosmetic Medicine",
  CounselorMentalHealth = "Counselor Mental Health",
  CounselorProfessional = "Counselor Professional",
  Counselor = "Counselor",
  Dentist = "Dentist",
  Diabetology = "Diabetology",
  Dermatologist = "Dermatologist",
  DiagnosticMedicalSonographer = "Diagnostic Medical Sonographer",
  DietitianRegistered = "Dietitian, Registered",
  EarNoseThroatSpecialistENT = "Ear-Nose-Throat Specialist (ENT)",
  EmergencyMedicinePhysician = "Emergency Medicine Physician",
  Endocrinologist = "Endocrinologist",
  Endodontist = "Endodontist",
  Epidemiologist = "Epidemiologist",
  FamilyPractitioner = "Family Practitioner",
  Gastroenterologist = "Gastroenterologist",
  GeneralPractice = "General Practice",
  GeneralSurgeon = "General Surgeon",
  Geneticist = "Geneticist",
  Geriatrician = "Geriatrician",
  Gerontologist = "Gerontologist",
  GynecologistNoOB = "Gynecologist (no OB)",
  GynegologicOncologist = "Gynegologic Oncologist",
  HandSurgeon = "Hand Surgeon",
  Hematologist = "Hematologist",
  HomeCare = "Home Care",
  Hospice = "Hospice",
  Hospitalist = "Hospitalist",
  InfectiousDiseaseSpecialist = "Infectious Disease Specialist",
  IntegrativeAndFunctionalMedicine = "Integrative and Functional Medicine",
  IntegrativeMedicine = "Integrative Medicine",
  Internist = "Internist",
  InterventionalRadiology = "Interventional Radiology",
  LaboratoryMedicineSpecialist = "Laboratory Medicine Specialist",
  LaserSurgery = "Laser Surgery",
  MassageTherapist = "Massage Therapist",
  NaturopathicPhysician = "Naturopathic Physician",
  Neonatologist = "Neonatologist",
  Nephrologist = "Nephrologist",
  Neurologist = "Neurologist",
  Neuropsychology = "Neuropsychology",
  Neurosurgeon = "Neurosurgeon",
  NotActivelyPracticing = "Not Actively Practicing",
  NuclearMedicineSpecialist = "Nuclear Medicine Specialist",
  NursePractitioner = "Nurse Practitioner",
  Nursing = "Nursing",
  Nutritionist = "Nutritionist",
  ObstetricianGynecologist = "Obstetrician/Gynecologist",
  OccupationalMedicine = "Occupational Medicine",
  OccupationalTherapist = "Occupational Therapist",
  Oncologist = "Oncologist",
  Ophthalmologist = "Ophthalmologist",
  Optometrist = "Optometrist",
  OralSurgeon = "Oral Surgeon",
  OrofacialPain = "Orofacial Pain",
  Orthodontist = "Orthodontist",
  OrthopedicSurgeon = "Orthopedic Surgeon",
  Orthotist = "Orthotist",
  Other = "Other",
  PainManagementSpecialist = "Pain Management Specialist",
  Pathologist = "Pathologist",
  PediatricDentist = "Pediatric Dentist",
  PediatricGastroenterology = "Pediatric Gastroenterology",
  PediatricSurgeon = "Pediatric Surgeon",
  Pediatrician = "Pediatrician",
  Perinatologist = "Perinatologist",
  Periodontist = "Periodontist",
  PhysicalMedicineAndRehabSpecialist = "Physical Medicine and Rehab Specialist",
  PhysicalTherapist = "Physical Therapist",
  PhysicianAssistant = "Physician Assistant",
  PlasticSurgeon = "Plastic Surgeon",
  Podiatrist = "Podiatrist",
  PreventiveAgingMedicine = "Preventive-Aging Medicine",
  PreventiveMedicineOccupationalEnvironmentalMedicine = "Preventive Medicine/Occupational-Environmental Medicine",
  PrimaryCarePhysician = "Primary Care Physician",
  Prosthetist = "Prosthetist",
  Prosthodontist = "Prosthodontist",
  Psychiatrist = "Psychiatrist",
  Psychologist = "Psychologist",
  PublicHealthProfessional = "Public Health Professional",
  Pulmonologist = "Pulmonologist",
  RadiationOncologist = "Radiation Oncologist",
  Radiologist = "Radiologist",
  RegisteredNurse = "Registered Nurse",
  ReligiousNonmedicalPractitioner = "Religious Nonmedical Practitioner",
  ReproductiveEndocrinologist = "Reproductive Endocrinologist",
  ReproductiveMedicine = "Reproductive Medicine",
  Rheumatologist = "Rheumatologist",
  SleepMedicine = "Sleep Medicine",
  SpeechLanguagePathologist = "Speech-Language Pathologist",
  SportsMedicineSpecialist = "Sports Medicine Specialist",
  Urologist = "Urologist",
  UrgentCare = "Urgent Care",
  VascularSurgeon = "Vascular Surgeon",
}

export class PatientPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Should follow format "xxx-xx-xxxx"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fax" })
  fax?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "npi" })
  npi?: string;

  /**
   * Should follow format "xxx-xx-xxxx"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provider_number" })
  providerNumber?: string;

  /**
   * Can be one of following, `''`, `'0B'`(State License #), `'1G'`(Provider UPIN #), `'G2'`(Provider Commercial #)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provider_qualifier" })
  providerQualifier?: PatientPatientProviderQualifierEnum;

  /**
   * Can be one of following, `''`, `'Acupuncture'`, `'Advanced Practice Midwife'`, `'Aesthetic Medicine'`, `'Aesthetician'`, `'Allergist/Immunologist'`, `'Anesthesiologist'`, `'Cardiac Electrophysiologist'`, `'Cardiologist'`, `'Cardiothoracic Surgeon'`, `'Child/Adolescent Psychiatry'`, `'Chiropractor'`, `'Clinical Social Worker'`, `'Colorectal Surgeon'`, `'Correactology'`, `'Cosmetic Medicine'`, `'Counselor Mental Health'`, `'Counselor Professional'`, `'Counselor'`, `'Dentist'`, `'Diabetology'`, `'Dermatologist'`, `'Diagnostic Medical Sonographer'`, `'Dietitian, Registered'`, `'Ear-Nose-Throat Specialist (ENT)'`, `'Emergency Medicine Physician'`, `'Endocrinologist'`, `'Endodontist'`, `'Epidemiologist'`, `'Family Practitioner'`, `'Gastroenterologist'`, `'General Practice'`, `'General Surgeon'`, `'Geneticist'`, `'Geriatrician'`, `'Gerontologist'`, `'Gynecologist (no OB)'`, `'Gynegologic Oncologist'`, `'Hand Surgeon'`, `'Hematologist'`, `'Home Care'`, `'Hospice'`, `'Hospitalist'`, `'Infectious Disease Specialist'`, `'Integrative and Functional Medicine'`, `'Integrative Medicine'`, `'Internist'`, `'Interventional Radiology'`, `'Laboratory Medicine Specialist'`, `'Laser Surgery'`, `'Massage Therapist'`, `'Naturopathic Physician'`, `'Neonatologist'`, `'Nephrologist'`, `'Neurologist'`, `'Neuropsychology'`, `'Neurosurgeon'`, `'Not Actively Practicing'`, `'Nuclear Medicine Specialist'`, `'Nurse Practitioner'`, `'Nursing'`, `'Nutritionist'`, `'Obstetrician/Gynecologist'`, `'Occupational Medicine'`, `'Occupational Therapist'`, `'Oncologist'`, `'Ophthalmologist'`, `'Optometrist'`, `'Oral Surgeon'`, `'Orofacial Pain'`, `'Orthodontist'`, `'Orthopedic Surgeon'`, `'Orthotist'`, `'Other'`, `'Pain Management Specialist'`, `'Pathologist'`, `'Pediatric Dentist'`, `'Pediatric Gastroenterology'`, `'Pediatric Surgeon'`, `'Pediatrician'`, `'Perinatologist'`, `'Periodontist'`, `'Physical Medicine and Rehab Specialist'`, `'Physical Therapist'`, `'Physician Assistant'`, `'Plastic Surgeon'`, `'Podiatrist'`, `'Preventive-Aging Medicine'`, `'Preventive Medicine/Occupational-Environmental Medicine'`, `'Primary Care Physician'`, `'Prosthetist'`, `'Prosthodontist'`, `'Psychiatrist'`, `'Psychologist'`, `'Public Health Professional'`, `'Pulmonologist'`, `'Radiation Oncologist'`, `'Radiologist'`, `'Registered Nurse'`, `'Religious Nonmedical Practitioner'`, `'Reproductive Endocrinologist'`, `'Reproductive Medicine'`, `'Rheumatologist'`, `'Sleep Medicine'`, `'Speech-Language Pathologist'`, `'Sports Medicine Specialist'`, `'Urologist'`, `'Urgent Care'`, `'Vascular Surgeon'`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "specialty" })
  specialty?: PatientPatientSpecialtyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "suffix" })
  suffix?: string;
}

export enum PatientSecondaryInsuranceInsurancePlanTypeEnum {
  Unknown = "",
  Am = "AM",
  Bl = "BL",
  Ch = "CH",
  Ci = "CI",
  Seventeen = "17",
  Ds = "DS",
  Fourteen = "14",
  Fi = "FI",
  Hm = "HM",
  Sixteen = "16",
  Fifteen = "15",
  Lm = "LM",
  Mc = "MC",
  Ma = "MA",
  Mb = "MB",
  Zz = "ZZ",
  Of = "OF",
  Eleven = "11",
  Thirteen = "13",
  Twelve = "12",
  Tv = "TV",
  Va = "VA",
  Wc = "WC",
}

/**
 * HCFA/1500 individual relationship code
 */
export enum PatientSecondaryInsurancePatientRelationshipToSubscriberEnum {
  Unknown = "",
  One = "01",
  Four = "04",
  Five = "05",
  Seven = "07",
  Ten = "10",
  Fifteen = "15",
  Seventeen = "17",
  Nineteen = "19",
  Twenty = "20",
  TwentyOne = "21",
  TwentyTwo = "22",
  TwentyThree = "23",
  TwentyFour = "24",
  TwentyNine = "29",
  ThirtyTwo = "32",
  ThirtyThree = "33",
  ThirtySix = "36",
  ThirtyNine = "39",
  Forty = "40",
  FortyOne = "41",
  FortyThree = "43",
  FiftyThree = "53",
  SeventySix = "76",
  G8 = "G8",
}

/**
 * Two-letter country code
 */
export enum PatientSecondaryInsuranceSubscriberCountryEnum {
  Unknown = "",
  Af = "AF",
  Ax = "AX",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Ci = "CI",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Cym = "CYM",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Xk = "XK",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Re = "RE",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
}

/**
 * One of `"Male"` or `"Female"`
 */
export enum PatientSecondaryInsuranceSubscriberGenderEnum {
  Unknown = "",
  Male = "Male",
  Female = "Female",
  Other = "Other",
  Unk = "UNK",
  Asku = "ASKU",
}

/**
 * Two-letter state code
 */
export enum PatientSecondaryInsuranceSubscriberStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

/**
 * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
 */
export class PatientSecondaryInsurance extends SpeakeasyBase {
  /**
   * Insurance office phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_claim_office_number" })
  insuranceClaimOfficeNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_company" })
  insuranceCompany?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_name" })
  insuranceGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_number" })
  insuranceGroupNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_id_number" })
  insuranceIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_payer_id" })
  insurancePayerId?: string;

  /**
   * Name of insurance plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_name" })
  insurancePlanName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_type" })
  insurancePlanType?: PatientSecondaryInsuranceInsurancePlanTypeEnum;

  /**
   * True if the insurance policy is under patient's own name. Defaults to true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_subscriber_the_patient" })
  isSubscriberThePatient?: boolean;

  /**
   * HCFA/1500 individual relationship code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_relationship_to_subscriber" })
  patientRelationshipToSubscriber?: PatientSecondaryInsurancePatientRelationshipToSubscriberEnum;

  /**
   * Photo of back of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_back" })
  photoBack?: string;

  /**
   * Photo of front of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_front" })
  photoFront?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_address" })
  subscriberAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_city" })
  subscriberCity?: string;

  /**
   * Two-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_country" })
  subscriberCountry?: PatientSecondaryInsuranceSubscriberCountryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_date_of_birth" })
  subscriberDateOfBirth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_first_name" })
  subscriberFirstName?: string;

  /**
   * One of `"Male"` or `"Female"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_gender" })
  subscriberGender?: PatientSecondaryInsuranceSubscriberGenderEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_last_name" })
  subscriberLastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_middle_name" })
  subscriberMiddleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_social_security" })
  subscriberSocialSecurity?: string;

  /**
   * Two-letter state code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_state" })
  subscriberState?: PatientSecondaryInsuranceSubscriberStateEnum;

  /**
   * E.g. `"II"` or `"III"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_suffix" })
  subscriberSuffix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_zip_code" })
  subscriberZipCode?: string;
}

export enum PatientTertiaryInsuranceInsurancePlanTypeEnum {
  Unknown = "",
  Am = "AM",
  Bl = "BL",
  Ch = "CH",
  Ci = "CI",
  Seventeen = "17",
  Ds = "DS",
  Fourteen = "14",
  Fi = "FI",
  Hm = "HM",
  Sixteen = "16",
  Fifteen = "15",
  Lm = "LM",
  Mc = "MC",
  Ma = "MA",
  Mb = "MB",
  Zz = "ZZ",
  Of = "OF",
  Eleven = "11",
  Thirteen = "13",
  Twelve = "12",
  Tv = "TV",
  Va = "VA",
  Wc = "WC",
}

/**
 * HCFA/1500 individual relationship code
 */
export enum PatientTertiaryInsurancePatientRelationshipToSubscriberEnum {
  Unknown = "",
  One = "01",
  Four = "04",
  Five = "05",
  Seven = "07",
  Ten = "10",
  Fifteen = "15",
  Seventeen = "17",
  Nineteen = "19",
  Twenty = "20",
  TwentyOne = "21",
  TwentyTwo = "22",
  TwentyThree = "23",
  TwentyFour = "24",
  TwentyNine = "29",
  ThirtyTwo = "32",
  ThirtyThree = "33",
  ThirtySix = "36",
  ThirtyNine = "39",
  Forty = "40",
  FortyOne = "41",
  FortyThree = "43",
  FiftyThree = "53",
  SeventySix = "76",
  G8 = "G8",
}

/**
 * Two-letter country code
 */
export enum PatientTertiaryInsuranceSubscriberCountryEnum {
  Unknown = "",
  Af = "AF",
  Ax = "AX",
  Al = "AL",
  Dz = "DZ",
  As = "AS",
  Ad = "AD",
  Ao = "AO",
  Ai = "AI",
  Aq = "AQ",
  Ag = "AG",
  Ar = "AR",
  Am = "AM",
  Aw = "AW",
  Au = "AU",
  At = "AT",
  Az = "AZ",
  Bs = "BS",
  Bh = "BH",
  Bd = "BD",
  Bb = "BB",
  By = "BY",
  Be = "BE",
  Bz = "BZ",
  Bj = "BJ",
  Bm = "BM",
  Bt = "BT",
  Bo = "BO",
  Bq = "BQ",
  Ba = "BA",
  Bw = "BW",
  Bv = "BV",
  Br = "BR",
  Io = "IO",
  Bn = "BN",
  Bg = "BG",
  Bf = "BF",
  Bi = "BI",
  Kh = "KH",
  Cm = "CM",
  Ca = "CA",
  Cv = "CV",
  Ky = "KY",
  Cf = "CF",
  Td = "TD",
  Cl = "CL",
  Cn = "CN",
  Cx = "CX",
  Cc = "CC",
  Co = "CO",
  Km = "KM",
  Cg = "CG",
  Cd = "CD",
  Ck = "CK",
  Cr = "CR",
  Ci = "CI",
  Hr = "HR",
  Cu = "CU",
  Cw = "CW",
  Cy = "CY",
  Cz = "CZ",
  Cym = "CYM",
  Dk = "DK",
  Dj = "DJ",
  Dm = "DM",
  Do = "DO",
  Ec = "EC",
  Eg = "EG",
  Sv = "SV",
  Gq = "GQ",
  Er = "ER",
  Ee = "EE",
  Et = "ET",
  Fk = "FK",
  Fo = "FO",
  Fj = "FJ",
  Fi = "FI",
  Fr = "FR",
  Gf = "GF",
  Pf = "PF",
  Tf = "TF",
  Ga = "GA",
  Gm = "GM",
  Ge = "GE",
  De = "DE",
  Gh = "GH",
  Gi = "GI",
  Gr = "GR",
  Gl = "GL",
  Gd = "GD",
  Gp = "GP",
  Gu = "GU",
  Gt = "GT",
  Gg = "GG",
  Gn = "GN",
  Gw = "GW",
  Gy = "GY",
  Ht = "HT",
  Hm = "HM",
  Va = "VA",
  Hn = "HN",
  Hk = "HK",
  Hu = "HU",
  Is = "IS",
  In = "IN",
  Id = "ID",
  Ir = "IR",
  Iq = "IQ",
  Ie = "IE",
  Im = "IM",
  Il = "IL",
  It = "IT",
  Jm = "JM",
  Jp = "JP",
  Je = "JE",
  Jo = "JO",
  Kz = "KZ",
  Ke = "KE",
  Ki = "KI",
  Kp = "KP",
  Kr = "KR",
  Xk = "XK",
  Kw = "KW",
  Kg = "KG",
  La = "LA",
  Lv = "LV",
  Lb = "LB",
  Ls = "LS",
  Lr = "LR",
  Ly = "LY",
  Li = "LI",
  Lt = "LT",
  Lu = "LU",
  Mo = "MO",
  Mk = "MK",
  Mg = "MG",
  Mw = "MW",
  My = "MY",
  Mv = "MV",
  Ml = "ML",
  Mt = "MT",
  Mh = "MH",
  Mq = "MQ",
  Mr = "MR",
  Mu = "MU",
  Yt = "YT",
  Mx = "MX",
  Fm = "FM",
  Md = "MD",
  Mc = "MC",
  Mn = "MN",
  Me = "ME",
  Ms = "MS",
  Ma = "MA",
  Mz = "MZ",
  Mm = "MM",
  Na = "NA",
  Nr = "NR",
  Np = "NP",
  Nl = "NL",
  Nc = "NC",
  Nz = "NZ",
  Ni = "NI",
  Ne = "NE",
  Ng = "NG",
  Nu = "NU",
  Nf = "NF",
  Mp = "MP",
  No = "NO",
  Om = "OM",
  Pk = "PK",
  Pw = "PW",
  Ps = "PS",
  Pa = "PA",
  Pg = "PG",
  Py = "PY",
  Pe = "PE",
  Ph = "PH",
  Pn = "PN",
  Pl = "PL",
  Pt = "PT",
  Pr = "PR",
  Qa = "QA",
  Re = "RE",
  Ro = "RO",
  Ru = "RU",
  Rw = "RW",
  Bl = "BL",
  Sh = "SH",
  Kn = "KN",
  Lc = "LC",
  Mf = "MF",
  Pm = "PM",
  Vc = "VC",
  Ws = "WS",
  Sm = "SM",
  St = "ST",
  Sa = "SA",
  Sn = "SN",
  Rs = "RS",
  Sc = "SC",
  Sl = "SL",
  Sg = "SG",
  Sx = "SX",
  Sk = "SK",
  Si = "SI",
  Sb = "SB",
  So = "SO",
  Za = "ZA",
  Gs = "GS",
  Ss = "SS",
  Es = "ES",
  Lk = "LK",
  Sd = "SD",
  Sr = "SR",
  Sj = "SJ",
  Sz = "SZ",
  Se = "SE",
  Ch = "CH",
  Sy = "SY",
  Tw = "TW",
  Tj = "TJ",
  Tz = "TZ",
  Th = "TH",
  Tl = "TL",
  Tg = "TG",
  Tk = "TK",
  To = "TO",
  Tt = "TT",
  Tn = "TN",
  Tr = "TR",
  Tm = "TM",
  Tc = "TC",
  Tv = "TV",
  Ug = "UG",
  Ua = "UA",
  Ae = "AE",
  Gb = "GB",
  Us = "US",
  Um = "UM",
  Uy = "UY",
  Uz = "UZ",
  Vu = "VU",
  Ve = "VE",
  Vn = "VN",
  Vg = "VG",
  Vi = "VI",
  Wf = "WF",
  Eh = "EH",
  Ye = "YE",
  Zm = "ZM",
  Zw = "ZW",
}

/**
 * One of `"Male"` or `"Female"`
 */
export enum PatientTertiaryInsuranceSubscriberGenderEnum {
  Unknown = "",
  Male = "Male",
  Female = "Female",
  Other = "Other",
  Unk = "UNK",
  Asku = "ASKU",
}

/**
 * Two-letter state code
 */
export enum PatientTertiaryInsuranceSubscriberStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

/**
 * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
 */
export class PatientTertiaryInsurance extends SpeakeasyBase {
  /**
   * Insurance office phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_claim_office_number" })
  insuranceClaimOfficeNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_company" })
  insuranceCompany?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_name" })
  insuranceGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_group_number" })
  insuranceGroupNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_id_number" })
  insuranceIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_payer_id" })
  insurancePayerId?: string;

  /**
   * Name of insurance plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_name" })
  insurancePlanName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insurance_plan_type" })
  insurancePlanType?: PatientTertiaryInsuranceInsurancePlanTypeEnum;

  /**
   * True if the insurance policy is under patient's own name. Defaults to true
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_subscriber_the_patient" })
  isSubscriberThePatient?: boolean;

  /**
   * HCFA/1500 individual relationship code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_relationship_to_subscriber" })
  patientRelationshipToSubscriber?: PatientTertiaryInsurancePatientRelationshipToSubscriberEnum;

  /**
   * Photo of back of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_back" })
  photoBack?: string;

  /**
   * Photo of front of insurance card
   */
  @SpeakeasyMetadata()
  @Expose({ name: "photo_front" })
  photoFront?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_address" })
  subscriberAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_city" })
  subscriberCity?: string;

  /**
   * Two-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_country" })
  subscriberCountry?: PatientTertiaryInsuranceSubscriberCountryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_date_of_birth" })
  subscriberDateOfBirth?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_first_name" })
  subscriberFirstName?: string;

  /**
   * One of `"Male"` or `"Female"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_gender" })
  subscriberGender?: PatientTertiaryInsuranceSubscriberGenderEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_last_name" })
  subscriberLastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_middle_name" })
  subscriberMiddleName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_social_security" })
  subscriberSocialSecurity?: string;

  /**
   * Two-letter state code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_state" })
  subscriberState?: PatientTertiaryInsuranceSubscriberStateEnum;

  /**
   * E.g. `"II"` or `"III"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_suffix" })
  subscriberSuffix?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriber_zip_code" })
  subscriberZipCode?: string;
}

export enum PatientWorkerCompInsuranceWorkersCompPayerStateEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export enum PatientWorkerCompInsuranceWorkersCompStateOfOccurrenceEnum {
  Al = "AL",
  Ak = "AK",
  As = "AS",
  Az = "AZ",
  Ar = "AR",
  Aa = "AA",
  Ae = "AE",
  Ap = "AP",
  Ca = "CA",
  Co = "CO",
  Ct = "CT",
  De = "DE",
  Dc = "DC",
  Fl = "FL",
  Ga = "GA",
  Gu = "GU",
  Hi = "HI",
  Id = "ID",
  Il = "IL",
  In = "IN",
  Ia = "IA",
  Ks = "KS",
  Ky = "KY",
  La = "LA",
  Me = "ME",
  Md = "MD",
  Ma = "MA",
  Mi = "MI",
  Mn = "MN",
  Ms = "MS",
  Mo = "MO",
  Mt = "MT",
  Ne = "NE",
  Nv = "NV",
  Nh = "NH",
  Nj = "NJ",
  Nm = "NM",
  Ny = "NY",
  Nc = "NC",
  Nd = "ND",
  Mp = "MP",
  Oh = "OH",
  Ok = "OK",
  Or = "OR",
  Pa = "PA",
  Pr = "PR",
  Ri = "RI",
  Sc = "SC",
  Sd = "SD",
  Tn = "TN",
  Tx = "TX",
  Ut = "UT",
  Vt = "VT",
  Vi = "VI",
  Va = "VA",
  Wa = "WA",
  Wv = "WV",
  Wi = "WI",
  Wy = "WY",
}

export class PatientWorkerCompInsurance extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "property_and_casualty_agency_claim_number" })
  propertyAndCasualtyAgencyClaimNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_carrier_code" })
  workersCompCarrierCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_case_number" })
  workersCompCaseNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_company" })
  workersCompCompany?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_date_of_accident" })
  workersCompDateOfAccident?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_group_name" })
  workersCompGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_group_number" })
  workersCompGroupNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_notes" })
  workersCompNotes?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_payer_address" })
  workersCompPayerAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_payer_city" })
  workersCompPayerCity?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_payer_id" })
  workersCompPayerId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_payer_state" })
  workersCompPayerState?: PatientWorkerCompInsuranceWorkersCompPayerStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_payer_zip" })
  workersCompPayerZip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_state_of_occurrence" })
  workersCompStateOfOccurrence?: PatientWorkerCompInsuranceWorkersCompStateOfOccurrenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_wcb" })
  workersCompWcb?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_wcb_rating_code" })
  workersCompWcbRatingCode?: string;
}

/**
 * Created
 */
export class Patient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "auto_accident_insurance" })
  @Type(() => PatientAutoAccidentInsurance)
  autoAccidentInsurance?: PatientAutoAccidentInsurance;

  @SpeakeasyMetadata()
  @Expose({ name: "cell_phone" })
  cellPhone?: string;

  /**
   * Automatically set using first & last name if absent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chart_id" })
  chartId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "copay" })
  copay?: string;

  @SpeakeasyMetadata({ elemType: PatientCustomPatientFieldValue })
  @Expose({ name: "custom_demographics" })
  @Type(() => PatientCustomPatientFieldValue)
  customDemographics?: PatientCustomPatientFieldValue[];

  @SpeakeasyMetadata()
  @Expose({ name: "date_of_birth" })
  dateOfBirth?: string;

  /**
   * Date of first patient visit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_first_appointment" })
  dateOfFirstAppointment?: string;

  /**
   * Date of previous patient visit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_of_last_appointment" })
  dateOfLastAppointment?: string;

  /**
   * ncpdp id of patient's default pharmacy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_pharmacy" })
  defaultPharmacy?: string;

  /**
   * If True, suppress SMS/Txt messages to this patient even if we have a cell phone # for them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disable_sms_messages" })
  disableSmsMessages?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "doctor" })
  doctor: number;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "emergency_contact_name" })
  emergencyContactName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "emergency_contact_phone" })
  emergencyContactPhone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "emergency_contact_relation" })
  emergencyContactRelation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employer" })
  employer?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employer_address" })
  employerAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employer_city" })
  employerCity?: string;

  /**
   * Two-letter abbreviation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "employer_state" })
  employerState?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "employer_zip_code" })
  employerZipCode?: string;

  /**
   * One of `"blank"`, `"hispanic"`, `"not_hispanic"` or `"declined"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ethnicity" })
  ethnicity?: PatientEthnicityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "first_name" })
  firstName?: string;

  /**
   * One of `"Male"`, `"Female"`, or `"Other"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gender" })
  gender: PatientGenderEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "home_phone" })
  homePhone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_name" })
  lastName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "middle_name" })
  middleName?: string;

  /**
   * Common name for patient, should be used instead of first name if supplied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nick_name" })
  nickName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "office_phone" })
  officePhone?: string;

  /**
   * IDs of every office this patient has been to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offices" })
  offices?: number[];

  /**
   * Possible patient flag type that can be attached to the patient
   */
  @SpeakeasyMetadata({ elemType: PatientPatientFlagType })
  @Expose({ name: "patient_flags" })
  @Type(() => PatientPatientFlagType)
  patientFlags?: PatientPatientFlagType[];

  /**
   * Patient flags attached to the patient
   */
  @SpeakeasyMetadata({ elemType: PatientPatientFlag })
  @Expose({ name: "patient_flags_attached" })
  @Type(() => PatientPatientFlag)
  patientFlagsAttached?: PatientPatientFlag[];

  /**
   * One of `""`, `"Cash"`, `"Insurance"`, `"Insurance Out of Network"`, `"Auto Accident"` or `"Worker's Comp"`.<br>**Note:** Patient must already have either `primary_insurance` or `secondary_insurance` or new `primary_insurance` or `secondary_insurance` is passed in request if `Insurance`, `Auto Accident` or `Worker's Comp` payment profiles are chosen.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_payment_profile" })
  patientPaymentProfile?: PatientPatientPaymentProfileEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "patient_photo" })
  patientPhoto?: string;

  /**
   * Cannot be passed without `patient_photo`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_photo_date" })
  patientPhotoDate?: string;

  /**
   * One of `"A"` (active), `"I"` (inactive), `"D"` (inactive-deceased)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "patient_status" })
  patientStatus?: PatientPatientStatusEnum;

  /**
   * Use ISO 639 alpha-3 codes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferred_language" })
  preferredLanguage?: PatientPreferredLanguageEnum;

  /**
   * Referring doctor for this patient
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary_care_physician" })
  primaryCarePhysician?: string;

  /**
   * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primary_insurance" })
  @Type(() => PatientPrimaryInsurance)
  primaryInsurance?: PatientPrimaryInsurance;

  /**
   * One of `"blank"`, `"indian"`, `"asian"`, `"black"`, `"hawaiian"`, `"white"` or `"declined"`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "race" })
  race?: PatientRaceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "referring_doctor" })
  @Type(() => PatientPatient)
  referringDoctor?: PatientPatient;

  /**
   * Referring source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "referring_source" })
  referringSource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "responsible_party_email" })
  responsiblePartyEmail?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "responsible_party_name" })
  responsiblePartyName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "responsible_party_phone" })
  responsiblePartyPhone?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "responsible_party_relation" })
  responsiblePartyRelation?: string;

  /**
   * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondary_insurance" })
  @Type(() => PatientSecondaryInsurance)
  secondaryInsurance?: PatientSecondaryInsurance;

  @SpeakeasyMetadata()
  @Expose({ name: "social_security_number" })
  socialSecurityNumber?: string;

  /**
   * Two-letter abbreviation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  /**
   * **Warning:** Changing insurance information may make past appointments unbillable. Insurance data is also **unvalidated**; you should use the [`/api/insurances`](#apiinsurances) endpoint to find the appropriate insurance payer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tertiary_insurance" })
  @Type(() => PatientTertiaryInsurance)
  tertiaryInsurance?: PatientTertiaryInsurance;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "workers_comp_insurance" })
  @Type(() => PatientWorkerCompInsurance)
  workersCompInsurance?: PatientWorkerCompInsurance;

  @SpeakeasyMetadata()
  @Expose({ name: "zip_code" })
  zipCode?: string;
}
