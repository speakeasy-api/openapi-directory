// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListPhoneDevicesSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

// ListPhoneDevicesTypeEnum - State of the device. The value should be either `assigned` to list devices that have been assigned to user(s) or `unassigned` to list devices that have not yet been assigned to any user in the Zoom account.
type ListPhoneDevicesTypeEnum string

const (
	ListPhoneDevicesTypeEnumAssigned   ListPhoneDevicesTypeEnum = "assigned"
	ListPhoneDevicesTypeEnumUnassigned ListPhoneDevicesTypeEnum = "unassigned"
)

func (e *ListPhoneDevicesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "assigned":
		fallthrough
	case "unassigned":
		*e = ListPhoneDevicesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPhoneDevicesTypeEnum: %s", s)
	}
}

type ListPhoneDevicesQueryParams struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// State of the device. The value should be either `assigned` to list devices that have been assigned to user(s) or `unassigned` to list devices that have not yet been assigned to any user in the Zoom account.
	Type ListPhoneDevicesTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type ListPhoneDevicesRequest struct {
	QueryParams ListPhoneDevicesQueryParams
	Security    ListPhoneDevicesSecurity
}

type ListPhoneDevices200ApplicationXMLDevicesAssignee struct {
	// Extension number of the Zoom Phone used by the user.
	ExtensionNumber *int64
	// User ID of the user to whom the device has been assigned.
	ID *string
	// Name of the user.
	Name *string
}

type ListPhoneDevices200ApplicationXMLDevicesSite struct {
	// The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user.
	ID *string
	// Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672).
	Name *string
}

// ListPhoneDevices200ApplicationXMLDevicesStatusEnum - Status of the device. The value is either `online` or `offline`.
type ListPhoneDevices200ApplicationXMLDevicesStatusEnum string

const (
	ListPhoneDevices200ApplicationXMLDevicesStatusEnumOnline  ListPhoneDevices200ApplicationXMLDevicesStatusEnum = "online"
	ListPhoneDevices200ApplicationXMLDevicesStatusEnumOffline ListPhoneDevices200ApplicationXMLDevicesStatusEnum = "offline"
)

func (e *ListPhoneDevices200ApplicationXMLDevicesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "online":
		fallthrough
	case "offline":
		*e = ListPhoneDevices200ApplicationXMLDevicesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPhoneDevices200ApplicationXMLDevicesStatusEnum: %s", s)
	}
}

type ListPhoneDevices200ApplicationXMLDevices struct {
	Assignee *ListPhoneDevices200ApplicationXMLDevicesAssignee
	// Includes manufacturer name and the model name.
	DeviceType *string
	// Display name of the device.
	DisplayName *string
	// Device ID - Unique Identifier of the Device.
	ID *string
	// MAC address or serial number of the device.
	MacAddress *string
	Site       *ListPhoneDevices200ApplicationXMLDevicesSite
	// Status of the device. The value is either `online` or `offline`.
	Status *ListPhoneDevices200ApplicationXMLDevicesStatusEnum
}

// ListPhoneDevices200ApplicationXML - **HTTP Status Code:** `200`<br>
// Devices listed successfully.
type ListPhoneDevices200ApplicationXML struct {
	Devices []ListPhoneDevices200ApplicationXMLDevices
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned with a single API call.
	PageSize *int64
	// The total number of records found for the query across all pages.
	TotalRecords *string
}

type ListPhoneDevices200ApplicationJSONDevicesAssignee struct {
	// Extension number of the Zoom Phone used by the user.
	ExtensionNumber *int64 `json:"extension_number,omitempty"`
	// User ID of the user to whom the device has been assigned.
	ID *string `json:"id,omitempty"`
	// Name of the user.
	Name *string `json:"name,omitempty"`
}

type ListPhoneDevices200ApplicationJSONDevicesSite struct {
	// The [site](https://support.zoom.us/hc/en-us/articles/360020809672) of the phone user.
	ID *string `json:"id,omitempty"`
	// Name of the [site](https://support.zoom.us/hc/en-us/articles/360020809672).
	Name *string `json:"name,omitempty"`
}

// ListPhoneDevices200ApplicationJSONDevicesStatusEnum - Status of the device. The value is either `online` or `offline`.
type ListPhoneDevices200ApplicationJSONDevicesStatusEnum string

const (
	ListPhoneDevices200ApplicationJSONDevicesStatusEnumOnline  ListPhoneDevices200ApplicationJSONDevicesStatusEnum = "online"
	ListPhoneDevices200ApplicationJSONDevicesStatusEnumOffline ListPhoneDevices200ApplicationJSONDevicesStatusEnum = "offline"
)

func (e *ListPhoneDevices200ApplicationJSONDevicesStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "online":
		fallthrough
	case "offline":
		*e = ListPhoneDevices200ApplicationJSONDevicesStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPhoneDevices200ApplicationJSONDevicesStatusEnum: %s", s)
	}
}

type ListPhoneDevices200ApplicationJSONDevices struct {
	Assignee *ListPhoneDevices200ApplicationJSONDevicesAssignee `json:"assignee,omitempty"`
	// Includes manufacturer name and the model name.
	DeviceType *string `json:"device_type,omitempty"`
	// Display name of the device.
	DisplayName *string `json:"display_name,omitempty"`
	// Device ID - Unique Identifier of the Device.
	ID *string `json:"id,omitempty"`
	// MAC address or serial number of the device.
	MacAddress *string                                        `json:"mac_address,omitempty"`
	Site       *ListPhoneDevices200ApplicationJSONDevicesSite `json:"site,omitempty"`
	// Status of the device. The value is either `online` or `offline`.
	Status *ListPhoneDevices200ApplicationJSONDevicesStatusEnum `json:"status,omitempty"`
}

// ListPhoneDevices200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Devices listed successfully.
type ListPhoneDevices200ApplicationJSON struct {
	Devices []ListPhoneDevices200ApplicationJSONDevices `json:"devices,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of records found for the query across all pages.
	TotalRecords *string `json:"total_records,omitempty"`
}

type ListPhoneDevicesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Devices listed successfully.
	ListPhoneDevices200ApplicationJSONObject *ListPhoneDevices200ApplicationJSON
}
