"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetFiltersCreateRequest:
    
    base: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'base', 'style': 'form', 'explode': True }})  
    exclude: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude', 'style': 'form', 'explode': True }})
    r"""String list (semicolon delimited)."""  
    include: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""String list (semicolon delimited)."""  
    unsafe: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unsafe', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class GetFiltersCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    