/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateMonitorRequestBody {
    /**
     * A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClientToken")
    public String clientToken;

    public CreateMonitorRequestBody withClientToken(String clientToken) {
        this.clientToken = clientToken;
        return this;
    }
    
    /**
     * Publish internet measurements to an Amazon S3 bucket in addition to CloudWatch Logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InternetMeasurementsLogDelivery")
    public CreateMonitorRequestBodyInternetMeasurementsLogDelivery internetMeasurementsLogDelivery;

    public CreateMonitorRequestBody withInternetMeasurementsLogDelivery(CreateMonitorRequestBodyInternetMeasurementsLogDelivery internetMeasurementsLogDelivery) {
        this.internetMeasurementsLogDelivery = internetMeasurementsLogDelivery;
        return this;
    }
    
    /**
     * &lt;p&gt;The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.&lt;/p&gt; &lt;p&gt;To learn more, see &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html"&gt;Choosing a city-network maximum value &lt;/a&gt; in the Amazon CloudWatch Internet Monitor section of the &lt;i&gt;CloudWatch User Guide&lt;/i&gt;.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxCityNetworksToMonitor")
    public Long maxCityNetworksToMonitor;

    public CreateMonitorRequestBody withMaxCityNetworksToMonitor(Long maxCityNetworksToMonitor) {
        this.maxCityNetworksToMonitor = maxCityNetworksToMonitor;
        return this;
    }
    
    /**
     * The name of the monitor. 
     */
    @JsonProperty("MonitorName")
    public String monitorName;

    public CreateMonitorRequestBody withMonitorName(String monitorName) {
        this.monitorName = monitorName;
        return this;
    }
    
    /**
     * &lt;p&gt;The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).&lt;/p&gt; &lt;p&gt;You can add a combination of Amazon Virtual Private Clouds (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories. You can't add all three types of resources.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Resources")
    public String[] resources;

    public CreateMonitorRequestBody withResources(String[] resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * The tags for a monitor. You can add a maximum of 50 tags in Internet Monitor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public java.util.Map<String, String> tags;

    public CreateMonitorRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TrafficPercentageToMonitor")
    public Long trafficPercentageToMonitor;

    public CreateMonitorRequestBody withTrafficPercentageToMonitor(Long trafficPercentageToMonitor) {
        this.trafficPercentageToMonitor = trafficPercentageToMonitor;
        return this;
    }
    
    public CreateMonitorRequestBody(@JsonProperty("MonitorName") String monitorName) {
        this.monitorName = monitorName;
  }
}
