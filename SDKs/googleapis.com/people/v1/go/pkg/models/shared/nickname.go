// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NicknameTypeEnum - The type of the nickname.
type NicknameTypeEnum string

const (
	NicknameTypeEnumDefault       NicknameTypeEnum = "DEFAULT"
	NicknameTypeEnumMaidenName    NicknameTypeEnum = "MAIDEN_NAME"
	NicknameTypeEnumInitials      NicknameTypeEnum = "INITIALS"
	NicknameTypeEnumGplus         NicknameTypeEnum = "GPLUS"
	NicknameTypeEnumOtherName     NicknameTypeEnum = "OTHER_NAME"
	NicknameTypeEnumAlternateName NicknameTypeEnum = "ALTERNATE_NAME"
	NicknameTypeEnumShortName     NicknameTypeEnum = "SHORT_NAME"
)

func (e NicknameTypeEnum) ToPointer() *NicknameTypeEnum {
	return &e
}

func (e *NicknameTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "MAIDEN_NAME":
		fallthrough
	case "INITIALS":
		fallthrough
	case "GPLUS":
		fallthrough
	case "OTHER_NAME":
		fallthrough
	case "ALTERNATE_NAME":
		fallthrough
	case "SHORT_NAME":
		*e = NicknameTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NicknameTypeEnum: %v", v)
	}
}

// Nickname - A person's nickname.
type Nickname struct {
	// Metadata about a field.
	Metadata *FieldMetadata `json:"metadata,omitempty"`
	// The type of the nickname.
	Type *NicknameTypeEnum `json:"type,omitempty"`
	// The nickname.
	Value *string `json:"value,omitempty"`
}

// NicknameInput - A person's nickname.
type NicknameInput struct {
	// Metadata about a field.
	Metadata *FieldMetadataInput `json:"metadata,omitempty"`
	// The type of the nickname.
	Type *NicknameTypeEnum `json:"type,omitempty"`
	// The nickname.
	Value *string `json:"value,omitempty"`
}
