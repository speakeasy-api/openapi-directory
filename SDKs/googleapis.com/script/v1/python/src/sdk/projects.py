"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def script_projects_create(self, request: operations.ScriptProjectsCreateRequest, security: operations.ScriptProjectsCreateSecurity) -> operations.ScriptProjectsCreateResponse:
        r"""Creates a new, empty script project with no script files and a base manifest file."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_project_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ScriptProjectsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out

        return res

    def script_projects_deployments_create(self, request: operations.ScriptProjectsDeploymentsCreateRequest, security: operations.ScriptProjectsDeploymentsCreateSecurity) -> operations.ScriptProjectsDeploymentsCreateResponse:
        r"""Creates a deployment of an Apps Script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsDeploymentsCreateRequest, base_url, '/v1/projects/{scriptId}/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "deployment_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ScriptProjectsDeploymentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsDeploymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deployment])
                res.deployment = out

        return res

    def script_projects_deployments_delete(self, request: operations.ScriptProjectsDeploymentsDeleteRequest, security: operations.ScriptProjectsDeploymentsDeleteSecurity) -> operations.ScriptProjectsDeploymentsDeleteResponse:
        r"""Deletes a deployment of an Apps Script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsDeploymentsDeleteRequest, base_url, '/v1/projects/{scriptId}/deployments/{deploymentId}', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsDeploymentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsDeploymentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def script_projects_deployments_get(self, request: operations.ScriptProjectsDeploymentsGetRequest, security: operations.ScriptProjectsDeploymentsGetSecurity) -> operations.ScriptProjectsDeploymentsGetResponse:
        r"""Gets a deployment of an Apps Script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsDeploymentsGetRequest, base_url, '/v1/projects/{scriptId}/deployments/{deploymentId}', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsDeploymentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsDeploymentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deployment])
                res.deployment = out

        return res

    def script_projects_deployments_list(self, request: operations.ScriptProjectsDeploymentsListRequest, security: operations.ScriptProjectsDeploymentsListSecurity) -> operations.ScriptProjectsDeploymentsListResponse:
        r"""Lists the deployments of an Apps Script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsDeploymentsListRequest, base_url, '/v1/projects/{scriptId}/deployments', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDeploymentsResponse])
                res.list_deployments_response = out

        return res

    def script_projects_deployments_update(self, request: operations.ScriptProjectsDeploymentsUpdateRequest, security: operations.ScriptProjectsDeploymentsUpdateSecurity) -> operations.ScriptProjectsDeploymentsUpdateResponse:
        r"""Updates a deployment of an Apps Script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsDeploymentsUpdateRequest, base_url, '/v1/projects/{scriptId}/deployments/{deploymentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_deployment_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ScriptProjectsDeploymentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsDeploymentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deployment])
                res.deployment = out

        return res

    def script_projects_get(self, request: operations.ScriptProjectsGetRequest, security: operations.ScriptProjectsGetSecurity) -> operations.ScriptProjectsGetResponse:
        r"""Gets a script project's metadata."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsGetRequest, base_url, '/v1/projects/{scriptId}', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Project])
                res.project = out

        return res

    def script_projects_get_content(self, request: operations.ScriptProjectsGetContentRequest, security: operations.ScriptProjectsGetContentSecurity) -> operations.ScriptProjectsGetContentResponse:
        r"""Gets the content of the script project, including the code source and metadata for each script file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsGetContentRequest, base_url, '/v1/projects/{scriptId}/content', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsGetContentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsGetContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Content])
                res.content = out

        return res

    def script_projects_get_metrics(self, request: operations.ScriptProjectsGetMetricsRequest, security: operations.ScriptProjectsGetMetricsSecurity) -> operations.ScriptProjectsGetMetricsResponse:
        r"""Get metrics data for scripts, such as number of executions and active users."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsGetMetricsRequest, base_url, '/v1/projects/{scriptId}/metrics', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsGetMetricsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsGetMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Metrics])
                res.metrics = out

        return res

    def script_projects_update_content(self, request: operations.ScriptProjectsUpdateContentRequest, security: operations.ScriptProjectsUpdateContentSecurity) -> operations.ScriptProjectsUpdateContentResponse:
        r"""Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsUpdateContentRequest, base_url, '/v1/projects/{scriptId}/content', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "content", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ScriptProjectsUpdateContentRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsUpdateContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Content])
                res.content = out

        return res

    def script_projects_versions_create(self, request: operations.ScriptProjectsVersionsCreateRequest, security: operations.ScriptProjectsVersionsCreateSecurity) -> operations.ScriptProjectsVersionsCreateResponse:
        r"""Creates a new immutable version using the current code, with a unique version number."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsVersionsCreateRequest, base_url, '/v1/projects/{scriptId}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ScriptProjectsVersionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsVersionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def script_projects_versions_get(self, request: operations.ScriptProjectsVersionsGetRequest, security: operations.ScriptProjectsVersionsGetSecurity) -> operations.ScriptProjectsVersionsGetResponse:
        r"""Gets a version of a script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsVersionsGetRequest, base_url, '/v1/projects/{scriptId}/versions/{versionNumber}', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsVersionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsVersionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def script_projects_versions_list(self, request: operations.ScriptProjectsVersionsListRequest, security: operations.ScriptProjectsVersionsListSecurity) -> operations.ScriptProjectsVersionsListResponse:
        r"""List the versions of a script project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ScriptProjectsVersionsListRequest, base_url, '/v1/projects/{scriptId}/versions', request)
        
        query_params = utils.get_query_params(operations.ScriptProjectsVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScriptProjectsVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVersionsResponse])
                res.list_versions_response = out

        return res

    