// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostEntitiesRequestBodyDocumentTypeEnum - Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición.
type PostEntitiesRequestBodyDocumentTypeEnum string

const (
	PostEntitiesRequestBodyDocumentTypeEnumNif                 PostEntitiesRequestBodyDocumentTypeEnum = "NIF"
	PostEntitiesRequestBodyDocumentTypeEnumPasaporte           PostEntitiesRequestBodyDocumentTypeEnum = "Pasaporte"
	PostEntitiesRequestBodyDocumentTypeEnumTarjetaDeResidencia PostEntitiesRequestBodyDocumentTypeEnum = "Tarjeta de residencia"
)

func (e *PostEntitiesRequestBodyDocumentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NIF":
		fallthrough
	case "Pasaporte":
		fallthrough
	case "Tarjeta de residencia":
		*e = PostEntitiesRequestBodyDocumentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostEntitiesRequestBodyDocumentTypeEnum: %s", s)
	}
}

type PostEntitiesRequestBody struct {
	// Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación, si el tipo de desafío es OTP. Requiere la clave que la entidad le ha enviado al usario final
	Otp *string `form:"name=OTP"`
	// Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación. Requiere el valor de SESSION obtenido en la primera petición
	Session *string `form:"name=SESSION"`
	// Identifica al cliente en el servicio
	APIKey *string `form:"name=api_key"`
	// Nombre de la entidad. El listado completo está disponible con GET
	Code *string `form:"name=code"`
	// Solo necesario cuando el usuario puede acceder a más de un contrato. El listado de contratos disponibles se obtiene al realizar una conexión con un usuario con opción a trabajar con varios contratos en su entidad (que al hacer login en su banca online ve como primera opción una pantalla de selección de contratos) y cuya llamada a la API no se le ha especificado un valor a contract_code
	ContractCode *string `form:"name=contract_code"`
	// Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición.
	DocumentType *PostEntitiesRequestBodyDocumentTypeEnum `form:"name=document_type"`
	// Contraseña
	Password *string `form:"name=password"`
	// Segunda contraseña, requerida según la entidad.
	SecondPassword *string `form:"name=second_password"`
	// Valor para credenciales custodiadas, tokenizadas previamente mediante una llamada a este método con el valor de tokenize=true. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
	Token *string `form:"name=token"`
	// Indica si Wealth Reader debe custodiar los credenciales, de tal manera que incluído en el body de respuesta estará un token que permite conectar con la entidad sin necesidad de conocer los credenciales: document_type, user, password, second_password, contract_code
	Tokenize *bool `form:"name=tokenize"`
	// Usuario. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
	User *string `form:"name=user"`
}

type PostEntities200ApplicationJSON4Payload struct {
	// Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2
	Accounts []map[string]interface{} `json:"accounts,omitempty"`
	// Tarjetas de crédito, débito y prepago
	Cards []map[string]interface{} `json:"cards,omitempty"`
	// Carteras de acciones, fondos y planes de pensiones
	Portfolios []map[string]interface{} `json:"portfolios,omitempty"`
	// Activos inmobiliarios
	Properties *shared.Properties `json:"properties,omitempty"`
	// Información relativa a la persona que hace login
	UserInformation *shared.UserInformation `json:"user_information,omitempty"`
}

type PostEntities200ApplicationJSON4 struct {
	Payload    *PostEntities200ApplicationJSON4Payload `json:"payload,omitempty"`
	Properties []interface{}                           `json:"properties,omitempty"`
	Statistics shared.Statistics                       `json:"statistics"`
	Success    bool                                    `json:"success"`
}

type PostEntities200ApplicationJSON3Payload struct {
	// Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2
	Accounts []map[string]interface{} `json:"accounts,omitempty"`
	// Tarjetas de crédito, débito y prepago
	Cards []map[string]interface{} `json:"cards,omitempty"`
	// Carteras de acciones, fondos y planes de pensiones
	Portfolios []map[string]interface{} `json:"portfolios,omitempty"`
	// Activos inmobiliarios
	Properties *shared.Properties `json:"properties,omitempty"`
	// Información relativa a la persona que hace login
	UserInformation *shared.UserInformation `json:"user_information,omitempty"`
}

type PostEntities200ApplicationJSON3 struct {
	Cards      []interface{}                           `json:"cards,omitempty"`
	Payload    *PostEntities200ApplicationJSON3Payload `json:"payload,omitempty"`
	Statistics shared.Statistics                       `json:"statistics"`
	Success    bool                                    `json:"success"`
}

type PostEntities200ApplicationJSON2Payload struct {
	// Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2
	Accounts []map[string]interface{} `json:"accounts,omitempty"`
	// Tarjetas de crédito, débito y prepago
	Cards []map[string]interface{} `json:"cards,omitempty"`
	// Carteras de acciones, fondos y planes de pensiones
	Portfolios []map[string]interface{} `json:"portfolios,omitempty"`
	// Activos inmobiliarios
	Properties *shared.Properties `json:"properties,omitempty"`
	// Información relativa a la persona que hace login
	UserInformation *shared.UserInformation `json:"user_information,omitempty"`
}

type PostEntities200ApplicationJSON2 struct {
	Accounts   []interface{}                           `json:"accounts,omitempty"`
	Payload    *PostEntities200ApplicationJSON2Payload `json:"payload,omitempty"`
	Statistics shared.Statistics                       `json:"statistics"`
	Success    bool                                    `json:"success"`
}

type PostEntities200ApplicationJSON1Payload struct {
	// Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2
	Accounts []map[string]interface{} `json:"accounts,omitempty"`
	// Tarjetas de crédito, débito y prepago
	Cards []map[string]interface{} `json:"cards,omitempty"`
	// Carteras de acciones, fondos y planes de pensiones
	Portfolios []map[string]interface{} `json:"portfolios,omitempty"`
	// Activos inmobiliarios
	Properties *shared.Properties `json:"properties,omitempty"`
	// Información relativa a la persona que hace login
	UserInformation *shared.UserInformation `json:"user_information,omitempty"`
}

type PostEntities200ApplicationJSON1 struct {
	Payload    *PostEntities200ApplicationJSON1Payload `json:"payload,omitempty"`
	Portfolios []interface{}                           `json:"portfolios,omitempty"`
	Statistics shared.Statistics                       `json:"statistics"`
	Success    bool                                    `json:"success"`
}

type PostEntitiesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// datos obtenidos de la entidad
	EntityData []interface{}
	// error
	Errors []shared.Error
}
