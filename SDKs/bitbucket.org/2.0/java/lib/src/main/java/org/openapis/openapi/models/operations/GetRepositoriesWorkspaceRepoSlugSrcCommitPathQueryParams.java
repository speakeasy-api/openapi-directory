/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetRepositoriesWorkspaceRepoSlugSrcCommitPathQueryParams {
    /**
     * If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git does not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=format")
    public GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum format;
    public GetRepositoriesWorkspaceRepoSlugSrcCommitPathQueryParams withFormat(GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * If provided, returns the contents of the repository and its subdirectories recursively until the specified max_depth of nested directories. When omitted, this defaults to 1.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_depth")
    public Long maxDepth;
    public GetRepositoriesWorkspaceRepoSlugSrcCommitPathQueryParams withMaxDepth(Long maxDepth) {
        this.maxDepth = maxDepth;
        return this;
    }
    
    /**
     * Optional filter expression as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String q;
    public GetRepositoriesWorkspaceRepoSlugSrcCommitPathQueryParams withQ(String q) {
        this.q = q;
        return this;
    }
    
    /**
     * Optional sorting parameter as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetRepositoriesWorkspaceRepoSlugSrcCommitPathQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
}
