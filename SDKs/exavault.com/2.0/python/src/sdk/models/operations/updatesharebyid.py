"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import accessmode as shared_accessmode
from ..shared import shareresponse as shared_shareresponse
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateShareByIDUpdateShareRequestBodyRecipients:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of person you are inviting to the share"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""What kind of email should be sent to this recipient. Valid choices are **direct** and **cc**"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateShareByIDUpdateShareRequestBody:
    
    access_mode: Optional[shared_accessmode.AccessMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessMode'), 'exclude': lambda f: f is None }})
    r"""An object defining what a not-logged-in visitor can do with the share contents"""  
    embed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""Whether the share can be embedded in another web page."""  
    expiration: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""New expiration date and time for the share"""  
    file_drop_create_folders: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileDropCreateFolders'), 'exclude': lambda f: f is None }})
    r"""Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)"""  
    has_notification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasNotification'), 'exclude': lambda f: f is None }})
    r"""Whether delivery receipts should be sent for this share."""  
    is_public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPublic'), 'exclude': lambda f: f is None }})
    r"""Whether people can visit the share without following a link from an invitation email"""  
    message_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageBody'), 'exclude': lambda f: f is None }})
    r"""Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`"""  
    message_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageSubject'), 'exclude': lambda f: f is None }})
    r"""Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the share."""  
    notification_emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationEmails'), 'exclude': lambda f: f is None }})
    r"""List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""New password for the share. To leave the password unchanged, do not send this parameter."""  
    recipients: Optional[list[UpdateShareByIDUpdateShareRequestBodyRecipients]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients'), 'exclude': lambda f: f is None }})
    r"""People you want to invite to the share. 
    
    **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.
    
    **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share.
    """  
    require_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requireEmail'), 'exclude': lambda f: f is None }})
    r"""Whether visitors to the share will be required to enter their email in order to access the share."""  
    resources: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})
    r"""Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
    
    **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
    
    **send** shares may have multiple `resource` parameters. 
    
    **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
    """  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""New status for the share. You can set an active share to inactive by setting the status to **0**"""  
    

@dataclasses.dataclass
class UpdateShareByIDRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access Token"""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API Key"""  
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the share entry"""  
    request_body: UpdateShareByIDUpdateShareRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateShareByIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    share_response: Optional[shared_shareresponse.ShareResponse] = dataclasses.field(default=None)
    r"""Successful operation"""  
    