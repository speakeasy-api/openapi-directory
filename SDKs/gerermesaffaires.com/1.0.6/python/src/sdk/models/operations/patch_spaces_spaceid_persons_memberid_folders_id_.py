"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'
    PUBLIC = 'public'

class PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum(str, Enum):
    WRITE = 'write'
    READ = 'read'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBody:
    r"""Access to modify"""
    
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('About'), 'exclude': lambda f: f is None }})  
    home: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Home'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    level: Optional[PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    right: Optional[PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBodyRightEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Right'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    member_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'memberId', 'style': 'simple', 'explode': False }})
    r"""memberId of the person"""  
    request_body: PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Access to modify"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDPersonsMemberIDFoldersIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    