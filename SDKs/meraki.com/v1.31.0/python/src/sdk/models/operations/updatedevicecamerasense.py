"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCameraSenseRequestBodyAudioDetection:
    r"""The details of the audio detection config."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if audio detection is enabled(true) or disabled(false) on the camera"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceCameraSenseRequestBody:
    
    audio_detection: Optional[UpdateDeviceCameraSenseRequestBodyAudioDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioDetection'), 'exclude': lambda f: f is None }})
    r"""The details of the audio detection config."""  
    detection_model_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectionModelId'), 'exclude': lambda f: f is None }})
    r"""The ID of the object detection model"""  
    mqtt_broker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mqttBrokerId'), 'exclude': lambda f: f is None }})
    r"""The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera"""  
    sense_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('senseEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera"""  
    

@dataclasses.dataclass
class UpdateDeviceCameraSenseRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateDeviceCameraSenseRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateDeviceCameraSenseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_device_camera_sense_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    