/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Money } from "./money";
import { OrderLineItemAppliedTax } from "./orderlineitemappliedtax";
import { Expose, Type } from "class-transformer";

/**
 * Represents the service charge applied to the original order.
 */
export class OrderReturnServiceCharge extends SpeakeasyBase {
  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount_money" })
  @Type(() => Money)
  amountMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applied_money" })
  @Type(() => Money)
  appliedMoney?: Money;

  /**
   * The list of references to `OrderReturnTax` entities applied to the
   *
   * @remarks
   * `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
   * that references the `uid` of a top-level `OrderReturnTax` that is being
   * applied to the `OrderReturnServiceCharge`. On reads, the applied amount is
   * populated.
   */
  @SpeakeasyMetadata({ elemType: OrderLineItemAppliedTax })
  @Expose({ name: "applied_taxes" })
  @Type(() => OrderLineItemAppliedTax)
  appliedTaxes?: OrderLineItemAppliedTax[];

  /**
   * The calculation phase after which to apply the service charge.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "calculation_phase" })
  calculationPhase?: string;

  /**
   * The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "catalog_object_id" })
  catalogObjectId?: string;

  /**
   * The version of the catalog object that this service charge references.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "catalog_version" })
  catalogVersion?: number;

  /**
   * The name of the service charge.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The percentage of the service charge, as a string representation of
   *
   * @remarks
   * a decimal number. For example, a value of `"7.25"` corresponds to a
   * percentage of 7.25%.
   *
   * Either `percentage` or `amount_money` should be set, but not both.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "percentage" })
  percentage?: string;

  /**
   * The service charge `uid` from the order containing the original
   *
   * @remarks
   * service charge. `source_service_charge_uid` is `null` for
   * unlinked returns.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_service_charge_uid" })
  sourceServiceChargeUid?: string;

  /**
   * Indicates whether the surcharge can be taxed. Service charges
   *
   * @remarks
   * calculated in the `TOTAL_PHASE` cannot be marked as taxable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxable" })
  taxable?: boolean;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_money" })
  @Type(() => Money)
  totalMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_tax_money" })
  @Type(() => Money)
  totalTaxMoney?: Money;

  /**
   * A unique ID that identifies the return service charge only within this order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;
}
