"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connector as shared_connector
from typing import Optional


@dataclasses.dataclass
class PutConnectorsIDConnectorRequestBody:
    
    auth_mechanism: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'auth_mechanism' }})
    r"""the authentication mechanism to use for this connector"""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'hidden' }})
    r"""to enable  or disable connector (bank or provider)"""  
    id_categories: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'id_categories' }})
    r"""one or several comma separated categories to map to the given connector (or null to map no category)"""  
    sync_frequency: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sync_frequency' }})
    r"""Allows you to overload global sync_frequency param"""  
    

@dataclasses.dataclass
class PutConnectorsIDConnectorRequest:
    
    id_connector: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_connector', 'style': 'simple', 'explode': False }})  
    expand: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})  
    request_body: Optional[PutConnectorsIDConnectorRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    

@dataclasses.dataclass
class PutConnectorsIDConnectorResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    connector: Optional[shared_connector.Connector] = dataclasses.field(default=None)
    r"""Successful PUT on Connector resource"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    