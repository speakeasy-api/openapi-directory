"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbedSettingsButtons:
    r"""A collection of information about the buttons that appear on the interface of the embeddable player."""
    
    embed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""Whether the Embed button appears in the embeddable player for this video."""  
    fullscreen: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullscreen') }})
    r"""Whether the Fullscreen button appears in the embeddable player for this video."""  
    hd: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hd') }})
    r"""Whether the HD button appears in the embeddable player for this video."""  
    like: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like') }})
    r"""Whether the Like button appears in the embeddable player for this video."""  
    scaling: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaling') }})
    r"""Whether the Scaling button appears in the embeddable player for this video."""  
    share: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share') }})
    r"""Whether the Share button appears in the embeddable player for this video."""  
    watchlater: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Whether the Watch Later button appears in the embeddable player for this video."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbedSettingsLogosCustom:
    r"""A collection of information relating to custom logos in the embeddable player."""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether the custom logo appears in the embeddable player."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL that loads upon clicking the custom logo."""  
    sticky: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sticky') }})
    r"""Whether the custom logo appears even when the player interface is hidden."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbedSettingsLogos:
    r"""A collection of information about the logo in the corner of the embeddable player."""
    
    custom: EmbedSettingsLogosCustom = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom') }})
    r"""A collection of information relating to custom logos in the embeddable player."""  
    vimeo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vimeo') }})
    r"""Whether the Vimeo logo appears in the embeddable player for this video."""  
    
class EmbedSettingsTitleNameEnum(str, Enum):
    r"""How the embeddable player handles the video title:
    
    Option descriptions:
     * `hide` - The title is hidden.
     * `show` - The title is shown.
    """
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'

class EmbedSettingsTitleOwnerEnum(str, Enum):
    r"""How the embeddable player handles the video owner's information:
    
    Option descriptions:
     * `hide` - The owner's information is hidden.
     * `show` - The owner's information is shown.
    """
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'

class EmbedSettingsTitlePortraitEnum(str, Enum):
    r"""How the embeddable player handles the video owner's portrait:
    
    Option descriptions:
     * `hide` - The owner's portrait is hidden
     * `show` - The owner's portrait is shown.
    """
    HIDE = 'hide'
    SHOW = 'show'
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbedSettingsTitle:
    r"""A collection of information relating to the embeddable player's title bar."""
    
    name: EmbedSettingsTitleNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""How the embeddable player handles the video title:
    
    Option descriptions:
     * `hide` - The title is hidden.
     * `show` - The title is shown.
    """  
    owner: EmbedSettingsTitleOwnerEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""How the embeddable player handles the video owner's information:
    
    Option descriptions:
     * `hide` - The owner's information is hidden.
     * `show` - The owner's information is shown.
    """  
    portrait: EmbedSettingsTitlePortraitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portrait') }})
    r"""How the embeddable player handles the video owner's portrait:
    
    Option descriptions:
     * `hide` - The owner's portrait is hidden
     * `show` - The owner's portrait is shown.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbedSettings:
    
    buttons: EmbedSettingsButtons = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buttons') }})
    r"""A collection of information about the buttons that appear on the interface of the embeddable player."""  
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})
    r"""The primary player color, which controls the color of the progress bar, buttons, and more."""  
    logos: EmbedSettingsLogos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logos') }})
    r"""A collection of information about the logo in the corner of the embeddable player."""  
    playbar: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playbar') }})
    r"""Whether the playbar appears in the embeddable player for this video."""  
    speed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed') }})
    r"""Whether the speed controls appear in the embeddable player for this video."""  
    title: EmbedSettingsTitle = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A collection of information relating to the embeddable player's title bar."""  
    volume: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume') }})
    r"""Whether the volume controls appear in the embeddable player for this video."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The URI of the embed preset."""  
    