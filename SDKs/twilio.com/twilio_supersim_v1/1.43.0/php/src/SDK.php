<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_ESIM_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_FLEET_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_IP_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_NETWORK_ACCESS_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_SIM_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const CREATE_SMS_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_ESIM_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_FLEET_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_IP_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_NETWORK_ACCESS_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_SIM_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const FETCH_SMS_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_BILLING_PERIOD_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_ESIM_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_FLEET_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_IP_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_NETWORK_ACCESS_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_SETTINGS_UPDATE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_SIM_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_SIM_IP_ADDRESS_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_SMS_COMMAND_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const UPDATE_FLEET_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const UPDATE_NETWORK_ACCESS_PROFILE_SERVERS = [
		'https://supersim.twilio.com',
	];
	
	public const UPDATE_SIM_SERVERS = [
		'https://supersim.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Order an eSIM Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileCreateEsimProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileResponse
     */
	public function createEsimProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileCreateEsimProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileResponse
    {
        $baseUrl = SDK::CREATE_ESIM_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ESimProfiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEsimProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1EsimProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1EsimProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Fleet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFleetCreateFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFleetResponse
     */
	public function createFleet(
        \OpenAPI\OpenAPI\Models\Operations\CreateFleetCreateFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFleetResponse
    {
        $baseUrl = SDK::CREATE_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Fleets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Fleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Fleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send an IP Command to a Super SIM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandCreateIpCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandResponse
     */
	public function createIpCommand(
        \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandCreateIpCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandResponse
    {
        $baseUrl = SDK::CREATE_IP_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpCommands');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIpCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1IpCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1IpCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Network Access Profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileCreateNetworkAccessProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileResponse
     */
	public function createNetworkAccessProfile(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileCreateNetworkAccessProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileResponse
    {
        $baseUrl = SDK::CREATE_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1NetworkAccessProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1NetworkAccessProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Network resource to the Network Access Profile resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkResponse
     */
	public function createNetworkAccessProfileNetwork(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkResponse
    {
        $baseUrl = SDK::CREATE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkAccessProfileNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a Super SIM to your Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSimCreateSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSimResponse
     */
	public function createSim(
        \OpenAPI\OpenAPI\Models\Operations\CreateSimCreateSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSimResponse
    {
        $baseUrl = SDK::CREATE_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Sim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Sim', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send SMS Command to a Sim.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandCreateSmsCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandResponse
     */
	public function createSmsCommand(
        \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandCreateSmsCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandResponse
    {
        $baseUrl = SDK::CREATE_SMS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SmsCommands');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSmsCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1SmsCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1SmsCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a Network resource from the Network Access Profile resource's.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkResponse
     */
	public function deleteNetworkAccessProfileNetwork(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkResponse
    {
        $baseUrl = SDK::DELETE_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkAccessProfileNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch an eSIM Profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileResponse
     */
	public function fetchEsimProfile(
        \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileResponse
    {
        $baseUrl = SDK::FETCH_ESIM_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ESimProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEsimProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1EsimProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1EsimProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Fleet instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFleetResponse
     */
	public function fetchFleet(
        \OpenAPI\OpenAPI\Models\Operations\FetchFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFleetResponse
    {
        $baseUrl = SDK::FETCH_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Fleets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFleetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Fleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Fleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch IP Command instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandResponse
     */
	public function fetchIpCommand(
        \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandResponse
    {
        $baseUrl = SDK::FETCH_IP_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpCommands/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIpCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1IpCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1IpCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Network resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchNetworkResponse
     */
	public function fetchNetwork(
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchNetworkResponse
    {
        $baseUrl = SDK::FETCH_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Networks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Network = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Network', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Network Access Profile instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileResponse
     */
	public function fetchNetworkAccessProfile(
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileResponse
    {
        $baseUrl = SDK::FETCH_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1NetworkAccessProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1NetworkAccessProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Network Access Profile resource's Network resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkResponse
     */
	public function fetchNetworkAccessProfileNetwork(
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkResponse
    {
        $baseUrl = SDK::FETCH_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchNetworkAccessProfileNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1NetworkAccessProfileNetworkAccessProfileNetwork = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Super SIM instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse
     */
	public function fetchSim(
        \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse
    {
        $baseUrl = SDK::FETCH_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Sim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Sim', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch SMS Command instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandResponse
     */
	public function fetchSmsCommand(
        \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandResponse
    {
        $baseUrl = SDK::FETCH_SMS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SmsCommands/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSmsCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1SmsCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1SmsCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Billing Periods for a Super SIM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodResponse
     */
	public function listBillingPeriod(
        \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodResponse
    {
        $baseUrl = SDK::LIST_BILLING_PERIOD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{SimSid}/BillingPeriods', \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBillingPeriodResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBillingPeriodListBillingPeriodResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of eSIM Profiles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileResponse
     */
	public function listEsimProfile(
        \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileResponse
    {
        $baseUrl = SDK::LIST_ESIM_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ESimProfiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEsimProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEsimProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEsimProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEsimProfileListEsimProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Fleets from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFleetResponse
     */
	public function listFleet(
        \OpenAPI\OpenAPI\Models\Operations\ListFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFleetResponse
    {
        $baseUrl = SDK::LIST_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Fleets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFleetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFleetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFleetListFleetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of IP Commands from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIpCommandResponse
     */
	public function listIpCommand(
        \OpenAPI\OpenAPI\Models\Operations\ListIpCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIpCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIpCommandResponse
    {
        $baseUrl = SDK::LIST_IP_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpCommands');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIpCommandRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIpCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIpCommandResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIpCommandListIpCommandResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Network resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNetworkResponse
     */
	public function listNetwork(
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNetworkResponse
    {
        $baseUrl = SDK::LIST_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Networks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNetworkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNetworkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListNetworkListNetworkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Network Access Profiles from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileResponse
     */
	public function listNetworkAccessProfile(
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileResponse
    {
        $baseUrl = SDK::LIST_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNetworkAccessProfileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileListNetworkAccessProfileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Network Access Profile resource's Network resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkResponse
     */
	public function listNetworkAccessProfileNetwork(
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkResponse
    {
        $baseUrl = SDK::LIST_NETWORK_ACCESS_PROFILE_NETWORK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks', \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNetworkAccessProfileNetworkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListNetworkAccessProfileNetworkListNetworkAccessProfileNetworkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Settings Updates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateResponse
     */
	public function listSettingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateResponse
    {
        $baseUrl = SDK::LIST_SETTINGS_UPDATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SettingsUpdates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSettingsUpdateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSettingsUpdateListSettingsUpdateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Super SIMs from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSimResponse
     */
	public function listSim(
        \OpenAPI\OpenAPI\Models\Operations\ListSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSimResponse
    {
        $baseUrl = SDK::LIST_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSimRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSimResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSimListSimResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of IP Addresses for the given Super SIM.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressResponse
     */
	public function listSimIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressResponse
    {
        $baseUrl = SDK::LIST_SIM_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{SimSid}/IpAddresses', \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSimIpAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSimIpAddressListSimIpAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of SMS Commands from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandResponse
     */
	public function listSmsCommand(
        \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandResponse
    {
        $baseUrl = SDK::LIST_SMS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SmsCommands');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSmsCommandRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSmsCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSmsCommandResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSmsCommandListSmsCommandResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List UsageRecords
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
     */
	public function listUsageRecord(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/UsageRecords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordListUsageRecordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFleetResponse
     */
	public function updateFleet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFleetResponse
    {
        $baseUrl = SDK::UPDATE_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Fleets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateFleetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Fleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Fleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the given properties of a Network Access Profile in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileResponse
     */
	public function updateNetworkAccessProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileResponse
    {
        $baseUrl = SDK::UPDATE_NETWORK_ACCESS_PROFILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/NetworkAccessProfiles/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkAccessProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1NetworkAccessProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1NetworkAccessProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the given properties of a Super SIM instance from your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse
     */
	public function updateSim(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse
    {
        $baseUrl = SDK::UPDATE_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->supersimV1Sim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SupersimV1Sim', 'json');
            }
        }

        return $response;
    }
}