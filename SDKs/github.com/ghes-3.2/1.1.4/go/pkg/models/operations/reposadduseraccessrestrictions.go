// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposAddUserAccessRestrictionsPathParams struct {
	// The name of the branch.
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposAddUserAccessRestrictionsRequestBody1 struct {
	// The username for users
	Users []string `json:"users"`
}

type ReposAddUserAccessRestrictionsRequestBodyType string

const (
	ReposAddUserAccessRestrictionsRequestBodyTypeReposAddUserAccessRestrictionsRequestBody1 ReposAddUserAccessRestrictionsRequestBodyType = "repos/add-user-access-restrictions_requestBody_1"
	ReposAddUserAccessRestrictionsRequestBodyTypeArrayOfstr                                 ReposAddUserAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposAddUserAccessRestrictionsRequestBody struct {
	ReposAddUserAccessRestrictionsRequestBody1 *ReposAddUserAccessRestrictionsRequestBody1
	ArrayOfstr                                 []string

	Type ReposAddUserAccessRestrictionsRequestBodyType
}

func CreateReposAddUserAccessRestrictionsRequestBodyReposAddUserAccessRestrictionsRequestBody1(reposAddUserAccessRestrictionsRequestBody1 ReposAddUserAccessRestrictionsRequestBody1) ReposAddUserAccessRestrictionsRequestBody {
	typ := ReposAddUserAccessRestrictionsRequestBodyTypeReposAddUserAccessRestrictionsRequestBody1

	return ReposAddUserAccessRestrictionsRequestBody{
		ReposAddUserAccessRestrictionsRequestBody1: &reposAddUserAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposAddUserAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposAddUserAccessRestrictionsRequestBody {
	typ := ReposAddUserAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposAddUserAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposAddUserAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposAddUserAccessRestrictionsRequestBody1 := new(ReposAddUserAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposAddUserAccessRestrictionsRequestBody1); err == nil {
		u.ReposAddUserAccessRestrictionsRequestBody1 = reposAddUserAccessRestrictionsRequestBody1
		u.Type = ReposAddUserAccessRestrictionsRequestBodyTypeReposAddUserAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposAddUserAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposAddUserAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposAddUserAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposAddUserAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposAddUserAccessRestrictionsRequest struct {
	PathParams ReposAddUserAccessRestrictionsPathParams
	Request    *ReposAddUserAccessRestrictionsRequestBody `request:"mediaType=application/json"`
}

type ReposAddUserAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	SimpleUsers []shared.SimpleUser
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
