/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.
 */
export class UpdatePortalRequestBodyAlarms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alarmRoleArn" })
  alarmRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "notificationLambdaArn" })
  notificationLambdaArn?: string;
}

/**
 * <p>Contains an image that is one of the following:</p> <ul> <li> <p>An image file. Choose this option to upload a new image.</p> </li> <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li> </ul>
 */
export class UpdatePortalRequestBodyPortalLogoImage extends SpeakeasyBase {
  /**
   * Contains an image file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => shared.ImageFile)
  file?: shared.ImageFile;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export class UpdatePortalRequestBody extends SpeakeasyBase {
  /**
   * Contains the configuration information of an alarm created in an IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html">Monitoring with alarms</a> in the <i>IoT SiteWise Application Guide</i>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alarms" })
  @Type(() => UpdatePortalRequestBodyAlarms)
  alarms?: UpdatePortalRequestBodyAlarms;

  /**
   * A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * The email address that sends alarm notifications.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notificationSenderEmail" })
  notificationSenderEmail?: string;

  /**
   * The Amazon Web Services administrator's contact email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portalContactEmail" })
  portalContactEmail: string;

  /**
   * A new description for the portal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portalDescription" })
  portalDescription?: string;

  /**
   * <p>Contains an image that is one of the following:</p> <ul> <li> <p>An image file. Choose this option to upload a new image.</p> </li> <li> <p>The ID of an existing image. Choose this option to keep an existing image.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portalLogoImage" })
  @Type(() => UpdatePortalRequestBodyPortalLogoImage)
  portalLogoImage?: UpdatePortalRequestBodyPortalLogoImage;

  /**
   * A new friendly name for the portal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portalName" })
  portalName: string;

  /**
   * The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of a service role that allows the portal's users to access your IoT SiteWise resources on your behalf. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html">Using service roles for IoT SiteWise Monitor</a> in the <i>IoT SiteWise User Guide</i>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;
}

export class UpdatePortalRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdatePortalRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the portal to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=portalId",
  })
  portalId: string;
}

export class UpdatePortalResponse extends SpeakeasyBase {
  /**
   * ConflictingOperationException
   */
  @SpeakeasyMetadata()
  conflictingOperationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updatePortalResponse?: shared.UpdatePortalResponse;
}
