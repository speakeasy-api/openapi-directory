/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DecryptStepDetails - Each step type has its own &lt;code&gt;StepDetails&lt;/code&gt; structure.
 */
public class DecryptStepDetails {
    /**
     * Specifies the location for the file that's being processed.
     */
    @JsonProperty("DestinationFileLocation")
    public InputFileLocation destinationFileLocation;

    public DecryptStepDetails withDestinationFileLocation(InputFileLocation destinationFileLocation) {
        this.destinationFileLocation = destinationFileLocation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;

    public DecryptStepDetails withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OverwriteExisting")
    public OverwriteExistingEnum overwriteExisting;

    public DecryptStepDetails withOverwriteExisting(OverwriteExistingEnum overwriteExisting) {
        this.overwriteExisting = overwriteExisting;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceFileLocation")
    public String sourceFileLocation;

    public DecryptStepDetails withSourceFileLocation(String sourceFileLocation) {
        this.sourceFileLocation = sourceFileLocation;
        return this;
    }
    
    @JsonProperty("Type")
    public EncryptionTypeEnum type;

    public DecryptStepDetails withType(EncryptionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public DecryptStepDetails(@JsonProperty("DestinationFileLocation") InputFileLocation destinationFileLocation, @JsonProperty("Type") EncryptionTypeEnum type) {
        this.destinationFileLocation = destinationFileLocation;
        this.type = type;
  }
}
