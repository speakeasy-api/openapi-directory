/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PermissionConstraint } from "./permissionconstraint";
import { Expose, Type } from "class-transformer";

/**
 * [Deprecated] All fields defined in a permission are ANDed.
 */
export class Permission extends SpeakeasyBase {
  /**
   * Extra custom constraints. The constraints are ANDed together.
   */
  @SpeakeasyMetadata({ elemType: PermissionConstraint })
  @Expose({ name: "constraints" })
  @Type(() => PermissionConstraint)
  constraints?: PermissionConstraint[];

  /**
   * Used in Ingress or Egress Gateway cases to specify hosts that the policy applies to. Exact match, prefix match, and suffix match are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hosts" })
  hosts?: string[];

  /**
   * HTTP method.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "methods" })
  methods?: string[];

  /**
   * Negate of hosts. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notHosts" })
  notHosts?: string[];

  /**
   * Negate of methods. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notMethods" })
  notMethods?: string[];

  /**
   * Negate of paths. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notPaths" })
  notPaths?: string[];

  /**
   * Negate of ports. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notPorts" })
  notPorts?: string[];

  /**
   * HTTP request paths or gRPC methods. Exact match, prefix match, and suffix match are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paths" })
  paths?: string[];

  /**
   * Port names or numbers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ports" })
  ports?: string[];
}
