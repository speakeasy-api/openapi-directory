"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UpdateFolderRequestClassificationEnum(str, Enum):
    r"""&#128640; Since v4.30.0
    
    Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFolderRequest:
    r"""Request model for updating folder's metadata"""
    
    classification: Optional[UpdateFolderRequestClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.30.0
    
    Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Folder name"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes
    
    Use empty string to remove.
    """  
    timestamp_creation: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampCreation'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the node was created on external file system
    
    (default: current server datetime in UTC format)
    """  
    timestamp_modification: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestampModification'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.22.0
    
    Time the content of a node was last modified on external file system
    
    (default: current server datetime in UTC format)
    """  
    