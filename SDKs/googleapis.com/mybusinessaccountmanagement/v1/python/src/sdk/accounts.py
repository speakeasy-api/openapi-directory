"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def mybusinessaccountmanagement_accounts_create(self, request: operations.MybusinessaccountmanagementAccountsCreateRequest) -> operations.MybusinessaccountmanagementAccountsCreateResponse:
        r"""Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsCreateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def mybusinessaccountmanagement_accounts_get(self, request: operations.MybusinessaccountmanagementAccountsGetRequest) -> operations.MybusinessaccountmanagementAccountsGetResponse:
        r"""Gets the specified account. Returns `NOT_FOUND` if the account does not exist or if the caller does not have access rights to it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessaccountmanagementAccountsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out

        return res

    def mybusinessaccountmanagement_accounts_invitations_accept(self, request: operations.MybusinessaccountmanagementAccountsInvitationsAcceptRequest) -> operations.MybusinessaccountmanagementAccountsInvitationsAcceptResponse:
        r"""Accepts the specified invitation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessaccountmanagementAccountsInvitationsAcceptRequest, base_url, '/v1/{name}:accept', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsInvitationsAcceptRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsInvitationsAcceptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def mybusinessaccountmanagement_accounts_invitations_decline(self, request: operations.MybusinessaccountmanagementAccountsInvitationsDeclineRequest) -> operations.MybusinessaccountmanagementAccountsInvitationsDeclineResponse:
        r"""Declines the specified invitation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessaccountmanagementAccountsInvitationsDeclineRequest, base_url, '/v1/{name}:decline', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsInvitationsDeclineRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsInvitationsDeclineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def mybusinessaccountmanagement_accounts_invitations_list(self, request: operations.MybusinessaccountmanagementAccountsInvitationsListRequest) -> operations.MybusinessaccountmanagementAccountsInvitationsListResponse:
        r"""Lists pending invitations for the specified account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.MybusinessaccountmanagementAccountsInvitationsListRequest, base_url, '/v1/{parent}/invitations', request)
        
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsInvitationsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsInvitationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInvitationsResponse])
                res.list_invitations_response = out

        return res

    def mybusinessaccountmanagement_accounts_list(self, request: operations.MybusinessaccountmanagementAccountsListRequest) -> operations.MybusinessaccountmanagementAccountsListResponse:
        r"""Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounts'
        
        query_params = utils.get_query_params(operations.MybusinessaccountmanagementAccountsListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MybusinessaccountmanagementAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAccountsResponse])
                res.list_accounts_response = out

        return res

    