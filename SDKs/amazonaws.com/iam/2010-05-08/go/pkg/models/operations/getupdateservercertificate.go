// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdateServerCertificateActionEnum
type GETUpdateServerCertificateActionEnum string

const (
	GETUpdateServerCertificateActionEnumUpdateServerCertificate GETUpdateServerCertificateActionEnum = "UpdateServerCertificate"
)

func (e GETUpdateServerCertificateActionEnum) ToPointer() *GETUpdateServerCertificateActionEnum {
	return &e
}

func (e *GETUpdateServerCertificateActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UpdateServerCertificate":
		*e = GETUpdateServerCertificateActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateServerCertificateActionEnum: %v", v)
	}
}

// GETUpdateServerCertificateVersionEnum
type GETUpdateServerCertificateVersionEnum string

const (
	GETUpdateServerCertificateVersionEnumTwoThousandAndTen0508 GETUpdateServerCertificateVersionEnum = "2010-05-08"
)

func (e GETUpdateServerCertificateVersionEnum) ToPointer() *GETUpdateServerCertificateVersionEnum {
	return &e
}

func (e *GETUpdateServerCertificateVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETUpdateServerCertificateVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateServerCertificateVersionEnum: %v", v)
	}
}

type GETUpdateServerCertificateRequest struct {
	Action GETUpdateServerCertificateActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
	NewPath *string `queryParam:"style=form,explode=true,name=NewPath"`
	// <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	NewServerCertificateName *string `queryParam:"style=form,explode=true,name=NewServerCertificateName"`
	// <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	ServerCertificateName string                                `queryParam:"style=form,explode=true,name=ServerCertificateName"`
	Version               GETUpdateServerCertificateVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdateServerCertificateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
