"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PermissionGroups:
    r"""With these endpoints you can manage your Permission Groups.
    
    <a href=\"https://configcat.com/docs/advanced/team-collaboration#permissions--groups\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Permissions.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_permission_group(self, request: operations.CreatePermissionGroupRequest) -> operations.CreatePermissionGroupResponse:
        r"""Create Permission Group
        This endpoint creates a new Permission Group in a specified Product 
        identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePermissionGroupRequest, base_url, '/v1/products/{productId}/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_permission_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePermissionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModelHaljson])
                res.permission_group_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModel])
                res.permission_group_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def delete_permission_group(self, request: operations.DeletePermissionGroupRequest) -> operations.DeletePermissionGroupResponse:
        r"""Delete Permission Group
        This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePermissionGroupRequest, base_url, '/v1/permissions/{permissionGroupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePermissionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_permission_group(self, request: operations.GetPermissionGroupRequest) -> operations.GetPermissionGroupResponse:
        r"""Get Permission Group
        This endpoint returns the metadata of a Permission Group 
        identified by the `permissionGroupId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPermissionGroupRequest, base_url, '/v1/permissions/{permissionGroupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPermissionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModelHaljson])
                res.permission_group_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModel])
                res.permission_group_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_permission_groups(self, request: operations.GetPermissionGroupsRequest) -> operations.GetPermissionGroupsResponse:
        r"""List Permission Groups
        This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the
        `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPermissionGroupsRequest, base_url, '/v1/products/{productId}/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPermissionGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PermissionGroupModelHaljson]])
                res.permission_group_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PermissionGroupModel]])
                res.permission_group_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def update_permission_group(self, request: operations.UpdatePermissionGroupRequest) -> operations.UpdatePermissionGroupResponse:
        r"""Update Permission Group
        This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePermissionGroupRequest, base_url, '/v1/permissions/{permissionGroupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_permission_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePermissionGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModelHaljson])
                res.permission_group_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionGroupModel])
                res.permission_group_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    