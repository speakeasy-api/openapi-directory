/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ListPastWebinarQASecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class ListPastWebinarQARequest extends SpeakeasyBase {
  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class ListPastWebinarQa200ApplicationXMLQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Answer submitted for the question.
   */
  @SpeakeasyMetadata()
  answer?: string;

  /**
   * Question asked during the Q&A.
   */
  @SpeakeasyMetadata()
  question?: string;
}

export class ListPastWebinarQa200ApplicationXMLQuestions extends SpeakeasyBase {
  /**
   * Email address of the user.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Name of the user. If "anonymous" option is enabled for the Q&A, the participant's  information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  name?: string;

  @SpeakeasyMetadata({
    elemType: ListPastWebinarQa200ApplicationXMLQuestionsQuestionDetails,
  })
  questionDetails?: ListPastWebinarQa200ApplicationXMLQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Q&A returned successfully.
 */
export class ListPastWebinarQa200ApplicationXML extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  id?: number;

  @SpeakeasyMetadata({ elemType: ListPastWebinarQa200ApplicationXMLQuestions })
  questions?: ListPastWebinarQa200ApplicationXMLQuestions[];

  /**
   * The start time of the Webinar.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Webinar UUID.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

export class ListPastWebinarQa200ApplicationJSONQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Answer submitted for the question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer" })
  answer?: string;

  /**
   * Question asked during the Q&A.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "question" })
  question?: string;
}

export class ListPastWebinarQa200ApplicationJSONQuestions extends SpeakeasyBase {
  /**
   * Email address of the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Name of the user. If "anonymous" option is enabled for the Q&A, the participant's  information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata({
    elemType: ListPastWebinarQa200ApplicationJSONQuestionsQuestionDetails,
  })
  @Expose({ name: "question_details" })
  @Type(() => ListPastWebinarQa200ApplicationJSONQuestionsQuestionDetails)
  questionDetails?: ListPastWebinarQa200ApplicationJSONQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Q&A returned successfully.
 */
export class ListPastWebinarQa200ApplicationJSON extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata({ elemType: ListPastWebinarQa200ApplicationJSONQuestions })
  @Expose({ name: "questions" })
  @Type(() => ListPastWebinarQa200ApplicationJSONQuestions)
  questions?: ListPastWebinarQa200ApplicationJSONQuestions[];

  /**
   * The start time of the Webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Webinar UUID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class ListPastWebinarQAResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**<br>
   *
   * @remarks
   * Q&A returned successfully.
   */
  @SpeakeasyMetadata()
  listPastWebinarQA200ApplicationJSONObject?: ListPastWebinarQa200ApplicationJSON;
}
