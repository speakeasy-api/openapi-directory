/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ArticleSearch - Search Parameters
 */
public class ArticleSearch {
    /**
     * Only return articles with this doi
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doi")
    public String doi;

    public ArticleSearch withDoi(String doi) {
        this.doi = doi;
        return this;
    }
    
    /**
     * only return collections from this group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    public Integer group;

    public ArticleSearch withGroup(Integer group) {
        this.group = group;
        return this;
    }
    
    /**
     * Only return articles with this handle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handle")
    public String handle;

    public ArticleSearch withHandle(String handle) {
        this.handle = handle;
        return this;
    }
    
    /**
     * only return collections from this institution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution")
    public Integer institution;

    public ArticleSearch withInstitution(Integer institution) {
        this.institution = institution;
        return this;
    }
    
    /**
     * Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_type")
    public Long itemType;

    public ArticleSearch withItemType(Long itemType) {
        this.itemType = itemType;
        return this;
    }
    
    /**
     * Number of results included on a page. Used for pagination with query
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Long limit;

    public ArticleSearch withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modified_since")
    public String modifiedSince;

    public ArticleSearch withModifiedSince(String modifiedSince) {
        this.modifiedSince = modifiedSince;
        return this;
    }
    
    /**
     * Where to start the listing(the offset of the first result). Used for pagination with limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;

    public ArticleSearch withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The field by which to order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    public ArticleSearchOrderEnum order;

    public ArticleSearch withOrder(ArticleSearchOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * Direction of ordering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_direction")
    public ArticleSearchOrderDirectionEnum orderDirection;

    public ArticleSearch withOrderDirection(ArticleSearchOrderDirectionEnum orderDirection) {
        this.orderDirection = orderDirection;
        return this;
    }
    
    /**
     * Page number. Used for pagination with page_size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    public Long page;

    public ArticleSearch withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results included on a page. Used for pagination with page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    public Long pageSize;

    public ArticleSearch withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Only return articles in this project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    public Long projectId;

    public ArticleSearch withProjectId(Long projectId) {
        this.projectId = projectId;
        return this;
    }
    
    /**
     * Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published_since")
    public String publishedSince;

    public ArticleSearch withPublishedSince(String publishedSince) {
        this.publishedSince = publishedSince;
        return this;
    }
    
    /**
     * Only return articles with this resource_doi
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_doi")
    public String resourceDoi;

    public ArticleSearch withResourceDoi(String resourceDoi) {
        this.resourceDoi = resourceDoi;
        return this;
    }
    
    /**
     * Search term
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_for")
    public String searchFor;

    public ArticleSearch withSearchFor(String searchFor) {
        this.searchFor = searchFor;
        return this;
    }
    
    public ArticleSearch(){}
}
