/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Reports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generates and returns a report immediately.
   */
  doubleclicksearchReportsGenerate(
    req: operations.DoubleclicksearchReportsGenerateRequest,
    security: operations.DoubleclicksearchReportsGenerateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclicksearchReportsGenerateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclicksearchReportsGenerateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/doubleclicksearch/v2/reports/generate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclicksearchReportsGenerateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclicksearchReportsGenerateResponse =
        new operations.DoubleclicksearchReportsGenerateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Polls for the status of a report request.
   */
  doubleclicksearchReportsGet(
    req: operations.DoubleclicksearchReportsGetRequest,
    security: operations.DoubleclicksearchReportsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclicksearchReportsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclicksearchReportsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/doubleclicksearch/v2/reports/{reportId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclicksearchReportsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclicksearchReportsGetResponse =
        new operations.DoubleclicksearchReportsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Downloads a report file encoded in UTF-8.
   */
  doubleclicksearchReportsGetFile(
    req: operations.DoubleclicksearchReportsGetFileRequest,
    security: operations.DoubleclicksearchReportsGetFileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclicksearchReportsGetFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclicksearchReportsGetFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclicksearchReportsGetFileSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclicksearchReportsGetFileResponse =
        new operations.DoubleclicksearchReportsGetFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Downloads a csv file(encoded in UTF-8) that contains ID mappings between legacy SA360 and new SA360. The file includes all children entities of the given advertiser(e.g. engine accounts, campaigns, ad groups, etc.) that exist in both legacy SA360 and new SA360.
   */
  doubleclicksearchReportsGetIdMappingFile(
    req: operations.DoubleclicksearchReportsGetIdMappingFileRequest,
    security: operations.DoubleclicksearchReportsGetIdMappingFileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclicksearchReportsGetIdMappingFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclicksearchReportsGetIdMappingFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/idmapping",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DoubleclicksearchReportsGetIdMappingFileSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclicksearchReportsGetIdMappingFileResponse =
        new operations.DoubleclicksearchReportsGetIdMappingFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.idMappingFile = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a report request into the reporting system.
   */
  doubleclicksearchReportsRequest(
    req: operations.DoubleclicksearchReportsRequestRequest,
    security: operations.DoubleclicksearchReportsRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoubleclicksearchReportsRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoubleclicksearchReportsRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/doubleclicksearch/v2/reports";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoubleclicksearchReportsRequestSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoubleclicksearchReportsRequestResponse =
        new operations.DoubleclicksearchReportsRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
      }

      return res;
    });
  }
}
