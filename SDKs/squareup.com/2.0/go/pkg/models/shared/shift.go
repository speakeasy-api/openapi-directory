// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Shift - A record of the hourly rate, start, and end times for a single work shift
// for an employee. This might include a record of the start and end times for breaks
// taken during the shift.
type Shift struct {
	// A list of all the paid or unpaid breaks that were taken during this shift.
	Breaks []Break `json:"breaks,omitempty"`
	// A read-only timestamp in RFC 3339 format; presented in UTC.
	CreatedAt *string `json:"created_at,omitempty"`
	// The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.
	EmployeeID *string `json:"employee_id,omitempty"`
	// RFC 3339; shifted to the timezone + offset. Precision up to the minute is
	// respected; seconds are truncated.
	EndAt *string `json:"end_at,omitempty"`
	// The UUID for this object.
	ID *string `json:"id,omitempty"`
	// The ID of the location this shift occurred at. The location should be based on
	// where the employee clocked in.
	LocationID *string `json:"location_id,omitempty"`
	// RFC 3339; shifted to the location timezone + offset. Precision up to the
	// minute is respected; seconds are truncated.
	StartAt string `json:"start_at"`
	// Describes the working state of the current `Shift`.
	Status *string `json:"status,omitempty"`
	// The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26".
	TeamMemberID *string `json:"team_member_id,omitempty"`
	// The read-only convenience value that is calculated from the location based
	// on the `location_id`. Format: the IANA timezone database identifier for the
	// location timezone.
	Timezone *string `json:"timezone,omitempty"`
	// A read-only timestamp in RFC 3339 format; presented in UTC.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Used for resolving concurrency issues. The request fails if the version
	// provided does not match the server version at the time of the request. If not provided,
	// Square executes a blind write; potentially overwriting data from another
	// write.
	Version *int64 `json:"version,omitempty"`
	// The hourly wage rate used to compensate an employee for this shift.
	Wage *ShiftWage `json:"wage,omitempty"`
}
