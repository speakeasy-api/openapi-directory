// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetBatchesBatchStatusEnum - The status of the batch if internal transfer.
type GetBatchesBatchStatusEnum string

const (
	GetBatchesBatchStatusEnumSubmitted GetBatchesBatchStatusEnum = "SUBMITTED"
	GetBatchesBatchStatusEnumRemoved   GetBatchesBatchStatusEnum = "REMOVED"
	GetBatchesBatchStatusEnumSucceeded GetBatchesBatchStatusEnum = "SUCCEEDED"
	GetBatchesBatchStatusEnumFailed    GetBatchesBatchStatusEnum = "FAILED"
)

func (e *GetBatchesBatchStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMITTED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = GetBatchesBatchStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchesBatchStatusEnum: %s", s)
	}
}

// GetBatchesBatchTypesEnum - The type of the batch. Can be one of the 3 listed enums.
type GetBatchesBatchTypesEnum string

const (
	GetBatchesBatchTypesEnumInternalTransfer GetBatchesBatchTypesEnum = "INTERNAL_TRANSFER"
	GetBatchesBatchTypesEnumBankTransfer     GetBatchesBatchTypesEnum = "BANK_TRANSFER"
	GetBatchesBatchTypesEnumNewPayee         GetBatchesBatchTypesEnum = "NEW_PAYEE"
)

func (e *GetBatchesBatchTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INTERNAL_TRANSFER":
		fallthrough
	case "BANK_TRANSFER":
		fallthrough
	case "NEW_PAYEE":
		*e = GetBatchesBatchTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchesBatchTypesEnum: %s", s)
	}
}

// GetBatchesOrderEnum - You can order the batches by ascending or descending order.
type GetBatchesOrderEnum string

const (
	GetBatchesOrderEnumDesc GetBatchesOrderEnum = "DESC"
	GetBatchesOrderEnumAsc  GetBatchesOrderEnum = "ASC"
)

func (e *GetBatchesOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DESC":
		fallthrough
	case "ASC":
		*e = GetBatchesOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchesOrderEnum: %s", s)
	}
}

// GetBatchesOrderByEnum - You can order the batches by date. No other options at this time
type GetBatchesOrderByEnum string

const (
	GetBatchesOrderByEnumDate GetBatchesOrderByEnum = "DATE"
)

func (e *GetBatchesOrderByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATE":
		*e = GetBatchesOrderByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchesOrderByEnum: %s", s)
	}
}

type GetBatchesQueryParams struct {
	// The status of the batch if internal transfer.
	BatchStatus *GetBatchesBatchStatusEnum `queryParam:"style=form,explode=true,name=batchStatus"`
	// The type of the batch. Can be one of the 3 listed enums.
	BatchTypes *GetBatchesBatchTypesEnum `queryParam:"style=form,explode=true,name=batchTypes"`
	// You can order the batches by ascending or descending order.
	Order *GetBatchesOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// You can order the batches by date. No other options at this time
	OrderBy *GetBatchesOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
}

type GetBatchesRequest struct {
	QueryParams GetBatchesQueryParams
}

// GetBatchesBatchItemsBatchItemResult - The outcome of the attempted transaction.
type GetBatchesBatchItemsBatchItemResult struct {
	Code    *int64  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetBatchesBatchItemsBatchItemStatusEnum - status of the batch if internal trasnfer
type GetBatchesBatchItemsBatchItemStatusEnum string

const (
	GetBatchesBatchItemsBatchItemStatusEnumSubmitted GetBatchesBatchItemsBatchItemStatusEnum = "SUBMITTED"
	GetBatchesBatchItemsBatchItemStatusEnumRemoved   GetBatchesBatchItemsBatchItemStatusEnum = "REMOVED"
	GetBatchesBatchItemsBatchItemStatusEnumSucceeded GetBatchesBatchItemsBatchItemStatusEnum = "SUCCEEDED"
	GetBatchesBatchItemsBatchItemStatusEnumFailed    GetBatchesBatchItemsBatchItemStatusEnum = "FAILED"
)

func (e *GetBatchesBatchItemsBatchItemStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUBMITTED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		*e = GetBatchesBatchItemsBatchItemStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBatchesBatchItemsBatchItemStatusEnum: %s", s)
	}
}

type GetBatchesBatchItemsBatchItem struct {
	// The amount of funds to send. In cent or pence
	Amount *int64 `json:"amount,omitempty"`
	// The amount of the transfer after fees and taxes. in pence or cent.
	AmountAfterCharges *int64 `json:"amountAfterCharges,omitempty"`
	// A UUID for this item.
	BatchItemUUID *string `json:"batchItemUuid,omitempty"`
	// The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// The fee charged by fire.com for the payment. In pence or cent.
	FeeAmount *int64 `json:"feeAmount,omitempty"`
	// The Fire account ID of the source account.
	IcanFrom *int64 `json:"icanFrom,omitempty"`
	// The Fire account ID for the fire.com account the funds are sent to.
	IcanTo *int64 `json:"icanTo,omitempty"`
	// The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	// The reference on the transaction.
	Ref *string `json:"ref,omitempty"`
	// The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
	RefID *int64 `json:"refId,omitempty"`
	// The outcome of the attempted transaction.
	Result *GetBatchesBatchItemsBatchItemResult `json:"result,omitempty"`
	// status of the batch if internal trasnfer
	Status *GetBatchesBatchItemsBatchItemStatusEnum `json:"status,omitempty"`
	// Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
	TaxAmount *int64 `json:"taxAmount,omitempty"`
}

// GetBatchesBatchItems - List all batches.
type GetBatchesBatchItems struct {
	Items []GetBatchesBatchItemsBatchItem `json:"items,omitempty"`
	// total number of batches returned
	Total *int64 `json:"total,omitempty"`
}

type GetBatchesResponse struct {
	// List all batches.
	BatchItems  *GetBatchesBatchItems
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
