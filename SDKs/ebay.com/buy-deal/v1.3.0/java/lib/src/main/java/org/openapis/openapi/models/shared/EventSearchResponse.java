/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EventSearchResponse - The result set for the specified event search criteria.
 */
public class EventSearchResponse {
    /**
     * A list of results that match the search criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    public Event[] events;

    public EventSearchResponse withEvents(Event[] events) {
        this.events = events;
        return this;
    }
    
    /**
     * The relative path to the current set of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    public String href;

    public EventSearchResponse withHref(String href) {
        this.href = href;
        return this;
    }
    
    /**
     * The maximum number of items, from the current result set, returned on a single page. Default: 20
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Integer limit;

    public EventSearchResponse withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * The relative path to the next set of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    public String next;

    public EventSearchResponse withNext(String next) {
        this.next = next;
        return this;
    }
    
    /**
     * The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Integer offset;

    public EventSearchResponse withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The relative path to the previous set of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prev")
    public String prev;

    public EventSearchResponse withPrev(String prev) {
        this.prev = prev;
        return this;
    }
    
    /**
     * The total number of matches for the specified search criteria.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public Integer total;

    public EventSearchResponse withTotal(Integer total) {
        this.total = total;
        return this;
    }
    
    public EventSearchResponse(){}
}
