"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import collaborator as shared_collaborator
from enum import Enum
from typing import Optional

class ReposListCollaboratorsAffiliationEnum(str, Enum):
    r"""Filter collaborators returned by their affiliation. Can be one of:
    \* `outside`: All outside collaborators of an organization-owned repository.  
    \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  
    \* `all`: All collaborators the authenticated user can see.
    """
    OUTSIDE = 'outside'
    DIRECT = 'direct'
    ALL = 'all'


@dataclasses.dataclass
class ReposListCollaboratorsRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    affiliation: Optional[ReposListCollaboratorsAffiliationEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'affiliation', 'style': 'form', 'explode': True }})
    r"""Filter collaborators returned by their affiliation. Can be one of:
    \* `outside`: All outside collaborators of an organization-owned repository.  
    \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  
    \* `all`: All collaborators the authenticated user can see.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    

@dataclasses.dataclass
class ReposListCollaboratorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    collaborators: Optional[list[shared_collaborator.Collaborator]] = dataclasses.field(default=None)
    r"""Response"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    