"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import capabilityproblem as shared_capabilityproblem
from ..shared import documentreference as shared_documentreference
from ..shared import entityreference as shared_entityreference
from ..shared import individual as shared_individual
from ..shared import legalentityassociation as shared_legalentityassociation
from ..shared import legalentitycapability as shared_legalentitycapability
from ..shared import organization as shared_organization
from ..shared import soleproprietorship as shared_soleproprietorship
from ..shared import transferinstrumentreference as shared_transferinstrumentreference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LegalEntityTypeEnum(str, Enum):
    r"""The type of legal entity.
    
     Possible values: **individual**, **organization**, or **soleProprietorship**.
    """
    INDIVIDUAL = 'individual'
    ORGANIZATION = 'organization'
    SOLE_PROPRIETORSHIP = 'soleProprietorship'
    TRUST = 'trust'
    UNINCORPORATED_PARTNERSHIP = 'unincorporatedPartnership'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LegalEntity:
    r"""OK - the request has succeeded."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the legal entity."""  
    capabilities: Optional[dict[str, shared_legalentitycapability.LegalEntityCapability]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capabilities'), 'exclude': lambda f: f is None }})
    r"""Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability."""  
    document_details: Optional[list[shared_documentreference.DocumentReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentDetails'), 'exclude': lambda f: f is None }})
    r"""List of documents uploaded for the legal entity."""  
    documents: Optional[list[shared_entityreference.EntityReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documents'), 'exclude': lambda f: f is None }})
    r"""List of documents uploaded for the legal entity."""  
    entity_associations: Optional[list[shared_legalentityassociation.LegalEntityAssociation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityAssociations'), 'exclude': lambda f: f is None }})
    r"""List of legal entities associated with the current legal entity.
    For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
    """  
    individual: Optional[shared_individual.Individual] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    organization: Optional[shared_organization.Organization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization'), 'exclude': lambda f: f is None }})  
    problems: Optional[list[shared_capabilityproblem.CapabilityProblem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('problems'), 'exclude': lambda f: f is None }})
    r"""List of the verification errors from capabilities for the legal entity."""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference'), 'exclude': lambda f: f is None }})
    r"""Your reference for the legal entity, maximum 150 characters."""  
    sole_proprietorship: Optional[shared_soleproprietorship.SoleProprietorship] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soleProprietorship'), 'exclude': lambda f: f is None }})  
    transfer_instruments: Optional[list[shared_transferinstrumentreference.TransferInstrumentReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferInstruments'), 'exclude': lambda f: f is None }})
    r"""List of transfer instruments that the legal entity owns."""  
    type: Optional[LegalEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of legal entity.
    
     Possible values: **individual**, **organization**, or **soleProprietorship**.
    """  
    