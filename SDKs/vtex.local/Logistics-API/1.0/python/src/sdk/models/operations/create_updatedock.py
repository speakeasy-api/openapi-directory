"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateDockCreateUpdateDockRequestAddress1Country:
    
    acronym: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acronym') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateDockCreateUpdateDockRequestAddress1:
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})  
    complement: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complement') }})  
    coordinates: list[list[float]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates') }})  
    country: CreateUpdateDockCreateUpdateDockRequestAddress1Country = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    neighborhood: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('neighborhood') }})  
    number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    street: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateUpdateDockCreateUpdateDockRequest:
    
    address: CreateUpdateDockCreateUpdateDockRequestAddress1 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})  
    dock_time_fake: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockTimeFake') }})  
    freight_table_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freightTableIds') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    priority: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority') }})  
    sales_channel: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannel') }})  
    sales_channels: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesChannels') }})  
    time_fake_overhead: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFakeOverhead') }})  
    wms_end_point: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wmsEndPoint') }})  
    

@dataclasses.dataclass
class CreateUpdateDockRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand"""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent"""  
    request_body: CreateUpdateDockCreateUpdateDockRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateUpdateDockResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    