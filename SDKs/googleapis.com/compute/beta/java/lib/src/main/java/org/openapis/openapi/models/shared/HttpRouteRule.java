/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRouteRule - The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform.
 */
public class HttpRouteRule {
    /**
     * Specifies the custom error response policy that must be applied when the backend service or backend bucket responds with an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customErrorResponsePolicy")
    public CustomErrorResponsePolicy customErrorResponsePolicy;

    public HttpRouteRule withCustomErrorResponsePolicy(CustomErrorResponsePolicy customErrorResponsePolicy) {
        this.customErrorResponsePolicy = customErrorResponsePolicy;
        return this;
    }
    
    /**
     * The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public HttpRouteRule withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The request and response header transformations that take effect before the request is passed along to the selected backendService.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headerAction")
    public HttpHeaderAction headerAction;

    public HttpRouteRule withHeaderAction(HttpHeaderAction headerAction) {
        this.headerAction = headerAction;
        return this;
    }
    
    /**
     * Outbound route specific configuration for networkservices.HttpFilter resources enabled by Traffic Director. httpFilterConfigs only applies for load balancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpFilterConfigs")
    public HttpFilterConfig[] httpFilterConfigs;

    public HttpRouteRule withHttpFilterConfigs(HttpFilterConfig[] httpFilterConfigs) {
        this.httpFilterConfigs = httpFilterConfigs;
        return this;
    }
    
    /**
     * Outbound route specific metadata supplied to networkservices.HttpFilter resources enabled by Traffic Director. httpFilterMetadata only applies for load balancers with loadBalancingScheme set to INTERNAL_SELF_MANAGED. See ForwardingRule for more details. The only configTypeUrl supported is type.googleapis.com/google.protobuf.Struct Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpFilterMetadata")
    public HttpFilterConfig[] httpFilterMetadata;

    public HttpRouteRule withHttpFilterMetadata(HttpFilterConfig[] httpFilterMetadata) {
        this.httpFilterMetadata = httpFilterMetadata;
        return this;
    }
    
    /**
     * The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchRules")
    public HttpRouteRuleMatch[] matchRules;

    public HttpRouteRule withMatchRules(HttpRouteRuleMatch[] matchRules) {
        this.matchRules = matchRules;
        return this;
    }
    
    /**
     * For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;

    public HttpRouteRule withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routeAction")
    public HttpRouteAction routeAction;

    public HttpRouteRule withRouteAction(HttpRouteAction routeAction) {
        this.routeAction = routeAction;
        return this;
    }
    
    /**
     * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    public String service;

    public HttpRouteRule withService(String service) {
        this.service = service;
        return this;
    }
    
    /**
     * Specifies settings for an HTTP redirect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urlRedirect")
    public HttpRedirectAction urlRedirect;

    public HttpRouteRule withUrlRedirect(HttpRedirectAction urlRedirect) {
        this.urlRedirect = urlRedirect;
        return this;
    }
    
    public HttpRouteRule(){}
}
