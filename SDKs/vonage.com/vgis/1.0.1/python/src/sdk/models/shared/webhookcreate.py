"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WebhookCreateEventsEnum(str, Enum):
    CALL = 'CALL'

class WebhookCreateMetadataPolicyEnum(str, Enum):
    r"""Metadata policy for the webhook"""
    NONE = 'NONE'
    HEADER = 'HEADER'
    BODY = 'BODY'

class WebhookCreateSigningAlgoEnum(str, Enum):
    r"""Signing algorithm for the webhook"""
    HMAC_SHA256 = 'HMAC_SHA256'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebhookCreate:
    r"""Webhook create parameters"""
    
    events: Optional[list[WebhookCreateEventsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""Events to subscribe to the webhook"""  
    metadata_policy: Optional[WebhookCreateMetadataPolicyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataPolicy'), 'exclude': lambda f: f is None }})
    r"""Metadata policy for the webhook"""  
    signing_algo: Optional[WebhookCreateSigningAlgoEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingAlgo'), 'exclude': lambda f: f is None }})
    r"""Signing algorithm for the webhook"""  
    signing_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signingKey'), 'exclude': lambda f: f is None }})
    r"""Signing key for the webhook"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Destination URL for events"""  
    