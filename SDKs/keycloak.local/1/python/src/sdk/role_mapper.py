"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RoleMapper:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_groups_id_role_mappings_realm(self, request: operations.DeleteRealmGroupsIDRoleMappingsRealmRequest) -> operations.DeleteRealmGroupsIDRoleMappingsRealmResponse:
        r"""Delete realm-level role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmGroupsIDRoleMappingsRealmRequest, base_url, '/{realm}/groups/{id}/role-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmGroupsIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_users_id_role_mappings_realm(self, request: operations.DeleteRealmUsersIDRoleMappingsRealmRequest) -> operations.DeleteRealmUsersIDRoleMappingsRealmResponse:
        r"""Delete realm-level role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmUsersIDRoleMappingsRealmRequest, base_url, '/{realm}/users/{id}/role-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmUsersIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_groups_id_role_mappings(self, request: operations.GetRealmGroupsIDRoleMappingsRequest) -> operations.GetRealmGroupsIDRoleMappingsResponse:
        r"""Get role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsRequest, base_url, '/{realm}/groups/{id}/role-mappings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MappingsRepresentation])
                res.mappings_representation = out

        return res

    def get_realm_groups_id_role_mappings_realm(self, request: operations.GetRealmGroupsIDRoleMappingsRealmRequest) -> operations.GetRealmGroupsIDRoleMappingsRealmResponse:
        r"""Get realm-level role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsRealmRequest, base_url, '/{realm}/groups/{id}/role-mappings/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_groups_id_role_mappings_realm_available(self, request: operations.GetRealmGroupsIDRoleMappingsRealmAvailableRequest) -> operations.GetRealmGroupsIDRoleMappingsRealmAvailableResponse:
        r"""Get realm-level roles that can be mapped"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsRealmAvailableRequest, base_url, '/{realm}/groups/{id}/role-mappings/realm/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsRealmAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_groups_id_role_mappings_realm_composite(self, request: operations.GetRealmGroupsIDRoleMappingsRealmCompositeRequest) -> operations.GetRealmGroupsIDRoleMappingsRealmCompositeResponse:
        r"""Get effective realm-level role mappings   This will recurse all composite roles to get the result."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsRealmCompositeRequest, base_url, '/{realm}/groups/{id}/role-mappings/realm/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsRealmCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings(self, request: operations.GetRealmUsersIDRoleMappingsRequest) -> operations.GetRealmUsersIDRoleMappingsResponse:
        r"""Get role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsRequest, base_url, '/{realm}/users/{id}/role-mappings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MappingsRepresentation])
                res.mappings_representation = out

        return res

    def get_realm_users_id_role_mappings_realm(self, request: operations.GetRealmUsersIDRoleMappingsRealmRequest) -> operations.GetRealmUsersIDRoleMappingsRealmResponse:
        r"""Get realm-level role mappings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsRealmRequest, base_url, '/{realm}/users/{id}/role-mappings/realm', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings_realm_available(self, request: operations.GetRealmUsersIDRoleMappingsRealmAvailableRequest) -> operations.GetRealmUsersIDRoleMappingsRealmAvailableResponse:
        r"""Get realm-level roles that can be mapped"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsRealmAvailableRequest, base_url, '/{realm}/users/{id}/role-mappings/realm/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsRealmAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings_realm_composite(self, request: operations.GetRealmUsersIDRoleMappingsRealmCompositeRequest) -> operations.GetRealmUsersIDRoleMappingsRealmCompositeResponse:
        r"""Get effective realm-level role mappings   This will recurse all composite roles to get the result."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsRealmCompositeRequest, base_url, '/{realm}/users/{id}/role-mappings/realm/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsRealmCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def post_realm_groups_id_role_mappings_realm(self, request: operations.PostRealmGroupsIDRoleMappingsRealmRequest) -> operations.PostRealmGroupsIDRoleMappingsRealmResponse:
        r"""Add realm-level role mappings to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmGroupsIDRoleMappingsRealmRequest, base_url, '/{realm}/groups/{id}/role-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmGroupsIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_users_id_role_mappings_realm(self, request: operations.PostRealmUsersIDRoleMappingsRealmRequest) -> operations.PostRealmUsersIDRoleMappingsRealmResponse:
        r"""Add realm-level role mappings to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUsersIDRoleMappingsRealmRequest, base_url, '/{realm}/users/{id}/role-mappings/realm', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUsersIDRoleMappingsRealmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    