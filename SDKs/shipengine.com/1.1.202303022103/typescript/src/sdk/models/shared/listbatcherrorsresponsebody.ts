/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BatchResponseError } from "./batchresponseerror";
import { Link } from "./link";
import { OptionalLink } from "./optionallink";
import { Expose, Type } from "class-transformer";

/**
 * Helpful links to other pages of results
 */
export class ListBatchErrorsResponseBodyPaginationLink extends SpeakeasyBase {
  /**
   * The link to the first page of results.  This object will _always_ have an `href` field. If there are no results, then the first page will contain an empty array of items.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first" })
  @Type(() => Link)
  first: Link;

  /**
   * The link to the final page of results.  This object will _always_ have an `href` field. If there are no results, then the final page will contain an empty array of items.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last" })
  @Type(() => Link)
  last: Link;

  /**
   * The link to the next page of results.  The `href` field will only be set when the `page` is less than `pages`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => OptionalLink)
  next: OptionalLink;

  /**
   * The link to the previous page of results.  The `href` field will only be set when the `page` is 2 or greater.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prev" })
  @Type(() => OptionalLink)
  prev: OptionalLink;
}

/**
 * A batch errors response body
 */
export class ListBatchErrorsResponseBody extends SpeakeasyBase {
  /**
   * The errors currently associated with the batch
   */
  @SpeakeasyMetadata({ elemType: BatchResponseError })
  @Expose({ name: "errors" })
  @Type(() => BatchResponseError)
  errors: BatchResponseError[];

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => ListBatchErrorsResponseBodyPaginationLink)
  links: ListBatchErrorsResponseBodyPaginationLink;
}
