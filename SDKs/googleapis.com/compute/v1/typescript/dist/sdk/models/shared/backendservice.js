"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendService = exports.BackendServiceSessionAffinityEnum = exports.BackendServiceProtocolEnum = exports.BackendServiceLocalityLbPolicyEnum = exports.BackendServiceLoadBalancingSchemeEnum = exports.BackendServiceCompressionModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var backend_1 = require("./backend");
var backendservicecdnpolicy_1 = require("./backendservicecdnpolicy");
var backendserviceconnectiontrackingpolicy_1 = require("./backendserviceconnectiontrackingpolicy");
var backendservicefailoverpolicy_1 = require("./backendservicefailoverpolicy");
var backendserviceiap_1 = require("./backendserviceiap");
var backendservicelocalityloadbalancingpolicyconfig_1 = require("./backendservicelocalityloadbalancingpolicyconfig");
var backendservicelogconfig_1 = require("./backendservicelogconfig");
var circuitbreakers_1 = require("./circuitbreakers");
var connectiondraining_1 = require("./connectiondraining");
var consistenthashloadbalancersettings_1 = require("./consistenthashloadbalancersettings");
var duration_1 = require("./duration");
var outlierdetection_1 = require("./outlierdetection");
var securitysettings_1 = require("./securitysettings");
var subsetting_1 = require("./subsetting");
var class_transformer_1 = require("class-transformer");
/**
 * Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
 */
var BackendServiceCompressionModeEnum;
(function (BackendServiceCompressionModeEnum) {
    BackendServiceCompressionModeEnum["Automatic"] = "AUTOMATIC";
    BackendServiceCompressionModeEnum["Disabled"] = "DISABLED";
})(BackendServiceCompressionModeEnum = exports.BackendServiceCompressionModeEnum || (exports.BackendServiceCompressionModeEnum = {}));
/**
 * Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
 */
var BackendServiceLoadBalancingSchemeEnum;
(function (BackendServiceLoadBalancingSchemeEnum) {
    BackendServiceLoadBalancingSchemeEnum["External"] = "EXTERNAL";
    BackendServiceLoadBalancingSchemeEnum["ExternalManaged"] = "EXTERNAL_MANAGED";
    BackendServiceLoadBalancingSchemeEnum["Internal"] = "INTERNAL";
    BackendServiceLoadBalancingSchemeEnum["InternalManaged"] = "INTERNAL_MANAGED";
    BackendServiceLoadBalancingSchemeEnum["InternalSelfManaged"] = "INTERNAL_SELF_MANAGED";
    BackendServiceLoadBalancingSchemeEnum["InvalidLoadBalancingScheme"] = "INVALID_LOAD_BALANCING_SCHEME";
})(BackendServiceLoadBalancingSchemeEnum = exports.BackendServiceLoadBalancingSchemeEnum || (exports.BackendServiceLoadBalancingSchemeEnum = {}));
/**
 * The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
 */
var BackendServiceLocalityLbPolicyEnum;
(function (BackendServiceLocalityLbPolicyEnum) {
    BackendServiceLocalityLbPolicyEnum["InvalidLbPolicy"] = "INVALID_LB_POLICY";
    BackendServiceLocalityLbPolicyEnum["LeastRequest"] = "LEAST_REQUEST";
    BackendServiceLocalityLbPolicyEnum["Maglev"] = "MAGLEV";
    BackendServiceLocalityLbPolicyEnum["OriginalDestination"] = "ORIGINAL_DESTINATION";
    BackendServiceLocalityLbPolicyEnum["Random"] = "RANDOM";
    BackendServiceLocalityLbPolicyEnum["RingHash"] = "RING_HASH";
    BackendServiceLocalityLbPolicyEnum["RoundRobin"] = "ROUND_ROBIN";
    BackendServiceLocalityLbPolicyEnum["WeightedMaglev"] = "WEIGHTED_MAGLEV";
})(BackendServiceLocalityLbPolicyEnum = exports.BackendServiceLocalityLbPolicyEnum || (exports.BackendServiceLocalityLbPolicyEnum = {}));
/**
 * The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
 */
var BackendServiceProtocolEnum;
(function (BackendServiceProtocolEnum) {
    BackendServiceProtocolEnum["Grpc"] = "GRPC";
    BackendServiceProtocolEnum["Http"] = "HTTP";
    BackendServiceProtocolEnum["Http2"] = "HTTP2";
    BackendServiceProtocolEnum["Https"] = "HTTPS";
    BackendServiceProtocolEnum["Ssl"] = "SSL";
    BackendServiceProtocolEnum["Tcp"] = "TCP";
    BackendServiceProtocolEnum["Udp"] = "UDP";
    BackendServiceProtocolEnum["Unspecified"] = "UNSPECIFIED";
})(BackendServiceProtocolEnum = exports.BackendServiceProtocolEnum || (exports.BackendServiceProtocolEnum = {}));
/**
 * Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
 */
var BackendServiceSessionAffinityEnum;
(function (BackendServiceSessionAffinityEnum) {
    BackendServiceSessionAffinityEnum["ClientIp"] = "CLIENT_IP";
    BackendServiceSessionAffinityEnum["ClientIpNoDestination"] = "CLIENT_IP_NO_DESTINATION";
    BackendServiceSessionAffinityEnum["ClientIpPortProto"] = "CLIENT_IP_PORT_PROTO";
    BackendServiceSessionAffinityEnum["ClientIpProto"] = "CLIENT_IP_PROTO";
    BackendServiceSessionAffinityEnum["GeneratedCookie"] = "GENERATED_COOKIE";
    BackendServiceSessionAffinityEnum["HeaderField"] = "HEADER_FIELD";
    BackendServiceSessionAffinityEnum["HttpCookie"] = "HTTP_COOKIE";
    BackendServiceSessionAffinityEnum["None"] = "NONE";
})(BackendServiceSessionAffinityEnum = exports.BackendServiceSessionAffinityEnum || (exports.BackendServiceSessionAffinityEnum = {}));
/**
 * Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * [Global](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) * [Regional](https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices) For more information, see Backend Services.
 */
var BackendService = /** @class */ (function (_super) {
    __extends(BackendService, _super);
    function BackendService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "affinityCookieTtlSec" }),
        __metadata("design:type", Number)
    ], BackendService.prototype, "affinityCookieTtlSec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: backend_1.Backend }),
        (0, class_transformer_1.Expose)({ name: "backends" }),
        (0, class_transformer_1.Type)(function () { return backend_1.Backend; }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "backends", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cdnPolicy" }),
        (0, class_transformer_1.Type)(function () { return backendservicecdnpolicy_1.BackendServiceCdnPolicy; }),
        __metadata("design:type", backendservicecdnpolicy_1.BackendServiceCdnPolicy)
    ], BackendService.prototype, "cdnPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "circuitBreakers" }),
        (0, class_transformer_1.Type)(function () { return circuitbreakers_1.CircuitBreakers; }),
        __metadata("design:type", circuitbreakers_1.CircuitBreakers)
    ], BackendService.prototype, "circuitBreakers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "compressionMode" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "compressionMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectionDraining" }),
        (0, class_transformer_1.Type)(function () { return connectiondraining_1.ConnectionDraining; }),
        __metadata("design:type", connectiondraining_1.ConnectionDraining)
    ], BackendService.prototype, "connectionDraining", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectionTrackingPolicy" }),
        (0, class_transformer_1.Type)(function () { return backendserviceconnectiontrackingpolicy_1.BackendServiceConnectionTrackingPolicy; }),
        __metadata("design:type", backendserviceconnectiontrackingpolicy_1.BackendServiceConnectionTrackingPolicy)
    ], BackendService.prototype, "connectionTrackingPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "consistentHash" }),
        (0, class_transformer_1.Type)(function () { return consistenthashloadbalancersettings_1.ConsistentHashLoadBalancerSettings; }),
        __metadata("design:type", consistenthashloadbalancersettings_1.ConsistentHashLoadBalancerSettings)
    ], BackendService.prototype, "consistentHash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customRequestHeaders" }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "customRequestHeaders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "customResponseHeaders" }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "customResponseHeaders", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "edgeSecurityPolicy" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "edgeSecurityPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enableCDN" }),
        __metadata("design:type", Boolean)
    ], BackendService.prototype, "enableCDN", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "failoverPolicy" }),
        (0, class_transformer_1.Type)(function () { return backendservicefailoverpolicy_1.BackendServiceFailoverPolicy; }),
        __metadata("design:type", backendservicefailoverpolicy_1.BackendServiceFailoverPolicy)
    ], BackendService.prototype, "failoverPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "healthChecks" }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "healthChecks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "iap" }),
        (0, class_transformer_1.Type)(function () { return backendserviceiap_1.BackendServiceIAP; }),
        __metadata("design:type", backendserviceiap_1.BackendServiceIAP)
    ], BackendService.prototype, "iap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "loadBalancingScheme" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "loadBalancingScheme", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: backendservicelocalityloadbalancingpolicyconfig_1.BackendServiceLocalityLoadBalancingPolicyConfig,
        }),
        (0, class_transformer_1.Expose)({ name: "localityLbPolicies" }),
        (0, class_transformer_1.Type)(function () { return backendservicelocalityloadbalancingpolicyconfig_1.BackendServiceLocalityLoadBalancingPolicyConfig; }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "localityLbPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "localityLbPolicy" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "localityLbPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "logConfig" }),
        (0, class_transformer_1.Type)(function () { return backendservicelogconfig_1.BackendServiceLogConfig; }),
        __metadata("design:type", backendservicelogconfig_1.BackendServiceLogConfig)
    ], BackendService.prototype, "logConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxStreamDuration" }),
        (0, class_transformer_1.Type)(function () { return duration_1.Duration; }),
        __metadata("design:type", duration_1.Duration)
    ], BackendService.prototype, "maxStreamDuration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "outlierDetection" }),
        (0, class_transformer_1.Type)(function () { return outlierdetection_1.OutlierDetection; }),
        __metadata("design:type", outlierdetection_1.OutlierDetection)
    ], BackendService.prototype, "outlierDetection", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], BackendService.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portName" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "portName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "protocol" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "protocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securityPolicy" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "securityPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "securitySettings" }),
        (0, class_transformer_1.Type)(function () { return securitysettings_1.SecuritySettings; }),
        __metadata("design:type", securitysettings_1.SecuritySettings)
    ], BackendService.prototype, "securitySettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceBindings" }),
        __metadata("design:type", Array)
    ], BackendService.prototype, "serviceBindings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sessionAffinity" }),
        __metadata("design:type", String)
    ], BackendService.prototype, "sessionAffinity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subsetting" }),
        (0, class_transformer_1.Type)(function () { return subsetting_1.Subsetting; }),
        __metadata("design:type", subsetting_1.Subsetting)
    ], BackendService.prototype, "subsetting", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeoutSec" }),
        __metadata("design:type", Number)
    ], BackendService.prototype, "timeoutSec", void 0);
    return BackendService;
}(utils_1.SpeakeasyBase));
exports.BackendService = BackendService;
