// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KmsGrantOperationEnum string

const (
	KmsGrantOperationEnumCreateGrant                         KmsGrantOperationEnum = "CreateGrant"
	KmsGrantOperationEnumDecrypt                             KmsGrantOperationEnum = "Decrypt"
	KmsGrantOperationEnumDescribeKey                         KmsGrantOperationEnum = "DescribeKey"
	KmsGrantOperationEnumEncrypt                             KmsGrantOperationEnum = "Encrypt"
	KmsGrantOperationEnumGenerateDataKey                     KmsGrantOperationEnum = "GenerateDataKey"
	KmsGrantOperationEnumGenerateDataKeyPair                 KmsGrantOperationEnum = "GenerateDataKeyPair"
	KmsGrantOperationEnumGenerateDataKeyPairWithoutPlaintext KmsGrantOperationEnum = "GenerateDataKeyPairWithoutPlaintext"
	KmsGrantOperationEnumGenerateDataKeyWithoutPlaintext     KmsGrantOperationEnum = "GenerateDataKeyWithoutPlaintext"
	KmsGrantOperationEnumGetPublicKey                        KmsGrantOperationEnum = "GetPublicKey"
	KmsGrantOperationEnumReEncryptFrom                       KmsGrantOperationEnum = "ReEncryptFrom"
	KmsGrantOperationEnumReEncryptTo                         KmsGrantOperationEnum = "ReEncryptTo"
	KmsGrantOperationEnumRetireGrant                         KmsGrantOperationEnum = "RetireGrant"
	KmsGrantOperationEnumSign                                KmsGrantOperationEnum = "Sign"
	KmsGrantOperationEnumVerify                              KmsGrantOperationEnum = "Verify"
)

func (e KmsGrantOperationEnum) ToPointer() *KmsGrantOperationEnum {
	return &e
}

func (e *KmsGrantOperationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateGrant":
		fallthrough
	case "Decrypt":
		fallthrough
	case "DescribeKey":
		fallthrough
	case "Encrypt":
		fallthrough
	case "GenerateDataKey":
		fallthrough
	case "GenerateDataKeyPair":
		fallthrough
	case "GenerateDataKeyPairWithoutPlaintext":
		fallthrough
	case "GenerateDataKeyWithoutPlaintext":
		fallthrough
	case "GetPublicKey":
		fallthrough
	case "ReEncryptFrom":
		fallthrough
	case "ReEncryptTo":
		fallthrough
	case "RetireGrant":
		fallthrough
	case "Sign":
		fallthrough
	case "Verify":
		*e = KmsGrantOperationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KmsGrantOperationEnum: %v", v)
	}
}
