"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import messaging_v1_brand_registrations as shared_messaging_v1_brand_registrations
from typing import Optional

CREATE_BRAND_REGISTRATIONS_SERVERS = [
	"https://messaging.twilio.com",
]


@dataclasses.dataclass
class CreateBrandRegistrationsSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateBrandRegistrationsCreateBrandRegistrationsRequest:
    
    a2_p_profile_bundle_sid: str = dataclasses.field(metadata={'form': { 'field_name': 'A2PProfileBundleSid' }})
    r"""A2P Messaging Profile Bundle Sid."""  
    customer_profile_bundle_sid: str = dataclasses.field(metadata={'form': { 'field_name': 'CustomerProfileBundleSid' }})
    r"""Customer Profile Bundle Sid."""  
    brand_type: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'BrandType' }})
    r"""Type of brand being created. One of: \\"STANDARD\\", \\"STARTER\\". STARTER is for low volume, starter use cases. STANDARD is for all other use cases."""  
    mock: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Mock' }})
    r"""A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided."""  
    skip_automatic_sec_vet: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SkipAutomaticSecVet' }})
    r"""A flag to disable automatic secondary vetting for brands which it would otherwise be done."""  
    

@dataclasses.dataclass
class CreateBrandRegistrationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    messaging_v1_brand_registrations: Optional[shared_messaging_v1_brand_registrations.MessagingV1BrandRegistrations] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    