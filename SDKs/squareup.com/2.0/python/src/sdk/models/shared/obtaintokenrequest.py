"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ObtainTokenRequest:
    r"""An object containing the fields to POST for the request.
    
    See the corresponding object definition for field details.
    """
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id') }})
    r"""The Square-issued ID of your application, available from the
    [developer dashboard](https://developer.squareup.com/apps).
    """  
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret') }})
    r"""The Square-issued application secret for your application, available
    from the [developer dashboard](https://developer.squareup.com/apps).
    """  
    grant_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_type') }})
    r"""Specifies the method to request an OAuth access token.
    Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
    """  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The authorization code to exchange.
    This is required if `grant_type` is set to `authorization_code`, to indicate that
    the application wants to exchange an authorization code for an OAuth access token.
    """  
    migration_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migration_token'), 'exclude': lambda f: f is None }})
    r"""Legacy OAuth access token obtained using a Connect API version prior
    to 2019-03-13. This parameter is required if `grant_type` is set to
    `migration_token` to indicate that the application wants to get a replacement
    OAuth access token. The response also returns a refresh token.
    For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
    """  
    redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_uri'), 'exclude': lambda f: f is None }})
    r"""The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps)."""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }})
    r"""A valid refresh token for generating a new OAuth access token.
    A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
    """  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""A JSON list of strings representing the permissions the application is requesting.
    For example: \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\"
    The access token returned in the response is granted the permissions
    that comprise the intersection between the requested list of permissions, and those
    that belong to the provided refresh token.
    """  
    short_lived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short_lived'), 'exclude': lambda f: f is None }})
    r"""A boolean indicating a request for a short-lived access token.
    The short-lived access token returned in the response will expire in 24 hours.
    """  
    