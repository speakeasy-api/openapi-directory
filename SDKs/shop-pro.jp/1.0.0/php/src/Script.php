<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Script 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * スクリプトタグの作成
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagResponse
     */
	public function createShopScriptTag(
        \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appstore/v1/script_tags.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createShopScriptTag200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateShopScriptTag200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * スクリプトタグの削除
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagResponse
     */
	public function deleteScriptTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appstore/v1/script_tags/{scriptTagId}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScriptTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * スクリプトタグの取得
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagResponse
     */
	public function getShopScriptTag(
        \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appstore/v1/script_tags/{scriptTagId}.json', \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShopScriptTag200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetShopScriptTag200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * スクリプトタグの取得
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagsResponse
     */
	public function getShopScriptTags(
        \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appstore/v1/script_tags.json');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetShopScriptTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getShopScriptTags200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetShopScriptTags200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * スクリプトタグの更新
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagResponse
     */
	public function updateShopScriptTag(
        \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/appstore/v1/script_tags/{scriptTagId}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateShopScriptTag200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateShopScriptTag200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}