"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Disputes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def accept_dispute(self, request: operations.AcceptDisputeRequest, security: operations.AcceptDisputeSecurity) -> operations.AcceptDisputeResponse:
        r"""AcceptDispute
        Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
        updates the dispute state to ACCEPTED.
        
        Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
        does not have sufficient funds, Square debits the associated bank account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AcceptDisputeRequest, base_url, '/v2/disputes/{dispute_id}/accept', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AcceptDisputeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AcceptDisputeResponse])
                res.accept_dispute_response = out

        return res

    def create_dispute_evidence_text(self, request: operations.CreateDisputeEvidenceTextRequest, security: operations.CreateDisputeEvidenceTextSecurity) -> operations.CreateDisputeEvidenceTextResponse:
        r"""CreateDisputeEvidenceText
        Uploads text to use as evidence for a dispute challenge.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateDisputeEvidenceTextRequest, base_url, '/v2/disputes/{dispute_id}/evidence-text', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_dispute_evidence_text_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDisputeEvidenceTextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateDisputeEvidenceTextResponse])
                res.create_dispute_evidence_text_response = out

        return res

    def delete_dispute_evidence(self, request: operations.DeleteDisputeEvidenceRequest, security: operations.DeleteDisputeEvidenceSecurity) -> operations.DeleteDisputeEvidenceResponse:
        r"""DeleteDisputeEvidence
        Removes specified evidence from a dispute.
        
        Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after
        submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDisputeEvidenceRequest, base_url, '/v2/disputes/{dispute_id}/evidence/{evidence_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDisputeEvidenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteDisputeEvidenceResponse])
                res.delete_dispute_evidence_response = out

        return res

    def list_dispute_evidence(self, request: operations.ListDisputeEvidenceRequest, security: operations.ListDisputeEvidenceSecurity) -> operations.ListDisputeEvidenceResponse:
        r"""ListDisputeEvidence
        Returns a list of evidence associated with a dispute.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListDisputeEvidenceRequest, base_url, '/v2/disputes/{dispute_id}/evidence', request)
        
        query_params = utils.get_query_params(operations.ListDisputeEvidenceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDisputeEvidenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDisputeEvidenceResponse])
                res.list_dispute_evidence_response = out

        return res

    def list_disputes(self, request: operations.ListDisputesRequest, security: operations.ListDisputesSecurity) -> operations.ListDisputesResponse:
        r"""ListDisputes
        Returns a list of disputes associated with a particular account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/disputes'
        
        query_params = utils.get_query_params(operations.ListDisputesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDisputesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDisputesResponse])
                res.list_disputes_response = out

        return res

    def retrieve_dispute(self, request: operations.RetrieveDisputeRequest, security: operations.RetrieveDisputeSecurity) -> operations.RetrieveDisputeResponse:
        r"""RetrieveDispute
        Returns details about a specific dispute.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveDisputeRequest, base_url, '/v2/disputes/{dispute_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveDisputeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveDisputeResponse])
                res.retrieve_dispute_response = out

        return res

    def retrieve_dispute_evidence(self, request: operations.RetrieveDisputeEvidenceRequest, security: operations.RetrieveDisputeEvidenceSecurity) -> operations.RetrieveDisputeEvidenceResponse:
        r"""RetrieveDisputeEvidence
        Returns the evidence metadata specified by the evidence ID in the request URL path
        
        You must maintain a copy of the evidence you upload if you want to reference it later. You cannot
        download the evidence after you upload it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveDisputeEvidenceRequest, base_url, '/v2/disputes/{dispute_id}/evidence/{evidence_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveDisputeEvidenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveDisputeEvidenceResponse])
                res.retrieve_dispute_evidence_response = out

        return res

    def submit_evidence(self, request: operations.SubmitEvidenceRequest, security: operations.SubmitEvidenceSecurity) -> operations.SubmitEvidenceResponse:
        r"""SubmitEvidence
        Submits evidence to the cardholder's bank.
        
        Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded
        using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and
        [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and
        evidence automatically provided by Square, when available.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitEvidenceRequest, base_url, '/v2/disputes/{dispute_id}/submit-evidence', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitEvidenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubmitEvidenceResponse])
                res.submit_evidence_response = out

        return res

    