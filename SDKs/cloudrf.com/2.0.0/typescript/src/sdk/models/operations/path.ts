/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PathSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=key",
  })
  apiKeyAuth: string;
}

/**
 * A basic request needs transmitter, receiver, antenna and output objects defined as a minimum. Model and environment options will enhance accuracy.
 */
export class PathRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "antenna" })
  @Type(() => shared.Antenna)
  antenna?: shared.Antenna;

  @SpeakeasyMetadata()
  @Expose({ name: "environment" })
  @Type(() => shared.Environment)
  environment?: shared.Environment;

  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  @Type(() => shared.Model)
  model?: shared.Model;

  /**
   * Network name/group
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "output" })
  @Type(() => shared.Output)
  output?: shared.Output;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver" })
  @Type(() => shared.Receiver)
  receiver?: shared.Receiver;

  /**
   * Site name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "site" })
  site?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "transmitter" })
  @Type(() => shared.Transmitter)
  transmitter?: shared.Transmitter;
}

export class PathResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
