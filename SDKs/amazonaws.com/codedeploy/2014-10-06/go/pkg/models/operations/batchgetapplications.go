// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetApplicationsXAmzTargetEnum
type BatchGetApplicationsXAmzTargetEnum string

const (
	BatchGetApplicationsXAmzTargetEnumCodeDeploy20141006BatchGetApplications BatchGetApplicationsXAmzTargetEnum = "CodeDeploy_20141006.BatchGetApplications"
)

func (e *BatchGetApplicationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.BatchGetApplications":
		*e = BatchGetApplicationsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetApplicationsXAmzTargetEnum: %s", s)
	}
}

type BatchGetApplicationsHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetApplicationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetApplicationsRequest struct {
	Headers BatchGetApplicationsHeaders
	Request shared.BatchGetApplicationsInput `request:"mediaType=application/json"`
}

type BatchGetApplicationsResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	// Success
	BatchGetApplicationsOutput *shared.BatchGetApplicationsOutput
	// BatchLimitExceededException
	BatchLimitExceededException interface{}
	ContentType                 string
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
