// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetKeyPolicyXAmzTargetEnum
type GetKeyPolicyXAmzTargetEnum string

const (
	GetKeyPolicyXAmzTargetEnumTrentServiceGetKeyPolicy GetKeyPolicyXAmzTargetEnum = "TrentService.GetKeyPolicy"
)

func (e *GetKeyPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TrentService.GetKeyPolicy":
		*e = GetKeyPolicyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetKeyPolicyXAmzTargetEnum: %s", s)
	}
}

type GetKeyPolicyRequest struct {
	GetKeyPolicyRequest shared.GetKeyPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetKeyPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetKeyPolicyResponse struct {
	ContentType string
	// DependencyTimeoutException
	DependencyTimeoutException interface{}
	// Success
	GetKeyPolicyResponse *shared.GetKeyPolicyResponse
	// InvalidArnException
	InvalidArnException interface{}
	// KMSInternalException
	KMSInternalException interface{}
	// KMSInvalidStateException
	KMSInvalidStateException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
}
