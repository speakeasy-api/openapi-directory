// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// MergeShardsXAmzTargetEnum
type MergeShardsXAmzTargetEnum string

const (
	MergeShardsXAmzTargetEnumKinesis20131202MergeShards MergeShardsXAmzTargetEnum = "Kinesis_20131202.MergeShards"
)

func (e MergeShardsXAmzTargetEnum) ToPointer() *MergeShardsXAmzTargetEnum {
	return &e
}

func (e *MergeShardsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kinesis_20131202.MergeShards":
		*e = MergeShardsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MergeShardsXAmzTargetEnum: %v", v)
	}
}

type MergeShardsRequest struct {
	MergeShardsInput  shared.MergeShardsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        MergeShardsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type MergeShardsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
