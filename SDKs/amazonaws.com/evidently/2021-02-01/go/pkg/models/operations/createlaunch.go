// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateLaunchPathParams struct {
	// The name or ARN of the project that you want to create the launch in.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

type CreateLaunchHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateLaunchRequestBodyScheduledSplitsConfig - An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
type CreateLaunchRequestBodyScheduledSplitsConfig struct {
	Steps []shared.ScheduledSplitConfig `json:"steps,omitempty"`
}

type CreateLaunchRequestBody struct {
	// An optional description for the launch.
	Description *string `json:"description,omitempty"`
	// An array of structures that contains the feature and variations that are to be used for the launch.
	Groups []shared.LaunchGroupConfig `json:"groups"`
	// An array of structures that define the metrics that will be used to monitor the launch performance.
	MetricMonitors []shared.MetricMonitorConfig `json:"metricMonitors,omitempty"`
	// The name for the new launch.
	Name string `json:"name"`
	// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.
	RandomizationSalt *string `json:"randomizationSalt,omitempty"`
	// An array of structures that define the traffic allocation percentages among the feature variations during each step of a launch. This also defines the start time of each step.
	ScheduledSplitsConfig *CreateLaunchRequestBodyScheduledSplitsConfig `json:"scheduledSplitsConfig,omitempty"`
	// <p>Assigns one or more tags (key-value pairs) to the launch.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateLaunchRequest struct {
	PathParams CreateLaunchPathParams
	Headers    CreateLaunchHeaders
	Request    CreateLaunchRequestBody `request:"mediaType=application/json"`
}

type CreateLaunchResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateLaunchResponse *shared.CreateLaunchResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ValidationException
	ValidationException interface{}
}
