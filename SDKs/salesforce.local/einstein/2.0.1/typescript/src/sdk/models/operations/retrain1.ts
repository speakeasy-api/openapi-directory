/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class Retrain1Security extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerToken: string;
}

export class Retrain1RequestBody extends SpeakeasyBase {
  /**
   * Specifies the algorithm used to train the dataset. Optional. Use this parameter only when training a dataset with a type of image-detection. Valid values are object-detection-v1 and retail-execution.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=algorithm" })
  algorithm?: string;

  /**
   * Number of training iterations for the neural network. Optional.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=epochs" })
  epochs?: number;

  /**
   * Specifies how much the gradient affects the optimization of the model at each time step. Optional.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=learningRate" })
  learningRate?: number;

  /**
   * ID of the model to be updated from the training.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=modelId" })
  modelId?: string;

  /**
   * JSON that contains parameters that specify how the model is created
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=trainParams;json=true" })
  trainParams?: shared.V2VisionTrainParams;
}

export class Retrain1Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Training Status
   */
  @SpeakeasyMetadata()
  trainResponse?: shared.TrainResponse;
}
