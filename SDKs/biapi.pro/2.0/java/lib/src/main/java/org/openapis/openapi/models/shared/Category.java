/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Category - Successful POST on Category resource
 */
public class Category {
    /**
     * Color of the category
     */
    @JsonProperty("color")
    public String color;
    public Category withColor(String color) {
        this.color = color;
        return this;
    }
    
    /**
     * ID of the category
     */
    @JsonProperty("id")
    public Long id;
    public Category withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the logo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_logo")
    public Long idLogo;
    public Category withIdLogo(Long idLogo) {
        this.idLogo = idLogo;
        return this;
    }
    
    /**
     * ID of the parent category. If this is a parent category, it will be equal to its own ID
     */
    @JsonProperty("id_parent_category")
    public Long idParentCategory;
    public Category withIdParentCategory(Long idParentCategory) {
        this.idParentCategory = idParentCategory;
        return this;
    }
    
    /**
     * ID of the parent category to be displayed
     */
    @JsonProperty("id_parent_category_in_menu")
    public Long idParentCategoryInMenu;
    public Category withIdParentCategoryInMenu(Long idParentCategoryInMenu) {
        this.idParentCategoryInMenu = idParentCategoryInMenu;
        return this;
    }
    
    /**
     * If not null, this category is specific to a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id_user")
    public Long idUser;
    public Category withIdUser(Long idUser) {
        this.idUser = idUser;
        return this;
    }
    
    /**
     * Is an income category. If null, this is both an income and an expense category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("income")
    public Boolean income;
    public Category withIncome(Boolean income) {
        this.income = income;
        return this;
    }
    
    /**
     * Name of the category
     */
    @JsonProperty("name")
    public String name;
    public Category withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Displayed name, with HTML tags
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_displayed")
    public String nameDisplayed;
    public Category withNameDisplayed(String nameDisplayed) {
        this.nameDisplayed = nameDisplayed;
        return this;
    }
    
    /**
     * This category accepts opposite sign of transactions
     */
    @JsonProperty("refundable")
    public Boolean refundable;
    public Category withRefundable(Boolean refundable) {
        this.refundable = refundable;
        return this;
    }
    
}
