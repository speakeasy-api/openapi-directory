"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Me:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_api_credential(self, request: shared.APICredentialInput, security: operations.CreateAPICredentialSecurity) -> operations.CreateAPICredentialResponse:
        r"""Create api credentials
        Creates an API credentials for the CallFire API. This endpoint requires full CallFire account credentials to be used, authenticated using Basic Authentication. At the moment user provides only the name for the credentials. The generated credentials can be used to access any CallFire APIs. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/api/credentials'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAPICredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICredential])
                res.api_credential = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def delete_api_credential(self, request: operations.DeleteAPICredentialRequest, security: operations.DeleteAPICredentialSecurity) -> operations.DeleteAPICredentialResponse:
        r"""Delete api credentials
        Deletes a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAPICredentialRequest, base_url, '/me/api/credentials/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAPICredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def disable_api_credentials(self, request: operations.DisableAPICredentialsRequest, security: operations.DisableAPICredentialsSecurity) -> operations.DisableAPICredentialsResponse:
        r"""Disable specified API credentials
        Disables a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableAPICredentialsRequest, base_url, '/me/api/credentials/{id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableAPICredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def enable_api_credentials(self, request: operations.EnableAPICredentialsRequest, security: operations.EnableAPICredentialsSecurity) -> operations.EnableAPICredentialsResponse:
        r"""Enable specified API credentials
        Enables a specified API credential. Currently, adds the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableAPICredentialsRequest, base_url, '/me/api/credentials/{id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableAPICredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_api_credentials(self, request: operations.FindAPICredentialsRequest, security: operations.FindAPICredentialsSecurity) -> operations.FindAPICredentialsResponse:
        r"""Find api credentials
        Searches for all credentials generated by user. Returns a paged list of the API credentials. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/api/credentials'
        
        query_params = utils.get_query_params(operations.FindAPICredentialsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAPICredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICredentialPage])
                res.api_credential_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_account(self, request: operations.GetAccountRequest, security: operations.GetAccountSecurity) -> operations.GetAccountResponse:
        r"""Find account details
        Searches for the user account details. Details include name, email, and basic account permissions. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/account'
        
        query_params = utils.get_query_params(operations.GetAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_api_credential(self, request: operations.GetAPICredentialRequest, security: operations.GetAPICredentialSecurity) -> operations.GetAPICredentialResponse:
        r"""Find a specific api credential
        Returns an API credential instance for a given api credential id. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPICredentialRequest, base_url, '/me/api/credentials/{id}', request)
        
        query_params = utils.get_query_params(operations.GetAPICredentialRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPICredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICredential])
                res.api_credential = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_billing_plan_usage(self) -> operations.GetBillingPlanUsageResponse:
        r"""Find plan usage
        Searches for the data of a billing plan usage for the user. Returns the data of a billing plan usage for the current month. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/billing/plan-usage'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBillingPlanUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingPlanUsage])
                res.billing_plan_usage = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_caller_ids(self) -> operations.GetCallerIdsResponse:
        r"""Find caller ids
        Returns a list of verified caller ids. If the number is not shown in the list, then it is not verified. In this case sending of a verification code is required. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/callerids'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCallerIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CallerIDList])
                res.caller_id_list = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_credit_usage(self, request: operations.GetCreditUsageRequest, security: operations.GetCreditUsageSecurity) -> operations.GetCreditUsageResponse:
        r"""Find credit usage
        Find credit usage for the user. Returns credits usage for time period specified or if unspecified then total for all time. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/billing/credit-usage'
        
        query_params = utils.get_query_params(operations.GetCreditUsageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCreditUsageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreditUsage])
                res.credit_usage = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def send_verification_code_to_caller_id(self, request: operations.SendVerificationCodeToCallerIDRequest, security: operations.SendVerificationCodeToCallerIDSecurity) -> operations.SendVerificationCodeToCallerIDResponse:
        r"""Create a caller id
        Generates and sends a verification code to the phone number provided in the path. The verification code is delivered via a phone call. This code needs to be submitted to the verify caller id API endpoint to complete verification. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SendVerificationCodeToCallerIDRequest, base_url, '/me/callerids/{callerid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SendVerificationCodeToCallerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def verify_caller_id(self, request: operations.VerifyCallerIDRequest, security: operations.VerifyCallerIDSecurity) -> operations.VerifyCallerIDResponse:
        r"""Verify a caller id
        With the verification code received from the Create caller id endpoint, a call to this endpoint is required to finish verification. For authentication use api credentials.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VerifyCallerIDRequest, base_url, '/me/callerids/{callerid}/verification-code', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "caller_id_verification_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VerifyCallerIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.verify_caller_id_200_application_json_boolean = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    