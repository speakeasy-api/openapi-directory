// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDisassociateClientVpnTargetNetworkActionEnum
type GETDisassociateClientVpnTargetNetworkActionEnum string

const (
	GETDisassociateClientVpnTargetNetworkActionEnumDisassociateClientVpnTargetNetwork GETDisassociateClientVpnTargetNetworkActionEnum = "DisassociateClientVpnTargetNetwork"
)

func (e GETDisassociateClientVpnTargetNetworkActionEnum) ToPointer() *GETDisassociateClientVpnTargetNetworkActionEnum {
	return &e
}

func (e *GETDisassociateClientVpnTargetNetworkActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DisassociateClientVpnTargetNetwork":
		*e = GETDisassociateClientVpnTargetNetworkActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateClientVpnTargetNetworkActionEnum: %v", v)
	}
}

// GETDisassociateClientVpnTargetNetworkVersionEnum
type GETDisassociateClientVpnTargetNetworkVersionEnum string

const (
	GETDisassociateClientVpnTargetNetworkVersionEnumTwoThousandAndSixteen1115 GETDisassociateClientVpnTargetNetworkVersionEnum = "2016-11-15"
)

func (e GETDisassociateClientVpnTargetNetworkVersionEnum) ToPointer() *GETDisassociateClientVpnTargetNetworkVersionEnum {
	return &e
}

func (e *GETDisassociateClientVpnTargetNetworkVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDisassociateClientVpnTargetNetworkVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDisassociateClientVpnTargetNetworkVersionEnum: %v", v)
	}
}

type GETDisassociateClientVpnTargetNetworkRequest struct {
	Action GETDisassociateClientVpnTargetNetworkActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the target network association.
	AssociationID string `queryParam:"style=form,explode=true,name=AssociationId"`
	// The ID of the Client VPN endpoint from which to disassociate the target network.
	ClientVpnEndpointID string `queryParam:"style=form,explode=true,name=ClientVpnEndpointId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                                            `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETDisassociateClientVpnTargetNetworkVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDisassociateClientVpnTargetNetworkResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
