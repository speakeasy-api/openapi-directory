"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum(str, Enum):
    r"""The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')"""
    NON_UNIQUE = 'Non-unique'
    UNIQUE = 'Unique'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkBluetoothSettingsRequestBody:
    
    advertising_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertisingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether APs will advertise beacons."""  
    major: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('major'), 'exclude': lambda f: f is None }})
    r"""The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode."""  
    major_minor_assignment_mode: Optional[UpdateNetworkBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('majorMinorAssignmentMode'), 'exclude': lambda f: f is None }})
    r"""The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')"""  
    minor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minor'), 'exclude': lambda f: f is None }})
    r"""The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode."""  
    scanning_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanningEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether APs will scan for Bluetooth enabled clients."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID to be used in the beacon identifier."""  
    

@dataclasses.dataclass
class UpdateNetworkBluetoothSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkBluetoothSettingsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkBluetoothSettings200ApplicationJSON:
    r"""Successful operation"""
    
    advertising_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertisingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether APs will advertise beacons."""  
    major: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('major'), 'exclude': lambda f: f is None }})
    r"""The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode."""  
    major_minor_assignment_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('majorMinorAssignmentMode'), 'exclude': lambda f: f is None }})
    r"""The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')"""  
    minor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minor'), 'exclude': lambda f: f is None }})
    r"""The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode."""  
    scanning_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanningEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether APs will scan for Bluetooth enabled clients."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""The UUID to be used in the beacon identifier."""  
    

@dataclasses.dataclass
class UpdateNetworkBluetoothSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_bluetooth_settings_200_application_json_object: Optional[UpdateNetworkBluetoothSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    