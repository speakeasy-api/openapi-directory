// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type SymbolsGetStatusSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type SymbolsGetStatusRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the symbol (uuid of the symbol)
	SymbolID string `pathParam:"style=simple,explode=false,name=symbol_id"`
}

// SymbolsGetStatus500ApplicationJSON - Internal error
type SymbolsGetStatus500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGetStatus404ApplicationJSON - Not found
type SymbolsGetStatus404ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGetStatus403ApplicationJSON - Unauthorized
type SymbolsGetStatus403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolsGetStatus200ApplicationJSONStatusEnum - Whether the symbol is ignored.
type SymbolsGetStatus200ApplicationJSONStatusEnum string

const (
	SymbolsGetStatus200ApplicationJSONStatusEnumAvailable SymbolsGetStatus200ApplicationJSONStatusEnum = "available"
	SymbolsGetStatus200ApplicationJSONStatusEnumIgnored   SymbolsGetStatus200ApplicationJSONStatusEnum = "ignored"
	SymbolsGetStatus200ApplicationJSONStatusEnumMissing   SymbolsGetStatus200ApplicationJSONStatusEnum = "missing"
)

func (e *SymbolsGetStatus200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "ignored":
		fallthrough
	case "missing":
		*e = SymbolsGetStatus200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolsGetStatus200ApplicationJSONStatusEnum: %s", s)
	}
}

// SymbolsGetStatus200ApplicationJSON - A response containing information pertaining to a symbol status
type SymbolsGetStatus200ApplicationJSON struct {
	// The application that this symbol belongs to
	AppID string `json:"app_id"`
	// Whether the symbol is ignored.
	Status SymbolsGetStatus200ApplicationJSONStatusEnum `json:"status"`
	// The unique id for this symbol (uuid)
	SymbolID string `json:"symbol_id"`
}

type SymbolsGetStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolsGetStatus200ApplicationJSONObject *SymbolsGetStatus200ApplicationJSON
	// Unauthorized
	SymbolsGetStatus403ApplicationJSONObject *SymbolsGetStatus403ApplicationJSON
	// Not found
	SymbolsGetStatus404ApplicationJSONObject *SymbolsGetStatus404ApplicationJSON
	// Internal error
	SymbolsGetStatus500ApplicationJSONObject *SymbolsGetStatus500ApplicationJSON
}
