// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SessionEntity - Create user session (log in)
type SessionEntity struct {
	// Sent only if 2FA setup is needed. Is SMS two factor authentication allowed?
	Allowed2faMethodSms *bool `json:"allowed_2fa_method_sms,omitempty"`
	// Sent only if 2FA setup is needed. Is TOTP two factor authentication allowed?
	Allowed2faMethodTotp *bool `json:"allowed_2fa_method_totp,omitempty"`
	// Sent only if 2FA setup is needed. Is U2F two factor authentication allowed?
	Allowed2faMethodU2f *bool `json:"allowed_2fa_method_u2f,omitempty"`
	// Sent only if 2FA setup is needed. Is Yubikey two factor authentication allowed?
	Allowed2faMethodYubi *bool `json:"allowed_2fa_method_yubi,omitempty"`
	// Session ID
	ID *string `json:"id,omitempty"`
	// Session language
	Language *string `json:"language,omitempty"`
	// Login token. If set, this token will allow your user to log in via browser at the domain in `login_token_domain`.
	LoginToken *string `json:"login_token,omitempty"`
	// Domain to use with `login_token`.
	LoginTokenDomain *string `json:"login_token_domain,omitempty"`
	// Maximum number of files to retrieve per folder for a directory listing.  This is based on the user's plan.
	MaxDirListingSize *int `json:"max_dir_listing_size,omitempty"`
	// Can access multiple regions?
	MultipleRegions *bool `json:"multiple_regions,omitempty"`
	// Is this session read only?
	ReadOnly *bool `json:"read_only,omitempty"`
	// Initial root path to start the user's session in.
	RootPath *string `json:"root_path,omitempty"`
	// Site ID
	SiteID *int `json:"site_id,omitempty"`
	// Is SSL required for this user?  (If so, ensure all your communications with this user use SSL.)
	SslRequired *bool `json:"ssl_required,omitempty"`
	// Is strong TLS disabled for this user? (If this is set to true, the site administrator has signaled that it is ok to use less secure TLS versions for this user.)
	TLSDisabled *bool `json:"tls_disabled,omitempty"`
	// If true, this user needs to add a Two Factor Authentication method before performing any further actions.
	TwoFactorSetupNeeded *bool `json:"two_factor_setup_needed,omitempty"`
	// Allow the user to provide file/folder modified at dates?  If false, the server will always use the current date/time.
	UseProvidedModifiedAt *bool `json:"use_provided_modified_at,omitempty"`
	// Does this user want to use Windows line-ending emulation?  (CR vs CRLF)
	WindowsModeFtp *bool `json:"windows_mode_ftp,omitempty"`
}
