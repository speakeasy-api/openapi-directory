"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAccountBillingInvoiceRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""The account ID."""  
    invoice_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'invoiceId', 'style': 'simple', 'explode': False }})
    r"""The invoice ID."""  
    

@dataclasses.dataclass
class GetAccountBillingInvoice200ApplicationXMLInvoiceItems:
    
    charge_name: Optional[str] = dataclasses.field(default=None)
    r"""Description for the charge."""  
    charge_number: Optional[str] = dataclasses.field(default=None)
    r"""Identifier for the charge."""  
    charge_type: Optional[str] = dataclasses.field(default=None)
    r"""Charge type."""  
    end_date: Optional[date] = dataclasses.field(default=None)
    r"""Billing end date."""  
    quantity: Optional[int] = dataclasses.field(default=None)
    r"""Quantity."""  
    start_date: Optional[date] = dataclasses.field(default=None)
    r"""Billing start date."""  
    tax_amount: Optional[float] = dataclasses.field(default=None)
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None)
    r"""Total amount."""  
    

@dataclasses.dataclass
class GetAccountBillingInvoice200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """
    
    balance: Optional[float] = dataclasses.field(default=None)
    r"""The remaining balance of the invoice after all payments, adjustments, and refunds are applied."""  
    currency: Optional[str] = dataclasses.field(default=None)
    r"""Billing currency."""  
    due_date: Optional[str] = dataclasses.field(default=None)
    r"""The date by which the payment for this invoice is due."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the invoice."""  
    invoice_date: Optional[str] = dataclasses.field(default=None)
    r"""The date when the invoice was generated."""  
    invoice_items: Optional[list[GetAccountBillingInvoice200ApplicationXMLInvoiceItems]] = dataclasses.field(default=None)  
    invoice_number: Optional[str] = dataclasses.field(default=None)
    r"""Invoice number."""  
    status: Optional[str] = dataclasses.field(default=None)
    r"""Status of the invoice."""  
    target_date: Optional[str] = dataclasses.field(default=None)
    r"""This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice."""  
    tax_amount: Optional[float] = dataclasses.field(default=None)
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None)
    r"""Total invoice amount."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountBillingInvoice200ApplicationJSONInvoiceItems:
    
    charge_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge_name'), 'exclude': lambda f: f is None }})
    r"""Description for the charge."""  
    charge_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge_number'), 'exclude': lambda f: f is None }})
    r"""Identifier for the charge."""  
    charge_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charge_type'), 'exclude': lambda f: f is None }})
    r"""Charge type."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Billing end date."""  
    quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Billing start date."""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount'), 'exclude': lambda f: f is None }})
    r"""Total amount."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountBillingInvoice200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """
    
    balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""The remaining balance of the invoice after all payments, adjustments, and refunds are applied."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Billing currency."""  
    due_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('due_date'), 'exclude': lambda f: f is None }})
    r"""The date by which the payment for this invoice is due."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the invoice."""  
    invoice_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_date'), 'exclude': lambda f: f is None }})
    r"""The date when the invoice was generated."""  
    invoice_items: Optional[list[GetAccountBillingInvoice200ApplicationJSONInvoiceItems]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_items'), 'exclude': lambda f: f is None }})  
    invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_number'), 'exclude': lambda f: f is None }})
    r"""Invoice number."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the invoice."""  
    target_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_date'), 'exclude': lambda f: f is None }})
    r"""This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in the invoice."""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount'), 'exclude': lambda f: f is None }})
    r"""Tax amount."""  
    total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount'), 'exclude': lambda f: f is None }})
    r"""Total invoice amount."""  
    

@dataclasses.dataclass
class GetAccountBillingInvoiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_account_billing_invoice_200_application_json_object: Optional[GetAccountBillingInvoice200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Account billing invoice information returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    