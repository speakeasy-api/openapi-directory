// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BatchResponseSubscriberEmailResponseStatusEnum string

const (
	BatchResponseSubscriberEmailResponseStatusEnumPending    BatchResponseSubscriberEmailResponseStatusEnum = "PENDING"
	BatchResponseSubscriberEmailResponseStatusEnumProcessing BatchResponseSubscriberEmailResponseStatusEnum = "PROCESSING"
	BatchResponseSubscriberEmailResponseStatusEnumCanceled   BatchResponseSubscriberEmailResponseStatusEnum = "CANCELED"
	BatchResponseSubscriberEmailResponseStatusEnumComplete   BatchResponseSubscriberEmailResponseStatusEnum = "COMPLETE"
)

func (e BatchResponseSubscriberEmailResponseStatusEnum) ToPointer() *BatchResponseSubscriberEmailResponseStatusEnum {
	return &e
}

func (e *BatchResponseSubscriberEmailResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETE":
		*e = BatchResponseSubscriberEmailResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseSubscriberEmailResponseStatusEnum: %v", v)
	}
}

// BatchResponseSubscriberEmailResponse - successful operation
type BatchResponseSubscriberEmailResponse struct {
	CompletedAt time.Time                                      `json:"completedAt"`
	Errors      []StandardError                                `json:"errors,omitempty"`
	Links       map[string]string                              `json:"links,omitempty"`
	NumErrors   *int                                           `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                     `json:"requestedAt,omitempty"`
	Results     []SubscriberEmailResponse                      `json:"results"`
	StartedAt   time.Time                                      `json:"startedAt"`
	Status      BatchResponseSubscriberEmailResponseStatusEnum `json:"status"`
}
