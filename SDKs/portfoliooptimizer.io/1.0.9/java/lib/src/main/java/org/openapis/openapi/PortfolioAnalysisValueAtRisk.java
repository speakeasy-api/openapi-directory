/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class PortfolioAnalysisValueAtRisk {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public PortfolioAnalysisValueAtRisk(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Cornish-Fisher Value At Risk
     * Compute the Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Laurent Favre and Jos\u00e9-Antonio Galeano, Mean-Modified Value-at-Risk Optimization with Hedge Funds, The Journal of Alternative Investments Fall 2002, 5 (2) 21-25](https://jai.pm-research.com/content/5/2/21)
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherResponse postPortfolioAnalysisValueAtRiskCornishFisher(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/cornish-fisher");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskCornishFisher200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Corrected Cornish-Fisher Value At Risk
     * Compute the corrected Cornish-Fisher value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish\u2013fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedResponse postPortfolioAnalysisValueAtRiskCornishFisherCorrected(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/cornish-fisher/corrected");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrectedResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskCornishFisherCorrected200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Gaussian Value At Risk
     * Compute the Gaussian value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Ballotta, Laura and Fusai, Gianluca, A Gentle Introduction to Value at Risk](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2942138)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussianResponse postPortfolioAnalysisValueAtRiskGaussian(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussianRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/gaussian");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussianResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussianResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskGaussian200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussian200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskGaussian200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskGaussian200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Historical Value At Risk
     * Compute the historical value at risk of one or several portfolio(s) from portfolio values.
     * 
     * References
     * * [Wikipedia, Value at risk](https://en.wikipedia.org/wiki/Value_at_risk)
     * * [Acerbi, C. and Tasche, D. (2002), Expected Shortfall: A Natural Coherent Alternative to Value at Risk. Economic Notes, 31: 379-388](https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0300.00091)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistoricalResponse postPortfolioAnalysisValueAtRiskHistorical(org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistoricalRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/portfolio/analysis/value-at-risk/historical");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistoricalResponse res = new org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistoricalResponse(contentType, httpRes.statusCode()) {{
            postPortfolioAnalysisValueAtRiskHistorical200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistorical200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostPortfolioAnalysisValueAtRiskHistorical200ApplicationJSON.class);
                res.postPortfolioAnalysisValueAtRiskHistorical200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}