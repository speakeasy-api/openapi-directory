/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Monetization {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Monetization(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesResponse androidpublisherMonetizationConvertRegionPrices(org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "convertRegionPricesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationConvertRegionPricesResponse(contentType, httpRes.statusCode()) {{
            convertRegionPricesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConvertRegionPricesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConvertRegionPricesResponse.class);
                res.convertRegionPricesResponse = out;
            }
        }

        return res;
    }

    /**
     * Archives a subscription. Can only be done if at least one base plan was active in the past, and no base plan is available for new or existing subscribers currently. This action is irreversible, and the subscription ID will remain reserved.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveResponse androidpublisherMonetizationSubscriptionsArchive(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsArchiveResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    /**
     * Activates a base plan. Once activated, base plans will be available to new subscribers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse androidpublisherMonetizationSubscriptionsBasePlansActivate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansActivateResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    /**
     * Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse androidpublisherMonetizationSubscriptionsBasePlansDeactivate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeactivateResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    /**
     * Deletes a base plan. Can only be done for draft base plans. This action is irreversible.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse androidpublisherMonetizationSubscriptionsBasePlansDelete(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansDeleteResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse androidpublisherMonetizationSubscriptionsBasePlansMigratePrices(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "migrateBasePlanPricesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansMigratePricesResponse(contentType, httpRes.statusCode()) {{
            migrateBasePlanPricesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.migrateBasePlanPricesResponse = out;
            }
        }

        return res;
    }

    /**
     * Activates a subscription offer. Once activated, subscription offers will be available to new subscribers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse androidpublisherMonetizationSubscriptionsBasePlansOffersActivate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersActivateResponse(contentType, httpRes.statusCode()) {{
            subscriptionOffer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubscriptionOffer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubscriptionOffer.class);
                res.subscriptionOffer = out;
            }
        }

        return res;
    }

    /**
     * Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse androidpublisherMonetizationSubscriptionsBasePlansOffersCreate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "subscriptionOfferInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersCreateResponse(contentType, httpRes.statusCode()) {{
            subscriptionOffer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubscriptionOffer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubscriptionOffer.class);
                res.subscriptionOffer = out;
            }
        }

        return res;
    }

    /**
     * Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateResponse(contentType, httpRes.statusCode()) {{
            subscriptionOffer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubscriptionOffer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubscriptionOffer.class);
                res.subscriptionOffer = out;
            }
        }

        return res;
    }

    /**
     * Deletes a subscription offer. Can only be done for draft offers. This action is irreversible.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse androidpublisherMonetizationSubscriptionsBasePlansOffersDelete(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersDeleteResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Reads a single offer
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse androidpublisherMonetizationSubscriptionsBasePlansOffersGet(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersGetResponse(contentType, httpRes.statusCode()) {{
            subscriptionOffer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubscriptionOffer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubscriptionOffer.class);
                res.subscriptionOffer = out;
            }
        }

        return res;
    }

    /**
     * Lists all offers under a given subscription.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse androidpublisherMonetizationSubscriptionsBasePlansOffersList(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersListResponse(contentType, httpRes.statusCode()) {{
            listSubscriptionOffersResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListSubscriptionOffersResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListSubscriptionOffersResponse.class);
                res.listSubscriptionOffersResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates an existing subscription offer.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse androidpublisherMonetizationSubscriptionsBasePlansOffersPatch(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "subscriptionOfferInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsBasePlansOffersPatchResponse(contentType, httpRes.statusCode()) {{
            subscriptionOffer = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubscriptionOffer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubscriptionOffer.class);
                res.subscriptionOffer = out;
            }
        }

        return res;
    }

    /**
     * Creates a new subscription. Newly added base plans will remain in draft state until activated.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateResponse androidpublisherMonetizationSubscriptionsCreate(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "subscriptionInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsCreateResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    /**
     * Deletes a subscription. A subscription can only be deleted if it has never had a base plan published.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteResponse androidpublisherMonetizationSubscriptionsDelete(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsDeleteResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Reads a single subscription.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetResponse androidpublisherMonetizationSubscriptionsGet(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsGetResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }

    /**
     * Lists all subscriptions under a given app.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListResponse androidpublisherMonetizationSubscriptionsList(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsListResponse(contentType, httpRes.statusCode()) {{
            listSubscriptionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListSubscriptionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListSubscriptionsResponse.class);
                res.listSubscriptionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates an existing subscription.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchResponse androidpublisherMonetizationSubscriptionsPatch(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchRequest request, org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchRequest.class, baseUrl, "/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "subscriptionInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchResponse res = new org.openapis.openapi.models.operations.AndroidpublisherMonetizationSubscriptionsPatchResponse(contentType, httpRes.statusCode()) {{
            subscription = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Subscription out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Subscription.class);
                res.subscription = out;
            }
        }

        return res;
    }
}