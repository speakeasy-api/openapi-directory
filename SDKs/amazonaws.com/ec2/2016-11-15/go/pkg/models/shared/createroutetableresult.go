// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum - The state of the association.
type CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum string

const (
	CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnumAssociating    CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum = "associating"
	CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnumAssociated     CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum = "associated"
	CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnumDisassociating CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum = "disassociating"
	CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnumDisassociated  CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum = "disassociated"
	CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnumFailed         CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum = "failed"
)

func (e *CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failed":
		*e = CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum: %s", s)
	}
}

// CreateRouteTableResultRouteTableAssociationsAssociationState - The state of the association.
type CreateRouteTableResultRouteTableAssociationsAssociationState struct {
	State         *CreateRouteTableResultRouteTableAssociationsAssociationStateStateEnum
	StatusMessage *string
}

// CreateRouteTableResultRouteTableAssociations - Describes an association between a route table and a subnet or gateway.
type CreateRouteTableResultRouteTableAssociations struct {
	AssociationState        *CreateRouteTableResultRouteTableAssociationsAssociationState
	GatewayID               *string
	Main                    *bool
	RouteTableAssociationID *string
	RouteTableID            *string
	SubnetID                *string
}

// CreateRouteTableResultRouteTablePropagatingVgws - Describes a virtual private gateway propagating route.
type CreateRouteTableResultRouteTablePropagatingVgws struct {
	GatewayID *string
}

// CreateRouteTableResultRouteTableRoutesOriginEnum - <p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul>
type CreateRouteTableResultRouteTableRoutesOriginEnum string

const (
	CreateRouteTableResultRouteTableRoutesOriginEnumCreateRouteTable          CreateRouteTableResultRouteTableRoutesOriginEnum = "CreateRouteTable"
	CreateRouteTableResultRouteTableRoutesOriginEnumCreateRoute               CreateRouteTableResultRouteTableRoutesOriginEnum = "CreateRoute"
	CreateRouteTableResultRouteTableRoutesOriginEnumEnableVgwRoutePropagation CreateRouteTableResultRouteTableRoutesOriginEnum = "EnableVgwRoutePropagation"
)

func (e *CreateRouteTableResultRouteTableRoutesOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateRouteTable":
		fallthrough
	case "CreateRoute":
		fallthrough
	case "EnableVgwRoutePropagation":
		*e = CreateRouteTableResultRouteTableRoutesOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteTableResultRouteTableRoutesOriginEnum: %s", s)
	}
}

// CreateRouteTableResultRouteTableRoutesStateEnum - The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
type CreateRouteTableResultRouteTableRoutesStateEnum string

const (
	CreateRouteTableResultRouteTableRoutesStateEnumActive    CreateRouteTableResultRouteTableRoutesStateEnum = "active"
	CreateRouteTableResultRouteTableRoutesStateEnumBlackhole CreateRouteTableResultRouteTableRoutesStateEnum = "blackhole"
)

func (e *CreateRouteTableResultRouteTableRoutesStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "blackhole":
		*e = CreateRouteTableResultRouteTableRoutesStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteTableResultRouteTableRoutesStateEnum: %s", s)
	}
}

// CreateRouteTableResultRouteTableRoutes - Describes a route in a route table.
type CreateRouteTableResultRouteTableRoutes struct {
	CarrierGatewayID            *string
	CoreNetworkArn              *string
	DestinationCidrBlock        *string
	DestinationIpv6CidrBlock    *string
	DestinationPrefixListID     *string
	EgressOnlyInternetGatewayID *string
	GatewayID                   *string
	InstanceID                  *string
	InstanceOwnerID             *string
	LocalGatewayID              *string
	NatGatewayID                *string
	NetworkInterfaceID          *string
	Origin                      *CreateRouteTableResultRouteTableRoutesOriginEnum
	State                       *CreateRouteTableResultRouteTableRoutesStateEnum
	TransitGatewayID            *string
	VpcPeeringConnectionID      *string
}

// CreateRouteTableResultRouteTableTags - Describes a tag.
type CreateRouteTableResultRouteTableTags struct {
	Key   *string
	Value *string
}

// CreateRouteTableResultRouteTable - Information about the route table.
type CreateRouteTableResultRouteTable struct {
	Associations    []CreateRouteTableResultRouteTableAssociations
	OwnerID         *string
	PropagatingVgws []CreateRouteTableResultRouteTablePropagatingVgws
	RouteTableID    *string
	Routes          []CreateRouteTableResultRouteTableRoutes
	Tags            []CreateRouteTableResultRouteTableTags
	VpcID           *string
}

// CreateRouteTableResult - Success
type CreateRouteTableResult struct {
	RouteTable *CreateRouteTableResultRouteTable
}
