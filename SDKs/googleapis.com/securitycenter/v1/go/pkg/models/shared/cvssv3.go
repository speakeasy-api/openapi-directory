// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Cvssv3AttackComplexityEnum - This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
type Cvssv3AttackComplexityEnum string

const (
	Cvssv3AttackComplexityEnumAttackComplexityUnspecified Cvssv3AttackComplexityEnum = "ATTACK_COMPLEXITY_UNSPECIFIED"
	Cvssv3AttackComplexityEnumAttackComplexityLow         Cvssv3AttackComplexityEnum = "ATTACK_COMPLEXITY_LOW"
	Cvssv3AttackComplexityEnumAttackComplexityHigh        Cvssv3AttackComplexityEnum = "ATTACK_COMPLEXITY_HIGH"
)

func (e Cvssv3AttackComplexityEnum) ToPointer() *Cvssv3AttackComplexityEnum {
	return &e
}

func (e *Cvssv3AttackComplexityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTACK_COMPLEXITY_UNSPECIFIED":
		fallthrough
	case "ATTACK_COMPLEXITY_LOW":
		fallthrough
	case "ATTACK_COMPLEXITY_HIGH":
		*e = Cvssv3AttackComplexityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3AttackComplexityEnum: %v", v)
	}
}

// Cvssv3AttackVectorEnum - Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. This metric reflects the context by which vulnerability exploitation is possible.
type Cvssv3AttackVectorEnum string

const (
	Cvssv3AttackVectorEnumAttackVectorUnspecified Cvssv3AttackVectorEnum = "ATTACK_VECTOR_UNSPECIFIED"
	Cvssv3AttackVectorEnumAttackVectorNetwork     Cvssv3AttackVectorEnum = "ATTACK_VECTOR_NETWORK"
	Cvssv3AttackVectorEnumAttackVectorAdjacent    Cvssv3AttackVectorEnum = "ATTACK_VECTOR_ADJACENT"
	Cvssv3AttackVectorEnumAttackVectorLocal       Cvssv3AttackVectorEnum = "ATTACK_VECTOR_LOCAL"
	Cvssv3AttackVectorEnumAttackVectorPhysical    Cvssv3AttackVectorEnum = "ATTACK_VECTOR_PHYSICAL"
)

func (e Cvssv3AttackVectorEnum) ToPointer() *Cvssv3AttackVectorEnum {
	return &e
}

func (e *Cvssv3AttackVectorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTACK_VECTOR_UNSPECIFIED":
		fallthrough
	case "ATTACK_VECTOR_NETWORK":
		fallthrough
	case "ATTACK_VECTOR_ADJACENT":
		fallthrough
	case "ATTACK_VECTOR_LOCAL":
		fallthrough
	case "ATTACK_VECTOR_PHYSICAL":
		*e = Cvssv3AttackVectorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3AttackVectorEnum: %v", v)
	}
}

// Cvssv3AvailabilityImpactEnum - This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
type Cvssv3AvailabilityImpactEnum string

const (
	Cvssv3AvailabilityImpactEnumImpactUnspecified Cvssv3AvailabilityImpactEnum = "IMPACT_UNSPECIFIED"
	Cvssv3AvailabilityImpactEnumImpactHigh        Cvssv3AvailabilityImpactEnum = "IMPACT_HIGH"
	Cvssv3AvailabilityImpactEnumImpactLow         Cvssv3AvailabilityImpactEnum = "IMPACT_LOW"
	Cvssv3AvailabilityImpactEnumImpactNone        Cvssv3AvailabilityImpactEnum = "IMPACT_NONE"
)

func (e Cvssv3AvailabilityImpactEnum) ToPointer() *Cvssv3AvailabilityImpactEnum {
	return &e
}

func (e *Cvssv3AvailabilityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = Cvssv3AvailabilityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3AvailabilityImpactEnum: %v", v)
	}
}

// Cvssv3ConfidentialityImpactEnum - This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
type Cvssv3ConfidentialityImpactEnum string

const (
	Cvssv3ConfidentialityImpactEnumImpactUnspecified Cvssv3ConfidentialityImpactEnum = "IMPACT_UNSPECIFIED"
	Cvssv3ConfidentialityImpactEnumImpactHigh        Cvssv3ConfidentialityImpactEnum = "IMPACT_HIGH"
	Cvssv3ConfidentialityImpactEnumImpactLow         Cvssv3ConfidentialityImpactEnum = "IMPACT_LOW"
	Cvssv3ConfidentialityImpactEnumImpactNone        Cvssv3ConfidentialityImpactEnum = "IMPACT_NONE"
)

func (e Cvssv3ConfidentialityImpactEnum) ToPointer() *Cvssv3ConfidentialityImpactEnum {
	return &e
}

func (e *Cvssv3ConfidentialityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = Cvssv3ConfidentialityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3ConfidentialityImpactEnum: %v", v)
	}
}

// Cvssv3IntegrityImpactEnum - This metric measures the impact to integrity of a successfully exploited vulnerability.
type Cvssv3IntegrityImpactEnum string

const (
	Cvssv3IntegrityImpactEnumImpactUnspecified Cvssv3IntegrityImpactEnum = "IMPACT_UNSPECIFIED"
	Cvssv3IntegrityImpactEnumImpactHigh        Cvssv3IntegrityImpactEnum = "IMPACT_HIGH"
	Cvssv3IntegrityImpactEnumImpactLow         Cvssv3IntegrityImpactEnum = "IMPACT_LOW"
	Cvssv3IntegrityImpactEnumImpactNone        Cvssv3IntegrityImpactEnum = "IMPACT_NONE"
)

func (e Cvssv3IntegrityImpactEnum) ToPointer() *Cvssv3IntegrityImpactEnum {
	return &e
}

func (e *Cvssv3IntegrityImpactEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IMPACT_UNSPECIFIED":
		fallthrough
	case "IMPACT_HIGH":
		fallthrough
	case "IMPACT_LOW":
		fallthrough
	case "IMPACT_NONE":
		*e = Cvssv3IntegrityImpactEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3IntegrityImpactEnum: %v", v)
	}
}

// Cvssv3PrivilegesRequiredEnum - This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
type Cvssv3PrivilegesRequiredEnum string

const (
	Cvssv3PrivilegesRequiredEnumPrivilegesRequiredUnspecified Cvssv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_UNSPECIFIED"
	Cvssv3PrivilegesRequiredEnumPrivilegesRequiredNone        Cvssv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_NONE"
	Cvssv3PrivilegesRequiredEnumPrivilegesRequiredLow         Cvssv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_LOW"
	Cvssv3PrivilegesRequiredEnumPrivilegesRequiredHigh        Cvssv3PrivilegesRequiredEnum = "PRIVILEGES_REQUIRED_HIGH"
)

func (e Cvssv3PrivilegesRequiredEnum) ToPointer() *Cvssv3PrivilegesRequiredEnum {
	return &e
}

func (e *Cvssv3PrivilegesRequiredEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRIVILEGES_REQUIRED_UNSPECIFIED":
		fallthrough
	case "PRIVILEGES_REQUIRED_NONE":
		fallthrough
	case "PRIVILEGES_REQUIRED_LOW":
		fallthrough
	case "PRIVILEGES_REQUIRED_HIGH":
		*e = Cvssv3PrivilegesRequiredEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3PrivilegesRequiredEnum: %v", v)
	}
}

// Cvssv3ScopeEnum - The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
type Cvssv3ScopeEnum string

const (
	Cvssv3ScopeEnumScopeUnspecified Cvssv3ScopeEnum = "SCOPE_UNSPECIFIED"
	Cvssv3ScopeEnumScopeUnchanged   Cvssv3ScopeEnum = "SCOPE_UNCHANGED"
	Cvssv3ScopeEnumScopeChanged     Cvssv3ScopeEnum = "SCOPE_CHANGED"
)

func (e Cvssv3ScopeEnum) ToPointer() *Cvssv3ScopeEnum {
	return &e
}

func (e *Cvssv3ScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCOPE_UNSPECIFIED":
		fallthrough
	case "SCOPE_UNCHANGED":
		fallthrough
	case "SCOPE_CHANGED":
		*e = Cvssv3ScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3ScopeEnum: %v", v)
	}
}

// Cvssv3UserInteractionEnum - This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
type Cvssv3UserInteractionEnum string

const (
	Cvssv3UserInteractionEnumUserInteractionUnspecified Cvssv3UserInteractionEnum = "USER_INTERACTION_UNSPECIFIED"
	Cvssv3UserInteractionEnumUserInteractionNone        Cvssv3UserInteractionEnum = "USER_INTERACTION_NONE"
	Cvssv3UserInteractionEnumUserInteractionRequired    Cvssv3UserInteractionEnum = "USER_INTERACTION_REQUIRED"
)

func (e Cvssv3UserInteractionEnum) ToPointer() *Cvssv3UserInteractionEnum {
	return &e
}

func (e *Cvssv3UserInteractionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_INTERACTION_UNSPECIFIED":
		fallthrough
	case "USER_INTERACTION_NONE":
		fallthrough
	case "USER_INTERACTION_REQUIRED":
		*e = Cvssv3UserInteractionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvssv3UserInteractionEnum: %v", v)
	}
}

// Cvssv3 - Common Vulnerability Scoring System version 3.
type Cvssv3 struct {
	// This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
	AttackComplexity *Cvssv3AttackComplexityEnum `json:"attackComplexity,omitempty"`
	// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. This metric reflects the context by which vulnerability exploitation is possible.
	AttackVector *Cvssv3AttackVectorEnum `json:"attackVector,omitempty"`
	// This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
	AvailabilityImpact *Cvssv3AvailabilityImpactEnum `json:"availabilityImpact,omitempty"`
	// The base score is a function of the base metric scores.
	BaseScore *float64 `json:"baseScore,omitempty"`
	// This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
	ConfidentialityImpact *Cvssv3ConfidentialityImpactEnum `json:"confidentialityImpact,omitempty"`
	// This metric measures the impact to integrity of a successfully exploited vulnerability.
	IntegrityImpact *Cvssv3IntegrityImpactEnum `json:"integrityImpact,omitempty"`
	// This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
	PrivilegesRequired *Cvssv3PrivilegesRequiredEnum `json:"privilegesRequired,omitempty"`
	// The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
	Scope *Cvssv3ScopeEnum `json:"scope,omitempty"`
	// This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
	UserInteraction *Cvssv3UserInteractionEnum `json:"userInteraction,omitempty"`
}
