/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogPricingRule - Defines how discounts are automatically applied to a set of items that match the pricing rule
 * during the active time period.
 */
public class CatalogPricingRule {
    /**
     * __Deprecated__: Please use the `exclude_products_id` field to apply
     * an exclude set instead. Exclude sets allow better control over quantity
     * ranges and offer more flexibility for which matched items receive a discount.
     * 
     * `CatalogProductSet` to apply the pricing to.
     * An apply rule matches within the subset of the cart that fits the match rules (the match set).
     * An apply rule can only match once in the match set.
     * If not supplied, the pricing will be applied to all products in the match set.
     * Other products retain their base price, or a price generated by other rules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apply_products_id")
    public String applyProductsId;

    public CatalogPricingRule withApplyProductsId(String applyProductsId) {
        this.applyProductsId = applyProductsId;
        return this;
    }
    
    /**
     * A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.
     * Notice that a group ID is generated by the Customers API.
     * If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer
     * has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount
     * applies only to matched products sold to customers belonging to the specified customer groups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_group_ids_any")
    public String[] customerGroupIdsAny;

    public CatalogPricingRule withCustomerGroupIdsAny(String[] customerGroupIdsAny) {
        this.customerGroupIdsAny = customerGroupIdsAny;
        return this;
    }
    
    /**
     * Unique ID for the `CatalogDiscount` to take off
     * the price of all matched items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_id")
    public String discountId;

    public CatalogPricingRule withDiscountId(String discountId) {
        this.discountId = discountId;
        return this;
    }
    
    /**
     * `CatalogProductSet` to exclude from the pricing rule.
     * An exclude rule matches within the subset of the cart that fits the match rules (the match set).
     * An exclude rule can only match once in the match set.
     * If not supplied, the pricing will be applied to all products in the match set.
     * Other products retain their base price, or a price generated by other rules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_products_id")
    public String excludeProductsId;

    public CatalogPricingRule withExcludeProductsId(String excludeProductsId) {
        this.excludeProductsId = excludeProductsId;
        return this;
    }
    
    /**
     * If an `exclude_products_id` was given, controls which subset of matched
     * products is excluded from any discounts.
     * 
     * Default value: `LEAST_EXPENSIVE`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_strategy")
    public String excludeStrategy;

    public CatalogPricingRule withExcludeStrategy(String excludeStrategy) {
        this.excludeStrategy = excludeStrategy;
        return this;
    }
    
    /**
     * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
     * matches within the entire cart, and can match multiple times. This field will always be set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("match_products_id")
    public String matchProductsId;

    public CatalogPricingRule withMatchProductsId(String matchProductsId) {
        this.matchProductsId = matchProductsId;
        return this;
    }
    
    /**
     * User-defined name for the pricing rule. For example, "Buy one get one
     * free" or "10% off".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CatalogPricingRule withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A list of unique IDs for the catalog time periods when
     * this pricing rule is in effect. If left unset, the pricing rule is always
     * in effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_period_ids")
    public String[] timePeriodIds;

    public CatalogPricingRule withTimePeriodIds(String[] timePeriodIds) {
        this.timePeriodIds = timePeriodIds;
        return this;
    }
    
    /**
     * Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_from_date")
    public String validFromDate;

    public CatalogPricingRule withValidFromDate(String validFromDate) {
        this.validFromDate = validFromDate;
        return this;
    }
    
    /**
     * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
     * (HH:MM:SS). Partial seconds will be truncated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_from_local_time")
    public String validFromLocalTime;

    public CatalogPricingRule withValidFromLocalTime(String validFromLocalTime) {
        this.validFromLocalTime = validFromLocalTime;
        return this;
    }
    
    /**
     * Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_until_date")
    public String validUntilDate;

    public CatalogPricingRule withValidUntilDate(String validUntilDate) {
        this.validUntilDate = validUntilDate;
        return this;
    }
    
    /**
     * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
     * (HH:MM:SS). Partial seconds will be truncated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_until_local_time")
    public String validUntilLocalTime;

    public CatalogPricingRule withValidUntilLocalTime(String validUntilLocalTime) {
        this.validUntilLocalTime = validUntilLocalTime;
        return this;
    }
    
    public CatalogPricingRule(){}
}
