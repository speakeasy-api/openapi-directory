"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class BabelFeeController:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_for_notifications(self) -> operations.CheckForNotificationsResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mosaik/babelfee/notificationcheck'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckForNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.check_for_notifications_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.check_for_notifications_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.check_for_notifications_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.check_for_notifications_409_wildcard_string = http_res.content

        return res

    def ergo_pay_create_babel_box_1(self, request: operations.ErgoPayCreateBabelBox1Request) -> operations.ErgoPayCreateBabelBox1Response:
        base_url = self._server_url
        
        url = utils.generate_url(operations.ErgoPayCreateBabelBox1Request, base_url, '/cancelbabel/{boxId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ErgoPayCreateBabelBox1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.ergo_pay_create_babel_box_1_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.ergo_pay_create_babel_box_1_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.ergo_pay_create_babel_box_1_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.ergo_pay_create_babel_box_1_409_wildcard_string = http_res.content

        return res

    def get_babel_fee_overview(self) -> operations.GetBabelFeeOverviewResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mosaik/babelfee/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBabelFeeOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_babel_fee_overview_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.get_babel_fee_overview_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.get_babel_fee_overview_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.get_babel_fee_overview_409_wildcard_string = http_res.content

        return res

    