/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a Document.
   */
  discoveryengineProjectsLocationsDataStoresBranchesDocumentsCreate(
    req: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/documents",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaDocument",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDiscoveryengineV1betaDocument = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDiscoveryengineV1betaDocument
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Document.
   */
  discoveryengineProjectsLocationsDataStoresBranchesDocumentsDelete(
    req: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bulk import of multiple Documents. Request processing may be synchronous. Non-existing items will be created. Note: It is possible for a subset of the Documents to be successfully updated.
   */
  discoveryengineProjectsLocationsDataStoresBranchesDocumentsImport(
    req: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/documents:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaImportDocumentsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of Documents.
   */
  discoveryengineProjectsLocationsDataStoresBranchesDocumentsList(
    req: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/documents",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDiscoveryengineV1betaListDocumentsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDiscoveryengineV1betaListDocumentsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a Document.
   */
  discoveryengineProjectsLocationsDataStoresBranchesDocumentsPatch(
    req: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaDocument",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresBranchesDocumentsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDiscoveryengineV1betaDocument = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDiscoveryengineV1betaDocument
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Makes a recommendation, which requires a contextual user event.
   */
  discoveryengineProjectsLocationsDataStoresServingConfigsRecommend(
    req: operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{servingConfig}:recommend",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaRecommendRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresServingConfigsRecommendResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDiscoveryengineV1betaRecommendResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDiscoveryengineV1betaRecommendResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Discovery Engine API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
   */
  discoveryengineProjectsLocationsDataStoresUserEventsCollect(
    req: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/userEvents:collect",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsCollectResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleApiHttpBody = utils.objectToClass(
              httpRes?.data,
              shared.GoogleApiHttpBody
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.
   */
  discoveryengineProjectsLocationsDataStoresUserEventsImport(
    req: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/userEvents:import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaImportUserEventsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Writes a single user event.
   */
  discoveryengineProjectsLocationsDataStoresUserEventsWrite(
    req: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest,
    security: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{parent}/userEvents:write",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDiscoveryengineV1betaUserEvent",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse =
        new operations.DiscoveryengineProjectsLocationsDataStoresUserEventsWriteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDiscoveryengineV1betaUserEvent = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDiscoveryengineV1betaUserEvent
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  discoveryengineProjectsOperationsGet(
    req: operations.DiscoveryengineProjectsOperationsGetRequest,
    security: operations.DiscoveryengineProjectsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiscoveryengineProjectsOperationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DiscoveryengineProjectsOperationsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsOperationsGetResponse =
        new operations.DiscoveryengineProjectsOperationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningOperation = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningOperation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  discoveryengineProjectsOperationsList(
    req: operations.DiscoveryengineProjectsOperationsListRequest,
    security: operations.DiscoveryengineProjectsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiscoveryengineProjectsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiscoveryengineProjectsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DiscoveryengineProjectsOperationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiscoveryengineProjectsOperationsListResponse =
        new operations.DiscoveryengineProjectsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
