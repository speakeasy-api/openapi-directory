"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class TestPatchTestSeriesSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestPatchTestSeriesNameOfTheTestSeries:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the new test series"""  
    

@dataclasses.dataclass
class TestPatchTestSeriesRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: TestPatchTestSeriesNameOfTheTestSeries = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    test_series_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'test_series_slug', 'style': 'simple', 'explode': False }})
    r"""The slug of the test series"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestPatchTestSeriesTestSeriesTestRunSummary:
    r"""Most important information about a test run."""
    
    completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed'), 'exclude': lambda f: f is None }})
    r"""Tells whether the test run has completed"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Date of the test run."""  
    failed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})
    r"""Number of failed tests"""  
    passed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passed'), 'exclude': lambda f: f is None }})
    r"""Number of passed tests"""  
    status_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusDescription'), 'exclude': lambda f: f is None }})
    r"""Human-readable status of the test run."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestPatchTestSeriesTestSeries:
    r"""Summary of a single test series"""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the test series"""  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Unique, human-readable identifier of the test series"""  
    most_recent_activity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mostRecentActivity'), 'exclude': lambda f: f is None }})
    r"""Date of the latest test run that used this test series"""  
    test_runs: Optional[list[TestPatchTestSeriesTestSeriesTestRunSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testRuns'), 'exclude': lambda f: f is None }})
    r"""Most recent test runs"""  
    

@dataclasses.dataclass
class TestPatchTestSeriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_series: Optional[TestPatchTestSeriesTestSeries] = dataclasses.field(default=None)
    r"""Test series was successfully patched"""  
    