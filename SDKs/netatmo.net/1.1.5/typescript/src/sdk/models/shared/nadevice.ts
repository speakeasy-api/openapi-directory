/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { NADashboardData } from "./nadashboarddata";
import { NADate } from "./nadate";
import { NAHeatingSystem } from "./naheatingsystem";
import { NAHouseModel } from "./nahousemodel";
import { NAObject } from "./naobject";
import { NAPlace } from "./naplace";
import { NAThermProgram } from "./nathermprogram";
import { Expose, Transform, Type } from "class-transformer";

export class NADevice extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "behavior" })
  behavior?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "cipher_id" })
  cipherId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dashboard_data" })
  @Type(() => NADashboardData)
  dashboardData?: NADashboardData;

  @SpeakeasyMetadata()
  @Expose({ name: "data_type" })
  dataType?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "date_setup" })
  @Type(() => NADate)
  dateSetup?: NADate;

  @SpeakeasyMetadata()
  @Expose({ name: "firmware" })
  firmware?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "first_pid_avail" })
  firstPidAvail?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "heating_system" })
  @Type(() => NAHeatingSystem)
  heatingSystem?: NAHeatingSystem;

  @SpeakeasyMetadata()
  @Expose({ name: "house_model" })
  @Type(() => NAHouseModel)
  houseModel?: NAHouseModel;

  @SpeakeasyMetadata()
  @Expose({ name: "hw_version" })
  hwVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_fw_update" })
  lastFwUpdate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_radio_store" })
  lastRadioStore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_status_store" })
  lastStatusStore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "last_upgrade" })
  lastUpgrade?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "module_name" })
  moduleName?: string;

  /**
   * It lists which modules are linked with this device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modules" })
  modules?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "new_feature_avail" })
  newFeatureAvail?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "place" })
  @Type(() => NAPlace)
  place?: NAPlace;

  @SpeakeasyMetadata()
  @Expose({ name: "public_ext_data" })
  publicExtData?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "setpoint" })
  setpoint?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "setpoint_default_duration" })
  setpointDefaultDuration?: number;

  @SpeakeasyMetadata({ elemType: NAObject, elemDepth: 2 })
  @Expose({ name: "setpoint_order" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NAObject[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NAObject);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  setpointOrder?: Record<string, NAObject[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "station_name" })
  stationName?: string;

  @SpeakeasyMetadata({ elemType: NAThermProgram })
  @Expose({ name: "therm_program" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NAThermProgram> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NAThermProgram);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  thermProgram?: Record<string, NAThermProgram>;

  @SpeakeasyMetadata({ elemType: NAThermProgram, elemDepth: 2 })
  @Expose({ name: "therm_program_backup" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NAThermProgram[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NAThermProgram);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  thermProgramBackup?: Record<string, NAThermProgram[]>;

  @SpeakeasyMetadata({ elemType: NAObject, elemDepth: 2 })
  @Expose({ name: "therm_program_order" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, NAObject[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], NAObject);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  thermProgramOrder?: Record<string, NAObject[]>;

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among :
   *
   * @remarks
   * NAMain : for the base station
   * NAModule1 : for the outdoor module
   * NAModule4 : for the additionnal indoor module
   * NAModule3 : for the rain gauge module
   * NAPlug : for the thermostat relay/plug
   * NATherm1 : for the thermostat module
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "udp_conn" })
  udpConn?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "user_owner" })
  userOwner?: string[];

  /**
   * It contains the current wifi status. The different thresholds to take into account are
   *
   * @remarks
   * RSSI_THRESHOLD_0 = 86 bad signal
   * RSSI_THRESHOLD_1 = 71 middle quality signal
   * RSSI_THRESHOLD_2 = 56 good signal
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wifi_status" })
  wifiStatus?: number;
}
