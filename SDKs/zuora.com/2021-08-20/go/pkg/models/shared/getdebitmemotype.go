// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// GETDebitMemoTypeStatusEnum - The status of the debit memo.
type GETDebitMemoTypeStatusEnum string

const (
	GETDebitMemoTypeStatusEnumDraft            GETDebitMemoTypeStatusEnum = "Draft"
	GETDebitMemoTypeStatusEnumPosted           GETDebitMemoTypeStatusEnum = "Posted"
	GETDebitMemoTypeStatusEnumCanceled         GETDebitMemoTypeStatusEnum = "Canceled"
	GETDebitMemoTypeStatusEnumError            GETDebitMemoTypeStatusEnum = "Error"
	GETDebitMemoTypeStatusEnumPendingForTax    GETDebitMemoTypeStatusEnum = "PendingForTax"
	GETDebitMemoTypeStatusEnumGenerating       GETDebitMemoTypeStatusEnum = "Generating"
	GETDebitMemoTypeStatusEnumCancelInProgress GETDebitMemoTypeStatusEnum = "CancelInProgress"
)

func (e *GETDebitMemoTypeStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Posted":
		fallthrough
	case "Canceled":
		fallthrough
	case "Error":
		fallthrough
	case "PendingForTax":
		fallthrough
	case "Generating":
		fallthrough
	case "CancelInProgress":
		*e = GETDebitMemoTypeStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDebitMemoTypeStatusEnum: %s", s)
	}
}

// GETDebitMemoTypeTaxStatusEnum - The status of tax calculation related to the debit memo.
//
// **Note**: This field is only applicable to tax calculation by third-party tax engines.
type GETDebitMemoTypeTaxStatusEnum string

const (
	GETDebitMemoTypeTaxStatusEnumComplete GETDebitMemoTypeTaxStatusEnum = "Complete"
	GETDebitMemoTypeTaxStatusEnumError    GETDebitMemoTypeTaxStatusEnum = "Error"
)

func (e *GETDebitMemoTypeTaxStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Complete":
		fallthrough
	case "Error":
		*e = GETDebitMemoTypeTaxStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDebitMemoTypeTaxStatusEnum: %s", s)
	}
}

// GETDebitMemoTypeTransferredToAccountingEnum - Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
type GETDebitMemoTypeTransferredToAccountingEnum string

const (
	GETDebitMemoTypeTransferredToAccountingEnumProcessing GETDebitMemoTypeTransferredToAccountingEnum = "Processing"
	GETDebitMemoTypeTransferredToAccountingEnumYes        GETDebitMemoTypeTransferredToAccountingEnum = "Yes"
	GETDebitMemoTypeTransferredToAccountingEnumNo         GETDebitMemoTypeTransferredToAccountingEnum = "No"
	GETDebitMemoTypeTransferredToAccountingEnumError      GETDebitMemoTypeTransferredToAccountingEnum = "Error"
	GETDebitMemoTypeTransferredToAccountingEnumIgnore     GETDebitMemoTypeTransferredToAccountingEnum = "Ignore"
)

func (e *GETDebitMemoTypeTransferredToAccountingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Processing":
		fallthrough
	case "Yes":
		fallthrough
	case "No":
		fallthrough
	case "Error":
		fallthrough
	case "Ignore":
		*e = GETDebitMemoTypeTransferredToAccountingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDebitMemoTypeTransferredToAccountingEnum: %s", s)
	}
}

// GETDebitMemoType - Container for custom fields of a Debit Memo object.
type GETDebitMemoType struct {
	// ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationIDNS *string `json:"IntegrationId__NS,omitempty"`
	// Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	IntegrationStatusNS *string `json:"IntegrationStatus__NS,omitempty"`
	// Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
	//
	SyncDateNS *string `json:"SyncDate__NS,omitempty"`
	// The ID of the customer account associated with the debit memo.
	//
	AccountID *string `json:"accountId,omitempty"`
	// The total amount of the debit memo.
	//
	Amount *float64 `json:"amount,omitempty"`
	// Whether debit memos are automatically picked up for processing in the corresponding payment run.
	//
	// By default, debit memos are automatically picked up for processing in the corresponding payment run.
	//
	AutoPay *bool `json:"autoPay,omitempty"`
	// The balance of the debit memo.
	//
	Balance *float64 `json:"balance,omitempty"`
	// The amount that is applied to the debit memo.
	//
	BeAppliedAmount *float64 `json:"beAppliedAmount,omitempty"`
	// The ID of the Zuora user who cancelled the debit memo.
	//
	CancelledByID *string `json:"cancelledById,omitempty"`
	// The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
	//
	CancelledOn *time.Time `json:"cancelledOn,omitempty"`
	// Comments about the debit memo.
	//
	Comment *string `json:"comment,omitempty"`
	// The ID of the Zuora user who created the debit memo.
	//
	CreatedByID *string `json:"createdById,omitempty"`
	// The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
	//
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
	//
	DebitMemoDate *types.Date `json:"debitMemoDate,omitempty"`
	// The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
	//
	DueDate *types.Date `json:"dueDate,omitempty"`
	// The unique ID of the debit memo.
	//
	ID *string `json:"id,omitempty"`
	// The ID of the latest PDF file generated for the debit memo.
	//
	LatestPDFFileID *string `json:"latestPDFFileId,omitempty"`
	// The unique identification number of the debit memo.
	//
	Number *string `json:"number,omitempty"`
	// The ID of the Zuora user who posted the debit memo.
	//
	PostedByID *string `json:"postedById,omitempty"`
	// The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
	//
	PostedOn *time.Time `json:"postedOn,omitempty"`
	// A code identifying the reason for the transaction. The value must be an existing reason code or empty.
	//
	ReasonCode *string `json:"reasonCode,omitempty"`
	// The ID of a referred invoice.
	//
	ReferredInvoiceID *string `json:"referredInvoiceId,omitempty"`
	// The status of the debit memo.
	//
	Status *GETDebitMemoTypeStatusEnum `json:"status,omitempty"`
	// Returns `true` if the request was processed successfully.
	Success *bool `json:"success,omitempty"`
	// The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
	//
	TargetDate *types.Date `json:"targetDate,omitempty"`
	// The amount of taxation.
	//
	TaxAmount *float64 `json:"taxAmount,omitempty"`
	// The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.
	//
	TaxMessage *string `json:"taxMessage,omitempty"`
	// The status of tax calculation related to the debit memo.
	//
	// **Note**: This field is only applicable to tax calculation by third-party tax engines.
	//
	TaxStatus *GETDebitMemoTypeTaxStatusEnum `json:"taxStatus,omitempty"`
	// The total amount of taxes or VAT for which the customer has an exemption.
	//
	TotalTaxExemptAmount *float64 `json:"totalTaxExemptAmount,omitempty"`
	// Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
	//
	TransferredToAccounting *GETDebitMemoTypeTransferredToAccountingEnum `json:"transferredToAccounting,omitempty"`
	// The ID of the Zuora user who last updated the debit memo.
	//
	UpdatedByID *string `json:"updatedById,omitempty"`
	// The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
	//
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}
