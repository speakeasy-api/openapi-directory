"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import createorderrateplanoverride as shared_createorderrateplanoverride
from ..shared import renewalterm as shared_renewalterm
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum(str, Enum):
    r"""Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`."""
    MONTH = 'Month'
    YEAR = 'Year'
    DAY = 'Day'
    WEEK = 'Week'

class CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum(str, Enum):
    r"""Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration."""
    TERMED = 'TERMED'
    EVERGREEN = 'EVERGREEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrderCreateSubscriptionTermsInitialTerm:
    r"""Information about the first term of the subscription."""
    
    term_type: CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termType') }})
    r"""Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration."""  
    period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`."""  
    period_type: Optional[CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodType'), 'exclude': lambda f: f is None }})
    r"""Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date of the first term, in YYYY-MM-DD format."""  
    
class CreateOrderCreateSubscriptionTermsRenewalSettingEnum(str, Enum):
    r"""Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
    
    * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
    * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
    """
    RENEW_WITH_SPECIFIC_TERM = 'RENEW_WITH_SPECIFIC_TERM'
    RENEW_TO_EVERGREEN = 'RENEW_TO_EVERGREEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrderCreateSubscriptionTerms:
    r"""Container for the terms and renewal settings of the subscription."""
    
    initial_term: CreateOrderCreateSubscriptionTermsInitialTerm = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialTerm') }})
    r"""Information about the first term of the subscription."""  
    auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenew'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`."""  
    renewal_setting: Optional[CreateOrderCreateSubscriptionTermsRenewalSettingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalSetting'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
    
    * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
    * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
    """  
    renewal_terms: Optional[list[shared_renewalterm.RenewalTerm]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewalTerms'), 'exclude': lambda f: f is None }})
    r"""List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED` and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrderCreateSubscription:
    r"""Information about an order action of type `CreateSubscription`."""
    
    invoice_separately: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceSeparately'), 'exclude': lambda f: f is None }})
    r"""Specifies whether the subscription appears on a separate invoice when Zuora generates invoices."""  
    new_subscription_owner_account: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newSubscriptionOwnerAccount'), 'exclude': lambda f: f is None }})  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Notes about the subscription. These notes are only visible to Zuora users."""  
    subscribe_to_rate_plans: Optional[list[shared_createorderrateplanoverride.CreateOrderRatePlanOverride]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscribeToRatePlans'), 'exclude': lambda f: f is None }})
    r"""List of rate plans associated with the subscription."""  
    subscription_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionNumber'), 'exclude': lambda f: f is None }})
    r"""Subscription number of the subscription. For example, A-S00000001.
    
    If you do not set this field, Zuora will generate the subscription number.
    """  
    subscription_owner_account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionOwnerAccountNumber'), 'exclude': lambda f: f is None }})
    r"""Account number of an existing account that will own the subscription. For example, A00000001.
    
    If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field.
    """  
    terms: Optional[CreateOrderCreateSubscriptionTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms'), 'exclude': lambda f: f is None }})
    r"""Container for the terms and renewal settings of the subscription."""  
    