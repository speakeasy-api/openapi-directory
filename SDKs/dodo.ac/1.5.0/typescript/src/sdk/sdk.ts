/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.nookipedia.com/"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).<br><br>This API is 'version 2' of our [original API](https://nookipedia.com/api/). While the previous API scraped information directly from the wiki, this new edition of the API pulls data from a structured and constrained database, resulting in higher-quality data, better searching, and support for filtering.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * All New Horizons artwork
   *
   * @remarks
   * Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
   */
  getNhArt(
    req: operations.GetNhArtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhArtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhArtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/art";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhArtResponse = new operations.GetNhArtResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhArtworks = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhArtworks = utils.objectToClass(
              httpRes?.data,
              shared.NHArtwork,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons artwork
   *
   * @remarks
   * Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
   */
  getNhArtArtwork(
    req: operations.GetNhArtArtworkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhArtArtworkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhArtArtworkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/art/{artwork}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhArtArtworkResponse =
        new operations.GetNhArtArtworkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhArtwork = utils.objectToClass(
              httpRes?.data,
              shared.NHArtwork
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons bugs
   *
   * @remarks
   * Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
   */
  getNhBugs(
    req: operations.GetNhBugsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhBugsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhBugsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/bugs";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhBugsResponse =
        new operations.GetNhBugsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhBugs = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhBugs = utils.objectToClass(
              httpRes?.data,
              shared.NHBug,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons bug
   *
   * @remarks
   * Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
   */
  getNhBugsBug(
    req: operations.GetNhBugsBugRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhBugsBugResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhBugsBugRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/bugs/{bug}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhBugsBugResponse =
        new operations.GetNhBugsBugResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhBug = utils.objectToClass(httpRes?.data, shared.NHBug);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error404 = utils.objectToClass(httpRes?.data, shared.Error404);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons clothing
   *
   * @remarks
   * Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
   */
  getNhClothing(
    req: operations.GetNhClothingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhClothingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhClothingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/clothing";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhClothingResponse =
        new operations.GetNhClothingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhClothings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhClothings = utils.objectToClass(
              httpRes?.data,
              shared.NHClothing,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons clothing
   *
   * @remarks
   * Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
   */
  getNhClothingClothing(
    req: operations.GetNhClothingClothingRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhClothingClothingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhClothingClothingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/clothing/{clothing}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhClothingClothingResponse =
        new operations.GetNhClothingClothingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhClothing = utils.objectToClass(
              httpRes?.data,
              shared.NHClothing
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons events
   *
   * @remarks
   * Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
   */
  getNhEvents(
    req: operations.GetNhEventsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/events";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhEventsResponse =
        new operations.GetNhEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhEvents = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhEvents = utils.objectToClass(
              httpRes?.data,
              shared.NHEvent,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons fish
   *
   * @remarks
   * Get a list of all fish and their details in *New Horizons*.
   */
  getNhFish(
    req: operations.GetNhFishRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/fish";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFishResponse =
        new operations.GetNhFishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFish = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhFish = utils.objectToClass(
              httpRes?.data,
              shared.NHFish,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons fish
   *
   * @remarks
   * Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
   */
  getNhFishFish(
    req: operations.GetNhFishFishRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFishFishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFishFishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/fish/{fish}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFishFishResponse =
        new operations.GetNhFishFishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFish = utils.objectToClass(httpRes?.data, shared.NHFish);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error404 = utils.objectToClass(httpRes?.data, shared.Error404);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons fossil groups or individual fossil
   *
   * @remarks
   * Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
   */
  getNhFossilsAll(
    req: operations.GetNhFossilsAllRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsAllResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsAllRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/fossils/all";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsAllResponse =
        new operations.GetNhFossilsAllResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFossilGroupWithIndividualFossilsNoMatcheds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhFossilGroupWithIndividualFossilsNoMatcheds =
              utils.objectToClass(
                httpRes?.data,
                shared.NHFossilGroupWithIndividualFossilsNoMatched,
                resFieldDepth
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons fossil group with individual fossils
   *
   * @remarks
   * Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
   */
  getNhFossilsAllFossil(
    req: operations.GetNhFossilsAllFossilRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsAllFossilResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsAllFossilRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/fossils/all/{fossil}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsAllFossilResponse =
        new operations.GetNhFossilsAllFossilResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFossilGroupWithIndividualFossils = utils.objectToClass(
              httpRes?.data,
              shared.NHFossilGroupWithIndividualFossils
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons fossil groups
   *
   * @remarks
   * Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
   */
  getNhFossilsGroups(
    req: operations.GetNhFossilsGroupsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsGroupsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsGroupsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/fossils/groups";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsGroupsResponse =
        new operations.GetNhFossilsGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFossilGroups = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhFossilGroups = utils.objectToClass(
              httpRes?.data,
              shared.NHFossilGroup,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons fossil group
   *
   * @remarks
   * Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
   */
  getNhFossilsGroupsFossilGroup(
    req: operations.GetNhFossilsGroupsFossilGroupRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsGroupsFossilGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsGroupsFossilGroupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/fossils/groups/{fossil_group}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsGroupsFossilGroupResponse =
        new operations.GetNhFossilsGroupsFossilGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFossilGroup = utils.objectToClass(
              httpRes?.data,
              shared.NHFossilGroup
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons fossils
   *
   * @remarks
   * Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
   */
  getNhFossilsIndividuals(
    req: operations.GetNhFossilsIndividualsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsIndividualsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsIndividualsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/fossils/individuals";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsIndividualsResponse =
        new operations.GetNhFossilsIndividualsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhIndividualFossils = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhIndividualFossils = utils.objectToClass(
              httpRes?.data,
              shared.NHIndividualFossil,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons fossil
   *
   * @remarks
   * Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
   */
  getNhFossilsIndividualsFossil(
    req: operations.GetNhFossilsIndividualsFossilRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFossilsIndividualsFossilResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFossilsIndividualsFossilRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/fossils/individuals/{fossil}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFossilsIndividualsFossilResponse =
        new operations.GetNhFossilsIndividualsFossilResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhIndividualFossil = utils.objectToClass(
              httpRes?.data,
              shared.NHIndividualFossil
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons furniture
   *
   * @remarks
   * Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
   */
  getNhFurniture(
    req: operations.GetNhFurnitureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFurnitureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFurnitureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/furniture";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFurnitureResponse =
        new operations.GetNhFurnitureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFurnitures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhFurnitures = utils.objectToClass(
              httpRes?.data,
              shared.NHFurniture,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons furniture
   *
   * @remarks
   * Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
   */
  getNhFurnitureFurniture(
    req: operations.GetNhFurnitureFurnitureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhFurnitureFurnitureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhFurnitureFurnitureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/furniture/{furniture}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhFurnitureFurnitureResponse =
        new operations.GetNhFurnitureFurnitureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhFurniture = utils.objectToClass(
              httpRes?.data,
              shared.NHFurniture
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons interior items
   *
   * @remarks
   * Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
   */
  getNhInterior(
    req: operations.GetNhInteriorRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhInteriorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhInteriorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/interior";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhInteriorResponse =
        new operations.GetNhInteriorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhInteriors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhInteriors = utils.objectToClass(
              httpRes?.data,
              shared.NHInterior,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons interior item
   *
   * @remarks
   * Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
   */
  getNhInteriorItem(
    req: operations.GetNhInteriorItemRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhInteriorItemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhInteriorItemRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/interior/{item}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhInteriorItemResponse =
        new operations.GetNhInteriorItemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhInterior = utils.objectToClass(
              httpRes?.data,
              shared.NHInterior
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Miscellaneous New Horizons items
   *
   * @remarks
   * Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
   */
  getNhItems(
    req: operations.GetNhItemsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhItemsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhItemsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/items";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhItemsResponse =
        new operations.GetNhItemsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhItems = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhItems = utils.objectToClass(
              httpRes?.data,
              shared.NHItem,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons miscellaneous item
   *
   * @remarks
   * Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
   */
  getNhItemsItem(
    req: operations.GetNhItemsItemRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhItemsItemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhItemsItemRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/items/{item}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhItemsItemResponse =
        new operations.GetNhItemsItemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhItem = utils.objectToClass(httpRes?.data, shared.NHItem);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons photos and posters
   *
   * @remarks
   * Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
   */
  getNhPhotos(
    req: operations.GetNhPhotosRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhPhotosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhPhotosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/photos";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhPhotosResponse =
        new operations.GetNhPhotosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhPhotos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhPhotos = utils.objectToClass(
              httpRes?.data,
              shared.NHPhoto,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons photo or poster
   *
   * @remarks
   * Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
   */
  getNhPhotosItem(
    req: operations.GetNhPhotosItemRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhPhotosItemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhPhotosItemRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/photos/{item}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhPhotosItemResponse =
        new operations.GetNhPhotosItemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhPhoto = utils.objectToClass(httpRes?.data, shared.NHPhoto);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons recipes
   *
   * @remarks
   * Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
   */
  getNhRecipes(
    req: operations.GetNhRecipesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhRecipesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhRecipesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/recipes";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhRecipesResponse =
        new operations.GetNhRecipesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhRecipes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhRecipes = utils.objectToClass(
              httpRes?.data,
              shared.NHRecipe,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons recipe
   *
   * @remarks
   * Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
   */
  getNhRecipesItem(
    req: operations.GetNhRecipesItemRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhRecipesItemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhRecipesItemRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/recipes/{item}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhRecipesItemResponse =
        new operations.GetNhRecipesItemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhRecipe = utils.objectToClass(httpRes?.data, shared.NHRecipe);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons sea creatures
   *
   * @remarks
   * Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
   */
  getNhSea(
    req: operations.GetNhSeaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhSeaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhSeaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/sea";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhSeaResponse = new operations.GetNhSeaResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhSeaCreatures = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhSeaCreatures = utils.objectToClass(
              httpRes?.data,
              shared.NHSeaCreature,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons sea creature
   *
   * @remarks
   * Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
   */
  getNhSeaSeaCreature(
    req: operations.GetNhSeaSeaCreatureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhSeaSeaCreatureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhSeaSeaCreatureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/nh/sea/{sea_creature}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhSeaSeaCreatureResponse =
        new operations.GetNhSeaSeaCreatureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhSeaCreature = utils.objectToClass(
              httpRes?.data,
              shared.NHSeaCreature
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error404 = utils.objectToClass(httpRes?.data, shared.Error404);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * All New Horizons tools
   *
   * @remarks
   * Get a list of all tools and their details in *Animal Crossing: New Horizons*.
   */
  getNhTools(
    req: operations.GetNhToolsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhToolsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhToolsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/nh/tools";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhToolsResponse =
        new operations.GetNhToolsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhTools = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.nhTools = utils.objectToClass(
              httpRes?.data,
              shared.NHTool,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Single New Horizons tool
   *
   * @remarks
   * Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
   */
  getNhToolsTool(
    req: operations.GetNhToolsToolRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetNhToolsToolResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetNhToolsToolRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/nh/tools/{tool}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetNhToolsToolResponse =
        new operations.GetNhToolsToolResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.nhTool = utils.objectToClass(httpRes?.data, shared.NHTool);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Villagers
   *
   * @remarks
   * This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
   */
  getVillagers(
    req: operations.GetVillagersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVillagersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVillagersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/villagers";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVillagersResponse =
        new operations.GetVillagersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.villagers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.villagers = utils.objectToClass(
              httpRes?.data,
              shared.Villager,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error400 = utils.objectToClass(httpRes?.data, shared.Error400);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401 = utils.objectToClass(httpRes?.data, shared.Error401);
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error500 = utils.objectToClass(httpRes?.data, shared.Error500);
          }
          break;
      }

      return res;
    });
  }
}
