/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ListCollectionScoresSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth2: string;
}

/**
 * Sort direction
 */
export enum ListCollectionScoresDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * Sort
 */
export enum ListCollectionScoresSortEnum {
  CreationDate = "creationDate",
  ModificationDate = "modificationDate",
  Title = "title",
}

export class ListCollectionScoresRequest extends SpeakeasyBase {
  /**
   * Unique identifier of the collection.
   *
   * @remarks
   * The following aliases are supported:
   * - `root`: The root collection of the account
   * - `sharedWithMe`: Automatically contains new resources that have been shared individually
   * - `trash`: Automatically contains resources that have been deleted
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=collection",
  })
  collection: string;

  /**
   * Sort direction
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: ListCollectionScoresDirectionEnum;

  /**
   * This is the maximum number of objects that may be returned
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * An opaque string cursor to fetch the next page of data.
   *
   * @remarks
   * The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=next" })
  next?: string;

  /**
   * An opaque string cursor to fetch the previous page of data.
   *
   * @remarks
   * The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=previous",
  })
  previous?: string;

  /**
   * This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sharingKey",
  })
  sharingKey?: string;

  /**
   * Sort
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: ListCollectionScoresSortEnum;
}

export class ListCollectionScoresResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  flatErrorResponse?: shared.FlatErrorResponse;

  /**
   * List of scores
   */
  @SpeakeasyMetadata({ elemType: shared.ScoreDetails })
  scoreDetails?: shared.ScoreDetails[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
