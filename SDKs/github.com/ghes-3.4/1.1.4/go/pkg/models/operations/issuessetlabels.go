// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type IssuesSetLabelsPathParams struct {
	// The number that identifies the issue.
	IssueNumber int64 `pathParam:"style=simple,explode=false,name=issue_number"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type IssuesSetLabelsRequestBody4 struct {
	Name string `json:"name"`
}

type IssuesSetLabelsRequestBody3Labels struct {
	Name string `json:"name"`
}

type IssuesSetLabelsRequestBody3 struct {
	Labels []IssuesSetLabelsRequestBody3Labels `json:"labels,omitempty"`
}

type IssuesSetLabelsRequestBody1 struct {
	// The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#add-labels-to-an-issue)."
	Labels []string `json:"labels,omitempty"`
}

type IssuesSetLabelsRequest struct {
	PathParams IssuesSetLabelsPathParams
	Request    interface{} `request:"mediaType=application/json"`
}

type IssuesSetLabelsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Moved permanently
	BasicError *shared.BasicError
	// Response
	Labels []shared.Label
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
