/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetCandidateCandidateIdCommitteesRequest {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;

    public GetCandidateCandidateIdCommitteesRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * First character indicates office - [P]residential, [H]ouse, [S]enate].
     * Second character is the last digit of the two-year period the ID was created.
     * Third and fourth is the candidate state. Presidential IDs don't have state.
     * Fifth and sixth is the district when the candidate first ran. This does not change if the
     * candidate/member's district changes during re-districting. Presidential IDs don't have districts.
     * The rest is sequence.
     * 
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=candidate_id")
    public String candidateId;

    public GetCandidateCandidateIdCommitteesRequest withCandidateId(String candidateId) {
        this.candidateId = candidateId;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_type")
    public GetCandidateCandidateIdCommitteesCommitteeTypeEnum[] committeeType;

    public GetCandidateCandidateIdCommitteesRequest withCommitteeType(GetCandidateCandidateIdCommitteesCommitteeTypeEnum[] committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s) The cycle begins with
     * an odd year and is named for its ending, even year.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cycle")
    public Integer[] cycle;

    public GetCandidateCandidateIdCommitteesRequest withCycle(Integer[] cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=designation")
    public GetCandidateCandidateIdCommitteesDesignationEnum[] designation;

    public GetCandidateCandidateIdCommitteesRequest withDesignation(GetCandidateCandidateIdCommitteesDesignationEnum[] designation) {
        this.designation = designation;
        return this;
    }
    
    /**
     * The one-letter 
     *     code of the filing frequency:
     *          - A Administratively terminated
     *          - D Debt
     *          - M Monthly filer
     *          - Q Quarterly filer
     *          - T Terminated
     *          - W Waived
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filing_frequency")
    public GetCandidateCandidateIdCommitteesFilingFrequencyEnum[] filingFrequency;

    public GetCandidateCandidateIdCommitteesRequest withFilingFrequency(GetCandidateCandidateIdCommitteesFilingFrequencyEnum[] filingFrequency) {
        this.filingFrequency = filingFrequency;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_type")
    public GetCandidateCandidateIdCommitteesOrganizationTypeEnum[] organizationType;

    public GetCandidateCandidateIdCommitteesRequest withOrganizationType(GetCandidateCandidateIdCommitteesOrganizationTypeEnum[] organizationType) {
        this.organizationType = organizationType;
        return this;
    }
    
    /**
     * For paginating through results, starting at page 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;

    public GetCandidateCandidateIdCommitteesRequest withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;

    public GetCandidateCandidateIdCommitteesRequest withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;

    public GetCandidateCandidateIdCommitteesRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;

    public GetCandidateCandidateIdCommitteesRequest withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;

    public GetCandidateCandidateIdCommitteesRequest withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    /**
     * Toggle that sorts null values last
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_nulls_last")
    public Boolean sortNullsLast;

    public GetCandidateCandidateIdCommitteesRequest withSortNullsLast(Boolean sortNullsLast) {
        this.sortNullsLast = sortNullsLast;
        return this;
    }
    
    /**
     * A year that the committee was active\u2014 (after original registration date     or filing but before expiration date)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=year")
    public Integer[] year;

    public GetCandidateCandidateIdCommitteesRequest withYear(Integer[] year) {
        this.year = year;
        return this;
    }
    
    public GetCandidateCandidateIdCommitteesRequest(@JsonProperty("api_key") String apiKey, @JsonProperty("candidate_id") String candidateId) {
        this.apiKey = apiKey;
        this.candidateId = candidateId;
  }
}
