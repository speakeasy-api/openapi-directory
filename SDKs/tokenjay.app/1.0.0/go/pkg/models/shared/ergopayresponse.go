// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ErgoPayResponseMessageSeverityEnum string

const (
	ErgoPayResponseMessageSeverityEnumNone        ErgoPayResponseMessageSeverityEnum = "NONE"
	ErgoPayResponseMessageSeverityEnumInformation ErgoPayResponseMessageSeverityEnum = "INFORMATION"
	ErgoPayResponseMessageSeverityEnumWarning     ErgoPayResponseMessageSeverityEnum = "WARNING"
	ErgoPayResponseMessageSeverityEnumError       ErgoPayResponseMessageSeverityEnum = "ERROR"
)

func (e *ErgoPayResponseMessageSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "INFORMATION":
		fallthrough
	case "WARNING":
		fallthrough
	case "ERROR":
		*e = ErgoPayResponseMessageSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErgoPayResponseMessageSeverityEnum: %s", s)
	}
}

// ErgoPayResponse - OK
type ErgoPayResponse struct {
	Address         *string
	Addresses       []string
	Message         *string
	MessageSeverity *ErgoPayResponseMessageSeverityEnum
	ReducedTx       *string
	ReducedTxList   []string
	ReplyTo         *string
}
