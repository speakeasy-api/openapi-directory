"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetVMDetailsInput = exports.TargetVMDetails = exports.TargetVMDetailsLicenseTypeEnum = exports.TargetVMDetailsDiskTypeEnum = exports.TargetVMDetailsBootOptionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var appliedlicense_1 = require("./appliedlicense");
var computescheduling_1 = require("./computescheduling");
var networkinterface_1 = require("./networkinterface");
var class_transformer_1 = require("class-transformer");
/**
 * Output only. The VM Boot Option, as set in the source vm.
 */
var TargetVMDetailsBootOptionEnum;
(function (TargetVMDetailsBootOptionEnum) {
    TargetVMDetailsBootOptionEnum["BootOptionUnspecified"] = "BOOT_OPTION_UNSPECIFIED";
    TargetVMDetailsBootOptionEnum["Efi"] = "EFI";
    TargetVMDetailsBootOptionEnum["Bios"] = "BIOS";
})(TargetVMDetailsBootOptionEnum = exports.TargetVMDetailsBootOptionEnum || (exports.TargetVMDetailsBootOptionEnum = {}));
/**
 * The disk type to use in the VM.
 */
var TargetVMDetailsDiskTypeEnum;
(function (TargetVMDetailsDiskTypeEnum) {
    TargetVMDetailsDiskTypeEnum["DiskTypeUnspecified"] = "DISK_TYPE_UNSPECIFIED";
    TargetVMDetailsDiskTypeEnum["Standard"] = "STANDARD";
    TargetVMDetailsDiskTypeEnum["Balanced"] = "BALANCED";
    TargetVMDetailsDiskTypeEnum["Ssd"] = "SSD";
})(TargetVMDetailsDiskTypeEnum = exports.TargetVMDetailsDiskTypeEnum || (exports.TargetVMDetailsDiskTypeEnum = {}));
/**
 * The license type to use in OS adaptation.
 */
var TargetVMDetailsLicenseTypeEnum;
(function (TargetVMDetailsLicenseTypeEnum) {
    TargetVMDetailsLicenseTypeEnum["Default"] = "DEFAULT";
    TargetVMDetailsLicenseTypeEnum["Payg"] = "PAYG";
    TargetVMDetailsLicenseTypeEnum["Byol"] = "BYOL";
})(TargetVMDetailsLicenseTypeEnum = exports.TargetVMDetailsLicenseTypeEnum || (exports.TargetVMDetailsLicenseTypeEnum = {}));
/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
var TargetVMDetails = /** @class */ (function (_super) {
    __extends(TargetVMDetails, _super);
    function TargetVMDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appliedLicense" }),
        (0, class_transformer_1.Type)(function () { return appliedlicense_1.AppliedLicense; }),
        __metadata("design:type", appliedlicense_1.AppliedLicense)
    ], TargetVMDetails.prototype, "appliedLicense", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bootOption" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "bootOption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "computeScheduling" }),
        (0, class_transformer_1.Type)(function () { return computescheduling_1.ComputeScheduling; }),
        __metadata("design:type", computescheduling_1.ComputeScheduling)
    ], TargetVMDetails.prototype, "computeScheduling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskType" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "diskType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIp" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "externalIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIp" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "internalIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], TargetVMDetails.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenseType" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "licenseType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineType" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "machineType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineTypeSeries" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "machineTypeSeries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", Object)
    ], TargetVMDetails.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: networkinterface_1.NetworkInterface }),
        (0, class_transformer_1.Expose)({ name: "networkInterfaces" }),
        (0, class_transformer_1.Type)(function () { return networkinterface_1.NetworkInterface; }),
        __metadata("design:type", Array)
    ], TargetVMDetails.prototype, "networkInterfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkTags" }),
        __metadata("design:type", Array)
    ], TargetVMDetails.prototype, "networkTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "project" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "project", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secureBoot" }),
        __metadata("design:type", Boolean)
    ], TargetVMDetails.prototype, "secureBoot", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccount" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "serviceAccount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetProject" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "targetProject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], TargetVMDetails.prototype, "zone", void 0);
    return TargetVMDetails;
}(utils_1.SpeakeasyBase));
exports.TargetVMDetails = TargetVMDetails;
/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 */
var TargetVMDetailsInput = /** @class */ (function (_super) {
    __extends(TargetVMDetailsInput, _super);
    function TargetVMDetailsInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "appliedLicense" }),
        (0, class_transformer_1.Type)(function () { return appliedlicense_1.AppliedLicense; }),
        __metadata("design:type", appliedlicense_1.AppliedLicense)
    ], TargetVMDetailsInput.prototype, "appliedLicense", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "computeScheduling" }),
        (0, class_transformer_1.Type)(function () { return computescheduling_1.ComputeScheduling; }),
        __metadata("design:type", computescheduling_1.ComputeScheduling)
    ], TargetVMDetailsInput.prototype, "computeScheduling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diskType" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "diskType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIp" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "externalIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIp" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "internalIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], TargetVMDetailsInput.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "licenseType" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "licenseType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineType" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "machineType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "machineTypeSeries" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "machineTypeSeries", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", Object)
    ], TargetVMDetailsInput.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: networkinterface_1.NetworkInterface }),
        (0, class_transformer_1.Expose)({ name: "networkInterfaces" }),
        (0, class_transformer_1.Type)(function () { return networkinterface_1.NetworkInterface; }),
        __metadata("design:type", Array)
    ], TargetVMDetailsInput.prototype, "networkInterfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkTags" }),
        __metadata("design:type", Array)
    ], TargetVMDetailsInput.prototype, "networkTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secureBoot" }),
        __metadata("design:type", Boolean)
    ], TargetVMDetailsInput.prototype, "secureBoot", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccount" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "serviceAccount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetProject" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "targetProject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], TargetVMDetailsInput.prototype, "zone", void 0);
    return TargetVMDetailsInput;
}(utils_1.SpeakeasyBase));
exports.TargetVMDetailsInput = TargetVMDetailsInput;
