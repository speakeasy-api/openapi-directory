"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import errorreason as shared_errorreason
from ..shared import metricinfo as shared_metricinfo
from ..shared import quotaperiod as shared_quotaperiod
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceQuota:
    r"""Information about a quota."""
    
    adjustable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Adjustable'), 'exclude': lambda f: f is None }})  
    error_reason: Optional[shared_errorreason.ErrorReason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorReason'), 'exclude': lambda f: f is None }})  
    global_quota: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalQuota'), 'exclude': lambda f: f is None }})  
    period: Optional[shared_quotaperiod.QuotaPeriod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Period'), 'exclude': lambda f: f is None }})  
    quota_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuotaArn'), 'exclude': lambda f: f is None }})  
    quota_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuotaCode'), 'exclude': lambda f: f is None }})  
    quota_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuotaName'), 'exclude': lambda f: f is None }})  
    service_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceCode'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unit'), 'exclude': lambda f: f is None }})  
    usage_metric: Optional[shared_metricinfo.MetricInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsageMetric'), 'exclude': lambda f: f is None }})  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Value'), 'exclude': lambda f: f is None }})  
    