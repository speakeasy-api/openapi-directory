/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The `keys` resource contains the access keys used to authenticate requests to this API.
 *
 * @remarks
 *
 * Note that this resource is only accessible for administrator users logged into the Brain Management Console.
 * It is not possible to access this resource using API key authentication.
 * This resource is therefore irrelevant to most applications.
 *
 */
export class Keys {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create key
   *
   * @remarks
   * Can only be used by an **administrative** user.
   */
  addKey(
    req: shared.KeyInput,
    security: operations.AddKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.KeyInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/keys";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddKeyResponse = new operations.AddKeyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseDefaultResource = utils.objectToClass(
              httpRes?.data,
              shared.ResponseDefaultResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete key
   *
   * @remarks
   * Can only be used by an **administrative** user.
   */
  deleteKey(
    req: operations.DeleteKeyRequest,
    security: operations.DeleteKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteKeyResponse =
        new operations.DeleteKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseDefaultResource = utils.objectToClass(
              httpRes?.data,
              shared.ResponseDefaultResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get key
   *
   * @remarks
   * Can only be used by an **administrative** user.
   */
  getKeyById(
    req: operations.GetKeyByIdRequest,
    security: operations.GetKeyByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetKeyByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetKeyByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetKeyByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetKeyByIdResponse =
        new operations.GetKeyByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.key = utils.objectToClass(httpRes?.data, shared.Key);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all keys
   *
   * @remarks
   * Can only be used by an **administrative** user.
   */
  getKeys(
    req: operations.GetKeysRequest,
    security: operations.GetKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/keys";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetKeysResponse = new operations.GetKeysResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getKeys200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetKeys200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update existing key
   *
   * @remarks
   * Can only be used by an **administrative** user.
   */
  updateKey(
    req: operations.UpdateKeyRequest,
    security: operations.UpdateKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/keys/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "keyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateKeySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateKeyResponse =
        new operations.UpdateKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseDefaultResource = utils.objectToClass(
              httpRes?.data,
              shared.ResponseDefaultResource
            );
          }
          break;
      }

      return res;
    });
  }
}
