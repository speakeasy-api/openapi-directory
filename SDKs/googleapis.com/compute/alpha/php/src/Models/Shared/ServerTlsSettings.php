<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ServerTlsSettings - The TLS settings for the server.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ServerTlsSettings
{
    /**
     * [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TlsContext $proxyTlsContext
     */
	#[\JMS\Serializer\Annotation\SerializedName('proxyTlsContext')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TlsContext')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TlsContext $proxyTlsContext = null;
    
    /**
     * A list of alternate names to verify the subject identity in the certificate presented by the client.
     * 
     * @var ?array<string> $subjectAltNames
     */
	#[\JMS\Serializer\Annotation\SerializedName('subjectAltNames')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $subjectAltNames = null;
    
    /**
     * Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication. 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ServerTlsSettingsTlsModeEnum $tlsMode
     */
	#[\JMS\Serializer\Annotation\SerializedName('tlsMode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ServerTlsSettingsTlsModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ServerTlsSettingsTlsModeEnum $tlsMode = null;
    
	public function __construct()
	{
		$this->proxyTlsContext = null;
		$this->subjectAltNames = null;
		$this->tlsMode = null;
	}
}
