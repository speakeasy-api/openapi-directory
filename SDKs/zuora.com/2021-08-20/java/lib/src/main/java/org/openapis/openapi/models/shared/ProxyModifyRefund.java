/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProxyModifyRefund - Container for custom fields of a Refund object.
 * 
 */
public class ProxyModifyRefund {
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyModifyRefund withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyModifyRefund withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public ProxyModifyRefund withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * **Character limit**: 32 **V****alues**: a valid reason code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReasonCode")
    public String reasonCode;
    public ProxyModifyRefund withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     *  The status of the refund.
     * **Character limit**: 10 **Values**: automatically generated:
     * 
     * - `Canceled`
     * - `Error`
     * - `Processed`
     * - `Processing`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyModifyRefund withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyModifyRefund withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public String synctoNetSuiteNS;
    public ProxyModifyRefund withSynctoNetSuiteNS(String synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     *  Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.
     * **Character limit**: 10 **Values**: automatically generated:
     * 
     * - `Processing`
     * - `Yes`
     * - `Error`
     * - `Ignore`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransferredToAccounting")
    public String transferredToAccounting;
    public ProxyModifyRefund withTransferredToAccounting(String transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
}
