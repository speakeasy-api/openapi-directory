/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Users {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Users(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmUsersIdResponse deleteRealmUsersId(org.openapis.openapi.models.operations.DeleteRealmUsersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdPathParams.class, baseUrl, "/{realm}/users/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Revoke consent and offline tokens for particular client from user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmUsersIdConsentsClientResponse deleteRealmUsersIdConsentsClient(org.openapis.openapi.models.operations.DeleteRealmUsersIdConsentsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdConsentsClientPathParams.class, baseUrl, "/{realm}/users/{id}/consents/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdConsentsClientResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdConsentsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove a credential for a user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmUsersIdCredentialsCredentialIdResponse deleteRealmUsersIdCredentialsCredentialId(org.openapis.openapi.models.operations.DeleteRealmUsersIdCredentialsCredentialIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdCredentialsCredentialIdPathParams.class, baseUrl, "/{realm}/users/{id}/credentials/{credentialId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdCredentialsCredentialIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdCredentialsCredentialIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove a social login provider from user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmUsersIdFederatedIdentityProviderResponse deleteRealmUsersIdFederatedIdentityProvider(org.openapis.openapi.models.operations.DeleteRealmUsersIdFederatedIdentityProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdFederatedIdentityProviderPathParams.class, baseUrl, "/{realm}/users/{id}/federated-identity/{provider}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdFederatedIdentityProviderResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdFederatedIdentityProviderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteRealmUsersIdGroupsGroupIdResponse deleteRealmUsersIdGroupsGroupId(org.openapis.openapi.models.operations.DeleteRealmUsersIdGroupsGroupIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmUsersIdGroupsGroupIdPathParams.class, baseUrl, "/{realm}/users/{id}/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmUsersIdGroupsGroupIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmUsersIdGroupsGroupIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get users   Returns a list of users, filtered according to query parameters
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersResponse getRealmUsers(org.openapis.openapi.models.operations.GetRealmUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersPathParams.class, baseUrl, "/{realm}/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmUsersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersResponse res = new org.openapis.openapi.models.operations.GetRealmUsersResponse() {{
            userRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserRepresentation[].class);
                res.userRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Returns the number of users that match the given criteria.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersCountResponse getRealmUsersCount(org.openapis.openapi.models.operations.GetRealmUsersCountRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersCountPathParams.class, baseUrl, "/{realm}/users/count", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmUsersCountQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersCountResponse res = new org.openapis.openapi.models.operations.GetRealmUsersCountResponse() {{
            getRealmUsersCount2XXApplicationJSONInt32Integer = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Integer out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Integer.class);
                res.getRealmUsersCount2XXApplicationJSONInt32Integer = out;
            }
        }

        return res;
    }

    /**
     * Get representation of the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdResponse getRealmUsersId(org.openapis.openapi.models.operations.GetRealmUsersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdPathParams.class, baseUrl, "/{realm}/users/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdResponse() {{
            userRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserRepresentation.class);
                res.userRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Return credential types, which are provided by the user storage where user is stored.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse getRealmUsersIdConfiguredUserStorageCredentialTypes(org.openapis.openapi.models.operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesPathParams.class, baseUrl, "/{realm}/users/{id}/configured-user-storage-credential-types", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdConfiguredUserStorageCredentialTypesResponse() {{
            getRealmUsersIdConfiguredUserStorageCredentialTypes2XXApplicationJSONStrings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.getRealmUsersIdConfiguredUserStorageCredentialTypes2XXApplicationJSONStrings = out;
            }
        }

        return res;
    }

    /**
     * Get consents granted by the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdConsentsResponse getRealmUsersIdConsents(org.openapis.openapi.models.operations.GetRealmUsersIdConsentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdConsentsPathParams.class, baseUrl, "/{realm}/users/{id}/consents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdConsentsResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdConsentsResponse() {{
            getRealmUsersIdConsents2XXApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object>[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>[]>() {});
                res.getRealmUsersIdConsents2XXApplicationJSONObjects = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRealmUsersIdCredentialsResponse getRealmUsersIdCredentials(org.openapis.openapi.models.operations.GetRealmUsersIdCredentialsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdCredentialsPathParams.class, baseUrl, "/{realm}/users/{id}/credentials", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdCredentialsResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdCredentialsResponse() {{
            credentialRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CredentialRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CredentialRepresentation[].class);
                res.credentialRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get social logins associated with the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdFederatedIdentityResponse getRealmUsersIdFederatedIdentity(org.openapis.openapi.models.operations.GetRealmUsersIdFederatedIdentityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdFederatedIdentityPathParams.class, baseUrl, "/{realm}/users/{id}/federated-identity", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdFederatedIdentityResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdFederatedIdentityResponse() {{
            federatedIdentityRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FederatedIdentityRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FederatedIdentityRepresentation[].class);
                res.federatedIdentityRepresentations = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRealmUsersIdGroupsResponse getRealmUsersIdGroups(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsPathParams.class, baseUrl, "/{realm}/users/{id}/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdGroupsResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdGroupsResponse() {{
            groupRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GroupRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GroupRepresentation[].class);
                res.groupRepresentations = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountResponse getRealmUsersIdGroupsCount(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountPathParams.class, baseUrl, "/{realm}/users/{id}/groups/count", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdGroupsCountResponse() {{
            getRealmUsersIdGroupsCount2XXApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getRealmUsersIdGroupsCount2XXApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get offline sessions associated with the user and client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdOfflineSessionsClientIdResponse getRealmUsersIdOfflineSessionsClientId(org.openapis.openapi.models.operations.GetRealmUsersIdOfflineSessionsClientIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdOfflineSessionsClientIdPathParams.class, baseUrl, "/{realm}/users/{id}/offline-sessions/{clientId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdOfflineSessionsClientIdResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdOfflineSessionsClientIdResponse() {{
            userSessionRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserSessionRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserSessionRepresentation[].class);
                res.userSessionRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get sessions associated with the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmUsersIdSessionsResponse getRealmUsersIdSessions(org.openapis.openapi.models.operations.GetRealmUsersIdSessionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmUsersIdSessionsPathParams.class, baseUrl, "/{realm}/users/{id}/sessions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmUsersIdSessionsResponse res = new org.openapis.openapi.models.operations.GetRealmUsersIdSessionsResponse() {{
            userSessionRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserSessionRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserSessionRepresentation[].class);
                res.userSessionRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Create a new user   Username must be unique.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersResponse postRealmUsers(org.openapis.openapi.models.operations.PostRealmUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersPathParams.class, baseUrl, "/{realm}/users", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersResponse res = new org.openapis.openapi.models.operations.PostRealmUsersResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Move a credential to a position behind another credential
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse postRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPathParams.class, baseUrl, "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Move a credential to a first position in the credentials list of the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse postRealmUsersIdCredentialsCredentialIdMoveToFirst(org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstPathParams.class, baseUrl, "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdCredentialsCredentialIdMoveToFirstResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add a social login provider to the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdFederatedIdentityProviderResponse postRealmUsersIdFederatedIdentityProvider(org.openapis.openapi.models.operations.PostRealmUsersIdFederatedIdentityProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdFederatedIdentityProviderPathParams.class, baseUrl, "/{realm}/users/{id}/federated-identity/{provider}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdFederatedIdentityProviderResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdFederatedIdentityProviderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Impersonate the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdImpersonationResponse postRealmUsersIdImpersonation(org.openapis.openapi.models.operations.PostRealmUsersIdImpersonationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdImpersonationPathParams.class, baseUrl, "/{realm}/users/{id}/impersonation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdImpersonationResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdImpersonationResponse() {{
            postRealmUsersIdImpersonation2XXApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.postRealmUsersIdImpersonation2XXApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmUsersIdLogoutResponse postRealmUsersIdLogout(org.openapis.openapi.models.operations.PostRealmUsersIdLogoutRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmUsersIdLogoutPathParams.class, baseUrl, "/{realm}/users/{id}/logout", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmUsersIdLogoutResponse res = new org.openapis.openapi.models.operations.PostRealmUsersIdLogoutResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update the user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdResponse putRealmUsersId(org.openapis.openapi.models.operations.PutRealmUsersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdPathParams.class, baseUrl, "/{realm}/users/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update a credential label for a user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse putRealmUsersIdCredentialsCredentialIdUserLabel(org.openapis.openapi.models.operations.PutRealmUsersIdCredentialsCredentialIdUserLabelRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdCredentialsCredentialIdUserLabelPathParams.class, baseUrl, "/{realm}/users/{id}/credentials/{credentialId}/userLabel", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "string");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdCredentialsCredentialIdUserLabelResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Disable all credentials for a user of a specific type
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdDisableCredentialTypesResponse putRealmUsersIdDisableCredentialTypes(org.openapis.openapi.models.operations.PutRealmUsersIdDisableCredentialTypesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdDisableCredentialTypesPathParams.class, baseUrl, "/{realm}/users/{id}/disable-credential-types", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdDisableCredentialTypesResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdDisableCredentialTypesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailResponse putRealmUsersIdExecuteActionsEmail(org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailPathParams.class, baseUrl, "/{realm}/users/{id}/execute-actions-email", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdExecuteActionsEmailResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.PutRealmUsersIdGroupsGroupIdResponse putRealmUsersIdGroupsGroupId(org.openapis.openapi.models.operations.PutRealmUsersIdGroupsGroupIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdGroupsGroupIdPathParams.class, baseUrl, "/{realm}/users/{id}/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdGroupsGroupIdResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdGroupsGroupIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Set up a new password for the user.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdResetPasswordResponse putRealmUsersIdResetPassword(org.openapis.openapi.models.operations.PutRealmUsersIdResetPasswordRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdResetPasswordPathParams.class, baseUrl, "/{realm}/users/{id}/reset-password", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdResetPasswordResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdResetPasswordResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailResponse putRealmUsersIdSendVerifyEmail(org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailPathParams.class, baseUrl, "/{realm}/users/{id}/send-verify-email", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailResponse res = new org.openapis.openapi.models.operations.PutRealmUsersIdSendVerifyEmailResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }
}