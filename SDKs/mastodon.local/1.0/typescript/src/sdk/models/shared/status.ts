/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Account } from "./account";
import { Application } from "./application";
import { Attachment } from "./attachment";
import { Card } from "./card";
import { Emoji } from "./emoji";
import { Mention } from "./mention";
import { Poll } from "./poll";
import { Tag } from "./tag";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Visibility of this status.
 */
export enum StatusVisibilityEnum {
  Public = "public",
  Unlisted = "unlisted",
  Private = "private",
  Direct = "direct",
}

/**
 * Represents a status posted by an account.
 *
 * @see {@link https://docs.joinmastodon.org/entities/status/}
 */
export class Status extends SpeakeasyBase {
  /**
   * Represents a user of Mastodon and their associated profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => Account)
  account?: Account;

  /**
   * Represents an application that interfaces with the REST API to access accounts or post statuses.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "application" })
  @Type(() => Application)
  application?: Application;

  /**
   * Have you bookmarked this status?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bookmarked" })
  bookmarked?: boolean;

  /**
   * Represents a rich preview card that is generated using OpenGraph tags from a URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card" })
  @Type(() => Card)
  card?: Card;

  /**
   * HTML-encoded status content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * The date when this status was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Custom emoji to be used when rendering status content.
   */
  @SpeakeasyMetadata({ elemType: Emoji })
  @Expose({ name: "emojis" })
  @Type(() => Emoji)
  emojis?: Emoji[];

  /**
   * Have you favourited this status?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "favourited" })
  favourited?: boolean;

  /**
   * How many favourites this status has received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "favourites_count" })
  favouritesCount?: number;

  /**
   * ID of the status in the database. Cast from an integer but not guaranteed to be a number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * ID of the account being replied to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_reply_to_account_id" })
  inReplyToAccountId?: string;

  /**
   * ID of the status being replied. Cast from an integer but not guaranteed to be a number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_reply_to_id" })
  inReplyToId?: string;

  /**
   * Primary language of this status. ISO 639 Part 1 two-letter language code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * Media that is attached to this status.
   */
  @SpeakeasyMetadata({ elemType: Attachment })
  @Expose({ name: "media_attachments" })
  @Type(() => Attachment)
  mediaAttachments?: Attachment[];

  /**
   * Mentions of users within the status content.
   */
  @SpeakeasyMetadata({ elemType: Mention })
  @Expose({ name: "mentions" })
  @Type(() => Mention)
  mentions?: Mention[];

  /**
   * Have you muted notifications for this status's conversation?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "muted" })
  muted?: boolean;

  /**
   * Have you pinned this status? Only appears if the status is pinnable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pinned" })
  pinned?: boolean;

  /**
   * Represents a poll attached to a status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "poll" })
  @Type(() => Poll)
  poll?: Poll;

  /**
   * Represents a status posted by an account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reblog" })
  @Type(() => Status)
  reblog?: Status;

  /**
   * Have you boosted this status?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reblogged" })
  reblogged?: boolean;

  /**
   * How many boosts this status has received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reblogs_count" })
  reblogsCount?: number;

  /**
   * How many replies this status has received.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replies_count" })
  repliesCount?: number;

  /**
   * Is this status marked as sensitive content?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sensitive" })
  sensitive?: boolean;

  /**
   * Subject or summary line, below which status content is collapsed until expanded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spoiler_text" })
  spoilerText?: string;

  /**
   * Hashtags used within the status content.
   */
  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "tags" })
  @Type(() => Tag)
  tags?: Tag[];

  /**
   * Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * URI of the status used for federation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;

  /**
   * A link to the status's HTML representation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * Visibility of this status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: StatusVisibilityEnum;
}
