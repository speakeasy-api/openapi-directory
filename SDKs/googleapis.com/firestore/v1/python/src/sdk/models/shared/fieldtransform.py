"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arrayvalue as shared_arrayvalue
from ..shared import value as shared_value
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FieldTransformSetToServerValueEnum(str, Enum):
    r"""Sets the field to the given server value."""
    SERVER_VALUE_UNSPECIFIED = 'SERVER_VALUE_UNSPECIFIED'
    REQUEST_TIME = 'REQUEST_TIME'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldTransform:
    r"""A transformation of a field of the document."""
    
    append_missing_elements: Optional[shared_arrayvalue.ArrayValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appendMissingElements'), 'exclude': lambda f: f is None }})
    r"""An array value."""  
    field_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldPath'), 'exclude': lambda f: f is None }})
    r"""The path of the field. See Document.fields for the field path syntax reference."""  
    increment: Optional[shared_value.Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('increment'), 'exclude': lambda f: f is None }})
    r"""A message that can hold any of the supported value types."""  
    maximum: Optional[shared_value.Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximum'), 'exclude': lambda f: f is None }})
    r"""A message that can hold any of the supported value types."""  
    minimum: Optional[shared_value.Value] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum'), 'exclude': lambda f: f is None }})
    r"""A message that can hold any of the supported value types."""  
    remove_all_from_array: Optional[shared_arrayvalue.ArrayValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeAllFromArray'), 'exclude': lambda f: f is None }})
    r"""An array value."""  
    set_to_server_value: Optional[FieldTransformSetToServerValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setToServerValue'), 'exclude': lambda f: f is None }})
    r"""Sets the field to the given server value."""  
    