// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CounterMetadataKindEnum - Counter aggregation kind.
type CounterMetadataKindEnum string

const (
	CounterMetadataKindEnumInvalid      CounterMetadataKindEnum = "INVALID"
	CounterMetadataKindEnumSum          CounterMetadataKindEnum = "SUM"
	CounterMetadataKindEnumMax          CounterMetadataKindEnum = "MAX"
	CounterMetadataKindEnumMin          CounterMetadataKindEnum = "MIN"
	CounterMetadataKindEnumMean         CounterMetadataKindEnum = "MEAN"
	CounterMetadataKindEnumOr           CounterMetadataKindEnum = "OR"
	CounterMetadataKindEnumAnd          CounterMetadataKindEnum = "AND"
	CounterMetadataKindEnumSet          CounterMetadataKindEnum = "SET"
	CounterMetadataKindEnumDistribution CounterMetadataKindEnum = "DISTRIBUTION"
	CounterMetadataKindEnumLatestValue  CounterMetadataKindEnum = "LATEST_VALUE"
)

func (e CounterMetadataKindEnum) ToPointer() *CounterMetadataKindEnum {
	return &e
}

func (e *CounterMetadataKindEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVALID":
		fallthrough
	case "SUM":
		fallthrough
	case "MAX":
		fallthrough
	case "MIN":
		fallthrough
	case "MEAN":
		fallthrough
	case "OR":
		fallthrough
	case "AND":
		fallthrough
	case "SET":
		fallthrough
	case "DISTRIBUTION":
		fallthrough
	case "LATEST_VALUE":
		*e = CounterMetadataKindEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CounterMetadataKindEnum: %v", v)
	}
}

// CounterMetadataStandardUnitsEnum - System defined Units, see above enum.
type CounterMetadataStandardUnitsEnum string

const (
	CounterMetadataStandardUnitsEnumBytes         CounterMetadataStandardUnitsEnum = "BYTES"
	CounterMetadataStandardUnitsEnumBytesPerSec   CounterMetadataStandardUnitsEnum = "BYTES_PER_SEC"
	CounterMetadataStandardUnitsEnumMilliseconds  CounterMetadataStandardUnitsEnum = "MILLISECONDS"
	CounterMetadataStandardUnitsEnumMicroseconds  CounterMetadataStandardUnitsEnum = "MICROSECONDS"
	CounterMetadataStandardUnitsEnumNanoseconds   CounterMetadataStandardUnitsEnum = "NANOSECONDS"
	CounterMetadataStandardUnitsEnumTimestampMsec CounterMetadataStandardUnitsEnum = "TIMESTAMP_MSEC"
	CounterMetadataStandardUnitsEnumTimestampUsec CounterMetadataStandardUnitsEnum = "TIMESTAMP_USEC"
	CounterMetadataStandardUnitsEnumTimestampNsec CounterMetadataStandardUnitsEnum = "TIMESTAMP_NSEC"
)

func (e CounterMetadataStandardUnitsEnum) ToPointer() *CounterMetadataStandardUnitsEnum {
	return &e
}

func (e *CounterMetadataStandardUnitsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BYTES":
		fallthrough
	case "BYTES_PER_SEC":
		fallthrough
	case "MILLISECONDS":
		fallthrough
	case "MICROSECONDS":
		fallthrough
	case "NANOSECONDS":
		fallthrough
	case "TIMESTAMP_MSEC":
		fallthrough
	case "TIMESTAMP_USEC":
		fallthrough
	case "TIMESTAMP_NSEC":
		*e = CounterMetadataStandardUnitsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CounterMetadataStandardUnitsEnum: %v", v)
	}
}

// CounterMetadata - CounterMetadata includes all static non-name non-value counter attributes.
type CounterMetadata struct {
	// Human-readable description of the counter semantics.
	Description *string `json:"description,omitempty"`
	// Counter aggregation kind.
	Kind *CounterMetadataKindEnum `json:"kind,omitempty"`
	// A string referring to the unit type.
	OtherUnits *string `json:"otherUnits,omitempty"`
	// System defined Units, see above enum.
	StandardUnits *CounterMetadataStandardUnitsEnum `json:"standardUnits,omitempty"`
}
