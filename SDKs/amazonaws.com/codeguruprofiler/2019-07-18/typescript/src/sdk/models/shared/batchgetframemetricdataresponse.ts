/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AggregationPeriodEnum } from "./aggregationperiodenum";
import { FrameMetricDatum } from "./framemetricdatum";
import { TimestampStructure } from "./timestampstructure";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The structure representing the BatchGetFrameMetricDataResponse.
 */
export class BatchGetFrameMetricDataResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime: Date;

  @SpeakeasyMetadata({ elemType: TimestampStructure })
  @Expose({ name: "endTimes" })
  @Type(() => TimestampStructure)
  endTimes: TimestampStructure[];

  @SpeakeasyMetadata({ elemType: FrameMetricDatum })
  @Expose({ name: "frameMetricData" })
  @Type(() => FrameMetricDatum)
  frameMetricData: FrameMetricDatum[];

  @SpeakeasyMetadata()
  @Expose({ name: "resolution" })
  resolution: AggregationPeriodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime: Date;

  @SpeakeasyMetadata({ elemType: TimestampStructure, elemDepth: 2 })
  @Expose({ name: "unprocessedEndTimes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TimestampStructure[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TimestampStructure);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  unprocessedEndTimes: Record<string, TimestampStructure[]>;
}
