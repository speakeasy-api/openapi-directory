"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V3StopAccessibilityWheelchair:
    
    accessible_ramp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessible_ramp'), 'exclude': lambda f: f is None }})  
    low_ticket_counter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('low_ticket_counter'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one low ticket counter at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)"""  
    manouvering: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manouvering'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is a space for mobility device to board on or off a transport mode"""  
    parking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parking'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one accessible parking spot at the stop that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)"""  
    raised_platform: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raised_platform'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is a raised platform to board a train"""  
    raised_platform_shelther: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raised_platform_shelther'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is shelter near the raised platform"""  
    ramp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ramp'), 'exclude': lambda f: f is None }})
    r"""Indicates if there are ramps (&lt;1:14) at the stop/platform"""  
    secondary_path: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_path'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is a path beyond the stop which is accessible"""  
    steep_ramp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steep_ramp'), 'exclude': lambda f: f is None }})
    r"""Indicates if there are ramps (&gt;1:14) at the stop/platform"""  
    telephone: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telephone'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one accessible telephone at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)"""  
    toilet: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('toilet'), 'exclude': lambda f: f is None }})
    r"""Indicates if there is at least one accessible toilet at the stop/platform that complies with the Disability Standards for Accessible Public Transport under the Disability Discrimination Act (1992)"""  
    