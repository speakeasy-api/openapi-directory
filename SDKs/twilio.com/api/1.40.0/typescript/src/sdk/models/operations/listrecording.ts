/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListRecordingServerList = ["https://api.twilio.com"] as const;

export class ListRecordingSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListRecordingRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  /**
   * The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=CallSid",
  })
  callSid?: string;

  /**
   * The Conference SID that identifies the conference associated with the recording to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ConferenceSid",
  })
  conferenceSid?: string;

  /**
   * Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateCreated?: Date;

  /**
   * Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated<;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateCreatedLessThan?: Date;

  /**
   * Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DateCreated>;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  dateCreatedGreaterThan?: Date;

  /**
   * A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=IncludeSoftDeleted",
  })
  includeSoftDeleted?: boolean;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;
}

/**
 * OK
 */
export class ListRecordingListRecordingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  end?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "first_page_uri" })
  firstPageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_uri" })
  nextPageUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_uri" })
  previousPageUri?: string;

  @SpeakeasyMetadata({ elemType: shared.ApiV2010AccountRecording })
  @Expose({ name: "recordings" })
  @Type(() => shared.ApiV2010AccountRecording)
  recordings?: shared.ApiV2010AccountRecording[];

  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  start?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

export class ListRecordingResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listRecordingResponse?: ListRecordingListRecordingResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
