"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import assetmodelcompositemodeldefinition as shared_assetmodelcompositemodeldefinition
from ..shared import assetmodelhierarchydefinition as shared_assetmodelhierarchydefinition
from ..shared import assetmodelpropertydefinition as shared_assetmodelpropertydefinition
from ..shared import createassetmodelresponse as shared_createassetmodelresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAssetModelRequestBody:
    
    asset_model_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelName') }})
    r"""A unique, friendly name for the asset model."""  
    asset_model_composite_models: Optional[list[shared_assetmodelcompositemodeldefinition.AssetModelCompositeModelDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelCompositeModels'), 'exclude': lambda f: f is None }})
    r"""The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. Use composite asset models to define alarms on this asset model."""  
    asset_model_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelDescription'), 'exclude': lambda f: f is None }})
    r"""A description for the asset model."""  
    asset_model_hierarchies: Optional[list[shared_assetmodelhierarchydefinition.AssetModelHierarchyDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelHierarchies'), 'exclude': lambda f: f is None }})
    r"""<p>The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html\\">Asset hierarchies</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 10 hierarchies per asset model. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>"""  
    asset_model_properties: Optional[list[shared_assetmodelpropertydefinition.AssetModelPropertyDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelProperties'), 'exclude': lambda f: f is None }})
    r"""<p>The property definitions of the asset model. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html\\">Asset properties</a> in the <i>IoT SiteWise User Guide</i>.</p> <p>You can specify up to 200 properties per asset model. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html\\">Quotas</a> in the <i>IoT SiteWise User Guide</i>.</p>"""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of key-value pairs that contain metadata for the asset model. For more information, see <a href=\\"https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html\\">Tagging your IoT SiteWise resources</a> in the <i>IoT SiteWise User Guide</i>."""  
    

@dataclasses.dataclass
class CreateAssetModelRequest:
    
    request_body: CreateAssetModelRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateAssetModelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflicting_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictingOperationException"""  
    create_asset_model_response: Optional[shared_createassetmodelresponse.CreateAssetModelResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    