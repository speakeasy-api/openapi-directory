/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetNetworkClient200ApplicationJSON - Successful operation
 */
public class GetNetworkClient200ApplicationJSON {
    /**
     * The Cisco discover protocol settings for the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cdp")
    public String[][] cdp;
    public GetNetworkClient200ApplicationJSON withCdp(String[][] cdp) {
        this.cdp = cdp;
        return this;
    }
    
    /**
     * VPN connections associated with the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientVpnConnections")
    public GetNetworkClient200ApplicationJSONClientVpnConnections[] clientVpnConnections;
    public GetNetworkClient200ApplicationJSON withClientVpnConnections(GetNetworkClient200ApplicationJSONClientVpnConnections[] clientVpnConnections) {
        this.clientVpnConnections = clientVpnConnections;
        return this;
    }
    
    /**
     * Short description of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public GetNetworkClient200ApplicationJSON withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Timestamp client was first seen in the network
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstSeen")
    public Long firstSeen;
    public GetNetworkClient200ApplicationJSON withFirstSeen(Long firstSeen) {
        this.firstSeen = firstSeen;
        return this;
    }
    
    /**
     * The ID of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GetNetworkClient200ApplicationJSON withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The IP address of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    public String ip;
    public GetNetworkClient200ApplicationJSON withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * The IPv6 address of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip6")
    public String ip6;
    public GetNetworkClient200ApplicationJSON withIp6(String ip6) {
        this.ip6 = ip6;
        return this;
    }
    
    /**
     * Timestamp client was last seen in the network
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastSeen")
    public Long lastSeen;
    public GetNetworkClient200ApplicationJSON withLastSeen(Long lastSeen) {
        this.lastSeen = lastSeen;
        return this;
    }
    
    /**
     * The link layer discover protocol settings for the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lldp")
    public String[][] lldp;
    public GetNetworkClient200ApplicationJSON withLldp(String[][] lldp) {
        this.lldp = lldp;
        return this;
    }
    
    /**
     * The MAC address of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mac")
    public String mac;
    public GetNetworkClient200ApplicationJSON withMac(String mac) {
        this.mac = mac;
        return this;
    }
    
    /**
     * Manufacturer of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer")
    public String manufacturer;
    public GetNetworkClient200ApplicationJSON withManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }
    
    /**
     * The operating system of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os")
    public String os;
    public GetNetworkClient200ApplicationJSON withOs(String os) {
        this.os = os;
        return this;
    }
    
    /**
     * The MAC address of the node that the device was last connected to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recentDeviceMac")
    public String recentDeviceMac;
    public GetNetworkClient200ApplicationJSON withRecentDeviceMac(String recentDeviceMac) {
        this.recentDeviceMac = recentDeviceMac;
        return this;
    }
    
    /**
     * Status of SM for the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smInstalled")
    public Boolean smInstalled;
    public GetNetworkClient200ApplicationJSON withSmInstalled(Boolean smInstalled) {
        this.smInstalled = smInstalled;
        return this;
    }
    
    /**
     * The name of the SSID that the client is connected to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssid")
    public String ssid;
    public GetNetworkClient200ApplicationJSON withSsid(String ssid) {
        this.ssid = ssid;
        return this;
    }
    
    /**
     * The connection status of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GetNetworkClient200ApplicationJSONStatusEnum status;
    public GetNetworkClient200ApplicationJSON withStatus(GetNetworkClient200ApplicationJSONStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The switch port that the client is connected to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("switchport")
    public String switchport;
    public GetNetworkClient200ApplicationJSON withSwitchport(String switchport) {
        this.switchport = switchport;
        return this;
    }
    
    /**
     * The username of the user of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;
    public GetNetworkClient200ApplicationJSON withUser(String user) {
        this.user = user;
        return this;
    }
    
    /**
     * The name of the VLAN that the client is connected to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlan")
    public String vlan;
    public GetNetworkClient200ApplicationJSON withVlan(String vlan) {
        this.vlan = vlan;
        return this;
    }
    
    /**
     * Wireless capabilities of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wirelessCapabilities")
    public String wirelessCapabilities;
    public GetNetworkClient200ApplicationJSON withWirelessCapabilities(String wirelessCapabilities) {
        this.wirelessCapabilities = wirelessCapabilities;
        return this;
    }
    
}
