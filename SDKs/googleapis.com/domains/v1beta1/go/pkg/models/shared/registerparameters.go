// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RegisterParametersAvailabilityEnum - Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`.
type RegisterParametersAvailabilityEnum string

const (
	RegisterParametersAvailabilityEnumAvailabilityUnspecified RegisterParametersAvailabilityEnum = "AVAILABILITY_UNSPECIFIED"
	RegisterParametersAvailabilityEnumAvailable               RegisterParametersAvailabilityEnum = "AVAILABLE"
	RegisterParametersAvailabilityEnumUnavailable             RegisterParametersAvailabilityEnum = "UNAVAILABLE"
	RegisterParametersAvailabilityEnumUnsupported             RegisterParametersAvailabilityEnum = "UNSUPPORTED"
	RegisterParametersAvailabilityEnumUnknown                 RegisterParametersAvailabilityEnum = "UNKNOWN"
)

func (e RegisterParametersAvailabilityEnum) ToPointer() *RegisterParametersAvailabilityEnum {
	return &e
}

func (e *RegisterParametersAvailabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AVAILABILITY_UNSPECIFIED":
		fallthrough
	case "AVAILABLE":
		fallthrough
	case "UNAVAILABLE":
		fallthrough
	case "UNSUPPORTED":
		fallthrough
	case "UNKNOWN":
		*e = RegisterParametersAvailabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterParametersAvailabilityEnum: %v", v)
	}
}

type RegisterParametersDomainNoticesEnum string

const (
	RegisterParametersDomainNoticesEnumDomainNoticeUnspecified RegisterParametersDomainNoticesEnum = "DOMAIN_NOTICE_UNSPECIFIED"
	RegisterParametersDomainNoticesEnumHstsPreloaded           RegisterParametersDomainNoticesEnum = "HSTS_PRELOADED"
)

func (e RegisterParametersDomainNoticesEnum) ToPointer() *RegisterParametersDomainNoticesEnum {
	return &e
}

func (e *RegisterParametersDomainNoticesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOMAIN_NOTICE_UNSPECIFIED":
		fallthrough
	case "HSTS_PRELOADED":
		*e = RegisterParametersDomainNoticesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterParametersDomainNoticesEnum: %v", v)
	}
}

type RegisterParametersSupportedPrivacyEnum string

const (
	RegisterParametersSupportedPrivacyEnumContactPrivacyUnspecified RegisterParametersSupportedPrivacyEnum = "CONTACT_PRIVACY_UNSPECIFIED"
	RegisterParametersSupportedPrivacyEnumPublicContactData         RegisterParametersSupportedPrivacyEnum = "PUBLIC_CONTACT_DATA"
	RegisterParametersSupportedPrivacyEnumPrivateContactData        RegisterParametersSupportedPrivacyEnum = "PRIVATE_CONTACT_DATA"
	RegisterParametersSupportedPrivacyEnumRedactedContactData       RegisterParametersSupportedPrivacyEnum = "REDACTED_CONTACT_DATA"
)

func (e RegisterParametersSupportedPrivacyEnum) ToPointer() *RegisterParametersSupportedPrivacyEnum {
	return &e
}

func (e *RegisterParametersSupportedPrivacyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONTACT_PRIVACY_UNSPECIFIED":
		fallthrough
	case "PUBLIC_CONTACT_DATA":
		fallthrough
	case "PRIVATE_CONTACT_DATA":
		fallthrough
	case "REDACTED_CONTACT_DATA":
		*e = RegisterParametersSupportedPrivacyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterParametersSupportedPrivacyEnum: %v", v)
	}
}

// RegisterParameters - Parameters required to register a new domain.
type RegisterParameters struct {
	// Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`.
	Availability *RegisterParametersAvailabilityEnum `json:"availability,omitempty"`
	// The domain name. Unicode domain names are expressed in Punycode format.
	DomainName *string `json:"domainName,omitempty"`
	// Notices about special properties of the domain.
	DomainNotices []RegisterParametersDomainNoticesEnum `json:"domainNotices,omitempty"`
	// Contact privacy options that the domain supports.
	SupportedPrivacy []RegisterParametersSupportedPrivacyEnum `json:"supportedPrivacy,omitempty"`
	// Represents an amount of money with its currency type.
	YearlyPrice *Money `json:"yearlyPrice,omitempty"`
}
