// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionConfigurationDefaultsInput struct {
	ID      *string       `json:"id,omitempty"`
	Options []interface{} `json:"options,omitempty"`
	Value   interface{}   `json:"value,omitempty"`
}

type ConnectionConfigurationInput struct {
	Defaults []ConnectionConfigurationDefaultsInput `json:"defaults,omitempty"`
	Resource *string                                `json:"resource,omitempty"`
}

// ConnectionInput - Fields that need to be updated on the resource
type ConnectionInput struct {
	Configuration []ConnectionConfigurationInput `json:"configuration,omitempty"`
	// Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
	Enabled *bool `json:"enabled,omitempty"`
	// Attach your own consumer specific metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Connection settings. Values will persist to `form_fields` with corresponding id
	Settings map[string]interface{} `json:"settings,omitempty"`
}

type ConnectionConfigurationDefaultsTargetEnum string

const (
	ConnectionConfigurationDefaultsTargetEnumCustomFields ConnectionConfigurationDefaultsTargetEnum = "custom_fields"
	ConnectionConfigurationDefaultsTargetEnumResource     ConnectionConfigurationDefaultsTargetEnum = "resource"
)

func (e *ConnectionConfigurationDefaultsTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom_fields":
		fallthrough
	case "resource":
		*e = ConnectionConfigurationDefaultsTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionConfigurationDefaultsTargetEnum: %s", s)
	}
}

type ConnectionConfigurationDefaults struct {
	ID      *string                                    `json:"id,omitempty"`
	Options []interface{}                              `json:"options,omitempty"`
	Target  *ConnectionConfigurationDefaultsTargetEnum `json:"target,omitempty"`
	Value   interface{}                                `json:"value,omitempty"`
}

type ConnectionConfiguration struct {
	Defaults []ConnectionConfigurationDefaults `json:"defaults,omitempty"`
	Resource *string                           `json:"resource,omitempty"`
}

// ConnectionStatusEnum - Status of the connection.
type ConnectionStatusEnum string

const (
	ConnectionStatusEnumLive      ConnectionStatusEnum = "live"
	ConnectionStatusEnumUpcoming  ConnectionStatusEnum = "upcoming"
	ConnectionStatusEnumRequested ConnectionStatusEnum = "requested"
)

func (e *ConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "live":
		fallthrough
	case "upcoming":
		fallthrough
	case "requested":
		*e = ConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionStatusEnum: %s", s)
	}
}

type Connection struct {
	// Type of authorization used by the connector
	AuthType *AuthTypeEnum `json:"auth_type,omitempty"`
	// The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
	AuthorizeURL          *string                   `json:"authorize_url,omitempty"`
	ConfigurableResources []string                  `json:"configurable_resources,omitempty"`
	Configuration         []ConnectionConfiguration `json:"configuration,omitempty"`
	CreatedAt             *float64                  `json:"created_at,omitempty"`
	// Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
	Enabled *bool `json:"enabled,omitempty"`
	// The settings that are wanted to create a connection.
	FormFields []FormField `json:"form_fields,omitempty"`
	// Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).
	HasGuide *bool `json:"has_guide,omitempty"`
	// A visual icon of the connection, that will be shown in the Vault
	Icon *string `json:"icon,omitempty"`
	// The unique identifier of the connection.
	ID *string `json:"id,omitempty"`
	// The current state of the Integration.
	IntegrationState *IntegrationStateEnum `json:"integration_state,omitempty"`
	// The logo of the connection, that will be shown in the Vault
	Logo *string `json:"logo,omitempty"`
	// Attach your own consumer specific metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The name of the connection
	Name *string `json:"name,omitempty"`
	// OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
	OauthGrantType          *OAuthGrantTypeEnum `json:"oauth_grant_type,omitempty"`
	ResourceSchemaSupport   []string            `json:"resource_schema_support,omitempty"`
	ResourceSettingsSupport []string            `json:"resource_settings_support,omitempty"`
	// The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI.
	RevokeURL *string `json:"revoke_url,omitempty"`
	// The ID of the service this connection belongs to.
	ServiceID *string `json:"service_id,omitempty"`
	// Connection settings. Values will persist to `form_fields` with corresponding id
	Settings map[string]interface{} `json:"settings,omitempty"`
	// List of settings that are required to be configured on integration before authorization can occur
	SettingsRequiredForAuthorization []string `json:"settings_required_for_authorization,omitempty"`
	// [Connection state flow](#section/Connection-state)
	State *ConnectionStateEnum `json:"state,omitempty"`
	// Status of the connection.
	Status        *ConnectionStatusEnum `json:"status,omitempty"`
	Subscriptions []WebhookSubscription `json:"subscriptions,omitempty"`
	TagLine       *string               `json:"tag_line,omitempty"`
	// The unified API category where the connection belongs to.
	UnifiedAPI *string  `json:"unified_api,omitempty"`
	UpdatedAt  *float64 `json:"updated_at,omitempty"`
	// The website URL of the connection
	Website *string `json:"website,omitempty"`
}
