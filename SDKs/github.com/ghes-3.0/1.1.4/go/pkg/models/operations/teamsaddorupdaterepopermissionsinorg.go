// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TeamsAddOrUpdateRepoPermissionsInOrgPathParams struct {
	Org   string `pathParam:"style=simple,explode=false,name=org"`
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	Repo  string `pathParam:"style=simple,explode=false,name=repo"`
	// team_slug parameter
	TeamSlug string `pathParam:"style=simple,explode=false,name=team_slug"`
}

// TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum - The permission to grant the team on this repository. Can be one of:
// \* `pull` - team members can pull, but not push to or administer this repository.
// \* `push` - team members can pull and push, but not administer this repository.
// \* `admin` - team members can pull, push and administer this repository.
// \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
// \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
//
// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum string

const (
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumPull     TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "pull"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumPush     TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "push"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumAdmin    TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "admin"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumMaintain TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "maintain"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumTriage   TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "triage"
)

func (e *TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		fallthrough
	case "maintain":
		fallthrough
	case "triage":
		*e = TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum: %s", s)
	}
}

type TeamsAddOrUpdateRepoPermissionsInOrgRequestBody struct {
	// The permission to grant the team on this repository. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer this repository.
	// \* `push` - team members can pull and push, but not administer this repository.
	// \* `admin` - team members can pull, push and administer this repository.
	// \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
	// \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
	//
	// If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
	Permission *TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type TeamsAddOrUpdateRepoPermissionsInOrgRequest struct {
	PathParams TeamsAddOrUpdateRepoPermissionsInOrgPathParams
	Request    *TeamsAddOrUpdateRepoPermissionsInOrgRequestBody `request:"mediaType=application/json"`
}

type TeamsAddOrUpdateRepoPermissionsInOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
