/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ApplicationUpdateParameters - Active Directive Application common properties shared among GET, POST and PATCH
 */
public class ApplicationUpdateParameters {
    /**
     * A property on the application to indicate if the application accepts other IDPs or not or partially accepts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowGuestsSignIn")
    public Boolean allowGuestsSignIn;
    public ApplicationUpdateParameters withAllowGuestsSignIn(Boolean allowGuestsSignIn) {
        this.allowGuestsSignIn = allowGuestsSignIn;
        return this;
    }
    
    /**
     * Indicates that the application supports pass through users who have no presence in the resource tenant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowPassthroughUsers")
    public Boolean allowPassthroughUsers;
    public ApplicationUpdateParameters withAllowPassthroughUsers(Boolean allowPassthroughUsers) {
        this.allowPassthroughUsers = allowPassthroughUsers;
        return this;
    }
    
    /**
     * The url for the application logo image stored in a CDN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appLogoUrl")
    public String appLogoUrl;
    public ApplicationUpdateParameters withAppLogoUrl(String appLogoUrl) {
        this.appLogoUrl = appLogoUrl;
        return this;
    }
    
    /**
     * The application permissions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appPermissions")
    public String[] appPermissions;
    public ApplicationUpdateParameters withAppPermissions(String[] appPermissions) {
        this.appPermissions = appPermissions;
        return this;
    }
    
    /**
     * The collection of application roles that an application may declare. These roles can be assigned to users, groups or service principals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appRoles")
    public AppRole[] appRoles;
    public ApplicationUpdateParameters withAppRoles(AppRole[] appRoles) {
        this.appRoles = appRoles;
        return this;
    }
    
    /**
     * Whether the application is available to other tenants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableToOtherTenants")
    public Boolean availableToOtherTenants;
    public ApplicationUpdateParameters withAvailableToOtherTenants(Boolean availableToOtherTenants) {
        this.availableToOtherTenants = availableToOtherTenants;
        return this;
    }
    
    /**
     * The display name of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public ApplicationUpdateParameters withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * A URL provided by the author of the application to report errors when using the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorUrl")
    public String errorUrl;
    public ApplicationUpdateParameters withErrorUrl(String errorUrl) {
        this.errorUrl = errorUrl;
        return this;
    }
    
    /**
     * Configures the groups claim issued in a user or OAuth 2.0 access token that the app expects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupMembershipClaims")
    public GroupMembershipClaimsEnum groupMembershipClaims;
    public ApplicationUpdateParameters withGroupMembershipClaims(GroupMembershipClaimsEnum groupMembershipClaims) {
        this.groupMembershipClaims = groupMembershipClaims;
        return this;
    }
    
    /**
     * The home page of the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homepage")
    public String homepage;
    public ApplicationUpdateParameters withHomepage(String homepage) {
        this.homepage = homepage;
        return this;
    }
    
    /**
     * A collection of URIs for the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifierUris")
    public String[] identifierUris;
    public ApplicationUpdateParameters withIdentifierUris(String[] identifierUris) {
        this.identifierUris = identifierUris;
        return this;
    }
    
    /**
     * Represents a group of URIs that provide terms of service, marketing, support and privacy policy information about an application. The default value for each string is null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("informationalUrls")
    public InformationalUrl informationalUrls;
    public ApplicationUpdateParameters withInformationalUrls(InformationalUrl informationalUrls) {
        this.informationalUrls = informationalUrls;
        return this;
    }
    
    /**
     * Specifies whether this application supports device authentication without a user. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDeviceOnlyAuthSupported")
    public Boolean isDeviceOnlyAuthSupported;
    public ApplicationUpdateParameters withIsDeviceOnlyAuthSupported(Boolean isDeviceOnlyAuthSupported) {
        this.isDeviceOnlyAuthSupported = isDeviceOnlyAuthSupported;
        return this;
    }
    
    /**
     * A collection of KeyCredential objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyCredentials")
    public java.util.Map<String, java.util.Map<String, Object>>[] keyCredentials;
    public ApplicationUpdateParameters withKeyCredentials(java.util.Map<String, java.util.Map<String, Object>>[] keyCredentials) {
        this.keyCredentials = keyCredentials;
        return this;
    }
    
    /**
     * Client applications that are tied to this resource application. Consent to any of the known client applications will result in implicit consent to the resource application through a combined consent dialog (showing the OAuth permission scopes required by the client and the resource).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("knownClientApplications")
    public String[] knownClientApplications;
    public ApplicationUpdateParameters withKnownClientApplications(String[] knownClientApplications) {
        this.knownClientApplications = knownClientApplications;
        return this;
    }
    
    /**
     * the url of the logout page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoutUrl")
    public String logoutUrl;
    public ApplicationUpdateParameters withLogoutUrl(String logoutUrl) {
        this.logoutUrl = logoutUrl;
        return this;
    }
    
    /**
     * Whether to allow implicit grant flow for OAuth2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2AllowImplicitFlow")
    public Boolean oauth2AllowImplicitFlow;
    public ApplicationUpdateParameters withOauth2AllowImplicitFlow(Boolean oauth2AllowImplicitFlow) {
        this.oauth2AllowImplicitFlow = oauth2AllowImplicitFlow;
        return this;
    }
    
    /**
     * Specifies whether during a token Request Azure AD will allow path matching of the redirect URI against the applications collection of replyURLs. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2AllowUrlPathMatching")
    public Boolean oauth2AllowUrlPathMatching;
    public ApplicationUpdateParameters withOauth2AllowUrlPathMatching(Boolean oauth2AllowUrlPathMatching) {
        this.oauth2AllowUrlPathMatching = oauth2AllowUrlPathMatching;
        return this;
    }
    
    /**
     * The collection of OAuth 2.0 permission scopes that the web API (resource) application exposes to client applications. These permission scopes may be granted to client applications during consent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2Permissions")
    public OAuth2Permission[] oauth2Permissions;
    public ApplicationUpdateParameters withOauth2Permissions(OAuth2Permission[] oauth2Permissions) {
        this.oauth2Permissions = oauth2Permissions;
        return this;
    }
    
    /**
     * Specifies whether, as part of OAuth 2.0 token requests, Azure AD will allow POST requests, as opposed to GET requests. The default is false, which specifies that only GET requests will be allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2RequirePostResponse")
    public Boolean oauth2RequirePostResponse;
    public ApplicationUpdateParameters withOauth2RequirePostResponse(Boolean oauth2RequirePostResponse) {
        this.oauth2RequirePostResponse = oauth2RequirePostResponse;
        return this;
    }
    
    /**
     * Specifying the claims to be included in the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optionalClaims")
    public OptionalClaims optionalClaims;
    public ApplicationUpdateParameters withOptionalClaims(OptionalClaims optionalClaims) {
        this.optionalClaims = optionalClaims;
        return this;
    }
    
    /**
     * A list of tenants allowed to access application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orgRestrictions")
    public String[] orgRestrictions;
    public ApplicationUpdateParameters withOrgRestrictions(String[] orgRestrictions) {
        this.orgRestrictions = orgRestrictions;
        return this;
    }
    
    /**
     * A collection of PasswordCredential objects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordCredentials")
    public java.util.Map<String, java.util.Map<String, Object>>[] passwordCredentials;
    public ApplicationUpdateParameters withPasswordCredentials(java.util.Map<String, java.util.Map<String, Object>>[] passwordCredentials) {
        this.passwordCredentials = passwordCredentials;
        return this;
    }
    
    /**
     * list of pre-authorized applications.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preAuthorizedApplications")
    public PreAuthorizedApplication[] preAuthorizedApplications;
    public ApplicationUpdateParameters withPreAuthorizedApplications(PreAuthorizedApplication[] preAuthorizedApplications) {
        this.preAuthorizedApplications = preAuthorizedApplications;
        return this;
    }
    
    /**
     * Specifies whether this application is a public client (such as an installed application running on a mobile device). Default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicClient")
    public Boolean publicClient;
    public ApplicationUpdateParameters withPublicClient(Boolean publicClient) {
        this.publicClient = publicClient;
        return this;
    }
    
    /**
     * Reliable domain which can be used to identify an application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherDomain")
    public String publisherDomain;
    public ApplicationUpdateParameters withPublisherDomain(String publisherDomain) {
        this.publisherDomain = publisherDomain;
        return this;
    }
    
    /**
     * A collection of reply URLs for the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replyUrls")
    public String[] replyUrls;
    public ApplicationUpdateParameters withReplyUrls(String[] replyUrls) {
        this.replyUrls = replyUrls;
        return this;
    }
    
    /**
     * Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requiredResourceAccess")
    public java.util.Map<String, java.util.Map<String, Object>>[] requiredResourceAccess;
    public ApplicationUpdateParameters withRequiredResourceAccess(java.util.Map<String, java.util.Map<String, Object>>[] requiredResourceAccess) {
        this.requiredResourceAccess = requiredResourceAccess;
        return this;
    }
    
    /**
     * The URL to the SAML metadata for the application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samlMetadataUrl")
    public String samlMetadataUrl;
    public ApplicationUpdateParameters withSamlMetadataUrl(String samlMetadataUrl) {
        this.samlMetadataUrl = samlMetadataUrl;
        return this;
    }
    
    /**
     * Audience for signing in to the application (AzureADMyOrganization, AzureADAllOrganizations, AzureADAndMicrosoftAccounts).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signInAudience")
    public String signInAudience;
    public ApplicationUpdateParameters withSignInAudience(String signInAudience) {
        this.signInAudience = signInAudience;
        return this;
    }
    
    /**
     * The primary Web page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wwwHomepage")
    public String wwwHomepage;
    public ApplicationUpdateParameters withWwwHomepage(String wwwHomepage) {
        this.wwwHomepage = wwwHomepage;
        return this;
    }
    
}
