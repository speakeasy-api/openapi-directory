// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExpenseProofAccountEnum string

const (
	ExpenseProofAccountEnumCab ExpenseProofAccountEnum = "CAB"
	ExpenseProofAccountEnumIkm ExpenseProofAccountEnum = "IKM"
	ExpenseProofAccountEnumPrk ExpenseProofAccountEnum = "PRK"
	ExpenseProofAccountEnumTxi ExpenseProofAccountEnum = "TXI"
	ExpenseProofAccountEnumVoy ExpenseProofAccountEnum = "VOY"
	ExpenseProofAccountEnumPtt ExpenseProofAccountEnum = "PTT"
	ExpenseProofAccountEnumFhr ExpenseProofAccountEnum = "FHR"
	ExpenseProofAccountEnumDiv ExpenseProofAccountEnum = "DIV"
	ExpenseProofAccountEnumRes ExpenseProofAccountEnum = "RES"
)

func (e ExpenseProofAccountEnum) ToPointer() *ExpenseProofAccountEnum {
	return &e
}

func (e *ExpenseProofAccountEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAB":
		fallthrough
	case "IKM":
		fallthrough
	case "PRK":
		fallthrough
	case "TXI":
		fallthrough
	case "VOY":
		fallthrough
	case "PTT":
		fallthrough
	case "FHR":
		fallthrough
	case "DIV":
		fallthrough
	case "RES":
		*e = ExpenseProofAccountEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseProofAccountEnum: %v", v)
	}
}

type ExpenseProofStatusEnum string

const (
	ExpenseProofStatusEnumR ExpenseProofStatusEnum = "R"
	ExpenseProofStatusEnumV ExpenseProofStatusEnum = "V"
	ExpenseProofStatusEnumW ExpenseProofStatusEnum = "W"
)

func (e ExpenseProofStatusEnum) ToPointer() *ExpenseProofStatusEnum {
	return &e
}

func (e *ExpenseProofStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "R":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = ExpenseProofStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseProofStatusEnum: %v", v)
	}
}

type ExpenseProof struct {
	Account      *ExpenseProofAccountEnum `json:"Account,omitempty"`
	ArchivalDate *string                  `json:"ArchivalDate,omitempty"`
	Author       *string                  `json:"Author,omitempty"`
	Class        []string                 `json:"Class,omitempty"`
	Code         *string                  `json:"Code,omitempty"`
	Comment      *string                  `json:"Comment,omitempty"`
	Date         *string                  `json:"Date,omitempty"`
	ExpenseDate  *string                  `json:"ExpenseDate,omitempty"`
	Extension    *string                  `json:"Extension,omitempty"`
	FolderDate   *string                  `json:"FolderDate,omitempty"`
	ID           *string                  `json:"Id,omitempty"`
	InclVAT      *float64                 `json:"InclVAT,omitempty"`
	Provider     *string                  `json:"Provider,omitempty"`
	Reason       *string                  `json:"Reason,omitempty"`
	Status       *ExpenseProofStatusEnum  `json:"Status,omitempty"`
	Title        *string                  `json:"Title,omitempty"`
	Vat          *float64                 `json:"VAT,omitempty"`
}
