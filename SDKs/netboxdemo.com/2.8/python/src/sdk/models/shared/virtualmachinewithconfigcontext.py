"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nestedcluster as shared_nestedcluster
from ..shared import nesteddevicerole as shared_nesteddevicerole
from ..shared import nestedipaddress as shared_nestedipaddress
from ..shared import nestedplatform as shared_nestedplatform
from ..shared import nestedsite as shared_nestedsite
from ..shared import nestedtenant as shared_nestedtenant
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class VirtualMachineWithConfigContextStatusLabelEnum(str, Enum):
    OFFLINE = 'Offline'
    ACTIVE = 'Active'
    PLANNED = 'Planned'
    STAGED = 'Staged'
    FAILED = 'Failed'
    DECOMMISSIONING = 'Decommissioning'

class VirtualMachineWithConfigContextStatusValueEnum(str, Enum):
    OFFLINE = 'offline'
    ACTIVE = 'active'
    PLANNED = 'planned'
    STAGED = 'staged'
    FAILED = 'failed'
    DECOMMISSIONING = 'decommissioning'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineWithConfigContextStatus:
    
    label: VirtualMachineWithConfigContextStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: VirtualMachineWithConfigContextStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineWithConfigContext:
    
    cluster: shared_nestedcluster.NestedCluster = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cluster') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    config_context: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('config_context'), 'exclude': lambda f: f is None }})  
    created: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    disk: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    local_context_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local_context_data'), 'exclude': lambda f: f is None }})  
    memory: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})  
    platform: Optional[shared_nestedplatform.NestedPlatform] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})  
    primary_ip: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip'), 'exclude': lambda f: f is None }})  
    primary_ip4: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip4'), 'exclude': lambda f: f is None }})  
    primary_ip6: Optional[shared_nestedipaddress.NestedIPAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip6'), 'exclude': lambda f: f is None }})  
    role: Optional[shared_nesteddevicerole.NestedDeviceRole] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})  
    site: Optional[shared_nestedsite.NestedSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    status: Optional[VirtualMachineWithConfigContextStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[shared_nestedtenant.NestedTenant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    vcpus: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcpus'), 'exclude': lambda f: f is None }})  
    