// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources struct {
	// Date and time resource was most recently downloaded
	AccessedAt *time.Time `json:"accessedAt,omitempty"`
	// Date and time of resource creation
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Username who originally created resource
	CreatedBy *string `json:"createdBy,omitempty"`
	// Number of resources contained in this folder. If this is a file, fileCount is null
	FileCount *int64 `json:"fileCount,omitempty"`
	// Resource hash value
	Hash *string `json:"hash,omitempty"`
	// Resource ID
	ID *int64 `json:"id,omitempty"`
	// Resource name
	Name *string `json:"name,omitempty"`
	// Full path to resource
	Path *string `json:"path,omitempty"`
	// Whether the resource can be previewed
	Previewable *bool `json:"previewable,omitempty"`
	// Size of resource in bytes
	Size *int `json:"size,omitempty"`
	// Type of resource `file` or `dir`
	Type *string `json:"type,omitempty"`
	// Date and time resource was most recently changed
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Date resource was first uploaded
	UploadDate *time.Time `json:"uploadDate,omitempty"`
}

type WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare struct {
	// Human readable description of what visitors are allowed to do with the receive folder
	AccessDescription *string `json:"accessDescription,omitempty"`
	// An object defining what a not-logged-in visitor can do with the share contents
	AccessMode *AccessMode `json:"accessMode,omitempty"`
	// List of items included in the share
	Assets []string `json:"assets,omitempty"`
	// Date and ti
	Created *time.Time `json:"created,omitempty"`
	// Whether the receive folder can be embedded within a web page
	Embed *bool `json:"embed,omitempty"`
	// Date and time when the receive folder will no longer be
	Expiration *string `json:"expiration,omitempty"`
	// Whether access to the receive folder has expired
	Expired *bool `json:"expired,omitempty"`
	// Whether files should be automatically placed in subfolders of the receive folder
	FileDropCreateFolders *bool `json:"fileDropCreateFolders,omitempty"`
	// ID of the associated form
	FormID *int64 `json:"formId,omitempty"`
	// Whether delivery receipts are enabled for this share
	HasNotification *bool `json:"hasNotification,omitempty"`
	// Whether the receive folder requires visitors to enter a password
	HasPassword *bool `json:"hasPassword,omitempty"`
	// Hash value of the receive
	Hash *string `json:"hash,omitempty"`
	// Unique ID of associated receive folder
	ID *int64 `json:"id,omitempty"`
	// Whether this share is inherited from a parent fol
	Inherited *bool `json:"inherited,omitempty"`
	// Whether visitors can acccess the receive folder without an invitation link
	IsPublic *bool `json:"isPublic,omitempty"`
	// Invitation messages sent for receive folder
	Messages []ShareMessage `json:"messages,omitempty"`
	// Date and time when the share was last changed
	Modified *time.Time `json:"modified,omitempty"`
	// Name of receiv
	Name *string `json:"name,omitempty"`
	// Hash value of the user who "owns" the receive fo
	OwnerHash *string `json:"ownerHash,omitempty"`
	// List
	Paths []string `json:"paths,omitempty"`
	// List of recipients invited  to the receive folder
	Recipients []ShareRecipient `json:"recipients,omitempty"`
	// Whether visitors must enter their email addresses to access the receive folder
	RequireEmail *bool `json:"requireEmail,omitempty"`
	// Whether invitations to the receive folder have been re-sent to recipients
	Resent *bool `json:"resent,omitempty"`
	// 1 if share is active. 0 if not.
	Status *int64 `json:"status,omitempty"`
	// Status of invitations sent for this receive folder
	TrackingStatus *string `json:"trackingStatus,omitempty"`
	// Type of share **"receive"**
	Type *string `json:"type,omitempty"`
}

type WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventData struct {
	FormDetails []map[string]interface{}                                                 `json:"formDetails,omitempty"`
	Resources   []WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataResources `json:"resources,omitempty"`
	Share       []WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventDataShare     `json:"share,omitempty"`
	// For uploads, and downloads, whether the file transferred OK. `success` means the transfer did not have errors
	TransferStatus *string `json:"transferStatus,omitempty"`
}

type WebhookActivityAttributesV2WebhookV2Details struct {
	// Account master username
	AccountName *string `json:"accountName,omitempty"`
	// Entry - retry identifier
	AttemptID *string `json:"attemptId,omitempty"`
	// Type of related activity
	Event     *string                                                        `json:"event,omitempty"`
	EventData *WebhookActivityAttributesV2WebhookV2DetailsWebhookV2EventData `json:"eventData,omitempty"`
	// Date and time event originally took place
	EventTimestamp *time.Time `json:"eventTimestamp,omitempty"`
	// IP address of related activity
	IPAddress *string `json:"ipAddress,omitempty"`
	// Type of connection used for related activity
	Protocol *string `json:"protocol,omitempty"`
	// Username logged for related activity. May refer to someone who is not a user of the account, such as a share recipient or "publ
	Username *string `json:"username,omitempty"`
}

// WebhookActivityAttributesV2EventEnum - Event type
type WebhookActivityAttributesV2EventEnum string

const (
	WebhookActivityAttributesV2EventEnumResourcesUpload       WebhookActivityAttributesV2EventEnum = "resources.upload"
	WebhookActivityAttributesV2EventEnumResourcesDownload     WebhookActivityAttributesV2EventEnum = "resources.download"
	WebhookActivityAttributesV2EventEnumResourcesDelete       WebhookActivityAttributesV2EventEnum = "resources.delete"
	WebhookActivityAttributesV2EventEnumResourcesRename       WebhookActivityAttributesV2EventEnum = "resources.rename"
	WebhookActivityAttributesV2EventEnumResourcesCopy         WebhookActivityAttributesV2EventEnum = "resources.copy"
	WebhookActivityAttributesV2EventEnumResourcesMove         WebhookActivityAttributesV2EventEnum = "resources.move"
	WebhookActivityAttributesV2EventEnumResourcesCompress     WebhookActivityAttributesV2EventEnum = "resources.compress"
	WebhookActivityAttributesV2EventEnumResourcesExtract      WebhookActivityAttributesV2EventEnum = "resources.extract"
	WebhookActivityAttributesV2EventEnumResourcesCreateFolder WebhookActivityAttributesV2EventEnum = "resources.createFolder"
	WebhookActivityAttributesV2EventEnumSharesFormSubmit      WebhookActivityAttributesV2EventEnum = "shares.formSubmit"
)

func (e *WebhookActivityAttributesV2EventEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "resources.upload":
		fallthrough
	case "resources.download":
		fallthrough
	case "resources.delete":
		fallthrough
	case "resources.rename":
		fallthrough
	case "resources.copy":
		fallthrough
	case "resources.move":
		fallthrough
	case "resources.compress":
		fallthrough
	case "resources.extract":
		fallthrough
	case "resources.createFolder":
		fallthrough
	case "shares.formSubmit":
		*e = WebhookActivityAttributesV2EventEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookActivityAttributesV2EventEnum: %s", s)
	}
}

type WebhookActivityAttributesV2 struct {
	// Unique ID of account
	AccountID *string `json:"accountId,omitempty"`
	// Event - retry identifier
	AttemptID *string `json:"attemptId,omitempty"`
	// Date and time of webhook message being generated by system
	Created *string                                      `json:"created,omitempty"`
	Details *WebhookActivityAttributesV2WebhookV2Details `json:"details,omitempty"`
	// The URL the message was sent to
	EndpointURL *string `json:"endpointUrl,omitempty"`
	// Event type
	Event *WebhookActivityAttributesV2EventEnum `json:"event,omitempty"`
	// IP Address of related activity
	IPAddress *string `json:"ipAddress,omitempty"`
	// Whether this attempt was a re-send of a previous attempt
	Resend *bool `json:"resend,omitempty"`
	// Path of resource that matched webhook
	ResourcePath *string `json:"resourcePath,omitempty"`
	// Body of web response returned by webhook listener
	Response *string `json:"response,omitempty"`
	// HTTP Status Code returned by webhook listener
	Status *int64 `json:"status,omitempty"`
	// Username of related activity
	Username *string `json:"username,omitempty"`
	// What version of webhook message is being sent `v2`
	WebhookFormat *string `json:"webhookFormat,omitempty"`
	// Unique ID of webhook configuration
	WebhookID *int64 `json:"webhookId,omitempty"`
	// Path that webhook is watching
	WebhookPath *string `json:"webhookPath,omitempty"`
}
