// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// repositories - A Git repository is a virtual storage of your project. It
// allows you to save versions of your code, which you can access
// when needed. The repo resource allows you to access public repos,
// or repos that belong to a specific workspace.
type repositories struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newRepositories(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *repositories {
	return &repositories{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// DeleteRepositoriesWorkspaceRepoSlug - Delete a repository
// Deletes the repository. This is an irreversible operation.
//
// This does not affect its forks.
func (s *repositories) DeleteRepositoriesWorkspaceRepoSlug(ctx context.Context, request operations.DeleteRepositoriesWorkspaceRepoSlugRequest, security operations.DeleteRepositoriesWorkspaceRepoSlugSecurity) (*operations.DeleteRepositoriesWorkspaceRepoSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteRepositoriesWorkspaceRepoSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// DeleteRepositoriesWorkspaceRepoSlugHooksUID - Delete a webhook for a repository
// Deletes the specified webhook subscription from the given
// repository.
func (s *repositories) DeleteRepositoriesWorkspaceRepoSlugHooksUID(ctx context.Context, request operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDRequest, security operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDSecurity) (*operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/hooks/{uid}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug - Delete an explicit group permission for a repository
// Deletes the repository group permission between the requested repository and group, if one exists.
//
// Only users with admin permission for the repository may access this resource.
//
// Example:
//
// $ curl -X DELETE https://api.bitbucket.org/2.0/repositories/atlassian_tutorial
// /geordi/permissions-config/groups/developers
//
// HTTP/1.1 204
func (s *repositories) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, request operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest, security operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity) (*operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID - Delete an explicit user permission for a repository
// Deletes the repository user permission between the requested repository and user, if one exists.
//
// Only users with admin permission for the repository may access this resource.
//
// The only authentication method for this endpoint is via app passwords.
//
// ```
// $ curl -X DELETE https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
// permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a
//
// HTTP/1.1 204
// ```
func (s *repositories) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID(ctx context.Context, request operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDRequest, security operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDSecurity) (*operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositories - List public repositories
// Returns a paginated list of all public repositories.
//
// This endpoint also supports filtering and sorting of the results. See
// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
func (s *repositories) GetRepositories(ctx context.Context, request operations.GetRepositoriesRequest, security operations.GetRepositoriesSecurity) (*operations.GetRepositoriesResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/repositories"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositories
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositories = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspace - List repositories in a workspace
// Returns a paginated list of all repositories owned by the specified
// workspace.
//
// The result can be narrowed down based on the authenticated user's role.
//
// E.g. with `?role=contributor`, only those repositories that the
// authenticated user has write access to are returned (this includes any
// repo the user is an admin on, as that implies write access).
//
// This endpoint also supports filtering and sorting of the results. See
// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
func (s *repositories) GetRepositoriesWorkspace(ctx context.Context, request operations.GetRepositoriesWorkspaceRequest, security operations.GetRepositoriesWorkspaceSecurity) (*operations.GetRepositoriesWorkspaceResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositories
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositories = out
		}
	case httpRes.StatusCode == 404:
		fallthrough
	case httpRes.StatusCode == 410:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlug - Get a repository
// Returns the object describing this repository.
func (s *repositories) GetRepositoriesWorkspaceRepoSlug(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugRequest, security operations.GetRepositoriesWorkspaceRepoSlugSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Repository = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath - List commits that modified a file
// Returns a paginated list of commits that modified the specified file.
//
// Commits are returned in reverse chronological order. This is roughly
// equivalent to the following commands:
//
//	$ git log --follow --date-order <sha> <path>
//
// By default, Bitbucket will follow renames and the path name in the
// returned entries reflects that. This can be turned off using the
// `?renames=false` query parameter.
//
// Results are returned in descending chronological order by default, and
// like most endpoints you can
// [filter and sort](/cloud/bitbucket/rest/intro/#filtering) the response to
// only provide exactly the data you want.
//
// For example, if you wanted to find commits made before 2011-05-18
// against a file named `README.rst`, but you only wanted the path and
// date, your query would look like this:
//
// ```
//
//	$ curl 'https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/filehistory/master/README.rst'\
//	  '?fields=values.next,values.path,values.commit.date&q=commit.date<=2011-05-18'
//
//	{
//	  "values": [
//	    {
//	      "commit": {
//	        "date": "2011-05-17T07:32:09+00:00"
//	      },
//	      "path": "README.rst"
//	    },
//	    {
//	      "commit": {
//	        "date": "2011-05-16T06:33:28+00:00"
//	      },
//	      "path": "README.txt"
//	    },
//	    {
//	      "commit": {
//	        "date": "2011-05-16T06:15:39+00:00"
//	      },
//	      "path": "README.txt"
//	    }
//	  ]
//	}
//
// ```
//
// In the response you can see that the file was renamed to `README.rst`
// by the commit made on 2011-05-16, and was previously named `README.txt`.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest, security operations.GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/filehistory/{commit}/{path}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedFiles
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedFiles = out
		}
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugForks - List repository forks
// Returns a paginated list of all the forks of the specified
// repository.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugForks(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugForksRequest, security operations.GetRepositoriesWorkspaceRepoSlugForksSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugForksResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/forks", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugForksResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositories
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositories = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugHooks - List webhooks for a repository
// Returns a paginated list of webhooks installed on this repository.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugHooksRequest, security operations.GetRepositoriesWorkspaceRepoSlugHooksSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/hooks", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugHooksResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedWebhookSubscriptions
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedWebhookSubscriptions = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugHooksUID - Get a webhook for a repository
// Returns the webhook with the specified id installed on the specified
// repository.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugHooksUID(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugHooksUIDRequest, security operations.GetRepositoriesWorkspaceRepoSlugHooksUIDSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugHooksUIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/hooks/{uid}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugHooksUIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WebhookSubscription = out
		}
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugOverrideSettings - Retrieve the inheritance state for repository settings
func (s *repositories) GetRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest, security operations.GetRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/override-settings", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RepositoryInheritanceState = out
		}
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups - List explicit group permissions for a repository
// Returns a paginated list of explicit group permissions for the given repository.
// This endpoint does not support BBQL features.
//
// Example:
//
// ```
// $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups
//
// HTTP/1.1 200
// Location: https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups
//
//	{
//	  "pagelen": 10,
//	  "values": [
//	    {
//	      "type": "repository_group_permission",
//	      "group": {
//	        "type": "group",
//	        "name": "Administrators",
//	        "slug": "administrators"
//	      },
//	      "permission": "admin",
//	      "links": {
//	        "self": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/
//	                   geordi/permissions-config/groups/administrators"
//	        }
//	      }
//	    },
//	    {
//	      "type": "repository_group_permission",
//	      "group": {
//	        "type": "group",
//	        "name": "Developers",
//	        "slug": "developers"
//	      },
//	      "permission": "read",
//	      "links": {
//	        "self": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/
//	                   geordi/permissions-config/groups/developers"
//	        }
//	      }
//	    }
//	  ],
//	  "page": 1,
//	  "size": 2
//	}
//
// ```
func (s *repositories) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest, security operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/groups", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositoryGroupPermissions
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositoryGroupPermissions = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug - Get an explicit group permission for a repository
// Returns the group permission for a given group slug and repository
//
// Only users with admin permission for the repository may access this resource.
//
// Permissions can be:
//
// * `admin`
// * `write`
// * `read`
// * `none`
//
// Example:
//
// ```
// $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
//
// HTTP/1.1 200
// Location:
// https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
//
//	{
//	    "type": "repository_group_permission",
//	    "group": {
//	        "type": "group",
//	        "name": "Developers",
//	        "slug": "developers"
//	    },
//	    "repository": {
//	        "type": "repository",
//	        "name": "geordi",
//	        "full_name": "atlassian_tutorial/geordi",
//	        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
//	    },
//	    "permission": "read",
//	    "links": {
//	      "self": {
//	        "href":
//	        "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers"
//	      }
//	    }
//	}
//
// ```
func (s *repositories) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest, security operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RepositoryGroupPermission = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers - List explicit user permissions for a repository
// Returns a paginated list of explicit user permissions for the given repository.
// This endpoint does not support BBQL features.
//
// Example:
//
// ```
// $ curl https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/users
//
//	{
//	  "pagelen": 10,
//	  "values": [
//	    {
//	        "type": "repository_user_permission",
//	        "user": {
//	            "type": "user",
//	            "display_name": "Colin Cameron",
//	            "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
//	            "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	        },
//	        "permission": "admin",
//	        "links": {
//	          "self": {
//	            "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
//	                     permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	          }
//	        }
//	    },
//	    {
//	      "type": "repository_user_permission",
//	      "user": {
//	        "type": "user",
//	        "display_name": "Sean Conaty",
//	        "uuid": "{504c3b62-8120-4f0c-a7bc-87800b9d6f70}",
//	        "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324c"
//	      },
//	      "permission": "write",
//	      "links": {
//	        "self": {
//	          "href": "https://api.bitbucket.org/2.0//repositories/atlassian_tutorial/geordi/
//	                   permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324c"
//	        }
//	      }
//	    }
//	  ],
//	  "page": 1,
//	  "size": 2
//	}
//
// ```
func (s *repositories) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest, security operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/users", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositoryUserPermissions
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositoryUserPermissions = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID - Get an explicit user permission for a repository
// Returns the explicit user permission for a given user and repository.
//
// Only users with admin permission for the repository may access this resource.
//
// Permissions can be:
//
// * `admin`
// * `write`
// * `read`
// * `none`
//
// Example:
//
// ```
// $ curl 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
//
//	permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
//
// HTTP/1.1 200
// Location: 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
//
//	permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
//
//	{
//	    "type": "repository_user_permission",
//	    "user": {
//	        "type": "user",
//	        "display_name": "Colin Cameron",
//	        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
//	        "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	    },
//	    "repository": {
//	        "type": "repository",
//	        "name": "geordi",
//	        "full_name": "atlassian_tutorial/geordi",
//	        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
//	    },
//	    "permission": "admin",
//	    "links": {
//	        "self": {
//	            "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
//	                     permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	        }
//	    }
//	}
//
// ```
func (s *repositories) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDRequest, security operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RepositoryUserPermission = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugSrc - Get the root directory of the main branch
// This endpoint redirects the client to the directory listing of the
// root directory on the main branch.
//
// This is equivalent to directly hitting
// [/2.0/repositories/{username}/{repo_slug}/src/{commit}/{path}](src/%7Bcommit%7D/%7Bpath%7D)
// without having to know the name or SHA1 of the repo's main branch.
//
// To create new commits, [POST to this endpoint](#post)
func (s *repositories) GetRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugSrcRequest, security operations.GetRepositoriesWorkspaceRepoSlugSrcSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/src", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugSrcResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedTreeentries
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedTreeentries = out
		}
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugSrcCommitPath - Get file or directory contents
// This endpoints is used to retrieve the contents of a single file,
// or the contents of a directory at a specified revision.
//
// #### Raw file contents
//
// When `path` points to a file, this endpoint returns the raw contents.
// The response's Content-Type is derived from the filename
// extension (not from the contents). The file contents are not processed
// and no character encoding/recoding is performed and as a result no
// character encoding is included as part of the Content-Type.
//
// The `Content-Disposition` header will be "attachment" to prevent
// browsers from running executable files.
//
// If the file is managed by LFS, then a 301 redirect pointing to
// Atlassian's media services platform is returned.
//
// The response includes an ETag that is based on the contents of the file
// and its attributes. This means that an empty `__init__.py` always
// returns the same ETag, regardless on the directory it lives in, or the
// commit it is on.
//
// #### File meta data
//
// When the request for a file path includes the query parameter
// `?format=meta`, instead of returning the file's raw contents, Bitbucket
// instead returns the JSON object describing the file's properties:
//
// ```javascript
// $ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef/tests/__init__.py?format=meta
//
//	{
//	  "links": {
//	    "self": {
//	      "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py"
//	    },
//	    "meta": {
//	      "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py?format=meta"
//	    }
//	  },
//	  "path": "tests/__init__.py",
//	  "commit": {
//	    "type": "commit",
//	    "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
//	    "links": {
//	      "self": {
//	        "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	      },
//	      "html": {
//	        "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	      }
//	    }
//	  },
//	  "attributes": [],
//	  "type": "commit_file",
//	  "size": 0
//	}
//
// ```
//
// File objects contain an `attributes` element that contains a list of
// possible modifiers. Currently defined values are:
//
//   - `link` -- indicates that the entry is a symbolic link. The contents
//     of the file represent the path the link points to.
//   - `executable` -- indicates that the file has the executable bit set.
//   - `subrepository` -- indicates that the entry points to a submodule or
//     subrepo. The contents of the file is the SHA1 of the repository
//     pointed to.
//   - `binary` -- indicates whether Bitbucket thinks the file is binary.
//
// This endpoint can provide an alternative to how a HEAD request can be
// used to check for the existence of a file, or a file's size without
// incurring the overhead of receiving its full contents.
//
// #### Directory listings
//
// When `path` points to a directory instead of a file, the response is a
// paginated list of directory and file objects in the same order as the
// underlying SCM system would return them.
//
// For example:
//
// ```javascript
// $ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef/tests
//
//	{
//	  "pagelen": 10,
//	  "values": [
//	    {
//	      "path": "tests/test_project",
//	      "type": "commit_directory",
//	      "links": {
//	        "self": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/"
//	        },
//	        "meta": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/?format=meta"
//	        }
//	      },
//	      "commit": {
//	        "type": "commit",
//	        "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
//	        "links": {
//	          "self": {
//	            "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	          },
//	          "html": {
//	            "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	          }
//	        }
//	      }
//	    },
//	    {
//	      "links": {
//	        "self": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py"
//	        },
//	        "meta": {
//	          "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/__init__.py?format=meta"
//	        }
//	      },
//	      "path": "tests/__init__.py",
//	      "commit": {
//	        "type": "commit",
//	        "hash": "eefd5ef5d3df01aed629f650959d6706d54cd335",
//	        "links": {
//	          "self": {
//	            "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/commit/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	          },
//	          "html": {
//	            "href": "https://bitbucket.org/atlassian/bbql/commits/eefd5ef5d3df01aed629f650959d6706d54cd335"
//	          }
//	        }
//	      },
//	      "attributes": [],
//	      "type": "commit_file",
//	      "size": 0
//	    }
//	  ],
//	  "page": 1,
//	  "size": 2
//	}
//
// ```
//
// When listing the contents of the repo's root directory, the use of a
// trailing slash at the end of the URL is required.
//
// The response by default is not recursive, meaning that only the direct contents of
// a path are returned. The response does not recurse down into
// subdirectories. In order to "walk" the entire directory tree, the
// client can either parse each response and follow the `self` links of each
// `commit_directory` object, or can specify a `max_depth` to recurse to.
//
// The max_depth parameter will do a breadth-first search to return the contents of the subdirectories
// up to the depth specified. Breadth-first search was chosen as it leads to the least amount of
// file system operations for git. If the `max_depth` parameter is specified to be too
// large, the call will time out and return a 555.
//
// Each returned object is either a `commit_file`, or a `commit_directory`,
// both of which contain a `path` element. This path is the absolute path
// from the root of the repository. Each object also contains a `commit`
// object which embeds the commit the file is on. Note that this is merely
// the commit that was used in the URL. It is *not* the commit that last
// modified the file.
//
// Directory objects have 2 representations. Their `self` link returns the
// paginated contents of the directory. The `meta` link on the other hand
// returns the actual `directory` object itself, e.g.:
//
// ```javascript
//
//	{
//	  "path": "tests/test_project",
//	  "type": "commit_directory",
//	  "links": {
//	    "self": {
//	      "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/"
//	    },
//	    "meta": {
//	      "href": "https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src/eefd5ef5d3df01aed629f650959d6706d54cd335/tests/test_project/?format=meta"
//	    }
//	  },
//	  "commit": { ... }
//	}
//
// ```
//
// #### Querying, filtering and sorting
//
// Like most API endpoints, this API supports the Bitbucket
// querying/filtering syntax and so you could filter a directory listing
// to only include entries that match certain criteria. For instance, to
// list all binary files over 1kb use the expression:
//
// `size > 1024 and attributes = "binary"`
//
// which after urlencoding yields the query string:
//
// `?q=size%3E1024+and+attributes%3D%22binary%22`
//
// To change the ordering of the response, use the `?sort` parameter:
//
// `.../src/eefd5ef/?sort=-size`
//
// See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more
// details.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugSrcCommitPath(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest, security operations.GetRepositoriesWorkspaceRepoSlugSrcCommitPathSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/src/{commit}/{path}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedTreeentries
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedTreeentries = out
		}
	case httpRes.StatusCode == 404:
		fallthrough
	case httpRes.StatusCode == 555:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// GetRepositoriesWorkspaceRepoSlugWatchers - List repositories watchers
// Returns a paginated list of all the watchers on the specified
// repository.
func (s *repositories) GetRepositoriesWorkspaceRepoSlugWatchers(ctx context.Context, request operations.GetRepositoriesWorkspaceRepoSlugWatchersRequest, security operations.GetRepositoriesWorkspaceRepoSlugWatchersSecurity) (*operations.GetRepositoriesWorkspaceRepoSlugWatchersResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/watchers", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetRepositoriesWorkspaceRepoSlugWatchersResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedAccounts
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedAccounts = out
		}
	}

	return res, nil
}

// GetUserPermissionsRepositories - List repository permissions for a user
// Returns an object for each repository the caller has explicit access
// to and their effective permission — the highest level of permission the
// caller has. This does not return public repositories that the user was
// not granted any specific permission in, and does not distinguish between
// explicit and implicit privileges.
//
// Permissions can be:
//
// * `admin`
// * `write`
// * `read`
//
// Example:
//
// ```
// $ curl https://api.bitbucket.org/2.0/user/permissions/repositories
//
//	{
//	  "pagelen": 10,
//	  "values": [
//	    {
//	      "type": "repository_permission",
//	      "user": {
//	        "type": "user",
//	        "nickname": "evzijst",
//	        "display_name": "Erik van Zijst",
//	        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}"
//	      },
//	      "repository": {
//	        "type": "repository",
//	        "name": "geordi",
//	        "full_name": "bitbucket/geordi",
//	        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
//	      },
//	      "permission": "admin"
//	    }
//	  ],
//	  "page": 1,
//	  "size": 1
//	}
//
// ```
//
// Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by
// repository or permission by adding the following query string
// parameters:
//
// * `q=repository.name="geordi"` or `q=permission>"read"`
// * `sort=repository.name`
//
// Note that the query parameter values need to be URL escaped so that `=`
// would become `%3D`.
func (s *repositories) GetUserPermissionsRepositories(ctx context.Context, request operations.GetUserPermissionsRepositoriesRequest, security operations.GetUserPermissionsRepositoriesSecurity) (*operations.GetUserPermissionsRepositoriesResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/user/permissions/repositories"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetUserPermissionsRepositoriesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.PaginatedRepositoryPermissions
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.PaginatedRepositoryPermissions = out
		}
	}

	return res, nil
}

// PostRepositoriesWorkspaceRepoSlug - Create a repository
// Creates a new repository.
//
// Note: In order to set the project for the newly created repository,
// pass in either the project key or the project UUID as part of the
// request body as shown in the examples below:
//
// ```
//
//	$ curl -X POST -H "Content-Type: application/json" -d '{
//	    "scm": "git",
//	    "project": {
//	        "key": "MARS"
//	    }
//	}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
//
// ```
//
// or
//
// ```
//
//	$ curl -X POST -H "Content-Type: application/json" -d '{
//	    "scm": "git",
//	    "project": {
//	        "key": "{ba516952-992a-4c2d-acbd-17d502922f96}"
//	    }
//	}' https://api.bitbucket.org/2.0/repositories/teamsinspace/hablanding
//
// ```
//
// The project must be assigned for all repositories. If the project is not provided,
// the repository is automatically assigned to the oldest project in the workspace.
//
// Note: In the examples above, the workspace ID `teamsinspace`,
// and/or the repository name `hablanding` can be replaced by UUIDs.
func (s *repositories) PostRepositoriesWorkspaceRepoSlug(ctx context.Context, request operations.PostRepositoriesWorkspaceRepoSlugRequest, security operations.PostRepositoriesWorkspaceRepoSlugSecurity) (*operations.PostRepositoriesWorkspaceRepoSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostRepositoriesWorkspaceRepoSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Repository = out
		}
	case httpRes.StatusCode == 400:
		fallthrough
	case httpRes.StatusCode == 401:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PostRepositoriesWorkspaceRepoSlugForks - Fork a repository
// Creates a new fork of the specified repository.
//
// #### Forking a repository
//
// To create a fork, specify the workspace explicitly as part of the
// request body:
//
// ```
//
//	$ curl -X POST -u jdoe https://api.bitbucket.org/2.0/repositories/atlassian/bbql/forks \
//	  -H 'Content-Type: application/json' -d '{
//	    "name": "bbql_fork",
//	    "workspace": {
//	      "slug": "atlassian"
//	    }
//	}'
//
// ```
//
// To fork a repository into the same workspace, also specify a new `name`.
//
// When you specify a value for `name`, it will also affect the `slug`.
// The `slug` is reflected in the repository URL of the new fork. It is
// derived from `name` by substituting non-ASCII characters, removes
// whitespace, and changes characters to lower case. For example,
// `My repo` would turn into `my_repo`.
//
// You need contributor access to create new forks within a workspace.
//
// #### Change the properties of a new fork
//
// By default the fork inherits most of its properties from the parent.
// However, since the optional POST body document follows the normal
// `repository` JSON schema and you can override the new fork's
// properties.
//
// Properties that can be overridden include:
//
//   - description
//   - fork_policy
//   - language
//   - mainbranch
//   - is_private (note that a private repo's fork_policy might prohibit
//     the creation of public forks, in which `is_private=False` would fail)
//   - has_issues (to initialize or disable the new repo's issue tracker --
//     note that the actual contents of the parent repository's issue
//     tracker are not copied during forking)
//   - has_wiki (to initialize or disable the new repo's wiki --
//     note that the actual contents of the parent repository's wiki are not
//     copied during forking)
//   - project (when forking into a private project, the fork's `is_private`
//     must be `true`)
//
// Properties that cannot be modified include:
//
// * scm
// * parent
// * full_name
func (s *repositories) PostRepositoriesWorkspaceRepoSlugForks(ctx context.Context, request operations.PostRepositoriesWorkspaceRepoSlugForksRequest, security operations.PostRepositoriesWorkspaceRepoSlugForksSecurity) (*operations.PostRepositoriesWorkspaceRepoSlugForksResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/forks", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostRepositoriesWorkspaceRepoSlugForksResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Repository = out
		}
	}

	return res, nil
}

// PostRepositoriesWorkspaceRepoSlugHooks - Create a webhook for a repository
// Creates a new webhook on the specified repository.
//
// Example:
//
// ```
// $ curl -X POST -u credentials -H 'Content-Type: application/json'
//
//	https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks
//	-d '
//	  {
//	    "description": "Webhook Description",
//	    "url": "https://example.com/",
//	    "active": true,
//	    "events": [
//	      "repo:push",
//	      "issue:created",
//	      "issue:updated"
//	    ]
//	  }'
//
// ```
//
// Note that this call requires the webhook scope, as well as any scope
// that applies to the events that the webhook subscribes to. In the
// example above that means: `webhook`, `repository` and `issue`.
//
// Also note that the `url` must properly resolve and cannot be an
// internal, non-routed address.
func (s *repositories) PostRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, request operations.PostRepositoriesWorkspaceRepoSlugHooksRequest, security operations.PostRepositoriesWorkspaceRepoSlugHooksSecurity) (*operations.PostRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/hooks", request, nil)

	req, err := http.NewRequestWithContext(ctx, "POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostRepositoriesWorkspaceRepoSlugHooksResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WebhookSubscription = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PostRepositoriesWorkspaceRepoSlugSrc - Create a commit by uploading a file
// This endpoint is used to create new commits in the repository by
// uploading files.
//
// To add a new file to a repository:
//
// ```
//
//	$ curl https://api.bitbucket.org/2.0/repositories/username/slug/src \
//	  -F /repo/path/to/image.png=@image.png
//
// ```
//
// This will create a new commit on top of the main branch, inheriting the
// contents of the main branch, but adding (or overwriting) the
// `image.png` file to the repository in the `/repo/path/to` directory.
//
// To create a commit that deletes files, use the `files` parameter:
//
// ```
//
//	$ curl https://api.bitbucket.org/2.0/repositories/username/slug/src \
//	  -F files=/file/to/delete/1.txt \
//	  -F files=/file/to/delete/2.txt
//
// ```
//
// You can add/modify/delete multiple files in a request. Rename/move a
// file by deleting the old path and adding the content at the new path.
//
// This endpoint accepts `multipart/form-data` (as in the examples above),
// as well as `application/x-www-form-urlencoded`.
//
// #### multipart/form-data
//
// A `multipart/form-data` post contains a series of "form fields" that
// identify both the individual files that are being uploaded, as well as
// additional, optional meta data.
//
// Files are uploaded in file form fields (those that have a
// `Content-Disposition` parameter) whose field names point to the remote
// path in the repository where the file should be stored. Path field
// names are always interpreted to be absolute from the root of the
// repository, regardless whether the client uses a leading slash (as the
// above `curl` example did).
//
// File contents are treated as bytes and are not decoded as text.
//
// The commit message, as well as other non-file meta data for the
// request, is sent along as normal form field elements. Meta data fields
// share the same namespace as the file objects. For `multipart/form-data`
// bodies that should not lead to any ambiguity, as the
// `Content-Disposition` header will contain the `filename` parameter to
// distinguish between a file named "message" and the commit message field.
//
// #### application/x-www-form-urlencoded
//
// It is also possible to upload new files using a simple
// `application/x-www-form-urlencoded` POST. This can be convenient when
// uploading pure text files:
//
// ```
//
//	$ curl https://api.bitbucket.org/2.0/repositories/atlassian/bbql/src \
//	  --data-urlencode "/path/to/me.txt=Lorem ipsum." \
//	  --data-urlencode "message=Initial commit" \
//	  --data-urlencode "author=Erik van Zijst <erik.van.zijst@gmail.com>"
//
// ```
//
// There could be a field name clash if a client were to upload a file
// named "message", as this filename clashes with the meta data property
// for the commit message. To avoid this and to upload files whose names
// clash with the meta data properties, use a leading slash for the files,
// e.g. `curl --data-urlencode "/message=file contents"`.
//
// When an explicit slash is omitted for a file whose path matches that of
// a meta data parameter, then it is interpreted as meta data, not as a
// file.
//
// #### Executables and links
//
// While this API aims to facilitate the most common use cases, it is
// possible to perform some more advanced operations like creating a new
// symlink in the repository, or creating an executable file.
//
// Files can be supplied with a `x-attributes` value in the
// `Content-Disposition` header. For example, to upload an executable
// file, as well as create a symlink from `README.txt` to `README`:
//
// ```
// --===============1438169132528273974==
// Content-Type: text/plain; charset="us-ascii"
// MIME-Version: 1.0
// Content-Transfer-Encoding: 7bit
// Content-ID: "bin/shutdown.sh"
// Content-Disposition: attachment; filename="shutdown.sh"; x-attributes:"executable"
//
// #!/bin/sh
// halt
//
// --===============1438169132528273974==
// Content-Type: text/plain; charset="us-ascii"
// MIME-Version: 1.0
// Content-Transfer-Encoding: 7bit
// Content-ID: "/README.txt"
// Content-Disposition: attachment; filename="README.txt"; x-attributes:"link"
//
// README
// --===============1438169132528273974==--
// ```
//
// Links are files that contain the target path and have
// `x-attributes:"link"` set.
//
// When overwriting links with files, or vice versa, the newly uploaded
// file determines both the new contents, as well as the attributes. That
// means uploading a file without specifying `x-attributes="link"` will
// create a regular file, even if the parent commit hosted a symlink at
// the same path.
//
// The same applies to executables. When modifying an existing executable
// file, the form-data file element must include
// `x-attributes="executable"` in order to preserve the executable status
// of the file.
//
// Note that this API does not support the creation or manipulation of
// subrepos / submodules.
func (s *repositories) PostRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, request operations.PostRepositoriesWorkspaceRepoSlugSrcRequest, security operations.PostRepositoriesWorkspaceRepoSlugSrcSecurity) (*operations.PostRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/src", request, nil)

	req, err := http.NewRequestWithContext(ctx, "POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostRepositoriesWorkspaceRepoSlugSrcResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PutRepositoriesWorkspaceRepoSlug - Update a repository
// Since this endpoint can be used to both update and to create a
// repository, the request body depends on the intent.
//
// #### Creation
//
// See the POST documentation for the repository endpoint for an example
// of the request body.
//
// #### Update
//
// Note: Changing the `name` of the repository will cause the location to
// be changed. This is because the URL of the repo is derived from the
// name (a process called slugification). In such a scenario, it is
// possible for the request to fail if the newly created slug conflicts
// with an existing repository's slug. But if there is no conflict,
// the new location will be returned in the `Location` header of the
// response.
func (s *repositories) PutRepositoriesWorkspaceRepoSlug(ctx context.Context, request operations.PutRepositoriesWorkspaceRepoSlugRequest, security operations.PutRepositoriesWorkspaceRepoSlugSecurity) (*operations.PutRepositoriesWorkspaceRepoSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutRepositoriesWorkspaceRepoSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		fallthrough
	case httpRes.StatusCode == 201:
		res.Headers = httpRes.Header

		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Repository = out
		}
	case httpRes.StatusCode == 400:
		fallthrough
	case httpRes.StatusCode == 401:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PutRepositoriesWorkspaceRepoSlugHooksUID - Update a webhook for a repository
// Updates the specified webhook subscription.
//
// The following properties can be mutated:
//
// * `description`
// * `url`
// * `active`
// * `events`
func (s *repositories) PutRepositoriesWorkspaceRepoSlugHooksUID(ctx context.Context, request operations.PutRepositoriesWorkspaceRepoSlugHooksUIDRequest, security operations.PutRepositoriesWorkspaceRepoSlugHooksUIDSecurity) (*operations.PutRepositoriesWorkspaceRepoSlugHooksUIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/hooks/{uid}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutRepositoriesWorkspaceRepoSlugHooksUIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WebhookSubscription = out
		}
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PutRepositoriesWorkspaceRepoSlugOverrideSettings - Set the inheritance state for repository settings
func (s *repositories) PutRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, request operations.PutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest, security operations.PutRepositoriesWorkspaceRepoSlugOverrideSettingsSecurity) (*operations.PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/override-settings", request, nil)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug - Update an explicit group permission for a repository
// Updates the group permission if it exists.
//
// Only users with admin permission for the repository may access this resource.
//
// The only authentication method supported for this endpoint is via app passwords.
//
// Permissions can be:
//
// * `admin`
// * `write`
// * `read`
//
// Example:
// ```
// $ curl -X PUT -H "Content-Type: application/json"
// https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
// -d
//
//	'{
//	    "permission": "write"
//	}'
//
// HTTP/1.1 200
// Location:
// https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers
//
//	{
//	    "type": "repository_group_permission",
//	    "group": {
//	        "type": "group",
//	        "name": "Developers",
//	        "slug": "developers"
//	    },
//	    "repository": {
//	        "type": "repository",
//	        "name": "geordi",
//	        "full_name": "atlassian_tutorial/geordi",
//	        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
//	    },
//	    "permission": "write",
//	    "links": {
//	      "self": {
//	        "href":
//	        "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/permissions-config/groups/developers"
//	      }
//	    }
//	}
//
// ```
func (s *repositories) PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, request operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest, security operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugSecurity) (*operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/groups/{group_slug}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RepositoryGroupPermission = out
		}
	case httpRes.StatusCode == 400:
		fallthrough
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 402:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID - Update an explicit user permission for a repository
// Updates the explicit user permission for a given user and repository. The selected user must be a member of
// the workspace, and cannot be the workspace owner.
// Only users with admin permission for the repository may access this resource.
//
// The only authentication method for this endpoint is via app passwords.
//
// Permissions can be:
//
// * `admin`
// * `write`
// * `read`
//
// Example:
//
// ```
// $ curl -X PUT -H "Content-Type: application/json" 'https://api.bitbucket.org/2.0/repositories/
// atlassian_tutorial/geordi/permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
//
//	-d         '{
//	    "permission": "write"
//	}'
//
// HTTP/1.1 200
// Location: 'https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
// permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a'
//
//	{
//	    "type": "repository_user_permission",
//	    "user": {
//	        "type": "user",
//	        "display_name": "Colin Cameron",
//	        "uuid": "{d301aafa-d676-4ee0-88be-962be7417567}",
//	        "account_id": "557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	    },
//	    "repository": {
//	        "type": "repository",
//	        "name": "geordi",
//	        "full_name": "atlassian_tutorial/geordi",
//	        "uuid": "{85d08b4e-571d-44e9-a507-fa476535aa98}"
//	    },
//	    "permission": "write",
//	    "links": {
//	        "self": {
//	            "href": "https://api.bitbucket.org/2.0/repositories/atlassian_tutorial/geordi/
//	                     permissions-config/users/557058:ba8948b2-49da-43a9-9e8b-e7249b8e324a"
//	        }
//	    }
//	}
//
// ```
func (s *repositories) PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserID(ctx context.Context, request operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDRequest, security operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDSecurity) (*operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/repositories/{workspace}/{repo_slug}/permissions-config/users/{selected_user_id}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIDResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.RepositoryUserPermission = out
		}
	case httpRes.StatusCode == 400:
		fallthrough
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 402:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 404:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Error = out
		}
	}

	return res, nil
}
