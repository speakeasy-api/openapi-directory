/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Group - Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed).
 * 
 */
public class Group {
    /**
     * Provides information about the country that is associated with a group.  May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public GroupCountry country;
    public Group withCountry(GroupCountry country) {
        this.country = country;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    public String groupId;
    public Group withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }
    
    /**
     * When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_questions")
    public Boolean hasQuestions;
    public Group withHasQuestions(Boolean hasQuestions) {
        this.hasQuestions = hasQuestions;
        return this;
    }
    
    /**
     * A URL to the group homepage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homepage")
    public String homepage;
    public Group withHomepage(String homepage) {
        this.homepage = homepage;
        return this;
    }
    
    /**
     * A unique identifier for the group that is used in URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    public String identifier;
    public Group withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Double latitude;
    public Group withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Double longitude;
    public Group withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * The number of members who belong to the group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("member_count")
    public Long memberCount;
    public Group withMemberCount(Long memberCount) {
        this.memberCount = memberCount;
        return this;
    }
    
    /**
     * Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("membership")
    public GroupMembership membership;
    public Group withMembership(GroupMembership membership) {
        this.membership = membership;
        return this;
    }
    
    /**
     * The name of the group (not guaranteed to be unique).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Group withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open_archives")
    public Boolean openArchives;
    public Group withOpenArchives(Boolean openArchives) {
        this.openArchives = openArchives;
        return this;
    }
    
    /**
     * When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open_membership")
    public Boolean openMembership;
    public Group withOpenMembership(Boolean openMembership) {
        this.openMembership = openMembership;
        return this;
    }
    
    /**
     * Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public GroupRegion region;
    public Group withRegion(GroupRegion region) {
        this.region = region;
        return this;
    }
    
    /**
     * The timezone that the group is in (eg. America/New_York).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public Group withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
}
