"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import linkparameterproperty3 as shared_linkparameterproperty3
from ..shared import lovlink3 as shared_lovlink3
from ..shared import parameterin_enum as shared_parameterin_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LinkParameter3:
    
    in_: shared_parameterin_enum.ParameterInEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in') }})
    r"""* path: if the parameter must be pass in the path uri
    * header: if the parameter must be passed in http header
    * query: if the parameter must be passed in querystring
    * body: if the parameter must be passed in the body
    * file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""description of the parameter"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header."""  
    lov_link: Optional[shared_lovlink3.LOVLink3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovLink'), 'exclude': lambda f: f is None }})
    r"""Describe the way you have to follow to get access to the LOV"""  
    lov_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovRequired'), 'exclude': lambda f: f is None }})
    r"""If true, you MUST indicate a value from the list of values otherwise it's a freetext"""  
    pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pattern'), 'exclude': lambda f: f is None }})
    r"""The regular expression to validate the value"""  
    properties: Optional[dict[str, shared_linkparameterproperty3.LinkParameterProperty3]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})  
    schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema'), 'exclude': lambda f: f is None }})
    r"""schema of the parameter"""  
    value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The value of the parameter. It can be an integer a string or an object."""  
    