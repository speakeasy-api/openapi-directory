"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import audioconfig as shared_audioconfig
from ..shared import synthesisinput as shared_synthesisinput
from ..shared import voiceselectionparams as shared_voiceselectionparams
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SynthesizeSpeechRequest:
    r"""The top-level message sent by the client for the `SynthesizeSpeech` method."""
    
    audio_config: Optional[shared_audioconfig.AudioConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioConfig'), 'exclude': lambda f: f is None }})
    r"""Description of audio data to be synthesized."""  
    input: Optional[shared_synthesisinput.SynthesisInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input'), 'exclude': lambda f: f is None }})
    r"""Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes."""  
    voice: Optional[shared_voiceselectionparams.VoiceSelectionParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})
    r"""Description of which voice to use for a synthesis request."""  
    