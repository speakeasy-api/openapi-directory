<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the profile information used for logging in to a virtual machine on Google Compute Engine.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileResponse
     */
	public function osloginUsersGetLoginProfile(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/loginProfile', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersGetLoginProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->loginProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LoginProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyResponse
     */
	public function osloginUsersImportSshPublicKey(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}:importSshPublicKey', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sshPublicKeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersImportSshPublicKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importSshPublicKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportSshPublicKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an SSH public key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateResponse
     */
	public function osloginUsersSshPublicKeysCreate(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/sshPublicKeys', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sshPublicKeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SshPublicKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an SSH public key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteResponse
     */
	public function osloginUsersSshPublicKeysDelete(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an SSH public key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetResponse
     */
	public function osloginUsersSshPublicKeysGet(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SshPublicKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an SSH public key and returns the profile information. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchResponse
     */
	public function osloginUsersSshPublicKeysPatch(
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sshPublicKeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OsloginUsersSshPublicKeysPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshPublicKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SshPublicKey', 'json');
            }
        }

        return $response;
    }
}