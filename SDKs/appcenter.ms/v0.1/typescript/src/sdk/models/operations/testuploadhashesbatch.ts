/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TestUploadHashesBatchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Type of the file
 */
export enum TestUploadHashesBatchTestCloudFileHashFileTypeEnum {
  DsymFile = "dsym-file",
  AppFile = "app-file",
  TestFile = "test-file",
}

/**
 * Hash, type, path and byte range of a file that is required in test run
 */
export class TestUploadHashesBatchTestCloudFileHash extends SpeakeasyBase {
  /**
   * SHA256 hash of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checksum" })
  checksum: string;

  /**
   * Type of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileType" })
  fileType: TestUploadHashesBatchTestCloudFileHashFileTypeEnum;

  /**
   * Relative path of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relativePath" })
  relativePath: string;
}

export class TestUploadHashesBatchRequest extends SpeakeasyBase {
  /**
   * File hash information
   */
  @SpeakeasyMetadata({
    data: "request, media_type=application/json",
    elemType: TestUploadHashesBatchTestCloudFileHash,
  })
  requestBody: TestUploadHashesBatchTestCloudFileHash[];

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the test run
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=test_run_id",
  })
  testRunId: string;
}

/**
 * Type of the file
 */
export enum TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum {
  DsymFile = "dsym-file",
  AppFile = "app-file",
  TestFile = "test-file",
}

/**
 * Status of the upload
 */
export class TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus extends SpeakeasyBase {
  /**
   * URI that should be used to make POST request if file with given hash doesn't exist. This is set when status_code is equal to 412
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * HTTP status code that represent result of upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode: number;
}

/**
 * Response message for single uploaded file hash
 */
export class TestUploadHashesBatchTestCloudFileHashResponse extends SpeakeasyBase {
  /**
   * SHA256 hash of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checksum" })
  checksum: string;

  /**
   * Type of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileType" })
  fileType: TestUploadHashesBatchTestCloudFileHashResponseFileTypeEnum;

  /**
   * Relative path of the file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relativePath" })
  relativePath?: string;

  /**
   * Status of the upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploadStatus" })
  @Type(
    () =>
      TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus
  )
  uploadStatus: TestUploadHashesBatchTestCloudFileHashResponseTestCloudHashUploadStatus;
}

export class TestUploadHashesBatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata({
    elemType: TestUploadHashesBatchTestCloudFileHashResponse,
  })
  testCloudFileHashResponses?: TestUploadHashesBatchTestCloudFileHashResponse[];
}
