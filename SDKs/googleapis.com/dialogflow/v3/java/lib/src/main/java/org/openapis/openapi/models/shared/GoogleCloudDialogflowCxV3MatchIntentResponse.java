/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDialogflowCxV3MatchIntentResponse - Response of MatchIntent.
 */
public class GoogleCloudDialogflowCxV3MatchIntentResponse {
    /**
     * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentPage")
    public GoogleCloudDialogflowCxV3Page currentPage;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withCurrentPage(GoogleCloudDialogflowCxV3Page currentPage) {
        this.currentPage = currentPage;
        return this;
    }
    
    /**
     * Match results, if more than one, ordered descendingly by the confidence we have that the particular intent matches the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matches")
    public GoogleCloudDialogflowCxV3Match[] matches;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withMatches(GoogleCloudDialogflowCxV3Match[] matches) {
        this.matches = matches;
        return this;
    }
    
    /**
     * If natural language text was provided as input, this field will contain a copy of the text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * If natural language speech audio was provided as input, this field will contain the transcript for the audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcript")
    public String transcript;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withTranscript(String transcript) {
        this.transcript = transcript;
        return this;
    }
    
    /**
     * If an event was provided as input, this field will contain a copy of the event name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerEvent")
    public String triggerEvent;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     * If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerIntent")
    public String triggerIntent;

    public GoogleCloudDialogflowCxV3MatchIntentResponse withTriggerIntent(String triggerIntent) {
        this.triggerIntent = triggerIntent;
        return this;
    }
    
    public GoogleCloudDialogflowCxV3MatchIntentResponse(){}
}
