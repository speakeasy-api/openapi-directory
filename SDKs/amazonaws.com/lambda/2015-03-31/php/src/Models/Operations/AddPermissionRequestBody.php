<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class AddPermissionRequestBody
{
    /**
     * The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>.
     * 
     * @var string $action
     */
	#[\JMS\Serializer\Annotation\SerializedName('Action')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $action;
    
    /**
     * For Alexa Smart Home functions, a token that the invoker must supply.
     * 
     * @var ?string $eventSourceToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('EventSourceToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventSourceToken = null;
    
    /**
     * The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\AddPermissionRequestBodyFunctionUrlAuthTypeEnum $functionUrlAuthType
     */
	#[\JMS\Serializer\Annotation\SerializedName('FunctionUrlAuthType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\AddPermissionRequestBodyFunctionUrlAuthTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AddPermissionRequestBodyFunctionUrlAuthTypeEnum $functionUrlAuthType = null;
    
    /**
     * The Amazon Web Service or Amazon Web Services account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service.
     * 
     * @var string $principal
     */
	#[\JMS\Serializer\Annotation\SerializedName('Principal')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $principal;
    
    /**
     * The identifier for your organization in Organizations. Use this to grant permissions to all the Amazon Web Services accounts under this organization.
     * 
     * @var ?string $principalOrgID
     */
	#[\JMS\Serializer\Annotation\SerializedName('PrincipalOrgID')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $principalOrgID = null;
    
    /**
     * Update the policy only if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.
     * 
     * @var ?string $revisionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('RevisionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $revisionId = null;
    
    /**
     * For Amazon Web Service, the ID of the Amazon Web Services account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
     * 
     * @var ?string $sourceAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('SourceAccount')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceAccount = null;
    
    /**
     * <p>For Amazon Web Services, the ARN of the Amazon Web Services resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.</p> <p>Note that Lambda configures the comparison using the <code>StringLike</code> operator.</p>
     * 
     * @var ?string $sourceArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('SourceArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceArn = null;
    
    /**
     * A statement identifier that differentiates the statement from others in the same policy.
     * 
     * @var string $statementId
     */
	#[\JMS\Serializer\Annotation\SerializedName('StatementId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $statementId;
    
	public function __construct()
	{
		$this->action = "";
		$this->eventSourceToken = null;
		$this->functionUrlAuthType = null;
		$this->principal = "";
		$this->principalOrgID = null;
		$this->revisionId = null;
		$this->sourceAccount = null;
		$this->sourceArn = null;
		$this->statementId = "";
	}
}
