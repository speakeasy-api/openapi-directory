"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubContractorSubContractorAddress:
    r"""The sub contractors' address"""
    
    address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address1'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 1"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address2'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 2"""  
    address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address3'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 3"""  
    address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address4'), 'exclude': lambda f: f is None }})
    r"""The addresss' line 4"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})
    r"""The addresss' country"""  
    postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Postcode'), 'exclude': lambda f: f is None }})
    r"""The addresss' postcode"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubContractorSubContractorBankAccount:
    r"""The sub contractors' bank account"""
    
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account name"""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountNumber'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' account number"""  
    branch_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchName'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' branch name"""  
    reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reference'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' reference"""  
    sort_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortCode'), 'exclude': lambda f: f is None }})
    r"""The bank accounts' sort code"""  
    
class SubContractorSubContractorBusinessTypeEnum(str, Enum):
    r"""The sub contractors' business type"""
    SOLE_TRADER = 'SoleTrader'
    COMPANY = 'Company'
    PARTNERSHIP = 'Partnership'
    TRUST = 'Trust'

class SubContractorSubContractorPayFrequencyEnum(str, Enum):
    r"""The sub contractors' pay frequency"""
    MONTHLY = 'Monthly'
    WEEKLY = 'Weekly'

class SubContractorSubContractorPaymentMethodEnum(str, Enum):
    r"""The sub contractors' payment method"""
    NOT_SET = 'NotSet'
    CASH = 'Cash'
    CHEQUE = 'Cheque'
    BACS = 'BACS'
    FASTER_PAYMENTS = 'FasterPayments'
    OTHER = 'Other'

class SubContractorSubContractorRegionEnum(str, Enum):
    r"""The sub contractors' region"""
    NOT_SET = 'NotSet'
    ENGLAND = 'England'
    SCOTLAND = 'Scotland'
    WALES = 'Wales'

class SubContractorSubContractorTaxationStatusEnum(str, Enum):
    r"""The sub contractors' taxation status"""
    UNMATCHED = 'Unmatched'
    NET = 'Net'
    GROSS = 'Gross'

class SubContractorSubContractorTerritoryEnum(str, Enum):
    r"""The sub contractors' territory"""
    UNITED_KINGDOM = 'UnitedKingdom'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubContractorSubContractor:
    
    address: Optional[SubContractorSubContractorAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' address"""  
    bank_account: Optional[SubContractorSubContractorBankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankAccount'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' bank account"""  
    business_type: Optional[SubContractorSubContractorBusinessTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BusinessType'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' business type"""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' company name"""  
    company_registration_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyRegistrationNumber'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' company registration number"""  
    deactivated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Deactivated'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' deactivated"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' effective date"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' first name"""  
    initials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Initials'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' initials"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' last name"""  
    meta_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetaData'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' meta data"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MiddleName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' middle name"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' next revision date"""  
    ni_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NiNumber'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' ni number"""  
    partnership_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartnershipName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' partnership name"""  
    partnership_unique_tax_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartnershipUniqueTaxReference'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' partnership unique tax reference"""  
    pay_frequency: Optional[SubContractorSubContractorPayFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayFrequency'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' pay frequency"""  
    payment_method: Optional[SubContractorSubContractorPaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentMethod'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' payment method"""  
    region: Optional[SubContractorSubContractorRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' region"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' revision"""  
    taxation_status: Optional[SubContractorSubContractorTaxationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxationStatus'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' taxation status"""  
    telephone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Telephone'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' telephone"""  
    territory: Optional[SubContractorSubContractorTerritoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Territory'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' territory"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' title"""  
    trading_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TradingName'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' trading name"""  
    unique_tax_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UniqueTaxReference'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' unique tax reference"""  
    vat_registered: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatRegistered'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' vat registered"""  
    vat_registration_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VatRegistrationNumber'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' vat registration number"""  
    verification_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' verification date"""  
    verification_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationNumber'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' verification number"""  
    works_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorksNumber'), 'exclude': lambda f: f is None }})
    r"""The sub contractors' works number"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubContractor:
    r"""The sub contractor object."""
    
    sub_contractor: Optional[SubContractorSubContractor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubContractor'), 'exclude': lambda f: f is None }})  
    