/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Calls that return match, or match-specific information.
 */
export class Match {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
   * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
   * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
   */
  getEventMatchTimeseries(
    req: operations.GetEventMatchTimeseriesRequest,
    security: operations.GetEventMatchTimeseriesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchTimeseriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchTimeseriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/timeseries",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchTimeseriesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchTimeseriesResponse =
        new operations.GetEventMatchTimeseriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventMatchTimeseries200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given event.
   */
  getEventMatches(
    req: operations.GetEventMatchesRequest,
    security: operations.GetEventMatchesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesResponse =
        new operations.GetEventMatchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for the given event.
   */
  getEventMatchesKeys(
    req: operations.GetEventMatchesKeysRequest,
    security: operations.GetEventMatchesKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesKeysResponse =
        new operations.GetEventMatchesKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEventMatchesKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given event.
   */
  getEventMatchesSimple(
    req: operations.GetEventMatchesSimpleRequest,
    security: operations.GetEventMatchesSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventMatchesSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventMatchesSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/matches/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventMatchesSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventMatchesSimpleResponse =
        new operations.GetEventMatchesSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matchSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matchSimples = utils.objectToClass(
              httpRes?.data,
              shared.MatchSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Match` object for the given match key.
   */
  getMatch(
    req: operations.GetMatchRequest,
    security: operations.GetMatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/match/{match_key}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMatchResponse = new operations.GetMatchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.match = utils.objectToClass(httpRes?.data, shared.Match);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form `Match` object for the given match key.
   */
  getMatchSimple(
    req: operations.GetMatchSimpleRequest,
    security: operations.GetMatchSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMatchSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMatchSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/match/{match_key}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMatchSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMatchSimpleResponse =
        new operations.GetMatchSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matchSimple = utils.objectToClass(
              httpRes?.data,
              shared.MatchSimple
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
   * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
   * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
   */
  getMatchTimeseries(
    req: operations.GetMatchTimeseriesRequest,
    security: operations.GetMatchTimeseriesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMatchTimeseriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMatchTimeseriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/match/{match_key}/timeseries",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMatchTimeseriesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMatchTimeseriesResponse =
        new operations.GetMatchTimeseriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMatchTimeseries200ApplicationJSONObjects =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets Zebra MotionWorks data for a Match for the given match key.
   */
  getMatchZebra(
    req: operations.GetMatchZebraRequest,
    security: operations.GetMatchZebraSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMatchZebraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMatchZebraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/match/{match_key}/zebra_motionworks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetMatchZebraSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMatchZebraResponse =
        new operations.GetMatchZebraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.zebra = utils.objectToClass(httpRes?.data, shared.Zebra);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given team and event.
   */
  getTeamEventMatches(
    req: operations.GetTeamEventMatchesRequest,
    security: operations.GetTeamEventMatchesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesResponse =
        new operations.GetTeamEventMatchesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for matches for the given team and event.
   */
  getTeamEventMatchesKeys(
    req: operations.GetTeamEventMatchesKeysRequest,
    security: operations.GetTeamEventMatchesKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesKeysResponse =
        new operations.GetTeamEventMatchesKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamEventMatchesKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given team and event.
   */
  getTeamEventMatchesSimple(
    req: operations.GetTeamEventMatchesSimpleRequest,
    security: operations.GetTeamEventMatchesSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamEventMatchesSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamEventMatchesSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/event/{event_key}/matches/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamEventMatchesSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamEventMatchesSimpleResponse =
        new operations.GetTeamEventMatchesSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of matches for the given team and year.
   */
  getTeamMatchesByYear(
    req: operations.GetTeamMatchesByYearRequest,
    security: operations.GetTeamMatchesByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearResponse =
        new operations.GetTeamMatchesByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matches = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matches = utils.objectToClass(
              httpRes?.data,
              shared.Match,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of match keys for matches for the given team and year.
   */
  getTeamMatchesByYearKeys(
    req: operations.GetTeamMatchesByYearKeysRequest,
    security: operations.GetTeamMatchesByYearKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearKeysResponse =
        new operations.GetTeamMatchesByYearKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTeamMatchesByYearKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of matches for the given team and year.
   */
  getTeamMatchesByYearSimple(
    req: operations.GetTeamMatchesByYearSimpleRequest,
    security: operations.GetTeamMatchesByYearSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamMatchesByYearSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamMatchesByYearSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/matches/{year}/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamMatchesByYearSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamMatchesByYearSimpleResponse =
        new operations.GetTeamMatchesByYearSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.matchSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.matchSimples = utils.objectToClass(
              httpRes?.data,
              shared.MatchSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
