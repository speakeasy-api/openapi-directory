<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetConsentStatusRequest
{
    /**
     * Is contained if and only if the "Signature" element is contained in the header of the request.
     * 
     * @var ?string $digest
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Digest')]
    public ?string $digest = null;
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuAccept
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Accept')]
    public ?string $psuAccept = null;
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuAcceptCharset
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Accept-Charset')]
    public ?string $psuAcceptCharset = null;
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuAcceptEncoding
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Accept-Encoding')]
    public ?string $psuAcceptEncoding = null;
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuAcceptLanguage
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Accept-Language')]
    public ?string $psuAcceptLanguage = null;
    
    /**
     * UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
     * 
     * UUID identifies either a device or a device dependant application installation.
     * In case of an installation identification this ID needs to be unaltered until removal from device.
     * 
     * 
     * @var ?string $psuDeviceID
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Device-ID')]
    public ?string $psuDeviceID = null;
    
    /**
     * The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
     * 
     * 
     * 
     * @var ?string $psuGeoLocation
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Geo-Location')]
    public ?string $psuGeoLocation = null;
    
    /**
     * HTTP method used at the PSU ? TPP interface, if available.
     * 
     * Valid values are:
     * * GET
     * * POST
     * * PUT
     * * PATCH
     * * DELETE
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PSUHttpMethodEnum $psuHttpMethod
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-Http-Method')]
    public ?\OpenAPI\OpenAPI\Models\Shared\PSUHttpMethodEnum $psuHttpMethod = null;
    
    /**
     * The forwarded IP Address header field consists of the corresponding HTTP request
     * 
     * IP Address field between PSU and TPP.
     * It shall be contained if and only if this request was actively initiated by the PSU.
     * 
     * 
     * @var ?string $psuIPAddress
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-IP-Address')]
    public ?string $psuIPAddress = null;
    
    /**
     * The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuIPPort
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-IP-Port')]
    public ?string $psuIPPort = null;
    
    /**
     * The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
     * 
     * 
     * 
     * @var ?string $psuUserAgent
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=PSU-User-Agent')]
    public ?string $psuUserAgent = null;
    
    /**
     * A signature of the request by the TPP on application level. This might be mandated by ASPSP.
     * 
     * 
     * 
     * @var ?string $signature
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Signature')]
    public ?string $signature = null;
    
    /**
     * The certificate used for signing the request, in base64 encoding.
     * 
     * Must be contained if a signature is contained.
     * 
     * 
     * @var ?string $tppSignatureCertificate
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=TPP-Signature-Certificate')]
    public ?string $tppSignatureCertificate = null;
    
    /**
     * ID of the request, unique to the call, as determined by the initiating party.
     * 
     * @var string $xRequestID
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Request-ID')]
    public string $xRequestID;
    
    /**
     * ID of the corresponding consent object as returned by an account information consent request.
     * 
     * 
     * 
     * @var string $consentId
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=consentId')]
    public string $consentId;
    
	public function __construct()
	{
		$this->digest = null;
		$this->psuAccept = null;
		$this->psuAcceptCharset = null;
		$this->psuAcceptEncoding = null;
		$this->psuAcceptLanguage = null;
		$this->psuDeviceID = null;
		$this->psuGeoLocation = null;
		$this->psuHttpMethod = null;
		$this->psuIPAddress = null;
		$this->psuIPPort = null;
		$this->psuUserAgent = null;
		$this->signature = null;
		$this->tppSignatureCertificate = null;
		$this->xRequestID = "";
		$this->consentId = "";
	}
}
