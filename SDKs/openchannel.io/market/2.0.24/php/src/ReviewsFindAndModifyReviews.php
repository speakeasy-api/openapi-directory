<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ReviewsFindAndModifyReviews 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove a review
     * 
     * - Only the review author is able to remove their review
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdResponse
     */
	public function deleteReviewsReviewId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReviewsReviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Find reviews for a particular App and marketplace. Results are automatically paginated when limit is set
     * 
     * - Results are paginated and the default is value is 100 if no limit is provided
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReviewsResponse
     */
	public function getReviews(
        \OpenAPI\OpenAPI\Models\Operations\GetReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetReviewsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Find a Review within a particular App and marketplace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdResponse
     */
	public function getReviewsReviewId(
        \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReviewsReviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a review fields
     * 
     * - Only the review author is able to update their review
     * - Returns the newly updated review
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdResponse
     */
	public function patchReviewsReviewId(
        \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchReviewsReviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Post a review from a User and returns the new post
     * 
     * - Only authenticated users are able to post reviews
     * - Returns the newly created review
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostReviewsResponse
     */
	public function postReviews(
        \OpenAPI\OpenAPI\Models\Operations\PostReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostReviewsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a review from a User and returns the new post
     * 
     * - Only the review author is able to update their review
     * - Returns the newly updated review
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdResponse
     */
	public function postReviewsReviewId(
        \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostReviewsReviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}