/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Interact with GitHub Projects.
 */
export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add project collaborator
   *
   * @remarks
   * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#add-project-collaborator} - API method documentation
   */
  projectsAddCollaborator(
    req: operations.ProjectsAddCollaboratorRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsAddCollaboratorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsAddCollaboratorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/collaborators/{username}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsAddCollaboratorResponse =
        new operations.ProjectsAddCollaboratorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a project card
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#create-a-project-card} - API method documentation
   */
  projectsCreateCard(
    req: operations.ProjectsCreateCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsCreateCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsCreateCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}/cards",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsCreateCardResponse =
        new operations.ProjectsCreateCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCard = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCard
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsCreateCard422ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsCreateCard503ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProjectsCreateCard503ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a project column
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#create-a-project-column} - API method documentation
   */
  projectsCreateColumn(
    req: operations.ProjectsCreateColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsCreateColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsCreateColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/columns",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsCreateColumnResponse =
        new operations.ProjectsCreateColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectColumn = utils.objectToClass(
              httpRes?.data,
              shared.ProjectColumn
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a user project
   *
   * @remarks
   * Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#create-a-user-project} - API method documentation
   */
  projectsCreateForAuthenticatedUser(
    req: operations.ProjectsCreateForAuthenticatedUserRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsCreateForAuthenticatedUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsCreateForAuthenticatedUserRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user/projects";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsCreateForAuthenticatedUserResponse =
        new operations.ProjectsCreateForAuthenticatedUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an organization project
   *
   * @remarks
   * Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#create-an-organization-project} - API method documentation
   */
  projectsCreateForOrg(
    req: operations.ProjectsCreateForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsCreateForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsCreateForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/orgs/{org}/projects", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsCreateForOrgResponse =
        new operations.ProjectsCreateForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
        case [401, 403, 404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a repository project
   *
   * @remarks
   * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#create-a-repository-project} - API method documentation
   */
  projectsCreateForRepo(
    req: operations.ProjectsCreateForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsCreateForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsCreateForRepoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/projects",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsCreateForRepoResponse =
        new operations.ProjectsCreateForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
        case [401, 403, 404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a project
   *
   * @remarks
   * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#delete-a-project} - API method documentation
   */
  projectsDelete(
    req: operations.ProjectsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsDeleteResponse =
        new operations.ProjectsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [401, 404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsDelete403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProjectsDelete403ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a project card
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#delete-a-project-card} - API method documentation
   */
  projectsDeleteCard(
    req: operations.ProjectsDeleteCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsDeleteCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsDeleteCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/cards/{card_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsDeleteCardResponse =
        new operations.ProjectsDeleteCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsDeleteCard403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ProjectsDeleteCard403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a project column
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#delete-a-project-column} - API method documentation
   */
  projectsDeleteColumn(
    req: operations.ProjectsDeleteColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsDeleteColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsDeleteColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsDeleteColumnResponse =
        new operations.ProjectsDeleteColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a project
   *
   * @remarks
   * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#get-a-project} - API method documentation
   */
  projectsGet(
    req: operations.ProjectsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetResponse =
        new operations.ProjectsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a project card
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#get-a-project-card} - API method documentation
   */
  projectsGetCard(
    req: operations.ProjectsGetCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/cards/{card_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetCardResponse =
        new operations.ProjectsGetCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCard = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCard
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a project column
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#get-a-project-column} - API method documentation
   */
  projectsGetColumn(
    req: operations.ProjectsGetColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetColumnResponse =
        new operations.ProjectsGetColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectColumn = utils.objectToClass(
              httpRes?.data,
              shared.ProjectColumn
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get project permission for a user
   *
   * @remarks
   * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#get-project-permission-for-a-user} - API method documentation
   */
  projectsGetPermissionForUser(
    req: operations.ProjectsGetPermissionForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsGetPermissionForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsGetPermissionForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/collaborators/{username}/permission",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsGetPermissionForUserResponse =
        new operations.ProjectsGetPermissionForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCollaboratorPermission = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCollaboratorPermission
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project cards
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-project-cards} - API method documentation
   */
  projectsListCards(
    req: operations.ProjectsListCardsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListCardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListCardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}/cards",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListCardsResponse =
        new operations.ProjectsListCardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCards = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectCards = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCard,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project collaborators
   *
   * @remarks
   * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-project-collaborators} - API method documentation
   */
  projectsListCollaborators(
    req: operations.ProjectsListCollaboratorsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListCollaboratorsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListCollaboratorsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/collaborators",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListCollaboratorsResponse =
        new operations.ProjectsListCollaboratorsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.simpleUsers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.simpleUsers = utils.objectToClass(
              httpRes?.data,
              shared.SimpleUser,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List project columns
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-project-columns} - API method documentation
   */
  projectsListColumns(
    req: operations.ProjectsListColumnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListColumnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListColumnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/columns",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListColumnsResponse =
        new operations.ProjectsListColumnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectColumns = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projectColumns = utils.objectToClass(
              httpRes?.data,
              shared.ProjectColumn,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List organization projects
   *
   * @remarks
   * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-organization-projects} - API method documentation
   */
  projectsListForOrg(
    req: operations.ProjectsListForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/orgs/{org}/projects", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListForOrgResponse =
        new operations.ProjectsListForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List repository projects
   *
   * @remarks
   * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-repository-projects} - API method documentation
   */
  projectsListForRepo(
    req: operations.ProjectsListForRepoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListForRepoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListForRepoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/repos/{owner}/{repo}/projects",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListForRepoResponse =
        new operations.ProjectsListForRepoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List user projects
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#list-user-projects} - API method documentation
   */
  projectsListForUser(
    req: operations.ProjectsListForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsListForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsListForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/projects",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsListForUserResponse =
        new operations.ProjectsListForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Move a project card
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#move-a-project-card} - API method documentation
   */
  projectsMoveCard(
    req: operations.ProjectsMoveCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsMoveCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsMoveCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/cards/{card_id}/moves",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsMoveCardResponse =
        new operations.ProjectsMoveCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsMoveCard201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsMoveCard403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProjectsMoveCard403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsMoveCard503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProjectsMoveCard503ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Move a project column
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#move-a-project-column} - API method documentation
   */
  projectsMoveColumn(
    req: operations.ProjectsMoveColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsMoveColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsMoveColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}/moves",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsMoveColumnResponse =
        new operations.ProjectsMoveColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsMoveColumn201ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove user as a collaborator
   *
   * @remarks
   * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#remove-project-collaborator} - API method documentation
   */
  projectsRemoveCollaborator(
    req: operations.ProjectsRemoveCollaboratorRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsRemoveCollaboratorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsRemoveCollaboratorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}/collaborators/{username}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsRemoveCollaboratorResponse =
        new operations.ProjectsRemoveCollaboratorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a project
   *
   * @remarks
   * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#update-a-project} - API method documentation
   */
  projectsUpdate(
    req: operations.ProjectsUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsUpdateResponse =
        new operations.ProjectsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
        case [304, 404].includes(httpRes?.status):
          break;
        case [401, 410].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectsUpdate403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ProjectsUpdate403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing project card
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#update-a-project-card} - API method documentation
   */
  projectsUpdateCard(
    req: operations.ProjectsUpdateCardRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsUpdateCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsUpdateCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/cards/{card_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsUpdateCardResponse =
        new operations.ProjectsUpdateCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectCard = utils.objectToClass(
              httpRes?.data,
              shared.ProjectCard
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationErrorSimple = utils.objectToClass(
              httpRes?.data,
              shared.ValidationErrorSimple
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an existing project column
   *
   * @see {@link https://docs.github.com/enterprise-server@3.7/rest/reference/projects#update-a-project-column} - API method documentation
   */
  projectsUpdateColumn(
    req: operations.ProjectsUpdateColumnRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProjectsUpdateColumnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProjectsUpdateColumnRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/columns/{column_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProjectsUpdateColumnResponse =
        new operations.ProjectsUpdateColumnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectColumn = utils.objectToClass(
              httpRes?.data,
              shared.ProjectColumn
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }
}
