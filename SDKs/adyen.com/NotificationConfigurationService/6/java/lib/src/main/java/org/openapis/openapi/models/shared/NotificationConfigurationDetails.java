/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NotificationConfigurationDetails {
    /**
     * Indicates whether the notification subscription is active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public NotificationConfigurationDetails withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * The version of the notification to which you are subscribing. To make sure that your integration can properly process the notification, subscribe to the same version as the API that you're using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public Integer apiVersion;
    public NotificationConfigurationDetails withApiVersion(Integer apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * A description of the notification subscription configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public NotificationConfigurationDetails withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Contains objects that define event types and their subscription settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventConfigs")
    public NotificationEventConfiguration[] eventConfigs;
    public NotificationConfigurationDetails withEventConfigs(NotificationEventConfiguration[] eventConfigs) {
        this.eventConfigs = eventConfigs;
        return this;
    }
    
    /**
     * A string with which to salt the notification(s) before hashing. If this field is provided, a hash value will be included under the notification header `HmacSignature` and the hash protocol will be included under the notification header `Protocol`. A notification body along with its `hmacSignatureKey` and `Protocol` can be used to calculate a hash value; matching this hash value with the `HmacSignature` will ensure that the notification body has not been tampered with or corrupted.
     * 
     * &gt;Must be a 32-byte hex-encoded string (i.e. a string containing 64 hexadecimal characters; e.g. "b0ea55c2fe60d4d1d605e9c385e0e7f7e6cafbb939ce07010f31a327a0871f27").
     * 
     * The omission of this field will preclude the provision of the `HmacSignature` and `Protocol` headers in notification(s).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hmacSignatureKey")
    public String hmacSignatureKey;
    public NotificationConfigurationDetails withHmacSignatureKey(String hmacSignatureKey) {
        this.hmacSignatureKey = hmacSignatureKey;
        return this;
    }
    
    /**
     * Adyen-generated ID for the entry, returned in the response when you create a notification configuration. Required when updating an existing configuration using [`/updateNotificationConfiguration`](https://docs.adyen.com/api-explorer/#/NotificationConfigurationService/latest/post/updateNotificationConfiguration).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationId")
    public Long notificationId;
    public NotificationConfigurationDetails withNotificationId(Long notificationId) {
        this.notificationId = notificationId;
        return this;
    }
    
    /**
     * The password to use when accessing the notifyURL with the specified username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyPassword")
    public String notifyPassword;
    public NotificationConfigurationDetails withNotifyPassword(String notifyPassword) {
        this.notifyPassword = notifyPassword;
        return this;
    }
    
    /**
     * The URL to which the notifications are to be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyURL")
    public String notifyURL;
    public NotificationConfigurationDetails withNotifyURL(String notifyURL) {
        this.notifyURL = notifyURL;
        return this;
    }
    
    /**
     * The username to use when accessing the notifyURL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifyUsername")
    public String notifyUsername;
    public NotificationConfigurationDetails withNotifyUsername(String notifyUsername) {
        this.notifyUsername = notifyUsername;
        return this;
    }
    
    /**
     * The SSL protocol employed by the endpoint.
     * &gt;Permitted values: `TLSv12`, `TLSv13`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslProtocol")
    public NotificationConfigurationDetailsSslProtocolEnum sslProtocol;
    public NotificationConfigurationDetails withSslProtocol(NotificationConfigurationDetailsSslProtocolEnum sslProtocol) {
        this.sslProtocol = sslProtocol;
        return this;
    }
    
}
