"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class User:
    r"""Flat users"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def ger_user_likes(self, request: operations.GerUserLikesRequest, security: operations.GerUserLikesSecurity) -> operations.GerUserLikesResponse:
        r"""List liked scores"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GerUserLikesRequest, base_url, '/users/{user}/likes', request)
        
        query_params = utils.get_query_params(operations.GerUserLikesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GerUserLikesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ScoreDetails]])
                res.score_details = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlatErrorResponse])
                res.flat_error_response = out

        return res

    def get_user(self, request: operations.GetUserRequest, security: operations.GetUserSecurity) -> operations.GetUserResponse:
        r"""Get a public user profile
        Get a public profile of a Flat User.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/users/{user}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPublic])
                res.user_public = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlatErrorResponse])
                res.flat_error_response = out

        return res

    def get_user_scores(self, request: operations.GetUserScoresRequest, security: operations.GetUserScoresSecurity) -> operations.GetUserScoresResponse:
        r"""List user's scores
        Get the list of public scores owned by a User.
        
        **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.
        This method will no longer list private and shared scores, but only public scores of a Flat account.
        If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserScoresRequest, base_url, '/users/{user}/scores', request)
        
        query_params = utils.get_query_params(operations.GetUserScoresRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserScoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ScoreDetails]])
                res.score_details = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlatErrorResponse])
                res.flat_error_response = out

        return res

    