"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonalNameParsedOut = exports.PersonalNameParsedOutNameParserTypeAltEnum = exports.PersonalNameParsedOutNameParserTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var firstlastnameout_1 = require("./firstlastnameout");
var class_transformer_1 = require("class-transformer");
/**
 * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 */
var PersonalNameParsedOutNameParserTypeEnum;
(function (PersonalNameParsedOutNameParserTypeEnum) {
    PersonalNameParsedOutNameParserTypeEnum["Fn1Ln1"] = "FN1LN1";
    PersonalNameParsedOutNameParserTypeEnum["Ln1Fn1"] = "LN1FN1";
    PersonalNameParsedOutNameParserTypeEnum["Fn1Ln2"] = "FN1LN2";
    PersonalNameParsedOutNameParserTypeEnum["Ln2Fn1"] = "LN2FN1";
    PersonalNameParsedOutNameParserTypeEnum["Fn1LNx"] = "FN1LNx";
    PersonalNameParsedOutNameParserTypeEnum["LNxFn1"] = "LNxFN1";
    PersonalNameParsedOutNameParserTypeEnum["Fn2Ln1"] = "FN2LN1";
    PersonalNameParsedOutNameParserTypeEnum["Ln1Fn2"] = "LN1FN2";
    PersonalNameParsedOutNameParserTypeEnum["Fn2Ln2"] = "FN2LN2";
    PersonalNameParsedOutNameParserTypeEnum["Ln2Fn2"] = "LN2FN2";
    PersonalNameParsedOutNameParserTypeEnum["Fn2LNx"] = "FN2LNx";
    PersonalNameParsedOutNameParserTypeEnum["LNxFn2"] = "LNxFN2";
    PersonalNameParsedOutNameParserTypeEnum["FNxLn1"] = "FNxLN1";
    PersonalNameParsedOutNameParserTypeEnum["Ln1FNx"] = "LN1FNx";
    PersonalNameParsedOutNameParserTypeEnum["FNxLn2"] = "FNxLN2";
    PersonalNameParsedOutNameParserTypeEnum["Ln2FNx"] = "LN2FNx";
    PersonalNameParsedOutNameParserTypeEnum["FNxLNx"] = "FNxLNx";
    PersonalNameParsedOutNameParserTypeEnum["LNxFNx"] = "LNxFNx";
})(PersonalNameParsedOutNameParserTypeEnum = exports.PersonalNameParsedOutNameParserTypeEnum || (exports.PersonalNameParsedOutNameParserTypeEnum = {}));
/**
 * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 */
var PersonalNameParsedOutNameParserTypeAltEnum;
(function (PersonalNameParsedOutNameParserTypeAltEnum) {
    PersonalNameParsedOutNameParserTypeAltEnum["Fn1Ln1"] = "FN1LN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln1Fn1"] = "LN1FN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Fn1Ln2"] = "FN1LN2";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln2Fn1"] = "LN2FN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Fn1LNx"] = "FN1LNx";
    PersonalNameParsedOutNameParserTypeAltEnum["LNxFn1"] = "LNxFN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Fn2Ln1"] = "FN2LN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln1Fn2"] = "LN1FN2";
    PersonalNameParsedOutNameParserTypeAltEnum["Fn2Ln2"] = "FN2LN2";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln2Fn2"] = "LN2FN2";
    PersonalNameParsedOutNameParserTypeAltEnum["Fn2LNx"] = "FN2LNx";
    PersonalNameParsedOutNameParserTypeAltEnum["LNxFn2"] = "LNxFN2";
    PersonalNameParsedOutNameParserTypeAltEnum["FNxLn1"] = "FNxLN1";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln1FNx"] = "LN1FNx";
    PersonalNameParsedOutNameParserTypeAltEnum["FNxLn2"] = "FNxLN2";
    PersonalNameParsedOutNameParserTypeAltEnum["Ln2FNx"] = "LN2FNx";
    PersonalNameParsedOutNameParserTypeAltEnum["FNxLNx"] = "FNxLNx";
    PersonalNameParsedOutNameParserTypeAltEnum["LNxFNx"] = "LNxFNx";
})(PersonalNameParsedOutNameParserTypeAltEnum = exports.PersonalNameParsedOutNameParserTypeAltEnum || (exports.PersonalNameParsedOutNameParserTypeAltEnum = {}));
/**
 * A origined name.
 */
var PersonalNameParsedOut = /** @class */ (function (_super) {
    __extends(PersonalNameParsedOut, _super);
    function PersonalNameParsedOut() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "firstLastName" }),
        (0, class_transformer_1.Type)(function () { return firstlastnameout_1.FirstLastNameOut; }),
        __metadata("design:type", firstlastnameout_1.FirstLastNameOut)
    ], PersonalNameParsedOut.prototype, "firstLastName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], PersonalNameParsedOut.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], PersonalNameParsedOut.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameParserType" }),
        __metadata("design:type", String)
    ], PersonalNameParsedOut.prototype, "nameParserType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nameParserTypeAlt" }),
        __metadata("design:type", String)
    ], PersonalNameParsedOut.prototype, "nameParserTypeAlt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "score" }),
        __metadata("design:type", Number)
    ], PersonalNameParsedOut.prototype, "score", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "script" }),
        __metadata("design:type", String)
    ], PersonalNameParsedOut.prototype, "script", void 0);
    return PersonalNameParsedOut;
}(utils_1.SpeakeasyBase));
exports.PersonalNameParsedOut = PersonalNameParsedOut;
