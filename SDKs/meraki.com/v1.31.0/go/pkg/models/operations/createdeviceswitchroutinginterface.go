// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateDeviceSwitchRoutingInterfaceRequestBodyIpv6 - The IPv6 settings of the interface.
type CreateDeviceSwitchRoutingInterfaceRequestBodyIpv6 struct {
	// The IPv6 address of the interface. Required if assignmentMode is 'static'. Must not be included if           assignmentMode is 'eui-64'.
	Address *string `json:"address,omitempty"`
	// The IPv6 assignment mode for the interface. Can be either 'eui-64' or 'static'.
	AssignmentMode *string `json:"assignmentMode,omitempty"`
	// The IPv6 default gateway of the interface. Required if prefix is defined and this is the first           interface with IPv6 configured for the switch.
	Gateway *string `json:"gateway,omitempty"`
	// The IPv6 prefix of the interface. Required if IPv6 object is included.
	Prefix *string `json:"prefix,omitempty"`
}

// CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum - Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
type CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum string

const (
	CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnumIgmpSnoopingQuerier CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum = "IGMP snooping querier"
	CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnumDisabled            CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum = "disabled"
	CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnumEnabled             CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum = "enabled"
)

func (e *CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IGMP snooping querier":
		fallthrough
	case "disabled":
		fallthrough
	case "enabled":
		*e = CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum: %s", s)
	}
}

// CreateDeviceSwitchRoutingInterfaceRequestBodyOspfSettings - The OSPF routing settings of the interface.
type CreateDeviceSwitchRoutingInterfaceRequestBodyOspfSettings struct {
	// The OSPF area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPF area. Defaults to 'disabled'.
	Area *string `json:"area,omitempty"`
	// The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.
	Cost *int64 `json:"cost,omitempty"`
	// When enabled, OSPF will not run on the interface, but the subnet will still be advertised.
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

// CreateDeviceSwitchRoutingInterfaceRequestBodyOspfV3 - The OSPFv3 routing settings of the interface.
type CreateDeviceSwitchRoutingInterfaceRequestBodyOspfV3 struct {
	// The OSPFv3 area to which this interface should belong. Can be either 'disabled' or the identifier of an           existing OSPFv3 area. Defaults to 'disabled'.
	Area *string `json:"area,omitempty"`
	// The path cost for this interface. Defaults to 1, but can be increased up to 65535           to give lower priority.
	Cost *int64 `json:"cost,omitempty"`
	// When enabled, OSPFv3 will not run on the interface, but the subnet will still be advertised.
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

type CreateDeviceSwitchRoutingInterfaceRequestBody struct {
	// The next hop for any traffic that isn't going to a directly connected subnet or over a static route.         This IP address must exist in a subnet with a routed interface. Required if this is the first IPv4 interface.
	DefaultGateway *string `json:"defaultGateway,omitempty"`
	// The IP address this switch will use for layer 3 routing on this VLAN or subnet. This cannot be the same         as the switch's management IP.
	InterfaceIP *string `json:"interfaceIp,omitempty"`
	// The IPv6 settings of the interface.
	Ipv6 *CreateDeviceSwitchRoutingInterfaceRequestBodyIpv6 `json:"ipv6,omitempty"`
	// Enable multicast support if, multicast routing between VLANs is required. Options are:         'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
	MulticastRouting *CreateDeviceSwitchRoutingInterfaceRequestBodyMulticastRoutingEnum `json:"multicastRouting,omitempty"`
	// A friendly name or description for the interface or VLAN.
	Name *string `json:"name,omitempty"`
	// The OSPF routing settings of the interface.
	OspfSettings *CreateDeviceSwitchRoutingInterfaceRequestBodyOspfSettings `json:"ospfSettings,omitempty"`
	// The OSPFv3 routing settings of the interface.
	OspfV3 *CreateDeviceSwitchRoutingInterfaceRequestBodyOspfV3 `json:"ospfV3,omitempty"`
	// The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).
	Subnet *string `json:"subnet,omitempty"`
	// The VLAN this routed interface is on. VLAN must be between 1 and 4094.
	VlanID *int64 `json:"vlanId,omitempty"`
}

type CreateDeviceSwitchRoutingInterfaceRequest struct {
	RequestBody *CreateDeviceSwitchRoutingInterfaceRequestBody `request:"mediaType=application/json"`
	Serial      string                                         `pathParam:"style=simple,explode=false,name=serial"`
}

// CreateDeviceSwitchRoutingInterface201ApplicationJSONIpv6 - IPv6 addressing
type CreateDeviceSwitchRoutingInterface201ApplicationJSONIpv6 struct {
	// IPv6 address
	Address *string `json:"address,omitempty"`
	// Assignment mode
	AssignmentMode *string `json:"assignmentMode,omitempty"`
	// IPv6 gateway
	Gateway *string `json:"gateway,omitempty"`
	// IPv6 subnet
	Prefix *string `json:"prefix,omitempty"`
}

// CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfSettings - IPv4 OSPF Settings
type CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfSettings struct {
	// Area id
	Area *string `json:"area,omitempty"`
	// OSPF Cost
	Cost *int64 `json:"cost,omitempty"`
	// Disable sending Hello packets on this interface's IPv4 area
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

// CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfV3 - IPv6 OSPF Settings
type CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfV3 struct {
	// Area id
	Area *string `json:"area,omitempty"`
	// OSPF Cost
	Cost *int64 `json:"cost,omitempty"`
	// Disable sending Hello packets on this interface's IPv6 area
	IsPassiveEnabled *bool `json:"isPassiveEnabled,omitempty"`
}

// CreateDeviceSwitchRoutingInterface201ApplicationJSON - Successful operation
type CreateDeviceSwitchRoutingInterface201ApplicationJSON struct {
	// IPv4 default gateway
	DefaultGateway *string `json:"defaultGateway,omitempty"`
	// The id
	InterfaceID *string `json:"interfaceId,omitempty"`
	// IPv4 address
	InterfaceIP *string `json:"interfaceIp,omitempty"`
	// IPv6 addressing
	Ipv6 *CreateDeviceSwitchRoutingInterface201ApplicationJSONIpv6 `json:"ipv6,omitempty"`
	// Multicast routing status
	MulticastRouting *string `json:"multicastRouting,omitempty"`
	// The name
	Name *string `json:"name,omitempty"`
	// IPv4 OSPF Settings
	OspfSettings *CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfSettings `json:"ospfSettings,omitempty"`
	// IPv6 OSPF Settings
	OspfV3 *CreateDeviceSwitchRoutingInterface201ApplicationJSONOspfV3 `json:"ospfV3,omitempty"`
	// IPv4 subnet
	Subnet *string `json:"subnet,omitempty"`
	// VLAN id
	VlanID *int64 `json:"vlanId,omitempty"`
}

type CreateDeviceSwitchRoutingInterfaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateDeviceSwitchRoutingInterface201ApplicationJSONObject *CreateDeviceSwitchRoutingInterface201ApplicationJSON
}
