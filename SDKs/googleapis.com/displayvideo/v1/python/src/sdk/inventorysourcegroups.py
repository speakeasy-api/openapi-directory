"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class InventorySourceGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def displayvideo_inventory_source_groups_assigned_inventory_sources_bulk_edit(self, request: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest, security: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditSecurity) -> operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditResponse:
        r"""Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources:bulkEdit', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_edit_assigned_inventory_sources_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesBulkEditResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BulkEditAssignedInventorySourcesResponse])
                res.bulk_edit_assigned_inventory_sources_response = out

        return res

    def displayvideo_inventory_source_groups_assigned_inventory_sources_create(self, request: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest, security: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateSecurity) -> operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateResponse:
        r"""Creates an assignment between an inventory source and an inventory source group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "assigned_inventory_source_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssignedInventorySource])
                res.assigned_inventory_source = out

        return res

    def displayvideo_inventory_source_groups_assigned_inventory_sources_delete(self, request: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest, security: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteSecurity) -> operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteResponse:
        r"""Deletes the assignment between an inventory source and an inventory source group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources/{assignedInventorySourceId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def displayvideo_inventory_source_groups_assigned_inventory_sources_list(self, request: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest, security: operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListSecurity) -> operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListResponse:
        r"""Lists inventory sources assigned to an inventory source group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsAssignedInventorySourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAssignedInventorySourcesResponse])
                res.list_assigned_inventory_sources_response = out

        return res

    def displayvideo_inventory_source_groups_create(self, request: operations.DisplayvideoInventorySourceGroupsCreateRequest, security: operations.DisplayvideoInventorySourceGroupsCreateSecurity) -> operations.DisplayvideoInventorySourceGroupsCreateResponse:
        r"""Creates a new inventory source group. Returns the newly created inventory source group if successful."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/inventorySourceGroups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "inventory_source_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventorySourceGroup])
                res.inventory_source_group = out

        return res

    def displayvideo_inventory_source_groups_delete(self, request: operations.DisplayvideoInventorySourceGroupsDeleteRequest, security: operations.DisplayvideoInventorySourceGroupsDeleteSecurity) -> operations.DisplayvideoInventorySourceGroupsDeleteResponse:
        r"""Deletes an inventory source group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsDeleteRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def displayvideo_inventory_source_groups_get(self, request: operations.DisplayvideoInventorySourceGroupsGetRequest, security: operations.DisplayvideoInventorySourceGroupsGetSecurity) -> operations.DisplayvideoInventorySourceGroupsGetResponse:
        r"""Gets an inventory source group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisplayvideoInventorySourceGroupsGetRequest, base_url, '/v1/inventorySourceGroups/{inventorySourceGroupId}', request)
        
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InventorySourceGroup])
                res.inventory_source_group = out

        return res

    def displayvideo_inventory_source_groups_list(self, request: operations.DisplayvideoInventorySourceGroupsListRequest, security: operations.DisplayvideoInventorySourceGroupsListSecurity) -> operations.DisplayvideoInventorySourceGroupsListResponse:
        r"""Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/inventorySourceGroups'
        
        query_params = utils.get_query_params(operations.DisplayvideoInventorySourceGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisplayvideoInventorySourceGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListInventorySourceGroupsResponse])
                res.list_inventory_source_groups_response = out

        return res

    