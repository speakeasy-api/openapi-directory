// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeTestCasesXAmzTargetEnum
type DescribeTestCasesXAmzTargetEnum string

const (
	DescribeTestCasesXAmzTargetEnumCodeBuild20161006DescribeTestCases DescribeTestCasesXAmzTargetEnum = "CodeBuild_20161006.DescribeTestCases"
)

func (e DescribeTestCasesXAmzTargetEnum) ToPointer() *DescribeTestCasesXAmzTargetEnum {
	return &e
}

func (e *DescribeTestCasesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeBuild_20161006.DescribeTestCases":
		*e = DescribeTestCasesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeTestCasesXAmzTargetEnum: %v", v)
	}
}

type DescribeTestCasesRequest struct {
	DescribeTestCasesInput shared.DescribeTestCasesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DescribeTestCasesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type DescribeTestCasesResponse struct {
	ContentType string
	// Success
	DescribeTestCasesOutput *shared.DescribeTestCasesOutput
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
