// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContestLevelEnum string

const (
	ContestLevelEnumInternational       ContestLevelEnum = "international"
	ContestLevelEnumCountry             ContestLevelEnum = "country"
	ContestLevelEnumAdministrativeArea1 ContestLevelEnum = "administrativeArea1"
	ContestLevelEnumRegional            ContestLevelEnum = "regional"
	ContestLevelEnumAdministrativeArea2 ContestLevelEnum = "administrativeArea2"
	ContestLevelEnumLocality            ContestLevelEnum = "locality"
	ContestLevelEnumSubLocality1        ContestLevelEnum = "subLocality1"
	ContestLevelEnumSubLocality2        ContestLevelEnum = "subLocality2"
	ContestLevelEnumSpecial             ContestLevelEnum = "special"
)

func (e *ContestLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "international":
		fallthrough
	case "country":
		fallthrough
	case "administrativeArea1":
		fallthrough
	case "regional":
		fallthrough
	case "administrativeArea2":
		fallthrough
	case "locality":
		fallthrough
	case "subLocality1":
		fallthrough
	case "subLocality2":
		fallthrough
	case "special":
		*e = ContestLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContestLevelEnum: %s", s)
	}
}

type ContestRolesEnum string

const (
	ContestRolesEnumHeadOfState            ContestRolesEnum = "headOfState"
	ContestRolesEnumHeadOfGovernment       ContestRolesEnum = "headOfGovernment"
	ContestRolesEnumDeputyHeadOfGovernment ContestRolesEnum = "deputyHeadOfGovernment"
	ContestRolesEnumGovernmentOfficer      ContestRolesEnum = "governmentOfficer"
	ContestRolesEnumExecutiveCouncil       ContestRolesEnum = "executiveCouncil"
	ContestRolesEnumLegislatorUpperBody    ContestRolesEnum = "legislatorUpperBody"
	ContestRolesEnumLegislatorLowerBody    ContestRolesEnum = "legislatorLowerBody"
	ContestRolesEnumHighestCourtJudge      ContestRolesEnum = "highestCourtJudge"
	ContestRolesEnumJudge                  ContestRolesEnum = "judge"
	ContestRolesEnumSchoolBoard            ContestRolesEnum = "schoolBoard"
	ContestRolesEnumSpecialPurposeOfficer  ContestRolesEnum = "specialPurposeOfficer"
	ContestRolesEnumOtherRole              ContestRolesEnum = "otherRole"
)

func (e *ContestRolesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "headOfState":
		fallthrough
	case "headOfGovernment":
		fallthrough
	case "deputyHeadOfGovernment":
		fallthrough
	case "governmentOfficer":
		fallthrough
	case "executiveCouncil":
		fallthrough
	case "legislatorUpperBody":
		fallthrough
	case "legislatorLowerBody":
		fallthrough
	case "highestCourtJudge":
		fallthrough
	case "judge":
		fallthrough
	case "schoolBoard":
		fallthrough
	case "specialPurposeOfficer":
		fallthrough
	case "otherRole":
		*e = ContestRolesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ContestRolesEnum: %s", s)
	}
}

// Contest - Information about a contest that appears on a voter's ballot.
type Contest struct {
	// A number specifying the position of this contest on the voter's ballot.
	BallotPlacement *string `json:"ballotPlacement,omitempty"`
	// The official title on the ballot for this contest, only where available.
	BallotTitle *string `json:"ballotTitle,omitempty"`
	// The candidate choices for this contest.
	Candidates []Candidate `json:"candidates,omitempty"`
	// Describes the geographic scope of a contest.
	District *ElectoralDistrict `json:"district,omitempty"`
	// A description of any additional eligibility requirements for voting in this contest.
	ElectorateSpecifications *string `json:"electorateSpecifications,omitempty"`
	// The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
	Level []ContestLevelEnum `json:"level,omitempty"`
	// The number of candidates that will be elected to office in this contest.
	NumberElected *string `json:"numberElected,omitempty"`
	// The number of candidates that a voter may vote for in this contest.
	NumberVotingFor *string `json:"numberVotingFor,omitempty"`
	// The name of the office for this contest.
	Office *string `json:"office,omitempty"`
	// If this is a partisan election, the name of the party/parties it is for.
	PrimaryParties []string `json:"primaryParties,omitempty"`
	// [DEPRECATED] If this is a partisan election, the name of the party it is for. This field as deprecated in favor of the array "primaryParties", as contests may contain more than one party.
	PrimaryParty *string `json:"primaryParty,omitempty"`
	// The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include "yes" or "no" for referenda. This field is only populated for contests of type 'Referendum'.
	ReferendumBallotResponses []string `json:"referendumBallotResponses,omitempty"`
	// Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.
	ReferendumBrief *string `json:"referendumBrief,omitempty"`
	// A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
	ReferendumConStatement *string `json:"referendumConStatement,omitempty"`
	// Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.
	ReferendumEffectOfAbstain *string `json:"referendumEffectOfAbstain,omitempty"`
	// The threshold of votes that the referendum needs in order to pass, e.g. "two-thirds". This field is only populated for contests of type 'Referendum'.
	ReferendumPassageThreshold *string `json:"referendumPassageThreshold,omitempty"`
	// A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
	ReferendumProStatement *string `json:"referendumProStatement,omitempty"`
	// A brief description of the referendum. This field is only populated for contests of type 'Referendum'.
	ReferendumSubtitle *string `json:"referendumSubtitle,omitempty"`
	// The full text of the referendum. This field is only populated for contests of type 'Referendum'.
	ReferendumText *string `json:"referendumText,omitempty"`
	// The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.
	ReferendumTitle *string `json:"referendumTitle,omitempty"`
	// A link to the referendum. This field is only populated for contests of type 'Referendum'.
	ReferendumURL *string `json:"referendumUrl,omitempty"`
	// The roles which this office fulfills.
	Roles []ContestRolesEnum `json:"roles,omitempty"`
	// A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
	Sources []Source `json:"sources,omitempty"`
	// "Yes" or "No" depending on whether this a contest being held outside the normal election cycle.
	Special *string `json:"special,omitempty"`
	// The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.
	Type *string `json:"type,omitempty"`
}
