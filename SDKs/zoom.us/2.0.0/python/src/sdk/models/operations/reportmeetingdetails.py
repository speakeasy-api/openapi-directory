"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportMeetingDetailsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ReportMeetingDetailsRequest:
    
    meeting_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\\"), you must **double encode** the UUID before making an API request.
    """  
    

@dataclasses.dataclass
class ReportMeetingDetails200ApplicationXMLCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Custom key associated with the user."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom key associated with the user."""  
    

@dataclasses.dataclass
class ReportMeetingDetails200ApplicationXMLTrackingFields:
    
    field: Optional[str] = dataclasses.field(default=None)
    r"""Tracking fields type."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Tracking fields value."""  
    

@dataclasses.dataclass
class ReportMeetingDetails200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.<br>
    This is only available for paid account.
    """
    
    custom_keys: Optional[list[ReportMeetingDetails200ApplicationXMLCustomKeys]] = dataclasses.field(default=None)
    r"""Custom keys and values assigned to the meeting."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""Department of the host."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting end time."""  
    id: Optional[int] = dataclasses.field(default=None)
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    participants_count: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting participants."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting start time."""  
    topic: Optional[str] = dataclasses.field(default=None)
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
    
    **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
    """  
    tracking_fields: Optional[list[ReportMeetingDetails200ApplicationXMLTrackingFields]] = dataclasses.field(default=None)
    r"""Tracking fields."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""Meeting type."""  
    user_email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetingDetails200ApplicationJSONCustomKeys:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Custom key associated with the user."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom key associated with the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetingDetails200ApplicationJSONTrackingFields:
    
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""Tracking fields type."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Tracking fields value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportMeetingDetails200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.<br>
    This is only available for paid account.
    """
    
    custom_keys: Optional[list[ReportMeetingDetails200ApplicationJSONCustomKeys]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_keys'), 'exclude': lambda f: f is None }})
    r"""Custom keys and values assigned to the meeting."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""Department of the host."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting end time."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    participants_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants_count'), 'exclude': lambda f: f is None }})
    r"""Number of meeting participants."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting start time."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
    
    **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
    """  
    tracking_fields: Optional[list[ReportMeetingDetails200ApplicationJSONTrackingFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_fields'), 'exclude': lambda f: f is None }})
    r"""Tracking fields."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Meeting type."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclasses.dataclass
class ReportMeetingDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_meeting_details_200_application_json_object: Optional[ReportMeetingDetails200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.<br>
    This is only available for paid account.
    """  
    