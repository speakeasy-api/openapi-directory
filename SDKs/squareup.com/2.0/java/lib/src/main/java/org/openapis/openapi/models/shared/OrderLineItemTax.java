/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OrderLineItemTax - Represents a tax that applies to one or more line item in the order.
 * 
 * Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
 * The amount distributed to each line item is relative to the amount the item
 * contributes to the order subtotal.
 */
public class OrderLineItemTax {
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_money")
    public Money appliedMoney;
    public OrderLineItemTax withAppliedMoney(Money appliedMoney) {
        this.appliedMoney = appliedMoney;
        return this;
    }
    
    /**
     * Determines whether the tax was automatically applied to the order based on
     * the catalog configuration. For an example, see 
     * [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_applied")
    public Boolean autoApplied;
    public OrderLineItemTax withAutoApplied(Boolean autoApplied) {
        this.autoApplied = autoApplied;
        return this;
    }
    
    /**
     * The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_object_id")
    public String catalogObjectId;
    public OrderLineItemTax withCatalogObjectId(String catalogObjectId) {
        this.catalogObjectId = catalogObjectId;
        return this;
    }
    
    /**
     * The version of the catalog object that this tax references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catalog_version")
    public Long catalogVersion;
    public OrderLineItemTax withCatalogVersion(Long catalogVersion) {
        this.catalogVersion = catalogVersion;
        return this;
    }
    
    /**
     * Application-defined data attached to this tax. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * 
     * Keys written by applications must be 60 characters or less and must be in the character set
     * `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.
     * 
     * Values have a maximum length of 255 characters.
     * 
     * An application can have up to 10 entries per metadata field.
     * 
     * Entries written by applications are private and can only be read or modified by the same
     * application.
     * 
     * For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public OrderLineItemTax withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The tax's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public OrderLineItemTax withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The percentage of the tax, as a string representation of a decimal
     * number. For example, a value of `"7.25"` corresponds to a percentage of
     * 7.25%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentage")
    public String percentage;
    public OrderLineItemTax withPercentage(String percentage) {
        this.percentage = percentage;
        return this;
    }
    
    /**
     * Indicates the level at which the tax applies. For `ORDER` scoped taxes,
     * Square generates references in `applied_taxes` on all order line items that do
     * not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
     * with references in their `applied_taxes` field.
     * 
     * This field is immutable. To change the scope, you must delete the tax and
     * re-add it as a new tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public OrderLineItemTax withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Indicates the calculation method used to apply the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public OrderLineItemTax withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * A unique ID that identifies the tax only within this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public OrderLineItemTax withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
}
