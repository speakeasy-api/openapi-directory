// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartQueryXAmzTargetEnum
type StartQueryXAmzTargetEnum string

const (
	StartQueryXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101StartQuery StartQueryXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartQuery"
)

func (e *StartQueryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartQuery":
		*e = StartQueryXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartQueryXAmzTargetEnum: %s", s)
	}
}

type StartQueryHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartQueryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartQueryRequest struct {
	Headers StartQueryHeaders
	Request shared.StartQueryRequest `request:"mediaType=application/json"`
}

type StartQueryResponse struct {
	ContentType string
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InsufficientEncryptionPolicyException
	InsufficientEncryptionPolicyException interface{}
	// InsufficientS3BucketPolicyException
	InsufficientS3BucketPolicyException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidQueryStatementException
	InvalidQueryStatementException interface{}
	// InvalidS3BucketNameException
	InvalidS3BucketNameException interface{}
	// InvalidS3PrefixException
	InvalidS3PrefixException interface{}
	// MaxConcurrentQueriesException
	MaxConcurrentQueriesException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// S3BucketDoesNotExistException
	S3BucketDoesNotExistException interface{}
	// Success
	StartQueryResponse *shared.StartQueryResponse
	StatusCode         int
	RawResponse        *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
