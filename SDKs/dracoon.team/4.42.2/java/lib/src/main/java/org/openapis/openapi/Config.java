/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Configuration
 */
public class Config {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Config(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Request algorithms
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;
     * 
     * ### Description:
     * Retrieve a list of available algorithms used for encryption.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of available algorithms is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestAlgorithmsResponse requestAlgorithms(org.openapis.openapi.models.operations.RequestAlgorithmsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/policies/algorithms");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestAlgorithmsResponse res = new org.openapis.openapi.models.operations.RequestAlgorithmsResponse() {{
            algorithmVersionInfoList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AlgorithmVersionInfoList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AlgorithmVersionInfoList.class);
                res.algorithmVersionInfoList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request classification policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;
     * 
     * ### Description:
     * Retrieve a list of classification policies:
     * * `shareClassificationPolicies`
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configured classification policies is returned.
     * 
     * ### Further Information:
     * `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigInfoResponse requestClassificationPoliciesConfigInfo(org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/policies/classifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigInfoResponse res = new org.openapis.openapi.models.operations.RequestClassificationPoliciesConfigInfoResponse() {{
            classificationPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ClassificationPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ClassificationPoliciesConfig.class);
                res.classificationPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of currently enabled product packages
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Returns a list of currently enabled product packages.
     * 
     * ### Precondition:
     * Authenticated user
     * 
     * ### Postcondition:
     * List of currently enabled Product Packages is returned.
     * 
     * ### Further Information:
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestCurrentProductPackagesResponse requestCurrentProductPackages(org.openapis.openapi.models.operations.RequestCurrentProductPackagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/product_packages/current");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestCurrentProductPackagesResponse res = new org.openapis.openapi.models.operations.RequestCurrentProductPackagesResponse() {{
            productPackageResponseList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProductPackageResponseList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProductPackageResponseList.class);
                res.productPackageResponseList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request general settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:
     * Returns a list of configurable general settings.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configurable general settings is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable general settings:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
     * | `cryptoEnabled` | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | `true or false` |
     * | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
     * | `eulaEnabled` | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | `true or false` |
     * | `useS3Storage` | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | `true or false` |
     * | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
     * | `homeRoomsActive` | Determines whether each AD user has a personal home room | `true or false` |
     * | `homeRoomParentId` | Defines a node under which all personal home rooms are located. **NULL** if `homeRoomsActive` is `false` | `Long` |
     * | `subscriptionPlan` | Subscription Plan. &lt;br&gt; 0 = Pro, 1 = Premium, 2 = Basic | `Integer` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated general settings:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | &lt;del&gt;`mediaServerEnabled`&lt;/del&gt; | Determines whether media server is enabled.&lt;br&gt;Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |
     * | &lt;del&gt;`weakPasswordEnabled`&lt;/del&gt; | Determines whether weak password is allowed.&lt;br&gt;Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGeneralSettingsInfoResponse requestGeneralSettingsInfo(org.openapis.openapi.models.operations.RequestGeneralSettingsInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/general");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGeneralSettingsInfoResponse res = new org.openapis.openapi.models.operations.RequestGeneralSettingsInfoResponse() {{
            generalSettingsInfo = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GeneralSettingsInfo out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GeneralSettingsInfo.class);
                res.generalSettingsInfo = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request guest users policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;
     * 
     * ### Description:
     * Retrieve a list of guest users policies.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configured guest users policies is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigInfoResponse requestGuestUsersPoliciesConfigInfo(org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/policies/guest_users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigInfoResponse res = new org.openapis.openapi.models.operations.RequestGuestUsersPoliciesConfigInfoResponse() {{
            guestUsersPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestUsersPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestUsersPoliciesConfig.class);
                res.guestUsersPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request infrastructure properties
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Returns a list of read-only infrastructure properties.  
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of infrastructure properties is returned.
     * 
     * ### Further Information:
     * Source: `core-service.properties`
     * 
     * ### Read-only infrastructure properties:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
     * | `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |
     * | `s3DefaultRegion` | Suggested S3 region | `Region name` |
     * | `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |
     * | `isDracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |
     * | `tenantUuid` | Current tenant UUID | `UUID` |
     * 
     * &lt;/details&gt;
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestInfrastructurePropertiesInfoResponse requestInfrastructurePropertiesInfo(org.openapis.openapi.models.operations.RequestInfrastructurePropertiesInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/infrastructure");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestInfrastructurePropertiesInfoResponse res = new org.openapis.openapi.models.operations.RequestInfrastructurePropertiesInfoResponse() {{
            infrastructureProperties = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.InfrastructureProperties out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.InfrastructureProperties.class);
                res.infrastructureProperties = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of notification channels
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;
     * 
     * ### Description:
     * Retrieve a list of configured notification channels.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of notification channels is returned.
     * 
     * ### Further Information:
     * None.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestNotificationChannelsInfoResponse requestNotificationChannelsInfo(org.openapis.openapi.models.operations.RequestNotificationChannelsInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/notifications/channels");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestNotificationChannelsInfoResponse res = new org.openapis.openapi.models.operations.RequestNotificationChannelsInfoResponse() {{
            notificationChannelList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotificationChannelList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotificationChannelList.class);
                res.notificationChannelList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request password policies
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Retrieve a list of configured password policies for all password types:  
     * * `login`
     * * `shares`
     * * `encryption`
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configured password policies is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Available password policies:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Name | Description | Value | Password Type |
     * | :--- | :--- | :--- | :--- |
     * | `mustContainCharacters` | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`uppercase` - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`lowercase` - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`numeric` - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`special` - at least one special character (letters and digits excluded)&lt;pre&gt;! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;`none` - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`alpha`&lt;/li&gt;&lt;li&gt;`uppercase`&lt;/li&gt;&lt;li&gt;`lowercase`&lt;/li&gt;&lt;li&gt;`numeric`&lt;/li&gt;&lt;li&gt;`special`&lt;/li&gt;&lt;li&gt;`none`&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.&lt;br&gt;e.g. from `["uppercase", "lowercase", "numeric", "special"]`&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined&lt;br&gt;cf. `policies.passwords.dictionary.directory`.&lt;br&gt;&lt;br&gt;If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;li&gt;`shares`&lt;/li&gt;&lt;li&gt;`encryption`&lt;/li&gt;&lt;/ul&gt; |
     * | `numberOfArchivedPasswords` | Number of passwords to archive.&lt;br&gt;Value `0` means that password history is disabled. | `Integer between 0 and 10` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | &lt;ul&gt;&lt;li&gt;`login`&lt;/li&gt;&lt;/ul&gt; |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigInfoResponse requestPasswordPoliciesConfigInfo(org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/policies/passwords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigInfoResponse res = new org.openapis.openapi.models.operations.RequestPasswordPoliciesConfigInfoResponse() {{
            passwordPoliciesConfig = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PasswordPoliciesConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PasswordPoliciesConfig.class);
                res.passwordPoliciesConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of product packages
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Returns a list of product packages.
     * 
     * ### Precondition:
     * Authenticated user
     * 
     * ### Postcondition:
     * List of Product Packages is returned.
     * 
     * ### Further Information:
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestProductPackagesResponse requestProductPackages(org.openapis.openapi.models.operations.RequestProductPackagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/product_packages");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestProductPackagesResponse res = new org.openapis.openapi.models.operations.RequestProductPackagesResponse() {{
            productPackageResponseList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProductPackageResponseList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProductPackageResponseList.class);
                res.productPackageResponseList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request list of configured S3 tags
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;
     * 
     * ### Description:
     * Retrieve all configured S3 tags.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configured S3 tags is returned.
     * 
     * ### Further Information:
     * An empty list is returned if no S3 tags are found / configured.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestS3TagsInfoResponse requestS3TagsInfo(org.openapis.openapi.models.operations.RequestS3TagsInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/s3_tags");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestS3TagsInfoResponse res = new org.openapis.openapi.models.operations.RequestS3TagsInfoResponse() {{
            s3TagList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.S3TagList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.S3TagList.class);
                res.s3TagList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request default values
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Returns a list of configurable system default values.
     * 
     * ### Precondition:
     * Authenticated user.
     * 
     * ### Postcondition:
     * List of configurable default settings is returned.
     * 
     * ### Further Information:
     * None.
     * 
     * ### Configurable default values:
     * &lt;details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
     * | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
     * | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
     * | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
     * | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
     * 
     * &lt;/details&gt;
     * https://tools.ietf.org/html/rfc5646 - Tags for Identifying Languages
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSystemDefaultsInfoResponse requestSystemDefaultsInfo(org.openapis.openapi.models.operations.RequestSystemDefaultsInfoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/info/defaults");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSystemDefaultsInfoResponse res = new org.openapis.openapi.models.operations.RequestSystemDefaultsInfoResponse() {{
            systemDefaults = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SystemDefaults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SystemDefaults.class);
                res.systemDefaults = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Request system settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:  
     * Returns a list of configurable system settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; read global config&lt;/span&gt; required.
     * 
     * ### Postcondition:
     * List of configurable settings is returned.
     * 
     * ### Further Information:
     * Check for every settings key new corresponding API and key below.
     * 
     * If `eula_active` is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned:
     * * `allow_system_global_weak_password`
     * * `eula_active`
     * 
     * ### Configurable settings
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. `GET /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |
     * | `branding_portal_url` | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |
     * | `dblog` | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |
     * | `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days&lt;br&gt;cf. `GET /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |
     * | `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days&lt;br&gt;cf. `GET /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999` |
     * | `default_language` | Define which language should be default.&lt;br&gt;cf. `GET /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |
     * | `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days&lt;br&gt;cf. `GET /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |
     * | `enable_client_side_crypto` | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`&lt;br&gt;default: `false` |
     * | `eula_active` | Each user has to confirm the EULA at first login.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |
     * | `eventlog_retention_period` | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. `GET /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`&lt;br&gt;If set to `0`: no logs are deleted&lt;br&gt;Recommended value: `7` |
     * | `ip_address_logging` | Determines whether a user's IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`&lt;br&gt;cf. `GET /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |
     * | `mailserver` | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |
     * | `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |
     * | `mailserver_password` | **Password is no longer returned.**&lt;br&gt;Check `mailserver_password_set` to determine whether password is set. |  |
     * | `mailserver_password_set` | Indicates if a password is set for the mailserver (because `mailserver_password` is always returned empty).&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.passwordDefined` | `true or false` |
     * | `mailserver_port` | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |
     * | `mailserver_username` | User ame for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |
     * | `mailserver_use_ssl` | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires `mailserver_use_starttls` to be `false`&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |
     * | `mailserver_use_starttls` | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires `mailserver_use_ssl` to be `false`&lt;br&gt;cf. `GET /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |
     * | `syslog` | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |
     * | `syslog_host` | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |
     * | `syslog_port` | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |
     * | `syslog_protocol` | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `GET /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |
     * | `enable_email_notification_button` | Enable mail notification button.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |
     * | `allow_share_password_sms` | Allow sending of share passwords via SMS.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |
     * | `globally_allow_share_password_sms` | Allow sending of share passwords via SMS **system-wide** (read-only).&lt;br&gt;cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.smsConfigEnabled` | `true or false` |
     * | `use_s3_storage` | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.useS3Storage` | `true or false` |
     * | `s3_default_region` |Suggested S3 region (read-only)&lt;br&gt;cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.s3DefaultRegion` | `Region name` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated settings
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | &lt;del&gt;`allow_system_global_weak_password`&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. `GET /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`&lt;br&gt;Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
     * | &lt;del&gt;`branding_server_customer`&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
     * | &lt;del&gt;`branding_server_url`&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | `String` |
     * | &lt;del&gt;`email_from`&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`email_to_sales`&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`email_to_support`&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`file_size_js`&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | `Integer`&lt;br&gt;Recommended value: `10485760` (=`10MB`) |
     * | &lt;del&gt;`system_name`&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use `product.title` | `Display name of the DRACOON` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.RequestSystemSettingsResponse requestSystemSettings(org.openapis.openapi.models.operations.RequestSystemSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.RequestSystemSettingsResponse res = new org.openapis.openapi.models.operations.RequestSystemSettingsResponse() {{
            configOptionList = null;
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConfigOptionList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConfigOptionList.class);
                res.configOptionList = out;
            }
        }
        else if (httpRes.statusCode() == 401 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Update system settings
     * &lt;h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;
     * 
     * ### Description:
     * Update configurable settings.
     * 
     * ### Precondition:
     * Right &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128275; change global config&lt;/span&gt; and
     * role &lt;span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.
     * 
     * ### Postcondition:
     * One or more global settings gets changed.
     * 
     * ### Further Information:
     * This API is deprecated and will be removed in the future.  
     * Check for every settings key new corresponding API and key below.
     * 
     * ### Configurable settings:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |
     * | `branding_portal_url` | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |
     * | `dblog` | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |
     * | `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days&lt;br&gt;cf. `PUT /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days&lt;br&gt;cf. `PUT /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `default_language` | Define which language should be default.&lt;br&gt;cf. `PUT /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |
     * | `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days&lt;br&gt;cf. `PUT /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`&lt;br&gt;Set `0` to disable. |
     * | `enable_client_side_crypto` | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. `PUT /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`&lt;br&gt;default: `false` |
     * | `eula_active` | Each user has to confirm the EULA at first login.&lt;br&gt;cf. `PUT /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |
     * | `eventlog_retention_period` | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. `PUT /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`&lt;br&gt;If set to `0`: no logs are deleted&lt;br&gt;Recommended value: `7` |
     * | `ip_address_logging` | Determines whether a user's IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`&lt;br&gt;cf. `PUT /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |
     * | `mailserver` | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |
     * | `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |
     * | `mailserver_password` | Password for email server&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.password` | `Password for authentication` |
     * | `mailserver_port` | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |
     * | `mailserver_username` | Username for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |
     * | `mailserver_use_ssl` | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires `mailserver_use_starttls` to be `false`&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |
     * | `mailserver_use_starttls` | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires `mailserver_use_ssl` to be `false`&lt;br&gt;cf. `PUT /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |
     * | `syslog` | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |
     * | `syslog_host` | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |
     * | `syslog_port` | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |
     * | `syslog_protocol` | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. `PUT /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |
     * | `enable_email_notification_button` | Enable mail notification button.&lt;br&gt;cf. `PUT /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |
     * | `allow_share_password_sms` | Allow sending of share passwords via SMS.&lt;br&gt;cf. `PUT /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |
     * 
     * &lt;/details&gt;
     * 
     * ### Deprecated settings:
     * &lt;details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;"&gt;
     * &lt;summary style="cursor: pointer; outline: none"&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;
     * 
     * | Setting | Description | Value |
     * | :--- | :--- | :--- |
     * | &lt;del&gt;`allow_system_global_weak_password`&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. `PUT /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`&lt;br&gt;Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |
     * | &lt;del&gt;`branding_server_customer`&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
     * | &lt;del&gt;`branding_server_url`&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | `String` |
     * | &lt;del&gt;`email_from`&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`email_to_sales`&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`email_to_support`&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | `Valid email address` |
     * | &lt;del&gt;`file_size_js`&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | `Integer`&lt;br&gt;Recommended value: `10485760` (=`10MB`) |
     * | &lt;del&gt;`system_name`&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use `product.title` | `Display name of the DRACOON` |
     * 
     * &lt;/details&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSystemSettingsResponse updateSystemSettings(org.openapis.openapi.models.operations.UpdateSystemSettingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v4/config/settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request.headers);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSystemSettingsResponse res = new org.openapis.openapi.models.operations.UpdateSystemSettingsResponse() {{
            errorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 404 || httpRes.statusCode() == 406 || httpRes.statusCode() == 412) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}