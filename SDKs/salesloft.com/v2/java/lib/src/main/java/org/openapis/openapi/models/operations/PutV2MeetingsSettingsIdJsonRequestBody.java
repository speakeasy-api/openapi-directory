/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PutV2MeetingsSettingsIdJsonRequestBody {
    /**
     * Allow other team members to schedule on you behalf.
     */
    @SpeakeasyMetadata("form:name=allow_booking_on_behalf")
    public Boolean allowBookingOnBehalf;
    public PutV2MeetingsSettingsIdJsonRequestBody withAllowBookingOnBehalf(Boolean allowBookingOnBehalf) {
        this.allowBookingOnBehalf = allowBookingOnBehalf;
        return this;
    }
    
    /**
     * Allow team members to insert available time outside your working hours.
     */
    @SpeakeasyMetadata("form:name=allow_booking_overtime")
    public Boolean allowBookingOvertime;
    public PutV2MeetingsSettingsIdJsonRequestBody withAllowBookingOvertime(Boolean allowBookingOvertime) {
        this.allowBookingOvertime = allowBookingOvertime;
        return this;
    }
    
    /**
     * Allow team members to double book events on your calendar.
     */
    @SpeakeasyMetadata("form:name=allow_event_overlap")
    public Boolean allowEventOverlap;
    public PutV2MeetingsSettingsIdJsonRequestBody withAllowEventOverlap(Boolean allowEventOverlap) {
        this.allowEventOverlap = allowEventOverlap;
        return this;
    }
    
    /**
     * The number of days out the user allows a prospect to schedule a meeting
     */
    @SpeakeasyMetadata("form:name=availability_limit")
    public Long availabilityLimit;
    public PutV2MeetingsSettingsIdJsonRequestBody withAvailabilityLimit(Long availabilityLimit) {
        this.availabilityLimit = availabilityLimit;
        return this;
    }
    
    /**
     * If Availability Limits have been turned on
     */
    @SpeakeasyMetadata("form:name=availability_limit_enabled")
    public Boolean availabilityLimitEnabled;
    public PutV2MeetingsSettingsIdJsonRequestBody withAvailabilityLimitEnabled(Boolean availabilityLimitEnabled) {
        this.availabilityLimitEnabled = availabilityLimitEnabled;
        return this;
    }
    
    /**
     * Default buffer duration in minutes set by a user
     */
    @SpeakeasyMetadata("form:name=buffer_time_duration")
    public Long bufferTimeDuration;
    public PutV2MeetingsSettingsIdJsonRequestBody withBufferTimeDuration(Long bufferTimeDuration) {
        this.bufferTimeDuration = bufferTimeDuration;
        return this;
    }
    
    /**
     * Calendar type
     */
    @SpeakeasyMetadata("form:name=calendar_type")
    public String calendarType;
    public PutV2MeetingsSettingsIdJsonRequestBody withCalendarType(String calendarType) {
        this.calendarType = calendarType;
        return this;
    }
    
    /**
     * Default meeting length in minutes set by the user
     */
    @SpeakeasyMetadata("form:name=default_meeting_length")
    public Long defaultMeetingLength;
    public PutV2MeetingsSettingsIdJsonRequestBody withDefaultMeetingLength(Long defaultMeetingLength) {
        this.defaultMeetingLength = defaultMeetingLength;
        return this;
    }
    
    /**
     * Default description of the meeting
     */
    @SpeakeasyMetadata("form:name=description")
    public String description;
    public PutV2MeetingsSettingsIdJsonRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Determines if a user enabled Calendar Sync feature
     */
    @SpeakeasyMetadata("form:name=enable_calendar_sync")
    public Boolean enableCalendarSync;
    public PutV2MeetingsSettingsIdJsonRequestBody withEnableCalendarSync(Boolean enableCalendarSync) {
        this.enableCalendarSync = enableCalendarSync;
        return this;
    }
    
    /**
     * Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
     */
    @SpeakeasyMetadata("form:name=enable_dynamic_location")
    public Boolean enableDynamicLocation;
    public PutV2MeetingsSettingsIdJsonRequestBody withEnableDynamicLocation(Boolean enableDynamicLocation) {
        this.enableDynamicLocation = enableDynamicLocation;
        return this;
    }
    
    /**
     * Default location of the meeting
     */
    @SpeakeasyMetadata("form:name=location")
    public String location;
    public PutV2MeetingsSettingsIdJsonRequestBody withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Determines if the user lost calendar connection
     */
    @SpeakeasyMetadata("form:name=primary_calendar_connection_failed")
    public Boolean primaryCalendarConnectionFailed;
    public PutV2MeetingsSettingsIdJsonRequestBody withPrimaryCalendarConnectionFailed(Boolean primaryCalendarConnectionFailed) {
        this.primaryCalendarConnectionFailed = primaryCalendarConnectionFailed;
        return this;
    }
    
    /**
     * ID of the primary calendar
     */
    @SpeakeasyMetadata("form:name=primary_calendar_id")
    public String primaryCalendarId;
    public PutV2MeetingsSettingsIdJsonRequestBody withPrimaryCalendarId(String primaryCalendarId) {
        this.primaryCalendarId = primaryCalendarId;
        return this;
    }
    
    /**
     * Display name of the primary calendar
     */
    @SpeakeasyMetadata("form:name=primary_calendar_name")
    public String primaryCalendarName;
    public PutV2MeetingsSettingsIdJsonRequestBody withPrimaryCalendarName(String primaryCalendarName) {
        this.primaryCalendarName = primaryCalendarName;
        return this;
    }
    
    /**
     * Determines if meetings are scheduled with a 15 minute buffer between them
     */
    @SpeakeasyMetadata("form:name=schedule_buffer_enabled")
    public Boolean scheduleBufferEnabled;
    public PutV2MeetingsSettingsIdJsonRequestBody withScheduleBufferEnabled(Boolean scheduleBufferEnabled) {
        this.scheduleBufferEnabled = scheduleBufferEnabled;
        return this;
    }
    
    /**
     * The number of hours in advance a user requires someone to a book a meeting with them
     */
    @SpeakeasyMetadata("form:name=schedule_delay")
    public Long scheduleDelay;
    public PutV2MeetingsSettingsIdJsonRequestBody withScheduleDelay(Long scheduleDelay) {
        this.scheduleDelay = scheduleDelay;
        return this;
    }
    
    /**
     * Allow team members to see the details of events on your calendar.
     */
    @SpeakeasyMetadata("form:name=share_event_detail")
    public Boolean shareEventDetail;
    public PutV2MeetingsSettingsIdJsonRequestBody withShareEventDetail(Boolean shareEventDetail) {
        this.shareEventDetail = shareEventDetail;
        return this;
    }
    
    /**
     * Time zone for current calendar
     */
    @SpeakeasyMetadata("form:name=time_zone")
    public String timeZone;
    public PutV2MeetingsSettingsIdJsonRequestBody withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Times available set by a user that can be used to book meetings
     */
    @SpeakeasyMetadata("form:name=times_available,json")
    public java.util.Map<String, Object> timesAvailable;
    public PutV2MeetingsSettingsIdJsonRequestBody withTimesAvailable(java.util.Map<String, Object> timesAvailable) {
        this.timesAvailable = timesAvailable;
        return this;
    }
    
    /**
     * Default title of the meeting
     */
    @SpeakeasyMetadata("form:name=title")
    public String title;
    public PutV2MeetingsSettingsIdJsonRequestBody withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
