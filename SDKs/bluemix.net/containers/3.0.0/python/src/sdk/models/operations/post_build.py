"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class PostBuildRequest:
    
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'application/tar' }})
    r"""Must be the content of a tar archive compressed with gzip. The archive must include a file called 'Dockerfile' at its root. It may include any number of other files which will be accessible in the build context."""  
    t: str = dataclasses.field(metadata={'query_param': { 'field_name': 't', 'style': 'form', 'explode': True }})
    r"""Tag the image with the full path to your private Bluemix registry in the following format: `t=registry.ng.bluemix.net/<namespace>/<image_name>:<tag>`. This path is used to push the image to the private Bluemix registry after it is built."""  
    x_auth_project_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Auth-Project-Id', 'style': 'simple', 'explode': False }})
    r"""The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID."""  
    x_auth_token: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Auth-Token', 'style': 'simple', 'explode': False }})
    r"""The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token."""  
    nocache: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nocache', 'style': 'form', 'explode': True }})
    r"""If you set the query parameter to `nocache=true`, `nocache=True`, or `nocache=1`, the cache will not be used to build your image. To use the cache, enter `nocache=false`, `nocache=False`, or `nocache=0`."""  
    pull: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pull', 'style': 'form', 'explode': True }})
    r"""If set to pull=true, pull=True, or pull=1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull=false, pull=False, or pull=0, then the local image will be used if one exists."""  
    q: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to `q=false`, `q=False`, or `q=0`, the verbose build output is suppressed. To show the verbose build output, enter `q=true`, `q=True`, or `q=1`."""  
    

@dataclasses.dataclass
class PostBuildResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    