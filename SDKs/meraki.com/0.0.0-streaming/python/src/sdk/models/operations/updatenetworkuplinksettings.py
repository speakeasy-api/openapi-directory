"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsCellular:
    r"""The bandwidth settings for the 'cellular' uplink"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""The maximum download limit (integer, in Kbps). null indicates no limit"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""The maximum upload limit (integer, in Kbps). null indicates no limit"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsWan1:
    r"""The bandwidth settings for the 'wan1' uplink"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""The maximum download limit (integer, in Kbps). null indicates no limit"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""The maximum upload limit (integer, in Kbps). null indicates no limit"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsWan2:
    r"""The bandwidth settings for the 'wan2' uplink"""
    
    limit_down: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitDown'), 'exclude': lambda f: f is None }})
    r"""The maximum download limit (integer, in Kbps). null indicates no limit"""  
    limit_up: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitUp'), 'exclude': lambda f: f is None }})
    r"""The maximum upload limit (integer, in Kbps). null indicates no limit"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequestBodyBandwidthLimits:
    r"""A mapping of uplinks to their bandwidth settings (be sure to check which uplinks are supported for your network)"""
    
    cellular: Optional[UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsCellular] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cellular'), 'exclude': lambda f: f is None }})
    r"""The bandwidth settings for the 'cellular' uplink"""  
    wan1: Optional[UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsWan1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan1'), 'exclude': lambda f: f is None }})
    r"""The bandwidth settings for the 'wan1' uplink"""  
    wan2: Optional[UpdateNetworkUplinkSettingsRequestBodyBandwidthLimitsWan2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan2'), 'exclude': lambda f: f is None }})
    r"""The bandwidth settings for the 'wan2' uplink"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequestBody:
    
    bandwidth_limits: Optional[UpdateNetworkUplinkSettingsRequestBodyBandwidthLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandwidthLimits'), 'exclude': lambda f: f is None }})
    r"""A mapping of uplinks to their bandwidth settings (be sure to check which uplinks are supported for your network)"""  
    

@dataclasses.dataclass
class UpdateNetworkUplinkSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkUplinkSettingsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkUplinkSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_uplink_settings_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    