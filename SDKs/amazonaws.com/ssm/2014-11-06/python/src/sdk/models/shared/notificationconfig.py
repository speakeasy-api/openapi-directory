"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import notificationevent_enum as shared_notificationevent_enum
from ..shared import notificationtype_enum as shared_notificationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NotificationConfig:
    r"""Configurations for sending notifications."""
    
    notification_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationArn'), 'exclude': lambda f: f is None }})  
    notification_events: Optional[list[shared_notificationevent_enum.NotificationEventEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationEvents'), 'exclude': lambda f: f is None }})  
    notification_type: Optional[shared_notificationtype_enum.NotificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationType'), 'exclude': lambda f: f is None }})  
    