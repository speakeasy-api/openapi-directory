<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Output
{
    /**
     * Bit error rate. 1=0.1, 2=0.01, 3=0.001, 4=0.0001,5=0.00001,6=0.000001. >6=Lora: 7=SF7,8=SF8,9=SF9,10=SF10,11=SF11,12=SF12
     * 
     * @var ?int $ber
     */
	#[\JMS\Serializer\Annotation\SerializedName('ber')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ber = null;
    
    /**
     * Colour schema code OR filename. 1 = Cellular (5), 2=Red, 3=Green, 4=Blue, 5=Microwave(7), 7=Custom RGB, 8=Automatic by frequency, 9=Greyscale / GIS, 10=Rainbow(24), 11=Green/Blue/Red, 13=Sub noise floor (10), 14=TV broadcasting (4), 15=Red threshold, 16=Green threshold, 17=Blue threshold. RAINBOW.dBm, CUSTOMSCHEMA.dBm..
     * 
     * @var ?string $col
     */
	#[\JMS\Serializer\Annotation\SerializedName('col')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $col = null;
    
    /**
     * Modulation. 1=4QAM,2=16QAM,3=64QAM,4=256QAM,5=1024QAM,6=BPSK,7=QPSK,8=8PSK,9=16PSK,10=32PSK,11=LoRa
     * 
     * @var ?int $mod
     */
	#[\JMS\Serializer\Annotation\SerializedName('mod')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $mod = null;
    
    /**
     * Noise floor in dBm for use with out=4 / SNR
     * 
     * @var ?int $nf
     */
	#[\JMS\Serializer\Annotation\SerializedName('nf')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $nf = null;
    
    /**
     * Measured units. 1=dB,2=dBm,3=dBuV,4=SNR
     * 
     * @var ?int $out
     */
	#[\JMS\Serializer\Annotation\SerializedName('out')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $out = null;
    
    /**
     * Radius in kilometres for output
     * 
     * @var ?float $rad
     */
	#[\JMS\Serializer\Annotation\SerializedName('rad')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $rad = null;
    
    /**
     * Resolution in metres for output
     * 
     * @var ?int $res
     */
	#[\JMS\Serializer\Annotation\SerializedName('res')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $res = null;
    
    /**
     * Distance units in either metres/kilometres (metric) or feet/miles (imperial)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OutputUnitsEnum $units
     */
	#[\JMS\Serializer\Annotation\SerializedName('units')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\OutputUnitsEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OutputUnitsEnum $units = null;
    
	public function __construct()
	{
		$this->ber = null;
		$this->col = null;
		$this->mod = null;
		$this->nf = null;
		$this->out = null;
		$this->rad = null;
		$this->res = null;
		$this->units = null;
	}
}
