/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Filters {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Geometry Filter
   */
  getSearchVersionNumberGeometryFilterExt(
    req: operations.GetSearchVersionNumberGeometryFilterExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberGeometryFilterExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchVersionNumberGeometryFilterExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/geometryFilter.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberGeometryFilterExtResponse =
        new operations.GetSearchVersionNumberGeometryFilterExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Routed Filter
   */
  getSearchVersionNumberRoutedFilterPositionHeadingExt(
    req: operations.GetSearchVersionNumberRoutedFilterPositionHeadingExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchVersionNumberRoutedFilterPositionHeadingExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSearchVersionNumberRoutedFilterPositionHeadingExtRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchVersionNumberRoutedFilterPositionHeadingExtResponse =
        new operations.GetSearchVersionNumberRoutedFilterPositionHeadingExtResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Geometry Filter
   */
  postSearchVersionNumberGeometryFilterExt(
    req: operations.PostSearchVersionNumberGeometryFilterExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSearchVersionNumberGeometryFilterExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostSearchVersionNumberGeometryFilterExtRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/geometryFilter.{ext}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSearchVersionNumberGeometryFilterExtResponse =
        new operations.PostSearchVersionNumberGeometryFilterExtResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Routed Filter
   */
  postSearchVersionNumberRoutedFilterPositionHeadingExt(
    req: operations.PostSearchVersionNumberRoutedFilterPositionHeadingExtRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostSearchVersionNumberRoutedFilterPositionHeadingExtResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostSearchVersionNumberRoutedFilterPositionHeadingExtRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostSearchVersionNumberRoutedFilterPositionHeadingExtResponse =
        new operations.PostSearchVersionNumberRoutedFilterPositionHeadingExtResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200 ||
          httpRes?.status == 400 ||
          httpRes?.status == 403 ||
          httpRes?.status == 405 ||
          httpRes?.status == 596 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }
}
