/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BasicYarnAutoscalingConfig - Basic autoscaling configurations for YARN.
 */
public class BasicYarnAutoscalingConfig {
    /**
     * Required. Timeout for YARN graceful decommissioning of Node Managers. Specifies the duration to wait for jobs to complete before forcefully removing workers (and potentially interrupting jobs). Only applicable to downscaling operations.Bounds: 0s, 1d.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gracefulDecommissionTimeout")
    public String gracefulDecommissionTimeout;
    public BasicYarnAutoscalingConfig withGracefulDecommissionTimeout(String gracefulDecommissionTimeout) {
        this.gracefulDecommissionTimeout = gracefulDecommissionTimeout;
        return this;
    }
    
    /**
     * Required. Fraction of average YARN pending memory in the last cooldown period for which to remove workers. A scale-down factor of 1 will result in scaling down so that there is no available memory remaining after the update (more aggressive scaling). A scale-down factor of 0 disables removing workers, which can be beneficial for autoscaling a single job. See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleDownFactor")
    public Double scaleDownFactor;
    public BasicYarnAutoscalingConfig withScaleDownFactor(Double scaleDownFactor) {
        this.scaleDownFactor = scaleDownFactor;
        return this;
    }
    
    /**
     * Optional. Minimum scale-down threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0 means the autoscaler will scale down on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleDownMinWorkerFraction")
    public Double scaleDownMinWorkerFraction;
    public BasicYarnAutoscalingConfig withScaleDownMinWorkerFraction(Double scaleDownMinWorkerFraction) {
        this.scaleDownMinWorkerFraction = scaleDownMinWorkerFraction;
        return this;
    }
    
    /**
     * Required. Fraction of average YARN pending memory in the last cooldown period for which to add workers. A scale-up factor of 1.0 will result in scaling up so that there is no pending memory remaining after the update (more aggressive scaling). A scale-up factor closer to 0 will result in a smaller magnitude of scaling up (less aggressive scaling). See How autoscaling works (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/autoscaling#how_autoscaling_works) for more information.Bounds: 0.0, 1.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleUpFactor")
    public Double scaleUpFactor;
    public BasicYarnAutoscalingConfig withScaleUpFactor(Double scaleUpFactor) {
        this.scaleUpFactor = scaleUpFactor;
        return this;
    }
    
    /**
     * Optional. Minimum scale-up threshold as a fraction of total cluster size before scaling occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of 0 means the autoscaler will scale up on any recommended change.Bounds: 0.0, 1.0. Default: 0.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaleUpMinWorkerFraction")
    public Double scaleUpMinWorkerFraction;
    public BasicYarnAutoscalingConfig withScaleUpMinWorkerFraction(Double scaleUpMinWorkerFraction) {
        this.scaleUpMinWorkerFraction = scaleUpMinWorkerFraction;
        return this;
    }
    
}
