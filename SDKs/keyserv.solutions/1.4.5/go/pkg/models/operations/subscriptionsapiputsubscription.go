// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscriptionsAPIPutSubscriptionRequestBodyType string

const (
	SubscriptionsAPIPutSubscriptionRequestBodyTypeSubscriptionCreateModify SubscriptionsAPIPutSubscriptionRequestBodyType = "SubscriptionCreateModify"
)

type SubscriptionsAPIPutSubscriptionRequestBody struct {
	SubscriptionCreateModify *shared.SubscriptionCreateModify

	Type SubscriptionsAPIPutSubscriptionRequestBodyType
}

func CreateSubscriptionsAPIPutSubscriptionRequestBodySubscriptionCreateModify(subscriptionCreateModify shared.SubscriptionCreateModify) SubscriptionsAPIPutSubscriptionRequestBody {
	typ := SubscriptionsAPIPutSubscriptionRequestBodyTypeSubscriptionCreateModify

	return SubscriptionsAPIPutSubscriptionRequestBody{
		SubscriptionCreateModify: &subscriptionCreateModify,
		Type:                     typ,
	}
}

func (u *SubscriptionsAPIPutSubscriptionRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	subscriptionCreateModify := new(shared.SubscriptionCreateModify)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionCreateModify); err == nil {
		u.SubscriptionCreateModify = subscriptionCreateModify
		u.Type = SubscriptionsAPIPutSubscriptionRequestBodyTypeSubscriptionCreateModify
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SubscriptionsAPIPutSubscriptionRequestBody) MarshalJSON() ([]byte, error) {
	if u.SubscriptionCreateModify != nil {
		return json.Marshal(u.SubscriptionCreateModify)
	}

	return nil, nil
}

type SubscriptionsAPIPutSubscriptionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
