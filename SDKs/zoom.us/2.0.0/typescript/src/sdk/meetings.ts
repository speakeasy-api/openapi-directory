/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Meeting operations
 */
export class Meetings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Perform batch poll creation
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>
   *
   * **Scopes**: `meeting:write:admin` `meeting:write`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
   * **Prerequisites**:<br>
   * * Host user type must be **Pro** or higher plan.
   * * Polling feature must be enabled in the host's account.
   * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
   */
  createBatchPolls(
    req: operations.CreateBatchPollsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateBatchPollsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateBatchPollsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/batch_polls",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateBatchPollsResponse =
        new operations.CreateBatchPollsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBatchPolls201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBatchPolls201ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Get live stream details
   *
   * @remarks
   * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to get a meeting's live stream configuration details such as Stream URL, Stream Key and Page URL.<br><br>
   * **Prerequisites:**<br>
   * * Meeting host must be a licensed user with a Pro or higher plan.<br>
   * * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.<br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   *
   *
   */
  getLiveStreamDetails(
    req: operations.GetLiveStreamDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLiveStreamDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLiveStreamDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/livestream",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLiveStreamDetailsResponse =
        new operations.GetLiveStreamDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLiveStreamDetails200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetLiveStreamDetails200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Use in-Meeting recording controls
   *
   * @remarks
   * Use this API to control the [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) **recording features** such as starting a recording, stopping a recording, pausing a recording, and resuming a recording. This API only works for Cloud Recordings and not for local recordings.
   *
   *
   * **Prerequisite:**
   * * The meeting must be a live meeting.
   * * Cloud Recording must be enabled.
   * * The user using this API must either be the host or alternative host of the meeting.
   *
   * **Scopes:** `meeting:write`, `meeting:write:admin`, `meeting:master`
   */
  inMeetingRecordingControl(
    req: operations.InMeetingRecordingControlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InMeetingRecordingControlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InMeetingRecordingControlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/live_meetings/{meetingId}/events",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InMeetingRecordingControlResponse =
        new operations.InMeetingRecordingControlResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inMeetingRecordingControl202ApplicationJSONAny = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List meeting templates
   *
   * @remarks
   * Use this API to list [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) that are available to be used by a user.
   *
   * **Scope:** `meeting:read` or `meeting:read:admin`
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   *
   */
  listMeetingTemplates(
    req: operations.ListMeetingTemplatesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListMeetingTemplatesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListMeetingTemplatesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userId}/meeting_templates",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListMeetingTemplatesResponse =
        new operations.ListMeetingTemplatesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMeetingTemplates200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListMeetingTemplates200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * List past meeting's poll results
   *
   * @remarks
   * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. Use this API to list poll results of a meeting.<br><br>
   *
   * **Scopes**: `meeting:read:admin`, `meeting:read`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium` <br>
   * **Prerequisites**:<br>
   * * Host user type must be **Pro**.
   * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
   */
  listPastMeetingPolls(
    req: operations.ListPastMeetingPollsRequest,
    security: operations.ListPastMeetingPollsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPastMeetingPollsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPastMeetingPollsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/past_meetings/{meetingId}/polls",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListPastMeetingPollsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPastMeetingPollsResponse =
        new operations.ListPastMeetingPollsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPastMeetingPolls200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPastMeetingPolls200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a meeting
   *
   * @remarks
   * Retrieve the details of a meeting.<br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meeting(
    req: operations.MeetingRequest,
    security: operations.MeetingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingResponse = new operations.MeetingResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meeting200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Meeting200ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a meeting
   *
   * @remarks
   * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. <br>This API has a daily rate limit of 100 requests per day. Therefore, only 100 **Create a Meeting** API requests are permitted within a 24 hour window for a user.<br>
   *
   * <aside>The <code>start_url</code> of a meeting is a URL using which a host or an alternative host can start a meeting. The expiration time for the <code>start_url</code> field is two hours for all regular users.
   *
   * For custCreate meeting hosts( i.e., users created using the <code>custCreate</code> option via the [Create Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usercreate) API), the expiration time of the <code>start_url</code> field is 90 days from the generation of the <code>start_url</code>.
   *
   * For security reasons, the recommended way to retrieve the updated value for the <code>start_url</code> field programmatically (after expiry) is by calling the [Retrieve a Meeting API](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting) and referring to the value of the <code>start_url</code> field in the response.</aside><br><br>
   * Scopes: `meeting:write:admin` `meeting:write`
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   */
  meetingCreate(
    req: operations.MeetingCreateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userId}/meetings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingCreateResponse =
        new operations.MeetingCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meetingCreate201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.MeetingCreate201ApplicationJSON
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [300, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a meeting
   *
   * @remarks
   * Delete a meeting.<br><br>
   * **Scopes:** `meeting:write:admin` `meeting:write`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingDelete(
    req: operations.MeetingDeleteRequest,
    security: operations.MeetingDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingDeleteResponse =
        new operations.MeetingDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get meeting invitation
   *
   * @remarks
   * Retrieve the meeting invite note that was sent for a specific meeting.<br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingInvitation(
    req: operations.MeetingInvitationRequest,
    security: operations.MeetingInvitationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingInvitationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingInvitationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/invitation",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingInvitationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingInvitationResponse =
        new operations.MeetingInvitationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meetingInvitation = utils.objectToClass(
              httpRes?.data,
              operations.MeetingInvitationMeetingInvitation
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Live Stream Status
   *
   * @remarks
   * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update the status of a meeting's live stream.<br><br>
   * **Prerequisites:**<br>
   * * Meeting host must have a Pro license.<br>
   * **Scopes:** `meeting:write:admin` `meeting:write`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingLiveStreamStatusUpdate(
    req: operations.MeetingLiveStreamStatusUpdateRequest,
    security: operations.MeetingLiveStreamStatusUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingLiveStreamStatusUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingLiveStreamStatusUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/livestream/status",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingLiveStreamStatusUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingLiveStreamStatusUpdateResponse =
        new operations.MeetingLiveStreamStatusUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 300, 400, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a live stream
   *
   * @remarks
   * Zoom allows users to [live stream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Use this API to update a meeting's live stream information.<br><br>
   * **Prerequisites:**<br>
   * * Meeting host must have a Pro license.<br>
   * **Scopes:** `meeting:write:admin` `meeting:write`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   *
   */
  meetingLiveStreamUpdate(
    req: operations.MeetingLiveStreamUpdateRequest,
    security: operations.MeetingLiveStreamUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingLiveStreamUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingLiveStreamUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/livestream",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingLiveStreamUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingLiveStreamUpdateResponse =
        new operations.MeetingLiveStreamUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a meeting poll
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.<br><br>
   *
   * **Scopes**: `meeting:write:admin` `meeting:write`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
   * **Prerequisites**:<br>
   * * Host user type must be **Pro** or higher plan.
   * * Polling feature must be enabled in the host's account.
   * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
   */
  meetingPollCreate(
    req: operations.MeetingPollCreateRequest,
    security: operations.MeetingPollCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingPollCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingPollCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/polls",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingPollCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingPollCreateResponse =
        new operations.MeetingPollCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.poll = utils.objectToClass(
              httpRes?.data,
              operations.MeetingPollCreatePoll2
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a meeting poll
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br>
   * **Scopes**: `meeting:write:admin` `meeting:write`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light` <br>
   * **Prerequisites**:<br>
   * * Host user type must be **Pro**.
   * * Polling feature should be enabled in the host's account.
   * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
   */
  meetingPollDelete(
    req: operations.MeetingPollDeleteRequest,
    security: operations.MeetingPollDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingPollDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingPollDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/polls/{pollId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingPollDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingPollDeleteResponse =
        new operations.MeetingPollDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a meeting poll
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to get information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).<br><br>
   * **Scopes**: `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   *
   */
  meetingPollGet(
    req: operations.MeetingPollGetRequest,
    security: operations.MeetingPollGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingPollGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingPollGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/polls/{pollId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingPollGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingPollGetResponse =
        new operations.MeetingPollGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.poll = utils.objectToClass(
              httpRes?.data,
              operations.MeetingPollGetPoll
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Update a meeting poll
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)<br><br>
   * **Scopes**: `meeting:write:admin` `meeting:write`
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingPollUpdate(
    req: operations.MeetingPollUpdateRequest,
    security: operations.MeetingPollUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingPollUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingPollUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/polls/{pollId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingPollUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingPollUpdateResponse =
        new operations.MeetingPollUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List meeting polls
   *
   * @remarks
   * Polls allow the meeting host to survey attendees. Use this API to list [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.<br><br>
   *
   * **Scopes**: `meeting:read:admin` `meeting:read`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
   * **Prerequisites**:<br>
   * * Host user type must be **Pro** or higher plan.
   * * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.
   */
  meetingPolls(
    req: operations.MeetingPollsRequest,
    security: operations.MeetingPollsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingPollsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingPollsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/polls",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingPollsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingPollsResponse =
        new operations.MeetingPollsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pollList = utils.objectToClass(
              httpRes?.data,
              operations.MeetingPollsPollList
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Add meeting registrant
   *
   * @remarks
   * Register a participant for a meeting.<br><br> Note that there is a maximum limit of 4999 registrants per meeting and users will see an error if the capacity has reached.
   *
   * **Prerequisite:**<br>
   * * Host user type must be "Licensed".
   *
   * **Scopes:** `meeting:write:admin` `meeting:write`
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  meetingRegistrantCreate(
    req: operations.MeetingRegistrantCreateRequest,
    security: operations.MeetingRegistrantCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingRegistrantCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRegistrantCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingRegistrantCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingRegistrantCreateResponse =
        new operations.MeetingRegistrantCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meetingRegistrantCreate201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.MeetingRegistrantCreate201ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update registration questions
   *
   * @remarks
   * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br><br>
   * **Scopes:** `meeting:write`, `meeting:write:admin`<br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   *
   */
  meetingRegistrantQuestionUpdate(
    req: operations.MeetingRegistrantQuestionUpdateRequest,
    security: operations.MeetingRegistrantQuestionUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingRegistrantQuestionUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRegistrantQuestionUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants/questions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingRegistrantQuestionUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingRegistrantQuestionUpdateResponse =
        new operations.MeetingRegistrantQuestionUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update registrant's status
   *
   * @remarks
   * Update a meeting registrant's status by either approving, cancelling or denying a registrant from joining the meeting.<br><br>
   * **Scopes:** `meeting:write:admin` `meeting:write`
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   */
  meetingRegistrantStatus(
    req: operations.MeetingRegistrantStatusRequest,
    security: operations.MeetingRegistrantStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingRegistrantStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRegistrantStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants/status",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingRegistrantStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingRegistrantStatusResponse =
        new operations.MeetingRegistrantStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List meeting registrants
   *
   * @remarks
   * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). Use this API to list users that have registered for a meeting.<br><br>
   * **Scopes**: `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   */
  meetingRegistrants(
    req: operations.MeetingRegistrantsRequest,
    security: operations.MeetingRegistrantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingRegistrantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRegistrantsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingRegistrantsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingRegistrantsResponse =
        new operations.MeetingRegistrantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.registrationList = utils.objectToClass(
              httpRes?.data,
              operations.MeetingRegistrantsRegistrationList
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List registration questions
   *
   * @remarks
   * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).<br>
   *
   * **Scopes:** `meeting:read`, `meeting:read:admin`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingRegistrantsQuestionsGet(
    req: operations.MeetingRegistrantsQuestionsGetRequest,
    security: operations.MeetingRegistrantsQuestionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingRegistrantsQuestionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingRegistrantsQuestionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants/questions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingRegistrantsQuestionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingRegistrantsQuestionsGetResponse =
        new operations.MeetingRegistrantsQuestionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meetingRegistrantQuestions = utils.objectToClass(
              httpRes?.data,
              operations.MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Update meeting status
   *
   * @remarks
   * Update the status of a meeting.<br><br>
   * **Scopes:** `meeting:write:admin` `meeting:write`
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  meetingStatus(
    req: operations.MeetingStatusRequest,
    security: operations.MeetingStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/status",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingStatusSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingStatusResponse =
        new operations.MeetingStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a meeting
   *
   * @remarks
   * Update the details of a meeting.<br>This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.<br>
   * **Scopes:** `meeting:write:admin` `meeting:write`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingUpdateJson(
    req: operations.MeetingUpdateJsonRequest,
    security: operations.MeetingUpdateJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingUpdateJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingUpdateJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingUpdateJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingUpdateJsonResponse =
        new operations.MeetingUpdateJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a meeting
   *
   * @remarks
   * Update the details of a meeting.<br>This API has a rate limit of 100 requests per day. Therefore, a meeting can only be updated for a maximum of 100 times within a 24 hour window.<br>
   * **Scopes:** `meeting:write:admin` `meeting:write`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   *
   *
   */
  meetingUpdateMultipart(
    req: operations.MeetingUpdateMultipartRequest,
    security: operations.MeetingUpdateMultipartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingUpdateMultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingUpdateMultipartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingUpdateMultipartSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingUpdateMultipartResponse =
        new operations.MeetingUpdateMultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 300, 400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a meeting registrant
   *
   * @remarks
   * Delete a meeting registrant.<br><br>
   * **Scopes**: `meeting:write:admin` `meeting:write`<br>
   *  <br>
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   */
  meetingregistrantdelete(
    req: operations.MeetingregistrantdeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingregistrantdeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingregistrantdeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/meetings/{meetingId}/registrants/{registrantId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingregistrantdeleteResponse =
        new operations.MeetingregistrantdeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List meetings
   *
   * @remarks
   * List all the meetings that were scheduled for a user (meeting host). This API only supports scheduled meetings and thus, details on instant meetings are not returned via this API.<br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   */
  meetings(
    req: operations.MeetingsRequest,
    security: operations.MeetingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.MeetingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MeetingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userId}/meetings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.MeetingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MeetingsResponse = new operations.MeetingsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.groupList = utils.objectToClass(
              httpRes?.data,
              operations.MeetingsGroupList
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Get past meeting details
   *
   * @remarks
   * Get details on a past meeting. <br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
   * > **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
   */
  pastMeetingDetails(
    req: operations.PastMeetingDetailsRequest,
    security: operations.PastMeetingDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PastMeetingDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PastMeetingDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/past_meetings/{meetingUUID}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PastMeetingDetailsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PastMeetingDetailsResponse =
        new operations.PastMeetingDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pastMeetingDetails200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PastMeetingDetails200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get past meeting participants
   *
   * @remarks
   * Retrieve information on participants from a past meeting. <br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   * **Prerequisites:**<br>
   * * Paid account on a Pro or higher plan.
   *
   * <br> <br>  **Note**: Please double encode your UUID when using this API if the UUID begins with a '/'or contains '//' in it.
   *
   */
  pastMeetingParticipants(
    req: operations.PastMeetingParticipantsRequest,
    security: operations.PastMeetingParticipantsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PastMeetingParticipantsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PastMeetingParticipantsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/past_meetings/{meetingUUID}/participants",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PastMeetingParticipantsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PastMeetingParticipantsResponse =
        new operations.PastMeetingParticipantsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pastMeetingParticipants200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PastMeetingParticipants200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List ended meeting instances
   *
   * @remarks
   * Get a list of ended meeting instances<br><br>
   * **Scopes:** `meeting:read:admin` `meeting:read`<br>
   *
   *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
   */
  pastMeetings(
    req: operations.PastMeetingsRequest,
    security: operations.PastMeetingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PastMeetingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PastMeetingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/past_meetings/{meetingId}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PastMeetingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PastMeetingsResponse =
        new operations.PastMeetingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.meetingInstances = utils.objectToClass(
              httpRes?.data,
              operations.PastMeetingsMeetingInstances
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }
}
