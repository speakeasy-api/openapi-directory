"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import healthcheck as shared_healthcheck
from ..shared import label as shared_label
from ..shared import template as shared_template
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Pool:
    r"""Successful response"""
    
    auto_restart: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRestart'), 'exclude': lambda f: f is None }})
    r"""Whether replicas in this pool should be restarted if they experience a failure. The default value is true."""  
    base_instance_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseInstanceName'), 'exclude': lambda f: f is None }})
    r"""The base instance name to use for the replicas in this pool. This must match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances in this replica pool will be named in the format <base-instance-name>-<ID>. The <ID> postfix will be a four character alphanumeric identifier generated by the service.
    
    If this is not specified by the user, a random base instance name is generated by the service.
    """  
    current_num_replicas: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentNumReplicas'), 'exclude': lambda f: f is None }})
    r"""[Output Only] The current number of replicas in the pool."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""An optional description of the replica pool."""  
    health_checks: Optional[list[shared_healthcheck.HealthCheck]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthChecks'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Please use template[].healthChecks instead."""  
    initial_num_replicas: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialNumReplicas'), 'exclude': lambda f: f is None }})
    r"""The initial number of replicas this pool should have. You must provide a value greater than or equal to 0."""  
    labels: Optional[list[shared_label.Label]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""A list of labels to attach to this replica pool and all created virtual machines in this replica pool."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the replica pool. Must follow the regex [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long."""  
    num_replicas: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numReplicas'), 'exclude': lambda f: f is None }})
    r"""Deprecated! Use initial_num_replicas instead."""  
    resource_views: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceViews'), 'exclude': lambda f: f is None }})
    r"""The list of resource views that should be updated with all the replicas that are managed by this pool."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""[Output Only] A self-link to the replica pool."""  
    target_pool: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetPool'), 'exclude': lambda f: f is None }})
    r"""Deprecated, please use target_pools instead."""  
    target_pools: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetPools'), 'exclude': lambda f: f is None }})
    r"""A list of target pools to update with the replicas that are managed by this pool. If specified, the replicas in this replica pool will be added to the specified target pools for load balancing purposes. The replica pool must live in the same region as the specified target pools. These values must be the target pool resource names, and not fully qualified URLs."""  
    template: Optional[shared_template.Template] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template'), 'exclude': lambda f: f is None }})
    r"""The template used for creating replicas in the pool."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Deprecated! Do not set."""  
    