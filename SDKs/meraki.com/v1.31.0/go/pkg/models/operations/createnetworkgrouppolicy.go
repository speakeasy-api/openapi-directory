// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateNetworkGroupPolicyPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// CreateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits - The bandwidth limits object, specifying upload and download speed for clients bound to the group policy. These are only enforced if 'settings' is set to 'custom'.
type CreateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits struct {
	// The maximum download limit (integer, in Kbps). null indicates no limit
	LimitDown *int64 `json:"limitDown,omitempty"`
	// The maximum upload limit (integer, in Kbps). null indicates no limit
	LimitUp *int64 `json:"limitUp,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum - How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.
type CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumCustom         CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "custom"
	CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumIgnore         CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "ignore"
	CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum = "network default"
)

func (e *CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyBandwidth -     The bandwidth settings for clients bound to your group policy.
type CreateNetworkGroupPolicyRequestBodyBandwidth struct {
	// The bandwidth limits object, specifying upload and download speed for clients bound to the group policy. These are only enforced if 'settings' is set to 'custom'.
	BandwidthLimits *CreateNetworkGroupPolicyRequestBodyBandwidthBandwidthLimits `json:"bandwidthLimits,omitempty"`
	// How bandwidth limits are enforced. Can be 'network default', 'ignore' or 'custom'.
	Settings *CreateNetworkGroupPolicyRequestBodyBandwidthSettingsEnum `json:"settings,omitempty"`
}

type CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum string

const (
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAfp         CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "AFP"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAirPlay     CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "AirPlay"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumAllServices CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "All Services"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumBitTorrent  CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "BitTorrent"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumFtp         CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "FTP"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumPrinters    CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Printers"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumSSH         CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "SSH"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumSamba       CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Samba"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumScanners    CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "Scanners"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumIChat       CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "iChat"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnumITunes      CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum = "iTunes"
)

func (e *CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AFP":
		fallthrough
	case "AirPlay":
		fallthrough
	case "All Services":
		fallthrough
	case "BitTorrent":
		fallthrough
	case "FTP":
		fallthrough
	case "Printers":
		fallthrough
	case "SSH":
		fallthrough
	case "Samba":
		fallthrough
	case "Scanners":
		fallthrough
	case "iChat":
		fallthrough
	case "iTunes":
		*e = CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum: %s", s)
	}
}

type CreateNetworkGroupPolicyRequestBodyBonjourForwardingRules struct {
	// A description for your Bonjour forwarding rule. Optional.
	Description *string `json:"description,omitempty"`
	// A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'
	Services []CreateNetworkGroupPolicyRequestBodyBonjourForwardingRulesServicesEnum `json:"services"`
	// The ID of the service VLAN. Required.
	VlanID string `json:"vlanId"`
}

// CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum - How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.
type CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumCustom         CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "custom"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumIgnore         CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "ignore"
	CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum = "network default"
)

func (e *CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyBonjourForwarding - The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
type CreateNetworkGroupPolicyRequestBodyBonjourForwarding struct {
	// A list of the Bonjour forwarding rules for your group policy. If 'settings' is set to 'custom', at least one rule must be specified.
	Rules []CreateNetworkGroupPolicyRequestBodyBonjourForwardingRules `json:"rules,omitempty"`
	// How Bonjour rules are applied. Can be 'network default', 'ignore' or 'custom'.
	Settings *CreateNetworkGroupPolicyRequestBodyBonjourForwardingSettingsEnum `json:"settings,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum - How URL patterns are applied. Can be 'network default', 'append' or 'override'.
type CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumAppend         CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "append"
	CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "network default"
	CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnumOverride       CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum = "override"
)

func (e *CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns - Settings for allowed URL patterns
type CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns struct {
	// A list of URL patterns that are allowed
	Patterns []string `json:"patterns,omitempty"`
	// How URL patterns are applied. Can be 'network default', 'append' or 'override'.
	Settings *CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatternsSettingsEnum `json:"settings,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum - How URL categories are applied. Can be 'network default', 'append' or 'override'.
type CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumAppend         CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "append"
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "network default"
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnumOverride       CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum = "override"
)

func (e *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories - Settings for blocked URL categories
type CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories struct {
	// A list of URL categories to block
	Categories []string `json:"categories,omitempty"`
	// How URL categories are applied. Can be 'network default', 'append' or 'override'.
	Settings *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategoriesSettingsEnum `json:"settings,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum - How URL patterns are applied. Can be 'network default', 'append' or 'override'.
type CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumAppend         CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "append"
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "network default"
	CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnumOverride       CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum = "override"
)

func (e *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "append":
		fallthrough
	case "network default":
		fallthrough
	case "override":
		*e = CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns - Settings for blocked URL patterns
type CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns struct {
	// A list of URL patterns that are blocked
	Patterns []string `json:"patterns,omitempty"`
	// How URL patterns are applied. Can be 'network default', 'append' or 'override'.
	Settings *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatternsSettingsEnum `json:"settings,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyContentFiltering - The content filtering settings for your group policy
type CreateNetworkGroupPolicyRequestBodyContentFiltering struct {
	// Settings for allowed URL patterns
	AllowedURLPatterns *CreateNetworkGroupPolicyRequestBodyContentFilteringAllowedURLPatterns `json:"allowedUrlPatterns,omitempty"`
	// Settings for blocked URL categories
	BlockedURLCategories *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLCategories `json:"blockedUrlCategories,omitempty"`
	// Settings for blocked URL patterns
	BlockedURLPatterns *CreateNetworkGroupPolicyRequestBodyContentFilteringBlockedURLPatterns `json:"blockedUrlPatterns,omitempty"`
}

type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL3FirewallRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or 'any'.
	DestCidr string `json:"destCidr"`
	// Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or 'any'
	DestPort *string `json:"destPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy string `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	Protocol string `json:"protocol"`
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum - The policy applied to matching traffic. Must be 'deny'.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum string

const (
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnumDeny CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum = "deny"
)

func (e *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deny":
		*e = CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum - Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum string

const (
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumApplication         CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "application"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumApplicationCategory CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "applicationCategory"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumHost                CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "host"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumIPRange             CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "ipRange"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnumPort                CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum = "port"
)

func (e *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application":
		fallthrough
	case "applicationCategory":
		fallthrough
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "port":
		*e = CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum: %s", s)
	}
}

type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRules struct {
	// The policy applied to matching traffic. Must be 'deny'.
	Policy *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesPolicyEnum `json:"policy,omitempty"`
	// Type of the L7 Rule. Must be 'application', 'applicationCategory', 'host', 'port' or 'ipRange'
	Type *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRulesTypeEnum `json:"type,omitempty"`
	// The 'value' of what you want to block. If 'type' is 'host', 'port' or 'ipRange', 'value' must be a string matching either a hostname (e.g. somewhere.com), a port (e.g. 8080), or an IP range (e.g. 192.1.0.0/16). If 'type' is 'application' or 'applicationCategory', then 'value' must be an object with an ID for the application.
	Value *string `json:"value,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum - How firewall and traffic shaping rules are enforced. Can be 'network default', 'ignore' or 'custom'.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumCustom         CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "custom"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumIgnore         CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "ignore"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum = "network default"
)

func (e *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum - The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum string

const (
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumApplication         CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "application"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumApplicationCategory CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "applicationCategory"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumHost                CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "host"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumIPRange             CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "ipRange"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumLocalNet            CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "localNet"
	CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnumPort                CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum = "port"
)

func (e *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application":
		fallthrough
	case "applicationCategory":
		fallthrough
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "localNet":
		fallthrough
	case "port":
		*e = CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum: %s", s)
	}
}

type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitions struct {
	// The type of definition. Can be one of 'application', 'applicationCategory', 'host', 'port', 'ipRange' or 'localNet'.
	Type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitionsTypeEnum `json:"type"`
	//     If "type" is 'host', 'port', 'ipRange' or 'localNet', then "value" must be a string, matching either
	//     a hostname (e.g. "somesite.com"), a port (e.g. 8080), or an IP range ("192.1.0.0",
	//     "192.1.0.0/16", or "10.1.0.0/16:80"). 'localNet' also supports CIDR notation, excluding
	//     custom ports.
	//      If "type" is 'application' or 'applicationCategory', then "value" must be an object
	//     with the structure { "id": "meraki:layer7/..." }, where "id" is the application category or
	//     application ID (for a list of IDs for your network, use the trafficShaping/applicationCategories
	//     endpoint).
	//
	Value string `json:"value"`
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits - The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits struct {
	// The maximum download limit (integer, in Kbps).
	LimitDown *int64 `json:"limitDown,omitempty"`
	// The maximum upload limit (integer, in Kbps).
	LimitUp *int64 `json:"limitUp,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits -     An object describing the bandwidth settings for your rule.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits struct {
	// The bandwidth limits object, specifying the upload ('limitUp') and download ('limitDown') speed in Kbps. These are only enforced if 'settings' is set to 'custom'.
	BandwidthLimits *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimitsBandwidthLimits `json:"bandwidthLimits,omitempty"`
	// How bandwidth limits are applied by your rule. Can be one of 'network default', 'ignore' or 'custom'.
	Settings *string `json:"settings,omitempty"`
}

type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRules struct {
	//     A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.
	//
	Definitions []CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesDefinitions `json:"definitions"`
	//     The DSCP tag applied by your rule. null means 'Do not change DSCP tag'.
	//     For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.
	//
	DscpTagValue *int64 `json:"dscpTagValue,omitempty"`
	//     The PCP tag applied by your rule. Can be 0 (lowest priority) through 7 (highest priority).
	//     null means 'Do not set PCP tag'.
	//
	PcpTagValue *int64 `json:"pcpTagValue,omitempty"`
	//     An object describing the bandwidth settings for your rule.
	//
	PerClientBandwidthLimits *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRulesPerClientBandwidthLimits `json:"perClientBandwidthLimits,omitempty"`
	//     A string, indicating the priority level for packets bound to your rule.
	//     Can be 'low', 'normal' or 'high'.
	//
	Priority *string `json:"priority,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping -     The firewall and traffic shaping rules and settings for your policy.
type CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping struct {
	// An ordered array of the L3 firewall rules
	L3FirewallRules []CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL3FirewallRules `json:"l3FirewallRules,omitempty"`
	// An ordered array of L7 firewall rules
	L7FirewallRules []CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingL7FirewallRules `json:"l7FirewallRules,omitempty"`
	// How firewall and traffic shaping rules are enforced. Can be 'network default', 'ignore' or 'custom'.
	Settings *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingSettingsEnum `json:"settings,omitempty"`
	//     An array of traffic shaping rules. Rules are applied in the order that
	//     they are specified in. An empty list (or null) means no rules. Note that
	//     you are allowed a maximum of 8 rules.
	//
	TrafficShapingRules []CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShapingTrafficShapingRules `json:"trafficShapingRules,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingFriday - The schedule object for Friday.
type CreateNetworkGroupPolicyRequestBodySchedulingFriday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingMonday - The schedule object for Monday.
type CreateNetworkGroupPolicyRequestBodySchedulingMonday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingSaturday - The schedule object for Saturday.
type CreateNetworkGroupPolicyRequestBodySchedulingSaturday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingSunday - The schedule object for Sunday.
type CreateNetworkGroupPolicyRequestBodySchedulingSunday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingThursday - The schedule object for Thursday.
type CreateNetworkGroupPolicyRequestBodySchedulingThursday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingTuesday - The schedule object for Tuesday.
type CreateNetworkGroupPolicyRequestBodySchedulingTuesday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySchedulingWednesday - The schedule object for Wednesday.
type CreateNetworkGroupPolicyRequestBodySchedulingWednesday struct {
	// Whether the schedule is active (true) or inactive (false) during the time specified between 'from' and 'to'. Defaults to true.
	Active *bool `json:"active,omitempty"`
	// The time, from '00:00' to '24:00'. Must be less than the time specified in 'to'. Defaults to '00:00'. Only 30 minute increments are allowed.
	From *string `json:"from,omitempty"`
	// The time, from '00:00' to '24:00'. Must be greater than the time specified in 'from'. Defaults to '24:00'. Only 30 minute increments are allowed.
	To *string `json:"to,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodyScheduling -     The schedule for the group policy. Schedules are applied to days of the week.
type CreateNetworkGroupPolicyRequestBodyScheduling struct {
	// Whether scheduling is enabled (true) or disabled (false). Defaults to false. If true, the schedule objects for each day of the week (monday - sunday) are parsed.
	Enabled *bool `json:"enabled,omitempty"`
	// The schedule object for Friday.
	Friday *CreateNetworkGroupPolicyRequestBodySchedulingFriday `json:"friday,omitempty"`
	// The schedule object for Monday.
	Monday *CreateNetworkGroupPolicyRequestBodySchedulingMonday `json:"monday,omitempty"`
	// The schedule object for Saturday.
	Saturday *CreateNetworkGroupPolicyRequestBodySchedulingSaturday `json:"saturday,omitempty"`
	// The schedule object for Sunday.
	Sunday *CreateNetworkGroupPolicyRequestBodySchedulingSunday `json:"sunday,omitempty"`
	// The schedule object for Thursday.
	Thursday *CreateNetworkGroupPolicyRequestBodySchedulingThursday `json:"thursday,omitempty"`
	// The schedule object for Tuesday.
	Tuesday *CreateNetworkGroupPolicyRequestBodySchedulingTuesday `json:"tuesday,omitempty"`
	// The schedule object for Wednesday.
	Wednesday *CreateNetworkGroupPolicyRequestBodySchedulingWednesday `json:"wednesday,omitempty"`
}

// CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum - Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
type CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnumBypass         CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum = "bypass"
	CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum = "network default"
)

func (e *CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bypass":
		fallthrough
	case "network default":
		*e = CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum - How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.
type CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum string

const (
	CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumCustom         CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "custom"
	CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumIgnore         CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "ignore"
	CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnumNetworkDefault CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum = "network default"
)

func (e *CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom":
		fallthrough
	case "ignore":
		fallthrough
	case "network default":
		*e = CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum: %s", s)
	}
}

// CreateNetworkGroupPolicyRequestBodyVlanTagging - The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
type CreateNetworkGroupPolicyRequestBodyVlanTagging struct {
	// How VLAN tagging is applied. Can be 'network default', 'ignore' or 'custom'.
	Settings *CreateNetworkGroupPolicyRequestBodyVlanTaggingSettingsEnum `json:"settings,omitempty"`
	// The ID of the vlan you want to tag. This only applies if 'settings' is set to 'custom'.
	VlanID *string `json:"vlanId,omitempty"`
}

type CreateNetworkGroupPolicyRequestBody struct {
	//     The bandwidth settings for clients bound to your group policy.
	//
	Bandwidth *CreateNetworkGroupPolicyRequestBodyBandwidth `json:"bandwidth,omitempty"`
	// The Bonjour settings for your group policy. Only valid if your network has a wireless configuration.
	BonjourForwarding *CreateNetworkGroupPolicyRequestBodyBonjourForwarding `json:"bonjourForwarding,omitempty"`
	// The content filtering settings for your group policy
	ContentFiltering *CreateNetworkGroupPolicyRequestBodyContentFiltering `json:"contentFiltering,omitempty"`
	//     The firewall and traffic shaping rules and settings for your policy.
	//
	FirewallAndTrafficShaping *CreateNetworkGroupPolicyRequestBodyFirewallAndTrafficShaping `json:"firewallAndTrafficShaping,omitempty"`
	// The name for your group policy. Required.
	Name string `json:"name"`
	//     The schedule for the group policy. Schedules are applied to days of the week.
	//
	Scheduling *CreateNetworkGroupPolicyRequestBodyScheduling `json:"scheduling,omitempty"`
	// Whether clients bound to your policy will bypass splash authorization or behave according to the network's rules. Can be one of 'network default' or 'bypass'. Only available if your network has a wireless configuration.
	SplashAuthSettings *CreateNetworkGroupPolicyRequestBodySplashAuthSettingsEnum `json:"splashAuthSettings,omitempty"`
	// The VLAN tagging settings for your group policy. Only available if your network has a wireless configuration.
	VlanTagging *CreateNetworkGroupPolicyRequestBodyVlanTagging `json:"vlanTagging,omitempty"`
}

type CreateNetworkGroupPolicyRequest struct {
	PathParams CreateNetworkGroupPolicyPathParams
	Request    CreateNetworkGroupPolicyRequestBody `request:"mediaType=application/json"`
}

type CreateNetworkGroupPolicyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateNetworkGroupPolicy201ApplicationJSONObject map[string]interface{}
}
