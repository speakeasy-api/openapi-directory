/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DefaultSnatStatus } from "./defaultsnatstatus";
import { DNSConfig } from "./dnsconfig";
import { GatewayAPIConfig } from "./gatewayapiconfig";
import { ServiceExternalIPsConfig } from "./serviceexternalipsconfig";
import { Expose, Type } from "class-transformer";

/**
 * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
 */
export enum NetworkConfigDatapathProviderEnum {
  DatapathProviderUnspecified = "DATAPATH_PROVIDER_UNSPECIFIED",
  LegacyDatapath = "LEGACY_DATAPATH",
  AdvancedDatapath = "ADVANCED_DATAPATH",
}

/**
 * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
 */
export enum NetworkConfigPrivateIpv6GoogleAccessEnum {
  PrivateIpv6GoogleAccessUnspecified = "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED",
  PrivateIpv6GoogleAccessDisabled = "PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED",
  PrivateIpv6GoogleAccessToGoogle = "PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE",
  PrivateIpv6GoogleAccessBidirectional = "PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL",
}

/**
 * NetworkConfig reports the relative names of network & subnetwork.
 */
export class NetworkConfig extends SpeakeasyBase {
  /**
   * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datapathProvider" })
  datapathProvider?: NetworkConfigDatapathProviderEnum;

  /**
   * DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultSnatStatus" })
  @Type(() => DefaultSnatStatus)
  defaultSnatStatus?: DefaultSnatStatus;

  /**
   * DNSConfig contains the desired set of options for configuring clusterDNS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dnsConfig" })
  @Type(() => DNSConfig)
  dnsConfig?: DNSConfig;

  /**
   * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableIntraNodeVisibility" })
  enableIntraNodeVisibility?: boolean;

  /**
   * Whether L4ILB Subsetting is enabled for this cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableL4ilbSubsetting" })
  enableL4ilbSubsetting?: boolean;

  /**
   * GatewayAPIConfig contains the desired config of Gateway API on this cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gatewayApiConfig" })
  @Type(() => GatewayAPIConfig)
  gatewayApiConfig?: GatewayAPIConfig;

  /**
   * Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network?: string;

  /**
   * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateIpv6GoogleAccess" })
  privateIpv6GoogleAccess?: NetworkConfigPrivateIpv6GoogleAccessEnum;

  /**
   * Config to block services with externalIPs field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceExternalIpsConfig" })
  @Type(() => ServiceExternalIPsConfig)
  serviceExternalIpsConfig?: ServiceExternalIPsConfig;

  /**
   * Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetwork" })
  subnetwork?: string;
}
