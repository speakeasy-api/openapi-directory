// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RearPortTemplateTypeLabelEnum string

const (
	RearPortTemplateTypeLabelEnumEightP8C              RearPortTemplateTypeLabelEnum = "8P8C"
	RearPortTemplateTypeLabelEnumOneHundredAndTenPunch RearPortTemplateTypeLabelEnum = "110 Punch"
	RearPortTemplateTypeLabelEnumBnc                   RearPortTemplateTypeLabelEnum = "BNC"
	RearPortTemplateTypeLabelEnumMrj21                 RearPortTemplateTypeLabelEnum = "MRJ21"
	RearPortTemplateTypeLabelEnumFc                    RearPortTemplateTypeLabelEnum = "FC"
	RearPortTemplateTypeLabelEnumLc                    RearPortTemplateTypeLabelEnum = "LC"
	RearPortTemplateTypeLabelEnumLcApc                 RearPortTemplateTypeLabelEnum = "LC/APC"
	RearPortTemplateTypeLabelEnumLsh                   RearPortTemplateTypeLabelEnum = "LSH"
	RearPortTemplateTypeLabelEnumLshApc                RearPortTemplateTypeLabelEnum = "LSH/APC"
	RearPortTemplateTypeLabelEnumMpo                   RearPortTemplateTypeLabelEnum = "MPO"
	RearPortTemplateTypeLabelEnumMtrj                  RearPortTemplateTypeLabelEnum = "MTRJ"
	RearPortTemplateTypeLabelEnumSc                    RearPortTemplateTypeLabelEnum = "SC"
	RearPortTemplateTypeLabelEnumScApc                 RearPortTemplateTypeLabelEnum = "SC/APC"
	RearPortTemplateTypeLabelEnumSt                    RearPortTemplateTypeLabelEnum = "ST"
)

func (e *RearPortTemplateTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8P8C":
		fallthrough
	case "110 Punch":
		fallthrough
	case "BNC":
		fallthrough
	case "MRJ21":
		fallthrough
	case "FC":
		fallthrough
	case "LC":
		fallthrough
	case "LC/APC":
		fallthrough
	case "LSH":
		fallthrough
	case "LSH/APC":
		fallthrough
	case "MPO":
		fallthrough
	case "MTRJ":
		fallthrough
	case "SC":
		fallthrough
	case "SC/APC":
		fallthrough
	case "ST":
		*e = RearPortTemplateTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RearPortTemplateTypeLabelEnum: %s", s)
	}
}

type RearPortTemplateTypeValueEnum string

const (
	RearPortTemplateTypeValueEnumEightp8c              RearPortTemplateTypeValueEnum = "8p8c"
	RearPortTemplateTypeValueEnumOneHundredAndTenPunch RearPortTemplateTypeValueEnum = "110-punch"
	RearPortTemplateTypeValueEnumBnc                   RearPortTemplateTypeValueEnum = "bnc"
	RearPortTemplateTypeValueEnumMrj21                 RearPortTemplateTypeValueEnum = "mrj21"
	RearPortTemplateTypeValueEnumFc                    RearPortTemplateTypeValueEnum = "fc"
	RearPortTemplateTypeValueEnumLc                    RearPortTemplateTypeValueEnum = "lc"
	RearPortTemplateTypeValueEnumLcApc                 RearPortTemplateTypeValueEnum = "lc-apc"
	RearPortTemplateTypeValueEnumLsh                   RearPortTemplateTypeValueEnum = "lsh"
	RearPortTemplateTypeValueEnumLshApc                RearPortTemplateTypeValueEnum = "lsh-apc"
	RearPortTemplateTypeValueEnumMpo                   RearPortTemplateTypeValueEnum = "mpo"
	RearPortTemplateTypeValueEnumMtrj                  RearPortTemplateTypeValueEnum = "mtrj"
	RearPortTemplateTypeValueEnumSc                    RearPortTemplateTypeValueEnum = "sc"
	RearPortTemplateTypeValueEnumScApc                 RearPortTemplateTypeValueEnum = "sc-apc"
	RearPortTemplateTypeValueEnumSt                    RearPortTemplateTypeValueEnum = "st"
)

func (e *RearPortTemplateTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8p8c":
		fallthrough
	case "110-punch":
		fallthrough
	case "bnc":
		fallthrough
	case "mrj21":
		fallthrough
	case "fc":
		fallthrough
	case "lc":
		fallthrough
	case "lc-apc":
		fallthrough
	case "lsh":
		fallthrough
	case "lsh-apc":
		fallthrough
	case "mpo":
		fallthrough
	case "mtrj":
		fallthrough
	case "sc":
		fallthrough
	case "sc-apc":
		fallthrough
	case "st":
		*e = RearPortTemplateTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RearPortTemplateTypeValueEnum: %s", s)
	}
}

type RearPortTemplateType struct {
	Label RearPortTemplateTypeLabelEnum `json:"label"`
	Value RearPortTemplateTypeValueEnum `json:"value"`
}

type RearPortTemplate struct {
	DeviceType NestedDeviceType     `json:"device_type"`
	ID         *int64               `json:"id,omitempty"`
	Name       string               `json:"name"`
	Positions  *int64               `json:"positions,omitempty"`
	Type       RearPortTemplateType `json:"type"`
}
