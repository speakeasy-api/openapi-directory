/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MessageModerationResult } from "./messagemoderationresult";
import { Expose, Transform, Type } from "class-transformer";

export class MessageFlag extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "approved_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  approvedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_by_automod" })
  createdByAutomod: boolean;

  /**
   * Represents any chat message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "moderation_result" })
  @Type(() => MessageModerationResult)
  moderationResult?: MessageModerationResult;

  @SpeakeasyMetadata()
  @Expose({ name: "rejected_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  rejectedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "reviewed_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  reviewedAt?: Date;

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reviewed_by" })
  reviewedBy?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: Record<string, any>;
}
