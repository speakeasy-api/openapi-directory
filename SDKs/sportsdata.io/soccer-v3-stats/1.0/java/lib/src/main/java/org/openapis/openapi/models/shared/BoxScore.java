/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BoxScore {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalAssistantReferee1")
    public Referee additionalAssistantReferee1;

    public BoxScore withAdditionalAssistantReferee1(Referee additionalAssistantReferee1) {
        this.additionalAssistantReferee1 = additionalAssistantReferee1;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalAssistantReferee2")
    public Referee additionalAssistantReferee2;

    public BoxScore withAdditionalAssistantReferee2(Referee additionalAssistantReferee2) {
        this.additionalAssistantReferee2 = additionalAssistantReferee2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AssistantReferee1")
    public Referee assistantReferee1;

    public BoxScore withAssistantReferee1(Referee assistantReferee1) {
        this.assistantReferee1 = assistantReferee1;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AssistantReferee2")
    public Referee assistantReferee2;

    public BoxScore withAssistantReferee2(Referee assistantReferee2) {
        this.assistantReferee2 = assistantReferee2;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AwayTeamCoach")
    public Coach awayTeamCoach;

    public BoxScore withAwayTeamCoach(Coach awayTeamCoach) {
        this.awayTeamCoach = awayTeamCoach;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Bookings")
    public Booking[] bookings;

    public BoxScore withBookings(Booking[] bookings) {
        this.bookings = bookings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FourthReferee")
    public Referee fourthReferee;

    public BoxScore withFourthReferee(Referee fourthReferee) {
        this.fourthReferee = fourthReferee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Game")
    public Game game;

    public BoxScore withGame(Game game) {
        this.game = game;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Goals")
    public Goal[] goals;

    public BoxScore withGoals(Goal[] goals) {
        this.goals = goals;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HomeTeamCoach")
    public Coach homeTeamCoach;

    public BoxScore withHomeTeamCoach(Coach homeTeamCoach) {
        this.homeTeamCoach = homeTeamCoach;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Lineups")
    public Lineup[] lineups;

    public BoxScore withLineups(Lineup[] lineups) {
        this.lineups = lineups;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MainReferee")
    public Referee mainReferee;

    public BoxScore withMainReferee(Referee mainReferee) {
        this.mainReferee = mainReferee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PenaltyShootouts")
    public PenaltyShootout[] penaltyShootouts;

    public BoxScore withPenaltyShootouts(PenaltyShootout[] penaltyShootouts) {
        this.penaltyShootouts = penaltyShootouts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PlayerGames")
    public PlayerGame[] playerGames;

    public BoxScore withPlayerGames(PlayerGame[] playerGames) {
        this.playerGames = playerGames;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TeamGames")
    public TeamGame[] teamGames;

    public BoxScore withTeamGames(TeamGame[] teamGames) {
        this.teamGames = teamGames;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VideoAssistantReferee")
    public Referee videoAssistantReferee;

    public BoxScore withVideoAssistantReferee(Referee videoAssistantReferee) {
        this.videoAssistantReferee = videoAssistantReferee;
        return this;
    }
    
    public BoxScore(){}
}
