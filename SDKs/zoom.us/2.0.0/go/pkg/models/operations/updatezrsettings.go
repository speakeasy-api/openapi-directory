// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type UpdateZRSettingsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// UpdateZRSettingsApplicationJSON2ClientAlert - The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
type UpdateZRSettingsApplicationJSON2ClientAlert struct {
	// Display an alert message when an issue is detected with a bluetooth microphone.
	DetectBluetoothMicrophoneErrorAlert *bool `json:"detect_bluetooth_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a bluetooth speaker.
	DetectBluetoothSpeakerErrorAlert *bool `json:"detect_bluetooth_speaker_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a camera.
	DetectCameraErrorAlert *bool `json:"detect_camera_error_alert,omitempty"`
	// Display an alert message when an issue is detected with microphone.
	DetectMicrophoneErrorAlert *bool `json:"detect_microphone_error_alert,omitempty"`
	// Display an alert message when an issue is detected with a speaker.
	DetectSpeakerErrorAlert *bool `json:"detect_speaker_error_alert,omitempty"`
}

type UpdateZRSettingsApplicationJSON2DigitalSignageBanner struct {
	BannerRoomName   *bool `json:"banner_room_name,omitempty"`
	BannerSharingKey *bool `json:"banner_sharing_key,omitempty"`
	BannerTime       *bool `json:"banner_time,omitempty"`
}

// UpdateZRSettingsApplicationJSON2DigitalSignageDisplayPeriod - Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
type UpdateZRSettingsApplicationJSON2DigitalSignageDisplayPeriod struct {
	// Start displaying digital signage content after certain duration after the meeting ends. Specify the value of the duration in minutes in this field.
	StartDisplayingContent *int64 `json:"start_displaying_content,omitempty"`
	// Stop displaying content {certain_duration} before a meeting is scheduled to begin. Specify the value of duration in minutes in this field.
	StopDisplayingContent *int64 `json:"stop_displaying_content,omitempty"`
}

// UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum - Specify an action for the content list. The value can be one of the following:<br>
// `add`: Add another content list.<br>
// `update`: Update existing content list.<br>
// `delete`: Delete content list.
type UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum string

const (
	UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnumAdd    UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "add"
	UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnumUpdate UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "update"
	UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnumDelete UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum = "delete"
)

func (e *UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "update":
		fallthrough
	case "delete":
		*e = UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum: %s", s)
	}
}

// UpdateZRSettingsApplicationJSON2DigitalSignagePlayListContents - Content list.
type UpdateZRSettingsApplicationJSON2DigitalSignagePlayListContents struct {
	// Specify an action for the content in the content list. The value can be one of the following:<br>
	// `add`: Add another content to the content list.<br>
	// `update`: Update existing content's information in the content list.<br>
	// `delete`: Delete content from the content list.
	//
	//
	Action *string `json:"action,omitempty"`
	// Content Id.
	ContentID *string `json:"content_id,omitempty"`
	// By default each content is display for 5 seconds. Using this field, specify how long you would like to display the content.
	Duration *int64 `json:"duration,omitempty"`
	// Unique identifier of the content. This field is only required if you would like to remove or update the content information.
	ID *string `json:"id,omitempty"`
	// Name of the content.
	Name *string `json:"name,omitempty"`
	// Order of the content in the display.
	Order *int64 `json:"order,omitempty"`
}

type UpdateZRSettingsApplicationJSON2DigitalSignagePlayList struct {
	// Specify an action for the content list. The value can be one of the following:<br>
	// `add`: Add another content list.<br>
	// `update`: Update existing content list.<br>
	// `delete`: Delete content list.
	//
	Action   *UpdateZRSettingsApplicationJSON2DigitalSignagePlayListActionEnum `json:"action,omitempty"`
	Contents []UpdateZRSettingsApplicationJSON2DigitalSignagePlayListContents  `json:"contents,omitempty"`
	// Specify the display end time for the content list in GMT.
	EndTime *string `json:"end_time,omitempty"`
	// Unique identifier of the content list. This field is only required if you would like to remove or update the content list.
	ID *string `json:"id,omitempty"`
	// Name of the content list.
	Name *string `json:"name,omitempty"`
	// Specify the display start time for the content list in GMT.
	StartTime *string `json:"start_time,omitempty"`
}

type UpdateZRSettingsApplicationJSON2DigitalSignage struct {
	Banner *UpdateZRSettingsApplicationJSON2DigitalSignageBanner `json:"banner,omitempty"`
	// Display period object lets you define the number of minutes before or after the scheduled meeting time you would like the content to display.
	DisplayPeriod *UpdateZRSettingsApplicationJSON2DigitalSignageDisplayPeriod `json:"display_period,omitempty"`
	// [Enable or disable digital signage](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_767fbb33-82a8-45a8-8392-a1bfa9687edd). <br>
	// `true`: enable<br> `false`: disable
	EnableDigitalSignage *bool `json:"enable_digital_signage,omitempty"`
	// Set the [layout](https://support.zoom.us/hc/en-us/articles/360000030683-Zoom-Rooms-digital-signage#h_4e25ddf3-8f97-4957-8f8b-99725f940fa7). The value of this field can be either `standard` or `video_content`.
	//
	// `standard`: Standard Center<br>
	// `video_content`: Video + Content
	Layout *string `json:"layout,omitempty"`
	// Sound of all contents will be muted if the value of this field is set to `true`.
	Mute *bool `json:"mute,omitempty"`
	// Content list.
	PlayList []UpdateZRSettingsApplicationJSON2DigitalSignagePlayList `json:"play_list,omitempty"`
}

// UpdateZRSettingsApplicationJSON2Notification - [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
type UpdateZRSettingsApplicationJSON2Notification struct {
	// Send an alert when the audio echo test result meets usability threshold.
	AudioMeetUsabilityThreshold *bool `json:"audio_meet_usability_threshold,omitempty"`
	// Send an alert when the audio echo test result does not meet usability threshold.
	AudioNotMeetUsabilityThreshold *bool `json:"audio_not_meet_usability_threshold,omitempty"`
	// Send an alert when the battery starts charging.
	BatteryIsCharging *bool `json:"battery_is_charging,omitempty"`
	// Send an alert when the battery of the controller or the scheduling display is low (at 20%) and is not being charged.
	BatteryLowAndNotCharging *bool `json:"battery_low_and_not_charging,omitempty"`
	// Specify a percentage so that an alert is sent when the battery is less than the {battery_percentage} that you specified.
	BatteryPercentage *string `json:"battery_percentage,omitempty"`
	// Send an alert when the connection to the Controller or Scheduling Display cannot be detected.
	ControllerSchedulingDisconnected *bool `json:"controller_scheduling_disconnected,omitempty"`
	// Send an alert when the Controller or Scheduling Display can be detected again.
	ControllerSchedulingReconnected *bool `json:"controller_scheduling_reconnected,omitempty"`
	// Send an alert when CPU usage is above 90%.
	CPUUsageHighDetected *bool `json:"cpu_usage_high_detected,omitempty"`
	// Send an alert when the mic, speaker or camera is disconnected in the Zoom Room.
	MicSpeakerCameraDisconnected *bool `json:"mic_speaker_camera_disconnected,omitempty"`
	// Send an alert when the mic, speaker or camera is reconnected.
	MicSpeakerCameraReconnected *bool `json:"mic_speaker_camera_reconnected,omitempty"`
	// Send an alert when low bandwidth network is detected
	NetworkUnstableDetected *bool `json:"network_unstable_detected,omitempty"`
	// Send an alert when SIP registration stops working.
	SipRegistrationFailed *bool `json:"sip_registration_failed,omitempty"`
	// Send an alert after the SIP registration is re-enabled.
	SipRegistrationReEnabled *bool `json:"sip_registration_re_enabled,omitempty"`
	// Send an alert when the Zoom Room is online after previously being offline.
	ZoomRoomComeBackOnline *bool `json:"zoom_room_come_back_online,omitempty"`
	// Send an alert when the TV display is disconnected
	ZoomRoomDisplayDisconnected *bool `json:"zoom_room_display_disconnected,omitempty"`
	// Send an alert when the machine hosting the Zoom Room application has a network issue or cannot connect with the Controller.
	ZoomRoomOffline *bool `json:"zoom_room_offline,omitempty"`
}

type UpdateZRSettingsApplicationJSON2 struct {
	// The Client Alert Settings section includes alerts that display on the TV screen of the Zoom Room. Disable these settings if you have deliberately disconnected one or more peripheral devices or have never enabled them.
	ClientAlert    *UpdateZRSettingsApplicationJSON2ClientAlert    `json:"client_alert,omitempty"`
	DigitalSignage *UpdateZRSettingsApplicationJSON2DigitalSignage `json:"digital_signage,omitempty"`
	// [Notifications Settings](https://support.zoom.us/hc/en-us/articles/205394099-Zoom-Room-Alerts#h_b430b5f2-5150-4522-9c96-c77f22ab70bc) includes the circumstances in which the room sends an email alert to the support team to notify them of a potentially urgent issue. These issues can affect the operation of the room, but do not display on the TV screen. The email alert is sent to the email address specified in the Notification Email Recipients section.
	Notification *UpdateZRSettingsApplicationJSON2Notification `json:"notification,omitempty"`
}

// UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum - Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
//
// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
type UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum string

const (
	UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnumEnhancedEncryption UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum = "enhanced_encryption"
	UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnumE2ee               UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum = "e2ee"
)

func (e *UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enhanced_encryption":
		fallthrough
	case "e2ee":
		*e = UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum: %s", s)
	}
}

type UpdateZRSettingsApplicationJSON1MeetingSecurity struct {
	// Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
	// `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
	//
	// `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
	EncryptionType *UpdateZRSettingsApplicationJSON1MeetingSecurityEncryptionTypeEnum `json:"encryption_type,omitempty"`
	// Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
	EndToEndEncryptedMeetings *bool `json:"end_to_end_encrypted_meetings,omitempty"`
}

type UpdateZRSettingsApplicationJSON1ZoomRooms struct {
	// Enable multiple participants to [share content simultaneously](https://support.zoom.us/hc/en-us/articles/360017767812-Sharing-Multiple-Screens-in-a-Zoom-Room) by default.
	AllowMultipleContentSharing *bool `json:"allow_multiple_content_sharing,omitempty"`
	// Enable [automated audio test](https://support.zoom.us/hc/en-us/articles/360000319683-Zoom-Rooms-Daily-Audio-Testing) to ensure high quality audio.
	AudioDeviceDailyAutoTest *bool `json:"audio_device_daily_auto_test,omitempty"`
	// Enable participants in a Zoom Room to share their laptop screen on the Zoom Room TV without entering a meeting ID or sharing code.
	AutoDirectSharing *bool `json:"auto_direct_sharing,omitempty"`
	// Automatically start scheduled meetings according to the start time listed on the calendar associated with the room. A meeting alert will appear 10 minutes prior to the scheduled time on the TV.
	AutoStartScheduledMeeting *bool `json:"auto_start_scheduled_meeting,omitempty"`
	// Automatically stop the meeting at the end time as scheduled and listed in the calendar associated with the room.
	AutoStopScheduledMeeting *bool `json:"auto_stop_scheduled_meeting,omitempty"`
	// Use facial detection technology to [determine and display the attendees count](https://support.zoom.us/hc/en-us/articles/360031027111-Count-Attendees-in-Zoom-Rooms) after meetings on Dashboard.
	//
	CountAttendeesNumberInRoom *bool `json:"count_attendees_number_in_room,omitempty"`
	// Display a [survey](https://support.zoom.us/hc/en-us/articles/214193146-End-of-Meeting-Attendee-Feedback) at the end of each meeting regarding the audio and video quality on the Zoom Rooms Controller.
	DisplayFeedbackSurvey *bool `json:"display_feedback_survey,omitempty"`
	//  Show the same information on the TV that is shown on the controller.
	DisplayMeetingList *bool `json:"display_meeting_list,omitempty"`
	// Allow to display room name, time and sharing key on the top portion of TV.
	DisplayTopBanner *bool `json:"display_top_banner,omitempty"`
	// Encrypt screen and content shared in meetings.
	EncryptSharedScreenContent *bool `json:"encrypt_shared_screen_content,omitempty"`
	// If enabled, the meeting host and meeting ID (in addition to the meeting topic) are hidden from the Zoom Rooms display for private meetings. This affects meetings that were originally scheduled as private, as well as public meetings that were transformed to private.
	HideIDForPrivateMeeting *bool `json:"hide_id_for_private_meeting,omitempty"`
	// Hide share instructions from TV.
	HideShareInstruction *bool `json:"hide_share_instruction,omitempty"`
	// Restrict[ sending Whiteboard sessions](https://support.zoom.us/hc/en-us/articles/115004797286-Using-the-Whiteboard-in-Zoom-Rooms-for-Touch#h_781274b3-5237-4320-8826-be2120b00e21) to contacts or internal users only.
	SendWhiteboardToInternalContactOnly *bool `json:"send_whiteboard_to_internal_contact_only,omitempty"`
	// If enabled, the upcoming meeting alert message will be shown on the TV display. The value of the `upcoming_meeting_alert` field should be set to `true` to use this field.
	ShowAlertBeforeMeeting *bool `json:"show_alert_before_meeting,omitempty"`
	// Allow users to see call history of joined meetings and phone calls from the Zoom Rooms controller.
	//
	ShowCallHistoryInRoom *bool `json:"show_call_history_in_room,omitempty"`
	// If enabled, you can invite participants from the contact list during a meeting or when starting a meeting
	ShowContactListOnController *bool `json:"show_contact_list_on_controller,omitempty"`
	// When enabled, meeting participants that are audio only or have their video turned off will also be shown on the Zoom Rooms display by default.
	ShowNonVideoParticipants *bool `json:"show_non_video_participants,omitempty"`
	// Require the AirPlay service to be [started by an administrator](https://support.zoom.us/hc/en-us/articles/204726885-Screen-Share-Using-Airplay-Mirroring#h_a342ad38-4e46-47a8-a1d9-cded3b144b39) rather than always being available.
	StartAirplayManually *bool `json:"start_airplay_manually,omitempty"`
	// Allow users to share content via Apple Screen Mirroring (called Airplay on iOS 11 or earlier) in Zoom Rooms
	StartAirplayMirroring *bool `json:"start_airplay_mirroring,omitempty"`
	// Integrate with Skype for Business, GoToMeeting, or WebEx and show the meeting dial-in button on the meeting list tab for Zoom Rooms Controllers.
	SupportJoin3rdPartyMeeting *bool `json:"support_join_3rd_party_meeting,omitempty"`
	// If enabled, all meetings in this room will be treated as [private meetings](https://support.zoom.us/hc/en-us/articles/115001051063-Zoom-Rooms-Private-Meetings), and the Zoom Room will display "Your Name's Meeting" instead of the real meeting topic.
	TransformMeetingToPrivate *bool `json:"transform_meeting_to_private,omitempty"`
	// If enabled, a reminder will display 10 minutes prior to the next scheduled meeting on the controller.
	UpcomingMeetingAlert *bool `json:"upcoming_meeting_alert,omitempty"`
	// [Restart](https://support.zoom.us/hc/en-us/articles/205418949-Zoom-Rooms-Weekly-System-Restart) the Zoom Rooms computer and controller once a week.
	WeeklySystemRestart *bool `json:"weekly_system_restart,omitempty"`
}

type UpdateZRSettingsApplicationJSON1 struct {
	MeetingSecurity *UpdateZRSettingsApplicationJSON1MeetingSecurity `json:"meeting_security,omitempty"`
	ZoomRooms       *UpdateZRSettingsApplicationJSON1ZoomRooms       `json:"zoom_rooms,omitempty"`
}

type UpdateZRSettingsApplicationJSONType string

const (
	UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON1 UpdateZRSettingsApplicationJSONType = "updateZRSettings_ApplicationJSON_1"
	UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON2 UpdateZRSettingsApplicationJSONType = "updateZRSettings_ApplicationJSON_2"
)

type UpdateZRSettingsApplicationJSON struct {
	UpdateZRSettingsApplicationJSON1 *UpdateZRSettingsApplicationJSON1
	UpdateZRSettingsApplicationJSON2 *UpdateZRSettingsApplicationJSON2

	Type UpdateZRSettingsApplicationJSONType
}

func CreateUpdateZRSettingsApplicationJSONUpdateZRSettingsApplicationJSON1(updateZRSettingsApplicationJSON1 UpdateZRSettingsApplicationJSON1) UpdateZRSettingsApplicationJSON {
	typ := UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON1

	return UpdateZRSettingsApplicationJSON{
		UpdateZRSettingsApplicationJSON1: &updateZRSettingsApplicationJSON1,
		Type:                             typ,
	}
}

func CreateUpdateZRSettingsApplicationJSONUpdateZRSettingsApplicationJSON2(updateZRSettingsApplicationJSON2 UpdateZRSettingsApplicationJSON2) UpdateZRSettingsApplicationJSON {
	typ := UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON2

	return UpdateZRSettingsApplicationJSON{
		UpdateZRSettingsApplicationJSON2: &updateZRSettingsApplicationJSON2,
		Type:                             typ,
	}
}

func (u *UpdateZRSettingsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	updateZRSettingsApplicationJSON1 := new(UpdateZRSettingsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateZRSettingsApplicationJSON1); err == nil {
		u.UpdateZRSettingsApplicationJSON1 = updateZRSettingsApplicationJSON1
		u.Type = UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON1
		return nil
	}

	updateZRSettingsApplicationJSON2 := new(UpdateZRSettingsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&updateZRSettingsApplicationJSON2); err == nil {
		u.UpdateZRSettingsApplicationJSON2 = updateZRSettingsApplicationJSON2
		u.Type = UpdateZRSettingsApplicationJSONTypeUpdateZRSettingsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateZRSettingsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.UpdateZRSettingsApplicationJSON1 != nil {
		return json.Marshal(u.UpdateZRSettingsApplicationJSON1)
	}

	if u.UpdateZRSettingsApplicationJSON2 != nil {
		return json.Marshal(u.UpdateZRSettingsApplicationJSON2)
	}

	return nil, nil
}

type UpdateZRSettingsRequest struct {
	RequestBody *UpdateZRSettingsApplicationJSON `request:"mediaType=application/json"`
	// Unique Identifier of the Zoom Room.
	RoomID string `pathParam:"style=simple,explode=false,name=roomId"`
	// The type of setting that you would like to update.<br> `alert`: Alert Settings applied on the Zoom Room.<br>
	// `meeting`: Meeting settings of the Zoom Room.<br>
	// `signage`: Digital signage settings applied on the Zoom Room.
	SettingType *string `queryParam:"style=form,explode=true,name=setting_type"`
}

type UpdateZRSettingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `204` **No Content**<br>
	// Settings updated successfully.
	UpdateZRSettings204ApplicationJSONAny interface{}
}
