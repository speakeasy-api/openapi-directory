"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def documentai_projects_locations_documents_batch_process(self, request: operations.DocumentaiProjectsLocationsDocumentsBatchProcessRequest, security: operations.DocumentaiProjectsLocationsDocumentsBatchProcessSecurity) -> operations.DocumentaiProjectsLocationsDocumentsBatchProcessResponse:
        r"""LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsDocumentsBatchProcessRequest, base_url, '/v1beta2/{parent}/documents:batchProcess', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1beta2_batch_process_documents_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsDocumentsBatchProcessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsDocumentsBatchProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def documentai_projects_locations_documents_process(self, request: operations.DocumentaiProjectsLocationsDocumentsProcessRequest, security: operations.DocumentaiProjectsLocationsDocumentsProcessSecurity) -> operations.DocumentaiProjectsLocationsDocumentsProcessResponse:
        r"""Processes a single document."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsLocationsDocumentsProcessRequest, base_url, '/v1beta2/{parent}/documents:process', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_documentai_v1beta2_process_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DocumentaiProjectsLocationsDocumentsProcessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsLocationsDocumentsProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudDocumentaiV1beta2Document])
                res.google_cloud_documentai_v1beta2_document = out

        return res

    def documentai_projects_operations_get(self, request: operations.DocumentaiProjectsOperationsGetRequest, security: operations.DocumentaiProjectsOperationsGetSecurity) -> operations.DocumentaiProjectsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DocumentaiProjectsOperationsGetRequest, base_url, '/v1beta2/{name}', request)
        
        query_params = utils.get_query_params(operations.DocumentaiProjectsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DocumentaiProjectsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    