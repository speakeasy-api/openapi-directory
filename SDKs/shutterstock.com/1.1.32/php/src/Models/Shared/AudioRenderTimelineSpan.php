<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * AudioRenderTimelineSpan - The beginning of a non-overlapping period of absolute time
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class AudioRenderTimelineSpan
{
    /**
     * An identifier which must be unique within the parent span
     * 
     * @var ?float $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $id = null;
    
    /**
     * An array of instrument_group objects that are used in this span
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanInstrumentGroup> $instrumentGroups
     */
	#[\JMS\Serializer\Annotation\SerializedName('instrument_groups')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanInstrumentGroup>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $instrumentGroups = null;
    
    /**
     * An array of region objects within the span
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanRegion> $regions
     */
	#[\JMS\Serializer\Annotation\SerializedName('regions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanRegion>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $regions = null;
    
    /**
     * Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanSpanTypeEnum $spanType
     */
	#[\JMS\Serializer\Annotation\SerializedName('span_type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanSpanTypeEnum>')]
    public AudioRenderTimelineSpanSpanTypeEnum $spanType;
    
    /**
     * The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
     * 
     * @var ?int $tempo
     */
	#[\JMS\Serializer\Annotation\SerializedName('tempo')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $tempo = null;
    
    /**
     * Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanTempoChanges> $tempoChanges
     */
	#[\JMS\Serializer\Annotation\SerializedName('tempo_changes')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanTempoChanges>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tempoChanges = null;
    
    /**
     * The absolute time, in seconds, at which the span starts
     * 
     * @var int $time
     */
	#[\JMS\Serializer\Annotation\SerializedName('time')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $time;
    
	public function __construct()
	{
		$this->id = null;
		$this->instrumentGroups = null;
		$this->regions = null;
		$this->spanType = \OpenAPI\OpenAPI\Models\Shared\AudioRenderTimelineSpanSpanTypeEnum::METERED;
		$this->tempo = null;
		$this->tempoChanges = null;
		$this->time = 0;
	}
}
