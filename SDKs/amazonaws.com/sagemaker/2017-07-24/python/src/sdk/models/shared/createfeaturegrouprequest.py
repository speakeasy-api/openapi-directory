"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import featuredefinition as shared_featuredefinition
from ..shared import offlinestoreconfig as shared_offlinestoreconfig
from ..shared import onlinestoreconfig as shared_onlinestoreconfig
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateFeatureGroupRequest:
    
    event_time_feature_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventTimeFeatureName') }})  
    feature_definitions: list[shared_featuredefinition.FeatureDefinition] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureDefinitions') }})  
    feature_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeatureGroupName') }})  
    record_identifier_feature_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecordIdentifierFeatureName') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    offline_store_config: Optional[shared_offlinestoreconfig.OfflineStoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OfflineStoreConfig'), 'exclude': lambda f: f is None }})  
    online_store_config: Optional[shared_onlinestoreconfig.OnlineStoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OnlineStoreConfig'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    