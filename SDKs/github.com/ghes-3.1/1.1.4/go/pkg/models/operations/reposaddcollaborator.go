// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReposAddCollaboratorRequestBodyPermissionEnum - The permission to grant the collaborator. **Only valid on organization-owned repositories.**
type ReposAddCollaboratorRequestBodyPermissionEnum string

const (
	ReposAddCollaboratorRequestBodyPermissionEnumPull     ReposAddCollaboratorRequestBodyPermissionEnum = "pull"
	ReposAddCollaboratorRequestBodyPermissionEnumPush     ReposAddCollaboratorRequestBodyPermissionEnum = "push"
	ReposAddCollaboratorRequestBodyPermissionEnumAdmin    ReposAddCollaboratorRequestBodyPermissionEnum = "admin"
	ReposAddCollaboratorRequestBodyPermissionEnumMaintain ReposAddCollaboratorRequestBodyPermissionEnum = "maintain"
	ReposAddCollaboratorRequestBodyPermissionEnumTriage   ReposAddCollaboratorRequestBodyPermissionEnum = "triage"
)

func (e ReposAddCollaboratorRequestBodyPermissionEnum) ToPointer() *ReposAddCollaboratorRequestBodyPermissionEnum {
	return &e
}

func (e *ReposAddCollaboratorRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		fallthrough
	case "maintain":
		fallthrough
	case "triage":
		*e = ReposAddCollaboratorRequestBodyPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposAddCollaboratorRequestBodyPermissionEnum: %v", v)
	}
}

type ReposAddCollaboratorRequestBody struct {
	// The permission to grant the collaborator. **Only valid on organization-owned repositories.**
	Permission *ReposAddCollaboratorRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type ReposAddCollaboratorRequest struct {
	RequestBody *ReposAddCollaboratorRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
	// The handle for the GitHub user account.
	Username string `pathParam:"style=simple,explode=false,name=username"`
}

type ReposAddCollaboratorResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response when a new invitation is created
	RepositoryInvitation *shared.RepositoryInvitation
	// Validation failed
	ValidationError *shared.ValidationError
}
