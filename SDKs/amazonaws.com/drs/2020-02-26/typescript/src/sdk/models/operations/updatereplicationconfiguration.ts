/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The data plane routing mechanism that will be used for replication.
 */
export enum UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum {
  PrivateIp = "PRIVATE_IP",
  PublicIp = "PUBLIC_IP",
}

/**
 * The Staging Disk EBS volume type to be used during replication.
 */
export enum UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum {
  Gp2 = "GP2",
  Gp3 = "GP3",
  St1 = "ST1",
  Auto = "AUTO",
}

/**
 * The type of EBS encryption to be used during replication.
 */
export enum UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum {
  Default = "DEFAULT",
  Custom = "CUSTOM",
}

export class UpdateReplicationConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "associateDefaultSecurityGroup" })
  associateDefaultSecurityGroup?: boolean;

  /**
   * Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bandwidthThrottling" })
  bandwidthThrottling?: number;

  /**
   * Whether to create a Public IP for the Recovery Instance by default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createPublicIP" })
  createPublicIP?: boolean;

  /**
   * The data plane routing mechanism that will be used for replication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataPlaneRouting" })
  dataPlaneRouting?: UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum;

  /**
   * The Staging Disk EBS volume type to be used during replication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultLargeStagingDiskType" })
  defaultLargeStagingDiskType?: UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum;

  /**
   * The type of EBS encryption to be used during replication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ebsEncryption" })
  ebsEncryption?: UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum;

  /**
   * The ARN of the EBS encryption key to be used during replication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ebsEncryptionKeyArn" })
  ebsEncryptionKeyArn?: string;

  /**
   * The name of the Replication Configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The Point in time (PIT) policy to manage snapshots taken during replication.
   */
  @SpeakeasyMetadata({ elemType: shared.PITPolicyRule })
  @Expose({ name: "pitPolicy" })
  @Type(() => shared.PITPolicyRule)
  pitPolicy?: shared.PITPolicyRule[];

  /**
   * The configuration of the disks of the Source Server to be replicated.
   */
  @SpeakeasyMetadata({
    elemType: shared.ReplicationConfigurationReplicatedDisk,
  })
  @Expose({ name: "replicatedDisks" })
  @Type(() => shared.ReplicationConfigurationReplicatedDisk)
  replicatedDisks?: shared.ReplicationConfigurationReplicatedDisk[];

  /**
   * The instance type to be used for the replication server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replicationServerInstanceType" })
  replicationServerInstanceType?: string;

  /**
   * The security group IDs that will be used by the replication server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replicationServersSecurityGroupsIDs" })
  replicationServersSecurityGroupsIDs?: string[];

  /**
   * The ID of the Source Server for this Replication Configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceServerID" })
  sourceServerID: string;

  /**
   * The subnet to be used by the replication staging area.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stagingAreaSubnetId" })
  stagingAreaSubnetId?: string;

  /**
   * A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stagingAreaTags" })
  stagingAreaTags?: Record<string, string>;

  /**
   * Whether to use a dedicated Replication Server in the replication staging area.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useDedicatedReplicationServer" })
  useDedicatedReplicationServer?: boolean;
}

export class UpdateReplicationConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateReplicationConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateReplicationConfigurationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  replicationConfiguration?: shared.ReplicationConfiguration;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
