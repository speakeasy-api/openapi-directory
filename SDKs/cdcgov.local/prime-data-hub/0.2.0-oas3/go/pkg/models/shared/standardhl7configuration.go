// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// StandardHl7ConfigurationPhoneNumberFormattingEnum - How to format phone numbers (XTN fields)
type StandardHl7ConfigurationPhoneNumberFormattingEnum string

const (
	StandardHl7ConfigurationPhoneNumberFormattingEnumStandard                 StandardHl7ConfigurationPhoneNumberFormattingEnum = "STANDARD"
	StandardHl7ConfigurationPhoneNumberFormattingEnumOnlyDigitsInComponentOne StandardHl7ConfigurationPhoneNumberFormattingEnum = "ONLY_DIGITS_IN_COMPONENT_ONE"
	StandardHl7ConfigurationPhoneNumberFormattingEnumAreaLocalInComponentOne  StandardHl7ConfigurationPhoneNumberFormattingEnum = "AREA_LOCAL_IN_COMPONENT_ONE"
)

func (e StandardHl7ConfigurationPhoneNumberFormattingEnum) ToPointer() *StandardHl7ConfigurationPhoneNumberFormattingEnum {
	return &e
}

func (e *StandardHl7ConfigurationPhoneNumberFormattingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STANDARD":
		fallthrough
	case "ONLY_DIGITS_IN_COMPONENT_ONE":
		fallthrough
	case "AREA_LOCAL_IN_COMPONENT_ONE":
		*e = StandardHl7ConfigurationPhoneNumberFormattingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StandardHl7ConfigurationPhoneNumberFormattingEnum: %v", v)
	}
}

type StandardHl7ConfigurationTransportType string

const (
	StandardHl7ConfigurationTransportTypeSFTPTransport      StandardHl7ConfigurationTransportType = "SFTPTransport"
	StandardHl7ConfigurationTransportTypeAs2Transport       StandardHl7ConfigurationTransportType = "AS2Transport"
	StandardHl7ConfigurationTransportTypeBlobStoreTransport StandardHl7ConfigurationTransportType = "BlobStoreTransport"
	StandardHl7ConfigurationTransportTypeNullTransport      StandardHl7ConfigurationTransportType = "NullTransport"
)

type StandardHl7ConfigurationTransport struct {
	SFTPTransport      *SFTPTransport
	As2Transport       *As2Transport
	BlobStoreTransport *BlobStoreTransport
	NullTransport      *NullTransport

	Type StandardHl7ConfigurationTransportType
}

func CreateStandardHl7ConfigurationTransportSFTPTransport(sftpTransport SFTPTransport) StandardHl7ConfigurationTransport {
	typ := StandardHl7ConfigurationTransportTypeSFTPTransport

	return StandardHl7ConfigurationTransport{
		SFTPTransport: &sftpTransport,
		Type:          typ,
	}
}

func CreateStandardHl7ConfigurationTransportAs2Transport(as2Transport As2Transport) StandardHl7ConfigurationTransport {
	typ := StandardHl7ConfigurationTransportTypeAs2Transport

	return StandardHl7ConfigurationTransport{
		As2Transport: &as2Transport,
		Type:         typ,
	}
}

func CreateStandardHl7ConfigurationTransportBlobStoreTransport(blobStoreTransport BlobStoreTransport) StandardHl7ConfigurationTransport {
	typ := StandardHl7ConfigurationTransportTypeBlobStoreTransport

	return StandardHl7ConfigurationTransport{
		BlobStoreTransport: &blobStoreTransport,
		Type:               typ,
	}
}

func CreateStandardHl7ConfigurationTransportNullTransport(nullTransport NullTransport) StandardHl7ConfigurationTransport {
	typ := StandardHl7ConfigurationTransportTypeNullTransport

	return StandardHl7ConfigurationTransport{
		NullTransport: &nullTransport,
		Type:          typ,
	}
}

func (u *StandardHl7ConfigurationTransport) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sftpTransport := new(SFTPTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sftpTransport); err == nil {
		u.SFTPTransport = sftpTransport
		u.Type = StandardHl7ConfigurationTransportTypeSFTPTransport
		return nil
	}

	as2Transport := new(As2Transport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&as2Transport); err == nil {
		u.As2Transport = as2Transport
		u.Type = StandardHl7ConfigurationTransportTypeAs2Transport
		return nil
	}

	blobStoreTransport := new(BlobStoreTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&blobStoreTransport); err == nil {
		u.BlobStoreTransport = blobStoreTransport
		u.Type = StandardHl7ConfigurationTransportTypeBlobStoreTransport
		return nil
	}

	nullTransport := new(NullTransport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nullTransport); err == nil {
		u.NullTransport = nullTransport
		u.Type = StandardHl7ConfigurationTransportTypeNullTransport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StandardHl7ConfigurationTransport) MarshalJSON() ([]byte, error) {
	if u.SFTPTransport != nil {
		return json.Marshal(u.SFTPTransport)
	}

	if u.As2Transport != nil {
		return json.Marshal(u.As2Transport)
	}

	if u.BlobStoreTransport != nil {
		return json.Marshal(u.BlobStoreTransport)
	}

	if u.NullTransport != nil {
		return json.Marshal(u.NullTransport)
	}

	return nil, nil
}

// StandardHl7Configuration - A standard HL7 configuration
type StandardHl7Configuration struct {
	// A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format
	ConvertTimestampToDateTime *string `json:"convertTimestampToDateTime,omitempty"`
	// Default the AOE result to UNK
	DefaultAoeToUnknown *bool `json:"defaultAoeToUnknown,omitempty"`
	// Include the AOE
	IncludeAOE bool `json:"includeAOE"`
	// The format to use for the file name generated by the translation
	NameFormat *string `json:"nameFormat,omitempty"`
	// How to format phone numbers (XTN fields)
	PhoneNumberFormatting *StandardHl7ConfigurationPhoneNumberFormattingEnum `json:"phoneNumberFormatting,omitempty"`
	// The receiving application name (needed for HL7 formats)
	ReceivingApplicationName *string `json:"receivingApplicationName,omitempty"`
	// The receiving application OID
	ReceivingApplicationOID *string `json:"receivingApplicationOID,omitempty"`
	// The receiving facility name
	ReceivingFacilityName *string `json:"receivingFacilityName,omitempty"`
	// The receiving facility name
	ReceivingFacilityOID *string `json:"receivingFacilityOID,omitempty"`
	// The name of the receiving organization in the message
	ReceivingOrganization *string `json:"receivingOrganization,omitempty"`
	// The reporting facility id (if different from CDC PRIME's OID)
	ReportingFacilityID *string `json:"reportingFacilityId,omitempty"`
	// The reporting facility id type (if different from OID)
	ReportingFacilityIDType *string `json:"reportingFacilityIdType,omitempty"`
	// The reporting facility name (if different from CDC PRIME)
	ReportingFacilityName *string `json:"reportingFacilityName,omitempty"`
	// Suppress the AOE OBX results
	SuppressAoe *bool `json:"suppressAoe,omitempty"`
	// A comma delimited list of HL7 fields to suppress
	SuppressHl7Fields *string `json:"suppressHl7Fields,omitempty"`
	// Suppress QST component is AOE OBX segments
	SuppressQstForAoe *bool                             `json:"suppressQstForAoe,omitempty"`
	Transport         StandardHl7ConfigurationTransport `json:"transport"`
	// Truncate the HD fields to HD_TRUNCATION_LIMIT
	TruncateHDNamespaceIds *bool `json:"truncateHDNamespaceIds,omitempty"`
	// The discrimenator
	Type string `json:"type"`
	// Use BHS and FHS header
	UseBatchHeaders bool `json:"useBatchHeaders"`
	// A comma delimited list of element names that should use blank instead of unknown
	UseBlankInsteadOfUnknown *string `json:"useBlankInsteadOfUnknown,omitempty"`
	// Use the PID-14 field for patient email instead of the standard PID-13 field
	UsePid14ForPatientEmail *bool `json:"usePid14ForPatientEmail,omitempty"`
	// Set a test process mode flag
	UseTestProcessingMode *bool `json:"useTestProcessingMode,omitempty"`
}
