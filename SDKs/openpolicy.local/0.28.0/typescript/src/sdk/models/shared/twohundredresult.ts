/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The type of the path operation
 */
export enum TwoHundredResultResultAstPackagePathTypeEnum {
  Import = "import",
  Package = "package",
}

export class TwoHundredResultResultAstPackagePath extends SpeakeasyBase {
  /**
   * The type of the path operation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TwoHundredResultResultAstPackagePathTypeEnum;

  /**
   * The path variable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class TwoHundredResultResultAstPackage extends SpeakeasyBase {
  /**
   * The path to the package
   */
  @SpeakeasyMetadata({ elemType: TwoHundredResultResultAstPackagePath })
  @Expose({ name: "path" })
  @Type(() => TwoHundredResultResultAstPackagePath)
  path?: TwoHundredResultResultAstPackagePath[];
}

export class TwoHundredResultResultAstRulesBodyTermsValue extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class TwoHundredResultResultAstRulesBodyTerms extends SpeakeasyBase {
  /**
   * The type of the term variable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The list of types and values for the term variable
   */
  @SpeakeasyMetadata({ elemType: TwoHundredResultResultAstRulesBodyTermsValue })
  @Expose({ name: "value" })
  @Type(() => TwoHundredResultResultAstRulesBodyTermsValue)
  value?: TwoHundredResultResultAstRulesBodyTermsValue[];
}

export class TwoHundredResultResultAstRulesBody extends SpeakeasyBase {
  /**
   * The location of this term in the list (starts at 0)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "index" })
  index?: number;

  /**
   * The type/value pairing for this term
   */
  @SpeakeasyMetadata({ elemType: TwoHundredResultResultAstRulesBodyTerms })
  @Expose({ name: "terms" })
  @Type(() => TwoHundredResultResultAstRulesBodyTerms)
  terms?: TwoHundredResultResultAstRulesBodyTerms[];
}

/**
 * The type/value pairing for this rule's head
 */
export class TwoHundredResultResultAstRulesHeadKey extends SpeakeasyBase {
  /**
   * The type of the head
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The value of the head
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class TwoHundredResultResultAstRulesHead extends SpeakeasyBase {
  /**
   * The type/value pairing for this rule's head
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  @Type(() => TwoHundredResultResultAstRulesHeadKey)
  key?: TwoHundredResultResultAstRulesHeadKey;

  /**
   * The head of the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class TwoHundredResultResultAstRules extends SpeakeasyBase {
  /**
   * A list of the terms in this rule
   */
  @SpeakeasyMetadata({ elemType: TwoHundredResultResultAstRulesBody })
  @Expose({ name: "body" })
  @Type(() => TwoHundredResultResultAstRulesBody)
  body?: TwoHundredResultResultAstRulesBody[];

  @SpeakeasyMetadata()
  @Expose({ name: "head" })
  @Type(() => TwoHundredResultResultAstRulesHead)
  head?: TwoHundredResultResultAstRulesHead;
}

/**
 * The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
 *
 * @see {@link https://godoc.org/github.com/open-policy-agent/opa/ast} - AST
 */
export class TwoHundredResultResultAst extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "package" })
  @Type(() => TwoHundredResultResultAstPackage)
  package?: TwoHundredResultResultAstPackage;

  /**
   * When OPA evaluates a rule, it generates the content of a [virtual documents](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
   */
  @SpeakeasyMetadata({ elemType: TwoHundredResultResultAstRules })
  @Expose({ name: "rules" })
  @Type(() => TwoHundredResultResultAstRules)
  rules?: TwoHundredResultResultAstRules[];
}

export class TwoHundredResultResult extends SpeakeasyBase {
  /**
   * The types for declarations and runtime objects passed to your implementation. This consists of an abstract syntax tree (AST) of policy modules, package and import declarations, rules, expressions, and terms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ast" })
  @Type(() => TwoHundredResultResultAst)
  ast?: TwoHundredResultResultAst;

  /**
   * The name of a policy module
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * A string representation of the full Rego policy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "raw" })
  raw?: string;
}

/**
 * Success
 */
export class TwoHundredResult extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: TwoHundredResultResult })
  @Expose({ name: "result" })
  @Type(() => TwoHundredResultResult)
  result?: TwoHundredResultResult[];
}
