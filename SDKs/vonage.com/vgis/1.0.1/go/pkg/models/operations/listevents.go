// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListEventsDirectionEnum - Filter by event direction
type ListEventsDirectionEnum string

const (
	ListEventsDirectionEnumInbound  ListEventsDirectionEnum = "INBOUND"
	ListEventsDirectionEnumOutbound ListEventsDirectionEnum = "OUTBOUND"
)

func (e *ListEventsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INBOUND":
		fallthrough
	case "OUTBOUND":
		*e = ListEventsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsDirectionEnum: %s", s)
	}
}

// ListEventsOrderEnum - Sort in either ascending or descending order'
type ListEventsOrderEnum string

const (
	ListEventsOrderEnumDesc ListEventsOrderEnum = "DESC"
	ListEventsOrderEnumAsc  ListEventsOrderEnum = "ASC"
)

func (e *ListEventsOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DESC":
		fallthrough
	case "ASC":
		*e = ListEventsOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsOrderEnum: %s", s)
	}
}

// ListEventsStatesEnum - Filter events by state
type ListEventsStatesEnum string

const (
	ListEventsStatesEnumInitializing ListEventsStatesEnum = "INITIALIZING"
	ListEventsStatesEnumRinging      ListEventsStatesEnum = "RINGING"
	ListEventsStatesEnumActive       ListEventsStatesEnum = "ACTIVE"
	ListEventsStatesEnumHeld         ListEventsStatesEnum = "HELD"
	ListEventsStatesEnumRemoteHeld   ListEventsStatesEnum = "REMOTE_HELD"
	ListEventsStatesEnumDetached     ListEventsStatesEnum = "DETACHED"
	ListEventsStatesEnumRejected     ListEventsStatesEnum = "REJECTED"
	ListEventsStatesEnumCancelled    ListEventsStatesEnum = "CANCELLED"
	ListEventsStatesEnumAnswered     ListEventsStatesEnum = "ANSWERED"
	ListEventsStatesEnumMissed       ListEventsStatesEnum = "MISSED"
)

func (e *ListEventsStatesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INITIALIZING":
		fallthrough
	case "RINGING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "HELD":
		fallthrough
	case "REMOTE_HELD":
		fallthrough
	case "DETACHED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "ANSWERED":
		fallthrough
	case "MISSED":
		*e = ListEventsStatesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsStatesEnum: %s", s)
	}
}

// ListEventsTypesEnum - Record type
type ListEventsTypesEnum string

const (
	ListEventsTypesEnumCall ListEventsTypesEnum = "CALL"
)

func (e *ListEventsTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CALL":
		*e = ListEventsTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventsTypesEnum: %s", s)
	}
}

type ListEventsRequest struct {
	// Filter by event direction
	Direction *ListEventsDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Return events that occurred after this point in time
	FromDate *int64 `queryParam:"style=form,explode=true,name=fromDate"`
	// Page number of events to return
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Sort in either ascending or descending order'
	Order *ListEventsOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// Return this amount of events in the response
	Size *int64 `queryParam:"style=form,explode=true,name=size"`
	// Sort events by property
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Filter events by state
	States *ListEventsStatesEnum `queryParam:"style=form,explode=true,name=states"`
	// Return events that occurred before this point in time
	ToDate *int64 `queryParam:"style=form,explode=true,name=toDate"`
	// Record type
	Types *ListEventsTypesEnum `queryParam:"style=form,explode=true,name=types"`
}

type ListEventsResponse struct {
	ContentType string
	// Bad Request: The client should not repeat the request without modifications
	ErrorResponse *shared.ErrorResponse
	// Successful
	Events      []shared.Event
	StatusCode  int
	RawResponse *http.Response
}
