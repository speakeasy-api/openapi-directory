// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum - An error code related to why an IPAM pool CIDR failed to be provisioned.
type ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum string

const (
	ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnumCidrNotAvailable ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum = "cidr-not-available"
	ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnumLimitExceeded    ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum = "limit-exceeded"
)

func (e ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum) ToPointer() *ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum {
	return &e
}

func (e *ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cidr-not-available":
		fallthrough
	case "limit-exceeded":
		*e = ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum: %v", v)
	}
}

// ProvisionIpamPoolCidrResultIpamPoolCidrFailureReason - Details related to why an IPAM pool CIDR failed to be provisioned.
type ProvisionIpamPoolCidrResultIpamPoolCidrFailureReason struct {
	Code    *ProvisionIpamPoolCidrResultIpamPoolCidrFailureReasonCodeEnum
	Message *string
}

// ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum - The state of the CIDR.
type ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum string

const (
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumPendingProvision   ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "pending-provision"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumProvisioned        ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "provisioned"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumFailedProvision    ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "failed-provision"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumPendingDeprovision ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "pending-deprovision"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumDeprovisioned      ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "deprovisioned"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumFailedDeprovision  ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "failed-deprovision"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumPendingImport      ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "pending-import"
	ProvisionIpamPoolCidrResultIpamPoolCidrStateEnumFailedImport       ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum = "failed-import"
)

func (e ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum) ToPointer() *ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum {
	return &e
}

func (e *ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending-provision":
		fallthrough
	case "provisioned":
		fallthrough
	case "failed-provision":
		fallthrough
	case "pending-deprovision":
		fallthrough
	case "deprovisioned":
		fallthrough
	case "failed-deprovision":
		fallthrough
	case "pending-import":
		fallthrough
	case "failed-import":
		*e = ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum: %v", v)
	}
}

// ProvisionIpamPoolCidrResultIpamPoolCidr - Information about the provisioned CIDR.
type ProvisionIpamPoolCidrResultIpamPoolCidr struct {
	Cidr           *string
	FailureReason  *ProvisionIpamPoolCidrResultIpamPoolCidrFailureReason
	IpamPoolCidrID *string
	NetmaskLength  *int64
	State          *ProvisionIpamPoolCidrResultIpamPoolCidrStateEnum
}

// ProvisionIpamPoolCidrResult - Success
type ProvisionIpamPoolCidrResult struct {
	IpamPoolCidr *ProvisionIpamPoolCidrResultIpamPoolCidr
}
