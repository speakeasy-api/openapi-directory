"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PastMeetingDetailsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class PastMeetingDetailsRequest:
    
    meeting_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingUUID', 'style': 'simple', 'explode': False }})
    r"""The meeting UUID. Each meeting instance will generate its own Meeting UUID (i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for other API calls if the UUID begins with a '/'or contains '//' in it."""  
    

@dataclasses.dataclass
class PastMeetingDetails200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.
    """
    
    duration: Optional[int] = dataclasses.field(default=None)
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting end time (GMT)."""  
    host_id: Optional[str] = dataclasses.field(default=None)
    r"""Host ID."""  
    id: Optional[int] = dataclasses.field(default=None)
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    participants_count: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting participants."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Meeting start time (GMT)."""  
    topic: Optional[str] = dataclasses.field(default=None)
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None)
    r"""Sum of meeting minutes from all participants in the meeting."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""Meeting type."""  
    user_email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Meeting UUID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PastMeetingDetails200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.
    """
    
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Meeting duration."""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting end time (GMT)."""  
    host_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_id'), 'exclude': lambda f: f is None }})
    r"""Host ID."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""[Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in \\"**long**\\" format(represented as int64 data type in JSON), also known as the meeting number."""  
    participants_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants_count'), 'exclude': lambda f: f is None }})
    r"""Number of meeting participants."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Meeting start time (GMT)."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Meeting topic."""  
    total_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_minutes'), 'exclude': lambda f: f is None }})
    r"""Sum of meeting minutes from all participants in the meeting."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Meeting type."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Meeting UUID."""  
    

@dataclasses.dataclass
class PastMeetingDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    past_meeting_details_200_application_json_object: Optional[PastMeetingDetails200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Meeting details returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    