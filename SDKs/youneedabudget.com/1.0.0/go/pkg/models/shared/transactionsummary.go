// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// TransactionSummaryClearedEnum - The cleared status of the transaction
type TransactionSummaryClearedEnum string

const (
	TransactionSummaryClearedEnumCleared    TransactionSummaryClearedEnum = "cleared"
	TransactionSummaryClearedEnumUncleared  TransactionSummaryClearedEnum = "uncleared"
	TransactionSummaryClearedEnumReconciled TransactionSummaryClearedEnum = "reconciled"
)

func (e *TransactionSummaryClearedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cleared":
		fallthrough
	case "uncleared":
		fallthrough
	case "reconciled":
		*e = TransactionSummaryClearedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionSummaryClearedEnum: %s", s)
	}
}

// TransactionSummaryDebtTransactionTypeEnum - If the transaction is a debt/loan account transaction, the type of transaction
type TransactionSummaryDebtTransactionTypeEnum string

const (
	TransactionSummaryDebtTransactionTypeEnumPayment            TransactionSummaryDebtTransactionTypeEnum = "payment"
	TransactionSummaryDebtTransactionTypeEnumRefund             TransactionSummaryDebtTransactionTypeEnum = "refund"
	TransactionSummaryDebtTransactionTypeEnumFee                TransactionSummaryDebtTransactionTypeEnum = "fee"
	TransactionSummaryDebtTransactionTypeEnumInterest           TransactionSummaryDebtTransactionTypeEnum = "interest"
	TransactionSummaryDebtTransactionTypeEnumEscrow             TransactionSummaryDebtTransactionTypeEnum = "escrow"
	TransactionSummaryDebtTransactionTypeEnumBalancedAdjustment TransactionSummaryDebtTransactionTypeEnum = "balancedAdjustment"
	TransactionSummaryDebtTransactionTypeEnumCredit             TransactionSummaryDebtTransactionTypeEnum = "credit"
	TransactionSummaryDebtTransactionTypeEnumCharge             TransactionSummaryDebtTransactionTypeEnum = "charge"
	TransactionSummaryDebtTransactionTypeEnumNull               TransactionSummaryDebtTransactionTypeEnum = "null"
)

func (e *TransactionSummaryDebtTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "payment":
		fallthrough
	case "refund":
		fallthrough
	case "fee":
		fallthrough
	case "interest":
		fallthrough
	case "escrow":
		fallthrough
	case "balancedAdjustment":
		fallthrough
	case "credit":
		fallthrough
	case "charge":
		fallthrough
	case "null":
		*e = TransactionSummaryDebtTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionSummaryDebtTransactionTypeEnum: %s", s)
	}
}

// TransactionSummaryFlagColorEnum - The transaction flag
type TransactionSummaryFlagColorEnum string

const (
	TransactionSummaryFlagColorEnumRed    TransactionSummaryFlagColorEnum = "red"
	TransactionSummaryFlagColorEnumOrange TransactionSummaryFlagColorEnum = "orange"
	TransactionSummaryFlagColorEnumYellow TransactionSummaryFlagColorEnum = "yellow"
	TransactionSummaryFlagColorEnumGreen  TransactionSummaryFlagColorEnum = "green"
	TransactionSummaryFlagColorEnumBlue   TransactionSummaryFlagColorEnum = "blue"
	TransactionSummaryFlagColorEnumPurple TransactionSummaryFlagColorEnum = "purple"
	TransactionSummaryFlagColorEnumNull   TransactionSummaryFlagColorEnum = "null"
)

func (e *TransactionSummaryFlagColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "red":
		fallthrough
	case "orange":
		fallthrough
	case "yellow":
		fallthrough
	case "green":
		fallthrough
	case "blue":
		fallthrough
	case "purple":
		fallthrough
	case "null":
		*e = TransactionSummaryFlagColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionSummaryFlagColorEnum: %s", s)
	}
}

type TransactionSummary struct {
	AccountID string `json:"account_id"`
	// The transaction amount in milliunits format
	Amount int64 `json:"amount"`
	// Whether or not the transaction is approved
	Approved   bool    `json:"approved"`
	CategoryID *string `json:"category_id,omitempty"`
	// The cleared status of the transaction
	Cleared TransactionSummaryClearedEnum `json:"cleared"`
	// The transaction date in ISO format (e.g. 2016-12-01)
	Date types.Date `json:"date"`
	// If the transaction is a debt/loan account transaction, the type of transaction
	DebtTransactionType *TransactionSummaryDebtTransactionTypeEnum `json:"debt_transaction_type,omitempty"`
	// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
	Deleted bool `json:"deleted"`
	// The transaction flag
	FlagColor *TransactionSummaryFlagColorEnum `json:"flag_color,omitempty"`
	ID        string                           `json:"id"`
	// If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
	ImportID *string `json:"import_id,omitempty"`
	// If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
	ImportPayeeName *string `json:"import_payee_name,omitempty"`
	// If the transaction was imported, the original payee name as it appeared on the statement
	ImportPayeeNameOriginal *string `json:"import_payee_name_original,omitempty"`
	// If transaction is matched, the id of the matched transaction
	MatchedTransactionID *string `json:"matched_transaction_id,omitempty"`
	Memo                 *string `json:"memo,omitempty"`
	PayeeID              *string `json:"payee_id,omitempty"`
	// If a transfer transaction, the account to which it transfers
	TransferAccountID *string `json:"transfer_account_id,omitempty"`
	// If a transfer transaction, the id of transaction on the other side of the transfer
	TransferTransactionID *string `json:"transfer_transaction_id,omitempty"`
}
