// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type PostPortfolioAnalysisAlphaRequestBody2Portfolios struct {
	// portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array
	PortfolioReturns []float64 `json:"portfolioReturns"`
}

type PostPortfolioAnalysisAlphaRequestBody2 struct {
	// benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays
	BenchmarkReturns []float64                                          `json:"benchmarkReturns"`
	Portfolios       []PostPortfolioAnalysisAlphaRequestBody2Portfolios `json:"portfolios"`
	// riskFreeReturns[t] is the risk free return at the time t; the riskFreeReturns array must have the same length as all the portfolioReturns arrays
	RiskFreeReturns []float64 `json:"riskFreeReturns,omitempty"`
}

type PostPortfolioAnalysisAlphaRequestBody1Portfolios struct {
	// portfolioReturns[t] is the return of the portfolio at the time t, all the portfolioReturns arrays must have the same length, equal to the length of the benchmarkReturns array
	PortfolioReturns []float64 `json:"portfolioReturns"`
}

type PostPortfolioAnalysisAlphaRequestBody1 struct {
	// benchmarkReturns[t] is the return of the benchmark at the time t; the benchmarkReturns array must have the same length as all the portfolioReturns arrays
	BenchmarkReturns []float64                                          `json:"benchmarkReturns"`
	Portfolios       []PostPortfolioAnalysisAlphaRequestBody1Portfolios `json:"portfolios"`
	// The risk free rate, assumed to be constant for any time t
	RiskFreeRate *float64 `json:"riskFreeRate,omitempty"`
}

type PostPortfolioAnalysisAlphaRequestBodyType string

const (
	PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody1 PostPortfolioAnalysisAlphaRequestBodyType = "post_/portfolio/analysis/alpha_requestBody_1"
	PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody2 PostPortfolioAnalysisAlphaRequestBodyType = "post_/portfolio/analysis/alpha_requestBody_2"
)

type PostPortfolioAnalysisAlphaRequestBody struct {
	PostPortfolioAnalysisAlphaRequestBody1 *PostPortfolioAnalysisAlphaRequestBody1
	PostPortfolioAnalysisAlphaRequestBody2 *PostPortfolioAnalysisAlphaRequestBody2

	Type PostPortfolioAnalysisAlphaRequestBodyType
}

func CreatePostPortfolioAnalysisAlphaRequestBodyPostPortfolioAnalysisAlphaRequestBody1(postPortfolioAnalysisAlphaRequestBody1 PostPortfolioAnalysisAlphaRequestBody1) PostPortfolioAnalysisAlphaRequestBody {
	typ := PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody1

	return PostPortfolioAnalysisAlphaRequestBody{
		PostPortfolioAnalysisAlphaRequestBody1: &postPortfolioAnalysisAlphaRequestBody1,
		Type:                                   typ,
	}
}

func CreatePostPortfolioAnalysisAlphaRequestBodyPostPortfolioAnalysisAlphaRequestBody2(postPortfolioAnalysisAlphaRequestBody2 PostPortfolioAnalysisAlphaRequestBody2) PostPortfolioAnalysisAlphaRequestBody {
	typ := PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody2

	return PostPortfolioAnalysisAlphaRequestBody{
		PostPortfolioAnalysisAlphaRequestBody2: &postPortfolioAnalysisAlphaRequestBody2,
		Type:                                   typ,
	}
}

func (u *PostPortfolioAnalysisAlphaRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postPortfolioAnalysisAlphaRequestBody1 := new(PostPortfolioAnalysisAlphaRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postPortfolioAnalysisAlphaRequestBody1); err == nil {
		u.PostPortfolioAnalysisAlphaRequestBody1 = postPortfolioAnalysisAlphaRequestBody1
		u.Type = PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody1
		return nil
	}

	postPortfolioAnalysisAlphaRequestBody2 := new(PostPortfolioAnalysisAlphaRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postPortfolioAnalysisAlphaRequestBody2); err == nil {
		u.PostPortfolioAnalysisAlphaRequestBody2 = postPortfolioAnalysisAlphaRequestBody2
		u.Type = PostPortfolioAnalysisAlphaRequestBodyTypePostPortfolioAnalysisAlphaRequestBody2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostPortfolioAnalysisAlphaRequestBody) MarshalJSON() ([]byte, error) {
	if u.PostPortfolioAnalysisAlphaRequestBody1 != nil {
		return json.Marshal(u.PostPortfolioAnalysisAlphaRequestBody1)
	}

	if u.PostPortfolioAnalysisAlphaRequestBody2 != nil {
		return json.Marshal(u.PostPortfolioAnalysisAlphaRequestBody2)
	}

	return nil, nil
}

type PostPortfolioAnalysisAlpha200ApplicationJSONPortfolios struct {
	// The portfolio Jensen's alpha, which correponds to the portfolio excess return adjusted for the systematic risk in the Capital Asset Pricing Model (CAPM)
	PortfolioAlpha float64 `json:"portfolioAlpha"`
}

// PostPortfolioAnalysisAlpha200ApplicationJSON - OK
type PostPortfolioAnalysisAlpha200ApplicationJSON struct {
	Portfolios []PostPortfolioAnalysisAlpha200ApplicationJSONPortfolios `json:"portfolios"`
}

type PostPortfolioAnalysisAlphaResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostPortfolioAnalysisAlpha200ApplicationJSONObject *PostPortfolioAnalysisAlpha200ApplicationJSON
}
