/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * ViewerCertificate - &lt;p&gt;A complex type that specifies the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Which SSL/TLS certificate to use when viewers request objects using HTTPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether you want CloudFront to use dedicated IP addresses or SNI when you're using alternate domain names in your object names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The minimum protocol version that you want CloudFront to use when communicating with viewers&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"&gt;Using an HTTPS Connection to Access Your Objects&lt;/a&gt; in the &lt;i&gt;Amazon Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
public class ViewerCertificate {
    
    public String acmCertificateArn;
    public ViewerCertificate withACMCertificateArn(String acmCertificateArn) {
        this.acmCertificateArn = acmCertificateArn;
        return this;
    }
    
    
    public String certificate;
    public ViewerCertificate withCertificate(String certificate) {
        this.certificate = certificate;
        return this;
    }
    
    
    public ViewerCertificateCertificateSourceEnum certificateSource;
    public ViewerCertificate withCertificateSource(ViewerCertificateCertificateSourceEnum certificateSource) {
        this.certificateSource = certificateSource;
        return this;
    }
    
    
    public Boolean cloudFrontDefaultCertificate;
    public ViewerCertificate withCloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
        this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
        return this;
    }
    
    
    public String iamCertificateId;
    public ViewerCertificate withIAMCertificateId(String iamCertificateId) {
        this.iamCertificateId = iamCertificateId;
        return this;
    }
    
    
    public MinimumProtocolVersionEnum minimumProtocolVersion;
    public ViewerCertificate withMinimumProtocolVersion(MinimumProtocolVersionEnum minimumProtocolVersion) {
        this.minimumProtocolVersion = minimumProtocolVersion;
        return this;
    }
    
    
    public SSLSupportMethodEnum sslSupportMethod;
    public ViewerCertificate withSSLSupportMethod(SSLSupportMethodEnum sslSupportMethod) {
        this.sslSupportMethod = sslSupportMethod;
        return this;
    }
    
}
