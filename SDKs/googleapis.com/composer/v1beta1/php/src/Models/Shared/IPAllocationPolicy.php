<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IPAllocationPolicy - Configuration for controlling how IPs are allocated in the GKE cluster.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IPAllocationPolicy
{
    /**
     * Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
     * 
     * @var ?string $clusterIpv4CidrBlock
     */
	#[\JMS\Serializer\Annotation\SerializedName('clusterIpv4CidrBlock')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clusterIpv4CidrBlock = null;
    
    /**
     * Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
     * 
     * @var ?string $clusterSecondaryRangeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('clusterSecondaryRangeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clusterSecondaryRangeName = null;
    
    /**
     * Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
     * 
     * @var ?string $servicesIpv4CidrBlock
     */
	#[\JMS\Serializer\Annotation\SerializedName('servicesIpv4CidrBlock')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $servicesIpv4CidrBlock = null;
    
    /**
     * Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
     * 
     * @var ?string $servicesSecondaryRangeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('servicesSecondaryRangeName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $servicesSecondaryRangeName = null;
    
    /**
     * Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
     * 
     * @var ?bool $useIpAliases
     */
	#[\JMS\Serializer\Annotation\SerializedName('useIpAliases')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useIpAliases = null;
    
	public function __construct()
	{
		$this->clusterIpv4CidrBlock = null;
		$this->clusterSecondaryRangeName = null;
		$this->servicesIpv4CidrBlock = null;
		$this->servicesSecondaryRangeName = null;
		$this->useIpAliases = null;
	}
}
