/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Picture } from "./picture";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

export class AlbumPictureSizes extends SpeakeasyBase {
  /**
   * The height of the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height: number;

  /**
   * The direct link to the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * The direct link to the image with a play button overlay.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link_with_play_button" })
  linkWithPlayButton?: string;

  /**
   * The width of the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width: number;
}

/**
 * The type of the picture:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `caution` - An image that is appropriate for all ages.
 *  * `custom` - A custom image for the video.
 *  * `default` - The default image for the video.
 *
 */
export enum AlbumPictureTypeEnum {
  Caution = "caution",
  Custom = "custom",
  Default = "default",
}

/**
 * The custom logo for this album.
 */
export class AlbumPicture extends SpeakeasyBase {
  /**
   * Whether this picture is the active picture for its parent resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The upload URL for the picture. This field appears when you create the picture resource for the first time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The picture's resource key string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * An array containing reference information about all available image files.
   */
  @SpeakeasyMetadata({ elemType: AlbumPictureSizes })
  @Expose({ name: "sizes" })
  @Type(() => AlbumPictureSizes)
  sizes: AlbumPictureSizes[];

  /**
   * The type of the picture:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `caution` - An image that is appropriate for all ages.
   *  * `custom` - A custom image for the video.
   *  * `default` - The default image for the video.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: AlbumPictureTypeEnum;

  /**
   * The picture's URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * Embed data for the album.
 */
export class AlbumEmbed extends SpeakeasyBase {
  /**
   * The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn't password and when the album has embeddable videos.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "html" })
  html: string;
}

/**
 * The album's layout preference
 */
export enum AlbumLayoutEnum {
  Grid = "grid",
  Player = "player",
}

/**
 * Information about the videos that belong to this album.
 */
export class AlbumMetadataConnectionsVideos extends SpeakeasyBase {
  /**
   * An array of the HTTP methods permitted on this URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The total number of videos on this connection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total: number;

  /**
   * The API URI that resolves to the connection data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A collection of information that is connected to this resource.
 */
export class AlbumMetadataConnections extends SpeakeasyBase {
  /**
   * Information about the videos that belong to this album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => AlbumMetadataConnectionsVideos)
  videos: AlbumMetadataConnectionsVideos;
}

/**
 * An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.
 */
export class AlbumMetadataInteractionsAddCustomThumbnails extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.
 */
export class AlbumMetadataInteractionsAddLogos extends SpeakeasyBase {
  /**
   * An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.
 */
export class AlbumMetadataInteractionsAddVideos extends SpeakeasyBase {
  /**
   * An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  /**
   * The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;
}

/**
 * A list of resource URIs related to the album.
 */
export class AlbumMetadataInteractions extends SpeakeasyBase {
  /**
   * An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_custom_thumbnails" })
  @Type(() => AlbumMetadataInteractionsAddCustomThumbnails)
  addCustomThumbnails: AlbumMetadataInteractionsAddCustomThumbnails;

  /**
   * An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_logos" })
  @Type(() => AlbumMetadataInteractionsAddLogos)
  addLogos: AlbumMetadataInteractionsAddLogos;

  /**
   * An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add_videos" })
  @Type(() => AlbumMetadataInteractionsAddVideos)
  addVideos: AlbumMetadataInteractionsAddVideos;
}

/**
 * Metadata about the album.
 */
export class AlbumMetadata extends SpeakeasyBase {
  /**
   * A collection of information that is connected to this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connections" })
  @Type(() => AlbumMetadataConnections)
  connections: AlbumMetadataConnections;

  /**
   * A list of resource URIs related to the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interactions" })
  @Type(() => AlbumMetadataInteractions)
  interactions: AlbumMetadataInteractions;
}

/**
 * Who can view the album:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `anybody` - Anyone can view the album.
 *  * `embed_only` - Only owner can see album, can be embedded off-site
 *  * `password` - Only those with the password can view the album.
 *
 */
export enum AlbumPrivacyViewEnum {
  Anybody = "anybody",
  EmbedOnly = "embed_only",
  Password = "password",
}

/**
 * The privacy settings of the album.
 */
export class AlbumPrivacy extends SpeakeasyBase {
  /**
   * The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * Who can view the album:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `anybody` - Anyone can view the album.
   *  * `embed_only` - Only owner can see album, can be embedded off-site
   *  * `password` - Only those with the password can view the album.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view: AlbumPrivacyViewEnum;
}

/**
 * Sort type of the album.
 */
export enum AlbumSortEnum {
  AddedFirst = "added_first",
  AddedLast = "added_last",
  Alphabetical = "alphabetical",
  Arranged = "arranged",
  Comments = "comments",
  Likes = "likes",
  Newest = "newest",
  Oldest = "oldest",
  Plays = "plays",
}

/**
 * The album's color theme preference
 */
export enum AlbumThemeEnum {
  Dark = "dark",
  Standard = "standard",
}

/**
 * The album was created.
 */
export class Album extends SpeakeasyBase {
  /**
   * Whether an album should allow continuous play.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_continuous_play" })
  allowContinuousPlay: boolean;

  /**
   * Whether an album should allow downloads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_downloads" })
  allowDownloads: boolean;

  /**
   * Whether an album should allow sharing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_share" })
  allowShare: boolean;

  /**
   * Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brand_color" })
  brandColor: string;

  /**
   * The time in ISO 8601 format that the album was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  createdTime: string;

  /**
   * The custom logo for this album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_logo" })
  @Type(() => AlbumPicture)
  customLogo: AlbumPicture;

  /**
   * A brief description of the album's content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The custom domain a user has selected for their album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  domain: string;

  /**
   * The total duration in seconds of all the videos in the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: number;

  /**
   * Embed data for the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  @Type(() => AlbumEmbed)
  embed: AlbumEmbed;

  /**
   * Whether to show the album's custom brand color in the player of the album's embedded playlist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_brand_color" })
  embedBrandColor: boolean;

  /**
   * Whether to show the album's custom logo in the player of the album's embedded playlist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_custom_logo" })
  embedCustomLogo: boolean;

  /**
   * Whether to hide the Vimeo navigation when viewing the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hide_nav" })
  hideNav: boolean;

  /**
   * Whether to hide the Vimeo logo in the player of the album's embedded playlist.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hide_vimeo_logo" })
  hideVimeoLogo: boolean;

  /**
   * The album's layout preference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "layout" })
  layout: AlbumLayoutEnum;

  /**
   * The URL to access the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * Metadata about the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => AlbumMetadata)
  metadata: AlbumMetadata;

  /**
   * The time in ISO 8601 format when the album was last modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modified_time" })
  modifiedTime: string;

  /**
   * The album's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The active image for the album; defaults to the thumbnail of the last video added to the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pictures" })
  @Type(() => Picture)
  pictures: Picture;

  /**
   * The privacy settings of the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => AlbumPrivacy)
  privacy: AlbumPrivacy;

  /**
   * The album resource key.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource_key" })
  resourceKey: string;

  /**
   * Whether album videos should use the review mode URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "review_mode" })
  reviewMode: boolean;

  /**
   * Sort type of the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sort" })
  sort: AlbumSortEnum;

  /**
   * The album's color theme preference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "theme" })
  theme: AlbumThemeEnum;

  /**
   * The album's URI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri: string;

  /**
   * The custom Vimeo URL a user has selected for their album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  /**
   * Whether the user has opted in to use a custom domain for their album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "use_custom_domain" })
  useCustomDomain: boolean;

  /**
   * The owner of the album.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user: User;

  /**
   * Whether an album should show the brand color in the web layout.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "web_brand_color" })
  webBrandColor: boolean;

  /**
   * Whether an album's custom logo should be shown in the web layout.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "web_custom_logo" })
  webCustomLogo: boolean;
}
