// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobStateEnum - Output only. The current state of the Job.
type JobStateEnum string

const (
	JobStateEnumStateUnspecified JobStateEnum = "STATE_UNSPECIFIED"
	JobStateEnumPending          JobStateEnum = "PENDING"
	JobStateEnumDisabled         JobStateEnum = "DISABLED"
	JobStateEnumInProgress       JobStateEnum = "IN_PROGRESS"
	JobStateEnumSucceeded        JobStateEnum = "SUCCEEDED"
	JobStateEnumFailed           JobStateEnum = "FAILED"
	JobStateEnumAborted          JobStateEnum = "ABORTED"
)

func (e *JobStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "DISABLED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "ABORTED":
		*e = JobStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStateEnum: %s", s)
	}
}

// Job - Job represents an operation for a `Rollout`.
type Job struct {
	// A deploy Job.
	DeployJob map[string]interface{} `json:"deployJob,omitempty"`
	// Output only. The ID of the Job.
	ID *string `json:"id,omitempty"`
	// Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.
	JobRun *string `json:"jobRun,omitempty"`
	// Output only. The current state of the Job.
	State *JobStateEnum `json:"state,omitempty"`
	// A verify Job.
	VerifyJob map[string]interface{} `json:"verifyJob,omitempty"`
}
