"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvitedVendor:
    
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Action to be taken"""  
    email_open_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_open_rate'), 'exclude': lambda f: f is None }})
    r"""Email opening rate of the vendor"""  
    is_entered: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_entered'), 'exclude': lambda f: f is None }})
    r"""Did the vendor enter the given project"""  
    is_get_paid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_get_paid'), 'exclude': lambda f: f is None }})
    r"""Is vendor get ever paid?"""  
    is_worked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_worked'), 'exclude': lambda f: f is None }})
    r"""Did the vendor work on the given project"""  
    is_worked_in_any_project: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_worked_in_any_project'), 'exclude': lambda f: f is None }})
    r"""Vendors working status in any project"""  
    last_project_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_project_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last project date"""  
    project_status_when_interacted: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_status_when_interacted'), 'exclude': lambda f: f is None }})
    r"""Project translation percentage when interacted with the vendor"""  
    registration_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Registration date"""  
    responsiveness: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsiveness'), 'exclude': lambda f: f is None }})
    r"""Responsiveness of the vendor"""  
    user_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""Id in the Users"""  
    vendor_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor_id'), 'exclude': lambda f: f is None }})
    r"""Id in the Vendors"""  
    vendor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor_name'), 'exclude': lambda f: f is None }})
    r"""The name of the vendor"""  
    vendor_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor_type'), 'exclude': lambda f: f is None }})
    r"""Type of the vendor in the given project namely translator or proofreader"""  
    