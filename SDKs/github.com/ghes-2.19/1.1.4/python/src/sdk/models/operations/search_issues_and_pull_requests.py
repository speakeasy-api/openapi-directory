"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import issue_search_result_item as shared_issue_search_result_item
from ..shared import order_enum as shared_order_enum
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SearchIssuesAndPullRequestsSortEnum(str, Enum):
    r"""Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@2.19/rest/reference/search#ranking-search-results)"""
    COMMENTS = 'comments'
    REACTIONS = 'reactions'
    REACTIONS_PLUS_1 = 'reactions-+1'
    REACTIONS_1 = 'reactions--1'
    REACTIONS_SMILE = 'reactions-smile'
    REACTIONS_THINKING_FACE = 'reactions-thinking_face'
    REACTIONS_HEART = 'reactions-heart'
    REACTIONS_TADA = 'reactions-tada'
    INTERACTIONS = 'interactions'
    CREATED = 'created'
    UPDATED = 'updated'


@dataclasses.dataclass
class SearchIssuesAndPullRequestsRequest:
    
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@2.19/rest/reference/search#constructing-a-search-query). See \\"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\\" for a detailed list of qualifiers."""  
    order: Optional[shared_order_enum.OrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    sort: Optional[SearchIssuesAndPullRequestsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@2.19/rest/reference/search#ranking-search-results)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchIssuesAndPullRequests503ApplicationJSON:
    r"""Service unavailable"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchIssuesAndPullRequests200ApplicationJSON:
    r"""Response"""
    
    incomplete_results: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incomplete_results') }})  
    items: list[shared_issue_search_result_item.IssueSearchResultItem] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})  
    total_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_count') }})  
    

@dataclasses.dataclass
class SearchIssuesAndPullRequestsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_issues_and_pull_requests_200_application_json_object: Optional[SearchIssuesAndPullRequests200ApplicationJSON] = dataclasses.field(default=None)
    r"""Response"""  
    search_issues_and_pull_requests_503_application_json_object: Optional[SearchIssuesAndPullRequests503ApplicationJSON] = dataclasses.field(default=None)
    r"""Service unavailable"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    