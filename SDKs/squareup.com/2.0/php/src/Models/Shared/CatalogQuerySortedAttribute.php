<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CatalogQuerySortedAttribute - The query expression to specify the key to sort search results.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CatalogQuerySortedAttribute
{
    /**
     * The attribute whose value is used as the sort key.
     * 
     * @var string $attributeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('attribute_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $attributeName;
    
    /**
     * The first attribute value to be returned by the query. Ascending sorts will return only
     * 
     * objects with this value or greater, while descending sorts will return only objects with this value
     * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
     * 
     * @var ?string $initialAttributeValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('initial_attribute_value')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $initialAttributeValue = null;
    
    /**
     * The desired sort order, `"ASC"` (ascending) or `"DESC"` (descending).
     * 
     * @var ?string $sortOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('sort_order')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sortOrder = null;
    
	public function __construct()
	{
		$this->attributeName = "";
		$this->initialAttributeValue = null;
		$this->sortOrder = null;
	}
}
