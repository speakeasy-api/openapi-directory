"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AccountCreateApplicationJSONOptionsPayModeEnum(str, Enum):
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""
    MASTER = 'master'
    SUB = 'sub'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCreateApplicationJSONOptions:
    r"""Account options object."""
    
    billing_auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_auto_renew'), 'exclude': lambda f: f is None }})
    r"""Toggle whether automatic billing renewal is on or off."""  
    meeting_connector_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_connector_list'), 'exclude': lambda f: f is None }})
    r"""Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_mc` is set to `true`.
    """  
    pay_mode: Optional[AccountCreateApplicationJSONOptionsPayModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pay_mode'), 'exclude': lambda f: f is None }})
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""  
    room_connector_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_connector_list'), 'exclude': lambda f: f is None }})
    r"""Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_rc` is set to `true`.
    """  
    share_mc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_mc'), 'exclude': lambda f: f is None }})
    r"""Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users."""  
    share_rc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_rc'), 'exclude': lambda f: f is None }})
    r"""Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCreateApplicationJSON:
    r"""The account object represents an account on Zoom. The account owner is the user who created the account or had an account created for them. You can read more about the Zoom account structure <a href='https://medium.com/zoom-developer-blog/a-brief-look-at-zoom-account-structures-1d19c745bf8a' target='_blank'>here</a>."""
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""User's email address."""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})
    r"""User's first name."""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})
    r"""User's last name."""  
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""User's password.
    
    **Note:** If the account owner or admin has enabled [enhanced password requirements](https://support.zoom.us/hc/en-us/articles/360034675592-Advanced-security-settings#h_fa9186e4-6818-4f7a-915c-2e25c19f0acd), the value provided in this field must meet those requirements. These requirements can be retrieved by calling the [Get Account Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) and referring to the `password_requirement` field present in the `security` object.
    """  
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_name'), 'exclude': lambda f: f is None }})
    r"""Name of the account. If you do not provide a value for this field, by default, the value will be set as a concatenation of \\"first_name\\" and \\"last_name\\"."""  
    options: Optional[AccountCreateApplicationJSONOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Account options object."""  
    

@dataclasses.dataclass
class AccountCreate201ApplicationXML:
    r"""Account created."""
    
    created_at: Optional[str] = dataclasses.field(default=None)
    r"""Account created date time."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Account ID."""  
    owner_email: Optional[str] = dataclasses.field(default=None)
    r"""Account owner email."""  
    owner_id: Optional[str] = dataclasses.field(default=None)
    r"""Account owner ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountCreate201ApplicationJSON:
    r"""Account created."""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""Account created date time."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Account ID."""  
    owner_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_email'), 'exclude': lambda f: f is None }})
    r"""Account owner email."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id'), 'exclude': lambda f: f is None }})
    r"""Account owner ID."""  
    

@dataclasses.dataclass
class AccountCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_create_201_application_json_object: Optional[AccountCreate201ApplicationJSON] = dataclasses.field(default=None)
    r"""Account created."""  
    body: Optional[bytes] = dataclasses.field(default=None)  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    