/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A structure used to include auditing information on the privileged API.
 */
export class GetTemporaryGlueTableCredentialsRequestBodyAuditContext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalAuditContext" })
  additionalAuditContext?: string;
}

export class GetTemporaryGlueTableCredentialsRequestBody extends SpeakeasyBase {
  /**
   * A structure used to include auditing information on the privileged API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AuditContext" })
  @Type(() => GetTemporaryGlueTableCredentialsRequestBodyAuditContext)
  auditContext?: GetTemporaryGlueTableCredentialsRequestBodyAuditContext;

  /**
   * The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DurationSeconds" })
  durationSeconds?: number;

  /**
   * Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Permissions" })
  permissions?: shared.PermissionEnum[];

  /**
   * A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupportedPermissionTypes" })
  supportedPermissionTypes: shared.PermissionTypeEnum[];

  /**
   * The ARN identifying a table in the Data Catalog for the temporary credentials request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TableArn" })
  tableArn: string;
}

export class GetTemporaryGlueTableCredentialsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetTemporaryGlueTableCredentialsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetTemporaryGlueTableCredentialsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EntityNotFoundException
   */
  @SpeakeasyMetadata()
  entityNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getTemporaryGlueTableCredentialsResponse?: shared.GetTemporaryGlueTableCredentialsResponse;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * InvalidInputException
   */
  @SpeakeasyMetadata()
  invalidInputException?: any;

  /**
   * OperationTimeoutException
   */
  @SpeakeasyMetadata()
  operationTimeoutException?: any;

  /**
   * PermissionTypeMismatchException
   */
  @SpeakeasyMetadata()
  permissionTypeMismatchException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
