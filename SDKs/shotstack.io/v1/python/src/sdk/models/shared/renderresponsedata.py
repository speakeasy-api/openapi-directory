"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import edit as shared_edit
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RenderResponseDataStatusEnum(str, Enum):
    r"""The status of the render task. <ul>
      <li>`queued` - render is queued waiting to be rendered</li>
      <li>`fetching` - assets are being fetched</li>
      <li>`rendering` - the asset is being rendered</li>
      <li>`saving` - the final asset is being saved to storage</li>
      <li>`done` - the asset is ready to be downloaded</li>
      <li>`failed` - there was an error rendering the asset</li>
    </ul>
    """
    QUEUED = 'queued'
    FETCHING = 'fetching'
    RENDERING = 'rendering'
    SAVING = 'saving'
    DONE = 'done'
    FAILED = 'failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RenderResponseData:
    r"""The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL."""
    
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The time the render task was initially queued."""  
    data: shared_edit.Edit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    r"""An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of the render task in UUID format."""  
    owner: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""The owner id of the render task."""  
    status: RenderResponseDataStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the render task. <ul>
      <li>`queued` - render is queued waiting to be rendered</li>
      <li>`fetching` - assets are being fetched</li>
      <li>`rendering` - the asset is being rendered</li>
      <li>`saving` - the final asset is being saved to storage</li>
      <li>`done` - the asset is ready to be downloaded</li>
      <li>`failed` - there was an error rendering the asset</li>
    </ul>
    """  
    updated: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated') }})
    r"""The time the render status was last updated."""  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The output video or audio length in seconds."""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""An error message, only displayed if an error occurred."""  
    plan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan'), 'exclude': lambda f: f is None }})
    r"""The customer subscription plan."""  
    poster: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('poster'), 'exclude': lambda f: f is None }})
    r"""The URL of the poster image if requested. This will only be available if status is done."""  
    render_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renderTime'), 'exclude': lambda f: f is None }})
    r"""The time taken to render the asset in milliseconds."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""The URL of the thumbnail image if requested. This will only be available if status is done."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination."""  
    