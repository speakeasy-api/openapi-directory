/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetWorkspaceSlugActivitiesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearer: string;
}

/**
 * Comma separated list of activity types
 */
export enum GetWorkspaceSlugActivitiesActivityTypeEnum {
  DiscourseTopicCreated = "discourse:topic:created",
  DiscoursePostLiked = "discourse:post:liked",
  DiscourseUserCreated = "discourse:user:created",
  DiscoursePostCreated = "discourse:post:created",
  SlackMessageSent = "slack:message:sent",
  SlackThreadReplied = "slack:thread:replied",
  SlackChannelJoined = "slack:channel:joined",
  NoteCreated = "note:created",
  PostCreated = "post:created",
  IssuesOpened = "issues:opened",
  DiscordMessageSent = "discord:message:sent",
  IssueCommentCreated = "issue_comment:created",
  DiscordThreadReplied = "discord:thread:replied",
  CustomHappened = "custom:happened",
  DevComment = "dev:comment",
  DiscordMessageReplied = "discord:message:replied",
  DiscordServerJoined = "discord:server:joined",
  InsidedConversationStarted = "insided:conversation:started",
  ForkCreated = "fork:created",
  InsidedIdeaReplied = "insided:idea:replied",
  InsidedArticleCreated = "insided:article:created",
  DiscussionsDiscussionCreated = "discussions:discussion_created",
  InsidedQuestionReplied = "insided:question:replied",
  DiscussionsComment = "discussions:comment",
  DiscussionsReply = "discussions:reply",
  InsidedArticleReplied = "insided:article:replied",
  InsidedQuestionAsked = "insided:question:asked",
  InsidedConversationReplied = "insided:conversation:replied",
  InsidedIdeaSubmitted = "insided:idea:submitted",
  RedditComment = "reddit:comment",
  RedditPost = "reddit:post",
  StackoverflowAnswer = "stackoverflow:answer",
  LinkedinComment = "linkedin:comment",
  PullRequestsOpened = "pull_requests:opened",
  PullRequestsMerged = "pull_requests:merged",
  StarCreated = "star:created",
  StackoverflowQuestion = "stackoverflow:question",
  TweetSent = "tweet:sent",
  TwitterFollowed = "twitter:followed",
  YoutubeComment = "youtube:comment",
}

export enum GetWorkspaceSlugActivitiesAffiliationEnum {
  Member = "member",
  Teammate = "teammate",
}

export enum GetWorkspaceSlugActivitiesDirectionEnum {
  Asc = "ASC",
  Desc = "DESC",
}

export enum GetWorkspaceSlugActivitiesIdentityEnum {
  Github = "github",
  Twitter = "twitter",
  Email = "email",
  Discourse = "discourse",
  Linkedin = "linkedin",
  Devto = "devto",
  Slack = "slack",
  Discord = "discord",
}

export enum GetWorkspaceSlugActivitiesItemsEnum {
  Ten = "10",
  Fifty = "50",
  OneHundred = "100",
}

export enum GetWorkspaceSlugActivitiesSortEnum {
  OccurredAt = "occurred_at",
  Member = "member",
}

export class GetWorkspaceSlugActivitiesRequest extends SpeakeasyBase {
  /**
   * Comma separated list of activity types
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=activity_type",
  })
  activityType?: GetWorkspaceSlugActivitiesActivityTypeEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=affiliation",
  })
  affiliation?: GetWorkspaceSlugActivitiesAffiliationEnum;

  /**
   * Comma separated list of cities. The union (OR) of cities is applied.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cities[]",
  })
  cities?: string;

  /**
   * Comma separated list of companies. The union (OR) of companies is applied.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=company[]",
  })
  company?: string;

  /**
   * Comma separated list of countries. The union (OR) of countries is applied.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countries[]",
  })
  countries?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: GetWorkspaceSlugActivitiesDirectionEnum;

  /**
   * Filter activities before this date. Format: YYYY-MM-DD.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=end_date",
  })
  endDate?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=identity",
  })
  identity?: GetWorkspaceSlugActivitiesIdentityEnum;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=items" })
  items?: GetWorkspaceSlugActivitiesItemsEnum;

  /**
   * The list of tags to filter against. Separate tags with `,` to do an intersection (AND), or with `|` to do a union (OR)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=member_tags",
  })
  memberTags?: string;

  /**
   * The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like `23` would include levels 2 and 3. `n` is for members with no orbit level.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=orbit" })
  orbit?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: string;

  /**
   * Comma separated list of regions. The union (OR) of regions is applied.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=regions[]",
  })
  regions?: string;

  /**
   * Relative timeframes. Format: this_<integer>_<period>, with period in [days, weeks, months, years]. For example, this_30_days.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=relative",
  })
  relative?: string;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetWorkspaceSlugActivitiesSortEnum;

  /**
   * Filter activities after this date. Format: YYYY-MM-DD.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=start_date",
  })
  startDate?: string;

  /**
   * Comma separated list of job titles. The union (OR) of job titles is applied.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=title[]",
  })
  title?: string;

  /**
   * Deprecated in favor of the activity_type parameter.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace_slug",
  })
  workspaceSlug: string;
}

export class GetWorkspaceSlugActivitiesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
