/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class TaxDeclaration {
    /**
     * If the employee has approved withholding variation. e.g (0 - 100)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApprovedWithholdingVariationPercentage")
    public Double approvedWithholdingVariationPercentage;

    public TaxDeclaration withApprovedWithholdingVariationPercentage(Double approvedWithholdingVariationPercentage) {
        this.approvedWithholdingVariationPercentage = approvedWithholdingVariationPercentage;
        return this;
    }
    
    /**
     * If the employee is Australian resident for tax purposes. e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AustralianResidentForTaxPurposes")
    public Boolean australianResidentForTaxPurposes;

    public TaxDeclaration withAustralianResidentForTaxPurposes(Boolean australianResidentForTaxPurposes) {
        this.australianResidentForTaxPurposes = australianResidentForTaxPurposes;
        return this;
    }
    
    /**
     * If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EligibleToReceiveLeaveLoading")
    public Boolean eligibleToReceiveLeaveLoading;

    public TaxDeclaration withEligibleToReceiveLeaveLoading(Boolean eligibleToReceiveLeaveLoading) {
        this.eligibleToReceiveLeaveLoading = eligibleToReceiveLeaveLoading;
        return this;
    }
    
    /**
     * Address line 1 for employee home address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EmployeeID")
    public String employeeID;

    public TaxDeclaration withEmployeeID(String employeeID) {
        this.employeeID = employeeID;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EmploymentBasis")
    public EmploymentBasisEnum employmentBasis;

    public TaxDeclaration withEmploymentBasis(EmploymentBasisEnum employmentBasis) {
        this.employmentBasis = employmentBasis;
        return this;
    }
    
    /**
     * If employee has HECS or HELP debt. e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HasHELPDebt")
    public Boolean hasHELPDebt;

    public TaxDeclaration withHasHELPDebt(Boolean hasHELPDebt) {
        this.hasHELPDebt = hasHELPDebt;
        return this;
    }
    
    /**
     * If employee has financial supplement debt. e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HasSFSSDebt")
    public Boolean hasSFSSDebt;

    public TaxDeclaration withHasSFSSDebt(Boolean hasSFSSDebt) {
        this.hasSFSSDebt = hasSFSSDebt;
        return this;
    }
    
    /**
     * If the employee is eligible for student startup loan rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HasStudentStartupLoan")
    public Boolean hasStudentStartupLoan;

    public TaxDeclaration withHasStudentStartupLoan(Boolean hasStudentStartupLoan) {
        this.hasStudentStartupLoan = hasStudentStartupLoan;
        return this;
    }
    
    /**
     * If employee has trade support loan. e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HasTradeSupportLoanDebt")
    public Boolean hasTradeSupportLoanDebt;

    public TaxDeclaration withHasTradeSupportLoanDebt(Boolean hasTradeSupportLoanDebt) {
        this.hasTradeSupportLoanDebt = hasTradeSupportLoanDebt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResidencyStatus")
    public ResidencyStatusEnum residencyStatus;

    public TaxDeclaration withResidencyStatus(ResidencyStatusEnum residencyStatus) {
        this.residencyStatus = residencyStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TFNExemptionType")
    public TFNExemptionTypeEnum tfnExemptionType;

    public TaxDeclaration withTFNExemptionType(TFNExemptionTypeEnum tfnExemptionType) {
        this.tfnExemptionType = tfnExemptionType;
        return this;
    }
    
    /**
     * The tax file number e.g 123123123.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxFileNumber")
    public String taxFileNumber;

    public TaxDeclaration withTaxFileNumber(String taxFileNumber) {
        this.taxFileNumber = taxFileNumber;
        return this;
    }
    
    /**
     * If tax free threshold claimed. e.g true or false
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxFreeThresholdClaimed")
    public Boolean taxFreeThresholdClaimed;

    public TaxDeclaration withTaxFreeThresholdClaimed(Boolean taxFreeThresholdClaimed) {
        this.taxFreeThresholdClaimed = taxFreeThresholdClaimed;
        return this;
    }
    
    /**
     * If has tax offset estimated then the tax offset estimated amount. e.g 100
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxOffsetEstimatedAmount")
    public Double taxOffsetEstimatedAmount;

    public TaxDeclaration withTaxOffsetEstimatedAmount(Double taxOffsetEstimatedAmount) {
        this.taxOffsetEstimatedAmount = taxOffsetEstimatedAmount;
        return this;
    }
    
    /**
     * Last modified timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedDateUTC")
    public String updatedDateUTC;

    public TaxDeclaration withUpdatedDateUTC(String updatedDateUTC) {
        this.updatedDateUTC = updatedDateUTC;
        return this;
    }
    
    /**
     * If the employee has requested that additional tax be withheld each pay run. e.g 50
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpwardVariationTaxWithholdingAmount")
    public Double upwardVariationTaxWithholdingAmount;

    public TaxDeclaration withUpwardVariationTaxWithholdingAmount(Double upwardVariationTaxWithholdingAmount) {
        this.upwardVariationTaxWithholdingAmount = upwardVariationTaxWithholdingAmount;
        return this;
    }
    
    public TaxDeclaration(){}
}
