/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A configuration specification to be used to override existing configurations.
 */
export class StartJobRunRequestBodyConfigurationOverrides extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Configuration })
  @Expose({ name: "applicationConfiguration" })
  @Type(() => shared.Configuration)
  applicationConfiguration?: shared.Configuration[];

  @SpeakeasyMetadata()
  @Expose({ name: "monitoringConfiguration" })
  @Type(() => shared.MonitoringConfiguration)
  monitoringConfiguration?: shared.MonitoringConfiguration;
}

/**
 * Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
 */
export class StartJobRunRequestBodyJobDriver extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "sparkSqlJobDriver" })
  @Type(() => shared.SparkSqlJobDriver)
  sparkSqlJobDriver?: shared.SparkSqlJobDriver;

  @SpeakeasyMetadata()
  @Expose({ name: "sparkSubmitJobDriver" })
  @Type(() => shared.SparkSubmitJobDriver)
  sparkSubmitJobDriver?: shared.SparkSubmitJobDriver;
}

/**
 * The configuration of the retry policy that the job runs on.
 */
export class StartJobRunRequestBodyRetryPolicyConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "maxAttempts" })
  maxAttempts?: number;
}

export class StartJobRunRequestBody extends SpeakeasyBase {
  /**
   * The client idempotency token of the job run request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * A configuration specification to be used to override existing configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configurationOverrides" })
  @Type(() => StartJobRunRequestBodyConfigurationOverrides)
  configurationOverrides?: StartJobRunRequestBodyConfigurationOverrides;

  /**
   * The execution role ARN for the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn?: string;

  /**
   * Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobDriver" })
  @Type(() => StartJobRunRequestBodyJobDriver)
  jobDriver?: StartJobRunRequestBodyJobDriver;

  /**
   * The job template ID to be used to start the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobTemplateId" })
  jobTemplateId?: string;

  /**
   * The values of job template parameters to start a job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobTemplateParameters" })
  jobTemplateParameters?: Record<string, string>;

  /**
   * The name of the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The Amazon EMR release version to use for the job run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "releaseLabel" })
  releaseLabel?: string;

  /**
   * The configuration of the retry policy that the job runs on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retryPolicyConfiguration" })
  @Type(() => StartJobRunRequestBodyRetryPolicyConfiguration)
  retryPolicyConfiguration?: StartJobRunRequestBodyRetryPolicyConfiguration;

  /**
   * The tags assigned to job runs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class StartJobRunRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartJobRunRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The virtual cluster ID for which the job run request is submitted.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=virtualClusterId",
  })
  virtualClusterId: string;
}

export class StartJobRunResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startJobRunResponse?: shared.StartJobRunResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
