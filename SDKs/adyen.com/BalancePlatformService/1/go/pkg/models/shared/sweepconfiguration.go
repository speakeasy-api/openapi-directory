// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SweepConfigurationScheduleType string

const (
	SweepConfigurationScheduleTypeCronSweepSchedule SweepConfigurationScheduleType = "CronSweepSchedule"
	SweepConfigurationScheduleTypeSweepSchedule     SweepConfigurationScheduleType = "SweepSchedule"
)

type SweepConfigurationSchedule struct {
	CronSweepSchedule *CronSweepSchedule
	SweepSchedule     *SweepSchedule

	Type SweepConfigurationScheduleType
}

func CreateSweepConfigurationScheduleCronSweepSchedule(cronSweepSchedule CronSweepSchedule) SweepConfigurationSchedule {
	typ := SweepConfigurationScheduleTypeCronSweepSchedule

	return SweepConfigurationSchedule{
		CronSweepSchedule: &cronSweepSchedule,
		Type:              typ,
	}
}

func CreateSweepConfigurationScheduleSweepSchedule(sweepSchedule SweepSchedule) SweepConfigurationSchedule {
	typ := SweepConfigurationScheduleTypeSweepSchedule

	return SweepConfigurationSchedule{
		SweepSchedule: &sweepSchedule,
		Type:          typ,
	}
}

func (u *SweepConfigurationSchedule) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cronSweepSchedule := new(CronSweepSchedule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cronSweepSchedule); err == nil {
		u.CronSweepSchedule = cronSweepSchedule
		u.Type = SweepConfigurationScheduleTypeCronSweepSchedule
		return nil
	}

	sweepSchedule := new(SweepSchedule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sweepSchedule); err == nil {
		u.SweepSchedule = sweepSchedule
		u.Type = SweepConfigurationScheduleTypeSweepSchedule
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SweepConfigurationSchedule) MarshalJSON() ([]byte, error) {
	if u.CronSweepSchedule != nil {
		return json.Marshal(u.CronSweepSchedule)
	}

	if u.SweepSchedule != nil {
		return json.Marshal(u.SweepSchedule)
	}

	return nil, nil
}

// SweepConfigurationStatusEnum - The status of the sweep. If not provided, by default, this is set to **active**.
//
// Possible values:
//
//   - **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
//
//   - **inactive**: the sweep is disabled and cannot be triggered.
type SweepConfigurationStatusEnum string

const (
	SweepConfigurationStatusEnumActive   SweepConfigurationStatusEnum = "active"
	SweepConfigurationStatusEnumInactive SweepConfigurationStatusEnum = "inactive"
)

func (e SweepConfigurationStatusEnum) ToPointer() *SweepConfigurationStatusEnum {
	return &e
}

func (e *SweepConfigurationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = SweepConfigurationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SweepConfigurationStatusEnum: %v", v)
	}
}

// SweepConfigurationTypeEnum - The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
//
// Possible values:
//
//   - **push**: _push out funds_ to a destination balance account or transfer instrument.
//
//   - **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
type SweepConfigurationTypeEnum string

const (
	SweepConfigurationTypeEnumPull SweepConfigurationTypeEnum = "pull"
	SweepConfigurationTypeEnumPush SweepConfigurationTypeEnum = "push"
)

func (e SweepConfigurationTypeEnum) ToPointer() *SweepConfigurationTypeEnum {
	return &e
}

func (e *SweepConfigurationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pull":
		fallthrough
	case "push":
		*e = SweepConfigurationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SweepConfigurationTypeEnum: %v", v)
	}
}

type SweepConfigurationInput struct {
	// The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
	//
	//  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
	BalanceAccountID *string `json:"balanceAccountId,omitempty"`
	// The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
	MerchantAccount *string `json:"merchantAccount,omitempty"`
	// The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
	Schedule SweepConfigurationSchedule `json:"schedule"`
	// The status of the sweep. If not provided, by default, this is set to **active**.
	//
	// Possible values:
	//
	//  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
	//
	//  * **inactive**: the sweep is disabled and cannot be triggered.
	//
	//
	Status       *SweepConfigurationStatusEnum `json:"status,omitempty"`
	SweepAmount  *Amount                       `json:"sweepAmount,omitempty"`
	TargetAmount *Amount                       `json:"targetAmount,omitempty"`
	// The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
	//
	// You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
	TransferInstrumentID *string `json:"transferInstrumentId,omitempty"`
	TriggerAmount        *Amount `json:"triggerAmount,omitempty"`
	// The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
	//
	// Possible values:
	//
	//  * **push**: _push out funds_ to a destination balance account or transfer instrument.
	//
	//  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
	Type *SweepConfigurationTypeEnum `json:"type,omitempty"`
}

type SweepConfiguration struct {
	// The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
	//
	//  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
	BalanceAccountID *string `json:"balanceAccountId,omitempty"`
	// The unique identifier of the sweep.
	ID string `json:"id"`
	// The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
	MerchantAccount *string `json:"merchantAccount,omitempty"`
	// The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
	Schedule SweepConfigurationSchedule `json:"schedule"`
	// The status of the sweep. If not provided, by default, this is set to **active**.
	//
	// Possible values:
	//
	//  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
	//
	//  * **inactive**: the sweep is disabled and cannot be triggered.
	//
	//
	Status       *SweepConfigurationStatusEnum `json:"status,omitempty"`
	SweepAmount  *Amount                       `json:"sweepAmount,omitempty"`
	TargetAmount *Amount                       `json:"targetAmount,omitempty"`
	// The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
	//
	// You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
	TransferInstrumentID *string `json:"transferInstrumentId,omitempty"`
	TriggerAmount        *Amount `json:"triggerAmount,omitempty"`
	// The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
	//
	// Possible values:
	//
	//  * **push**: _push out funds_ to a destination balance account or transfer instrument.
	//
	//  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
	Type *SweepConfigurationTypeEnum `json:"type,omitempty"`
}
