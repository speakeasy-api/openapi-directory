/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReadinessCheck - Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
 */
public class ReadinessCheck {
    /**
     * A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appStartTimeout")
    public String appStartTimeout;

    public ReadinessCheck withAppStartTimeout(String appStartTimeout) {
        this.appStartTimeout = appStartTimeout;
        return this;
    }
    
    /**
     * Interval between health checks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkInterval")
    public String checkInterval;

    public ReadinessCheck withCheckInterval(String checkInterval) {
        this.checkInterval = checkInterval;
        return this;
    }
    
    /**
     * Number of consecutive failed checks required before removing traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureThreshold")
    public Long failureThreshold;

    public ReadinessCheck withFailureThreshold(Long failureThreshold) {
        this.failureThreshold = failureThreshold;
        return this;
    }
    
    /**
     * Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public ReadinessCheck withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The request path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public ReadinessCheck withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Number of consecutive successful checks required before receiving traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successThreshold")
    public Long successThreshold;

    public ReadinessCheck withSuccessThreshold(Long successThreshold) {
        this.successThreshold = successThreshold;
        return this;
    }
    
    /**
     * Time before the check is considered failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;

    public ReadinessCheck withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public ReadinessCheck(){}
}
