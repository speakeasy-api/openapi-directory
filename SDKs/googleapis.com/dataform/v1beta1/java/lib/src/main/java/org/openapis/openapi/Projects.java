/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Lists information about the supported locations for this service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsListResponse dataformProjectsLocationsList(org.openapis.openapi.models.operations.DataformProjectsLocationsListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsListRequest.class, baseUrl, "/v1beta1/{name}/locations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsListResponse(contentType, httpRes.statusCode()) {{
            listLocationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListLocationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListLocationsResponse.class);
                res.listLocationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a new CompilationResult in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse dataformProjectsLocationsRepositoriesCompilationResultsCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest.class, baseUrl, "/v1beta1/{parent}/compilationResults", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "compilationResultInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsCreateResponse(contentType, httpRes.statusCode()) {{
            compilationResult = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CompilationResult out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CompilationResult.class);
                res.compilationResult = out;
            }
        }

        return res;
    }

    /**
     * Lists CompilationResults in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListResponse dataformProjectsLocationsRepositoriesCompilationResultsList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListRequest.class, baseUrl, "/v1beta1/{parent}/compilationResults", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCompilationResultsListResponse(contentType, httpRes.statusCode()) {{
            listCompilationResultsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListCompilationResultsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListCompilationResultsResponse.class);
                res.listCompilationResultsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a new Repository in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateResponse dataformProjectsLocationsRepositoriesCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateRequest.class, baseUrl, "/v1beta1/{parent}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "repositoryInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesCreateResponse(contentType, httpRes.statusCode()) {{
            repository = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Repository out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Repository.class);
                res.repository = out;
            }
        }

        return res;
    }

    /**
     * Fetches a Repository's remote branches.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse dataformProjectsLocationsRepositoriesFetchRemoteBranches(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest.class, baseUrl, "/v1beta1/{name}:fetchRemoteBranches", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesFetchRemoteBranchesResponse(contentType, httpRes.statusCode()) {{
            fetchRemoteBranchesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchRemoteBranchesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchRemoteBranchesResponse.class);
                res.fetchRemoteBranchesResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists Repositories in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListResponse dataformProjectsLocationsRepositoriesList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListRequest.class, baseUrl, "/v1beta1/{parent}/repositories", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesListResponse(contentType, httpRes.statusCode()) {{
            listRepositoriesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListRepositoriesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListRepositoriesResponse.class);
                res.listRepositoriesResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a new ReleaseConfig in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse dataformProjectsLocationsRepositoriesReleaseConfigsCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest.class, baseUrl, "/v1beta1/{parent}/releaseConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "releaseConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsCreateResponse(contentType, httpRes.statusCode()) {{
            releaseConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ReleaseConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ReleaseConfig.class);
                res.releaseConfig = out;
            }
        }

        return res;
    }

    /**
     * Lists ReleaseConfigs in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListResponse dataformProjectsLocationsRepositoriesReleaseConfigsList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListRequest.class, baseUrl, "/v1beta1/{parent}/releaseConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesReleaseConfigsListResponse(contentType, httpRes.statusCode()) {{
            listReleaseConfigsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListReleaseConfigsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListReleaseConfigsResponse.class);
                res.listReleaseConfigsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a new WorkflowConfig in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse dataformProjectsLocationsRepositoriesWorkflowConfigsCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest.class, baseUrl, "/v1beta1/{parent}/workflowConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "workflowConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsCreateResponse(contentType, httpRes.statusCode()) {{
            workflowConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WorkflowConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WorkflowConfig.class);
                res.workflowConfig = out;
            }
        }

        return res;
    }

    /**
     * Lists WorkflowConfigs in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse dataformProjectsLocationsRepositoriesWorkflowConfigsList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest.class, baseUrl, "/v1beta1/{parent}/workflowConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsListResponse(contentType, httpRes.statusCode()) {{
            listWorkflowConfigsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListWorkflowConfigsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListWorkflowConfigsResponse.class);
                res.listWorkflowConfigsResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates a single WorkflowConfig.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse dataformProjectsLocationsRepositoriesWorkflowConfigsPatch(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest.class, baseUrl, "/v1beta1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "workflowConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowConfigsPatchResponse(contentType, httpRes.statusCode()) {{
            workflowConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WorkflowConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WorkflowConfig.class);
                res.workflowConfig = out;
            }
        }

        return res;
    }

    /**
     * Requests cancellation of a running WorkflowInvocation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse dataformProjectsLocationsRepositoriesWorkflowInvocationsCancel(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest.class, baseUrl, "/v1beta1/{name}:cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCancelResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Creates a new WorkflowInvocation in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse dataformProjectsLocationsRepositoriesWorkflowInvocationsCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest.class, baseUrl, "/v1beta1/{parent}/workflowInvocations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "workflowInvocationInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsCreateResponse(contentType, httpRes.statusCode()) {{
            workflowInvocation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.WorkflowInvocation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.WorkflowInvocation.class);
                res.workflowInvocation = out;
            }
        }

        return res;
    }

    /**
     * Lists WorkflowInvocations in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse dataformProjectsLocationsRepositoriesWorkflowInvocationsList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest.class, baseUrl, "/v1beta1/{parent}/workflowInvocations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsListResponse(contentType, httpRes.statusCode()) {{
            listWorkflowInvocationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListWorkflowInvocationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListWorkflowInvocationsResponse.class);
                res.listWorkflowInvocationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns WorkflowInvocationActions in a given WorkflowInvocation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse dataformProjectsLocationsRepositoriesWorkflowInvocationsQuery(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQuerySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest.class, baseUrl, "/v1beta1/{name}:query", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkflowInvocationsQueryResponse(contentType, httpRes.statusCode()) {{
            queryWorkflowInvocationActionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.QueryWorkflowInvocationActionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.QueryWorkflowInvocationActionsResponse.class);
                res.queryWorkflowInvocationActionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Applies a Git commit for uncommitted files in a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitResponse dataformProjectsLocationsRepositoriesWorkspacesCommit(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitRequest.class, baseUrl, "/v1beta1/{name}:commit", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "commitWorkspaceChangesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCommitResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Creates a new Workspace in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateResponse dataformProjectsLocationsRepositoriesWorkspacesCreate(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateRequest.class, baseUrl, "/v1beta1/{parent}/workspaces", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesCreateResponse(contentType, httpRes.statusCode()) {{
            workspace = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Workspace.class);
                res.workspace = out;
            }
        }

        return res;
    }

    /**
     * Deletes a single Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse dataformProjectsLocationsRepositoriesWorkspacesDelete(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest.class, baseUrl, "/v1beta1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesDeleteResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Fetches Git diff for an uncommitted file in a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse dataformProjectsLocationsRepositoriesWorkspacesFetchFileDiff(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest.class, baseUrl, "/v1beta1/{workspace}:fetchFileDiff", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileDiffResponse(contentType, httpRes.statusCode()) {{
            fetchFileDiffResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchFileDiffResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchFileDiffResponse.class);
                res.fetchFileDiffResponse = out;
            }
        }

        return res;
    }

    /**
     * Fetches Git statuses for the files in a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse dataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatuses(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest.class, baseUrl, "/v1beta1/{name}:fetchFileGitStatuses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchFileGitStatusesResponse(contentType, httpRes.statusCode()) {{
            fetchFileGitStatusesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchFileGitStatusesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchFileGitStatusesResponse.class);
                res.fetchFileGitStatusesResponse = out;
            }
        }

        return res;
    }

    /**
     * Fetches Git ahead/behind against a remote branch.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse dataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehind(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest.class, baseUrl, "/v1beta1/{name}:fetchGitAheadBehind", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesFetchGitAheadBehindResponse(contentType, httpRes.statusCode()) {{
            fetchGitAheadBehindResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchGitAheadBehindResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchGitAheadBehindResponse.class);
                res.fetchGitAheadBehindResponse = out;
            }
        }

        return res;
    }

    /**
     * Fetches a single Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetResponse dataformProjectsLocationsRepositoriesWorkspacesGet(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetRequest.class, baseUrl, "/v1beta1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetResponse(contentType, httpRes.statusCode()) {{
            workspace = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Workspace out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Workspace.class);
                res.workspace = out;
            }
        }

        return res;
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse dataformProjectsLocationsRepositoriesWorkspacesGetIamPolicy(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest.class, baseUrl, "/v1beta1/{resource}:getIamPolicy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesGetIamPolicyResponse(contentType, httpRes.statusCode()) {{
            policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Policy.class);
                res.policy = out;
            }
        }

        return res;
    }

    /**
     * Installs dependency NPM packages (inside a Workspace).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse dataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackages(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest.class, baseUrl, "/v1beta1/{workspace}:installNpmPackages", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesInstallNpmPackagesResponse(contentType, httpRes.statusCode()) {{
            installNpmPackagesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.installNpmPackagesResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists Workspaces in a given Repository.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListResponse dataformProjectsLocationsRepositoriesWorkspacesList(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListRequest.class, baseUrl, "/v1beta1/{parent}/workspaces", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesListResponse(contentType, httpRes.statusCode()) {{
            listWorkspacesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListWorkspacesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListWorkspacesResponse.class);
                res.listWorkspacesResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a directory inside a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse dataformProjectsLocationsRepositoriesWorkspacesMakeDirectory(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectorySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest.class, baseUrl, "/v1beta1/{workspace}:makeDirectory", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "makeDirectoryRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMakeDirectoryResponse(contentType, httpRes.statusCode()) {{
            makeDirectoryResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.makeDirectoryResponse = out;
            }
        }

        return res;
    }

    /**
     * Moves a directory (inside a Workspace), and all of its contents, to a new location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse dataformProjectsLocationsRepositoriesWorkspacesMoveDirectory(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectorySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest.class, baseUrl, "/v1beta1/{workspace}:moveDirectory", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "moveDirectoryRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveDirectoryResponse(contentType, httpRes.statusCode()) {{
            moveDirectoryResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.moveDirectoryResponse = out;
            }
        }

        return res;
    }

    /**
     * Moves a file (inside a Workspace) to a new location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse dataformProjectsLocationsRepositoriesWorkspacesMoveFile(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest.class, baseUrl, "/v1beta1/{workspace}:moveFile", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "moveFileRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesMoveFileResponse(contentType, httpRes.statusCode()) {{
            moveFileResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.moveFileResponse = out;
            }
        }

        return res;
    }

    /**
     * Pulls Git commits from the Repository's remote into a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullResponse dataformProjectsLocationsRepositoriesWorkspacesPull(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullRequest.class, baseUrl, "/v1beta1/{name}:pull", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "pullGitCommitsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPullResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Pushes Git commits from a Workspace to the Repository's remote.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushResponse dataformProjectsLocationsRepositoriesWorkspacesPush(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushRequest.class, baseUrl, "/v1beta1/{name}:push", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "pushGitCommitsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesPushResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Returns the contents of a given Workspace directory.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse dataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContents(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest.class, baseUrl, "/v1beta1/{workspace}:queryDirectoryContents", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesQueryDirectoryContentsResponse(contentType, httpRes.statusCode()) {{
            queryDirectoryContentsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.QueryDirectoryContentsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.QueryDirectoryContentsResponse.class);
                res.queryDirectoryContentsResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns the contents of a file (inside a Workspace).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse dataformProjectsLocationsRepositoriesWorkspacesReadFile(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest.class, baseUrl, "/v1beta1/{workspace}:readFile", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesReadFileResponse(contentType, httpRes.statusCode()) {{
            readFileResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ReadFileResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ReadFileResponse.class);
                res.readFileResponse = out;
            }
        }

        return res;
    }

    /**
     * Deletes a directory (inside a Workspace) and all of its contents.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse dataformProjectsLocationsRepositoriesWorkspacesRemoveDirectory(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectorySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest.class, baseUrl, "/v1beta1/{workspace}:removeDirectory", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "removeDirectoryRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveDirectoryResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Deletes a file (inside a Workspace).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse dataformProjectsLocationsRepositoriesWorkspacesRemoveFile(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest.class, baseUrl, "/v1beta1/{workspace}:removeFile", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "removeFileRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesRemoveFileResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Performs a Git reset for uncommitted files in a Workspace.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetResponse dataformProjectsLocationsRepositoriesWorkspacesReset(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetRequest.class, baseUrl, "/v1beta1/{name}:reset", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "resetWorkspaceChangesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesResetResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse dataformProjectsLocationsRepositoriesWorkspacesSetIamPolicy(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest.class, baseUrl, "/v1beta1/{resource}:setIamPolicy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "setIamPolicyRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesSetIamPolicyResponse(contentType, httpRes.statusCode()) {{
            policy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Policy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Policy.class);
                res.policy = out;
            }
        }

        return res;
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse dataformProjectsLocationsRepositoriesWorkspacesTestIamPermissions(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest.class, baseUrl, "/v1beta1/{resource}:testIamPermissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "testIamPermissionsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesTestIamPermissionsResponse(contentType, httpRes.statusCode()) {{
            testIamPermissionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TestIamPermissionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TestIamPermissionsResponse.class);
                res.testIamPermissionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Writes to a file (inside a Workspace).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse dataformProjectsLocationsRepositoriesWorkspacesWriteFile(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest request, org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest.class, baseUrl, "/v1beta1/{workspace}:writeFile", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "writeFileRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse res = new org.openapis.openapi.models.operations.DataformProjectsLocationsRepositoriesWorkspacesWriteFileResponse(contentType, httpRes.statusCode()) {{
            writeFileResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.writeFileResponse = out;
            }
        }

        return res;
    }
}