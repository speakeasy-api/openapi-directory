/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountRef } from "./accountref";
import { ProfileRef } from "./profileref";
import { UserRef } from "./userref";
import { WebPropertyRef } from "./webpropertyref";
import { Expose, Type } from "class-transformer";

/**
 * Entity for this link. It can be an account, a web property, or a view (profile).
 */
export class EntityUserLinkEntity extends SpeakeasyBase {
  /**
   * JSON template for a linked account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountRef" })
  @Type(() => AccountRef)
  accountRef?: AccountRef;

  /**
   * JSON template for a linked view (profile).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "profileRef" })
  @Type(() => ProfileRef)
  profileRef?: ProfileRef;

  /**
   * JSON template for a web property reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webPropertyRef" })
  @Type(() => WebPropertyRef)
  webPropertyRef?: WebPropertyRef;
}

/**
 * Permissions the user has for this entity.
 */
export class EntityUserLinkPermissionsInput extends SpeakeasyBase {
  /**
   * Permissions that a user has been assigned at this very level. Does not include any implied or inherited permissions. Local permissions are modifiable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "local" })
  local?: string[];
}

/**
 * JSON template for an Analytics Entity-User Link. Returns permissions that a user has for an entity.
 */
export class EntityUserLinkInput extends SpeakeasyBase {
  /**
   * Entity for this link. It can be an account, a web property, or a view (profile).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity" })
  @Type(() => EntityUserLinkEntity)
  entity?: EntityUserLinkEntity;

  /**
   * Entity user link ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Resource type for entity user link.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Permissions the user has for this entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => EntityUserLinkPermissionsInput)
  permissions?: EntityUserLinkPermissionsInput;

  /**
   * Self link for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * JSON template for a user reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userRef" })
  @Type(() => UserRef)
  userRef?: UserRef;
}

/**
 * Permissions the user has for this entity.
 */
export class EntityUserLinkPermissions extends SpeakeasyBase {
  /**
   * Effective permissions represent all the permissions that a user has for this entity. These include any implied permissions (e.g., EDIT implies VIEW) or inherited permissions from the parent entity. Effective permissions are read-only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effective" })
  effective?: string[];

  /**
   * Permissions that a user has been assigned at this very level. Does not include any implied or inherited permissions. Local permissions are modifiable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "local" })
  local?: string[];
}

/**
 * JSON template for an Analytics Entity-User Link. Returns permissions that a user has for an entity.
 */
export class EntityUserLink extends SpeakeasyBase {
  /**
   * Entity for this link. It can be an account, a web property, or a view (profile).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity" })
  @Type(() => EntityUserLinkEntity)
  entity?: EntityUserLinkEntity;

  /**
   * Entity user link ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Resource type for entity user link.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Permissions the user has for this entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  @Type(() => EntityUserLinkPermissions)
  permissions?: EntityUserLinkPermissions;

  /**
   * Self link for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * JSON template for a user reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userRef" })
  @Type(() => UserRef)
  userRef?: UserRef;
}
