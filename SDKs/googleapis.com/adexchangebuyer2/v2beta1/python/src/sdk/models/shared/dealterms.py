"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import guaranteedfixedpriceterms as shared_guaranteedfixedpriceterms
from ..shared import nonguaranteedauctionterms as shared_nonguaranteedauctionterms
from ..shared import nonguaranteedfixedpriceterms as shared_nonguaranteedfixedpriceterms
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DealTermsBrandingTypeEnum(str, Enum):
    r"""Visibility of the URL in bid requests. (default: BRANDED)"""
    BRANDING_TYPE_UNSPECIFIED = 'BRANDING_TYPE_UNSPECIFIED'
    BRANDED = 'BRANDED'
    SEMI_TRANSPARENT = 'SEMI_TRANSPARENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DealTerms:
    r"""The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher."""
    
    branding_type: Optional[DealTermsBrandingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandingType'), 'exclude': lambda f: f is None }})
    r"""Visibility of the URL in bid requests. (default: BRANDED)"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Publisher provided description for the terms."""  
    estimated_gross_spend: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedGrossSpend'), 'exclude': lambda f: f is None }})
    r"""Represents a price and a pricing type for a product / deal."""  
    estimated_impressions_per_day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedImpressionsPerDay'), 'exclude': lambda f: f is None }})
    r"""Non-binding estimate of the impressions served per day. Can be set by buyer or seller."""  
    guaranteed_fixed_price_terms: Optional[shared_guaranteedfixedpriceterms.GuaranteedFixedPriceTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteedFixedPriceTerms'), 'exclude': lambda f: f is None }})
    r"""Terms for Programmatic Guaranteed Deals."""  
    non_guaranteed_auction_terms: Optional[shared_nonguaranteedauctionterms.NonGuaranteedAuctionTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonGuaranteedAuctionTerms'), 'exclude': lambda f: f is None }})
    r"""Terms for Private Auctions. Note that Private Auctions can be created only by the seller, but they can be returned in a get or list request."""  
    non_guaranteed_fixed_price_terms: Optional[shared_nonguaranteedfixedpriceterms.NonGuaranteedFixedPriceTerms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonGuaranteedFixedPriceTerms'), 'exclude': lambda f: f is None }})
    r"""Terms for Preferred Deals."""  
    seller_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerTimeZone'), 'exclude': lambda f: f is None }})
    r"""The time zone name. For deals with Cost Per Day billing, defines the time zone used to mark the boundaries of a day. It should be an IANA TZ name, such as \\"America/Los_Angeles\\". For more information, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones."""  
    