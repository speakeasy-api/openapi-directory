<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CertificateAuthorityInput - A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CertificateAuthorityInput
{
    /**
     * URLs where a CertificateAuthority will publish content.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AccessUrls $accessUrls
     */
	#[\JMS\Serializer\Annotation\SerializedName('accessUrls')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccessUrls')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccessUrls $accessUrls = null;
    
    /**
     * A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateConfig $config
     */
	#[\JMS\Serializer\Annotation\SerializedName('config')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CertificateConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateConfig $config = null;
    
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     * 
     * @var ?string $gcsBucket
     */
	#[\JMS\Serializer\Annotation\SerializedName('gcsBucket')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gcsBucket = null;
    
    /**
     * A Cloud KMS key configuration that a CertificateAuthority will use.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\KeyVersionSpec $keySpec
     */
	#[\JMS\Serializer\Annotation\SerializedName('keySpec')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\KeyVersionSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?KeyVersionSpec $keySpec = null;
    
    /**
     * Optional. Labels with user-defined metadata.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     * 
     * @var ?string $lifetime
     */
	#[\JMS\Serializer\Annotation\SerializedName('lifetime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lifetime = null;
    
    /**
     * Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SubordinateConfig $subordinateConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('subordinateConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SubordinateConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SubordinateConfig $subordinateConfig = null;
    
    /**
     * Required. Immutable. The Type of this CertificateAuthority.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateAuthorityTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateAuthorityTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateAuthorityTypeEnum $type = null;
    
	public function __construct()
	{
		$this->accessUrls = null;
		$this->config = null;
		$this->gcsBucket = null;
		$this->keySpec = null;
		$this->labels = null;
		$this->lifetime = null;
		$this->subordinateConfig = null;
		$this->type = null;
	}
}
