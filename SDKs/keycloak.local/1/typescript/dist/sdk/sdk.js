"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var attackdetection_1 = require("./attackdetection");
var authenticationmanagement_1 = require("./authenticationmanagement");
var clientattributecertificate_1 = require("./clientattributecertificate");
var clientinitialaccess_1 = require("./clientinitialaccess");
var clientregistrationpolicy_1 = require("./clientregistrationpolicy");
var clientrolemappings_1 = require("./clientrolemappings");
var clients_1 = require("./clients");
var clientscopes_1 = require("./clientscopes");
var component_1 = require("./component");
var groups_1 = require("./groups");
var identityproviders_1 = require("./identityproviders");
var key_1 = require("./key");
var shared = __importStar(require("./models/shared"));
var protocolmappers_1 = require("./protocolmappers");
var realmsadmin_1 = require("./realmsadmin");
var rolemapper_1 = require("./rolemapper");
var roles_1 = require("./roles");
var rolesbyid_1 = require("./rolesbyid");
var root_1 = require("./root");
var scopemappings_1 = require("./scopemappings");
var users_1 = require("./users");
var userstorageprovider_1 = require("./userstorageprovider");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["http://keycloak.local"];
/**
 * This is a REST API reference for the Keycloak Admin
 *
 * @see {@link https://github.com/keycloak/keycloak/tree/6.0.1/core/src/main/java/org/keycloak/representations} - Schema source code
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.attackDetection = new attackdetection_1.AttackDetection(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.authenticationManagement = new authenticationmanagement_1.AuthenticationManagement(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientAttributeCertificate = new clientattributecertificate_1.ClientAttributeCertificate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientInitialAccess = new clientinitialaccess_1.ClientInitialAccess(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientRegistrationPolicy = new clientregistrationpolicy_1.ClientRegistrationPolicy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientRoleMappings = new clientrolemappings_1.ClientRoleMappings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clientScopes = new clientscopes_1.ClientScopes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clients = new clients_1.Clients(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.component = new component_1.Component(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.groups = new groups_1.Groups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.identityProviders = new identityproviders_1.IdentityProviders(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.key = new key_1.Key(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.protocolMappers = new protocolmappers_1.ProtocolMappers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.realmsAdmin = new realmsadmin_1.RealmsAdmin(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.roleMapper = new rolemapper_1.RoleMapper(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.roles = new roles_1.Roles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rolesByID = new rolesbyid_1.RolesByID(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.root = new root_1.Root(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.scopeMappings = new scopemappings_1.ScopeMappings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.userStorageProvider = new userstorageprovider_1.UserStorageProvider(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
