"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import usage as shared_usage
from ..shared import vlanattachment as shared_vlanattachment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CloudInterconnectWorkloadInterconnectTypeEnum(str, Enum):
    r"""Vlan attachment type."""
    INTERCONNECT_TYPE_UNSPECIFIED = 'INTERCONNECT_TYPE_UNSPECIFIED'
    INTERCONNECT_TYPE_DEDICATED = 'INTERCONNECT_TYPE_DEDICATED'
    INTERCONNECT_TYPE_PARTNER = 'INTERCONNECT_TYPE_PARTNER'

class CloudInterconnectWorkloadLinkTypeEnum(str, Enum):
    r"""Interconnect circuit link type."""
    LINK_TYPE_UNSPECIFIED = 'LINK_TYPE_UNSPECIFIED'
    LINK_TYPE_ETHERNET_10_G_LR = 'LINK_TYPE_ETHERNET_10G_LR'
    LINK_TYPE_ETHERNET_100_G_LR = 'LINK_TYPE_ETHERNET_100G_LR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudInterconnectWorkload:
    r"""Specifies usage for Cloud Interconnect resources."""
    
    interconnect_attachments: Optional[list[shared_vlanattachment.VlanAttachment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interconnectAttachments'), 'exclude': lambda f: f is None }})
    r"""VLAN attachment used for interconnect."""  
    interconnect_type: Optional[CloudInterconnectWorkloadInterconnectTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interconnectType'), 'exclude': lambda f: f is None }})
    r"""Vlan attachment type."""  
    link_type: Optional[CloudInterconnectWorkloadLinkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkType'), 'exclude': lambda f: f is None }})
    r"""Interconnect circuit link type."""  
    provisioned_link_count: Optional[shared_usage.Usage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisionedLinkCount'), 'exclude': lambda f: f is None }})
    r"""An amount of usage over a time frame."""  
    