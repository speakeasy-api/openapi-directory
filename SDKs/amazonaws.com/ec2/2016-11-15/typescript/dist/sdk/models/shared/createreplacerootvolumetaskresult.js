"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateReplaceRootVolumeTaskResult = exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask = exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum = exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * Describes a tag.
 */
var CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags = /** @class */ (function (_super) {
    __extends(CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags, _super);
    function CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags.prototype, "value", void 0);
    return CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags;
}(utils_1.SpeakeasyBase));
exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags = CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags;
/**
 * <p>The state of the task. The task can be in one of the following states:</p> <ul> <li> <p> <code>pending</code> - the replacement volume is being created.</p> </li> <li> <p> <code>in-progress</code> - the original volume is being detached and the replacement volume is being attached.</p> </li> <li> <p> <code>succeeded</code> - the replacement volume has been successfully attached to the instance and the instance is available.</p> </li> <li> <p> <code>failing</code> - the replacement task is in the process of failing.</p> </li> <li> <p> <code>failed</code> - the replacement task has failed but the original root volume is still attached.</p> </li> <li> <p> <code>failing-detached</code> - the replacement task is in the process of failing. The instance might have no root volume attached.</p> </li> <li> <p> <code>failed-detached</code> - the replacement task has failed and the instance has no root volume attached.</p> </li> </ul>
 */
var CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum;
(function (CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum) {
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["Pending"] = "pending";
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["InProgress"] = "in-progress";
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["Failing"] = "failing";
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["Succeeded"] = "succeeded";
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["Failed"] = "failed";
    CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum["FailedDetached"] = "failed-detached";
})(CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum = exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum || (exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTaskStateEnum = {}));
/**
 * Information about the root volume replacement task.
 */
var CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask = /** @class */ (function (_super) {
    __extends(CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask, _super);
    function CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "completeTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "deleteReplacedRootVolume", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "imageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "instanceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "replaceRootVolumeTaskId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "snapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateReplaceRootVolumeTaskResultReplaceRootVolumeTaskTags,
        }),
        __metadata("design:type", Array)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask.prototype, "taskState", void 0);
    return CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask;
}(utils_1.SpeakeasyBase));
exports.CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask = CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask;
/**
 * Success
 */
var CreateReplaceRootVolumeTaskResult = /** @class */ (function (_super) {
    __extends(CreateReplaceRootVolumeTaskResult, _super);
    function CreateReplaceRootVolumeTaskResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", CreateReplaceRootVolumeTaskResultReplaceRootVolumeTask)
    ], CreateReplaceRootVolumeTaskResult.prototype, "replaceRootVolumeTask", void 0);
    return CreateReplaceRootVolumeTaskResult;
}(utils_1.SpeakeasyBase));
exports.CreateReplaceRootVolumeTaskResult = CreateReplaceRootVolumeTaskResult;
