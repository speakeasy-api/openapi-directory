"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import updatecustomobjectcusotmfield as shared_updatecustomobjectcusotmfield
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomObjectDefinitionUpdateActionResponseRelationshipCardinalityEnum(str, Enum):
    r"""The cardinality of the relationship from this object to another object.
    
    A `manyToOne` relationship means this object is the child object (the \"many\" side), and the referenced object (the \"one\" side) is the parent.
    
    A `oneToMany` relationship means this object is the parent object (the \"one\" side), and the referenced object (the \"many\" side) is the child.
    """
    MANY_TO_ONE = 'manyToOne'
    ONE_TO_MANY = 'oneToMany'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraintsCreate:
    
    enforce_valid_mapping: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforceValidMapping'), 'exclude': lambda f: f is None }})
    r"""Specifies whether Zuora validates the values of mapped fields
    in custom object records.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraints:
    r"""Specifies contraints to apply to custom object records."""
    
    create: Optional[CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraintsCreate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomObjectDefinitionUpdateActionResponseRelationship:
    
    cardinality: Optional[CustomObjectDefinitionUpdateActionResponseRelationshipCardinalityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardinality'), 'exclude': lambda f: f is None }})
    r"""The cardinality of the relationship from this object to another object.
    
    A `manyToOne` relationship means this object is the child object (the \"many\" side), and the referenced object (the \"one\" side) is the parent.
    
    A `oneToMany` relationship means this object is the parent object (the \"one\" side), and the referenced object (the \"many\" side) is the child.
    """  
    fields_: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`."""  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace'), 'exclude': lambda f: f is None }})
    r"""The namespace where the related object is located"""  
    object: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})
    r"""The API name of the related object"""  
    record_constraints: Optional[CustomObjectDefinitionUpdateActionResponseRelationshipRecordConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordConstraints'), 'exclude': lambda f: f is None }})
    r"""Specifies contraints to apply to custom object records."""  
    
class CustomObjectDefinitionUpdateActionResponseTypeEnum(str, Enum):
    r"""The type of the updating action on a custom object definition"""
    ADD_FIELD = 'addField'
    DELETE_FIELD = 'deleteField'
    UPDATE_FIELD = 'updateField'
    UPDATE_OBJECT = 'updateObject'
    RENAME_FIELD = 'renameField'
    ADD_RELATIONSHIP = 'addRelationship'
    DELETE_RELATIONSHIP = 'deleteRelationship'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomObjectDefinitionUpdateActionResponse:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional property for `updateObject` action"""  
    field: Optional[shared_updatecustomobjectcusotmfield.UpdateCustomObjectCusotmField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""A reference to a field."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Optional property for `updateObject` action"""  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace'), 'exclude': lambda f: f is None }})
    r"""The namespace of the custom object definition to be updated"""  
    object: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object'), 'exclude': lambda f: f is None }})
    r"""The API name of the custom object definition to be updated"""  
    relationship: Optional[CustomObjectDefinitionUpdateActionResponseRelationship] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship'), 'exclude': lambda f: f is None }})  
    type: Optional[CustomObjectDefinitionUpdateActionResponseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the updating action on a custom object definition"""  
    