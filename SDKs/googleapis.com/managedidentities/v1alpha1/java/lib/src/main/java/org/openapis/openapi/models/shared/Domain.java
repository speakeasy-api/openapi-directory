/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Domain - If the domain is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
public class Domain {
    /**
     * Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auditLogsEnabled")
    public Boolean auditLogsEnabled;
    public Domain withAuditLogsEnabled(Boolean auditLogsEnabled) {
        this.auditLogsEnabled = auditLogsEnabled;
        return this;
    }
    
    /**
     * Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedNetworks")
    public String[] authorizedNetworks;
    public Domain withAuthorizedNetworks(String[] authorizedNetworks) {
        this.authorizedNetworks = authorizedNetworks;
        return this;
    }
    
    /**
     * Output only. The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Domain withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fqdn")
    public String fqdn;
    public Domain withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }
    
    /**
     * Optional. Resource labels to represent user provided metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Domain withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public String[] locations;
    public Domain withLocations(String[] locations) {
        this.locations = locations;
        return this;
    }
    
    /**
     * Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managedIdentitiesAdminName")
    public String managedIdentitiesAdminName;
    public Domain withManagedIdentitiesAdminName(String managedIdentitiesAdminName) {
        this.managedIdentitiesAdminName = managedIdentitiesAdminName;
        return this;
    }
    
    /**
     * Output only. Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Domain withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservedIpRange")
    public String reservedIpRange;
    public Domain withReservedIpRange(String reservedIpRange) {
        this.reservedIpRange = reservedIpRange;
        return this;
    }
    
    /**
     * Output only. The current state of this domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public DomainStateEnum state;
    public Domain withState(DomainStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Additional information about the current status of this domain, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;
    public Domain withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * Output only. The current trusts associated with the domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trusts")
    public Trust[] trusts;
    public Domain withTrusts(Trust[] trusts) {
        this.trusts = trusts;
        return this;
    }
    
    /**
     * Output only. Last update time. Synthetic field is populated automatically by CCFE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Domain withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
