// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserAPITokensList401ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensList401ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensList401ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensList401ApplicationJSONErrorCodeEnumConflict            UserAPITokensList401ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensList401ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensList401ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensList401ApplicationJSONErrorCodeEnumNotFound            UserAPITokensList401ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensList401ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensList401ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensList401ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensList401ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensList401ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensList401ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UserAPITokensList401ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensList401ApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensList401ApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UserAPITokensList401ApplicationJSONError struct {
	Code    UserAPITokensList401ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

// UserAPITokensList401ApplicationJSON - Unauthorized
type UserAPITokensList401ApplicationJSON struct {
	Error UserAPITokensList401ApplicationJSONError `json:"error"`
}

type UserAPITokensList400ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensList400ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensList400ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensList400ApplicationJSONErrorCodeEnumConflict            UserAPITokensList400ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensList400ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensList400ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensList400ApplicationJSONErrorCodeEnumNotFound            UserAPITokensList400ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensList400ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensList400ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensList400ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensList400ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensList400ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensList400ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *UserAPITokensList400ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensList400ApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensList400ApplicationJSONErrorCodeEnum: %s", s)
	}
}

type UserAPITokensList400ApplicationJSONError struct {
	Code    UserAPITokensList400ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                           `json:"message"`
}

// UserAPITokensList400ApplicationJSON - Error
type UserAPITokensList400ApplicationJSON struct {
	Error UserAPITokensList400ApplicationJSONError `json:"error"`
}

type UserAPITokensList200ApplicationJSONScopeEnum string

const (
	UserAPITokensList200ApplicationJSONScopeEnumAll    UserAPITokensList200ApplicationJSONScopeEnum = "all"
	UserAPITokensList200ApplicationJSONScopeEnumViewer UserAPITokensList200ApplicationJSONScopeEnum = "viewer"
)

func (e *UserAPITokensList200ApplicationJSONScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "viewer":
		*e = UserAPITokensList200ApplicationJSONScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensList200ApplicationJSONScopeEnum: %s", s)
	}
}

type UserAPITokensList200ApplicationJSON struct {
	// The creation time
	CreatedAt string `json:"created_at"`
	// The description of the token
	Description *string `json:"description,omitempty"`
	// The unique id (UUID) of the api token
	ID string `json:"id"`
	// The scope for this token.
	Scope []UserAPITokensList200ApplicationJSONScopeEnum `json:"scope,omitempty"`
}

type UserAPITokensListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	UserAPITokensList200ApplicationJSONObjects []UserAPITokensList200ApplicationJSON
	// Error
	UserAPITokensList400ApplicationJSONObject *UserAPITokensList400ApplicationJSON
	// Unauthorized
	UserAPITokensList401ApplicationJSONObject *UserAPITokensList401ApplicationJSON
}
