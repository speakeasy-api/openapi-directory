/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 {
    /**
     * Determine how participants can join the audio portion of the meeting:&lt;br&gt;`both` - Telephony and VoIP.&lt;br&gt;`telephony` - Audio PSTN telephony only.&lt;br&gt;`voip` - VoIP only.&lt;br&gt;`thirdParty` - Third party audio conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_type")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsAudioTypeEnum audioType;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withAudioType(UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsAudioTypeEnum audioType) {
        this.audioType = audioType;
        return this;
    }
    
    /**
     * Passcode for already scheduled meetings
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_password_for_scheduled_meetings")
    public String defaultPasswordForScheduledMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withDefaultPasswordForScheduledMeetings(String defaultPasswordForScheduledMeetings) {
        this.defaultPasswordForScheduledMeetings = defaultPasswordForScheduledMeetings;
        return this;
    }
    
    /**
     * If the value is set to `true`, the meeting passcode will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the passcode.
     *  
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed_password_in_join_link")
    public Boolean embedPasswordInJoinLink;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withEmbedPasswordInJoinLink(Boolean embedPasswordInJoinLink) {
        this.embedPasswordInJoinLink = embedPasswordInJoinLink;
        return this;
    }
    
    /**
     * Require a passcode for personal meetings if attendees can join before host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("force_pmi_jbh_password")
    public Boolean forcePmiJbhPassword;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withForcePmiJbhPassword(Boolean forcePmiJbhPassword) {
        this.forcePmiJbhPassword = forcePmiJbhPassword;
        return this;
    }
    
    /**
     * Start meetings with host video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_video")
    public Boolean hostVideo;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withHostVideo(Boolean hostVideo) {
        this.hostVideo = hostVideo;
        return this;
    }
    
    /**
     * Join the meeting before host arrives.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_before_host")
    public Boolean joinBeforeHost;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withJoinBeforeHost(Boolean joinBeforeHost) {
        this.joinBeforeHost = joinBeforeHost;
        return this;
    }
    
    /**
     * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting_password_requirement")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement meetingPasswordRequirement;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withMeetingPasswordRequirement(UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement meetingPasswordRequirement) {
        this.meetingPasswordRequirement = meetingPasswordRequirement;
        return this;
    }
    
    /**
     * Start meetings with participants video on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participants_video")
    public Boolean participantsVideo;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withParticipantsVideo(Boolean participantsVideo) {
        this.participantsVideo = participantsVideo;
        return this;
    }
    
    /**
     * Personal Meeting Setting.&lt;br&gt;&lt;br&gt;
     * `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. &lt;br&gt;&lt;br&gt;
     * `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
     * For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
     * 
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("personal_meeting")
    public Boolean personalMeeting;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withPersonalMeeting(Boolean personalMeeting) {
        this.personalMeeting = personalMeeting;
        return this;
    }
    
    /**
     * PMI passcode
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pmi_password")
    public String pmiPassword;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withPmiPassword(String pmiPassword) {
        this.pmiPassword = pmiPassword;
        return this;
    }
    
    /**
     * Generate and require passcode for participants joining by phone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pstn_password_protected")
    public Boolean pstnPasswordProtected;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withPstnPasswordProtected(Boolean pstnPasswordProtected) {
        this.pstnPasswordProtected = pstnPasswordProtected;
        return this;
    }
    
    /**
     * Require a passcode for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_instant_meetings")
    public Boolean requirePasswordForInstantMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withRequirePasswordForInstantMeetings(Boolean requirePasswordForInstantMeetings) {
        this.requirePasswordForInstantMeetings = requirePasswordForInstantMeetings;
        return this;
    }
    
    /**
     * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_pmi_meetings")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum requirePasswordForPmiMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withRequirePasswordForPmiMeetings(UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum requirePasswordForPmiMeetings) {
        this.requirePasswordForPmiMeetings = requirePasswordForPmiMeetings;
        return this;
    }
    
    /**
     * Require a passcode for meetings which have already been scheduled
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_scheduled_meetings")
    public Boolean requirePasswordForScheduledMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withRequirePasswordForScheduledMeetings(Boolean requirePasswordForScheduledMeetings) {
        this.requirePasswordForScheduledMeetings = requirePasswordForScheduledMeetings;
        return this;
    }
    
    /**
     * Require a passcode when scheduling new meetings.This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_password_for_scheduling_new_meetings")
    public Boolean requirePasswordForSchedulingNewMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withRequirePasswordForSchedulingNewMeetings(Boolean requirePasswordForSchedulingNewMeetings) {
        this.requirePasswordForSchedulingNewMeetings = requirePasswordForSchedulingNewMeetings;
        return this;
    }
    
    /**
     * Use Personal Meeting ID (PMI) when starting an instant meeting
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_pmi_for_instant_meetings")
    public Boolean usePmiForInstantMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withUsePmiForInstantMeetings(Boolean usePmiForInstantMeetings) {
        this.usePmiForInstantMeetings = usePmiForInstantMeetings;
        return this;
    }
    
    /**
     * Use Personal Meeting ID (PMI) when scheduling a meeting
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_pmi_for_scheduled_meetings")
    public Boolean usePmiForScheduledMeetings;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 withUsePmiForScheduledMeetings(Boolean usePmiForScheduledMeetings) {
        this.usePmiForScheduledMeetings = usePmiForScheduledMeetings;
        return this;
    }
    
}
