/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AttachmentResponse - An *attachment* object represents any file attached to a task in Asana, whether it\u2019s an uploaded file or one associated via a third-party service such as Dropbox or Google Drive.
 */
public class AttachmentResponse {
    /**
     * Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connected_to_app")
    public Boolean connectedToApp;

    public AttachmentResponse withConnectedToApp(Boolean connectedToApp) {
        this.connectedToApp = connectedToApp;
        return this;
    }
    
    /**
     * The time at which this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public AttachmentResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The URL containing the content of the attachment.
     * *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    public String downloadUrl;

    public AttachmentResponse withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gid")
    public String gid;

    public AttachmentResponse withGid(String gid) {
        this.gid = gid;
        return this;
    }
    
    /**
     * The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public AttachmentResponse withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The name of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public AttachmentResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public AttachmentResponseParent parent;

    public AttachmentResponse withParent(AttachmentResponseParent parent) {
        this.parent = parent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permanent_url")
    public String permanentUrl;

    public AttachmentResponse withPermanentUrl(String permanentUrl) {
        this.permanentUrl = permanentUrl;
        return this;
    }
    
    /**
     * The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_subtype")
    public String resourceSubtype;

    public AttachmentResponse withResourceSubtype(String resourceSubtype) {
        this.resourceSubtype = resourceSubtype;
        return this;
    }
    
    /**
     * The base type of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    public String resourceType;

    public AttachmentResponse withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;

    public AttachmentResponse withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("view_url")
    public String viewUrl;

    public AttachmentResponse withViewUrl(String viewUrl) {
        this.viewUrl = viewUrl;
        return this;
    }
    
    public AttachmentResponse(){}
}
