"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import diagnostic as shared_diagnostic
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PollingOptions:
    
    diagnostics: Optional[list[shared_diagnostic.Diagnostic]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diagnostics'), 'exclude': lambda f: f is None }})
    r"""An array of diagnostics to be collected by Deployment Manager, these diagnostics will be displayed to the user."""  
    fail_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failCondition'), 'exclude': lambda f: f is None }})
    r"""JsonPath expression that determines if the request failed."""  
    finish_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finishCondition'), 'exclude': lambda f: f is None }})
    r"""JsonPath expression that determines if the request is completed."""  
    polling_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pollingLink'), 'exclude': lambda f: f is None }})
    r"""JsonPath expression that evaluates to string, it indicates where to poll."""  
    target_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetLink'), 'exclude': lambda f: f is None }})
    r"""JsonPath expression, after polling is completed, indicates where to fetch the resource."""  
    