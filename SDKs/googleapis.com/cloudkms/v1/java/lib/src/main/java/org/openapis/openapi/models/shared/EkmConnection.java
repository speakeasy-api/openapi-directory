/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EkmConnection - An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 */
public class EkmConnection {
    /**
     * Output only. The time at which the EkmConnection was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public EkmConnection withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cryptoSpacePath")
    public String cryptoSpacePath;
    public EkmConnection withCryptoSpacePath(String cryptoSpacePath) {
        this.cryptoSpacePath = cryptoSpacePath;
        return this;
    }
    
    /**
     * Optional. Etag of the currently stored EkmConnection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public EkmConnection withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyManagementMode")
    public EkmConnectionKeyManagementModeEnum keyManagementMode;
    public EkmConnection withKeyManagementMode(EkmConnectionKeyManagementModeEnum keyManagementMode) {
        this.keyManagementMode = keyManagementMode;
        return this;
    }
    
    /**
     * Output only. The resource name for the EkmConnection in the format `projects/* /locations/* /ekmConnections/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public EkmConnection withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceResolvers")
    public ServiceResolver[] serviceResolvers;
    public EkmConnection withServiceResolvers(ServiceResolver[] serviceResolvers) {
        this.serviceResolvers = serviceResolvers;
        return this;
    }
    
}
