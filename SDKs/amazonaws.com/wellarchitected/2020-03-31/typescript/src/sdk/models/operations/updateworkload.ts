/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Discovery configuration associated to the workload.
 */
export class UpdateWorkloadRequestBodyDiscoveryConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "TrustedAdvisorIntegrationStatus" })
  trustedAdvisorIntegrationStatus?: shared.TrustedAdvisorIntegrationStatusEnum;
}

/**
 * The environment for the workload.
 */
export enum UpdateWorkloadRequestBodyEnvironmentEnum {
  Production = "PRODUCTION",
  Preproduction = "PREPRODUCTION",
}

/**
 * The improvement status for a workload.
 */
export enum UpdateWorkloadRequestBodyImprovementStatusEnum {
  NotApplicable = "NOT_APPLICABLE",
  NotStarted = "NOT_STARTED",
  InProgress = "IN_PROGRESS",
  Complete = "COMPLETE",
  RiskAcknowledged = "RISK_ACKNOWLEDGED",
}

export class UpdateWorkloadRequestBody extends SpeakeasyBase {
  /**
   * The list of Amazon Web Services account IDs associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountIds" })
  accountIds?: string[];

  /**
   * List of AppRegistry application ARNs to associate to the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Applications" })
  applications?: string[];

  /**
   * The URL of the architectural design for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ArchitecturalDesign" })
  architecturalDesign?: string;

  /**
   * The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AwsRegions" })
  awsRegions?: string[];

  /**
   * The description for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   * Discovery configuration associated to the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DiscoveryConfig" })
  @Type(() => UpdateWorkloadRequestBodyDiscoveryConfig)
  discoveryConfig?: UpdateWorkloadRequestBodyDiscoveryConfig;

  /**
   * The environment for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Environment" })
  environment?: UpdateWorkloadRequestBodyEnvironmentEnum;

  /**
   * The improvement status for a workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImprovementStatus" })
  improvementStatus?: UpdateWorkloadRequestBodyImprovementStatusEnum;

  /**
   * The industry for the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Industry" })
  industry?: string;

  /**
   * <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IndustryType" })
  industryType?: string;

  /**
   * <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsReviewOwnerUpdateAcknowledged" })
  isReviewOwnerUpdateAcknowledged?: boolean;

  /**
   *  The list of non-Amazon Web Services Regions associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NonAwsRegions" })
  nonAwsRegions?: string[];

  /**
   * The notes associated with the workload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notes" })
  notes?: string;

  /**
   * The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PillarPriorities" })
  pillarPriorities?: string[];

  /**
   * The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReviewOwner" })
  reviewOwner?: string;

  /**
   * <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorkloadName" })
  workloadName?: string;
}

export class UpdateWorkloadRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateWorkloadRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkloadId",
  })
  workloadId: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateWorkloadResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateWorkloadOutput?: shared.UpdateWorkloadOutput;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
