/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
 */
export class CreateLifecyclePolicyRequestBodyPolicyDetails extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.Action })
  @Expose({ name: "Actions" })
  @Type(() => shared.Action)
  actions?: shared.Action[];

  @SpeakeasyMetadata()
  @Expose({ name: "EventSource" })
  @Type(() => shared.EventSource)
  eventSource?: shared.EventSource;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  @Type(() => shared.ParametersT)
  parameters?: shared.ParametersT;

  @SpeakeasyMetadata()
  @Expose({ name: "PolicyType" })
  policyType?: shared.PolicyTypeValuesEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceLocations" })
  resourceLocations?: shared.ResourceLocationValuesEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceTypes" })
  resourceTypes?: shared.ResourceTypeValuesEnum[];

  @SpeakeasyMetadata({ elemType: shared.Schedule })
  @Expose({ name: "Schedules" })
  @Type(() => shared.Schedule)
  schedules?: shared.Schedule[];

  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "TargetTags" })
  @Type(() => shared.Tag)
  targetTags?: shared.Tag[];
}

/**
 * The desired activation state of the lifecycle policy after creation.
 */
export enum CreateLifecyclePolicyRequestBodyStateEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

export class CreateLifecyclePolicyRequestBody extends SpeakeasyBase {
  /**
   * A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionRoleArn" })
  executionRoleArn: string;

  /**
   *  <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PolicyDetails" })
  @Type(() => CreateLifecyclePolicyRequestBodyPolicyDetails)
  policyDetails: CreateLifecyclePolicyRequestBodyPolicyDetails;

  /**
   * The desired activation state of the lifecycle policy after creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state: CreateLifecyclePolicyRequestBodyStateEnum;

  /**
   * The tags to apply to the lifecycle policy during creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}

export class CreateLifecyclePolicyRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateLifecyclePolicyRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateLifecyclePolicyResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createLifecyclePolicyResponse?: shared.CreateLifecyclePolicyResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
