<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_BYOC_TRUNK_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_CONNECTION_POLICY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_CONNECTION_POLICY_TARGET_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_DIALING_PERMISSIONS_COUNTRY_BULK_UPDATE_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_IP_RECORD_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const CREATE_SOURCE_IP_MAPPING_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_ARCHIVED_CALL_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_BYOC_TRUNK_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_CONNECTION_POLICY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_CONNECTION_POLICY_TARGET_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_IP_RECORD_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const DELETE_SOURCE_IP_MAPPING_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_BYOC_TRUNK_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_CONNECTION_POLICY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_CONNECTION_POLICY_TARGET_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_DIALING_PERMISSIONS_COUNTRY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_DIALING_PERMISSIONS_SETTINGS_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_IP_RECORD_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const FETCH_SOURCE_IP_MAPPING_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_BYOC_TRUNK_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_CONNECTION_POLICY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_CONNECTION_POLICY_TARGET_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_DIALING_PERMISSIONS_COUNTRY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_DIALING_PERMISSIONS_HRS_PREFIXES_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_IP_RECORD_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const LIST_SOURCE_IP_MAPPING_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_BYOC_TRUNK_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_CONNECTION_POLICY_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_CONNECTION_POLICY_TARGET_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_DIALING_PERMISSIONS_SETTINGS_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_IP_RECORD_SERVERS = [
		'https://voice.twilio.com',
	];
	
	public const UPDATE_SOURCE_IP_MAPPING_SERVERS = [
		'https://voice.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createByocTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkCreateByocTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkResponse
     */
	public function createByocTrunk(
        \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkCreateByocTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkResponse
    {
        $baseUrl = SDK::CREATE_BYOC_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ByocTrunks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateByocTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ByocTrunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ByocTrunk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createConnectionPolicy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyCreateConnectionPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyResponse
     */
	public function createConnectionPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyCreateConnectionPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyResponse
    {
        $baseUrl = SDK::CREATE_CONNECTION_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createConnectionPolicyTarget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetResponse
     */
	public function createConnectionPolicyTarget(
        \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetResponse
    {
        $baseUrl = SDK::CREATE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets', \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateConnectionPolicyTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicyConnectionPolicyTarget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicyConnectionPolicyTarget', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a bulk update request to change voice dialing country permissions of one or more countries identified by the corresponding [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateCreateDialingPermissionsCountryBulkUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateResponse
     */
	public function createDialingPermissionsCountryBulkUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateCreateDialingPermissionsCountryBulkUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateResponse
    {
        $baseUrl = SDK::CREATE_DIALING_PERMISSIONS_COUNTRY_BULK_UPDATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/DialingPermissions/BulkCountryUpdates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDialingPermissionsCountryBulkUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createIpRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordCreateIpRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordResponse
     */
	public function createIpRecord(
        \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordCreateIpRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordResponse
    {
        $baseUrl = SDK::CREATE_IP_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpRecords');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIpRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1IpRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1IpRecord', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSourceIpMapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingCreateSourceIpMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingResponse
     */
	public function createSourceIpMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingCreateSourceIpMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingResponse
    {
        $baseUrl = SDK::CREATE_SOURCE_IP_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SourceIpMappings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSourceIpMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1SourceIpMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1SourceIpMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallResponse
     */
	public function deleteArchivedCall(
        \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallResponse
    {
        $baseUrl = SDK::DELETE_ARCHIVED_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Archives/{Date}/Calls/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteArchivedCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteByocTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkResponse
     */
	public function deleteByocTrunk(
        \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkResponse
    {
        $baseUrl = SDK::DELETE_BYOC_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ByocTrunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteByocTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteConnectionPolicy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyResponse
     */
	public function deleteConnectionPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyResponse
    {
        $baseUrl = SDK::DELETE_CONNECTION_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteConnectionPolicyTarget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetResponse
     */
	public function deleteConnectionPolicyTarget(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetResponse
    {
        $baseUrl = SDK::DELETE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConnectionPolicyTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteIpRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordResponse
     */
	public function deleteIpRecord(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordResponse
    {
        $baseUrl = SDK::DELETE_IP_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpRecords/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIpRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSourceIpMapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingResponse
     */
	public function deleteSourceIpMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingResponse
    {
        $baseUrl = SDK::DELETE_SOURCE_IP_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SourceIpMappings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSourceIpMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchByocTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkResponse
     */
	public function fetchByocTrunk(
        \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkResponse
    {
        $baseUrl = SDK::FETCH_BYOC_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ByocTrunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchByocTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ByocTrunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ByocTrunk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchConnectionPolicy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyResponse
     */
	public function fetchConnectionPolicy(
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyResponse
    {
        $baseUrl = SDK::FETCH_CONNECTION_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchConnectionPolicyTarget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetResponse
     */
	public function fetchConnectionPolicyTarget(
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetResponse
    {
        $baseUrl = SDK::FETCH_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConnectionPolicyTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicyConnectionPolicyTarget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicyConnectionPolicyTarget', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve voice dialing country permissions identified by the given ISO country code
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryResponse
     */
	public function fetchDialingPermissionsCountry(
        \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryResponse
    {
        $baseUrl = SDK::FETCH_DIALING_PERMISSIONS_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/DialingPermissions/Countries/{IsoCode}', \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1DialingPermissionsDialingPermissionsCountryInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1DialingPermissionsDialingPermissionsCountryInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve voice dialing permissions inheritance for the sub-account
     * 
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsSettingsResponse
     */
	public function fetchDialingPermissionsSettings(
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsSettingsResponse
    {
        $baseUrl = SDK::FETCH_DIALING_PERMISSIONS_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Settings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDialingPermissionsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1DialingPermissionsDialingPermissionsSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1DialingPermissionsDialingPermissionsSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchIpRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordResponse
     */
	public function fetchIpRecord(
        \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordResponse
    {
        $baseUrl = SDK::FETCH_IP_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpRecords/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIpRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1IpRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1IpRecord', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSourceIpMapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingResponse
     */
	public function fetchSourceIpMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingResponse
    {
        $baseUrl = SDK::FETCH_SOURCE_IP_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SourceIpMappings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSourceIpMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1SourceIpMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1SourceIpMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listByocTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkResponse
     */
	public function listByocTrunk(
        \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkResponse
    {
        $baseUrl = SDK::LIST_BYOC_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ByocTrunks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListByocTrunkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListByocTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listByocTrunkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListByocTrunkListByocTrunkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listConnectionPolicy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyResponse
     */
	public function listConnectionPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyResponse
    {
        $baseUrl = SDK::LIST_CONNECTION_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionPolicyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyListConnectionPolicyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listConnectionPolicyTarget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetResponse
     */
	public function listConnectionPolicyTarget(
        \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetResponse
    {
        $baseUrl = SDK::LIST_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets', \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionPolicyTargetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConnectionPolicyTargetListConnectionPolicyTargetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all voice dialing country permissions for this account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryResponse
     */
	public function listDialingPermissionsCountry(
        \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryResponse
    {
        $baseUrl = SDK::LIST_DIALING_PERMISSIONS_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/DialingPermissions/Countries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDialingPermissionsCountryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsCountryListDialingPermissionsCountryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the high-risk special services prefixes from the country resource corresponding to the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesResponse
     */
	public function listDialingPermissionsHrsPrefixes(
        \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesResponse
    {
        $baseUrl = SDK::LIST_DIALING_PERMISSIONS_HRS_PREFIXES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/DialingPermissions/Countries/{IsoCode}/HighRiskSpecialPrefixes', \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDialingPermissionsHrsPrefixesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDialingPermissionsHrsPrefixesListDialingPermissionsHrsPrefixesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listIpRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIpRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIpRecordResponse
     */
	public function listIpRecord(
        \OpenAPI\OpenAPI\Models\Operations\ListIpRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIpRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIpRecordResponse
    {
        $baseUrl = SDK::LIST_IP_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpRecords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIpRecordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIpRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIpRecordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIpRecordListIpRecordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSourceIpMapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingResponse
     */
	public function listSourceIpMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingResponse
    {
        $baseUrl = SDK::LIST_SOURCE_IP_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SourceIpMappings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSourceIpMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSourceIpMappingListSourceIpMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateByocTrunk
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkResponse
     */
	public function updateByocTrunk(
        \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkResponse
    {
        $baseUrl = SDK::UPDATE_BYOC_TRUNK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ByocTrunks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateByocTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ByocTrunk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ByocTrunk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateConnectionPolicy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyResponse
     */
	public function updateConnectionPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyResponse
    {
        $baseUrl = SDK::UPDATE_CONNECTION_POLICY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateConnectionPolicyTarget
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetResponse
     */
	public function updateConnectionPolicyTarget(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetResponse
    {
        $baseUrl = SDK::UPDATE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConnectionPolicyTargetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1ConnectionPolicyConnectionPolicyTarget = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1ConnectionPolicyConnectionPolicyTarget', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update voice dialing permissions inheritance for the sub-account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsUpdateDialingPermissionsSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsResponse
     */
	public function updateDialingPermissionsSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsUpdateDialingPermissionsSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsResponse
    {
        $baseUrl = SDK::UPDATE_DIALING_PERMISSIONS_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDialingPermissionsSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1DialingPermissionsDialingPermissionsSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1DialingPermissionsDialingPermissionsSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateIpRecord
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordResponse
     */
	public function updateIpRecord(
        \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordResponse
    {
        $baseUrl = SDK::UPDATE_IP_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/IpRecords/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateIpRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1IpRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1IpRecord', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSourceIpMapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingResponse
     */
	public function updateSourceIpMapping(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingResponse
    {
        $baseUrl = SDK::UPDATE_SOURCE_IP_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/SourceIpMappings/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSourceIpMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voiceV1SourceIpMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoiceV1SourceIpMapping', 'json');
            }
        }

        return $response;
    }
}