/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MssqlHostConfiguration - Details of the new SQL Server host configuration.
 */
public class MssqlHostConfiguration {
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableDatabaseBatchSnapshots")
    public HostConfigurationPropertyEnabledEnum enableDatabaseBatchSnapshots;

    public MssqlHostConfiguration withEnableDatabaseBatchSnapshots(HostConfigurationPropertyEnabledEnum enableDatabaseBatchSnapshots) {
        this.enableDatabaseBatchSnapshots = enableDatabaseBatchSnapshots;
        return this;
    }
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableGroupFetch")
    public HostConfigurationPropertyEnabledEnum enableGroupFetch;

    public MssqlHostConfiguration withEnableGroupFetch(HostConfigurationPropertyEnabledEnum enableGroupFetch) {
        this.enableGroupFetch = enableGroupFetch;
        return this;
    }
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableVdi")
    public HostConfigurationPropertyEnabledEnum enableVdi;

    public MssqlHostConfiguration withEnableVdi(HostConfigurationPropertyEnabledEnum enableVdi) {
        this.enableVdi = enableVdi;
        return this;
    }
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableVdiDb")
    public HostConfigurationPropertyEnabledEnum enableVdiDb;

    public MssqlHostConfiguration withEnableVdiDb(HostConfigurationPropertyEnabledEnum enableVdiDb) {
        this.enableVdiDb = enableVdiDb;
        return this;
    }
    
    /**
     * Number of concurrent read requests for restoring a file from the Rubrik cluster to a remote host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileRestoreReadParallelism")
    public Integer fileRestoreReadParallelism;

    public MssqlHostConfiguration withFileRestoreReadParallelism(Integer fileRestoreReadParallelism) {
        this.fileRestoreReadParallelism = fileRestoreReadParallelism;
        return this;
    }
    
    /**
     * Number of concurrent write requests for restoring a file from the Rubrik cluster to a remote host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileRestoreWriteParallelism")
    public Integer fileRestoreWriteParallelism;

    public MssqlHostConfiguration withFileRestoreWriteParallelism(Integer fileRestoreWriteParallelism) {
        this.fileRestoreWriteParallelism = fileRestoreWriteParallelism;
        return this;
    }
    
    /**
     * Number of concurrent requests for transferring a file from a remote host to the Rubrik cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileTransferParallelism")
    public Integer fileTransferParallelism;

    public MssqlHostConfiguration withFileTransferParallelism(Integer fileTransferParallelism) {
        this.fileTransferParallelism = fileTransferParallelism;
        return this;
    }
    
    /**
     * The default value for maximum number of data streams per database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mssqlDefaultMaxDataStreamsPerDatabase")
    public Integer mssqlDefaultMaxDataStreamsPerDatabase;

    public MssqlHostConfiguration withMssqlDefaultMaxDataStreamsPerDatabase(Integer mssqlDefaultMaxDataStreamsPerDatabase) {
        this.mssqlDefaultMaxDataStreamsPerDatabase = mssqlDefaultMaxDataStreamsPerDatabase;
        return this;
    }
    
    /**
     * The maximum number of concurrent database restore job running on a host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("physicalHostDatabaseRestoreThrottleMaxRefCount")
    public Integer physicalHostDatabaseRestoreThrottleMaxRefCount;

    public MssqlHostConfiguration withPhysicalHostDatabaseRestoreThrottleMaxRefCount(Integer physicalHostDatabaseRestoreThrottleMaxRefCount) {
        this.physicalHostDatabaseRestoreThrottleMaxRefCount = physicalHostDatabaseRestoreThrottleMaxRefCount;
        return this;
    }
    
    /**
     * Maximum number of concurrent SQL Server log backup jobs per physical host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("physicalHostLogBackupThrottleMaxRefCount")
    public Integer physicalHostLogBackupThrottleMaxRefCount;

    public MssqlHostConfiguration withPhysicalHostLogBackupThrottleMaxRefCount(Integer physicalHostLogBackupThrottleMaxRefCount) {
        this.physicalHostLogBackupThrottleMaxRefCount = physicalHostLogBackupThrottleMaxRefCount;
        return this;
    }
    
    /**
     * Maximum number of concurrent snapshots per physical host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("throttlePhysicalHostMaxRefCount")
    public Integer throttlePhysicalHostMaxRefCount;

    public MssqlHostConfiguration withThrottlePhysicalHostMaxRefCount(Integer throttlePhysicalHostMaxRefCount) {
        this.throttlePhysicalHostMaxRefCount = throttlePhysicalHostMaxRefCount;
        return this;
    }
    
    public MssqlHostConfiguration(){}
}
