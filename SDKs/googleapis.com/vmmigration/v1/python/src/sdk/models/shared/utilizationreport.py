"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import status as shared_status
from ..shared import vmutilizationinfo as shared_vmutilizationinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UtilizationReportStateEnum(str, Enum):
    r"""Output only. Current state of the report."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'

class UtilizationReportTimeFrameEnum(str, Enum):
    r"""Time frame of the report."""
    TIME_FRAME_UNSPECIFIED = 'TIME_FRAME_UNSPECIFIED'
    WEEK = 'WEEK'
    MONTH = 'MONTH'
    YEAR = 'YEAR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UtilizationReport:
    r"""Utilization report details the utilization (CPU, memory, etc.) of selected source VMs."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed)."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The report display name, as assigned by the user."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    frame_end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameEndTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the \\"frame_end_time\\" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The report unique name."""  
    state: Optional[UtilizationReportStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Current state of the report."""  
    state_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time the state was last set."""  
    time_frame: Optional[UtilizationReportTimeFrameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFrame'), 'exclude': lambda f: f is None }})
    r"""Time frame of the report."""  
    vm_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Total number of VMs included in the report."""  
    vms: Optional[list[shared_vmutilizationinfo.VMUtilizationInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vms'), 'exclude': lambda f: f is None }})
    r"""List of utilization information per VM. When sent as part of the request, the \\"vm_id\\" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UtilizationReportInput:
    r"""Utilization report details the utilization (CPU, memory, etc.) of selected source VMs."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The report display name, as assigned by the user."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    time_frame: Optional[UtilizationReportTimeFrameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeFrame'), 'exclude': lambda f: f is None }})
    r"""Time frame of the report."""  
    vms: Optional[list[shared_vmutilizationinfo.VMUtilizationInfoInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vms'), 'exclude': lambda f: f is None }})
    r"""List of utilization information per VM. When sent as part of the request, the \\"vm_id\\" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored."""  
    