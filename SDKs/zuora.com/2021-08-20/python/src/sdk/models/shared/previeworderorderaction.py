"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cancelsubscription as shared_cancelsubscription
from ..shared import createorderresume as shared_createorderresume
from ..shared import createordersuspend as shared_createordersuspend
from ..shared import createordertermsandconditions as shared_createordertermsandconditions
from ..shared import ownertransfer as shared_ownertransfer
from ..shared import previewordercreatesubscription as shared_previewordercreatesubscription
from ..shared import previeworderrateplanoverride as shared_previeworderrateplanoverride
from ..shared import previeworderrateplanupdate as shared_previeworderrateplanupdate
from ..shared import removeproduct as shared_removeproduct
from ..shared import triggerdate as shared_triggerdate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PreviewOrderOrderActionTypeEnum(str, Enum):
    r"""Type of order action.
    
    Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
    
    Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
    """
    CREATE_SUBSCRIPTION = 'CreateSubscription'
    TERMS_AND_CONDITIONS = 'TermsAndConditions'
    ADD_PRODUCT = 'AddProduct'
    UPDATE_PRODUCT = 'UpdateProduct'
    REMOVE_PRODUCT = 'RemoveProduct'
    RENEW_SUBSCRIPTION = 'RenewSubscription'
    CANCEL_SUBSCRIPTION = 'CancelSubscription'
    OWNER_TRANSFER = 'OwnerTransfer'
    SUSPEND = 'Suspend'
    RESUME = 'Resume'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PreviewOrderOrderAction:
    
    type: PreviewOrderOrderActionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of order action.
    
    Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
    
    Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
    """  
    add_product: Optional[shared_previeworderrateplanoverride.PreviewOrderRatePlanOverride] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addProduct'), 'exclude': lambda f: f is None }})
    r"""Rate plan associated with a subscription."""  
    cancel_subscription: Optional[shared_cancelsubscription.CancelSubscription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelSubscription'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `CancelSubscription`."""  
    create_subscription: Optional[shared_previewordercreatesubscription.PreviewOrderCreateSubscription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createSubscription'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `CreateSubscription`."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""Container for custom fields of an Order Action object."""  
    owner_transfer: Optional[shared_ownertransfer.OwnerTransfer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerTransfer'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `OwnerTransfer`.
    
    **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    """  
    remove_product: Optional[shared_removeproduct.RemoveProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeProduct'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `RemoveProduct`."""  
    resume: Optional[shared_createorderresume.CreateOrderResume] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resume'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `Resume`."""  
    suspend: Optional[shared_createordersuspend.CreateOrderSuspend] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspend'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `Suspend`."""  
    terms_and_conditions: Optional[shared_createordertermsandconditions.CreateOrderTermsAndConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `TermsAndConditions`."""  
    trigger_dates: Optional[list[shared_triggerdate.TriggerDate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerDates'), 'exclude': lambda f: f is None }})
    r"""Container for the contract effective, service activation, and customer acceptance dates of the order action.
    
    If the service activation date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Activation` subscription.
    
    If the customer acceptance date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Acceptance` subscription. If the service activation date field is at the same time required and skipped (or set as null), it will be a `Pending Activation` subscription.
    """  
    update_product: Optional[shared_previeworderrateplanupdate.PreviewOrderRatePlanUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateProduct'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `UpdateProduct`."""  
    