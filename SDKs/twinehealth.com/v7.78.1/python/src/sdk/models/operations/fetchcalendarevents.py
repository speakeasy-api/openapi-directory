"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import fetchcalendareventsresponse as shared_fetchcalendareventsresponse
from ..shared import fetcherrorresponse as shared_fetcherrorresponse
from enum import Enum
from typing import Optional

class FetchCalendarEventsFilterTypeEnum(str, Enum):
    r"""Calendar event type"""
    PLAN_CHECK_IN = 'plan-check-in'
    REMINDER = 'reminder'
    TELEPHONE_CALL = 'telephone-call'
    OFFICE_VISIT = 'office-visit'
    VIDEO_CALL = 'video-call'

class FetchCalendarEventsIncludeEnum(str, Enum):
    r"""List of related resources to include in the response"""
    OWNER = 'owner'


@dataclasses.dataclass
class FetchCalendarEventsRequest:
    
    filter_attendees: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[attendees]', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`."""  
    filter_completed_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[completed_at]', 'style': 'form', 'explode': True }})
    r"""The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events completed in November 2017 (America/New_York): `filter[completed_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`"""  
    filter_completed: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[completed]', 'style': 'form', 'explode': True }})
    r"""If not specified, return all calendar events. If set to `true` return only events marked as completed, if set to `false`, return only events not marked as completed yet."""  
    filter_created_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[created_at]', 'style': 'form', 'explode': True }})
    r"""The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events created in November 2017 (America/New_York): `filter[created_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`"""  
    filter_end_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[end_at]', 'style': 'form', 'explode': True }})
    r"""The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events ending in November 2017 (America/New_York): `filter[end_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`"""  
    filter_groups: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[groups]', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of group ids. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`."""  
    filter_organization: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[organization]', 'style': 'form', 'explode': True }})
    r"""Fitbit Plus organization id. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`."""  
    filter_patient: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[patient]', 'style': 'form', 'explode': True }})
    r"""Patient id to fetch calendar event. Note that one of the following filters must be specified: `filter[patient]`, `filter[group]`, `filter[organization]`, or `filter[attendees]`."""  
    filter_start_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[start_at]', 'style': 'form', 'explode': True }})
    r"""The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events starting in November 2017 (America/New_York): `filter[start_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`"""  
    filter_type: Optional[FetchCalendarEventsFilterTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[type]', 'style': 'form', 'explode': True }})
    r"""Calendar event type"""  
    filter_updated_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[updated_at]', 'style': 'form', 'explode': True }})
    r"""The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by `..`. Example for events updated in November 2017 (America/New_York): `filter[updated_at]=2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00`"""  
    include: Optional[FetchCalendarEventsIncludeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""List of related resources to include in the response"""  
    page_cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[cursor]', 'style': 'form', 'explode': True }})
    r"""Page cursor"""  
    page_limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[limit]', 'style': 'form', 'explode': True }})
    r"""Page limit"""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[number]', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[size]', 'style': 'form', 'explode': True }})
    r"""Page size"""  
    

@dataclasses.dataclass
class FetchCalendarEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    fetch_calendar_events_response: Optional[shared_fetchcalendareventsresponse.FetchCalendarEventsResponse] = dataclasses.field(default=None)
    r"""OK"""  
    fetch_error_response: Optional[shared_fetcherrorresponse.FetchErrorResponse] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    