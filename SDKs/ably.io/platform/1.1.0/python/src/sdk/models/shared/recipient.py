"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RecipientTransportTypeEnum(str, Enum):
    r"""Defines which push platform is being used."""
    APNS = 'apns'
    FCM = 'fcm'
    GCM = 'gcm'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecipientOutput:
    r"""Push recipient details for a device."""
    
    device_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceToken'), 'exclude': lambda f: f is None }})
    r"""when using APNs, specifies the required device token."""  
    registration_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationToken'), 'exclude': lambda f: f is None }})
    r"""when using GCM or FCM, specifies the required registration token."""  
    transport_type: Optional[RecipientTransportTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transportType'), 'exclude': lambda f: f is None }})
    r"""Defines which push platform is being used."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Recipient:
    r"""Push recipient details for a device."""
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""Client ID of recipient"""  
    device_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceId'), 'exclude': lambda f: f is None }})
    r"""Client ID of recipient"""  
    device_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceToken'), 'exclude': lambda f: f is None }})
    r"""when using APNs, specifies the required device token."""  
    registration_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationToken'), 'exclude': lambda f: f is None }})
    r"""when using GCM or FCM, specifies the required registration token."""  
    transport_type: Optional[RecipientTransportTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transportType'), 'exclude': lambda f: f is None }})
    r"""Defines which push platform is being used."""  
    