// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CheckDirectivePathParams struct {
	// Id of the directive
	DirectiveID string `pathParam:"style=simple,explode=false,name=directiveId"`
}

type CheckDirectiveRequest struct {
	PathParams CheckDirectivePathParams
	Request    shared.Directive `request:"mediaType=application/json"`
}

// CheckDirective200ApplicationJSONActionEnum - The id of the action
type CheckDirective200ApplicationJSONActionEnum string

const (
	CheckDirective200ApplicationJSONActionEnumCheckDirective CheckDirective200ApplicationJSONActionEnum = "checkDirective"
)

func (e *CheckDirective200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "checkDirective":
		*e = CheckDirective200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDirective200ApplicationJSONActionEnum: %s", s)
	}
}

type CheckDirective200ApplicationJSONData struct {
	Directives []shared.Directive `json:"directives"`
}

// CheckDirective200ApplicationJSONResultEnum - Result of the request
type CheckDirective200ApplicationJSONResultEnum string

const (
	CheckDirective200ApplicationJSONResultEnumSuccess CheckDirective200ApplicationJSONResultEnum = "success"
	CheckDirective200ApplicationJSONResultEnumError   CheckDirective200ApplicationJSONResultEnum = "error"
)

func (e *CheckDirective200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = CheckDirective200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDirective200ApplicationJSONResultEnum: %s", s)
	}
}

// CheckDirective200ApplicationJSON - Directives information
type CheckDirective200ApplicationJSON struct {
	// The id of the action
	Action CheckDirective200ApplicationJSONActionEnum `json:"action"`
	Data   CheckDirective200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result CheckDirective200ApplicationJSONResultEnum `json:"result"`
}

type CheckDirectiveResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Directives information
	CheckDirective200ApplicationJSONObject *CheckDirective200ApplicationJSON
}
