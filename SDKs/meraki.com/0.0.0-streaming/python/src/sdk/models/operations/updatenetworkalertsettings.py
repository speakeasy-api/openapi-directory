"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAlertSettingsRequestBodyAlertsAlertDestinations:
    r"""A hash of destinations for this specific alert"""
    
    all_admins: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allAdmins'), 'exclude': lambda f: f is None }})
    r"""If true, then all network admins will receive emails for this alert"""  
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""A list of emails that will receive information about the alert"""  
    http_server_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpServerIds'), 'exclude': lambda f: f is None }})
    r"""A list of HTTP server IDs to send a Webhook to for this alert"""  
    snmp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snmp'), 'exclude': lambda f: f is None }})
    r"""If true, then an SNMP trap will be sent for this alert if there is an SNMP trap server configured for this network"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAlertSettingsRequestBodyAlerts:
    
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of alert"""  
    alert_destinations: Optional[UpdateNetworkAlertSettingsRequestBodyAlertsAlertDestinations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertDestinations'), 'exclude': lambda f: f is None }})
    r"""A hash of destinations for this specific alert"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""A boolean depicting if the alert is turned on or off"""  
    filters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""A hash of specific configuration data for the alert. Only filters specific to the alert will be updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAlertSettingsRequestBodyDefaultDestinations:
    r"""The network-wide destinations for all alerts on the network."""
    
    all_admins: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allAdmins'), 'exclude': lambda f: f is None }})
    r"""If true, then all network admins will receive emails."""  
    emails: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails'), 'exclude': lambda f: f is None }})
    r"""A list of emails that will recieve the alert(s)."""  
    http_server_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpServerIds'), 'exclude': lambda f: f is None }})
    r"""A list of HTTP server IDs to send a Webhook to"""  
    snmp: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snmp'), 'exclude': lambda f: f is None }})
    r"""If true, then an SNMP trap will be sent if there is an SNMP trap server configured for this network."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkAlertSettingsRequestBody:
    
    alerts: Optional[list[UpdateNetworkAlertSettingsRequestBodyAlerts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alerts'), 'exclude': lambda f: f is None }})
    r"""Alert-specific configuration for each type. Only alerts that pertain to the network can be updated."""  
    default_destinations: Optional[UpdateNetworkAlertSettingsRequestBodyDefaultDestinations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDestinations'), 'exclude': lambda f: f is None }})
    r"""The network-wide destinations for all alerts on the network."""  
    

@dataclasses.dataclass
class UpdateNetworkAlertSettingsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkAlertSettingsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkAlertSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_alert_settings_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    