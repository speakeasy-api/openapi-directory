"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subscription:
    r"""Represents a customer subscription to a subscription plan.
    For an overview of the `Subscription` type, see
    [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    """
    
    canceled_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_date'), 'exclude': lambda f: f is None }})
    r"""The subscription cancellation date, in YYYY-MM-DD format (for
    example, 2013-01-15). On this date, the subscription status changes
    to `CANCELED` and the subscription billing stops.
    If you don't set this field, the subscription plan dictates if and
    when subscription ends.
    
    You cannot update this field, you can only clear it.
    """  
    card_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
    that is charged for the subscription.
    """  
    charged_through_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charged_through_date'), 'exclude': lambda f: f is None }})
    r"""The date up to which the customer is invoiced for the
    subscription, in YYYY-MM-DD format (for example, 2013-01-15).
    
    After the invoice is sent for a given billing period,
    this date will be the last day of the billing period.
    For example,
    suppose for the month of May a customer gets an invoice
    (or charged the card) on May 1. For the monthly billing scenario,
    this date is then set to May 31.
    """  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the subscription was created, in RFC 3339 format."""  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Square-assigned ID of the subscription."""  
    invoice_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoice_ids'), 'exclude': lambda f: f is None }})
    r"""The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the
    subscription, listed in order when the invoices were created
    (oldest invoices appear first).
    """  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the location associated with the subscription."""  
    plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan)."""  
    price_override_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_override_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'exclude': lambda f: f is None }})
    r"""The start date of the subscription, in YYYY-MM-DD format (for example,
    2013-01-15).
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The current status of the subscription."""  
    tax_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_percentage'), 'exclude': lambda f: f is None }})
    r"""The tax amount applied when billing the subscription. The
    percentage is expressed in decimal form, using a `'.'` as the decimal
    separator and without a `'%'` sign. For example, a value of `7.5`
    corresponds to 7.5%.
    """  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Timezone that will be used in date calculations for the subscription.
    Defaults to the timezone of the location based on `location_id`.
    Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
    """  
    version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version of the object. When updating an object, the version
    supplied must match the version in the database, otherwise the write will
    be rejected as conflicting.
    """  
    