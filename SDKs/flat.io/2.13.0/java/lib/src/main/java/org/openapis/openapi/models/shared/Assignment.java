/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Assignment - Assignment details
 */
public class Assignment {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public MediaAttachment[] attachments;

    public Assignment withAttachments(MediaAttachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * A Canvas LMS assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canvas")
    public AssignmentCanvas canvas;

    public Assignment withCanvas(AssignmentCanvas canvas) {
        this.canvas = canvas;
        return this;
    }
    
    /**
     * The unique identifier of the class where this assignment was posted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classroom")
    public String classroom;

    public Assignment withClassroom(String classroom) {
        this.classroom = classroom;
        return this;
    }
    
    /**
     * The URL of the cover to display
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover")
    public String cover;

    public Assignment withCover(String cover) {
        this.cover = cover;
        return this;
    }
    
    /**
     * The id of the cover to display
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverFile")
    public String coverFile;

    public Assignment withCoverFile(String coverFile) {
        this.coverFile = coverFile;
        return this;
    }
    
    /**
     * The creation date of this assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;

    public Assignment withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * The User unique identifier of the creator of this assignment
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator")
    public String creator;

    public Assignment withCreator(String creator) {
        this.creator = creator;
        return this;
    }
    
    /**
     * Description and content of the assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Assignment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The due date of this assignment, late submissions will be marked as
     * paste due.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dueDate")
    public OffsetDateTime dueDate;

    public Assignment withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * A coursework on Google Classroom
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleClassroom")
    public GoogleClassroomCoursework googleClassroom;

    public Assignment withGoogleClassroom(GoogleClassroomCoursework googleClassroom) {
        this.googleClassroom = googleClassroom;
        return this;
    }
    
    /**
     * An LTI assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lti")
    public AssignmentLti lti;

    public Assignment withLti(AssignmentLti lti) {
        this.lti = lti;
        return this;
    }
    
    /**
     * If set, the grading will be enabled for the assignement
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPoints")
    public Double maxPoints;

    public Assignment withMaxPoints(Double maxPoints) {
        this.maxPoints = maxPoints;
        return this;
    }
    
    /**
     * A MusicFirst Classroom assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfc")
    public AssignmentMfc mfc;

    public Assignment withMfc(AssignmentMfc mfc) {
        this.mfc = mfc;
        return this;
    }
    
    /**
     * A Microsoft Teams asignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("microsoftGraph")
    public MicrosoftGraphAssignment microsoftGraph;

    public Assignment withMicrosoftGraph(MicrosoftGraphAssignment microsoftGraph) {
        this.microsoftGraph = microsoftGraph;
        return this;
    }
    
    /**
     * The publication (scheduled) date of the assignment.
     * If this one is specified, the assignment will only be listed to the teachers of the class.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduledDate")
    public OffsetDateTime scheduledDate;

    public Assignment withScheduledDate(OffsetDateTime scheduledDate) {
        this.scheduledDate = scheduledDate;
        return this;
    }
    
    /**
     * State of the assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public AssignmentStateEnum state;

    public Assignment withState(AssignmentStateEnum state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("submissions")
    public AssignmentSubmission[] submissions;

    public Assignment withSubmissions(AssignmentSubmission[] submissions) {
        this.submissions = submissions;
        return this;
    }
    
    /**
     * Title of the assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Assignment withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Type of the assignment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public AssignmentTypeEnum type;

    public Assignment withType(AssignmentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public Assignment(){}
}
