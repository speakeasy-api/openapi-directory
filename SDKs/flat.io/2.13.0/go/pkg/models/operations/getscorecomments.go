// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetScoreCommentsSecurity struct {
	OAuth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetScoreCommentsDirectionEnum - Sort direction
type GetScoreCommentsDirectionEnum string

const (
	GetScoreCommentsDirectionEnumAsc  GetScoreCommentsDirectionEnum = "asc"
	GetScoreCommentsDirectionEnumDesc GetScoreCommentsDirectionEnum = "desc"
)

func (e GetScoreCommentsDirectionEnum) ToPointer() *GetScoreCommentsDirectionEnum {
	return &e
}

func (e *GetScoreCommentsDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetScoreCommentsDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScoreCommentsDirectionEnum: %v", v)
	}
}

// GetScoreCommentsSortEnum - Sort
type GetScoreCommentsSortEnum string

const (
	GetScoreCommentsSortEnumDate GetScoreCommentsSortEnum = "date"
)

func (e GetScoreCommentsSortEnum) ToPointer() *GetScoreCommentsSortEnum {
	return &e
}

func (e *GetScoreCommentsSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "date":
		*e = GetScoreCommentsSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScoreCommentsSortEnum: %v", v)
	}
}

// GetScoreCommentsTypeEnum - Filter the comments by type
type GetScoreCommentsTypeEnum string

const (
	GetScoreCommentsTypeEnumDocument GetScoreCommentsTypeEnum = "document"
	GetScoreCommentsTypeEnumInline   GetScoreCommentsTypeEnum = "inline"
)

func (e GetScoreCommentsTypeEnum) ToPointer() *GetScoreCommentsTypeEnum {
	return &e
}

func (e *GetScoreCommentsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "document":
		fallthrough
	case "inline":
		*e = GetScoreCommentsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScoreCommentsTypeEnum: %v", v)
	}
}

type GetScoreCommentsRequest struct {
	// Sort direction
	Direction *GetScoreCommentsDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).
	//
	Score string `pathParam:"style=simple,explode=false,name=score"`
	// This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
	//
	SharingKey *string `queryParam:"style=form,explode=true,name=sharingKey"`
	// Sort
	Sort *GetScoreCommentsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Filter the comments by type
	Type *GetScoreCommentsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetScoreCommentsResponse struct {
	ContentType string
	// Account overquota
	FlatErrorResponse *shared.FlatErrorResponse
	// The comments of the score
	ScoreComments []shared.ScoreComment
	StatusCode    int
	RawResponse   *http.Response
}
