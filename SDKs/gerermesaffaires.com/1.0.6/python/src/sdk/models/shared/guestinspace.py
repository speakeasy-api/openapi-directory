"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GuestInSpaceClientManagementEnum(str, Enum):
    NO = 'no'
    MANAGER = 'manager'
    ADN = 'adn'

class GuestInSpaceFoldersRightEnum(str, Enum):
    READ = 'read'
    WRITE = 'write'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GuestInSpaceFolders:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    right: Optional[GuestInSpaceFoldersRightEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Right'), 'exclude': lambda f: f is None }})  
    
class GuestInSpacePlayerEnum(str, Enum):
    GUEST = 'guest'
    OWNER = 'owner'
    MANAGER = 'manager'
    ASSISTANT = 'assistant'
    COLLABORATOR = 'collaborator'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GuestInSpace:
    r"""Infos to invite"""
    
    client_management: Optional[GuestInSpaceClientManagementEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientManagement'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    contact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Contact'), 'exclude': lambda f: f is None }})  
    folders: Optional[list[GuestInSpaceFolders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Folders'), 'exclude': lambda f: f is None }})  
    group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupIds'), 'exclude': lambda f: f is None }})  
    is_admin: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsAdmin'), 'exclude': lambda f: f is None }})  
    member_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberId'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message'), 'exclude': lambda f: f is None }})  
    player: Optional[GuestInSpacePlayerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Player'), 'exclude': lambda f: f is None }})  
    player_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerEnd'), 'exclude': lambda f: f is None }})  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Signature'), 'exclude': lambda f: f is None }})  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subject'), 'exclude': lambda f: f is None }})  
    