// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListActiveViolationsBehaviorCriteriaTypeEnum -  The criteria for a behavior.
type ListActiveViolationsBehaviorCriteriaTypeEnum string

const (
	ListActiveViolationsBehaviorCriteriaTypeEnumStatic          ListActiveViolationsBehaviorCriteriaTypeEnum = "STATIC"
	ListActiveViolationsBehaviorCriteriaTypeEnumStatistical     ListActiveViolationsBehaviorCriteriaTypeEnum = "STATISTICAL"
	ListActiveViolationsBehaviorCriteriaTypeEnumMachineLearning ListActiveViolationsBehaviorCriteriaTypeEnum = "MACHINE_LEARNING"
)

func (e *ListActiveViolationsBehaviorCriteriaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATIC":
		fallthrough
	case "STATISTICAL":
		fallthrough
	case "MACHINE_LEARNING":
		*e = ListActiveViolationsBehaviorCriteriaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListActiveViolationsBehaviorCriteriaTypeEnum: %s", s)
	}
}

// ListActiveViolationsVerificationStateEnum - The verification state of the violation (detect alarm).
type ListActiveViolationsVerificationStateEnum string

const (
	ListActiveViolationsVerificationStateEnumFalsePositive  ListActiveViolationsVerificationStateEnum = "FALSE_POSITIVE"
	ListActiveViolationsVerificationStateEnumBenignPositive ListActiveViolationsVerificationStateEnum = "BENIGN_POSITIVE"
	ListActiveViolationsVerificationStateEnumTruePositive   ListActiveViolationsVerificationStateEnum = "TRUE_POSITIVE"
	ListActiveViolationsVerificationStateEnumUnknown        ListActiveViolationsVerificationStateEnum = "UNKNOWN"
)

func (e *ListActiveViolationsVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FALSE_POSITIVE":
		fallthrough
	case "BENIGN_POSITIVE":
		fallthrough
	case "TRUE_POSITIVE":
		fallthrough
	case "UNKNOWN":
		*e = ListActiveViolationsVerificationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListActiveViolationsVerificationStateEnum: %s", s)
	}
}

type ListActiveViolationsQueryParams struct {
	//  The criteria for a behavior.
	BehaviorCriteriaType *ListActiveViolationsBehaviorCriteriaTypeEnum `queryParam:"style=form,explode=true,name=behaviorCriteriaType"`
	//  A list of all suppressed alerts.
	ListSuppressedAlerts *bool `queryParam:"style=form,explode=true,name=listSuppressedAlerts"`
	// The maximum number of results to return at one time.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token for the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The name of the Device Defender security profile for which violations are listed.
	SecurityProfileName *string `queryParam:"style=form,explode=true,name=securityProfileName"`
	// The name of the thing whose active violations are listed.
	ThingName *string `queryParam:"style=form,explode=true,name=thingName"`
	// The verification state of the violation (detect alarm).
	VerificationState *ListActiveViolationsVerificationStateEnum `queryParam:"style=form,explode=true,name=verificationState"`
}

type ListActiveViolationsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListActiveViolationsRequest struct {
	QueryParams ListActiveViolationsQueryParams
	Headers     ListActiveViolationsHeaders
}

type ListActiveViolationsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListActiveViolationsResponse *shared.ListActiveViolationsResponse
	StatusCode                   int
	RawResponse                  *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
