"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationLicenseRequestBody:
    
    device_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSerial'), 'exclude': lambda f: f is None }})
    r"""The serial number of the device to assign this license to. Set this to  null to unassign the license. If a different license is already active on the device, this parameter will control queueing/dequeuing this license."""  
    

@dataclasses.dataclass
class UpdateOrganizationLicenseRequest:
    
    license_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'licenseId', 'style': 'simple', 'explode': False }})  
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateOrganizationLicenseRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationLicense200ApplicationJSONPermanentlyQueuedLicenses:
    
    duration_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationInDays'), 'exclude': lambda f: f is None }})
    r"""The duration of the individual license"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Permanently queued license ID"""  
    license_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseKey'), 'exclude': lambda f: f is None }})
    r"""License key"""  
    license_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})
    r"""License type"""  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderNumber'), 'exclude': lambda f: f is None }})
    r"""Order number"""  
    
class UpdateOrganizationLicense200ApplicationJSONStateEnum(str, Enum):
    r"""The state of the license. All queued licenses have a status of `recentlyQueued`."""
    ACTIVE = 'active'
    EXPIRED = 'expired'
    EXPIRING = 'expiring'
    RECENTLY_QUEUED = 'recentlyQueued'
    UNUSED = 'unused'
    UNUSED_ACTIVE = 'unusedActive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationLicense200ApplicationJSON:
    r"""Successful operation"""
    
    activation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activationDate'), 'exclude': lambda f: f is None }})
    r"""The date the license started burning"""  
    claim_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claimDate'), 'exclude': lambda f: f is None }})
    r"""The date the license was claimed into the organization"""  
    device_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSerial'), 'exclude': lambda f: f is None }})
    r"""Serial number of the device the license is assigned to"""  
    duration_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durationInDays'), 'exclude': lambda f: f is None }})
    r"""The duration of the individual license"""  
    expiration_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'exclude': lambda f: f is None }})
    r"""The date the license will expire"""  
    head_license_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headLicenseId'), 'exclude': lambda f: f is None }})
    r"""The id of the head license this license is queued behind. If there is no head license, it returns nil."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""License ID"""  
    license_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseKey'), 'exclude': lambda f: f is None }})
    r"""License key"""  
    license_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenseType'), 'exclude': lambda f: f is None }})
    r"""License type"""  
    network_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkId'), 'exclude': lambda f: f is None }})
    r"""ID of the network the license is assigned to"""  
    order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderNumber'), 'exclude': lambda f: f is None }})
    r"""Order number"""  
    permanently_queued_licenses: Optional[list[UpdateOrganizationLicense200ApplicationJSONPermanentlyQueuedLicenses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permanentlyQueuedLicenses'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device."""  
    seat_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seatCount'), 'exclude': lambda f: f is None }})
    r"""The number of seats of the license. Only applicable to SM licenses."""  
    state: Optional[UpdateOrganizationLicense200ApplicationJSONStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the license. All queued licenses have a status of `recentlyQueued`."""  
    total_duration_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalDurationInDays'), 'exclude': lambda f: f is None }})
    r"""The duration of the license plus all permanently queued licenses associated with it"""  
    

@dataclasses.dataclass
class UpdateOrganizationLicenseResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_license_200_application_json_object: Optional[UpdateOrganizationLicense200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    