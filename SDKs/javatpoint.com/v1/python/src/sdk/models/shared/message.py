"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import androidconfig as shared_androidconfig
from ..shared import apnsconfig as shared_apnsconfig
from ..shared import fcmoptions as shared_fcmoptions
from ..shared import notification as shared_notification
from ..shared import webpushconfig as shared_webpushconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Message:
    r"""Message to send by Firebase Cloud Messaging Service."""
    
    android: Optional[shared_androidconfig.AndroidConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('android'), 'exclude': lambda f: f is None }})
    r"""Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl)."""  
    apns: Optional[shared_apnsconfig.ApnsConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apns'), 'exclude': lambda f: f is None }})
    r"""[Apple Push Notification Service](https://goo.gl/MXRTPa) specific options."""  
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Condition to send a message to, e.g. \\"'foo' in topics && 'bar' in topics\\"."""  
    data: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\\"from\\", \\"message_type\\", or any word starting with \\"google\\" or \\"gcm\\"). When sending payloads containing only data fields to iOS devices, only normal priority (`\\"apns-priority\\": \\"5\\"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig)."""  
    fcm_options: Optional[shared_fcmoptions.FcmOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fcmOptions'), 'exclude': lambda f: f is None }})
    r"""Platform independent options for features provided by the FCM SDKs."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output Only. The identifier of the message sent, in the format of `projects/*/messages/{message_id}`."""  
    notification: Optional[shared_notification.Notification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})
    r"""Basic notification template to use across all platforms."""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""Registration token to send a message to."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Topic name to send a message to, e.g. \\"weather\\". Note: \\"/topics/\\" prefix should not be provided."""  
    webpush: Optional[shared_webpushconfig.WebpushConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webpush'), 'exclude': lambda f: f is None }})
    r"""[Webpush protocol](https://tools.ietf.org/html/rfc8030) options."""  
    