"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import queryrequestrerankingconfig as shared_queryrequestrerankingconfig
from ..shared import servingcorpuskey as shared_servingcorpuskey
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServingQueryRequest:
    
    corpus_key: Optional[list[shared_servingcorpuskey.ServingCorpusKey]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corpusKey'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numResults'), 'exclude': lambda f: f is None }})
    r"""The number of results to return."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""The query text to use from the end user."""  
    reranking_config: Optional[shared_queryrequestrerankingconfig.QueryRequestRerankingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rerankingConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration options to apply to the reranking."""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})  
    