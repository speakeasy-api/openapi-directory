// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IftttRulePatchRuleTypeEnum string

const (
	IftttRulePatchRuleTypeEnumHTTPIfttt IftttRulePatchRuleTypeEnum = "http/ifttt"
)

func (e IftttRulePatchRuleTypeEnum) ToPointer() *IftttRulePatchRuleTypeEnum {
	return &e
}

func (e *IftttRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/ifttt":
		*e = IftttRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IftttRulePatchRuleTypeEnum: %v", v)
	}
}

type IftttRulePatchTarget struct {
	EventName  *string `json:"eventName,omitempty"`
	WebhookKey *string `json:"webhookKey,omitempty"`
}

type IftttRulePatch struct {
	RequestMode *string                    `json:"requestMode,omitempty"`
	RuleType    IftttRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch           `json:"source,omitempty"`
	Status      *string                    `json:"status,omitempty"`
	Target      *IftttRulePatchTarget      `json:"target,omitempty"`
}
