/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class StartQueryResponse {
    
    public String contentType;

    public StartQueryResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * EventDataStoreARNInvalidException
     */
    
    public Object eventDataStoreARNInvalidException;

    public StartQueryResponse withEventDataStoreARNInvalidException(Object eventDataStoreARNInvalidException) {
        this.eventDataStoreARNInvalidException = eventDataStoreARNInvalidException;
        return this;
    }
    
    /**
     * EventDataStoreNotFoundException
     */
    
    public Object eventDataStoreNotFoundException;

    public StartQueryResponse withEventDataStoreNotFoundException(Object eventDataStoreNotFoundException) {
        this.eventDataStoreNotFoundException = eventDataStoreNotFoundException;
        return this;
    }
    
    /**
     * InactiveEventDataStoreException
     */
    
    public Object inactiveEventDataStoreException;

    public StartQueryResponse withInactiveEventDataStoreException(Object inactiveEventDataStoreException) {
        this.inactiveEventDataStoreException = inactiveEventDataStoreException;
        return this;
    }
    
    /**
     * InsufficientEncryptionPolicyException
     */
    
    public Object insufficientEncryptionPolicyException;

    public StartQueryResponse withInsufficientEncryptionPolicyException(Object insufficientEncryptionPolicyException) {
        this.insufficientEncryptionPolicyException = insufficientEncryptionPolicyException;
        return this;
    }
    
    /**
     * InsufficientS3BucketPolicyException
     */
    
    public Object insufficientS3BucketPolicyException;

    public StartQueryResponse withInsufficientS3BucketPolicyException(Object insufficientS3BucketPolicyException) {
        this.insufficientS3BucketPolicyException = insufficientS3BucketPolicyException;
        return this;
    }
    
    /**
     * InvalidParameterException
     */
    
    public Object invalidParameterException;

    public StartQueryResponse withInvalidParameterException(Object invalidParameterException) {
        this.invalidParameterException = invalidParameterException;
        return this;
    }
    
    /**
     * InvalidQueryStatementException
     */
    
    public Object invalidQueryStatementException;

    public StartQueryResponse withInvalidQueryStatementException(Object invalidQueryStatementException) {
        this.invalidQueryStatementException = invalidQueryStatementException;
        return this;
    }
    
    /**
     * InvalidS3BucketNameException
     */
    
    public Object invalidS3BucketNameException;

    public StartQueryResponse withInvalidS3BucketNameException(Object invalidS3BucketNameException) {
        this.invalidS3BucketNameException = invalidS3BucketNameException;
        return this;
    }
    
    /**
     * InvalidS3PrefixException
     */
    
    public Object invalidS3PrefixException;

    public StartQueryResponse withInvalidS3PrefixException(Object invalidS3PrefixException) {
        this.invalidS3PrefixException = invalidS3PrefixException;
        return this;
    }
    
    /**
     * MaxConcurrentQueriesException
     */
    
    public Object maxConcurrentQueriesException;

    public StartQueryResponse withMaxConcurrentQueriesException(Object maxConcurrentQueriesException) {
        this.maxConcurrentQueriesException = maxConcurrentQueriesException;
        return this;
    }
    
    /**
     * NoManagementAccountSLRExistsException
     */
    
    public Object noManagementAccountSLRExistsException;

    public StartQueryResponse withNoManagementAccountSLRExistsException(Object noManagementAccountSLRExistsException) {
        this.noManagementAccountSLRExistsException = noManagementAccountSLRExistsException;
        return this;
    }
    
    /**
     * OperationNotPermittedException
     */
    
    public Object operationNotPermittedException;

    public StartQueryResponse withOperationNotPermittedException(Object operationNotPermittedException) {
        this.operationNotPermittedException = operationNotPermittedException;
        return this;
    }
    
    /**
     * S3BucketDoesNotExistException
     */
    
    public Object s3BucketDoesNotExistException;

    public StartQueryResponse withS3BucketDoesNotExistException(Object s3BucketDoesNotExistException) {
        this.s3BucketDoesNotExistException = s3BucketDoesNotExistException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.StartQueryResponse startQueryResponse;

    public StartQueryResponse withStartQueryResponse(org.openapis.openapi.models.shared.StartQueryResponse startQueryResponse) {
        this.startQueryResponse = startQueryResponse;
        return this;
    }
    
    
    public Integer statusCode;

    public StartQueryResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public StartQueryResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * UnsupportedOperationException
     */
    
    public Object unsupportedOperationException;

    public StartQueryResponse withUnsupportedOperationException(Object unsupportedOperationException) {
        this.unsupportedOperationException = unsupportedOperationException;
        return this;
    }
    
    public StartQueryResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
