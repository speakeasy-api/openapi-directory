/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class EntityReceiptDisbursementTotals {
    /**
     * Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_candidate_disbursements")
    public Float cumulativeCandidateDisbursements;

    public EntityReceiptDisbursementTotals withCumulativeCandidateDisbursements(Float cumulativeCandidateDisbursements) {
        this.cumulativeCandidateDisbursements = cumulativeCandidateDisbursements;
        return this;
    }
    
    /**
     * Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_candidate_receipts")
    public Float cumulativeCandidateReceipts;

    public EntityReceiptDisbursementTotals withCumulativeCandidateReceipts(Float cumulativeCandidateReceipts) {
        this.cumulativeCandidateReceipts = cumulativeCandidateReceipts;
        return this;
    }
    
    /**
     * Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_pac_disbursements")
    public Float cumulativePacDisbursements;

    public EntityReceiptDisbursementTotals withCumulativePacDisbursements(Float cumulativePacDisbursements) {
        this.cumulativePacDisbursements = cumulativePacDisbursements;
        return this;
    }
    
    /**
     * Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_pac_receipts")
    public Float cumulativePacReceipts;

    public EntityReceiptDisbursementTotals withCumulativePacReceipts(Float cumulativePacReceipts) {
        this.cumulativePacReceipts = cumulativePacReceipts;
        return this;
    }
    
    /**
     * Cumulative party disbursements in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_party_disbursements")
    public Float cumulativePartyDisbursements;

    public EntityReceiptDisbursementTotals withCumulativePartyDisbursements(Float cumulativePartyDisbursements) {
        this.cumulativePartyDisbursements = cumulativePartyDisbursements;
        return this;
    }
    
    /**
     * Cumulative party receipts in a two year period, adjusted to avoid double counting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative_party_receipts")
    public Float cumulativePartyReceipts;

    public EntityReceiptDisbursementTotals withCumulativePartyReceipts(Float cumulativePartyReceipts) {
        this.cumulativePartyReceipts = cumulativePartyReceipts;
        return this;
    }
    
    /**
     * Filter records to only those that were applicable to a given
     * two-year period.The cycle begins with an odd year and is named
     * for its ending, even year.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycle")
    public Integer cycle;

    public EntityReceiptDisbursementTotals withCycle(Integer cycle) {
        this.cycle = cycle;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("end_date")
    public LocalDate endDate;

    public EntityReceiptDisbursementTotals withEndDate(LocalDate endDate) {
        this.endDate = endDate;
        return this;
    }
    
    public EntityReceiptDisbursementTotals(){}
}
