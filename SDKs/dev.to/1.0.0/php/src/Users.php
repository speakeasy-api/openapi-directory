<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Organization's users
     * 
     * This endpoint allows the client to retrieve a list of users belonging to the organization
     * 
     * It supports pagination, each page will contain `30` users by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersResponse
     */
	public function getOrgUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/organizations/{username}/users', \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrgUsersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrgUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * A User
     * 
     * This endpoint allows the client to retrieve a single user, either by id
     * or by the user's username.
     * 
     * For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
     */
	public function getUser(
        \OpenAPI\OpenAPI\Models\Operations\GetUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/users/{id}', \OpenAPI\OpenAPI\Models\Operations\GetUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * User's all articles
     * 
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * It will return both published and unpublished articles with pagination.
     * 
     * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
     * 
     * By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse
     */
	public function getUserAllArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's articles
     * 
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Published articles will be in reverse chronological publication order.
     * 
     * It will return published articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse
     */
	public function getUserArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * The authenticated user
     * 
     * This endpoint allows the client to retrieve information about the authenticated user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserMeResponse
     */
	public function getUserMe(
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/users/me');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUserMe200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's published articles
     * 
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Published articles will be in reverse chronological publication order.
     * 
     * It will return published articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse
     */
	public function getUserPublishedArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/published');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's unpublished articles
     * 
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Unpublished articles will be in reverse chronological creation order.
     * 
     * It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse
     */
	public function getUserUnpublishedArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/unpublished');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Invite a User
     * 
     * This endpoint allows the client to trigger an invitation to the provided email address.
     * 
     *         It requires a token from a user with `super_admin` privileges.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\UserInviteParam $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminUsersCreateResponse
     */
	public function postAdminUsersCreate(
        \OpenAPI\OpenAPI\Models\Shared\UserInviteParam $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminUsersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/admin/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminUsersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Suspend a User
     * 
     * This endpoint allows the client to suspend a user.
     * 
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     * 
     * This specified user will be assigned the 'suspended' role. Suspending a user will stop the
     * user from posting new posts and comments. It doesn't delete any of the user's content, just
     * prevents them from creating new content while suspended. Users are not notified of their suspension
     * in the UI, so if you want them to know about this, you must notify them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
     */
	public function suspendUser(
        \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/users/{id}/suspend', \OpenAPI\OpenAPI\Models\Operations\SuspendUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuspendUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Unpublish a User's Articles and Comments
     * 
     * This endpoint allows the client to unpublish all of the articles and
     * comments created by a user.
     * 
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     * 
     * This specified user's articles and comments will be unpublished and will no longer be
     * visible to the public. They will remain in the database and will set back to draft status
     * on the specified user's  dashboard. Any notifications associated with the specified user's
     * articles and comments will be deleted.
     * 
     * Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT
     * status code immediately, but the articles and comments will not be unpublished until the
     * request is completed on the server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnpublishUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnpublishUserResponse
     */
	public function unpublishUser(
        \OpenAPI\OpenAPI\Models\Operations\UnpublishUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnpublishUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/users/{id}/unpublish', \OpenAPI\OpenAPI\Models\Operations\UnpublishUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnpublishUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}