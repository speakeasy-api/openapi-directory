"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def run_projects_locations_jobs_create(self, request: operations.RunProjectsLocationsJobsCreateRequest, security: operations.RunProjectsLocationsJobsCreateSecurity) -> operations.RunProjectsLocationsJobsCreateResponse:
        r"""Creates a Job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsJobsCreateRequest, base_url, '/v2/{parent}/jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_run_v2_job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_jobs_executions_list(self, request: operations.RunProjectsLocationsJobsExecutionsListRequest, security: operations.RunProjectsLocationsJobsExecutionsListSecurity) -> operations.RunProjectsLocationsJobsExecutionsListResponse:
        r"""Lists Executions from a Job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsJobsExecutionsListRequest, base_url, '/v2/{parent}/executions', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsJobsExecutionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsJobsExecutionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2ListExecutionsResponse])
                res.google_cloud_run_v2_list_executions_response = out

        return res

    def run_projects_locations_jobs_executions_tasks_list(self, request: operations.RunProjectsLocationsJobsExecutionsTasksListRequest, security: operations.RunProjectsLocationsJobsExecutionsTasksListSecurity) -> operations.RunProjectsLocationsJobsExecutionsTasksListResponse:
        r"""Lists Tasks from an Execution of a Job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsJobsExecutionsTasksListRequest, base_url, '/v2/{parent}/tasks', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsJobsExecutionsTasksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsJobsExecutionsTasksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2ListTasksResponse])
                res.google_cloud_run_v2_list_tasks_response = out

        return res

    def run_projects_locations_jobs_list(self, request: operations.RunProjectsLocationsJobsListRequest, security: operations.RunProjectsLocationsJobsListSecurity) -> operations.RunProjectsLocationsJobsListResponse:
        r"""Lists Jobs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsJobsListRequest, base_url, '/v2/{parent}/jobs', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2ListJobsResponse])
                res.google_cloud_run_v2_list_jobs_response = out

        return res

    def run_projects_locations_jobs_run(self, request: operations.RunProjectsLocationsJobsRunRequest, security: operations.RunProjectsLocationsJobsRunSecurity) -> operations.RunProjectsLocationsJobsRunResponse:
        r"""Triggers creation of a new Execution of this Job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsJobsRunRequest, base_url, '/v2/{name}:run', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_run_v2_run_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsJobsRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsJobsRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_operations_list(self, request: operations.RunProjectsLocationsOperationsListRequest, security: operations.RunProjectsLocationsOperationsListSecurity) -> operations.RunProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsOperationsListRequest, base_url, '/v2/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def run_projects_locations_operations_wait(self, request: operations.RunProjectsLocationsOperationsWaitRequest, security: operations.RunProjectsLocationsOperationsWaitSecurity) -> operations.RunProjectsLocationsOperationsWaitResponse:
        r"""Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsOperationsWaitRequest, base_url, '/v2/{name}:wait', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_longrunning_wait_operation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsOperationsWaitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsOperationsWaitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_services_create(self, request: operations.RunProjectsLocationsServicesCreateRequest, security: operations.RunProjectsLocationsServicesCreateSecurity) -> operations.RunProjectsLocationsServicesCreateResponse:
        r"""Creates a new Service in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesCreateRequest, base_url, '/v2/{parent}/services', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_run_v2_service_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_services_get_iam_policy(self, request: operations.RunProjectsLocationsServicesGetIamPolicyRequest, security: operations.RunProjectsLocationsServicesGetIamPolicySecurity) -> operations.RunProjectsLocationsServicesGetIamPolicyResponse:
        r"""Gets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesGetIamPolicyRequest, base_url, '/v2/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def run_projects_locations_services_list(self, request: operations.RunProjectsLocationsServicesListRequest, security: operations.RunProjectsLocationsServicesListSecurity) -> operations.RunProjectsLocationsServicesListResponse:
        r"""Lists Services."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesListRequest, base_url, '/v2/{parent}/services', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2ListServicesResponse])
                res.google_cloud_run_v2_list_services_response = out

        return res

    def run_projects_locations_services_patch(self, request: operations.RunProjectsLocationsServicesPatchRequest, security: operations.RunProjectsLocationsServicesPatchSecurity) -> operations.RunProjectsLocationsServicesPatchResponse:
        r"""Updates a Service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesPatchRequest, base_url, '/v2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_run_v2_service_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_services_revisions_delete(self, request: operations.RunProjectsLocationsServicesRevisionsDeleteRequest, security: operations.RunProjectsLocationsServicesRevisionsDeleteSecurity) -> operations.RunProjectsLocationsServicesRevisionsDeleteResponse:
        r"""Deletes a Revision."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesRevisionsDeleteRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesRevisionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesRevisionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def run_projects_locations_services_revisions_get(self, request: operations.RunProjectsLocationsServicesRevisionsGetRequest, security: operations.RunProjectsLocationsServicesRevisionsGetSecurity) -> operations.RunProjectsLocationsServicesRevisionsGetResponse:
        r"""Gets information about a Revision."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesRevisionsGetRequest, base_url, '/v2/{name}', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesRevisionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesRevisionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2Revision])
                res.google_cloud_run_v2_revision = out

        return res

    def run_projects_locations_services_revisions_list(self, request: operations.RunProjectsLocationsServicesRevisionsListRequest, security: operations.RunProjectsLocationsServicesRevisionsListSecurity) -> operations.RunProjectsLocationsServicesRevisionsListResponse:
        r"""Lists Revisions from a given Service, or from a given location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesRevisionsListRequest, base_url, '/v2/{parent}/revisions', request)
        
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesRevisionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesRevisionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudRunV2ListRevisionsResponse])
                res.google_cloud_run_v2_list_revisions_response = out

        return res

    def run_projects_locations_services_set_iam_policy(self, request: operations.RunProjectsLocationsServicesSetIamPolicyRequest, security: operations.RunProjectsLocationsServicesSetIamPolicySecurity) -> operations.RunProjectsLocationsServicesSetIamPolicyResponse:
        r"""Sets the IAM Access control policy for the specified Service. Overwrites any existing policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesSetIamPolicyRequest, base_url, '/v2/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def run_projects_locations_services_test_iam_permissions(self, request: operations.RunProjectsLocationsServicesTestIamPermissionsRequest, security: operations.RunProjectsLocationsServicesTestIamPermissionsSecurity) -> operations.RunProjectsLocationsServicesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunProjectsLocationsServicesTestIamPermissionsRequest, base_url, '/v2/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RunProjectsLocationsServicesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunProjectsLocationsServicesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1TestIamPermissionsResponse])
                res.google_iam_v1_test_iam_permissions_response = out

        return res

    