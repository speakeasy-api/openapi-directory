/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The structure that contains the information required for the KVS images delivery. If null, the configuration will be deleted from the stream.
 */
export class UpdateImageGenerationConfigurationRequestBodyImageGenerationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationConfig" })
  @Type(() => shared.ImageGenerationDestinationConfig)
  destinationConfig?: shared.ImageGenerationDestinationConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "Format" })
  format?: shared.FormatEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "FormatConfig" })
  formatConfig?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "HeightPixels" })
  heightPixels?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ImageSelectorType" })
  imageSelectorType?: shared.ImageSelectorTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "SamplingInterval" })
  samplingInterval?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: shared.ConfigurationStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "WidthPixels" })
  widthPixels?: number;
}

export class UpdateImageGenerationConfigurationRequestBody extends SpeakeasyBase {
  /**
   * The structure that contains the information required for the KVS images delivery. If null, the configuration will be deleted from the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ImageGenerationConfiguration" })
  @Type(
    () =>
      UpdateImageGenerationConfigurationRequestBodyImageGenerationConfiguration
  )
  imageGenerationConfiguration?: UpdateImageGenerationConfigurationRequestBodyImageGenerationConfiguration;

  /**
   * The Amazon Resource Name (ARN) of the Kinesis video stream from where you want to update the image generation configuration. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamARN" })
  streamARN?: string;

  /**
   * The name of the stream from which to update the image generation configuration. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreamName" })
  streamName?: string;
}

export class UpdateImageGenerationConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateImageGenerationConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateImageGenerationConfigurationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ClientLimitExceededException
   */
  @SpeakeasyMetadata()
  clientLimitExceededException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidArgumentException
   */
  @SpeakeasyMetadata()
  invalidArgumentException?: any;

  /**
   * NoDataRetentionException
   */
  @SpeakeasyMetadata()
  noDataRetentionException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateImageGenerationConfigurationOutput?: Record<string, any>;
}
