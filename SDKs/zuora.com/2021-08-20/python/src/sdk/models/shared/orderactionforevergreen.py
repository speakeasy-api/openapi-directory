"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cancelsubscription as shared_cancelsubscription
from ..shared import createsubscriptionforevergreen as shared_createsubscriptionforevergreen
from ..shared import getorderresume as shared_getorderresume
from ..shared import getordersuspend as shared_getordersuspend
from ..shared import ordermetricsforevergreen as shared_ordermetricsforevergreen
from ..shared import ownertransfer as shared_ownertransfer
from ..shared import rateplanoverrideforevergreen as shared_rateplanoverrideforevergreen
from ..shared import rateplanupdateforevergreen as shared_rateplanupdateforevergreen
from ..shared import removeproduct as shared_removeproduct
from ..shared import termsandconditions as shared_termsandconditions
from ..shared import triggerdate as shared_triggerdate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class OrderActionForEvergreenTypeEnum(str, Enum):
    r"""Type of the order action."""
    CREATE_SUBSCRIPTION = 'CreateSubscription'
    TERMS_AND_CONDITIONS = 'TermsAndConditions'
    ADD_PRODUCT = 'AddProduct'
    UPDATE_PRODUCT = 'UpdateProduct'
    REMOVE_PRODUCT = 'RemoveProduct'
    RENEW_SUBSCRIPTION = 'RenewSubscription'
    CANCEL_SUBSCRIPTION = 'CancelSubscription'
    OWNER_TRANSFER = 'OwnerTransfer'
    SUSPEND = 'Suspend'
    RESUME = 'Resume'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderActionForEvergreen:
    r"""Represents the processed order action."""
    
    add_product: Optional[shared_rateplanoverrideforevergreen.RatePlanOverrideForEvergreen] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addProduct'), 'exclude': lambda f: f is None }})
    r"""Rate plan associated with a subscription."""  
    cancel_subscription: Optional[shared_cancelsubscription.CancelSubscription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelSubscription'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `CancelSubscription`."""  
    create_subscription: Optional[shared_createsubscriptionforevergreen.CreateSubscriptionForEvergreen] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createSubscription'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `CreateSubscription`."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""Container for custom fields of an Order Action object."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Id of the order action processed in the order."""  
    order_metrics: Optional[list[shared_ordermetricsforevergreen.OrderMetricsForEvergreen]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderMetrics'), 'exclude': lambda f: f is None }})
    r"""Shows the delta metrics caused by a specific order action on a specific charge."""  
    owner_transfer: Optional[shared_ownertransfer.OwnerTransfer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerTransfer'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `OwnerTransfer`.
    
    **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
    """  
    remove_product: Optional[shared_removeproduct.RemoveProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removeProduct'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `RemoveProduct`."""  
    resume: Optional[shared_getorderresume.GetOrderResume] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resume'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `Resume`."""  
    sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence'), 'exclude': lambda f: f is None }})
    r"""The sequence of the order actions processed in the order."""  
    suspend: Optional[shared_getordersuspend.GetOrderSuspend] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspend'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `Suspend`."""  
    terms_and_conditions: Optional[shared_termsandconditions.TermsAndConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `TermsAndConditions`."""  
    trigger_dates: Optional[list[shared_triggerdate.TriggerDate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerDates'), 'exclude': lambda f: f is None }})
    r"""Container for the contract effective, service activation, and customer acceptance dates of the order action.
    
    If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
    
    If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
    
    If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * AddProduct
     * UpdateProduct
     * RemoveProduct
     * RenewSubscription
     * TermsAndConditions
    
    If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * AddProduct
     * UpdateProduct
     * RemoveProduct
     * RenewSubscription
     * TermsAndConditions
    """  
    type: Optional[OrderActionForEvergreenTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the order action."""  
    update_product: Optional[shared_rateplanupdateforevergreen.RatePlanUpdateForEvergreen] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateProduct'), 'exclude': lambda f: f is None }})
    r"""Information about an order action of type `UpdateProduct`."""  
    