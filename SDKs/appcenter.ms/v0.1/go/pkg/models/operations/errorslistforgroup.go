// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ErrorsListForGroupSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type ErrorsListForGroupPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the error group
	ErrorGroupID string `pathParam:"style=simple,explode=false,name=errorGroupId"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsListForGroupQueryParams struct {
	// The maximum number of results to return. (0 will fetch all results till the max number.)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// Last date time in data in ISO 8601 date time format
	End   *time.Time `queryParam:"style=form,explode=true,name=end"`
	Model *string    `queryParam:"style=form,explode=true,name=model"`
	Os    *string    `queryParam:"style=form,explode=true,name=os"`
	// Start date time in data in ISO 8601 date time format
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
}

type ErrorsListForGroupRequest struct {
	PathParams  ErrorsListForGroupPathParams
	QueryParams ErrorsListForGroupQueryParams
	Security    ErrorsListForGroupSecurity
}

type ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumConflict            ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsListForGroupDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsListForGroupDefaultApplicationJSONError struct {
	Code    ErrorsListForGroupDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                `json:"message"`
}

// ErrorsListForGroupDefaultApplicationJSON - Error code with reason
type ErrorsListForGroupDefaultApplicationJSON struct {
	Error ErrorsListForGroupDefaultApplicationJSONError `json:"error"`
}

type ErrorsListForGroup200ApplicationJSONErrors struct {
	Country        *string    `json:"country,omitempty"`
	DeviceName     *string    `json:"deviceName,omitempty"`
	ErrorID        *string    `json:"errorId,omitempty"`
	HasAttachments *bool      `json:"hasAttachments,omitempty"`
	HasBreadcrumbs *bool      `json:"hasBreadcrumbs,omitempty"`
	Language       *string    `json:"language,omitempty"`
	OsType         *string    `json:"osType,omitempty"`
	OsVersion      *string    `json:"osVersion,omitempty"`
	Timestamp      *time.Time `json:"timestamp,omitempty"`
	UserID         *string    `json:"userId,omitempty"`
}

// ErrorsListForGroup200ApplicationJSON - Get all errors for group
type ErrorsListForGroup200ApplicationJSON struct {
	// Errors list.
	Errors   []ErrorsListForGroup200ApplicationJSONErrors `json:"errors,omitempty"`
	NextLink *string                                      `json:"nextLink,omitempty"`
}

type ErrorsListForGroupResponse struct {
	ContentType string
	// Get all errors for group
	ErrorsListForGroup200ApplicationJSONObject *ErrorsListForGroup200ApplicationJSON
	// Error code with reason
	ErrorsListForGroupDefaultApplicationJSONObject *ErrorsListForGroupDefaultApplicationJSON
	StatusCode                                     int
	RawResponse                                    *http.Response
}
