/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ProjectsVideos {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a specific video to a project
   *
   * @remarks
   * This method adds a single video to the specified project.
   */
  addVideoToProject(
    req: operations.AddVideoToProjectRequest,
    security: operations.AddVideoToProjectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoToProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoToProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoToProjectSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoToProjectResponse =
        new operations.AddVideoToProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a specific video to a project
   *
   * @remarks
   * This method adds a single video to the specified project.
   */
  addVideoToProjectAlt1(
    req: operations.AddVideoToProjectAlt1Request,
    security: operations.AddVideoToProjectAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoToProjectAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoToProjectAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/projects/{project_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoToProjectAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoToProjectAlt1Response =
        new operations.AddVideoToProjectAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a list of videos to a project
   *
   * @remarks
   * This method adds multiple videos to the specified project.
   */
  addVideosToProject(
    req: operations.AddVideosToProjectRequest,
    security: operations.AddVideosToProjectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideosToProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideosToProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideosToProjectSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideosToProjectResponse =
        new operations.AddVideosToProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a list of videos to a project
   *
   * @remarks
   * This method adds multiple videos to the specified project.
   */
  addVideosToProjectAlt1(
    req: operations.AddVideosToProjectAlt1Request,
    security: operations.AddVideosToProjectAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideosToProjectAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideosToProjectAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideosToProjectAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideosToProjectAlt1Response =
        new operations.AddVideosToProjectAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos in a project
   *
   * @remarks
   * This method gets all the videos that belong to the specified project.
   */
  getProjectVideos(
    req: operations.GetProjectVideosRequest,
    security: operations.GetProjectVideosSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectVideosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectVideosRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetProjectVideosSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectVideosResponse =
        new operations.GetProjectVideosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos in a project
   *
   * @remarks
   * This method gets all the videos that belong to the specified project.
   */
  getProjectVideosAlt1(
    req: operations.GetProjectVideosAlt1Request,
    security: operations.GetProjectVideosAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectVideosAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectVideosAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetProjectVideosAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectVideosAlt1Response =
        new operations.GetProjectVideosAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
        case [401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a specific video from a project
   *
   * @remarks
   * This method removes a single video from the specified project.
   */
  removeVideoFromProject(
    req: operations.RemoveVideoFromProjectRequest,
    security: operations.RemoveVideoFromProjectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveVideoFromProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveVideoFromProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveVideoFromProjectSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveVideoFromProjectResponse =
        new operations.RemoveVideoFromProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a specific video from a project
   *
   * @remarks
   * This method removes a single video from the specified project.
   */
  removeVideoFromProjectAlt1(
    req: operations.RemoveVideoFromProjectAlt1Request,
    security: operations.RemoveVideoFromProjectAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveVideoFromProjectAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveVideoFromProjectAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/projects/{project_id}/videos/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveVideoFromProjectAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveVideoFromProjectAlt1Response =
        new operations.RemoveVideoFromProjectAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a list of videos from a project
   *
   * @remarks
   * This method removed multiple videos from the specified project.
   */
  removeVideosFromProject(
    req: operations.RemoveVideosFromProjectRequest,
    security: operations.RemoveVideosFromProjectSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveVideosFromProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveVideosFromProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveVideosFromProjectSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveVideosFromProjectResponse =
        new operations.RemoveVideosFromProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a list of videos from a project
   *
   * @remarks
   * This method removed multiple videos from the specified project.
   */
  removeVideosFromProjectAlt1(
    req: operations.RemoveVideosFromProjectAlt1Request,
    security: operations.RemoveVideosFromProjectAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveVideosFromProjectAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveVideosFromProjectAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/projects/{project_id}/videos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RemoveVideosFromProjectAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveVideosFromProjectAlt1Response =
        new operations.RemoveVideosFromProjectAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
