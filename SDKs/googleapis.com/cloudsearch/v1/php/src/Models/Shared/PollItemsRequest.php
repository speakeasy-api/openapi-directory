<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class PollItemsRequest
{
    /**
     * The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
     * 
     * @var ?string $connectorName
     */
	#[\JMS\Serializer\Annotation\SerializedName('connectorName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $connectorName = null;
    
    /**
     * Shared request debug options for all cloudsearch RPC methods.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DebugOptions $debugOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('debugOptions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DebugOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DebugOptions $debugOptions = null;
    
    /**
     * Maximum number of items to return. The maximum value is 100 and the default value is 20.
     * 
     * @var ?int $limit
     */
	#[\JMS\Serializer\Annotation\SerializedName('limit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $limit = null;
    
    /**
     * Queue name to fetch items from. If unspecified, PollItems will fetch from 'default' queue. The maximum length is 100 characters.
     * 
     * @var ?string $queue
     */
	#[\JMS\Serializer\Annotation\SerializedName('queue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $queue = null;
    
    /**
     * Limit the items polled to the ones with these statuses.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\PollItemsRequestStatusCodesEnum> $statusCodes
     */
	#[\JMS\Serializer\Annotation\SerializedName('statusCodes')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\PollItemsRequestStatusCodesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $statusCodes = null;
    
	public function __construct()
	{
		$this->connectorName = null;
		$this->debugOptions = null;
		$this->limit = null;
		$this->queue = null;
		$this->statusCodes = null;
	}
}
