// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// GetTraceSummariesRequestBodySamplingStrategy - The name and value of a sampling rule to apply to a trace summary.
type GetTraceSummariesRequestBodySamplingStrategy struct {
	Name  *shared.SamplingStrategyNameEnum `json:"Name,omitempty"`
	Value *float64                         `json:"Value,omitempty"`
}

// GetTraceSummariesRequestBodyTimeRangeTypeEnum - A parameter to indicate whether to query trace summaries by TraceId or Event time.
type GetTraceSummariesRequestBodyTimeRangeTypeEnum string

const (
	GetTraceSummariesRequestBodyTimeRangeTypeEnumTraceID GetTraceSummariesRequestBodyTimeRangeTypeEnum = "TraceId"
	GetTraceSummariesRequestBodyTimeRangeTypeEnumEvent   GetTraceSummariesRequestBodyTimeRangeTypeEnum = "Event"
)

func (e *GetTraceSummariesRequestBodyTimeRangeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TraceId":
		fallthrough
	case "Event":
		*e = GetTraceSummariesRequestBodyTimeRangeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTraceSummariesRequestBodyTimeRangeTypeEnum: %s", s)
	}
}

type GetTraceSummariesRequestBody struct {
	// The end of the time frame for which to retrieve traces.
	EndTime time.Time `json:"EndTime"`
	// Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.
	FilterExpression *string `json:"FilterExpression,omitempty"`
	// Specify the pagination token returned by a previous request to retrieve the next page of results.
	NextToken *string `json:"NextToken,omitempty"`
	// Set to <code>true</code> to get summaries for only a subset of available traces.
	Sampling *bool `json:"Sampling,omitempty"`
	// The name and value of a sampling rule to apply to a trace summary.
	SamplingStrategy *GetTraceSummariesRequestBodySamplingStrategy `json:"SamplingStrategy,omitempty"`
	// The start of the time frame for which to retrieve traces.
	StartTime time.Time `json:"StartTime"`
	// A parameter to indicate whether to query trace summaries by TraceId or Event time.
	TimeRangeType *GetTraceSummariesRequestBodyTimeRangeTypeEnum `json:"TimeRangeType,omitempty"`
}

type GetTraceSummariesRequest struct {
	// Pagination token
	NextToken         *string                      `queryParam:"style=form,explode=true,name=NextToken"`
	RequestBody       GetTraceSummariesRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GetTraceSummariesResponse struct {
	ContentType string
	// Success
	GetTraceSummariesResult *shared.GetTraceSummariesResult
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottledException
	ThrottledException interface{}
}
