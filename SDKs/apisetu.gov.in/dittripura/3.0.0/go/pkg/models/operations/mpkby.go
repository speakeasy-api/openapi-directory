// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MpkbySecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MpkbyRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// MpkbyRequestBodyFormatEnum - The format of the certificate in response.
type MpkbyRequestBodyFormatEnum string

const (
	MpkbyRequestBodyFormatEnumPdf MpkbyRequestBodyFormatEnum = "pdf"
)

func (e *MpkbyRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MpkbyRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MpkbyRequestBodyFormatEnum: %s", s)
	}
}

// MpkbyRequestBody - Request format
type MpkbyRequestBody struct {
	CertificateParameters *MpkbyRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MpkbyRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mpkby504ApplicationJSONErrorEnum string

const (
	Mpkby504ApplicationJSONErrorEnumGatewayTimeout Mpkby504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Mpkby504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Mpkby504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby504ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby504ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mpkby504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Mpkby504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Mpkby504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby504ApplicationJSON - Gateway timeout
type Mpkby504ApplicationJSON struct {
	Error            *Mpkby504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby503ApplicationJSONErrorEnum string

const (
	Mpkby503ApplicationJSONErrorEnumServiceUnavailable Mpkby503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Mpkby503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Mpkby503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby503ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby503ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mpkby503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Mpkby503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Mpkby503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby503ApplicationJSON - Service unavailable
type Mpkby503ApplicationJSON struct {
	Error            *Mpkby503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby502ApplicationJSONErrorEnum string

const (
	Mpkby502ApplicationJSONErrorEnumBadGatewy Mpkby502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Mpkby502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Mpkby502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby502ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby502ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mpkby502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Mpkby502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Mpkby502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby502ApplicationJSON - Bad gateway
type Mpkby502ApplicationJSON struct {
	Error            *Mpkby502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby500ApplicationJSONErrorEnum string

const (
	Mpkby500ApplicationJSONErrorEnumInternalServerError Mpkby500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Mpkby500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Mpkby500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby500ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby500ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby500ApplicationJSONErrorDescriptionEnumInternalServerError Mpkby500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Mpkby500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Mpkby500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby500ApplicationJSON - Internal server error
type Mpkby500ApplicationJSON struct {
	Error            *Mpkby500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby404ApplicationJSONErrorEnum string

const (
	Mpkby404ApplicationJSONErrorEnumRecordNotFound Mpkby404ApplicationJSONErrorEnum = "record_not_found"
	Mpkby404ApplicationJSONErrorEnumURLNotFound    Mpkby404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Mpkby404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mpkby404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby404ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby404ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mpkby404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mpkby404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mpkby404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Mpkby404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mpkby404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby404ApplicationJSON - No record found
type Mpkby404ApplicationJSON struct {
	Error            *Mpkby404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby401ApplicationJSONErrorEnum string

const (
	Mpkby401ApplicationJSONErrorEnumInvalidAuthentication Mpkby401ApplicationJSONErrorEnum = "invalid_authentication"
	Mpkby401ApplicationJSONErrorEnumInvalidAuthorization  Mpkby401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Mpkby401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mpkby401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby401ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby401ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mpkby401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mpkby401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mpkby401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Mpkby401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mpkby401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby401ApplicationJSON - Unauthorized access
type Mpkby401ApplicationJSON struct {
	Error            *Mpkby401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mpkby400ApplicationJSONErrorEnum string

const (
	Mpkby400ApplicationJSONErrorEnumMissingParameter Mpkby400ApplicationJSONErrorEnum = "missing_parameter"
	Mpkby400ApplicationJSONErrorEnumInvalidParameter Mpkby400ApplicationJSONErrorEnum = "invalid_parameter"
	Mpkby400ApplicationJSONErrorEnumInvalidFormat    Mpkby400ApplicationJSONErrorEnum = "invalid_format"
	Mpkby400ApplicationJSONErrorEnumInvalidTxnid     Mpkby400ApplicationJSONErrorEnum = "invalid_txnid"
	Mpkby400ApplicationJSONErrorEnumInvalidConsentid Mpkby400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Mpkby400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mpkby400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby400ApplicationJSONErrorEnum: %s", s)
	}
}

type Mpkby400ApplicationJSONErrorDescriptionEnum string

const (
	Mpkby400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mpkby400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mpkby400ApplicationJSONErrorDescriptionEnumBadRequest                              Mpkby400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mpkby400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mpkby400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mpkby400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mpkby400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mpkby400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mpkby400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Mpkby400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mpkby400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mpkby400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mpkby400ApplicationJSON - Bad request
type Mpkby400ApplicationJSON struct {
	Error            *Mpkby400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mpkby400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MpkbyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mpkby400ApplicationJSONObject *Mpkby400ApplicationJSON
	// Unauthorized access
	Mpkby401ApplicationJSONObject *Mpkby401ApplicationJSON
	// No record found
	Mpkby404ApplicationJSONObject *Mpkby404ApplicationJSON
	// Internal server error
	Mpkby500ApplicationJSONObject *Mpkby500ApplicationJSON
	// Bad gateway
	Mpkby502ApplicationJSONObject *Mpkby502ApplicationJSON
	// Service unavailable
	Mpkby503ApplicationJSONObject *Mpkby503ApplicationJSON
	// Gateway timeout
	Mpkby504ApplicationJSONObject *Mpkby504ApplicationJSON
}
