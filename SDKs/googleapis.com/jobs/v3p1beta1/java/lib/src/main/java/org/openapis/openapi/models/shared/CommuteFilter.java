/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CommuteFilter - Input only. Parameters needed for commute search.
 */
public class CommuteFilter {
    /**
     * Optional. If true, jobs without "precise" addresses (street level addresses or GPS coordinates) might also be returned. For city and coarser level addresses, text matching is used. If this field is set to false or is not specified, only jobs that include precise addresses are returned by Commute Search. Note: If `allow_imprecise_addresses` is set to true, Commute Search is not able to calculate accurate commute times to jobs with city level and coarser address information. Jobs with imprecise addresses will return a `travel_duration` time of 0 regardless of distance from the job seeker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowImpreciseAddresses")
    public Boolean allowImpreciseAddresses;
    public CommuteFilter withAllowImpreciseAddresses(Boolean allowImpreciseAddresses) {
        this.allowImpreciseAddresses = allowImpreciseAddresses;
        return this;
    }
    
    /**
     * Required. The method of transportation for which to calculate the commute time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commuteMethod")
    public CommuteFilterCommuteMethodEnum commuteMethod;
    public CommuteFilter withCommuteMethod(CommuteFilterCommuteMethodEnum commuteMethod) {
        this.commuteMethod = commuteMethod;
        return this;
    }
    
    /**
     * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departureTime")
    public TimeOfDay departureTime;
    public CommuteFilter withDepartureTime(TimeOfDay departureTime) {
        this.departureTime = departureTime;
        return this;
    }
    
    /**
     * Optional. Specifies the traffic density to use when calculating commute time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roadTraffic")
    public CommuteFilterRoadTrafficEnum roadTraffic;
    public CommuteFilter withRoadTraffic(CommuteFilterRoadTrafficEnum roadTraffic) {
        this.roadTraffic = roadTraffic;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startCoordinates")
    public LatLng startCoordinates;
    public CommuteFilter withStartCoordinates(LatLng startCoordinates) {
        this.startCoordinates = startCoordinates;
        return this;
    }
    
    /**
     * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travelDuration")
    public String travelDuration;
    public CommuteFilter withTravelDuration(String travelDuration) {
        this.travelDuration = travelDuration;
        return this;
    }
    
}
