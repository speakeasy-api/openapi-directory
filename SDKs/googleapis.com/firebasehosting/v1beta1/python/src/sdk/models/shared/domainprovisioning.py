"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import certdnschallenge as shared_certdnschallenge
from ..shared import certhttpchallenge as shared_certhttpchallenge
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DomainProvisioningCertStatusEnum(str, Enum):
    r"""The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain."""
    CERT_STATUS_UNSPECIFIED = 'CERT_STATUS_UNSPECIFIED'
    CERT_PENDING = 'CERT_PENDING'
    CERT_MISSING = 'CERT_MISSING'
    CERT_PROCESSING = 'CERT_PROCESSING'
    CERT_PROPAGATING = 'CERT_PROPAGATING'
    CERT_ACTIVE = 'CERT_ACTIVE'
    CERT_ERROR = 'CERT_ERROR'

class DomainProvisioningDNSStatusEnum(str, Enum):
    r"""The DNS record match status as of the last DNS fetch."""
    DNS_STATUS_UNSPECIFIED = 'DNS_STATUS_UNSPECIFIED'
    DNS_PENDING = 'DNS_PENDING'
    DNS_MISSING = 'DNS_MISSING'
    DNS_PARTIAL_MATCH = 'DNS_PARTIAL_MATCH'
    DNS_MATCH = 'DNS_MATCH'
    DNS_EXTRANEOUS_MATCH = 'DNS_EXTRANEOUS_MATCH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DomainProvisioning:
    r"""The current certificate provisioning status information for a domain."""
    
    cert_challenge_discovered_txt: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certChallengeDiscoveredTxt'), 'exclude': lambda f: f is None }})
    r"""The TXT records (for the certificate challenge) that were found at the last DNS fetch."""  
    cert_challenge_dns: Optional[shared_certdnschallenge.CertDNSChallenge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certChallengeDns'), 'exclude': lambda f: f is None }})
    r"""Represents a DNS certificate challenge."""  
    cert_challenge_http: Optional[shared_certhttpchallenge.CertHTTPChallenge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certChallengeHttp'), 'exclude': lambda f: f is None }})
    r"""Represents an HTTP certificate challenge."""  
    cert_status: Optional[DomainProvisioningCertStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certStatus'), 'exclude': lambda f: f is None }})
    r"""The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain."""  
    discovered_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discoveredIps'), 'exclude': lambda f: f is None }})
    r"""The IPs found at the last DNS fetch."""  
    dns_fetch_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsFetchTime'), 'exclude': lambda f: f is None }})
    r"""The time at which the last DNS fetch occurred."""  
    dns_status: Optional[DomainProvisioningDNSStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsStatus'), 'exclude': lambda f: f is None }})
    r"""The DNS record match status as of the last DNS fetch."""  
    expected_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedIps'), 'exclude': lambda f: f is None }})
    r"""The list of IPs to which the domain is expected to resolve."""  
    