// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ParagraphStyleAlignmentEnum - The text alignment for this paragraph.
type ParagraphStyleAlignmentEnum string

const (
	ParagraphStyleAlignmentEnumAlignmentUnspecified ParagraphStyleAlignmentEnum = "ALIGNMENT_UNSPECIFIED"
	ParagraphStyleAlignmentEnumStart                ParagraphStyleAlignmentEnum = "START"
	ParagraphStyleAlignmentEnumCenter               ParagraphStyleAlignmentEnum = "CENTER"
	ParagraphStyleAlignmentEnumEnd                  ParagraphStyleAlignmentEnum = "END"
	ParagraphStyleAlignmentEnumJustified            ParagraphStyleAlignmentEnum = "JUSTIFIED"
)

func (e ParagraphStyleAlignmentEnum) ToPointer() *ParagraphStyleAlignmentEnum {
	return &e
}

func (e *ParagraphStyleAlignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALIGNMENT_UNSPECIFIED":
		fallthrough
	case "START":
		fallthrough
	case "CENTER":
		fallthrough
	case "END":
		fallthrough
	case "JUSTIFIED":
		*e = ParagraphStyleAlignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParagraphStyleAlignmentEnum: %v", v)
	}
}

// ParagraphStyleDirectionEnum - The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
type ParagraphStyleDirectionEnum string

const (
	ParagraphStyleDirectionEnumTextDirectionUnspecified ParagraphStyleDirectionEnum = "TEXT_DIRECTION_UNSPECIFIED"
	ParagraphStyleDirectionEnumLeftToRight              ParagraphStyleDirectionEnum = "LEFT_TO_RIGHT"
	ParagraphStyleDirectionEnumRightToLeft              ParagraphStyleDirectionEnum = "RIGHT_TO_LEFT"
)

func (e ParagraphStyleDirectionEnum) ToPointer() *ParagraphStyleDirectionEnum {
	return &e
}

func (e *ParagraphStyleDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT_DIRECTION_UNSPECIFIED":
		fallthrough
	case "LEFT_TO_RIGHT":
		fallthrough
	case "RIGHT_TO_LEFT":
		*e = ParagraphStyleDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParagraphStyleDirectionEnum: %v", v)
	}
}

// ParagraphStyleSpacingModeEnum - The spacing mode for the paragraph.
type ParagraphStyleSpacingModeEnum string

const (
	ParagraphStyleSpacingModeEnumSpacingModeUnspecified ParagraphStyleSpacingModeEnum = "SPACING_MODE_UNSPECIFIED"
	ParagraphStyleSpacingModeEnumNeverCollapse          ParagraphStyleSpacingModeEnum = "NEVER_COLLAPSE"
	ParagraphStyleSpacingModeEnumCollapseLists          ParagraphStyleSpacingModeEnum = "COLLAPSE_LISTS"
)

func (e ParagraphStyleSpacingModeEnum) ToPointer() *ParagraphStyleSpacingModeEnum {
	return &e
}

func (e *ParagraphStyleSpacingModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SPACING_MODE_UNSPECIFIED":
		fallthrough
	case "NEVER_COLLAPSE":
		fallthrough
	case "COLLAPSE_LISTS":
		*e = ParagraphStyleSpacingModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParagraphStyleSpacingModeEnum: %v", v)
	}
}

// ParagraphStyle - Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
type ParagraphStyle struct {
	// The text alignment for this paragraph.
	Alignment *ParagraphStyleAlignmentEnum `json:"alignment,omitempty"`
	// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.
	Direction *ParagraphStyleDirectionEnum `json:"direction,omitempty"`
	// A magnitude in a single direction in the specified units.
	IndentEnd *Dimension `json:"indentEnd,omitempty"`
	// A magnitude in a single direction in the specified units.
	IndentFirstLine *Dimension `json:"indentFirstLine,omitempty"`
	// A magnitude in a single direction in the specified units.
	IndentStart *Dimension `json:"indentStart,omitempty"`
	// The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
	LineSpacing *float32 `json:"lineSpacing,omitempty"`
	// A magnitude in a single direction in the specified units.
	SpaceAbove *Dimension `json:"spaceAbove,omitempty"`
	// A magnitude in a single direction in the specified units.
	SpaceBelow *Dimension `json:"spaceBelow,omitempty"`
	// The spacing mode for the paragraph.
	SpacingMode *ParagraphStyleSpacingModeEnum `json:"spacingMode,omitempty"`
}
