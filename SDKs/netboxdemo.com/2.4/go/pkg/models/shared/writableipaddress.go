// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WritableIPAddressRoleEnum - The functional role of this IP
type WritableIPAddressRoleEnum string

const (
	WritableIPAddressRoleEnumTen        WritableIPAddressRoleEnum = "10"
	WritableIPAddressRoleEnumTwenty     WritableIPAddressRoleEnum = "20"
	WritableIPAddressRoleEnumThirty     WritableIPAddressRoleEnum = "30"
	WritableIPAddressRoleEnumForty      WritableIPAddressRoleEnum = "40"
	WritableIPAddressRoleEnumFortyOne   WritableIPAddressRoleEnum = "41"
	WritableIPAddressRoleEnumFortyTwo   WritableIPAddressRoleEnum = "42"
	WritableIPAddressRoleEnumFortyThree WritableIPAddressRoleEnum = "43"
	WritableIPAddressRoleEnumFortyFour  WritableIPAddressRoleEnum = "44"
)

func (e *WritableIPAddressRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10":
		fallthrough
	case "20":
		fallthrough
	case "30":
		fallthrough
	case "40":
		fallthrough
	case "41":
		fallthrough
	case "42":
		fallthrough
	case "43":
		fallthrough
	case "44":
		*e = WritableIPAddressRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableIPAddressRoleEnum: %s", s)
	}
}

// WritableIPAddressStatusEnum - The operational status of this IP
type WritableIPAddressStatusEnum string

const (
	WritableIPAddressStatusEnumOne   WritableIPAddressStatusEnum = "1"
	WritableIPAddressStatusEnumTwo   WritableIPAddressStatusEnum = "2"
	WritableIPAddressStatusEnumThree WritableIPAddressStatusEnum = "3"
	WritableIPAddressStatusEnumFive  WritableIPAddressStatusEnum = "5"
)

func (e *WritableIPAddressStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "5":
		*e = WritableIPAddressStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableIPAddressStatusEnum: %s", s)
	}
}

type WritableIPAddressInput struct {
	// IPv4 or IPv6 address (with mask)
	Address      string                 `json:"address"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	Interface    *int64                 `json:"interface,omitempty"`
	// The IP for which this address is the "outside" IP
	NatInside  *int64 `json:"nat_inside,omitempty"`
	NatOutside int64  `json:"nat_outside"`
	// The functional role of this IP
	Role *WritableIPAddressRoleEnum `json:"role,omitempty"`
	// The operational status of this IP
	Status *WritableIPAddressStatusEnum `json:"status,omitempty"`
	Tags   []string                     `json:"tags,omitempty"`
	Tenant *int64                       `json:"tenant,omitempty"`
	Vrf    *int64                       `json:"vrf,omitempty"`
}
