"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DeviceChargingStationStateEnum(str, Enum):
    r"""The state of a pico charging station. (Only available for pico charging stations)"""
    BOOTING = 'Booting'
    READY_NO_CAR_CONNECTED = 'ReadyNoCarConnected'
    READY_CAR_CONNECTED = 'ReadyCarConnected'
    STARTED_WAIT_FOR_CAR = 'StartedWaitForCar'
    CHARGING = 'Charging'
    INSTALLATION = 'Installation'
    AUTHORIZE = 'Authorize'
    OFFLINE = 'Offline'

class DeviceDeviceEnergyTypeEnum(str, Enum):
    r"""The Energy Type of this device"""
    METER_TYPE_UNKNOWN = 'MeterTypeUnknown'
    METER_TYPE_ELECTRICITY = 'MeterTypeElectricity'
    METER_TYPE_WATER = 'MeterTypeWater'
    METER_TYPE_GAS = 'MeterTypeGas'
    METER_TYPE_HEAT = 'MeterTypeHeat'
    METER_TYPE_HCA = 'MeterTypeHCA'
    METER_TYPE_ALL_METERS = 'MeterTypeAllMeters'
    METER_TYPE_TEMPERATURE = 'MeterTypeTemperature'
    METER_TYPE_M_BUS_GATEWAY = 'MeterTypeMBusGateway'
    METER_TYPE_RS485_GATEWAY = 'MeterTypeRS485Gateway'
    METER_TYPE_CUSTOM_DEVICE = 'MeterTypeCustomDevice'
    METER_TYPE_COMPRESSED_AIR = 'MeterTypeCompressedAir'
    METER_TYPE_SOLAR_LOG = 'MeterTypeSolarLog'
    METER_TYPE_VIRTUAL_METER = 'MeterTypeVirtualMeter'
    METER_TYPE_WM_BUS_GATEWAY = 'MeterTypeWMBusGateway'

class DeviceFamilyTypeEnum(str, Enum):
    r"""The Family Type of the device."""
    METER_FAMILY_TYPE_UNKNOWN = 'MeterFamilyTypeUnknown'
    METER_FAMILY_TYPE_SMART_ME_CONNECT_V1 = 'MeterFamilyTypeSmartMeConnectV1'
    METER_FAMILIY_TYPE_SMART_ME_METER = 'MeterFamiliyTypeSmartMeMeter'
    METER_FAMILIY_TYPE_SMART_ME_METER_WITH_SWITCH = 'MeterFamiliyTypeSmartMeMeterWithSwitch'
    METER_FAMILY_TYPE_M_BUS_GATEWAY_V1 = 'MeterFamilyTypeMBusGatewayV1'
    METER_FAMILY_TYPE_RS485_GATEWAY_V1 = 'MeterFamilyTypeRS485GatewayV1'
    METER_FAMILY_TYPE_KAMSTRUP_MODULE = 'MeterFamilyTypeKamstrupModule'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_METER80_A = 'MeterFamilyTypeSmartMe3PhaseMeter80A'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_METER32_A = 'MeterFamilyTypeSmartMe3PhaseMeter32A'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR_TRANSFORMER = 'MeterFamilyTypeSmartMe3PhaseTelstarTransformer'
    METER_FAMILY_TYPE_LANDIS_GYR_MODULE = 'MeterFamilyTypeLandisGyrModule'
    METER_FAMILY_TYPE_FNN_OPTICAL_MODULE = 'MeterFamilyTypeFnnOpticalModule'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR80_A_WI_FI = 'MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR80_A_MOBILE = 'MeterFamilyTypeSmartMe3PhaseTelstar80AMobile'
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER80_AV2_WI_FI = 'MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi'
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER32_AV2_WI_FI = 'MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi'
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER80_A_GPRS = 'MeterFamilyTypeSmartMe1PhaseMeter80AGprs'
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER32_A_GPRS = 'MeterFamilyTypeSmartMe1PhaseMeter32AGprs'
    METER_FAMILY_TYPE_WM_BUS_GATEWAY_V1 = 'MeterFamilyTypeWMBusGatewayV1'
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR_TRANSFORMER_MOBILE = 'MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile'
    METER_FAMILY_TYPE_MITHRAL_HALL_V1 = 'MeterFamilyTypeMithralHallV1'
    METER_FAMILY_TYPE_REST_API_METER = 'MeterFamilyTypeRestApiMeter'
    METER_FAMILY_TYPE_VIRTUAL_BILLING_METER = 'MeterFamilyTypeVirtualBillingMeter'

class DeviceMeterSubTypeEnum(str, Enum):
    r"""The sub meter type (e.g. warmwater or coldwater)"""
    METER_SUB_TYPE_UNKNOWN = 'MeterSubTypeUnknown'
    METER_SUB_TYPE_COLD = 'MeterSubTypeCold'
    METER_SUB_TYPE_HEAT = 'MeterSubTypeHeat'
    METER_SUB_TYPE_CHARGING_STATION = 'MeterSubTypeChargingStation'
    METER_SUB_TYPE_ELECTRICITY = 'MeterSubTypeElectricity'
    METER_SUB_TYPE_WATER = 'MeterSubTypeWater'
    METER_SUB_TYPE_GAS = 'MeterSubTypeGas'
    METER_SUB_TYPE_ELECTRICITY_HEAT = 'MeterSubTypeElectricityHeat'
    METER_SUB_TYPE_TEMPERATURE = 'MeterSubTypeTemperature'
    METER_SUB_TYPE_VIRTUAL_BATTERY = 'MeterSubTypeVirtualBattery'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Device:
    r"""Container Class for the Web API"""
    
    active_power: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePower'), 'exclude': lambda f: f is None }})
    r"""The Actvie Power or current flow rate"""  
    active_power_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePowerL1'), 'exclude': lambda f: f is None }})
    r"""The Actvie Power Phase L1"""  
    active_power_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePowerL2'), 'exclude': lambda f: f is None }})
    r"""The Actvie Power Phase L2"""  
    active_power_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePowerL3'), 'exclude': lambda f: f is None }})
    r"""The Actvie Power Phase L3"""  
    active_power_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivePowerUnit'), 'exclude': lambda f: f is None }})
    r"""The Unit of the Active Power Value"""  
    active_tariff: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveTariff'), 'exclude': lambda f: f is None }})
    r"""The Number of the Active Tariff"""  
    additional_meter_serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalMeterSerialNumber'), 'exclude': lambda f: f is None }})
    r"""An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to."""  
    analog_output1: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnalogOutput1'), 'exclude': lambda f: f is None }})
    r"""The analog output number 1 (PWM signal) (0 - 32183)"""  
    analog_output2: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnalogOutput2'), 'exclude': lambda f: f is None }})
    r"""The analog output number 2 (PWM signal) (0 - 32183)"""  
    charging_station_state: Optional[DeviceChargingStationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChargingStationState'), 'exclude': lambda f: f is None }})
    r"""The state of a pico charging station. (Only available for pico charging stations)"""  
    counter_reading: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReading'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading (Total Energy used)"""  
    counter_reading_export: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingExport'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading only export"""  
    counter_reading_import: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingImport'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading only import"""  
    counter_reading_t1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT1'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading Tariff 1"""  
    counter_reading_t2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT2'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading Tariff 2"""  
    counter_reading_t3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT3'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading Tariff 3"""  
    counter_reading_t4: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingT4'), 'exclude': lambda f: f is None }})
    r"""The Meter Counter Reading Tariff 4"""  
    counter_reading_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CounterReadingUnit'), 'exclude': lambda f: f is None }})
    r"""The Unit of the Counter Reading"""  
    current: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Current'), 'exclude': lambda f: f is None }})
    r"""The Current (in A)"""  
    current_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL1'), 'exclude': lambda f: f is None }})
    r"""The Current Phase L1 (in A)"""  
    current_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL2'), 'exclude': lambda f: f is None }})
    r"""The Current Phase L2 (in A)"""  
    current_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentL3'), 'exclude': lambda f: f is None }})
    r"""The Current Phase L3 (in A)"""  
    device_energy_type: Optional[DeviceDeviceEnergyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceEnergyType'), 'exclude': lambda f: f is None }})
    r"""The Energy Type of this device"""  
    digital_input1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalInput1'), 'exclude': lambda f: f is None }})
    r"""The digital input number 1"""  
    digital_input2: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalInput2'), 'exclude': lambda f: f is None }})
    r"""The digital input number 2"""  
    digital_output1: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalOutput1'), 'exclude': lambda f: f is None }})
    r"""The digital output number 1"""  
    digital_output2: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DigitalOutput2'), 'exclude': lambda f: f is None }})
    r"""The digital output number 2"""  
    family_type: Optional[DeviceFamilyTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FamilyType'), 'exclude': lambda f: f is None }})
    r"""The Family Type of the device."""  
    flow_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlowRate'), 'exclude': lambda f: f is None }})
    r"""The current flow rate (e.g. m3/h)"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""The ID of the device"""  
    meter_sub_type: Optional[DeviceMeterSubTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeterSubType'), 'exclude': lambda f: f is None }})
    r"""The sub meter type (e.g. warmwater or coldwater)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The Name of the Device"""  
    power_factor: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactor'), 'exclude': lambda f: f is None }})
    r"""The Power Factor (cos phi). Range: 0 - 1"""  
    power_factor_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL1'), 'exclude': lambda f: f is None }})
    r"""The Power Factor (cos phi) Phase L1. Range: 0 - 1"""  
    power_factor_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL2'), 'exclude': lambda f: f is None }})
    r"""The Power Factor (cos phi) Phase L2. Range: 0 - 1"""  
    power_factor_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PowerFactorL3'), 'exclude': lambda f: f is None }})
    r"""The Power Factor (cos phi) Phase L3. Range: 0 - 1"""  
    serial: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Serial'), 'exclude': lambda f: f is None }})
    r"""The Serial number"""  
    switch_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SwitchOn'), 'exclude': lambda f: f is None }})
    r"""Flag if the Switch is on on this device."""  
    switch_phase_l1_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SwitchPhaseL1On'), 'exclude': lambda f: f is None }})
    r"""Flag if the Phase L1 is on on this device."""  
    switch_phase_l2_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SwitchPhaseL2On'), 'exclude': lambda f: f is None }})
    r"""Flag if the Phase L2 is on on this device."""  
    switch_phase_l3_on: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SwitchPhaseL3On'), 'exclude': lambda f: f is None }})
    r"""Flag if the Phase L3 is on on this device."""  
    temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Temperature'), 'exclude': lambda f: f is None }})
    r"""The Temperature (in degree celsius)"""  
    value_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValueDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time of last successful connection the the smart-me Cloud."""  
    voltage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Voltage'), 'exclude': lambda f: f is None }})
    r"""The Voltage (in V)"""  
    voltage_l1: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL1'), 'exclude': lambda f: f is None }})
    r"""The Voltage Phase L1 (in V)"""  
    voltage_l2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL2'), 'exclude': lambda f: f is None }})
    r"""The Voltage Phase L2 (in V)"""  
    voltage_l3: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VoltageL3'), 'exclude': lambda f: f is None }})
    r"""The Voltage Phase L3 (in V)"""  
    