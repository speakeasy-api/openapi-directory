/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LikesEssentials {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Check if a user has liked a video
   */
  checkIfUserLikedVideo(
    req: operations.CheckIfUserLikedVideoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckIfUserLikedVideoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckIfUserLikedVideoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/likes/{video_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckIfUserLikedVideoResponse =
        new operations.CheckIfUserLikedVideoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check if a user has liked a video
   */
  checkIfUserLikedVideoAlt1(
    req: operations.CheckIfUserLikedVideoAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckIfUserLikedVideoAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckIfUserLikedVideoAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/me/likes/{video_id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckIfUserLikedVideoAlt1Response =
        new operations.CheckIfUserLikedVideoAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos that a user has liked
   */
  getLikes(
    req: operations.GetLikesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLikesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLikesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/likes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLikesResponse = new operations.GetLikesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos that a user has liked
   */
  getLikesAlt1(
    req: operations.GetLikesAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLikesAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLikesAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/likes";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLikesAlt1Response =
        new operations.GetLikesAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the users who have liked a video
   */
  getVideoLikes(
    req: operations.GetVideoLikesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoLikesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoLikesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/likes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoLikesResponse =
        new operations.GetVideoLikesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the users who have liked a video
   */
  getVideoLikesAlt1(
    req: operations.GetVideoLikesAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoLikesAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoLikesAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}/likes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoLikesAlt1Response =
        new operations.GetVideoLikesAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the users who have liked a video on an On Demand page
   *
   * @remarks
   * This method gets all the users who have liked a particular video on an On Demand page.
   */
  getVodLikes(
    req: operations.GetVodLikesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodLikesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodLikesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/likes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodLikesResponse =
        new operations.GetVodLikesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.user+json`
            )
          ) {
            res.users = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.users = utils.objectToClass(
              httpRes?.data,
              shared.User,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cause a user to like a video
   */
  likeVideo(
    req: operations.LikeVideoRequest,
    security: operations.LikeVideoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LikeVideoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LikeVideoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/likes/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LikeVideoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LikeVideoResponse =
        new operations.LikeVideoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cause a user to like a video
   */
  likeVideoAlt1(
    req: operations.LikeVideoAlt1Request,
    security: operations.LikeVideoAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.LikeVideoAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LikeVideoAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/me/likes/{video_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LikeVideoAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LikeVideoAlt1Response =
        new operations.LikeVideoAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cause a user to unlike a video
   */
  unlikeVideo(
    req: operations.UnlikeVideoRequest,
    security: operations.UnlikeVideoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnlikeVideoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnlikeVideoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/likes/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnlikeVideoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnlikeVideoResponse =
        new operations.UnlikeVideoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cause a user to unlike a video
   */
  unlikeVideoAlt1(
    req: operations.UnlikeVideoAlt1Request,
    security: operations.UnlikeVideoAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.UnlikeVideoAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnlikeVideoAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/me/likes/{video_id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnlikeVideoAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnlikeVideoAlt1Response =
        new operations.UnlikeVideoAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
