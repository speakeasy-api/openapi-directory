/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class GetNetworkAppliancePortRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=portId",
  })
  portId: string;
}

/**
 * Successful operation
 */
export class GetNetworkAppliancePort200ApplicationJSON extends SpeakeasyBase {
  /**
   * The name of the policy. Only applicable to Access ports.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessPolicy" })
  accessPolicy?: string;

  /**
   * Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowedVlans" })
  allowedVlans?: string;

  /**
   * Whether the trunk port can drop all untagged traffic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dropUntaggedTraffic" })
  dropUntaggedTraffic?: boolean;

  /**
   * The status of the port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Number of the port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number?: number;

  /**
   * The type of the port: 'access' or 'trunk'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;
}

export class GetNetworkAppliancePortResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getNetworkAppliancePort200ApplicationJSONObject?: GetNetworkAppliancePort200ApplicationJSON;
}
