/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ServiceResolver, ServiceResolverInput } from "./serviceresolver";
import { Expose, Type } from "class-transformer";

/**
 * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
 */
export enum EkmConnectionKeyManagementModeEnum {
  KeyManagementModeUnspecified = "KEY_MANAGEMENT_MODE_UNSPECIFIED",
  Manual = "MANUAL",
  CloudKms = "CLOUD_KMS",
}

/**
 * An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 */
export class EkmConnection extends SpeakeasyBase {
  /**
   * Output only. The time at which the EkmConnection was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cryptoSpacePath" })
  cryptoSpacePath?: string;

  /**
   * Optional. Etag of the currently stored EkmConnection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyManagementMode" })
  keyManagementMode?: EkmConnectionKeyManagementModeEnum;

  /**
   * Output only. The resource name for the EkmConnection in the format `projects/* /locations/* /ekmConnections/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
   */
  @SpeakeasyMetadata({ elemType: ServiceResolver })
  @Expose({ name: "serviceResolvers" })
  @Type(() => ServiceResolver)
  serviceResolvers?: ServiceResolver[];
}

/**
 * An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 */
export class EkmConnectionInput extends SpeakeasyBase {
  /**
   * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cryptoSpacePath" })
  cryptoSpacePath?: string;

  /**
   * Optional. Etag of the currently stored EkmConnection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyManagementMode" })
  keyManagementMode?: EkmConnectionKeyManagementModeEnum;

  /**
   * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
   */
  @SpeakeasyMetadata({ elemType: ServiceResolverInput })
  @Expose({ name: "serviceResolvers" })
  @Type(() => ServiceResolverInput)
  serviceResolvers?: ServiceResolverInput[];
}
