/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * SubscribeRequestAccount - Container for custom fields of an Account object.
 * 
 */
public class SubscribeRequestAccount {
    /**
     * Unique account number assigned to the account.
     * 
     * **Character limit**: 50
     * 
     * 
     * **Values**: one of the following:
     * 
     * - null to auto-generate
     * - a string of 50 characters or fewer that doesn't begin with the default account number prefix
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountNumber")
    public String accountNumber;
    public SubscribeRequestAccount withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * List of additional email addresses to receive emailed invoices.
     * 
     * **Character limit**: 120
     * 
     * 
     * **Values**: comma-separated list of email addresses 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalEmailAddresses")
    public String additionalEmailAddresses;
    public SubscribeRequestAccount withAdditionalEmailAddresses(String additionalEmailAddresses) {
        this.additionalEmailAddresses = additionalEmailAddresses;
        return this;
    }
    
    /**
     *  Indicates if associated invoices can be edited.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: `true`, `false` (default if left null) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllowInvoiceEdit")
    public Boolean allowInvoiceEdit;
    public SubscribeRequestAccount withAllowInvoiceEdit(Boolean allowInvoiceEdit) {
        this.allowInvoiceEdit = allowInvoiceEdit;
        return this;
    }
    
    /**
     *  Indicates if future payments are automatically collected when they're due during a Payment Run.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: `true`, `false` (default) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoPay")
    public Boolean autoPay;
    public SubscribeRequestAccount withAutoPay(Boolean autoPay) {
        this.autoPay = autoPay;
        return this;
    }
    
    /**
     *  Organizes your customer accounts into groups to optimize your billing and payment operations.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**:any system-defined batch (`Batch1` - `Batch50 `or by name). 
     */
    @JsonProperty("Batch")
    public String batch;
    public SubscribeRequestAccount withBatch(String batch) {
        this.batch = batch;
        return this;
    }
    
    /**
     * Billing cycle day setting option.
     * 
     * **Character limit**: 9
     * 
     * 
     * **Values**: `AutoSet`, `ManualSet` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BcdSettingOption")
    public String bcdSettingOption;
    public SubscribeRequestAccount withBcdSettingOption(String bcdSettingOption) {
        this.bcdSettingOption = bcdSettingOption;
        return this;
    }
    
    /**
     * Billing cycle day (BCD) on which bill runs generate invoices for the account.
     * 
     * **Character limit**: 2
     * 
     * 
     * **Values**: any activated system-defined bill cycle day (`1` - `31`) 
     */
    @JsonProperty("BillCycleDay")
    public Integer billCycleDay;
    public SubscribeRequestAccount withBillCycleDay(Integer billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     * Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Class__NS")
    public String classNS;
    public SubscribeRequestAccount withClassNS(String classNS) {
        this.classNS = classNS;
        return this;
    }
    
    /**
     * Associates the account with a specified communication profile.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a valid communication profile ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CommunicationProfileId")
    public String communicationProfileId;
    public SubscribeRequestAccount withCommunicationProfileId(String communicationProfileId) {
        this.communicationProfileId = communicationProfileId;
        return this;
    }
    
    /**
     * CRM account ID for the account. A CRM is a customer relationship management system, such as Salesforce.com.
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CrmId")
    public String crmId;
    public SubscribeRequestAccount withCrmId(String crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     *  Currency that the customer is billed in. See [a currency value defined in the Zuora Ui admin settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Customize_Currencies) 
     */
    @JsonProperty("Currency")
    public String currency;
    public SubscribeRequestAccount withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Name of the account's customer service representative, if applicable.
     * 
     * **Character limit**: 50
     * 
     * 
     * **Values**: a string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomerServiceRepName")
    public String customerServiceRepName;
    public SubscribeRequestAccount withCustomerServiceRepName(String customerServiceRepName) {
        this.customerServiceRepName = customerServiceRepName;
        return this;
    }
    
    /**
     * Value of the Customer Type field for the corresponding customer account in NetSuite. The Customer Type field is used when the customer account is created in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomerType__NS")
    public SubscribeRequestAccountCustomerTypeNSEnum customerTypeNS;
    public SubscribeRequestAccount withCustomerTypeNS(SubscribeRequestAccountCustomerTypeNSEnum customerTypeNS) {
        this.customerTypeNS = customerTypeNS;
        return this;
    }
    
    /**
     * ID of the default payment method for the account. This field is only required if the `AutoPay` field is set to `true`.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: A valid ID for an existing payment method. This field does not support external payment methods. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DefaultPaymentMethodId")
    public String defaultPaymentMethodId;
    public SubscribeRequestAccount withDefaultPaymentMethodId(String defaultPaymentMethodId) {
        this.defaultPaymentMethodId = defaultPaymentMethodId;
        return this;
    }
    
    /**
     * Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Department__NS")
    public String departmentNS;
    public SubscribeRequestAccount withDepartmentNS(String departmentNS) {
        this.departmentNS = departmentNS;
        return this;
    }
    
    /**
     * Internal identifier of an existing account. Only set this field if you want to assign the subscription to an existing account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public SubscribeRequestAccount withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public SubscribeRequestAccount withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public SubscribeRequestAccount withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Indicates if the customer wants to receive invoices through email.
     * **Character limit**: 5
     * 
     * 
     * **Values**: `true`, `false` (default if left null) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceDeliveryPrefsEmail")
    public Boolean invoiceDeliveryPrefsEmail;
    public SubscribeRequestAccount withInvoiceDeliveryPrefsEmail(Boolean invoiceDeliveryPrefsEmail) {
        this.invoiceDeliveryPrefsEmail = invoiceDeliveryPrefsEmail;
        return this;
    }
    
    /**
     * Indicates if the customer wants to receive printed invoices, such as through postal mail.
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: `true`, `false` (default if left null) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceDeliveryPrefsPrint")
    public Boolean invoiceDeliveryPrefsPrint;
    public SubscribeRequestAccount withInvoiceDeliveryPrefsPrint(Boolean invoiceDeliveryPrefsPrint) {
        this.invoiceDeliveryPrefsPrint = invoiceDeliveryPrefsPrint;
        return this;
    }
    
    /**
     * The ID of the invoice template. Each customer account can use a specific invoice template for invoice generation.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a[ valid template ID configured in Z-Billing Settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Manage_Invoice_Rules_and_Templates) To find the ID of your current invoice template: In Zuora, navigate to **Settings &gt; Z-Billing &gt; Manage Invoice Rules and Templates** and click **Show Id **next to the template you want to use.
     * 
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceTemplateId")
    public String invoiceTemplateId;
    public SubscribeRequestAccount withInvoiceTemplateId(String invoiceTemplateId) {
        this.invoiceTemplateId = invoiceTemplateId;
        return this;
    }
    
    /**
     *  The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("LastInvoiceDate")
    public LocalDate lastInvoiceDate;
    public SubscribeRequestAccount withLastInvoiceDate(LocalDate lastInvoiceDate) {
        this.lastInvoiceDate = lastInvoiceDate;
        return this;
    }
    
    /**
     * Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location__NS")
    public String locationNS;
    public SubscribeRequestAccount withLocationNS(String locationNS) {
        this.locationNS = locationNS;
        return this;
    }
    
    /**
     * Name of the account as displayed in the Zuora UI.
     * 
     * **Character limit**: 255
     * 
     * 
     * **Values**: a string of 255 characters or fewer 
     */
    @JsonProperty("Name")
    public String name;
    public SubscribeRequestAccount withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  Comments about the account.
     * 
     * **Character limit**: 65,535
     * 
     * 
     * **Values**: a string of 65,535 characters 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Notes")
    public String notes;
    public SubscribeRequestAccount withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Identifier of the parent customer account for this Account object. Use this field if you have customer hierarchy enabled.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a valid account ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ParentId")
    public String parentId;
    public SubscribeRequestAccount withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Gateway used for processing electronic payments and refunds. This field is only required if there is no default payment gateway is defined in the tenant.
     * 
     * **Character limit**: 40
     * 
     * 
     * **Values**: one of the following:
     * 
     * - a valid configured gateway name
     * - Null to inherit the default value set in Z-Payment Settings
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentGateway")
    public String paymentGateway;
    public SubscribeRequestAccount withPaymentGateway(String paymentGateway) {
        this.paymentGateway = paymentGateway;
        return this;
    }
    
    /**
     * Indicates when the customer pays for subscriptions.
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: [a valid, active payment term defined in the web-based UI administrative settings](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Payment_Terms) 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentTerm")
    public String paymentTerm;
    public SubscribeRequestAccount withPaymentTerm(String paymentTerm) {
        this.paymentTerm = paymentTerm;
        return this;
    }
    
    /**
     * The number of the purchase order associated with this account. Purchase order information generally comes from customers.
     * 
     * **Character limit**: 100
     * 
     * 
     * **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PurchaseOrderNumber")
    public String purchaseOrderNumber;
    public SubscribeRequestAccount withPurchaseOrderNumber(String purchaseOrderNumber) {
        this.purchaseOrderNumber = purchaseOrderNumber;
        return this;
    }
    
    /**
     * The name of the sales representative associated with this account, if applicable.
     * 
     * **Character limit**: 50
     * 
     * 
     * **Values**: a string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SalesRepName")
    public String salesRepName;
    public SubscribeRequestAccount withSalesRepName(String salesRepName) {
        this.salesRepName = salesRepName;
        return this;
    }
    
    /**
     * Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Subsidiary__NS")
    public String subsidiaryNS;
    public SubscribeRequestAccount withSubsidiaryNS(String subsidiaryNS) {
        this.subsidiaryNS = subsidiaryNS;
        return this;
    }
    
    /**
     * Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public SubscribeRequestAccount withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the account should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public SubscribeRequestAccountSynctoNetSuiteNSEnum synctoNetSuiteNS;
    public SubscribeRequestAccount withSynctoNetSuiteNS(SubscribeRequestAccountSynctoNetSuiteNSEnum synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     *  Unique code that identifies a company account in Avalara. Use this field to calculate taxes based on origin and sold-to addresses in Avalara.
     * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * 
     * 
     * **Character limit**: 50
     * 
     * 
     * **Values**: a valid company code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxCompanyCode")
    public String taxCompanyCode;
    public SubscribeRequestAccount withTaxCompanyCode(String taxCompanyCode) {
        this.taxCompanyCode = taxCompanyCode;
        return this;
    }
    
    /**
     * ID of your customer's tax exemption certificate.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a string of 32 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptCertificateID")
    public String taxExemptCertificateID;
    public SubscribeRequestAccount withTaxExemptCertificateID(String taxExemptCertificateID) {
        this.taxExemptCertificateID = taxExemptCertificateID;
        return this;
    }
    
    /**
     * Type of the tax exemption certificate that your customer holds.
     * **Character limit**: 32
     * 
     * 
     * **Values**: a string of 32 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptCertificateType")
    public String taxExemptCertificateType;
    public SubscribeRequestAccount withTaxExemptCertificateType(String taxExemptCertificateType) {
        this.taxExemptCertificateType = taxExemptCertificateType;
        return this;
    }
    
    /**
     * Description of the tax exemption certificate that your customer holds.
     * 
     * **Character limit**: 500
     * 
     * 
     * **Values**: a string of 500 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptDescription")
    public String taxExemptDescription;
    public SubscribeRequestAccount withTaxExemptDescription(String taxExemptDescription) {
        this.taxExemptDescription = taxExemptDescription;
        return this;
    }
    
    /**
     * Date when the the customer's tax exemption starts.
     * 
     * **Character limit**: 29 **Version notes**: requires Z-Tax 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TaxExemptEffectiveDate")
    public LocalDate taxExemptEffectiveDate;
    public SubscribeRequestAccount withTaxExemptEffectiveDate(LocalDate taxExemptEffectiveDate) {
        this.taxExemptEffectiveDate = taxExemptEffectiveDate;
        return this;
    }
    
    /**
     * Date when the customer's tax exemption certificate expires
     * **Character limit**: 29 **Version notes**: requires Z-Tax 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TaxExemptExpirationDate")
    public LocalDate taxExemptExpirationDate;
    public SubscribeRequestAccount withTaxExemptExpirationDate(LocalDate taxExemptExpirationDate) {
        this.taxExemptExpirationDate = taxExemptExpirationDate;
        return this;
    }
    
    /**
     * Indicates the jurisdiction in which the customer's tax exemption certificate was issued.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a string of 32 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptIssuingJurisdiction")
    public String taxExemptIssuingJurisdiction;
    public SubscribeRequestAccount withTaxExemptIssuingJurisdiction(String taxExemptIssuingJurisdiction) {
        this.taxExemptIssuingJurisdiction = taxExemptIssuingJurisdiction;
        return this;
    }
    
    /**
     *  Status of the account's tax exemption. This field is only required if you use Zuora Tax. This field is not available if you do not use Zuora Tax.
     * 
     * 
     * **Character limit**: 19
     * 
     * 
     * **Values**: one of the following:
     * 
     * - `Yes`
     * - `No`
     * - `PendingVerification`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptStatus")
    public String taxExemptStatus;
    public SubscribeRequestAccount withTaxExemptStatus(String taxExemptStatus) {
        this.taxExemptStatus = taxExemptStatus;
        return this;
    }
    
    /**
     * Total balance of the account's invoices.
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a valid currency value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalInvoiceBalance")
    public Double totalInvoiceBalance;
    public SubscribeRequestAccount withTotalInvoiceBalance(Double totalInvoiceBalance) {
        this.totalInvoiceBalance = totalInvoiceBalance;
        return this;
    }
    
    /**
     *  EU Value Added Tax ID.
     * This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * 
     * 
     * **Character limit**: 25
     * 
     * 
     * **Values**: a valid Value Added Tax ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VATId")
    public String vatId;
    public SubscribeRequestAccount withVATId(String vatId) {
        this.vatId = vatId;
        return this;
    }
    
}
