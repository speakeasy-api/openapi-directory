"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import import_ as shared_import_
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MigrationsSetLfsPreferenceRequestBodyUseLfsEnum(str, Enum):
    r"""Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import."""
    OPT_IN = 'opt_in'
    OPT_OUT = 'opt_out'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MigrationsSetLfsPreferenceRequestBody:
    
    use_lfs: MigrationsSetLfsPreferenceRequestBodyUseLfsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_lfs') }})
    r"""Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import."""  
    

@dataclasses.dataclass
class MigrationsSetLfsPreferenceRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: MigrationsSetLfsPreferenceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class MigrationsSetLfsPreferenceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Unavailable due to service under maintenance."""  
    import_: Optional[shared_import_.Import] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    