/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DataLocationConstraintEnum } from "./datalocationconstraintenum";
import { EstimatedCostTierEnum } from "./estimatedcosttierenum";
import { FailurePolicy } from "./failurepolicy";
import { ResiliencyPolicyTierEnum } from "./resiliencypolicytierenum";
import { Expose, Transform } from "class-transformer";

/**
 * Defines a resiliency policy.
 */
export class ResiliencyPolicy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "dataLocationConstraint" })
  dataLocationConstraint?: DataLocationConstraintEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "estimatedCostTier" })
  estimatedCostTier?: EstimatedCostTierEnum;

  @SpeakeasyMetadata({ elemType: FailurePolicy })
  @Expose({ name: "policy" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FailurePolicy> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FailurePolicy);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  policy?: Record<string, FailurePolicy>;

  @SpeakeasyMetadata()
  @Expose({ name: "policyArn" })
  policyArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "policyDescription" })
  policyDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "policyName" })
  policyName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "tier" })
  tier?: ResiliencyPolicyTierEnum;
}
