// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetDatacentersRequest struct {
	// Can be used to filter Datacenters by their name. The response will only contain the Datacenter matching the specified name. When the name does not match the Datacenter name format, an `invalid_input` error is returned.
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

type GetDatacenters200ApplicationJSONDatacentersLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// GetDatacenters200ApplicationJSONDatacentersServerTypes - The Server types the Datacenter can handle
type GetDatacenters200ApplicationJSONDatacentersServerTypes struct {
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	Available []float64 `json:"available"`
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	AvailableForMigration []float64 `json:"available_for_migration"`
	// IDs of Server types that are supported in the Datacenter
	Supported []float64 `json:"supported"`
}

type GetDatacenters200ApplicationJSONDatacenters struct {
	// Description of the Datacenter
	Description string `json:"description"`
	// ID of the Resource
	ID       int64                                               `json:"id"`
	Location GetDatacenters200ApplicationJSONDatacentersLocation `json:"location"`
	// Unique identifier of the Datacenter
	Name string `json:"name"`
	// The Server types the Datacenter can handle
	ServerTypes GetDatacenters200ApplicationJSONDatacentersServerTypes `json:"server_types"`
}

// GetDatacenters200ApplicationJSON - The reply contains the `datacenters` and `recommendation` keys
type GetDatacenters200ApplicationJSON struct {
	Datacenters []GetDatacenters200ApplicationJSONDatacenters `json:"datacenters"`
	// The Datacenter which is recommended to be used to create new Servers.
	Recommendation float64 `json:"recommendation"`
}

type GetDatacentersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The reply contains the `datacenters` and `recommendation` keys
	GetDatacenters200ApplicationJSONObject *GetDatacenters200ApplicationJSON
}
