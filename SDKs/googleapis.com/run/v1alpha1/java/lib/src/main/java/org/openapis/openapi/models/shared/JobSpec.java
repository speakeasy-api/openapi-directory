/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * JobSpec - JobSpec describes how the job execution will look like.
 */
public class JobSpec {
    /**
     * Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeDeadlineSeconds")
    public String activeDeadlineSeconds;
    public JobSpec withActiveDeadlineSeconds(String activeDeadlineSeconds) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        return this;
    }
    
    /**
     * Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backoffLimit")
    public Integer backoffLimit;
    public JobSpec withBackoffLimit(Integer backoffLimit) {
        this.backoffLimit = backoffLimit;
        return this;
    }
    
    /**
     * Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completions")
    public Integer completions;
    public JobSpec withCompletions(Integer completions) {
        this.completions = completions;
        return this;
    }
    
    /**
     * Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be &lt;= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) &lt; .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parallelism")
    public Integer parallelism;
    public JobSpec withParallelism(Integer parallelism) {
        this.parallelism = parallelism;
        return this;
    }
    
    /**
     * InstanceTemplateSpec describes the data an instance should have when created from a template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    public InstanceTemplateSpec template;
    public JobSpec withTemplate(InstanceTemplateSpec template) {
        this.template = template;
        return this;
    }
    
    /**
     * Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttlSecondsAfterFinished")
    public Integer ttlSecondsAfterFinished;
    public JobSpec withTtlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
        this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
        return this;
    }
    
}
