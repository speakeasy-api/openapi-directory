"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import formrecognitionresult as shared_formrecognitionresult
from typing import Optional


@dataclasses.dataclass
class ImageOcrPhotoRecognizeFormAdvancedSecurity:
    
    apikey: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Apikey' }})  
    

@dataclasses.dataclass
class ImageOcrPhotoRecognizeFormAdvancedRequestBodyImageFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    image_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'imageFile' }})  
    

@dataclasses.dataclass
class ImageOcrPhotoRecognizeFormAdvancedRequestBody:
    
    image_file: ImageOcrPhotoRecognizeFormAdvancedRequestBodyImageFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    r"""Image file to perform OCR on.  Common file formats such as PNG, JPEG are supported."""  
    

@dataclasses.dataclass
class ImageOcrPhotoRecognizeFormAdvancedRequest:
    
    request_body: ImageOcrPhotoRecognizeFormAdvancedRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'multipart/form-data' }})  
    bucket_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'bucketID', 'style': 'simple', 'explode': False }})
    r"""Bucket ID of the Configuration Bucket storing the form templates"""  
    bucket_secret_key: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'bucketSecretKey', 'style': 'simple', 'explode': False }})
    r"""Bucket Secret Key of the Configuration Bucket storing the form templates"""  
    diagnostics: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'diagnostics', 'style': 'simple', 'explode': False }})
    r"""Optional, diagnostics mode, default is 'false'.  Possible values are 'true' (will set DiagnosticImage to a diagnostic PNG image in the result), and 'false' (no diagnostics are enabled; this is recommended for best performance)."""  
    preprocessing: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'preprocessing', 'style': 'simple', 'explode': False }})
    r"""Optional, preprocessing mode, default is 'Auto'.  Possible values are None (no preprocessing of the image), and Auto (automatic image enhancement of the image - including automatic unrotation of the image - before OCR is applied; this is recommended).  Set this to 'None' if you do not want to use automatic image unrotation and enhancement."""  
    recognition_mode: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'recognitionMode', 'style': 'simple', 'explode': False }})
    r"""Optional, enable advanced recognition mode by specifying 'Advanced', enable handwriting recognition by specifying 'EnableHandwriting'.  Default is disabled."""  
    

@dataclasses.dataclass
class ImageOcrPhotoRecognizeFormAdvancedResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    form_recognition_result: Optional[shared_formrecognitionresult.FormRecognitionResult] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    