// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DeviceIntegrityDeviceRecognitionVerdictEnum string

const (
	DeviceIntegrityDeviceRecognitionVerdictEnumUnknown               DeviceIntegrityDeviceRecognitionVerdictEnum = "UNKNOWN"
	DeviceIntegrityDeviceRecognitionVerdictEnumMeetsBasicIntegrity   DeviceIntegrityDeviceRecognitionVerdictEnum = "MEETS_BASIC_INTEGRITY"
	DeviceIntegrityDeviceRecognitionVerdictEnumMeetsDeviceIntegrity  DeviceIntegrityDeviceRecognitionVerdictEnum = "MEETS_DEVICE_INTEGRITY"
	DeviceIntegrityDeviceRecognitionVerdictEnumMeetsStrongIntegrity  DeviceIntegrityDeviceRecognitionVerdictEnum = "MEETS_STRONG_INTEGRITY"
	DeviceIntegrityDeviceRecognitionVerdictEnumMeetsVirtualIntegrity DeviceIntegrityDeviceRecognitionVerdictEnum = "MEETS_VIRTUAL_INTEGRITY"
)

func (e *DeviceIntegrityDeviceRecognitionVerdictEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "MEETS_BASIC_INTEGRITY":
		fallthrough
	case "MEETS_DEVICE_INTEGRITY":
		fallthrough
	case "MEETS_STRONG_INTEGRITY":
		fallthrough
	case "MEETS_VIRTUAL_INTEGRITY":
		*e = DeviceIntegrityDeviceRecognitionVerdictEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceIntegrityDeviceRecognitionVerdictEnum: %s", s)
	}
}

// DeviceIntegrity - Contains the device attestation information.
type DeviceIntegrity struct {
	// Details about the integrity of the device the app is running on
	DeviceRecognitionVerdict []DeviceIntegrityDeviceRecognitionVerdictEnum `json:"deviceRecognitionVerdict,omitempty"`
}
