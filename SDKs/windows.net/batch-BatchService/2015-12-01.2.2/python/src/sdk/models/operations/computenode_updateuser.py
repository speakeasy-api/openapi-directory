"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import batcherror as shared_batcherror
from ..shared import nodeupdateuserparameter as shared_nodeupdateuserparameter
from typing import Optional


@dataclasses.dataclass
class ComputeNodeUpdateUserRequest:
    
    api_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api-version', 'style': 'form', 'explode': True }})
    r"""Client API Version."""  
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'nodeId', 'style': 'simple', 'explode': False }})
    r"""The id of the machine on which you want to update a user account."""  
    node_update_user_parameter: shared_nodeupdateuserparameter.NodeUpdateUserParameter = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The parameters for the request."""  
    pool_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'poolId', 'style': 'simple', 'explode': False }})
    r"""The id of the pool that contains the compute node."""  
    user_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userName', 'style': 'simple', 'explode': False }})
    r"""The name of the user account to update."""  
    client_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'client-request-id', 'style': 'simple', 'explode': False }})
    r"""Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0."""  
    ocp_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'ocp-date', 'style': 'simple', 'explode': False }})
    r"""The time the request was issued. If not specified, this header will be automatically populated with the current system clock time."""  
    return_client_request_id: Optional[bool] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'return-client-request-id', 'style': 'simple', 'explode': False }})
    r"""Specifies if the server should return the client-request-id identifier in the response."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeout', 'style': 'form', 'explode': True }})
    r"""Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds."""  
    

@dataclasses.dataclass
class ComputeNodeUpdateUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_error: Optional[shared_batcherror.BatchError] = dataclasses.field(default=None)
    r"""Error from the Batch service"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    