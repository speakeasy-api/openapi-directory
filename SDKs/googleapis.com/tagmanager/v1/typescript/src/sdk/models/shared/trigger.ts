/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Condition } from "./condition";
import { Parameter } from "./parameter";
import { Expose, Type } from "class-transformer";

/**
 * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 */
export enum TriggerTypeEnum {
  Pageview = "pageview",
  DomReady = "domReady",
  WindowLoaded = "windowLoaded",
  CustomEvent = "customEvent",
  TriggerGroup = "triggerGroup",
  Always = "always",
  FormSubmission = "formSubmission",
  Click = "click",
  LinkClick = "linkClick",
  JsError = "jsError",
  HistoryChange = "historyChange",
  Timer = "timer",
  AmpClick = "ampClick",
  AmpTimer = "ampTimer",
  AmpScroll = "ampScroll",
  AmpVisibility = "ampVisibility",
  YouTubeVideo = "youTubeVideo",
  ScrollDepth = "scrollDepth",
  ElementVisibility = "elementVisibility",
}

/**
 * Represents a Google Tag Manager Trigger
 */
export class Trigger extends SpeakeasyBase {
  /**
   * GTM Account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata({ elemType: Condition })
  @Expose({ name: "autoEventFilter" })
  @Type(() => Condition)
  autoEventFilter?: Condition[];

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkValidation" })
  @Type(() => Parameter)
  checkValidation?: Parameter;

  /**
   * GTM Container ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "containerId" })
  containerId?: string;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "continuousTimeMinMilliseconds" })
  @Type(() => Parameter)
  continuousTimeMinMilliseconds?: Parameter;

  /**
   * Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata({ elemType: Condition })
  @Expose({ name: "customEventFilter" })
  @Type(() => Condition)
  customEventFilter?: Condition[];

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventName" })
  @Type(() => Parameter)
  eventName?: Parameter;

  /**
   * The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata({ elemType: Condition })
  @Expose({ name: "filter" })
  @Type(() => Condition)
  filter?: Condition[];

  /**
   * The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "horizontalScrollPercentageList" })
  @Type(() => Parameter)
  horizontalScrollPercentageList?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  @Type(() => Parameter)
  interval?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "intervalSeconds" })
  @Type(() => Parameter)
  intervalSeconds?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  @Type(() => Parameter)
  limit?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxTimerLengthSeconds" })
  @Type(() => Parameter)
  maxTimerLengthSeconds?: Parameter;

  /**
   * Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   */
  @SpeakeasyMetadata({ elemType: Parameter })
  @Expose({ name: "parameter" })
  @Type(() => Parameter)
  parameter?: Parameter[];

  /**
   * Parent folder id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentFolderId" })
  parentFolderId?: string;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selector" })
  @Type(() => Parameter)
  selector?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalTimeMinMilliseconds" })
  @Type(() => Parameter)
  totalTimeMinMilliseconds?: Parameter;

  /**
   * The Trigger ID uniquely identifies the GTM Trigger.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerId" })
  triggerId?: string;

  /**
   * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: TriggerTypeEnum;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uniqueTriggerId" })
  @Type(() => Parameter)
  uniqueTriggerId?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verticalScrollPercentageList" })
  @Type(() => Parameter)
  verticalScrollPercentageList?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibilitySelector" })
  @Type(() => Parameter)
  visibilitySelector?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visiblePercentageMax" })
  @Type(() => Parameter)
  visiblePercentageMax?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visiblePercentageMin" })
  @Type(() => Parameter)
  visiblePercentageMin?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waitForTags" })
  @Type(() => Parameter)
  waitForTags?: Parameter;

  /**
   * Represents a Google Tag Manager Parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waitForTagsTimeout" })
  @Type(() => Parameter)
  waitForTagsTimeout?: Parameter;
}
