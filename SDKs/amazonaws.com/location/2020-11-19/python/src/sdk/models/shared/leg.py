"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import leggeometry as shared_leggeometry
from ..shared import step as shared_step
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Leg:
    r"""<p>Contains the calculated route's details for each path between a pair of positions. The number of legs returned corresponds to one fewer than the total number of positions in the request. </p> <p>For example, a route with a departure position and destination position returns one leg with the positions <a href=\\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\\">snapped to a nearby road</a>:</p> <ul> <li> <p>The <code>StartPosition</code> is the departure position.</p> </li> <li> <p>The <code>EndPosition</code> is the destination position.</p> </li> </ul> <p>A route with a waypoint between the departure and destination position returns two legs with the positions snapped to a nearby road:</p> <ul> <li> <p>Leg 1: The <code>StartPosition</code> is the departure position . The <code>EndPosition</code> is the waypoint positon.</p> </li> <li> <p>Leg 2: The <code>StartPosition</code> is the waypoint position. The <code>EndPosition</code> is the destination position.</p> </li> </ul>"""
    
    distance: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Distance') }})  
    duration_seconds: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DurationSeconds') }})  
    end_position: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndPosition') }})  
    start_position: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartPosition') }})  
    steps: list[shared_step.Step] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Steps') }})  
    geometry: Optional[shared_leggeometry.LegGeometry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Geometry'), 'exclude': lambda f: f is None }})  
    