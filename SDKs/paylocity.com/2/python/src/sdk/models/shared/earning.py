"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Earning:
    r"""The employee earning model"""
    
    earning_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('earningCode') }})
    r"""Earning code. Must match Company setup. <br  />Max length: 10"""  
    start_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate') }})
    r"""Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD."""  
    agency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agency'), 'exclude': lambda f: f is None }})
    r"""Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)"""  
    annual_maximum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annualMaximum'), 'exclude': lambda f: f is None }})
    r"""Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)"""  
    calculation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculationCode'), 'exclude': lambda f: f is None }})
    r"""Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20"""  
    cost_center1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter1'), 'exclude': lambda f: f is None }})
    r"""Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10"""  
    cost_center2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter2'), 'exclude': lambda f: f is None }})
    r"""Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10"""  
    cost_center3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costCenter3'), 'exclude': lambda f: f is None }})
    r"""Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10"""  
    effective_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveDate'), 'exclude': lambda f: f is None }})
    r"""Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'exclude': lambda f: f is None }})
    r"""Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD."""  
    frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5"""  
    goal: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goal'), 'exclude': lambda f: f is None }})
    r"""Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)"""  
    hours_or_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hoursOrUnits'), 'exclude': lambda f: f is None }})
    r"""The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)"""  
    is_self_insured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSelfInsured'), 'exclude': lambda f: f is None }})
    r"""Used for ACA. If not entered, defaulted to Company earning setup."""  
    job_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobCode'), 'exclude': lambda f: f is None }})
    r"""Job code associated with earnings. Must match Company setup.<br  /> Max length: 20"""  
    miscellaneous_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miscellaneousInfo'), 'exclude': lambda f: f is None }})
    r"""Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50"""  
    paid_towards_goal: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paidTowardsGoal'), 'exclude': lambda f: f is None }})
    r"""Amount already paid to employee toward goal. <br  /> Decimal(12,2)"""  
    pay_period_maximum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payPeriodMaximum'), 'exclude': lambda f: f is None }})
    r"""Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)"""  
    pay_period_minimum: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payPeriodMinimum'), 'exclude': lambda f: f is None }})
    r"""Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)"""  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)"""  
    rate_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateCode'), 'exclude': lambda f: f is None }})
    r"""Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10"""  
    