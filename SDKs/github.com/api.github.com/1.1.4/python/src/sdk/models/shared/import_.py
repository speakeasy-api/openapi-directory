"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportProjectChoices:
    
    human_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('human_name'), 'exclude': lambda f: f is None }})  
    tfvc_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tfvc_project'), 'exclude': lambda f: f is None }})  
    vcs: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs'), 'exclude': lambda f: f is None }})  
    
class ImportStatusEnum(str, Enum):
    AUTH = 'auth'
    ERROR = 'error'
    NONE = 'none'
    DETECTING = 'detecting'
    CHOOSE = 'choose'
    AUTH_FAILED = 'auth_failed'
    IMPORTING = 'importing'
    MAPPING = 'mapping'
    WAITING_TO_PUSH = 'waiting_to_push'
    PUSHING = 'pushing'
    COMPLETE = 'complete'
    SETUP = 'setup'
    UNKNOWN = 'unknown'
    DETECTION_FOUND_MULTIPLE = 'detection_found_multiple'
    DETECTION_FOUND_NOTHING = 'detection_found_nothing'
    DETECTION_NEEDS_AUTH = 'detection_needs_auth'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Import:
    r"""A repository import from an external source."""
    
    authors_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authors_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    repository_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_url') }})  
    status: ImportStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    vcs: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs') }})  
    vcs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_url') }})
    r"""The URL of the originating repository."""  
    authors_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authors_count'), 'exclude': lambda f: f is None }})  
    commit_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_count'), 'exclude': lambda f: f is None }})  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_message'), 'exclude': lambda f: f is None }})  
    failed_step: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed_step'), 'exclude': lambda f: f is None }})  
    has_large_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_large_files'), 'exclude': lambda f: f is None }})  
    import_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('import_percent'), 'exclude': lambda f: f is None }})  
    large_files_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('large_files_count'), 'exclude': lambda f: f is None }})  
    large_files_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('large_files_size'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    project_choices: Optional[list[ImportProjectChoices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_choices'), 'exclude': lambda f: f is None }})  
    push_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_percent'), 'exclude': lambda f: f is None }})  
    status_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_text'), 'exclude': lambda f: f is None }})  
    svc_root: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svc_root'), 'exclude': lambda f: f is None }})  
    svn_root: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svn_root'), 'exclude': lambda f: f is None }})  
    tfvc_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tfvc_project'), 'exclude': lambda f: f is None }})  
    use_lfs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_lfs'), 'exclude': lambda f: f is None }})  
    