<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Peering - Represents a Managed Service for Microsoft Active Directory Peering.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Peering
{
    /**
     * Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
     * 
     * @var ?string $authorizedNetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizedNetwork')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authorizedNetwork = null;
    
    /**
     * Output only. The time the instance was created.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * Required. Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
     * 
     * @var ?string $domainResource
     */
	#[\JMS\Serializer\Annotation\SerializedName('domainResource')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $domainResource = null;
    
    /**
     * Optional. Resource labels to represent user-provided metadata.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Output only. Unique name of the peering in this scope including projects and location using the form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Output only. The current state of this Peering.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PeeringStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PeeringStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PeeringStateEnum $state = null;
    
    /**
     * Output only. Additional information about the current status of this peering, if available.
     * 
     * @var ?string $statusMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('statusMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $statusMessage = null;
    
    /**
     * Output only. Last update time.
     * 
     * @var ?string $updateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updateTime = null;
    
	public function __construct()
	{
		$this->authorizedNetwork = null;
		$this->createTime = null;
		$this->domainResource = null;
		$this->labels = null;
		$this->name = null;
		$this->state = null;
		$this->statusMessage = null;
		$this->updateTime = null;
	}
}
