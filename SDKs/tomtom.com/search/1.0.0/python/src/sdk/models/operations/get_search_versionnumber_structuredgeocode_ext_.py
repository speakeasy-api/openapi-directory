"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ext_enum as shared_ext_enum
from ..shared import versionnumber_enum as shared_versionnumber_enum
from typing import Optional


@dataclasses.dataclass
class GetSearchVersionNumberStructuredGeocodeExtRequest:
    
    country_code: str = dataclasses.field(metadata={'query_param': { 'field_name': 'countryCode', 'style': 'form', 'explode': True }})
    r"""2 or 3 letter country code (e.g.: FR, ES)."""  
    ext: shared_ext_enum.ExtEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'ext', 'style': 'simple', 'explode': False }})
    r"""Expected response format."""  
    version_number: shared_versionnumber_enum.VersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Service version number. The current value is 2."""  
    country_secondary_subdivision: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countrySecondarySubdivision', 'style': 'form', 'explode': True }})
    r"""The county for the structured address."""  
    country_subdivision: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countrySubdivision', 'style': 'form', 'explode': True }})
    r"""The state or province for the structured address."""  
    country_tertiary_subdivision: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countryTertiarySubdivision', 'style': 'form', 'explode': True }})
    r"""The named area for the structured address."""  
    cross_street: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'crossStreet', 'style': 'form', 'explode': True }})
    r"""The cross street name for the structured address."""  
    extended_postal_codes_for: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extendedPostalCodesFor', 'style': 'form', 'explode': True }})
    r"""Indexes for which extended postal codes should be included in the results. Available indexes are:
      - <b>Addr</b> = Address ranges
      - <b>Geo</b> = Geographies
      - <b>PAD</b> = Point Addresses
      - <b>POI</b> = Points of Interest
      - <b>Str</b> = Streets
      - <b>XStr</b> = Cross Streets (intersections)
    """  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Language in which search results should be returned. Should be one of <a href=\\"/search-api/search-api-documentation/supported-languages\\">supported IETF language tags</a>, case insensitive."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of search results that will be returned."""  
    municipality: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'municipality', 'style': 'form', 'explode': True }})
    r"""The municipality (city/town) for the structured address."""  
    municipality_subdivision: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'municipalitySubdivision', 'style': 'form', 'explode': True }})
    r"""The municipality subdivision (sub/super city) for the structured address."""  
    ofs: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ofs', 'style': 'form', 'explode': True }})
    r"""Starting offset of the returned results within the full result set."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postalCode', 'style': 'form', 'explode': True }})
    r"""The zip code or postal code for the structured address."""  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetName', 'style': 'form', 'explode': True }})
    r"""The street name for the structured address."""  
    street_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'streetNumber', 'style': 'form', 'explode': True }})
    r"""The street number for the structured address."""  
    

@dataclasses.dataclass
class GetSearchVersionNumberStructuredGeocodeExtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    