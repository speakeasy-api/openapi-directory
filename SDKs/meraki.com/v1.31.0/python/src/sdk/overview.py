"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Overview:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_device_camera_analytics_overview(self, request: operations.GetDeviceCameraAnalyticsOverviewRequest) -> operations.GetDeviceCameraAnalyticsOverviewResponse:
        r"""Returns an overview of aggregate analytics data for a timespan
        Returns an overview of aggregate analytics data for a timespan
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceCameraAnalyticsOverviewRequest, base_url, '/devices/{serial}/camera/analytics/overview', request)
        
        query_params = utils.get_query_params(operations.GetDeviceCameraAnalyticsOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceCameraAnalyticsOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_device_camera_analytics_overview_200_application_json_objects = out

        return res

    def get_network_clients_overview(self, request: operations.GetNetworkClientsOverviewRequest) -> operations.GetNetworkClientsOverviewResponse:
        r"""Return overview statistics for network clients
        Return overview statistics for network clients
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkClientsOverviewRequest, base_url, '/networks/{networkId}/clients/overview', request)
        
        query_params = utils.get_query_params(operations.GetNetworkClientsOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkClientsOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_clients_overview_200_application_json_object = out

        return res

    def get_network_sensor_alerts_current_overview_by_metric(self, request: operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest) -> operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse:
        r"""Return an overview of currently alerting sensors by metric
        Return an overview of currently alerting sensors by metric
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsCurrentOverviewByMetricRequest, base_url, '/networks/{networkId}/sensor/alerts/current/overview/byMetric', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsCurrentOverviewByMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkSensorAlertsCurrentOverviewByMetric200ApplicationJSON])
                res.get_network_sensor_alerts_current_overview_by_metric_200_application_json_object = out

        return res

    def get_network_sensor_alerts_overview_by_metric(self, request: operations.GetNetworkSensorAlertsOverviewByMetricRequest) -> operations.GetNetworkSensorAlertsOverviewByMetricResponse:
        r"""Return an overview of alert occurrences over a timespan, by metric
        Return an overview of alert occurrences over a timespan, by metric
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSensorAlertsOverviewByMetricRequest, base_url, '/networks/{networkId}/sensor/alerts/overview/byMetric', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSensorAlertsOverviewByMetricRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSensorAlertsOverviewByMetricResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSensorAlertsOverviewByMetric200ApplicationJSON]])
                res.get_network_sensor_alerts_overview_by_metric_200_application_json_objects = out

        return res

    def get_organization_adaptive_policy_overview(self, request: operations.GetOrganizationAdaptivePolicyOverviewRequest) -> operations.GetOrganizationAdaptivePolicyOverviewResponse:
        r"""Returns adaptive policy aggregate statistics for an organization
        Returns adaptive policy aggregate statistics for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAdaptivePolicyOverviewRequest, base_url, '/organizations/{organizationId}/adaptivePolicy/overview', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAdaptivePolicyOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationAdaptivePolicyOverview200ApplicationJSON])
                res.get_organization_adaptive_policy_overview_200_application_json_object = out

        return res

    def get_organization_api_requests_overview(self, request: operations.GetOrganizationAPIRequestsOverviewRequest) -> operations.GetOrganizationAPIRequestsOverviewResponse:
        r"""Return an aggregated overview of API requests data
        Return an aggregated overview of API requests data
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAPIRequestsOverviewRequest, base_url, '/organizations/{organizationId}/apiRequests/overview', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationAPIRequestsOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAPIRequestsOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_api_requests_overview_200_application_json_object = out

        return res

    def get_organization_api_requests_overview_response_codes_by_interval(self, request: operations.GetOrganizationAPIRequestsOverviewResponseCodesByIntervalRequest) -> operations.GetOrganizationAPIRequestsOverviewResponseCodesByIntervalResponse:
        r"""Tracks organizations' API requests by response code across a given time period
        Tracks organizations' API requests by response code across a given time period
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationAPIRequestsOverviewResponseCodesByIntervalRequest, base_url, '/organizations/{organizationId}/apiRequests/overview/responseCodes/byInterval', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationAPIRequestsOverviewResponseCodesByIntervalRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationAPIRequestsOverviewResponseCodesByIntervalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationAPIRequestsOverviewResponseCodesByInterval200ApplicationJSON]])
                res.get_organization_api_requests_overview_response_codes_by_interval_200_application_json_objects = out

        return res

    def get_organization_clients_overview(self, request: operations.GetOrganizationClientsOverviewRequest) -> operations.GetOrganizationClientsOverviewResponse:
        r"""Return summary information around client data usage (in mb) across the given organization.
        Return summary information around client data usage (in mb) across the given organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationClientsOverviewRequest, base_url, '/organizations/{organizationId}/clients/overview', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationClientsOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationClientsOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationClientsOverview200ApplicationJSON])
                res.get_organization_clients_overview_200_application_json_object = out

        return res

    def get_organization_devices_statuses_overview(self, request: operations.GetOrganizationDevicesStatusesOverviewRequest) -> operations.GetOrganizationDevicesStatusesOverviewResponse:
        r"""Return an overview of current device statuses
        Return an overview of current device statuses
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesStatusesOverviewRequest, base_url, '/organizations/{organizationId}/devices/statuses/overview', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesStatusesOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesStatusesOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationDevicesStatusesOverview200ApplicationJSON])
                res.get_organization_devices_statuses_overview_200_application_json_object = out

        return res

    def get_organization_licenses_overview(self, request: operations.GetOrganizationLicensesOverviewRequest) -> operations.GetOrganizationLicensesOverviewResponse:
        r"""Return an overview of the license state for an organization
        Return an overview of the license state for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationLicensesOverviewRequest, base_url, '/organizations/{organizationId}/licenses/overview', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationLicensesOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_licenses_overview_200_application_json_object = out

        return res

    