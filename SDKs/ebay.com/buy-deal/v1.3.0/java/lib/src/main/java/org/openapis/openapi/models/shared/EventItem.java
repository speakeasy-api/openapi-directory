/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EventItem - The detailed data returned for the event item.
 */
public class EventItem {
    /**
     * The additional images for the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalImages")
    public Image[] additionalImages;
    public EventItem withAdditionalImages(Image[] additionalImages) {
        this.additionalImages = additionalImages;
        return this;
    }
    
    /**
     * The IDs of the ancestors for the primary category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryAncestorIds")
    public String[] categoryAncestorIds;
    public EventItem withCategoryAncestorIds(String[] categoryAncestorIds) {
        this.categoryAncestorIds = categoryAncestorIds;
        return this;
    }
    
    /**
     * The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoryId")
    public String categoryId;
    public EventItem withCategoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * A string value specifying the Energy Efficiency class.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("energyEfficiencyClass")
    public String energyEfficiencyClass;
    public EventItem withEnergyEfficiencyClass(String energyEfficiencyClass) {
        this.energyEfficiencyClass = energyEfficiencyClass;
        return this;
    }
    
    /**
     * The unique event identifier associated with the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventId")
    public String eventId;
    public EventItem withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * The type that defines the details of an image, such as size and URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public Image image;
    public EventItem withImage(Image image) {
        this.image = image;
        return this;
    }
    
    /**
     * The item web URL with affiliate attribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemAffiliateWebUrl")
    public String itemAffiliateWebUrl;
    public EventItem withItemAffiliateWebUrl(String itemAffiliateWebUrl) {
        this.itemAffiliateWebUrl = itemAffiliateWebUrl;
        return this;
    }
    
    /**
     * The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemGroupId")
    public String itemGroupId;
    public EventItem withItemGroupId(String itemGroupId) {
        this.itemGroupId = itemGroupId;
        return this;
    }
    
    /**
     * An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to &lt;a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'&gt;eBay API documentation&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemGroupType")
    public String itemGroupType;
    public EventItem withItemGroupType(String itemGroupType) {
        this.itemGroupType = itemGroupType;
        return this;
    }
    
    /**
     * The unique identifier for the event item. Note: This field is only returned for single-SKU items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemId")
    public String itemId;
    public EventItem withItemId(String itemId) {
        this.itemId = itemId;
        return this;
    }
    
    /**
     * The web URL for the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemWebUrl")
    public String itemWebUrl;
    public EventItem withItemWebUrl(String itemWebUrl) {
        this.itemWebUrl = itemWebUrl;
        return this;
    }
    
    /**
     * The legacy item ID associated with the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legacyItemId")
    public String legacyItemId;
    public EventItem withLegacyItemId(String legacyItemId) {
        this.legacyItemId = legacyItemId;
        return this;
    }
    
    /**
     * A type that describes the seller discount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingPrice")
    public MarketingPrice marketingPrice;
    public EventItem withMarketingPrice(MarketingPrice marketingPrice) {
        this.marketingPrice = marketingPrice;
        return this;
    }
    
    /**
     * The currency and value of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Amount price;
    public EventItem withPrice(Amount price) {
        this.price = price;
        return this;
    }
    
    /**
     * A list of programs applicable to the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("qualifiedPrograms")
    public String[] qualifiedPrograms;
    public EventItem withQualifiedPrograms(String[] qualifiedPrograms) {
        this.qualifiedPrograms = qualifiedPrograms;
        return this;
    }
    
    /**
     * The cost required to ship the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingOptions")
    public ShippingOption[] shippingOptions;
    public EventItem withShippingOptions(ShippingOption[] shippingOptions) {
        this.shippingOptions = shippingOptions;
        return this;
    }
    
    /**
     * The title of the event item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public EventItem withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The currency and value of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPrice")
    public Amount unitPrice;
    public EventItem withUnitPrice(Amount unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }
    
    /**
     * The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &amp;quot;unitPricingMeasure&amp;quot;: &amp;quot;100g&amp;quot;, &amp;quot;unitPrice&amp;quot;: { &amp;nbsp;&amp;nbsp;&amp;quot;value&amp;quot;: &amp;quot;7.99&amp;quot;, &amp;nbsp;&amp;nbsp;&amp;quot;currency&amp;quot;: &amp;quot;GBP&amp;quot;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitPricingMeasure")
    public String unitPricingMeasure;
    public EventItem withUnitPricingMeasure(String unitPricingMeasure) {
        this.unitPricingMeasure = unitPricingMeasure;
        return this;
    }
    
}
