"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class DeparturesAndArrivals:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_arrivals_and_departures_by_crs(self, request: operations.GetArrivalsAndDeparturesByCRSRequest) -> operations.GetArrivalsAndDeparturesByCRSResponse:
        r"""getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetArrivalsAndDeparturesByCRSRequest, base_url, '/getArrivalsAndDeparturesByCRS/{CRS}', request)
        
        query_params = utils.get_query_params(operations.GetArrivalsAndDeparturesByCRSRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArrivalsAndDeparturesByCRSResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_arrivals_by_crs(self, request: operations.GetArrivalsByCRSRequest) -> operations.GetArrivalsByCRSResponse:
        r"""getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetArrivalsByCRSRequest, base_url, '/getArrivalsByCRS/{CRS}', request)
        
        query_params = utils.get_query_params(operations.GetArrivalsByCRSRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArrivalsByCRSResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_departures_by_crs(self, request: operations.GetDeparturesByCRSRequest) -> operations.GetDeparturesByCRSResponse:
        r"""getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeparturesByCRSRequest, base_url, '/getDeparturesByCRS/{CRS}', request)
        
        query_params = utils.get_query_params(operations.GetDeparturesByCRSRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeparturesByCRSResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    