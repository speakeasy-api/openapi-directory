/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class BudgetAnalysis {
    /**
     * The average actual (transactions) amount across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("average_actual_amount")
    public Double averageActualAmount;
    public BudgetAnalysis withAverageActualAmount(Double averageActualAmount) {
        this.averageActualAmount = averageActualAmount;
        return this;
    }
    
    /**
     * The average budgeted amount across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("average_forecast_amount")
    public Double averageForecastAmount;
    public BudgetAnalysis withAverageForecastAmount(Double averageForecastAmount) {
        this.averageForecastAmount = averageForecastAmount;
        return this;
    }
    
    /**
     * The currency of the budget analysis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    public String currencyCode;
    public BudgetAnalysis withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The end date of the budget analysis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    public String endDate;
    public BudgetAnalysis withEndDate(String endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * The period analyses that this budget analysis comprises.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("periods")
    public Period[] periods;
    public BudgetAnalysis withPeriods(Period[] periods) {
        this.periods = periods;
        return this;
    }
    
    /**
     * The start date of the budget analysis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    public String startDate;
    public BudgetAnalysis withStartDate(String startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * The total actual (transactions) amount across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_actual_amount")
    public Double totalActualAmount;
    public BudgetAnalysis withTotalActualAmount(Double totalActualAmount) {
        this.totalActualAmount = totalActualAmount;
        return this;
    }
    
    /**
     * The total budgeted amount across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_forecast_amount")
    public Double totalForecastAmount;
    public BudgetAnalysis withTotalForecastAmount(Double totalForecastAmount) {
        this.totalForecastAmount = totalForecastAmount;
        return this;
    }
    
    /**
     * The total amount the budget was exceeded across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_over_by")
    public Double totalOverBy;
    public BudgetAnalysis withTotalOverBy(Double totalOverBy) {
        this.totalOverBy = totalOverBy;
        return this;
    }
    
    /**
     * The total amount the budget was under by across all periods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_under_by")
    public Double totalUnderBy;
    public BudgetAnalysis withTotalUnderBy(Double totalUnderBy) {
        this.totalUnderBy = totalUnderBy;
        return this;
    }
    
}
