// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetEventsTypeEnum - type of records to return
type GetEventsTypeEnum string

const (
	GetEventsTypeEnumAll      GetEventsTypeEnum = "all"
	GetEventsTypeEnumClicks   GetEventsTypeEnum = "clicks"
	GetEventsTypeEnumContacts GetEventsTypeEnum = "contacts"
)

func (e *GetEventsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "clicks":
		fallthrough
	case "contacts":
		*e = GetEventsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventsTypeEnum: %s", s)
	}
}

type GetEventsRequest struct {
	// pass an optional company Id
	Company *string `queryParam:"style=form,explode=true,name=company"`
	// pass an optional deal Id
	Deal *string `queryParam:"style=form,explode=true,name=deal"`
	// next token to start returning records from
	Nexttoken *string `queryParam:"style=form,explode=true,name=nexttoken"`
	// id of execution to get more records based on next token
	Queryexecutionid *string `queryParam:"style=form,explode=true,name=queryexecutionid"`
	// pass an optional site Id
	Site *string `queryParam:"style=form,explode=true,name=site"`
	// type of records to return
	Type *GetEventsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetEventsResponse struct {
	ContentType string
	// analytics results matching criteria
	EventRecords []shared.EventRecord
	StatusCode   int
	RawResponse  *http.Response
}
