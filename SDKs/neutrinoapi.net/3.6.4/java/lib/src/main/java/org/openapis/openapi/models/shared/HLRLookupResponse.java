/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class HLRLookupResponse {
    /**
     * The phone number country
     */
    @JsonProperty("country")
    public String country;

    public HLRLookupResponse withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The number location as an ISO 2-letter country code
     */
    @JsonProperty("country-code")
    public String countryCode;

    public HLRLookupResponse withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The number location as an ISO 3-letter country code
     */
    @JsonProperty("country-code3")
    public String countryCode3;

    public HLRLookupResponse withCountryCode3(String countryCode3) {
        this.countryCode3 = countryCode3;
        return this;
    }
    
    /**
     * ISO 4217 currency code associated with the country
     */
    @JsonProperty("currency-code")
    public String currencyCode;

    public HLRLookupResponse withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The currently used network/carrier name
     */
    @JsonProperty("current-network")
    public String currentNetwork;

    public HLRLookupResponse withCurrentNetwork(String currentNetwork) {
        this.currentNetwork = currentNetwork;
        return this;
    }
    
    /**
     * The HLR lookup status, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;ok - the HLR lookup was successful and the device is connected&lt;/li&gt; &lt;li&gt;absent - the number was once registered but the device has been switched off or out of network range for some time&lt;/li&gt; &lt;li&gt;unknown - the number is not known by the mobile network&lt;/li&gt; &lt;li&gt;invalid - the number is not a valid mobile MSISDN number&lt;/li&gt; &lt;li&gt;fixed-line - the number is a registered fixed-line not mobile&lt;/li&gt; &lt;li&gt;voip - the number has been detected as a VOIP line&lt;/li&gt; &lt;li&gt;failed - the HLR lookup has failed, we could not determine the real status of this number&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("hlr-status")
    public String hlrStatus;

    public HLRLookupResponse withHlrStatus(String hlrStatus) {
        this.hlrStatus = hlrStatus;
        return this;
    }
    
    /**
     * Was the HLR lookup successful. If true then this is a working and registered cell-phone or mobile device (SMS and phone calls will be delivered)
     */
    @JsonProperty("hlr-valid")
    public Boolean hlrValid;

    public HLRLookupResponse withHlrValid(Boolean hlrValid) {
        this.hlrValid = hlrValid;
        return this;
    }
    
    /**
     * The mobile IMSI number (International Mobile Subscriber Identity)
     */
    @JsonProperty("imsi")
    public String imsi;

    public HLRLookupResponse withImsi(String imsi) {
        this.imsi = imsi;
        return this;
    }
    
    /**
     * The international calling code
     */
    @JsonProperty("international-calling-code")
    public String internationalCallingCode;

    public HLRLookupResponse withInternationalCallingCode(String internationalCallingCode) {
        this.internationalCallingCode = internationalCallingCode;
        return this;
    }
    
    /**
     * The number represented in full international format
     */
    @JsonProperty("international-number")
    public String internationalNumber;

    public HLRLookupResponse withInternationalNumber(String internationalNumber) {
        this.internationalNumber = internationalNumber;
        return this;
    }
    
    /**
     * True if this is a mobile number (only true with 100% certainty, if the number type is unknown this value will be false)
     */
    @JsonProperty("is-mobile")
    public Boolean isMobile;

    public HLRLookupResponse withIsMobile(Boolean isMobile) {
        this.isMobile = isMobile;
        return this;
    }
    
    /**
     * Has this number been ported to another network
     */
    @JsonProperty("is-ported")
    public Boolean isPorted;

    public HLRLookupResponse withIsPorted(Boolean isPorted) {
        this.isPorted = isPorted;
        return this;
    }
    
    /**
     * Is this number currently roaming from its origin country
     */
    @JsonProperty("is-roaming")
    public Boolean isRoaming;

    public HLRLookupResponse withIsRoaming(Boolean isRoaming) {
        this.isRoaming = isRoaming;
        return this;
    }
    
    /**
     * The number represented in local dialing format
     */
    @JsonProperty("local-number")
    public String localNumber;

    public HLRLookupResponse withLocalNumber(String localNumber) {
        this.localNumber = localNumber;
        return this;
    }
    
    /**
     * The number location. Could be a city, region or country depending on the type of number
     */
    @JsonProperty("location")
    public String location;

    public HLRLookupResponse withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The mobile MCC number (Mobile Country Code)
     */
    @JsonProperty("mcc")
    public String mcc;

    public HLRLookupResponse withMcc(String mcc) {
        this.mcc = mcc;
        return this;
    }
    
    /**
     * The mobile MNC number (Mobile Network Code)
     */
    @JsonProperty("mnc")
    public String mnc;

    public HLRLookupResponse withMnc(String mnc) {
        this.mnc = mnc;
        return this;
    }
    
    /**
     * The mobile MSC number (Mobile Switching Center)
     */
    @JsonProperty("msc")
    public String msc;

    public HLRLookupResponse withMsc(String msc) {
        this.msc = msc;
        return this;
    }
    
    /**
     * The mobile MSIN number (Mobile Subscription Identification Number)
     */
    @JsonProperty("msin")
    public String msin;

    public HLRLookupResponse withMsin(String msin) {
        this.msin = msin;
        return this;
    }
    
    /**
     * The number type, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;mobile&lt;/li&gt; &lt;li&gt;fixed-line&lt;/li&gt; &lt;li&gt;premium-rate&lt;/li&gt; &lt;li&gt;toll-free&lt;/li&gt; &lt;li&gt;voip&lt;/li&gt; &lt;li&gt;unknown&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("number-type")
    public String numberType;

    public HLRLookupResponse withNumberType(String numberType) {
        this.numberType = numberType;
        return this;
    }
    
    /**
     * True if this a valid phone number
     */
    @JsonProperty("number-valid")
    public Boolean numberValid;

    public HLRLookupResponse withNumberValid(Boolean numberValid) {
        this.numberValid = numberValid;
        return this;
    }
    
    /**
     * The origin network/carrier name
     */
    @JsonProperty("origin-network")
    public String originNetwork;

    public HLRLookupResponse withOriginNetwork(String originNetwork) {
        this.originNetwork = originNetwork;
        return this;
    }
    
    /**
     * The ported to network/carrier name (only set if the number has been ported)
     */
    @JsonProperty("ported-network")
    public String portedNetwork;

    public HLRLookupResponse withPortedNetwork(String portedNetwork) {
        this.portedNetwork = portedNetwork;
        return this;
    }
    
    /**
     * If the number is currently roaming, the ISO 2-letter country code of the roaming in country
     */
    @JsonProperty("roaming-country-code")
    public String roamingCountryCode;

    public HLRLookupResponse withRoamingCountryCode(String roamingCountryCode) {
        this.roamingCountryCode = roamingCountryCode;
        return this;
    }
    
    public HLRLookupResponse(@JsonProperty("country") String country, @JsonProperty("country-code") String countryCode, @JsonProperty("country-code3") String countryCode3, @JsonProperty("currency-code") String currencyCode, @JsonProperty("current-network") String currentNetwork, @JsonProperty("hlr-status") String hlrStatus, @JsonProperty("hlr-valid") Boolean hlrValid, @JsonProperty("imsi") String imsi, @JsonProperty("international-calling-code") String internationalCallingCode, @JsonProperty("international-number") String internationalNumber, @JsonProperty("is-mobile") Boolean isMobile, @JsonProperty("is-ported") Boolean isPorted, @JsonProperty("is-roaming") Boolean isRoaming, @JsonProperty("local-number") String localNumber, @JsonProperty("location") String location, @JsonProperty("mcc") String mcc, @JsonProperty("mnc") String mnc, @JsonProperty("msc") String msc, @JsonProperty("msin") String msin, @JsonProperty("number-type") String numberType, @JsonProperty("number-valid") Boolean numberValid, @JsonProperty("origin-network") String originNetwork, @JsonProperty("ported-network") String portedNetwork, @JsonProperty("roaming-country-code") String roamingCountryCode) {
        this.country = country;
        this.countryCode = countryCode;
        this.countryCode3 = countryCode3;
        this.currencyCode = currencyCode;
        this.currentNetwork = currentNetwork;
        this.hlrStatus = hlrStatus;
        this.hlrValid = hlrValid;
        this.imsi = imsi;
        this.internationalCallingCode = internationalCallingCode;
        this.internationalNumber = internationalNumber;
        this.isMobile = isMobile;
        this.isPorted = isPorted;
        this.isRoaming = isRoaming;
        this.localNumber = localNumber;
        this.location = location;
        this.mcc = mcc;
        this.mnc = mnc;
        this.msc = msc;
        this.msin = msin;
        this.numberType = numberType;
        this.numberValid = numberValid;
        this.originNetwork = originNetwork;
        this.portedNetwork = portedNetwork;
        this.roamingCountryCode = roamingCountryCode;
  }
}
