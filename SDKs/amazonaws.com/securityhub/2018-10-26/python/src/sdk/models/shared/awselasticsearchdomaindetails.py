"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awselasticsearchdomaindomainendpointoptions as shared_awselasticsearchdomaindomainendpointoptions
from ..shared import awselasticsearchdomainelasticsearchclusterconfigdetails as shared_awselasticsearchdomainelasticsearchclusterconfigdetails
from ..shared import awselasticsearchdomainencryptionatrestoptions as shared_awselasticsearchdomainencryptionatrestoptions
from ..shared import awselasticsearchdomainlogpublishingoptions as shared_awselasticsearchdomainlogpublishingoptions
from ..shared import awselasticsearchdomainnodetonodeencryptionoptions as shared_awselasticsearchdomainnodetonodeencryptionoptions
from ..shared import awselasticsearchdomainservicesoftwareoptions as shared_awselasticsearchdomainservicesoftwareoptions
from ..shared import awselasticsearchdomainvpcoptions as shared_awselasticsearchdomainvpcoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsElasticsearchDomainDetails:
    r"""Information about an Elasticsearch domain."""
    
    access_policies: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessPolicies'), 'exclude': lambda f: f is None }})  
    domain_endpoint_options: Optional[shared_awselasticsearchdomaindomainendpointoptions.AwsElasticsearchDomainDomainEndpointOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainEndpointOptions'), 'exclude': lambda f: f is None }})  
    domain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainId'), 'exclude': lambda f: f is None }})  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainName'), 'exclude': lambda f: f is None }})  
    elasticsearch_cluster_config: Optional[shared_awselasticsearchdomainelasticsearchclusterconfigdetails.AwsElasticsearchDomainElasticsearchClusterConfigDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticsearchClusterConfig'), 'exclude': lambda f: f is None }})  
    elasticsearch_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ElasticsearchVersion'), 'exclude': lambda f: f is None }})  
    encryption_at_rest_options: Optional[shared_awselasticsearchdomainencryptionatrestoptions.AwsElasticsearchDomainEncryptionAtRestOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionAtRestOptions'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})  
    endpoints: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoints'), 'exclude': lambda f: f is None }})  
    log_publishing_options: Optional[shared_awselasticsearchdomainlogpublishingoptions.AwsElasticsearchDomainLogPublishingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogPublishingOptions'), 'exclude': lambda f: f is None }})  
    node_to_node_encryption_options: Optional[shared_awselasticsearchdomainnodetonodeencryptionoptions.AwsElasticsearchDomainNodeToNodeEncryptionOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeToNodeEncryptionOptions'), 'exclude': lambda f: f is None }})  
    service_software_options: Optional[shared_awselasticsearchdomainservicesoftwareoptions.AwsElasticsearchDomainServiceSoftwareOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceSoftwareOptions'), 'exclude': lambda f: f is None }})  
    vpc_options: Optional[shared_awselasticsearchdomainvpcoptions.AwsElasticsearchDomainVPCOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VPCOptions'), 'exclude': lambda f: f is None }})  
    