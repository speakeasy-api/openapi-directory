"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import auth_enum as shared_auth_enum
from ..shared import status_enum as shared_status_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cluster:
    r"""Returns information about a specific Elastic DocumentDB cluster."""
    
    admin_user_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminUserName') }})  
    auth_type: shared_auth_enum.AuthEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authType') }})  
    cluster_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterArn') }})  
    cluster_endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterEndpoint') }})  
    cluster_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterName') }})  
    create_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime') }})  
    kms_key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyId') }})  
    preferred_maintenance_window: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferredMaintenanceWindow') }})  
    shard_capacity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shardCapacity') }})  
    shard_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shardCount') }})  
    status: shared_status_enum.StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    subnet_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetIds') }})  
    vpc_security_group_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcSecurityGroupIds') }})  
    