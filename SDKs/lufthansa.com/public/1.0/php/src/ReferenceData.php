<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ReferenceData 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Aircraft
     * 
     * List all aircraft types or one specific aircraft type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetResponse
     */
	public function referencesAircraftByAircraftCodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/aircraft/{aircraftCode}', \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesAircraftByAircraftCodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referencesAircraftByAircraftCodeGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Airlines
     * 
     * List all airlines or one specific airline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetResponse
     */
	public function referencesAirlinesByAirlineCodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/airlines/{airlineCode}', \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesAirlinesByAirlineCodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referencesAirlinesByAirlineCodeGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Airports
     * 
     * List all airports or one specific airport. All airports response is very large. It is possible to request the response in a specific language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetResponse
     */
	public function referencesAirportsByAirportCodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/airports/{airportCode}', \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsByAirportCodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->airportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AirportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Nearest Airports
     * 
     * List the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse
     */
	public function referencesAirportsNearestByLatitudeAndLongitudeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/airports/nearest/{latitude},{longitude}', \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesAirportsNearestByLatitudeAndLongitudeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referencesAirportsNearestByLatitudeAndLongitudeGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cities
     * 
     * List all cities or one specific city. It is possible to request the response in a specific language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetResponse
     */
	public function referencesCitiesByCityCodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/cities/{cityCode}', \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesCitiesByCityCodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referencesCitiesByCityCodeGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Countries
     * 
     * List all countries or one specific country. It is possible to request the response in a specific language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetResponse
     */
	public function referencesCountriesByCountryCodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/references/countries/{countryCode}', \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesCountriesByCountryCodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referencesCountriesByCountryCodeGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}