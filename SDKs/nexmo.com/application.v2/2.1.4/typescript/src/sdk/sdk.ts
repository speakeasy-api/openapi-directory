/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.nexmo.com/v2/applications"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Vonage provides an Application API to allow management of your Vonage Applications.
 *
 * @remarks
 *
 * This API is backwards compatible with version 1. Applications created using version 1 of the API can also be managed using version 2 (this version) of the API.
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Create an application
   */
  createApplication(
    req: operations.CreateApplicationRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateApplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateApplicationRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateApplicationResponse =
        new operations.CreateApplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication405ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication405ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication406ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication406ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createApplication415ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateApplication415ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an application
   *
   * @remarks
   * Deleting an application **cannot be undone**.
   */
  deleteApplication(
    req: operations.DeleteApplicationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteApplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteApplicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteApplicationResponse =
        new operations.DeleteApplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteApplication401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteApplication401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteApplication404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteApplication404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteApplication405ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteApplication405ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteApplication406ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteApplication406ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an application
   */
  getApplication(
    req: operations.GetApplicationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApplicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApplicationResponse =
        new operations.GetApplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApplicationResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getApplication401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetApplication401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getApplication404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetApplication404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getApplication405ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetApplication405ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getApplication406ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetApplication406ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List available applications
   */
  listApplication(
    req: operations.ListApplicationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListApplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListApplicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListApplicationResponse =
        new operations.ListApplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applicationResponseCollection = utils.objectToClass(
              httpRes?.data,
              shared.ApplicationResponseCollection
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listApplication400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListApplication400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listApplication401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListApplication401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listApplication405ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListApplication405ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listApplication406ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListApplication406ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an application
   */
  updateApplication(
    req: operations.UpdateApplicationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateApplicationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateApplicationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateApplicationResponse =
        new operations.UpdateApplicationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication405ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication405ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication406ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication406ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 415:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateApplication415ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateApplication415ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
