"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dependencyedge as shared_dependencyedge
from ..shared import partofspeech as shared_partofspeech
from ..shared import textspan as shared_textspan
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Token:
    r"""Represents the smallest syntactic building block of the text."""
    
    dependency_edge: Optional[shared_dependencyedge.DependencyEdge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependencyEdge'), 'exclude': lambda f: f is None }})
    r"""Represents dependency parse tree information for a token."""  
    lemma: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lemma'), 'exclude': lambda f: f is None }})
    r"""[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token."""  
    part_of_speech: Optional[shared_partofspeech.PartOfSpeech] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partOfSpeech'), 'exclude': lambda f: f is None }})
    r"""Represents part of speech information for a token."""  
    text: Optional[shared_textspan.TextSpan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Represents an output piece of text."""  
    