// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type GetAdminMappingsStubMappingIDPathParams struct {
	// The UUID of stub mapping
	StubMappingID string `pathParam:"style=simple,explode=false,name=stubMappingId"`
}

type GetAdminMappingsStubMappingIDRequest struct {
	PathParams GetAdminMappingsStubMappingIDPathParams
}

// GetAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type GetAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type GetAdminMappingsStubMappingID200ApplicationJSONRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *GetAdminMappingsStubMappingID200ApplicationJSONRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum string

const (
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnumUniform GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform - Uniformly distributed random response delay.
type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform struct {
	Lower *int64                                                                                   `json:"lower,omitempty"`
	Type  *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                                   `json:"upper,omitempty"`
}

type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum string

const (
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnumLognormal GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal struct {
	Median *int64                                                                                     `json:"median,omitempty"`
	Sigma  *float64                                                                                   `json:"sigma,omitempty"`
	Type   *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType string

const (
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType = "get_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_delayDistribution_Log normal"
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform   GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType = "get_/__admin/mappings/{stubMappingId}_200ApplicationJSON_response_delayDistribution_Uniform"
)

type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution struct {
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
	GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform   *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform

	Type GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionType
}

func CreateGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal(getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal) GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution {
	typ := GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal

	return GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution{
		GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal: &getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreateGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform(getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform) GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution {
	typ := GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform

	return GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution{
		GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform: &getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal := new(GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal); err == nil {
		u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal = getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
		u.Type = GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal
		return nil
	}

	getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform := new(GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform); err == nil {
		u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform = getAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform
		u.Type = GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionTypeGetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionLogNormal)
	}

	if u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform != nil {
		return json.Marshal(u.GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistributionUniform)
	}

	return nil, nil
}

// GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum - The fault to apply (instead of a full, valid response).
type GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum string

const (
	GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumConnectionResetByPeer  GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumEmptyResponse          GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "EMPTY_RESPONSE"
	GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumMalformedResponseChunk GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnumRandomDataThenClose    GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum: %s", s)
	}
}

type GetAdminMappingsStubMappingID200ApplicationJSONResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *GetAdminMappingsStubMappingID200ApplicationJSONResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *GetAdminMappingsStubMappingID200ApplicationJSONResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

// GetAdminMappingsStubMappingID200ApplicationJSON - The stub mapping
type GetAdminMappingsStubMappingID200ApplicationJSON struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                                  `json:"priority,omitempty"`
	Request  *GetAdminMappingsStubMappingID200ApplicationJSONRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                                  `json:"requiredScenarioState,omitempty"`
	Response              *GetAdminMappingsStubMappingID200ApplicationJSONResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type GetAdminMappingsStubMappingIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The stub mapping
	GetAdminMappingsStubMappingID200ApplicationJSONObject *GetAdminMappingsStubMappingID200ApplicationJSON
}
