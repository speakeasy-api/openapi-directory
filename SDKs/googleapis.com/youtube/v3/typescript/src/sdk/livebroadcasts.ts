/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LiveBroadcasts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Bind a broadcast to a stream.
   */
  youtubeLiveBroadcastsBind(
    req: operations.YoutubeLiveBroadcastsBindRequest,
    security: operations.YoutubeLiveBroadcastsBindSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsBindResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsBindRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts/bind";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsBindSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsBindResponse =
        new operations.YoutubeLiveBroadcastsBindResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liveBroadcast = utils.objectToClass(
              httpRes?.data,
              shared.LiveBroadcast
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a given broadcast.
   */
  youtubeLiveBroadcastsDelete(
    req: operations.YoutubeLiveBroadcastsDeleteRequest,
    security: operations.YoutubeLiveBroadcastsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsDeleteResponse =
        new operations.YoutubeLiveBroadcastsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a new stream for the authenticated user.
   */
  youtubeLiveBroadcastsInsert(
    req: operations.YoutubeLiveBroadcastsInsertRequest,
    security: operations.YoutubeLiveBroadcastsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "liveBroadcast",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsInsertResponse =
        new operations.YoutubeLiveBroadcastsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liveBroadcast = utils.objectToClass(
              httpRes?.data,
              shared.LiveBroadcast
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Insert cuepoints in a broadcast
   */
  youtubeLiveBroadcastsInsertCuepoint(
    req: operations.YoutubeLiveBroadcastsInsertCuepointRequest,
    security: operations.YoutubeLiveBroadcastsInsertCuepointSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsInsertCuepointResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsInsertCuepointRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts/cuepoint";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cuepoint",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsInsertCuepointSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsInsertCuepointResponse =
        new operations.YoutubeLiveBroadcastsInsertCuepointResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cuepoint = utils.objectToClass(httpRes?.data, shared.Cuepoint);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve the list of broadcasts associated with the given channel.
   */
  youtubeLiveBroadcastsList(
    req: operations.YoutubeLiveBroadcastsListRequest,
    security: operations.YoutubeLiveBroadcastsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsListResponse =
        new operations.YoutubeLiveBroadcastsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liveBroadcastListResponse = utils.objectToClass(
              httpRes?.data,
              shared.LiveBroadcastListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Transition a broadcast to a given status.
   */
  youtubeLiveBroadcastsTransition(
    req: operations.YoutubeLiveBroadcastsTransitionRequest,
    security: operations.YoutubeLiveBroadcastsTransitionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsTransitionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsTransitionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts/transition";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsTransitionSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsTransitionResponse =
        new operations.YoutubeLiveBroadcastsTransitionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liveBroadcast = utils.objectToClass(
              httpRes?.data,
              shared.LiveBroadcast
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing broadcast for the authenticated user.
   */
  youtubeLiveBroadcastsUpdate(
    req: operations.YoutubeLiveBroadcastsUpdateRequest,
    security: operations.YoutubeLiveBroadcastsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.YoutubeLiveBroadcastsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.YoutubeLiveBroadcastsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/youtube/v3/liveBroadcasts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "liveBroadcast",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.YoutubeLiveBroadcastsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.YoutubeLiveBroadcastsUpdateResponse =
        new operations.YoutubeLiveBroadcastsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.liveBroadcast = utils.objectToClass(
              httpRes?.data,
              shared.LiveBroadcast
            );
          }
          break;
      }

      return res;
    });
  }
}
