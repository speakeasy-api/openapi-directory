"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import authenticatedelement_enum as shared_authenticatedelement_enum
from ..shared import createbackendstorageresponse as shared_createbackendstorageresponse
from ..shared import unauthenticatedelement_enum as shared_unauthenticatedelement_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendStorageRequestBodyResourceConfigPermissions:
    r"""The authorization configuration for the storage S3 bucket."""
    
    authenticated: list[shared_authenticatedelement_enum.AuthenticatedElementEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Authenticated') }})  
    un_authenticated: Optional[list[shared_unauthenticatedelement_enum.UnAuthenticatedElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnAuthenticated'), 'exclude': lambda f: f is None }})  
    
class CreateBackendStorageRequestBodyResourceConfigServiceNameEnum(str, Enum):
    r"""The name of the storage service."""
    S3 = 'S3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendStorageRequestBodyResourceConfig:
    r"""The resource configuration for creating backend storage."""
    
    bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketName'), 'exclude': lambda f: f is None }})  
    permissions: Optional[CreateBackendStorageRequestBodyResourceConfigPermissions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permissions'), 'exclude': lambda f: f is None }})  
    service_name: Optional[CreateBackendStorageRequestBodyResourceConfigServiceNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendStorageRequestBody:
    
    backend_environment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendEnvironmentName') }})
    r"""The name of the backend environment."""  
    resource_config: CreateBackendStorageRequestBodyResourceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceConfig') }})
    r"""The resource configuration for creating backend storage."""  
    resource_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName') }})
    r"""The name of the storage resource."""  
    

@dataclasses.dataclass
class CreateBackendStorageRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The app ID."""  
    request_body: CreateBackendStorageRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateBackendStorageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_backend_storage_response: Optional[shared_createbackendstorageresponse.CreateBackendStorageResponse] = dataclasses.field(default=None)
    r"""Success"""  
    gateway_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GatewayTimeoutException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    