// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProposalInput - Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
type ProposalInput struct {
	// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
	BilledBuyer *Buyer `json:"billedBuyer,omitempty"`
	// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
	Buyer *Buyer `json:"buyer,omitempty"`
	// Contact information for the buyer.
	BuyerContacts []ContactInformation `json:"buyerContacts,omitempty"`
	// Buyers are allowed to store certain types of private data in a proposal/deal.
	BuyerPrivateData *PrivateData `json:"buyerPrivateData,omitempty"`
	// The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.
	Deals []DealInput `json:"deals,omitempty"`
	// The name for the proposal.
	DisplayName *string `json:"displayName,omitempty"`
	// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
	Seller *SellerInput `json:"seller,omitempty"`
}

// ProposalLastUpdaterOrCommentorRoleEnum - Output only. The role of the last user that either updated the proposal or left a comment.
type ProposalLastUpdaterOrCommentorRoleEnum string

const (
	ProposalLastUpdaterOrCommentorRoleEnumBuyerSellerRoleUnspecified ProposalLastUpdaterOrCommentorRoleEnum = "BUYER_SELLER_ROLE_UNSPECIFIED"
	ProposalLastUpdaterOrCommentorRoleEnumBuyer                      ProposalLastUpdaterOrCommentorRoleEnum = "BUYER"
	ProposalLastUpdaterOrCommentorRoleEnumSeller                     ProposalLastUpdaterOrCommentorRoleEnum = "SELLER"
)

func (e ProposalLastUpdaterOrCommentorRoleEnum) ToPointer() *ProposalLastUpdaterOrCommentorRoleEnum {
	return &e
}

func (e *ProposalLastUpdaterOrCommentorRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUYER_SELLER_ROLE_UNSPECIFIED":
		fallthrough
	case "BUYER":
		fallthrough
	case "SELLER":
		*e = ProposalLastUpdaterOrCommentorRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProposalLastUpdaterOrCommentorRoleEnum: %v", v)
	}
}

// ProposalOriginatorRoleEnum - Output only. Indicates whether the buyer/seller created the proposal.
type ProposalOriginatorRoleEnum string

const (
	ProposalOriginatorRoleEnumBuyerSellerRoleUnspecified ProposalOriginatorRoleEnum = "BUYER_SELLER_ROLE_UNSPECIFIED"
	ProposalOriginatorRoleEnumBuyer                      ProposalOriginatorRoleEnum = "BUYER"
	ProposalOriginatorRoleEnumSeller                     ProposalOriginatorRoleEnum = "SELLER"
)

func (e ProposalOriginatorRoleEnum) ToPointer() *ProposalOriginatorRoleEnum {
	return &e
}

func (e *ProposalOriginatorRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUYER_SELLER_ROLE_UNSPECIFIED":
		fallthrough
	case "BUYER":
		fallthrough
	case "SELLER":
		*e = ProposalOriginatorRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProposalOriginatorRoleEnum: %v", v)
	}
}

// ProposalProposalStateEnum - Output only. The current state of the proposal.
type ProposalProposalStateEnum string

const (
	ProposalProposalStateEnumProposalStateUnspecified ProposalProposalStateEnum = "PROPOSAL_STATE_UNSPECIFIED"
	ProposalProposalStateEnumProposed                 ProposalProposalStateEnum = "PROPOSED"
	ProposalProposalStateEnumBuyerAccepted            ProposalProposalStateEnum = "BUYER_ACCEPTED"
	ProposalProposalStateEnumSellerAccepted           ProposalProposalStateEnum = "SELLER_ACCEPTED"
	ProposalProposalStateEnumCanceled                 ProposalProposalStateEnum = "CANCELED"
	ProposalProposalStateEnumFinalized                ProposalProposalStateEnum = "FINALIZED"
)

func (e ProposalProposalStateEnum) ToPointer() *ProposalProposalStateEnum {
	return &e
}

func (e *ProposalProposalStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROPOSAL_STATE_UNSPECIFIED":
		fallthrough
	case "PROPOSED":
		fallthrough
	case "BUYER_ACCEPTED":
		fallthrough
	case "SELLER_ACCEPTED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "FINALIZED":
		*e = ProposalProposalStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProposalProposalStateEnum: %v", v)
	}
}

// Proposal - Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can't update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
type Proposal struct {
	// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
	BilledBuyer *Buyer `json:"billedBuyer,omitempty"`
	// Represents a buyer of inventory. Each buyer is identified by a unique Authorized Buyers account ID.
	Buyer *Buyer `json:"buyer,omitempty"`
	// Contact information for the buyer.
	BuyerContacts []ContactInformation `json:"buyerContacts,omitempty"`
	// Buyers are allowed to store certain types of private data in a proposal/deal.
	BuyerPrivateData *PrivateData `json:"buyerPrivateData,omitempty"`
	// The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.
	Deals []Deal `json:"deals,omitempty"`
	// The name for the proposal.
	DisplayName *string `json:"displayName,omitempty"`
	// Output only. True if the proposal is being renegotiated.
	IsRenegotiating *bool `json:"isRenegotiating,omitempty"`
	// Output only. True, if the buyside inventory setup is complete for this proposal.
	IsSetupComplete *bool `json:"isSetupComplete,omitempty"`
	// Output only. The role of the last user that either updated the proposal or left a comment.
	LastUpdaterOrCommentorRole *ProposalLastUpdaterOrCommentorRoleEnum `json:"lastUpdaterOrCommentorRole,omitempty"`
	// Output only. The notes associated with this proposal.
	Notes []Note `json:"notes,omitempty"`
	// Output only. Indicates whether the buyer/seller created the proposal.
	OriginatorRole *ProposalOriginatorRoleEnum `json:"originatorRole,omitempty"`
	// Output only. Private auction ID if this proposal is a private auction proposal.
	PrivateAuctionID *string `json:"privateAuctionId,omitempty"`
	// Output only. The unique ID of the proposal.
	ProposalID *string `json:"proposalId,omitempty"`
	// Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
	ProposalRevision *string `json:"proposalRevision,omitempty"`
	// Output only. The current state of the proposal.
	ProposalState *ProposalProposalStateEnum `json:"proposalState,omitempty"`
	// Represents a seller of inventory. Each seller is identified by a unique Ad Manager account ID.
	Seller *Seller `json:"seller,omitempty"`
	// Output only. Contact information for the seller.
	SellerContacts []ContactInformation `json:"sellerContacts,omitempty"`
	// Output only. The terms and conditions set by the publisher for this proposal.
	TermsAndConditions *string `json:"termsAndConditions,omitempty"`
	// Output only. The time when the proposal was last revised.
	UpdateTime *string `json:"updateTime,omitempty"`
}
