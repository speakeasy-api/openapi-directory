// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RenderResponseDataStatusEnum - The status of the render task. <ul>
//
//	<li>`queued` - render is queued waiting to be rendered</li>
//	<li>`fetching` - assets are being fetched</li>
//	<li>`rendering` - the asset is being rendered</li>
//	<li>`saving` - the final asset is being saved to storage</li>
//	<li>`done` - the asset is ready to be downloaded</li>
//	<li>`failed` - there was an error rendering the asset</li>
//
// </ul>
type RenderResponseDataStatusEnum string

const (
	RenderResponseDataStatusEnumQueued    RenderResponseDataStatusEnum = "queued"
	RenderResponseDataStatusEnumFetching  RenderResponseDataStatusEnum = "fetching"
	RenderResponseDataStatusEnumRendering RenderResponseDataStatusEnum = "rendering"
	RenderResponseDataStatusEnumSaving    RenderResponseDataStatusEnum = "saving"
	RenderResponseDataStatusEnumDone      RenderResponseDataStatusEnum = "done"
	RenderResponseDataStatusEnumFailed    RenderResponseDataStatusEnum = "failed"
)

func (e *RenderResponseDataStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "queued":
		fallthrough
	case "fetching":
		fallthrough
	case "rendering":
		fallthrough
	case "saving":
		fallthrough
	case "done":
		fallthrough
	case "failed":
		*e = RenderResponseDataStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RenderResponseDataStatusEnum: %s", s)
	}
}

// RenderResponseData - The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
type RenderResponseData struct {
	// The time the render task was initially queued.
	Created string `json:"created"`
	// An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format.
	Data Edit `json:"data"`
	// The output video or audio length in seconds.
	Duration *float64 `json:"duration,omitempty"`
	// An error message, only displayed if an error occurred.
	Error *string `json:"error,omitempty"`
	// The id of the render task in UUID format.
	ID string `json:"id"`
	// The owner id of the render task.
	Owner string `json:"owner"`
	// The customer subscription plan.
	Plan *string `json:"plan,omitempty"`
	// The URL of the poster image if requested. This will only be available if status is done.
	Poster *string `json:"poster,omitempty"`
	// The time taken to render the asset in milliseconds.
	RenderTime *float64 `json:"renderTime,omitempty"`
	// The status of the render task. <ul>
	//   <li>`queued` - render is queued waiting to be rendered</li>
	//   <li>`fetching` - assets are being fetched</li>
	//   <li>`rendering` - the asset is being rendered</li>
	//   <li>`saving` - the final asset is being saved to storage</li>
	//   <li>`done` - the asset is ready to be downloaded</li>
	//   <li>`failed` - there was an error rendering the asset</li>
	// </ul>
	Status RenderResponseDataStatusEnum `json:"status"`
	// The URL of the thumbnail image if requested. This will only be available if status is done.
	Thumbnail *string `json:"thumbnail,omitempty"`
	// The time the render status was last updated.
	Updated string `json:"updated"`
	// The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
	URL *string `json:"url,omitempty"`
}
