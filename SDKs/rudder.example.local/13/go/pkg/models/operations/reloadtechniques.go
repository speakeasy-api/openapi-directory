// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ReloadTechniques200ApplicationJSONActionEnum - The id of the action
type ReloadTechniques200ApplicationJSONActionEnum string

const (
	ReloadTechniques200ApplicationJSONActionEnumReloadTechniques ReloadTechniques200ApplicationJSONActionEnum = "reloadTechniques"
)

func (e *ReloadTechniques200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "reloadTechniques":
		*e = ReloadTechniques200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadTechniques200ApplicationJSONActionEnum: %s", s)
	}
}

type ReloadTechniques200ApplicationJSONDataTechniquesEnum string

const (
	ReloadTechniques200ApplicationJSONDataTechniquesEnumStarted ReloadTechniques200ApplicationJSONDataTechniquesEnum = "Started"
)

func (e *ReloadTechniques200ApplicationJSONDataTechniquesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Started":
		*e = ReloadTechniques200ApplicationJSONDataTechniquesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadTechniques200ApplicationJSONDataTechniquesEnum: %s", s)
	}
}

type ReloadTechniques200ApplicationJSONData struct {
	Techniques ReloadTechniques200ApplicationJSONDataTechniquesEnum `json:"techniques"`
}

// ReloadTechniques200ApplicationJSONResultEnum - Result of the request
type ReloadTechniques200ApplicationJSONResultEnum string

const (
	ReloadTechniques200ApplicationJSONResultEnumSuccess ReloadTechniques200ApplicationJSONResultEnum = "success"
	ReloadTechniques200ApplicationJSONResultEnumError   ReloadTechniques200ApplicationJSONResultEnum = "error"
)

func (e *ReloadTechniques200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ReloadTechniques200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadTechniques200ApplicationJSONResultEnum: %s", s)
	}
}

// ReloadTechniques200ApplicationJSON - Service reload
type ReloadTechniques200ApplicationJSON struct {
	// The id of the action
	Action ReloadTechniques200ApplicationJSONActionEnum `json:"action"`
	Data   ReloadTechniques200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ReloadTechniques200ApplicationJSONResultEnum `json:"result"`
}

type ReloadTechniquesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Service reload
	ReloadTechniques200ApplicationJSONObject *ReloadTechniques200ApplicationJSON
}
