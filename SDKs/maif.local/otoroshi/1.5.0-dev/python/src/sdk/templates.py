"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Templates:
    r"""Everything about Otoroshi entities templates"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def initiate_api_key(self) -> operations.InitiateAPIKeyResponse:
        r"""Get a template of an Otoroshi Api Key
        Get a template of an Otoroshi Api Key. The generated entity is not persisted
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/new/apikey'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InitiateAPIKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APIKey])
                res.api_key = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def initiate_service(self) -> operations.InitiateServiceResponse:
        r"""Get a template of an Otoroshi service descriptor
        Get a template of an Otoroshi service descriptor. The generated entity is not persisted
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/new/service'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InitiateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def initiate_service_group(self) -> operations.InitiateServiceGroupResponse:
        r"""Get a template of an Otoroshi service group
        Get a template of an Otoroshi service group. The generated entity is not persisted
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/new/group'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InitiateServiceGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Group])
                res.group = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    