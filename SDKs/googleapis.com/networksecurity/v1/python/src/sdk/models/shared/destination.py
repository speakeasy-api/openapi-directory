"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httpheadermatch as shared_httpheadermatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Destination:
    r"""Specification of traffic destination attributes."""
    
    hosts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""Required. List of host names to match. Matched against the \\":authority\\" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example \\"mydomain.*\\") or a suffix match (example \\"*.myorg.com\\") or a presence (any) match \\"*\\"."""  
    http_header_match: Optional[shared_httpheadermatch.HTTPHeaderMatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpHeaderMatch'), 'exclude': lambda f: f is None }})
    r"""Specification of HTTP header match attributes."""  
    methods: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methods'), 'exclude': lambda f: f is None }})
    r"""Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services."""  
    ports: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ports'), 'exclude': lambda f: f is None }})
    r"""Required. List of destination ports to match. At least one port should match."""  
    