"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import dependabot_alert as shared_dependabot_alert
from ..shared import dependabot_alert_scope_enum as shared_dependabot_alert_scope_enum
from ..shared import dependabot_alert_sort_enum as shared_dependabot_alert_sort_enum
from ..shared import direction_enum as shared_direction_enum
from ..shared import scim_error as shared_scim_error
from ..shared import validation_error_simple as shared_validation_error_simple
from typing import Optional


@dataclasses.dataclass
class DependabotListAlertsForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    r"""A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.8/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor."""  
    before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'before', 'style': 'form', 'explode': True }})
    r"""A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.8/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor."""  
    direction: Optional[shared_direction_enum.DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The direction to sort the results by."""  
    ecosystem: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ecosystem', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
    
    Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
    """  
    first: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'first', 'style': 'form', 'explode': True }})
    r"""**Deprecated**. The number of results per page (max 100), starting from the first matching result.
    This parameter must not be used in combination with `last`.
    Instead, use `per_page` in combination with `after` to fetch the first page of results.
    """  
    last: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last', 'style': 'form', 'explode': True }})
    r"""**Deprecated**. The number of results per page (max 100), starting from the last matching result.
    This parameter must not be used in combination with `first`.
    Instead, use `per_page` in combination with `before` to fetch the last page of results.
    """  
    manifest: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manifest', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned."""  
    package: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'package', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of package names. If specified, only alerts for these packages will be returned."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""**Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    scope: Optional[shared_dependabot_alert_scope_enum.DependabotAlertScopeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned."""  
    severity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'severity', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of severities. If specified, only alerts with these severities will be returned.
    
    Can be: `low`, `medium`, `high`, `critical`
    """  
    sort: Optional[shared_dependabot_alert_sort_enum.DependabotAlertSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The property by which to sort the results.
    `created` means when the alert was created.
    `updated` means when the alert's state last changed.
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""A comma-separated list of states. If specified, only alerts with these states will be returned.
    
    Can be: `dismissed`, `fixed`, `open`
    """  
    

@dataclasses.dataclass
class DependabotListAlertsForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    dependabot_alerts: Optional[list[shared_dependabot_alert.DependabotAlert]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    validation_error_simple: Optional[shared_validation_error_simple.ValidationErrorSimple] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    