"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import creativeassignment as shared_creativeassignment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreativeRotationTypeEnum(str, Enum):
    r"""Type of creative rotation. Can be used to specify whether to use sequential or random rotation."""
    CREATIVE_ROTATION_TYPE_SEQUENTIAL = 'CREATIVE_ROTATION_TYPE_SEQUENTIAL'
    CREATIVE_ROTATION_TYPE_RANDOM = 'CREATIVE_ROTATION_TYPE_RANDOM'

class CreativeRotationWeightCalculationStrategyEnum(str, Enum):
    r"""Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM."""
    WEIGHT_STRATEGY_EQUAL = 'WEIGHT_STRATEGY_EQUAL'
    WEIGHT_STRATEGY_CUSTOM = 'WEIGHT_STRATEGY_CUSTOM'
    WEIGHT_STRATEGY_HIGHEST_CTR = 'WEIGHT_STRATEGY_HIGHEST_CTR'
    WEIGHT_STRATEGY_OPTIMIZED = 'WEIGHT_STRATEGY_OPTIMIZED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreativeRotation:
    r"""Creative Rotation."""
    
    creative_assignments: Optional[list[shared_creativeassignment.CreativeAssignment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeAssignments'), 'exclude': lambda f: f is None }})
    r"""Creative assignments in this creative rotation."""  
    creative_optimization_configuration_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeOptimizationConfigurationId'), 'exclude': lambda f: f is None }})
    r"""Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad."""  
    type: Optional[CreativeRotationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of creative rotation. Can be used to specify whether to use sequential or random rotation."""  
    weight_calculation_strategy: Optional[CreativeRotationWeightCalculationStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weightCalculationStrategy'), 'exclude': lambda f: f is None }})
    r"""Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM."""  
    