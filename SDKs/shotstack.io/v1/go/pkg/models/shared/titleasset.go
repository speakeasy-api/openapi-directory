// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TitleAssetPositionEnum - Place the title in one of nine predefined positions of the viewport. <ul>
//
//	<li>`top` - top (center)</li>
//	<li>`topRight` - top right</li>
//	<li>`right` - right (center)</li>
//	<li>`bottomRight` - bottom right</li>
//	<li>`bottom` - bottom (center)</li>
//	<li>`bottomLeft` - bottom left</li>
//	<li>`left` - left (center)</li>
//	<li>`topLeft` - top left</li>
//	<li>`center` - center</li>
//
// </ul>
type TitleAssetPositionEnum string

const (
	TitleAssetPositionEnumTop         TitleAssetPositionEnum = "top"
	TitleAssetPositionEnumTopRight    TitleAssetPositionEnum = "topRight"
	TitleAssetPositionEnumRight       TitleAssetPositionEnum = "right"
	TitleAssetPositionEnumBottomRight TitleAssetPositionEnum = "bottomRight"
	TitleAssetPositionEnumBottom      TitleAssetPositionEnum = "bottom"
	TitleAssetPositionEnumBottomLeft  TitleAssetPositionEnum = "bottomLeft"
	TitleAssetPositionEnumLeft        TitleAssetPositionEnum = "left"
	TitleAssetPositionEnumTopLeft     TitleAssetPositionEnum = "topLeft"
	TitleAssetPositionEnumCenter      TitleAssetPositionEnum = "center"
)

func (e TitleAssetPositionEnum) ToPointer() *TitleAssetPositionEnum {
	return &e
}

func (e *TitleAssetPositionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "topRight":
		fallthrough
	case "right":
		fallthrough
	case "bottomRight":
		fallthrough
	case "bottom":
		fallthrough
	case "bottomLeft":
		fallthrough
	case "left":
		fallthrough
	case "topLeft":
		fallthrough
	case "center":
		*e = TitleAssetPositionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TitleAssetPositionEnum: %v", v)
	}
}

// TitleAssetSizeEnum - Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>
//
//	<li>`xx-small`</li>
//	<li>`x-small`</li>
//	<li>`small`</li>
//	<li>`medium`</li>
//	<li>`large`</li>
//	<li>`x-large`</li>
//	<li>`xx-large`</li>
//
// </ul>
type TitleAssetSizeEnum string

const (
	TitleAssetSizeEnumXxSmall TitleAssetSizeEnum = "xx-small"
	TitleAssetSizeEnumXSmall  TitleAssetSizeEnum = "x-small"
	TitleAssetSizeEnumSmall   TitleAssetSizeEnum = "small"
	TitleAssetSizeEnumMedium  TitleAssetSizeEnum = "medium"
	TitleAssetSizeEnumLarge   TitleAssetSizeEnum = "large"
	TitleAssetSizeEnumXLarge  TitleAssetSizeEnum = "x-large"
	TitleAssetSizeEnumXxLarge TitleAssetSizeEnum = "xx-large"
)

func (e TitleAssetSizeEnum) ToPointer() *TitleAssetSizeEnum {
	return &e
}

func (e *TitleAssetSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xx-small":
		fallthrough
	case "x-small":
		fallthrough
	case "small":
		fallthrough
	case "medium":
		fallthrough
	case "large":
		fallthrough
	case "x-large":
		fallthrough
	case "xx-large":
		*e = TitleAssetSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TitleAssetSizeEnum: %v", v)
	}
}

// TitleAssetStyleEnum - Uses a preset to apply font properties and styling to the title. <ul>
//
//	<li>`minimal`</li>
//	<li>`blockbuster`</li>
//	<li>`vogue`</li>
//	<li>`sketchy`</li>
//	<li>`skinny`</li>
//	<li>`chunk`</li>
//	<li>`chunkLight`</li>
//	<li>`marker`</li>
//	<li>`future`</li>
//	<li>`subtitle`</li>
//
// </ul>
type TitleAssetStyleEnum string

const (
	TitleAssetStyleEnumMinimal     TitleAssetStyleEnum = "minimal"
	TitleAssetStyleEnumBlockbuster TitleAssetStyleEnum = "blockbuster"
	TitleAssetStyleEnumVogue       TitleAssetStyleEnum = "vogue"
	TitleAssetStyleEnumSketchy     TitleAssetStyleEnum = "sketchy"
	TitleAssetStyleEnumSkinny      TitleAssetStyleEnum = "skinny"
	TitleAssetStyleEnumChunk       TitleAssetStyleEnum = "chunk"
	TitleAssetStyleEnumChunkLight  TitleAssetStyleEnum = "chunkLight"
	TitleAssetStyleEnumMarker      TitleAssetStyleEnum = "marker"
	TitleAssetStyleEnumFuture      TitleAssetStyleEnum = "future"
	TitleAssetStyleEnumSubtitle    TitleAssetStyleEnum = "subtitle"
)

func (e TitleAssetStyleEnum) ToPointer() *TitleAssetStyleEnum {
	return &e
}

func (e *TitleAssetStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minimal":
		fallthrough
	case "blockbuster":
		fallthrough
	case "vogue":
		fallthrough
	case "sketchy":
		fallthrough
	case "skinny":
		fallthrough
	case "chunk":
		fallthrough
	case "chunkLight":
		fallthrough
	case "marker":
		fallthrough
	case "future":
		fallthrough
	case "subtitle":
		*e = TitleAssetStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TitleAssetStyleEnum: %v", v)
	}
}

// TitleAsset - The TitleAsset clip type lets you create video titles from a text string and apply styling and positioning.
type TitleAsset struct {
	// Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.
	Background *string `json:"background,omitempty"`
	// Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
	Color *string `json:"color,omitempty"`
	// Offsets the position of an asset horizontally or vertically by a relative distance.
	Offset *Offset `json:"offset,omitempty"`
	// Place the title in one of nine predefined positions of the viewport. <ul>
	//   <li>`top` - top (center)</li>
	//   <li>`topRight` - top right</li>
	//   <li>`right` - right (center)</li>
	//   <li>`bottomRight` - bottom right</li>
	//   <li>`bottom` - bottom (center)</li>
	//   <li>`bottomLeft` - bottom left</li>
	//   <li>`left` - left (center)</li>
	//   <li>`topLeft` - top left</li>
	//   <li>`center` - center</li>
	// </ul>
	Position *TitleAssetPositionEnum `json:"position,omitempty"`
	// Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>
	//   <li>`xx-small`</li>
	//   <li>`x-small`</li>
	//   <li>`small`</li>
	//   <li>`medium`</li>
	//   <li>`large`</li>
	//   <li>`x-large`</li>
	//   <li>`xx-large`</li>
	// </ul>
	Size *TitleAssetSizeEnum `json:"size,omitempty"`
	// Uses a preset to apply font properties and styling to the title. <ul>
	//   <li>`minimal`</li>
	//   <li>`blockbuster`</li>
	//   <li>`vogue`</li>
	//   <li>`sketchy`</li>
	//   <li>`skinny`</li>
	//   <li>`chunk`</li>
	//   <li>`chunkLight`</li>
	//   <li>`marker`</li>
	//   <li>`future`</li>
	//   <li>`subtitle`</li>
	// </ul>
	Style *TitleAssetStyleEnum `json:"style,omitempty"`
	// The title text string - i.e. "My Title".
	Text string `json:"text"`
	// The type of asset - set to `title` for titles.
	Type string `json:"type"`
}
