<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PaymentRuns 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a payment run
     * 
     * Deletes a payment run. Only payment runs with the Canceled or Error status can be deleted.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunResponse
     */
	public function deletePaymentRun(
        \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs/{paymentRunId}', \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETEPaymentRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a payment run
     * 
     * Retrives the information about a specific payment run.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunResponse
     */
	public function getPaymentRun(
        \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs/{paymentRunId}', \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve payment run data
     * 
     * Retrieves payment run data and the processing result with details, if the `data` field was specified in the Create payment run operation.
     *    
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataResponse
     */
	public function getPaymentRunData(
        \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs/{paymentRunId}/data', \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunDataArrayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunDataArrayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a payment run summary
     * 
     * Retrives the summary of a payment run.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryResponse
     */
	public function getPaymentRunSummary(
        \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs/{paymentRunId}/summary', \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunSummaryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunSummaryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List payment runs
     * 
     * Retrieves the information about all payment runs. You can define filterable fields to restrict the data returned in the response.
     * 
     * ### Filtering
     * 
     * You can use query parameters to restrict the data returned in the response. Each query parameter corresponds to one field in the response body.
     * 
     * If the value of a filterable field is string, you can set the corresponding query parameter to `null` when filtering. Then, you can get the response data with this field value being `null`. 
     * 
     * Examples:
     * 
     * - /v1/payment-runs?status=Processed
     * 
     * - /v1/payment-runs?targetDate=2017-10-10&status=Pending
     * 
     * - /v1/payment-runs?status=Completed&sort=+updatedDate
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsResponse
     */
	public function getPaymentRuns(
        \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPaymentRunsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunCollectionType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunCollectionType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a payment run
     * 
     * Creates a payment run. You can create a payment run to be executed immediately after it is created, or a scheduled payment run to be executed in future.
     * 
     * To filter the payments to be collected for a payment run, you can use either of the following methods but not both:
     * 
     *   - Use the `accountId`, `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields to define the billing documents to be collected.
     *   - Use the `data` field to specify the records of accounts and billing documents to be collected, in a more flexible manner.
     * 
     * If no filter criteria are specified in the request body, the payment run collects payments for all accounts.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTPaymentRunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTPaymentRunResponse
     */
	public function postPaymentRun(
        \OpenAPI\OpenAPI\Models\Operations\POSTPaymentRunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTPaymentRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postPaymentRunRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTPaymentRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a payment run
     * 
     * Updates the information about an unexecuted payment run. Only pending payment runs can be updated.
     * 
     * If none of the **accountId**, **batch**, **billCycleDay**, **currency**, **paymentGatewayId**, and **billingRunId** fields is specified in the request body, the corresponding payment run collects payments for all accounts.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunResponse
     */
	public function putPaymentRun(
        \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payment-runs/{paymentRunId}', \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putPaymentRunRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTPaymentRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentRunType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentRunType', 'json');
            }
        }

        return $response;
    }
}