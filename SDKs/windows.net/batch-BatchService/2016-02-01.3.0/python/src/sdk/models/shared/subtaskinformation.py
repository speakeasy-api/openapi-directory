"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import computenodeinformation as shared_computenodeinformation
from ..shared import taskschedulingerror as shared_taskschedulingerror
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SubtaskInformationPreviousStateEnum(str, Enum):
    r"""The previous state of the subtask. This property is not set if the subtask is in its initial Active state."""
    ACTIVE = 'active'
    PREPARING = 'preparing'
    RUNNING = 'running'
    COMPLETED = 'completed'

class SubtaskInformationStateEnum(str, Enum):
    r"""The current state of the subtask."""
    ACTIVE = 'active'
    PREPARING = 'preparing'
    RUNNING = 'running'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubtaskInformation:
    r"""Information about an Azure Batch subtask."""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which the subtask completed. This property is set only if the subtask is in the Completed state."""  
    exit_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exitCode'), 'exclude': lambda f: f is None }})
    r"""The exit code of the subtask. This property is set only if the subtask is in the Completed state."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The id of the subtask."""  
    node_info: Optional[shared_computenodeinformation.ComputeNodeInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeInfo'), 'exclude': lambda f: f is None }})
    r"""Information about the compute node on which a task ran."""  
    previous_state: Optional[SubtaskInformationPreviousStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousState'), 'exclude': lambda f: f is None }})
    r"""The previous state of the subtask. This property is not set if the subtask is in its initial Active state."""  
    previous_state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousStateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial Active state."""  
    scheduling_error: Optional[shared_taskschedulingerror.TaskSchedulingError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingError'), 'exclude': lambda f: f is None }})
    r"""Information about an error when scheduling a task."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running."""  
    state: Optional[SubtaskInformationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current state of the subtask."""  
    state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which the subtask entered its current state."""  
    