// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type UpdateNetworkSwitchRoutingMulticastPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkSwitchRoutingMulticastRequestBodyDefaultSettings - Default multicast setting for entire network. IGMP snooping and Flood unknown multicast traffic settings are enabled by default.
type UpdateNetworkSwitchRoutingMulticastRequestBodyDefaultSettings struct {
	// Flood unknown multicast traffic setting for entire network
	FloodUnknownMulticastTrafficEnabled *bool `json:"floodUnknownMulticastTrafficEnabled,omitempty"`
	// IGMP snooping setting for entire network
	IgmpSnoopingEnabled *bool `json:"igmpSnoopingEnabled,omitempty"`
}

type UpdateNetworkSwitchRoutingMulticastRequestBodyOverrides struct {
	// Flood unknown multicast traffic setting for switches, switch stacks or switch profiles
	FloodUnknownMulticastTrafficEnabled bool `json:"floodUnknownMulticastTrafficEnabled"`
	// IGMP snooping setting for switches, switch stacks or switch profiles
	IgmpSnoopingEnabled bool `json:"igmpSnoopingEnabled"`
	// List of switch stack ids for non-template network
	Stacks []string `json:"stacks,omitempty"`
	// List of switch profiles ids for template network
	SwitchProfiles []string `json:"switchProfiles,omitempty"`
	// List of switch serials for non-template network
	Switches []string `json:"switches,omitempty"`
}

type UpdateNetworkSwitchRoutingMulticastRequestBody struct {
	// Default multicast setting for entire network. IGMP snooping and Flood unknown multicast traffic settings are enabled by default.
	DefaultSettings *UpdateNetworkSwitchRoutingMulticastRequestBodyDefaultSettings `json:"defaultSettings,omitempty"`
	// Array of paired switches/stacks/profiles and corresponding multicast settings. An empty array will clear the multicast settings.
	Overrides []UpdateNetworkSwitchRoutingMulticastRequestBodyOverrides `json:"overrides,omitempty"`
}

type UpdateNetworkSwitchRoutingMulticastRequest struct {
	PathParams UpdateNetworkSwitchRoutingMulticastPathParams
	Request    *UpdateNetworkSwitchRoutingMulticastRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkSwitchRoutingMulticastResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchRoutingMulticast200ApplicationJSONObject map[string]interface{}
}
