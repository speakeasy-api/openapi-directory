"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import links_auto_getautoimportconfigurationlink as shared_links_auto_getautoimportconfigurationlink
from ..shared import links_catalog_computeexpressionlink as shared_links_catalog_computeexpressionlink
from ..shared import links_catalog_getcatalogcolumnslink as shared_links_catalog_getcatalogcolumnslink
from ..shared import links_catalog_getcategorieslink as shared_links_catalog_getcategorieslink
from ..shared import links_catalog_getcustomcolumnslink as shared_links_catalog_getcustomcolumnslink
from ..shared import links_catalog_getproductslink as shared_links_catalog_getproductslink
from ..shared import links_catalog_getrandomproductslink as shared_links_catalog_getrandomproductslink
from ..shared import links_catalogstoreindexlink as shared_links_catalogstoreindexlink
from ..shared import links_importation_getmanualupdatelastinputconfiglink as shared_links_importation_getmanualupdatelastinputconfiglink
from ..shared import links_importation_getreportingslink as shared_links_importation_getreportingslink
from ..shared import links_importation_startmanualupdatelink as shared_links_importation_startmanualupdatelink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogStoreIndexLinks:
    
    self_: shared_links_catalogstoreindexlink.LinksCatalogStoreIndexLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})  
    auto_import_info: Optional[shared_links_auto_getautoimportconfigurationlink.LinksAutoGetAutoImportConfigurationLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoImportInfo'), 'exclude': lambda f: f is None }})  
    catalog_columns: Optional[shared_links_catalog_getcatalogcolumnslink.LinksCatalogGetCatalogColumnsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogColumns'), 'exclude': lambda f: f is None }})  
    categories: Optional[shared_links_catalog_getcategorieslink.LinksCatalogGetCategoriesLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})  
    compute_expression: Optional[shared_links_catalog_computeexpressionlink.LinksCatalogComputeExpressionLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computeExpression'), 'exclude': lambda f: f is None }})  
    custom_columns: Optional[shared_links_catalog_getcustomcolumnslink.LinksCatalogGetCustomColumnsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customColumns'), 'exclude': lambda f: f is None }})  
    importations: Optional[shared_links_importation_getreportingslink.LinksImportationGetReportingsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importations'), 'exclude': lambda f: f is None }})  
    input_configuration: Optional[shared_links_importation_getmanualupdatelastinputconfiglink.LinksImportationGetManualUpdateLastInputConfigLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfiguration'), 'exclude': lambda f: f is None }})  
    products: Optional[shared_links_catalog_getproductslink.LinksCatalogGetProductsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})  
    random_products: Optional[shared_links_catalog_getrandomproductslink.LinksCatalogGetRandomProductsLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('randomProducts'), 'exclude': lambda f: f is None }})  
    start_importation: Optional[shared_links_importation_startmanualupdatelink.LinksImportationStartManualUpdateLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startImportation'), 'exclude': lambda f: f is None }})  
    