"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datalakeprincipal as shared_datalakeprincipal
from ..shared import principalpermissions as shared_principalpermissions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataLakeSettings:
    r"""A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions."""
    
    allow_external_data_filtering: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowExternalDataFiltering'), 'exclude': lambda f: f is None }})  
    authorized_session_tag_value_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizedSessionTagValueList'), 'exclude': lambda f: f is None }})  
    create_database_default_permissions: Optional[list[shared_principalpermissions.PrincipalPermissions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateDatabaseDefaultPermissions'), 'exclude': lambda f: f is None }})  
    create_table_default_permissions: Optional[list[shared_principalpermissions.PrincipalPermissions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateTableDefaultPermissions'), 'exclude': lambda f: f is None }})  
    data_lake_admins: Optional[list[shared_datalakeprincipal.DataLakePrincipal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataLakeAdmins'), 'exclude': lambda f: f is None }})  
    external_data_filtering_allow_list: Optional[list[shared_datalakeprincipal.DataLakePrincipal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExternalDataFilteringAllowList'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})  
    trusted_resource_owners: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrustedResourceOwners'), 'exclude': lambda f: f is None }})  
    