"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .accounts import Accounts
from .api import API
from .authentication import Authentication
from .cards import Cards
from .direct_debits import DirectDebits
from .open_banking import OpenBanking
from .payee_bank_accounts import PayeeBankAccounts
from .payment_batches import PaymentBatches
from .transactions import Transactions
from .users import Users
from sdk.models import shared

SERVERS = [
    "https://api.fire.com/business",
    r"""Production Server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.
    
    The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.
    
    
    The API exposes 3 main areas of functionality: financial functions, service information and service configuration.
    ## Financial Functions
    These functions provide access to your account details, transactions, payee accounts, payment initiation etc.
    ## Service Functions
    These provide information about the fees and limits applied to your account.
    ## Service configuration
    These provide information about your service configs - applications, webhooks, API tokens, etc.
    """
    api: API
    r"""Manage your API Applications and Webhooks"""
    accounts: Accounts
    r"""fire.com Accounts are the equivalent of a bank account from bank."""
    authentication: Authentication
    r"""Access to the API is by Bearer Tokens. The process is somewhat similar to OAuth2.0, but with some changes to improve security.
    1. You must first log into the firework online application and create a new Application in the Profile > API page. (You will need your PIN digits and 2-Factor Authentication device).
    2. Give your application a Name and select the scope/permissions you need the application to have (more on Scopes below).
    3. You will be provided with three pieces of information - the App Refresh Token, Client ID and Client Key. You need to take note of the Client Key when it is displayed - it will not be shown again.
    
    You now use these pieces of data to retrieve a short-term Access Token which you can use to access the API. The Access Token expires within a relatively short time, so even if it is compromised, the attacker will not have long to use it. The Client Key is the most important piece of information to keep secret. This should only ever be stored on a backend server, and never in a front end client or mobile app.
    
    **If you ever accidentally reveal the Client Key (or accidentally commit it to Github for instance) it is vital that you log into firework online and delete/recreate the App Tokens as soon as possible. Anyone who has these three pieces of data can access the API to view your data and set up payments from your account (depending on the scope of the tokens).**
    
    Once you have the access token, pass it as a header for every call, like so:
    `Authorization: Bearer $ACCESS_TOKEN`
    Whenever it expires, create a new nonce and get a new access token again.
    """
    cards: Cards
    direct_debits: DirectDebits
    r"""The fire.com api allows businesses to automate direct debit payment actions on their fire.com business accounts.
    
    You can retrieve details of your direct debit payments, direct debit mandates and also take actions on both your direct debit payments and mandates.
    """
    open_banking: OpenBanking
    r"""Fire Open Payments is a feature of the fire.com business account that leverages Open Banking to allow your customers to pay you via bank transfer and to reconcile those payments as they are received into your fire.com GBP or EUR account.
    
    To set up each Fire Open Payment you first need to create a payment request. This contains the details of the payment such as the amount, destination account, description as well as various other specific fields that you want to associate with the payment. The payment request is represented as a URL with a unique code which can then be incorporated into an eCommerce shopping cart as an alternative form of payment. For example, you can put “Pay by Bank” on your website along with “Pay by Card” and “Pay by PayPal”. It can also be distributed by a variety of means such as by email, SMS, WhatsApp, encoded as a QR code, NFC tag, etc.
    
    Consumers confirm the payment details such as the amount are correct, select their bank and authorise the payment. Payments can be made from all major UK banks.
    
    The funds are settled into your fire.com account, fully reconciled, with your specified fields provided.
    
    There are two implementation options you can use to display payment pages with Fire Open Payments.
    1. **Hosted Payment Pages:** fire.com hosts the payment pages - this option allows you to re-direct your customer to the hosted fire.com payment pages displaying the payment details confirmation, bank selection, consent and response pages.
    2. **Integrated Payment Pages:** You host the payments page yourself - this option allows you to have control of the UI and UX for displaying the payment details confirmation, bank selection and response pages. Once the response is received, fire.com can re-direct the payer back to your website.
    
    ## Hosted Payment Pages Option
    ![Image](https://fire.com/docs/images/fop-hosted-flow.png)
    
    The payer is brought through 5 stages to complete the payment:
    1. **View Payment Details page:** The payer must first be clear on the amount of the payment, who they are paying and the reason for the payment.
    2. **Select Bank / Account Provider page:** The payer then selects their bank. Again this step is offered as part of the fire.com payment UI.
    3. **Consent page:**  The payer must provide consent to the PISP (fire.com) prior to authorising the payment. This is a regulatory requirement, this page must be hosted by fire.com.
    4. **Authenticate and Authorise Payment:** The payer will be redirected to their bank’s online site or mobile banking app. After authenticating, the details of the payment will be displayed, and the payer will authorise the payment.
    5. **Response page:** It is a regulatory requirement that the PISP (fire.com) display the results of the payment and provide the same information that would be provided if the payer had made the payment via their banking application. fire.com must display this page, before optionally redirecting the payer back to your website.
    
    To implement the hosted Fire Open Payments option you need to do the following:
    1. You can create a new Fire Open Payment request either within Firework Online or via the API.
    2. Create your new API application with the appropriate permissions required in Firework Online, as outlined in the “Authentication” steps. The permissions needed are:
        - “Create a Payment Request”
        - “Get Payment Details”
    
    3. Use the Refresh Token, Client ID and Client Key to create an access token as outlined in the “Authentication” steps.
    4. On your website, create a “Pay by Bank” button alongside your other available payment methods, such as Cards and PayPal.
    5. After the user clicks on “Pay by Bank”, you need to create a new Fire Open Payment request as outlined in the “Create a Fire Open Payment” steps. The Create a Fire Open Payment request endpoint returns a unique code for the payment request.
    6. Create a URL using the code returned in this format: `https://payments.fire.com/{code}` and redirect your customer to this page.
    7. fire.com will host all the pages that the customer needs to review and authorise the payment. fire.com will will return the paymentUUID of the successful or failed transaction to the returnUrl that you supplied when creating the Fire Open Payment request. fire.com can also optionally send a “webhook” to your website notifying you of the transaction’s outcome.
    8. Once fire.com responds with the paymentUUID and/or the webhook to your website, you need to call the “Get Payment Details” endpoint to get the details of the transaction. This will let you know whether the transaction was successful or not. You can set up the “Payment Request Payment Authorised” webhook to notify you once the payment is authorised or cancelled.
    9. The funds will be received into your GBP or EUR account. Funding will typically be within 6 business hours.
    
    Once the code is returned the payment can be viewed and paid by going to the following URL: `https://payments.fire.com/{code}`
    """
    payee_bank_accounts: PayeeBankAccounts
    payment_batches: PaymentBatches
    r"""The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.
    
    For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.
    
    
    The process is as follows:
    
    **1.**Create a new batch
    
    **2.**Add payments to the batch
    
    **3.**Submit the batch for approval
    
    Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.
    
    **Batch Life Cycle Events**
    
    A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.
    
    The following events are triggered during a batch:
    
    **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.
    
    **batch.item-added:** Details of the item added to the batch
    
    **batch.item-removed:** Details of the item removed from the batch
    
    **batch.cancelled:** Notifies that the batch was cancelled.
    
    **batch.submitted:** Notifes that the batch was submitted
    
    **batch.approved:** Notifies that the batch was approved.
    
    **batch.rejected:** Notifies that the batch was rejected.
    
    **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)
    
    **batch.completed:** Notifies that the batch completed successfully. Includes a summary.
    
    Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.
    """
    transactions: Transactions
    r"""While there are many types of transactions, they are all represented by the same JSON object with a different txnType."""
    users: Users

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.api = API(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.accounts = Accounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.authentication = Authentication(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.cards = Cards(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.direct_debits = DirectDebits(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.open_banking = OpenBanking(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payee_bank_accounts = PayeeBankAccounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payment_batches = PaymentBatches(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.transactions = Transactions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    