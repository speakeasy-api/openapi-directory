"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://azure-api.sportsdata.io/v3/cfb/scores",
    "https://azure-api.sportsdata.io/v3/cfb/scores",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""CFB schedules, scores, team stats, odds, weather, and news API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def are_games_in_progress(self, request: operations.AreGamesInProgressRequest) -> operations.AreGamesInProgressResponse:
        r"""Are Games In Progress
        Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AreGamesInProgressRequest, base_url, '/{format}/AreAnyGamesInProgress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AreGamesInProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.are_games_in_progress_200_application_json_boolean = out

        return res

    def conference_hierarchy_with_teams(self, request: operations.ConferenceHierarchyWithTeamsRequest) -> operations.ConferenceHierarchyWithTeamsResponse:
        r"""Conference Hierarchy (with Teams)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConferenceHierarchyWithTeamsRequest, base_url, '/{format}/LeagueHierarchy', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConferenceHierarchyWithTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Conference]])
                res.conferences = out

        return res

    def current_season(self, request: operations.CurrentSeasonRequest) -> operations.CurrentSeasonResponse:
        r"""Current Season"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CurrentSeasonRequest, base_url, '/{format}/CurrentSeason', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CurrentSeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.current_season_200_application_json_integer = out

        return res

    def current_season_details(self, request: operations.CurrentSeasonDetailsRequest) -> operations.CurrentSeasonDetailsResponse:
        r"""Current Season Details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CurrentSeasonDetailsRequest, base_url, '/{format}/CurrentSeasonDetails', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CurrentSeasonDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Season])
                res.season = out

        return res

    def current_seasontype(self, request: operations.CurrentSeasontypeRequest) -> operations.CurrentSeasontypeResponse:
        r"""Current SeasonType"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CurrentSeasontypeRequest, base_url, '/{format}/CurrentSeasonType', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CurrentSeasontypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.current_seasontype_200_application_json_string = http_res.content

        return res

    def current_week(self, request: operations.CurrentWeekRequest) -> operations.CurrentWeekResponse:
        r"""Current Week"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CurrentWeekRequest, base_url, '/{format}/CurrentWeek', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CurrentWeekResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[int])
                res.current_week_200_application_json_integer = out

        return res

    def games_by_date(self, request: operations.GamesByDateRequest) -> operations.GamesByDateResponse:
        r"""Games by Date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesByDateRequest, base_url, '/{format}/GamesByDate/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesByDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def games_by_week(self, request: operations.GamesByWeekRequest) -> operations.GamesByWeekResponse:
        r"""Games by Week"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GamesByWeekRequest, base_url, '/{format}/GamesByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GamesByWeekResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def injured_players(self, request: operations.InjuredPlayersRequest) -> operations.InjuredPlayersResponse:
        r"""Injured Players
        This endpoint provides all currently injured college football players, along with injury details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InjuredPlayersRequest, base_url, '/{format}/InjuredPlayers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InjuredPlayersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_active(self, request: operations.PlayerDetailsByActiveRequest) -> operations.PlayerDetailsByActiveResponse:
        r"""Player Details By Active"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByActiveRequest, base_url, '/{format}/Players', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByActiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_player(self, request: operations.PlayerDetailsByPlayerRequest) -> operations.PlayerDetailsByPlayerResponse:
        r"""Player Details By Player"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByPlayerRequest, base_url, '/{format}/Player/{playerid}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def player_details_by_team(self, request: operations.PlayerDetailsByTeamRequest) -> operations.PlayerDetailsByTeamResponse:
        r"""Player Details by Team"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlayerDetailsByTeamRequest, base_url, '/{format}/Players/{team}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlayerDetailsByTeamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Player]])
                res.players = out

        return res

    def schedules(self, request: operations.SchedulesRequest) -> operations.SchedulesResponse:
        r"""Schedules"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchedulesRequest, base_url, '/{format}/Games/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchedulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Game]])
                res.games = out

        return res

    def stadiums(self, request: operations.StadiumsRequest) -> operations.StadiumsResponse:
        r"""Stadiums"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StadiumsRequest, base_url, '/{format}/Stadiums', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StadiumsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Stadium]])
                res.stadiums = out

        return res

    def team_game_logs_by_season(self, request: operations.TeamGameLogsBySeasonRequest) -> operations.TeamGameLogsBySeasonResponse:
        r"""Team Game Logs By Season
        Game by game log of total team statistics.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameLogsBySeasonRequest, base_url, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameLogsBySeasonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_game_stats_by_week(self, request: operations.TeamGameStatsByWeekRequest) -> operations.TeamGameStatsByWeekResponse:
        r"""Team Game Stats by Week"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamGameStatsByWeekRequest, base_url, '/{format}/TeamGameStatsByWeek/{season}/{week}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamGameStatsByWeekResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamGame]])
                res.team_games = out

        return res

    def team_season_stats_standings(self, request: operations.TeamSeasonStatsStandingsRequest) -> operations.TeamSeasonStatsStandingsResponse:
        r"""Team Season Stats & Standings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamSeasonStatsStandingsRequest, base_url, '/{format}/TeamSeasonStats/{season}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamSeasonStatsStandingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSeason]])
                res.team_seasons = out

        return res

    def teams(self, request: operations.TeamsRequest) -> operations.TeamsResponse:
        r"""Teams"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TeamsRequest, base_url, '/{format}/Teams', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Team]])
                res.teams = out

        return res

    