"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DoctorMessageMessageNote:
    r"""Additional note"""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/users` who created the note"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Content of the note"""  
    
class DoctorMessageTypeEnum(str, Enum):
    r"""Value | Description
    ----- | -----------
    `\"GP\"` | Generated PDF
    `\"GC\"` | Generated CSV
    `\"GZ\"` | Generated ZIP
    `\"IF\"` | Incoming Fax
    `\"OF\"` | Outgoing Fax
    `\"IL\"` | Incoming Labs
    `\"IR\"` | Inbound Referrals
    `\"OR\"` | Outbound Referrals
    `\"IE\"` | Incoming eRx
    `\"OA\"` | Online Appointments
    `\"PO\"` | Patient Onboarding
    `\"PI\"` | Patient Incoming Message
    `\"PM\"` | Patient Outgoing Message
    `\"OO\"` | Demo Meeting Message
    `\"OD\"` | Outbound Direct Message
    `\"ID\"` | Inbound Direct Message
    """
    GP = 'GP'
    GC = 'GC'
    GT = 'GT'
    GZ = 'GZ'
    IF = 'IF'
    OF = 'OF'
    IL = 'IL'
    IR = 'IR'
    OR = 'OR'
    IE = 'IE'
    OA = 'OA'
    PO = 'PO'
    PI = 'PI'
    PM = 'PM'
    OO = 'OO'
    OD = 'OD'
    ID = 'ID'
    DL = 'DL'
    CN = 'CN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DoctorMessage:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""If true, indicates that the message has been soft-deleted"""  
    attachment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment'), 'exclude': lambda f: f is None }})
    r"""Files are passed using `multipart/form-data` encoding, but returned as URLs."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    message_notes: Optional[list[DoctorMessageMessageNote]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_notes'), 'exclude': lambda f: f is None }})
    r"""Array of notes attached to the message"""  
    owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/users` who owns the message, who may be the doctor themselves or one of their staff members"""  
    patient: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})
    r"""ID of patient that the message concerns, if applicable"""  
    read: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read'), 'exclude': lambda f: f is None }})  
    received_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_at'), 'exclude': lambda f: f is None }})  
    responsible_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsible_user'), 'exclude': lambda f: f is None }})
    r"""ID of `/api/users` who has been assigned to process the message, who may be the doctor themselves or one of their staff members"""  
    starred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred'), 'exclude': lambda f: f is None }})  
    type: Optional[DoctorMessageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Value | Description
    ----- | -----------
    `\"GP\"` | Generated PDF
    `\"GC\"` | Generated CSV
    `\"GZ\"` | Generated ZIP
    `\"IF\"` | Incoming Fax
    `\"OF\"` | Outgoing Fax
    `\"IL\"` | Incoming Labs
    `\"IR\"` | Inbound Referrals
    `\"OR\"` | Outbound Referrals
    `\"IE\"` | Incoming eRx
    `\"OA\"` | Online Appointments
    `\"PO\"` | Patient Onboarding
    `\"PI\"` | Patient Incoming Message
    `\"PM\"` | Patient Outgoing Message
    `\"OO\"` | Demo Meeting Message
    `\"OD\"` | Outbound Direct Message
    `\"ID\"` | Inbound Direct Message
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    workflow_step: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_step'), 'exclude': lambda f: f is None }})
    r"""Used by doctors and their staff to keep track of what step of processing the message is in"""  
    