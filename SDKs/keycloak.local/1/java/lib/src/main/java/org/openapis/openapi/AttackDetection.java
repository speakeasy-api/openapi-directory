/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class AttackDetection {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AttackDetection(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Clear any user login failures for all users   This can release temporary disabled users
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersResponse deleteRealmAttackDetectionBruteForceUsers(org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersRequest.class, baseUrl, "/{realm}/attack-detection/brute-force/users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersResponse res = new org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Clear any user login failures for the user   This can release temporary disabled user
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse deleteRealmAttackDetectionBruteForceUsersUserId(org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersUserIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersUserIdRequest.class, baseUrl, "/{realm}/attack-detection/brute-force/users/{userId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse res = new org.openapis.openapi.models.operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get status of a username in brute force detection
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse getRealmAttackDetectionBruteForceUsersUserId(org.openapis.openapi.models.operations.GetRealmAttackDetectionBruteForceUsersUserIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmAttackDetectionBruteForceUsersUserIdRequest.class, baseUrl, "/{realm}/attack-detection/brute-force/users/{userId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse res = new org.openapis.openapi.models.operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse(contentType, httpRes.statusCode()) {{
            getRealmAttackDetectionBruteForceUsersUserId2XXApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.getRealmAttackDetectionBruteForceUsersUserId2XXApplicationJSONObject = out;
            }
        }

        return res;
    }
}