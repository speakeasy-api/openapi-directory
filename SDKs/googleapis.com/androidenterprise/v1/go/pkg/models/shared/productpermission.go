// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProductPermissionStateEnum - Whether the permission has been accepted or not.
type ProductPermissionStateEnum string

const (
	ProductPermissionStateEnumRequired ProductPermissionStateEnum = "required"
	ProductPermissionStateEnumAccepted ProductPermissionStateEnum = "accepted"
)

func (e ProductPermissionStateEnum) ToPointer() *ProductPermissionStateEnum {
	return &e
}

func (e *ProductPermissionStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "required":
		fallthrough
	case "accepted":
		*e = ProductPermissionStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductPermissionStateEnum: %v", v)
	}
}

// ProductPermission - A product permissions resource represents the set of permissions required by a specific app and whether or not they have been accepted by an enterprise admin. The API can be used to read the set of permissions, and also to update the set to indicate that permissions have been accepted.
type ProductPermission struct {
	// An opaque string uniquely identifying the permission.
	PermissionID *string `json:"permissionId,omitempty"`
	// Whether the permission has been accepted or not.
	State *ProductPermissionStateEnum `json:"state,omitempty"`
}
