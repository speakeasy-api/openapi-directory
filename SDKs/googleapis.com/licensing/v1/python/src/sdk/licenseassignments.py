"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class LicenseAssignments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def licensing_license_assignments_delete(self, request: operations.LicensingLicenseAssignmentsDeleteRequest, security: operations.LicensingLicenseAssignmentsDeleteSecurity) -> operations.LicensingLicenseAssignmentsDeleteResponse:
        r"""Revoke a license."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsDeleteRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', request)
        
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def licensing_license_assignments_get(self, request: operations.LicensingLicenseAssignmentsGetRequest, security: operations.LicensingLicenseAssignmentsGetSecurity) -> operations.LicensingLicenseAssignmentsGetResponse:
        r"""Get a specific user's license by product SKU."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsGetRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', request)
        
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignment])
                res.license_assignment = out

        return res

    def licensing_license_assignments_insert(self, request: operations.LicensingLicenseAssignmentsInsertRequest, security: operations.LicensingLicenseAssignmentsInsertSecurity) -> operations.LicensingLicenseAssignmentsInsertResponse:
        r"""Assign a license."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsInsertRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "license_assignment_insert", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignment])
                res.license_assignment = out

        return res

    def licensing_license_assignments_list_for_product(self, request: operations.LicensingLicenseAssignmentsListForProductRequest, security: operations.LicensingLicenseAssignmentsListForProductSecurity) -> operations.LicensingLicenseAssignmentsListForProductResponse:
        r"""List all users assigned licenses for a specific product SKU."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsListForProductRequest, base_url, '/apps/licensing/v1/product/{productId}/users', request)
        
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsListForProductRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsListForProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignmentList])
                res.license_assignment_list = out

        return res

    def licensing_license_assignments_list_for_product_and_sku(self, request: operations.LicensingLicenseAssignmentsListForProductAndSkuRequest, security: operations.LicensingLicenseAssignmentsListForProductAndSkuSecurity) -> operations.LicensingLicenseAssignmentsListForProductAndSkuResponse:
        r"""List all users assigned licenses for a specific product SKU."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsListForProductAndSkuRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/users', request)
        
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsListForProductAndSkuRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsListForProductAndSkuResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignmentList])
                res.license_assignment_list = out

        return res

    def licensing_license_assignments_patch(self, request: operations.LicensingLicenseAssignmentsPatchRequest, security: operations.LicensingLicenseAssignmentsPatchSecurity) -> operations.LicensingLicenseAssignmentsPatchResponse:
        r"""Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsPatchRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "license_assignment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignment])
                res.license_assignment = out

        return res

    def licensing_license_assignments_update(self, request: operations.LicensingLicenseAssignmentsUpdateRequest, security: operations.LicensingLicenseAssignmentsUpdateSecurity) -> operations.LicensingLicenseAssignmentsUpdateResponse:
        r"""Reassign a user's product SKU with a different SKU in the same product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LicensingLicenseAssignmentsUpdateRequest, base_url, '/apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "license_assignment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.LicensingLicenseAssignmentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LicensingLicenseAssignmentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseAssignment])
                res.license_assignment = out

        return res

    