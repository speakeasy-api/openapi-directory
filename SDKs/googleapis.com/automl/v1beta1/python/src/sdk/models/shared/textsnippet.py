"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TextSnippet:
    r"""A representation of a text snippet."""
    
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""Required. The content of the text snippet as a string. Up to 250000 characters long."""  
    content_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentUri'), 'exclude': lambda f: f is None }})
    r"""Output only. HTTP URI where you can download the content."""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})
    r"""Optional. The format of content. Currently the only two allowed values are \\"text/html\\" and \\"text/plain\\". If left blank, the format is automatically determined from the type of the uploaded content."""  
    