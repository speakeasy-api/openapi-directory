/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateNetworkSsidRequestBody {
    /**
     * The list of tags and VLAN IDs used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apTagsAndVlanIds")
    public UpdateNetworkSsidRequestBodyApTagsAndVlanIds[] apTagsAndVlanIds;

    public UpdateNetworkSsidRequestBody withApTagsAndVlanIds(UpdateNetworkSsidRequestBodyApTagsAndVlanIds[] apTagsAndVlanIds) {
        this.apTagsAndVlanIds = apTagsAndVlanIds;
        return this;
    }
    
    /**
     * The association control method for the SSID ('open', 'open-enhanced', 'psk', 'open-with-radius', 'open-with-nac', '8021x-meraki', '8021x-nac', '8021x-radius', '8021x-google', '8021x-localradius', 'ipsk-with-radius' or 'ipsk-without-radius')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authMode")
    public UpdateNetworkSsidRequestBodyAuthModeEnum authMode;

    public UpdateNetworkSsidRequestBody withAuthMode(UpdateNetworkSsidRequestBodyAuthModeEnum authMode) {
        this.authMode = authMode;
        return this;
    }
    
    /**
     * Accepts a list of tags for this SSID. If availableOnAllAps is false, then the SSID will only be broadcast by APs with tags matching any of the tags in this list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityTags")
    public String[] availabilityTags;

    public UpdateNetworkSsidRequestBody withAvailabilityTags(String[] availabilityTags) {
        this.availabilityTags = availabilityTags;
        return this;
    }
    
    /**
     * Boolean indicating whether all APs should broadcast the SSID or if it should be restricted to APs matching any availability tags. Can only be false if the SSID has availability tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableOnAllAps")
    public Boolean availableOnAllAps;

    public UpdateNetworkSsidRequestBody withAvailableOnAllAps(Boolean availableOnAllAps) {
        this.availableOnAllAps = availableOnAllAps;
        return this;
    }
    
    /**
     * The client-serving radio frequencies of this SSID in the default indoor RF profile. ('Dual band operation', '5 GHz band only' or 'Dual band operation with Band Steering')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandSelection")
    public String bandSelection;

    public UpdateNetworkSsidRequestBody withBandSelection(String bandSelection) {
        this.bandSelection = bandSelection;
        return this;
    }
    
    /**
     * The concentrator to use when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concentratorNetworkId")
    public String concentratorNetworkId;

    public UpdateNetworkSsidRequestBody withConcentratorNetworkId(String concentratorNetworkId) {
        this.concentratorNetworkId = concentratorNetworkId;
        return this;
    }
    
    /**
     * The default VLAN ID used for 'all other APs'. This param is only valid when the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultVlanId")
    public Long defaultVlanId;

    public UpdateNetworkSsidRequestBody withDefaultVlanId(Long defaultVlanId) {
        this.defaultVlanId = defaultVlanId;
        return this;
    }
    
    /**
     * Disassociate clients when 'VPN' concentrator failover occurs in order to trigger clients to re-associate and generate new DHCP requests. This param is only valid if ipAssignmentMode is 'VPN'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disassociateClientsOnVpnFailover")
    public Boolean disassociateClientsOnVpnFailover;

    public UpdateNetworkSsidRequestBody withDisassociateClientsOnVpnFailover(Boolean disassociateClientsOnVpnFailover) {
        this.disassociateClientsOnVpnFailover = disassociateClientsOnVpnFailover;
        return this;
    }
    
    /**
     * Whether or not the SSID is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public UpdateNetworkSsidRequestBody withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionMode")
    public UpdateNetworkSsidRequestBodyEncryptionModeEnum encryptionMode;

    public UpdateNetworkSsidRequestBody withEncryptionMode(UpdateNetworkSsidRequestBodyEncryptionModeEnum encryptionMode) {
        this.encryptionMode = encryptionMode;
        return this;
    }
    
    /**
     * Whether or not an SSID is accessible by 'enterprise' administrators ('access disabled' or 'access enabled')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enterpriseAdminAccess")
    public UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum enterpriseAdminAccess;

    public UpdateNetworkSsidRequestBody withEnterpriseAdminAccess(UpdateNetworkSsidRequestBodyEnterpriseAdminAccessEnum enterpriseAdminAccess) {
        this.enterpriseAdminAccess = enterpriseAdminAccess;
        return this;
    }
    
    /**
     * The client IP assignment mode ('NAT mode', 'Bridge mode', 'Layer 3 roaming', 'Ethernet over GRE', 'Layer 3 roaming with a concentrator' or 'VPN')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAssignmentMode")
    public String ipAssignmentMode;

    public UpdateNetworkSsidRequestBody withIpAssignmentMode(String ipAssignmentMode) {
        this.ipAssignmentMode = ipAssignmentMode;
        return this;
    }
    
    /**
     * Boolean indicating whether Layer 2 LAN isolation should be enabled or disabled. Only configurable when ipAssignmentMode is 'Bridge mode'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lanIsolationEnabled")
    public Boolean lanIsolationEnabled;

    public UpdateNetworkSsidRequestBody withLanIsolationEnabled(Boolean lanIsolationEnabled) {
        this.lanIsolationEnabled = lanIsolationEnabled;
        return this;
    }
    
    /**
     * The minimum bitrate in Mbps of this SSID in the default indoor RF profile. ('1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minBitrate")
    public Float minBitrate;

    public UpdateNetworkSsidRequestBody withMinBitrate(Float minBitrate) {
        this.minBitrate = minBitrate;
        return this;
    }
    
    /**
     * The name of the SSID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UpdateNetworkSsidRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The download bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perClientBandwidthLimitDown")
    public Long perClientBandwidthLimitDown;

    public UpdateNetworkSsidRequestBody withPerClientBandwidthLimitDown(Long perClientBandwidthLimitDown) {
        this.perClientBandwidthLimitDown = perClientBandwidthLimitDown;
        return this;
    }
    
    /**
     * The upload bandwidth limit in Kbps. (0 represents no limit.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("perClientBandwidthLimitUp")
    public Long perClientBandwidthLimitUp;

    public UpdateNetworkSsidRequestBody withPerClientBandwidthLimitUp(Long perClientBandwidthLimitUp) {
        this.perClientBandwidthLimitUp = perClientBandwidthLimitUp;
        return this;
    }
    
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("psk")
    public String psk;

    public UpdateNetworkSsidRequestBody withPsk(String psk) {
        this.psk = psk;
        return this;
    }
    
    /**
     * Whether or not RADIUS accounting is enabled. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAccountingEnabled")
    public Boolean radiusAccountingEnabled;

    public UpdateNetworkSsidRequestBody withRadiusAccountingEnabled(Boolean radiusAccountingEnabled) {
        this.radiusAccountingEnabled = radiusAccountingEnabled;
        return this;
    }
    
    /**
     * The RADIUS accounting 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius' and radiusAccountingEnabled is 'true'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAccountingServers")
    public UpdateNetworkSsidRequestBodyRadiusAccountingServers[] radiusAccountingServers;

    public UpdateNetworkSsidRequestBody withRadiusAccountingServers(UpdateNetworkSsidRequestBodyRadiusAccountingServers[] radiusAccountingServers) {
        this.radiusAccountingServers = radiusAccountingServers;
        return this;
    }
    
    /**
     * Specify the RADIUS attribute used to look up group policies ('Filter-Id', 'Reply-Message', 'Airespace-ACL-Name' or 'Aruba-User-Role'). Access points must receive this attribute in the RADIUS Access-Accept message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusAttributeForGroupPolicies")
    public String radiusAttributeForGroupPolicies;

    public UpdateNetworkSsidRequestBody withRadiusAttributeForGroupPolicies(String radiusAttributeForGroupPolicies) {
        this.radiusAttributeForGroupPolicies = radiusAttributeForGroupPolicies;
        return this;
    }
    
    /**
     * If true, Meraki devices will act as a RADIUS Dynamic Authorization Server and will respond to RADIUS Change-of-Authorization and Disconnect messages sent by the RADIUS server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusCoaEnabled")
    public Boolean radiusCoaEnabled;

    public UpdateNetworkSsidRequestBody withRadiusCoaEnabled(Boolean radiusCoaEnabled) {
        this.radiusCoaEnabled = radiusCoaEnabled;
        return this;
    }
    
    /**
     * This policy determines how authentication requests should be handled in the event that all of the configured RADIUS servers are unreachable ('Deny access' or 'Allow access')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusFailoverPolicy")
    public UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum radiusFailoverPolicy;

    public UpdateNetworkSsidRequestBody withRadiusFailoverPolicy(UpdateNetworkSsidRequestBodyRadiusFailoverPolicyEnum radiusFailoverPolicy) {
        this.radiusFailoverPolicy = radiusFailoverPolicy;
        return this;
    }
    
    /**
     * This policy determines which RADIUS server will be contacted first in an authentication attempt and the ordering of any necessary retry attempts ('Strict priority order' or 'Round robin')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusLoadBalancingPolicy")
    public UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy;

    public UpdateNetworkSsidRequestBody withRadiusLoadBalancingPolicy(UpdateNetworkSsidRequestBodyRadiusLoadBalancingPolicyEnum radiusLoadBalancingPolicy) {
        this.radiusLoadBalancingPolicy = radiusLoadBalancingPolicy;
        return this;
    }
    
    /**
     * If true, the RADIUS response can override VLAN tag. This is not valid when ipAssignmentMode is 'NAT mode'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusOverride")
    public Boolean radiusOverride;

    public UpdateNetworkSsidRequestBody withRadiusOverride(Boolean radiusOverride) {
        this.radiusOverride = radiusOverride;
        return this;
    }
    
    /**
     * The RADIUS 802.1X servers to be used for authentication. This param is only valid if the authMode is 'open-with-radius', '8021x-radius' or 'ipsk-with-radius'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusServers")
    public UpdateNetworkSsidRequestBodyRadiusServers[] radiusServers;

    public UpdateNetworkSsidRequestBody withRadiusServers(UpdateNetworkSsidRequestBodyRadiusServers[] radiusServers) {
        this.radiusServers = radiusServers;
        return this;
    }
    
    /**
     * The secondary concentrator to use when the ipAssignmentMode is 'VPN'. If configured, the APs will switch to using this concentrator if the primary concentrator is unreachable. This param is optional. ('disabled' represents no secondary concentrator.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryConcentratorNetworkId")
    public String secondaryConcentratorNetworkId;

    public UpdateNetworkSsidRequestBody withSecondaryConcentratorNetworkId(String secondaryConcentratorNetworkId) {
        this.secondaryConcentratorNetworkId = secondaryConcentratorNetworkId;
        return this;
    }
    
    /**
     * The type of splash page for the SSID ('None', 'Click-through splash page', 'Billing', 'Password-protected with Meraki RADIUS', 'Password-protected with custom RADIUS', 'Password-protected with Active Directory', 'Password-protected with LDAP', 'SMS authentication', 'Systems Manager Sentry', 'Facebook Wi-Fi', 'Google OAuth', 'Sponsored guest', 'Cisco ISE' or 'Google Apps domain'). This attribute is not supported for template children.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splashPage")
    public UpdateNetworkSsidRequestBodySplashPageEnum splashPage;

    public UpdateNetworkSsidRequestBody withSplashPage(UpdateNetworkSsidRequestBodySplashPageEnum splashPage) {
        this.splashPage = splashPage;
        return this;
    }
    
    /**
     * Whether or not traffic should be directed to use specific VLANs. This param is only valid if the ipAssignmentMode is 'Bridge mode' or 'Layer 3 roaming'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useVlanTagging")
    public Boolean useVlanTagging;

    public UpdateNetworkSsidRequestBody withUseVlanTagging(Boolean useVlanTagging) {
        this.useVlanTagging = useVlanTagging;
        return this;
    }
    
    /**
     * Boolean indicating whether APs should advertise or hide this SSID. APs will only broadcast this SSID if set to true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible")
    public Boolean visible;

    public UpdateNetworkSsidRequestBody withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }
    
    /**
     * The VLAN ID used for VLAN tagging. This param is only valid when the ipAssignmentMode is 'Layer 3 roaming with a concentrator' or 'VPN'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vlanId")
    public Long vlanId;

    public UpdateNetworkSsidRequestBody withVlanId(Long vlanId) {
        this.vlanId = vlanId;
        return this;
    }
    
    /**
     * Allow access to a configurable list of IP ranges, which users may access prior to sign-on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walledGardenEnabled")
    public Boolean walledGardenEnabled;

    public UpdateNetworkSsidRequestBody withWalledGardenEnabled(Boolean walledGardenEnabled) {
        this.walledGardenEnabled = walledGardenEnabled;
        return this;
    }
    
    /**
     * Specify your walled garden by entering space-separated addresses, ranges using CIDR notation, domain names, and domain wildcards (e.g. 192.168.1.1/24 192.168.37.10/32 www.yahoo.com *.google.com). Meraki's splash page is automatically included in your walled garden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walledGardenRanges")
    public String walledGardenRanges;

    public UpdateNetworkSsidRequestBody withWalledGardenRanges(String walledGardenRanges) {
        this.walledGardenRanges = walledGardenRanges;
        return this;
    }
    
    /**
     * The types of WPA encryption. ('WPA1 only', 'WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode', 'WPA3 only' or 'WPA3 192-bit Security')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wpaEncryptionMode")
    public UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode;

    public UpdateNetworkSsidRequestBody withWpaEncryptionMode(UpdateNetworkSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode) {
        this.wpaEncryptionMode = wpaEncryptionMode;
        return this;
    }
    
    public UpdateNetworkSsidRequestBody(){}
}
