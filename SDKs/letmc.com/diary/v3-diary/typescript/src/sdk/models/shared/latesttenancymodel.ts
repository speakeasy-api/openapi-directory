/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LinkedTenantModel } from "./linkedtenantmodel";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Holds information on the most recent tenancy linked to the property.
 */
export class LatestTenancyModel extends SpeakeasyBase {
  /**
   * Access Arrangements
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessArrangements" })
  accessArrangements?: string;

  /**
   * Arrange access Mobile 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessMobile1" })
  accessMobile1?: string;

  /**
   * Arrange access Mobile 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessMobile2" })
  accessMobile2?: string;

  /**
   * Arrange access Mobile 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessMobile3" })
  accessMobile3?: string;

  /**
   * Arrange access contact name 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessName1" })
  accessName1?: string;

  /**
   * Arrange access contact name 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessName2" })
  accessName2?: string;

  /**
   * Arrange access contact name 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessName3" })
  accessName3?: string;

  /**
   * ETag
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ETag" })
  eTag?: string;

  /**
   * The end date of the Tenancy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * The fixed date of the Tenancy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FixedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  fixedDate?: Date;

  /**
   * The unique global reference of the Tenancy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GlobalReference" })
  globalReference?: string;

  /**
   * Has the Tenancy ended?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsTenancyEnded" })
  isTenancyEnded?: boolean;

  /**
   * Is the tenancy Proposed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsTenancyProposed" })
  isTenancyProposed?: boolean;

  /**
   * Is the tenancy signed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IsTenancySigned" })
  isTenancySigned?: boolean;

  /**
   * A collection of tenants linked to the tenancy:-
   */
  @SpeakeasyMetadata({ elemType: LinkedTenantModel })
  @Expose({ name: "LinkedTenants" })
  @Type(() => LinkedTenantModel)
  linkedTenants?: LinkedTenantModel[];

  /**
   * OID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OID" })
  oid?: string;

  /**
   * The start date of the Tenancy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;
}
