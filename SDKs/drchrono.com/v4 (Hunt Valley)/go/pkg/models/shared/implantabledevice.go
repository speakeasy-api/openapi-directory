// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ImplantableDeviceStatusEnum - One of `'active'` or `'inactive'`
type ImplantableDeviceStatusEnum string

const (
	ImplantableDeviceStatusEnumActive   ImplantableDeviceStatusEnum = "active"
	ImplantableDeviceStatusEnumInactive ImplantableDeviceStatusEnum = "inactive"
)

func (e ImplantableDeviceStatusEnum) ToPointer() *ImplantableDeviceStatusEnum {
	return &e
}

func (e *ImplantableDeviceStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = ImplantableDeviceStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImplantableDeviceStatusEnum: %v", v)
	}
}

// ImplantableDevice - OK
type ImplantableDevice struct {
	Archived       *bool   `json:"archived,omitempty"`
	BrandName      *string `json:"brand_name,omitempty"`
	CompanyName    *string `json:"company_name,omitempty"`
	CreatedAt      *string `json:"created_at,omitempty"`
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// "GMDN PT Name" or "SNOMED CT Description" mapped to the attribute in  the "GMDN PT Name"
	GmdnPtName        *string `json:"gmdn_pt_name,omitempty"`
	ID                *int64  `json:"id,omitempty"`
	ManufacturingDate *string `json:"manufacturing_date,omitempty"`
	Patient           *string `json:"patient,omitempty"`
	// ID of `/api/procedures` object
	Procedure    *string `json:"procedure,omitempty"`
	SerialNumber *string `json:"serial_number,omitempty"`
	// One of `'active'` or `'inactive'`
	Status         *ImplantableDeviceStatusEnum `json:"status,omitempty"`
	Udi            *string                      `json:"udi,omitempty"`
	UpdatedAt      *string                      `json:"updated_at,omitempty"`
	VersionOrModel *string                      `json:"version_or_model,omitempty"`
}
