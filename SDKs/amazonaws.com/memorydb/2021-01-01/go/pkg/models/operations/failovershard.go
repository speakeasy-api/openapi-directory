// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// FailoverShardXAmzTargetEnum
type FailoverShardXAmzTargetEnum string

const (
	FailoverShardXAmzTargetEnumAmazonMemoryDbFailoverShard FailoverShardXAmzTargetEnum = "AmazonMemoryDB.FailoverShard"
)

func (e *FailoverShardXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonMemoryDB.FailoverShard":
		*e = FailoverShardXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FailoverShardXAmzTargetEnum: %s", s)
	}
}

type FailoverShardHeaders struct {
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        FailoverShardXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type FailoverShardRequest struct {
	Headers FailoverShardHeaders
	Request shared.FailoverShardRequest `request:"mediaType=application/json"`
}

type FailoverShardResponse struct {
	// APICallRateForCustomerExceededFault
	APICallRateForCustomerExceededFault interface{}
	// ClusterNotFoundFault
	ClusterNotFoundFault interface{}
	ContentType          string
	// Success
	FailoverShardResponse *shared.FailoverShardResponse
	// InvalidClusterStateFault
	InvalidClusterStateFault interface{}
	// InvalidKMSKeyFault
	InvalidKMSKeyFault interface{}
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ShardNotFoundFault
	ShardNotFoundFault interface{}
	// TestFailoverNotAvailableFault
	TestFailoverNotAvailableFault interface{}
}
