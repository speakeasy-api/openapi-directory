// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type AccountPlanAddonCreatePathParams struct {
	// The account ID.
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
}

// AccountPlanAddonCreateApplicationJSON2PhonePlanPlanBase - Additional phone base plans.
type AccountPlanAddonCreateApplicationJSON2PhonePlanPlanBase struct {
	// Call-out countries: multiple values should separated by  commas. For a list of allowed values, refer to the "ID" field in [this](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#tsp-call-out-countries) table.
	CalloutCountries *string `json:"callout_countries,omitempty"`
	// Additional phone base <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
	Type *string `json:"type,omitempty"`
}

type AccountPlanAddonCreateApplicationJSON2PhonePlanPlanCalling struct {
	Hosts *int64 `json:"hosts,omitempty"`
	// Additional phone calling <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
	Type *string `json:"type,omitempty"`
}

type AccountPlanAddonCreateApplicationJSON2PhonePlanPlanNumber struct {
	Hosts *int64 `json:"hosts,omitempty"`
	// Additional phone number <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans#additional-zoom-phone-plans">plan type.</a>
	Type *string `json:"type,omitempty"`
}

// AccountPlanAddonCreateApplicationJSON2PhonePlan - Phone Plan Object
type AccountPlanAddonCreateApplicationJSON2PhonePlan struct {
	// Additional phone base plans.
	PlanBase *AccountPlanAddonCreateApplicationJSON2PhonePlanPlanBase `json:"plan_base,omitempty"`
	// Additional phone calling plans.
	PlanCalling []AccountPlanAddonCreateApplicationJSON2PhonePlanPlanCalling `json:"plan_calling,omitempty"`
	// Additional phone number plans.
	PlanNumber []AccountPlanAddonCreateApplicationJSON2PhonePlanPlanNumber `json:"plan_number,omitempty"`
}

// AccountPlanAddonCreateApplicationJSON2 - Zoom Phone Plan Object
type AccountPlanAddonCreateApplicationJSON2 struct {
	// Phone Plan Object
	PlanDetails AccountPlanAddonCreateApplicationJSON2PhonePlan `json:"plan_details"`
	// Zoom Phone Plan `plan_phone`
	Type string `json:"type"`
}

// AccountPlanAddonCreateApplicationJSON1 - Account plan object.
type AccountPlanAddonCreateApplicationJSON1 struct {
	// Number of hosts for this plan.
	Hosts int64 `json:"hosts"`
	// Account <a href="https://marketplace.zoom.us/docs/api-reference/other-references/plans">plan type.</a>
	Type string `json:"type"`
}

type AccountPlanAddonCreateApplicationJSONType string

const (
	AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON1 AccountPlanAddonCreateApplicationJSONType = "accountPlanAddonCreate_ApplicationJSON_1"
	AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON2 AccountPlanAddonCreateApplicationJSONType = "accountPlanAddonCreate_ApplicationJSON_2"
)

type AccountPlanAddonCreateApplicationJSON struct {
	AccountPlanAddonCreateApplicationJSON1 *AccountPlanAddonCreateApplicationJSON1
	AccountPlanAddonCreateApplicationJSON2 *AccountPlanAddonCreateApplicationJSON2

	Type AccountPlanAddonCreateApplicationJSONType
}

func CreateAccountPlanAddonCreateApplicationJSONAccountPlanAddonCreateApplicationJSON1(accountPlanAddonCreateApplicationJSON1 AccountPlanAddonCreateApplicationJSON1) AccountPlanAddonCreateApplicationJSON {
	typ := AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON1

	return AccountPlanAddonCreateApplicationJSON{
		AccountPlanAddonCreateApplicationJSON1: &accountPlanAddonCreateApplicationJSON1,
		Type:                                   typ,
	}
}

func CreateAccountPlanAddonCreateApplicationJSONAccountPlanAddonCreateApplicationJSON2(accountPlanAddonCreateApplicationJSON2 AccountPlanAddonCreateApplicationJSON2) AccountPlanAddonCreateApplicationJSON {
	typ := AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON2

	return AccountPlanAddonCreateApplicationJSON{
		AccountPlanAddonCreateApplicationJSON2: &accountPlanAddonCreateApplicationJSON2,
		Type:                                   typ,
	}
}

func (u *AccountPlanAddonCreateApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	accountPlanAddonCreateApplicationJSON1 := new(AccountPlanAddonCreateApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountPlanAddonCreateApplicationJSON1); err == nil {
		u.AccountPlanAddonCreateApplicationJSON1 = accountPlanAddonCreateApplicationJSON1
		u.Type = AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON1
		return nil
	}

	accountPlanAddonCreateApplicationJSON2 := new(AccountPlanAddonCreateApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&accountPlanAddonCreateApplicationJSON2); err == nil {
		u.AccountPlanAddonCreateApplicationJSON2 = accountPlanAddonCreateApplicationJSON2
		u.Type = AccountPlanAddonCreateApplicationJSONTypeAccountPlanAddonCreateApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccountPlanAddonCreateApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.AccountPlanAddonCreateApplicationJSON1 != nil {
		return json.Marshal(u.AccountPlanAddonCreateApplicationJSON1)
	}

	if u.AccountPlanAddonCreateApplicationJSON2 != nil {
		return json.Marshal(u.AccountPlanAddonCreateApplicationJSON2)
	}

	return nil, nil
}

type AccountPlanAddonCreateRequest struct {
	PathParams AccountPlanAddonCreatePathParams
	Request    AccountPlanAddonCreateApplicationJSON `request:"mediaType=application/json"`
}

type AccountPlanAddonCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
