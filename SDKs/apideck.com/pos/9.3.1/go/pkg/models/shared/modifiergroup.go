// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ModifierGroupModifiers struct {
	AlternateName *string `json:"alternate_name,omitempty"`
	Available     *bool   `json:"available,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency    *CurrencyEnum `json:"currency,omitempty"`
	ID          *string       `json:"id,omitempty"`
	Name        *string       `json:"name,omitempty"`
	PriceAmount *float64      `json:"price_amount,omitempty"`
}

type ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum string

const (
	ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnumSingle   ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum = "single"
	ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnumMultiple ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum = "multiple"
)

func (e ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum) ToPointer() *ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum {
	return &e
}

func (e *ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "single":
		fallthrough
	case "multiple":
		*e = ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum: %v", v)
	}
}

type ModifierGroupInput struct {
	AlternateName         *string                  `json:"alternate_name,omitempty"`
	Deleted               *bool                    `json:"deleted,omitempty"`
	MaximumAllowed        *int64                   `json:"maximum_allowed,omitempty"`
	MinimumRequired       *int64                   `json:"minimum_required,omitempty"`
	Modifiers             []ModifierGroupModifiers `json:"modifiers,omitempty"`
	Name                  *string                  `json:"name,omitempty"`
	PresentAtAllLocations *bool                    `json:"present_at_all_locations,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion    *string                                                                                                       `json:"row_version,omitempty"`
	SelectionType *ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum `json:"selection_type,omitempty"`
}

type ModifierGroup struct {
	AlternateName *string `json:"alternate_name,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	Deleted   *bool   `json:"deleted,omitempty"`
	// A unique identifier for an object.
	ID                    *string                  `json:"id,omitempty"`
	MaximumAllowed        *int64                   `json:"maximum_allowed,omitempty"`
	MinimumRequired       *int64                   `json:"minimum_required,omitempty"`
	Modifiers             []ModifierGroupModifiers `json:"modifiers,omitempty"`
	Name                  *string                  `json:"name,omitempty"`
	PresentAtAllLocations *bool                    `json:"present_at_all_locations,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion    *string                                                                                                       `json:"row_version,omitempty"`
	SelectionType *ModifierGroupIndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiersEnum `json:"selection_type,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}
