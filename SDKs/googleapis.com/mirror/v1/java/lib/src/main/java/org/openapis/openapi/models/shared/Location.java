/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Location - A geographic location that can be associated with a timeline item.
 */
public class Location {
    /**
     * The accuracy of the location fix in meters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accuracy")
    public Double accuracy;

    public Location withAccuracy(Double accuracy) {
        this.accuracy = accuracy;
        return this;
    }
    
    /**
     * The full address of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public Location withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * The name to be displayed. This may be a business name or a user-defined place, such as "Home".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public Location withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The ID of the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Location withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The type of resource. This is always mirror#location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Location withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The latitude, in degrees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Double latitude;

    public Location withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * The longitude, in degrees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Double longitude;

    public Location withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * The time at which this location was captured, formatted according to RFC 3339.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestamp")
    public OffsetDateTime timestamp;

    public Location withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    public Location(){}
}
