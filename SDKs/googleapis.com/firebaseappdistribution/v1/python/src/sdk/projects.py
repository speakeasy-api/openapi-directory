"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def firebaseappdistribution_projects_apps_releases_batch_delete(self, request: operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteResponse:
        r"""Deletes releases. A maximum of 100 releases can be deleted per request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest, base_url, '/v1/{parent}/releases:batchDelete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_batch_delete_releases_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesBatchDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def firebaseappdistribution_projects_apps_releases_distribute(self, request: operations.FirebaseappdistributionProjectsAppsReleasesDistributeRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesDistributeSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesDistributeResponse:
        r"""Distributes a release to testers. This call does the following: 1. Creates testers for the specified emails, if none exist. 2. Adds the testers and groups to the release. 3. Sends new testers an invitation email. 4. Sends existing testers a new release email. The request will fail with a `INVALID_ARGUMENT` if it contains a group that doesn't exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesDistributeRequest, base_url, '/v1/{name}:distribute', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_distribute_release_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesDistributeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesDistributeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_firebase_appdistro_v1_distribute_release_response = out

        return res

    def firebaseappdistribution_projects_apps_releases_feedback_reports_list(self, request: operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListResponse:
        r"""Lists feedback reports. By default, sorts by `createTime` in descending order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest, base_url, '/v1/{parent}/feedbackReports', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesFeedbackReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1ListFeedbackReportsResponse])
                res.google_firebase_appdistro_v1_list_feedback_reports_response = out

        return res

    def firebaseappdistribution_projects_apps_releases_list(self, request: operations.FirebaseappdistributionProjectsAppsReleasesListRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesListSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesListResponse:
        r"""Lists releases. By default, sorts by `createTime` in descending order."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesListRequest, base_url, '/v1/{parent}/releases', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1ListReleasesResponse])
                res.google_firebase_appdistro_v1_list_releases_response = out

        return res

    def firebaseappdistribution_projects_apps_releases_operations_cancel(self, request: operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def firebaseappdistribution_projects_apps_releases_operations_list(self, request: operations.FirebaseappdistributionProjectsAppsReleasesOperationsListRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesOperationsListSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def firebaseappdistribution_projects_apps_releases_operations_wait(self, request: operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest, security: operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitSecurity) -> operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitResponse:
        r"""Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest, base_url, '/v1/{name}:wait', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_longrunning_wait_operation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsAppsReleasesOperationsWaitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def firebaseappdistribution_projects_groups_batch_join(self, request: operations.FirebaseappdistributionProjectsGroupsBatchJoinRequest, security: operations.FirebaseappdistributionProjectsGroupsBatchJoinSecurity) -> operations.FirebaseappdistributionProjectsGroupsBatchJoinResponse:
        r"""Batch adds members to a group. The testers will gain access to all releases that the groups have access to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsBatchJoinRequest, base_url, '/v1/{group}:batchJoin', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_batch_join_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsBatchJoinRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsBatchJoinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def firebaseappdistribution_projects_groups_batch_leave(self, request: operations.FirebaseappdistributionProjectsGroupsBatchLeaveRequest, security: operations.FirebaseappdistributionProjectsGroupsBatchLeaveSecurity) -> operations.FirebaseappdistributionProjectsGroupsBatchLeaveResponse:
        r"""Batch removed members from a group. The testers will lose access to all releases that the groups have access to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsBatchLeaveRequest, base_url, '/v1/{group}:batchLeave', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_batch_leave_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsBatchLeaveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsBatchLeaveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def firebaseappdistribution_projects_groups_create(self, request: operations.FirebaseappdistributionProjectsGroupsCreateRequest, security: operations.FirebaseappdistributionProjectsGroupsCreateSecurity) -> operations.FirebaseappdistributionProjectsGroupsCreateResponse:
        r"""Create a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsCreateRequest, base_url, '/v1/{parent}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_group_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1Group])
                res.google_firebase_appdistro_v1_group = out

        return res

    def firebaseappdistribution_projects_groups_delete(self, request: operations.FirebaseappdistributionProjectsGroupsDeleteRequest, security: operations.FirebaseappdistributionProjectsGroupsDeleteSecurity) -> operations.FirebaseappdistributionProjectsGroupsDeleteResponse:
        r"""Delete a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def firebaseappdistribution_projects_groups_get(self, request: operations.FirebaseappdistributionProjectsGroupsGetRequest, security: operations.FirebaseappdistributionProjectsGroupsGetSecurity) -> operations.FirebaseappdistributionProjectsGroupsGetResponse:
        r"""Get a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1Group])
                res.google_firebase_appdistro_v1_group = out

        return res

    def firebaseappdistribution_projects_groups_list(self, request: operations.FirebaseappdistributionProjectsGroupsListRequest, security: operations.FirebaseappdistributionProjectsGroupsListSecurity) -> operations.FirebaseappdistributionProjectsGroupsListResponse:
        r"""List groups."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsGroupsListRequest, base_url, '/v1/{parent}/groups', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1ListGroupsResponse])
                res.google_firebase_appdistro_v1_list_groups_response = out

        return res

    def firebaseappdistribution_projects_testers_batch_add(self, request: operations.FirebaseappdistributionProjectsTestersBatchAddRequest, security: operations.FirebaseappdistributionProjectsTestersBatchAddSecurity) -> operations.FirebaseappdistributionProjectsTestersBatchAddResponse:
        r"""Batch adds testers. This call adds testers for the specified emails if they don't already exist. Returns all testers specified in the request, including newly created and previously existing testers. This action is idempotent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsTestersBatchAddRequest, base_url, '/v1/{project}/testers:batchAdd', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_batch_add_testers_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsTestersBatchAddRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsTestersBatchAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1BatchAddTestersResponse])
                res.google_firebase_appdistro_v1_batch_add_testers_response = out

        return res

    def firebaseappdistribution_projects_testers_batch_remove(self, request: operations.FirebaseappdistributionProjectsTestersBatchRemoveRequest, security: operations.FirebaseappdistributionProjectsTestersBatchRemoveSecurity) -> operations.FirebaseappdistributionProjectsTestersBatchRemoveResponse:
        r"""Batch removes testers. If found, this call deletes testers for the specified emails. Returns all deleted testers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsTestersBatchRemoveRequest, base_url, '/v1/{project}/testers:batchRemove', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_batch_remove_testers_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsTestersBatchRemoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsTestersBatchRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1BatchRemoveTestersResponse])
                res.google_firebase_appdistro_v1_batch_remove_testers_response = out

        return res

    def firebaseappdistribution_projects_testers_list(self, request: operations.FirebaseappdistributionProjectsTestersListRequest, security: operations.FirebaseappdistributionProjectsTestersListSecurity) -> operations.FirebaseappdistributionProjectsTestersListResponse:
        r"""Lists testers and their resource ids."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsTestersListRequest, base_url, '/v1/{parent}/testers', request)
        
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsTestersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsTestersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1ListTestersResponse])
                res.google_firebase_appdistro_v1_list_testers_response = out

        return res

    def firebaseappdistribution_projects_testers_patch(self, request: operations.FirebaseappdistributionProjectsTestersPatchRequest, security: operations.FirebaseappdistributionProjectsTestersPatchSecurity) -> operations.FirebaseappdistributionProjectsTestersPatchResponse:
        r"""Update a tester. If the testers joins a group they gain access to all releases that the group has access to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebaseappdistributionProjectsTestersPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_firebase_appdistro_v1_tester_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebaseappdistributionProjectsTestersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebaseappdistributionProjectsTestersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleFirebaseAppdistroV1Tester])
                res.google_firebase_appdistro_v1_tester = out

        return res

    