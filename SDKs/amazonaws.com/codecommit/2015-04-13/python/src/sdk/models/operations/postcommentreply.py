"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import postcommentreplyinput as shared_postcommentreplyinput
from ..shared import postcommentreplyoutput as shared_postcommentreplyoutput
from enum import Enum
from typing import Any, Optional

class PostCommentReplyXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_POST_COMMENT_REPLY = 'CodeCommit_20150413.PostCommentReply'


@dataclasses.dataclass
class PostCommentReplyRequest:
    
    post_comment_reply_input: shared_postcommentreplyinput.PostCommentReplyInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: PostCommentReplyXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PostCommentReplyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_request_token_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientRequestTokenRequiredException"""  
    comment_content_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentContentRequiredException"""  
    comment_content_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentContentSizeLimitExceededException"""  
    comment_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentDoesNotExistException"""  
    comment_id_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommentIdRequiredException"""  
    idempotency_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotencyParameterMismatchException"""  
    invalid_client_request_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientRequestTokenException"""  
    invalid_comment_id_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCommentIdException"""  
    post_comment_reply_output: Optional[shared_postcommentreplyoutput.PostCommentReplyOutput] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    