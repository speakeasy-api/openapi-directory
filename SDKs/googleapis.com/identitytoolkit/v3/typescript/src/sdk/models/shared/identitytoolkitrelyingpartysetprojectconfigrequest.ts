/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EmailTemplate } from "./emailtemplate";
import { IdpConfig } from "./idpconfig";
import { Expose, Type } from "class-transformer";

/**
 * Request to set the project configuration.
 */
export class IdentitytoolkitRelyingpartySetProjectConfigRequest extends SpeakeasyBase {
  /**
   * Whether to allow password user sign in or sign up.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowPasswordUser" })
  allowPasswordUser?: boolean;

  /**
   * Browser API key, needed when making http request to Apiary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiKey" })
  apiKey?: string;

  /**
   * Authorized domains for widget redirect.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedDomains" })
  authorizedDomains?: string[];

  /**
   * Template for an email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changeEmailTemplate" })
  @Type(() => EmailTemplate)
  changeEmailTemplate?: EmailTemplate;

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delegatedProjectNumber" })
  delegatedProjectNumber?: string;

  /**
   * Whether to enable anonymous user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableAnonymousUser" })
  enableAnonymousUser?: boolean;

  /**
   * Oauth2 provider configuration.
   */
  @SpeakeasyMetadata({ elemType: IdpConfig })
  @Expose({ name: "idpConfig" })
  @Type(() => IdpConfig)
  idpConfig?: IdpConfig[];

  /**
   * Template for an email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legacyResetPasswordTemplate" })
  @Type(() => EmailTemplate)
  legacyResetPasswordTemplate?: EmailTemplate;

  /**
   * Template for an email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resetPasswordTemplate" })
  @Type(() => EmailTemplate)
  resetPasswordTemplate?: EmailTemplate;

  /**
   * Whether to use email sending provided by Firebear.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "useEmailSending" })
  useEmailSending?: boolean;

  /**
   * Template for an email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verifyEmailTemplate" })
  @Type(() => EmailTemplate)
  verifyEmailTemplate?: EmailTemplate;
}
