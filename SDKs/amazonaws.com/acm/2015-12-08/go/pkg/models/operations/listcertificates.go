// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListCertificatesXAmzTargetEnum
type ListCertificatesXAmzTargetEnum string

const (
	ListCertificatesXAmzTargetEnumCertificateManagerListCertificates ListCertificatesXAmzTargetEnum = "CertificateManager.ListCertificates"
)

func (e *ListCertificatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CertificateManager.ListCertificates":
		*e = ListCertificatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCertificatesXAmzTargetEnum: %s", s)
	}
}

type ListCertificatesRequest struct {
	ListCertificatesRequest shared.ListCertificatesRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxItems *string `queryParam:"style=form,explode=true,name=MaxItems"`
	// Pagination token
	NextToken         *string                        `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListCertificatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListCertificatesResponse struct {
	ContentType string
	// InvalidArgsException
	InvalidArgsException interface{}
	// Success
	ListCertificatesResponse *shared.ListCertificatesResponse
	StatusCode               int
	RawResponse              *http.Response
	// ValidationException
	ValidationException interface{}
}
