"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JourneyLimits:
    r"""Specifies limits on the messages that a journey can send and the number of times participants can enter a journey."""
    
    daily_cap: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DailyCap'), 'exclude': lambda f: f is None }})  
    endpoint_reentry_cap: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointReentryCap'), 'exclude': lambda f: f is None }})  
    endpoint_reentry_interval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointReentryInterval'), 'exclude': lambda f: f is None }})  
    messages_per_second: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessagesPerSecond'), 'exclude': lambda f: f is None }})  
    