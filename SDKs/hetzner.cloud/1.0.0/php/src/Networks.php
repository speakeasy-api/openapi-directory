<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Networks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Network
     * 
     * Deletes a network. If there are Servers attached they will be detached in the background.
     * 
     * Note: if the network object changes during the request, the response will be a “conflict” error.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdResponse
     */
	public function deleteNetworksId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get all Networks
     * 
     * Gets all existing networks that you have available.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworksResponse
     */
	public function getNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworks200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Network
     * 
     * Gets a specific network object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdResponse
     */
	public function getNetworksId(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworksId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworksId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Network
     * 
     * Creates a network with the specified `ip_range`.
     * 
     * You may specify one or more `subnets`. You can also add more Subnets later by using the [add subnet action](https://docs.hetzner.cloud/#network-actions-add-a-subnet-to-a-network). If you do not specify an `ip_range` in the subnet we will automatically pick the first available /24 range for you.
     * 
     * You may specify one or more routes in `routes`. You can also add more routes later by using the [add route action](https://docs.hetzner.cloud/#network-actions-add-a-route-to-a-network).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostNetworksCreateNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostNetworksResponse
     */
	public function postNetworks(
        \OpenAPI\OpenAPI\Models\Operations\PostNetworksCreateNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postNetworks201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostNetworks201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Network
     * 
     * Updates the network properties.
     * 
     * Note that when updating labels, the network’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
     * 
     * Note: if the network object changes during the request, the response will be a “conflict” error.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdResponse
     */
	public function putNetworksId(
        \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{id}', \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutNetworksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putNetworksId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutNetworksId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}