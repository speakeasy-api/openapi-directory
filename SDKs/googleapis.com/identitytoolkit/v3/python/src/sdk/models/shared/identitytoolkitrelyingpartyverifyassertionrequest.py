"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentitytoolkitRelyingpartyVerifyAssertionRequest:
    r"""Request to verify the IDP assertion."""
    
    auto_create: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoCreate'), 'exclude': lambda f: f is None }})
    r"""When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist."""  
    delegated_project_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delegatedProjectNumber'), 'exclude': lambda f: f is None }})
    r"""GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."""  
    id_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idToken'), 'exclude': lambda f: f is None }})
    r"""The GITKit token of the authenticated user."""  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceId'), 'exclude': lambda f: f is None }})
    r"""Instance id token of the app."""  
    pending_id_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pendingIdToken'), 'exclude': lambda f: f is None }})
    r"""The GITKit token for the non-trusted IDP pending to be confirmed by the user."""  
    post_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postBody'), 'exclude': lambda f: f is None }})
    r"""The post body if the request is a HTTP POST."""  
    request_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestUri'), 'exclude': lambda f: f is None }})
    r"""The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."""  
    return_idp_credential: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnIdpCredential'), 'exclude': lambda f: f is None }})
    r"""Whether return 200 and IDP credential rather than throw exception when federated id is already linked."""  
    return_refresh_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnRefreshToken'), 'exclude': lambda f: f is None }})
    r"""Whether to return refresh tokens."""  
    return_secure_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnSecureToken'), 'exclude': lambda f: f is None }})
    r"""Whether return sts id token and refresh token instead of gitkit token."""  
    session_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionId'), 'exclude': lambda f: f is None }})
    r"""Session ID, which should match the one in previous createAuthUri request."""  
    tenant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantId'), 'exclude': lambda f: f is None }})
    r"""For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."""  
    tenant_project_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantProjectNumber'), 'exclude': lambda f: f is None }})
    r"""Tenant project number to be used for idp discovery."""  
    