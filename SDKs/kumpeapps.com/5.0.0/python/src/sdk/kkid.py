"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class KKid:
    r"""KKid API Functions
    https://github.com/kumpeapps/kkid
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def kkid_allowance_get(self, request: operations.KkidAllowanceGetRequest, security: operations.KkidAllowanceGetSecurity) -> operations.KkidAllowanceGetResponse:
        r"""returns allowance balance and allowance transactions
        By passing in the appropriate options, you can view allowance balance and allowance transactions for a given user provided that they are within the masterID account of the authenticated user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/allowance'
        
        query_params = utils.get_query_params(operations.KkidAllowanceGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidAllowanceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Allowance])
                res.allowance = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_allowance_post(self, request: operations.KkidAllowancePostRequest, security: operations.KkidAllowancePostSecurity) -> operations.KkidAllowancePostResponse:
        r"""adds new allowance transaction to kidUserID
        By passing in the appropriate options, you can add an allowance transaction to a given user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/allowance'
        
        query_params = utils.get_query_params(operations.KkidAllowancePostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidAllowancePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_apns_post(self, request: operations.KkidApnsPostRequest, security: operations.KkidApnsPostSecurity) -> operations.KkidApnsPostResponse:
        r"""subscribes/unsubscribes/registers for apns push notifications"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/apns'
        
        query_params = utils.get_query_params(operations.KkidApnsPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidApnsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_chorelist_delete(self, request: operations.KkidChorelistDeleteRequest, security: operations.KkidChorelistDeleteSecurity) -> operations.KkidChorelistDeleteResponse:
        r"""deletes chore for given chore id
        By passing in the appropriate options, you can delete a chore for the given chore id under authenticated user's master account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/chorelist'
        
        query_params = utils.get_query_params(operations.KkidChorelistDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidChorelistDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out
        elif http_res.status_code in [202, 400, 401, 403, 409]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_chorelist_get(self, request: operations.KkidChorelistGetRequest, security: operations.KkidChorelistGetSecurity) -> operations.KkidChorelistGetResponse:
        r"""returns list of chores for given user
        By passing in the appropriate options, you can search for
        chores assigned to a given user within the authenticated user's master account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/chorelist'
        
        query_params = utils.get_query_params(operations.KkidChorelistGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidChorelistGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Chorelist])
                res.chorelist = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_chorelist_post(self, request: operations.KkidChorelistPostRequest, security: operations.KkidChorelistPostSecurity) -> operations.KkidChorelistPostResponse:
        r"""adds chore for given user
        By passing in the appropriate options, you can add a chore to given kid username under authenticated user's master account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/chorelist'
        
        query_params = utils.get_query_params(operations.KkidChorelistPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidChorelistPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out
        elif http_res.status_code in [202, 400, 401, 403, 409]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_chorelist_put(self, request: operations.KkidChorelistPutRequest, security: operations.KkidChorelistPutSecurity) -> operations.KkidChorelistPutResponse:
        r"""updates chore for given chore id
        By passing in the appropriate options, you can update the fields of a specific core within the authenticated user's master account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/chorelist'
        
        query_params = utils.get_query_params(operations.KkidChorelistPutRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidChorelistPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 206:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_masteruser_post(self, request: operations.KkidMasteruserPostRequest, security: operations.KkidMasteruserPostSecurity) -> operations.KkidMasteruserPostResponse:
        r"""adds new master user account
        By passing in the appropriate variables this method creates a new user with master account access. (The use of this method is restricted to Superusers ONLY)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/masteruser'
        
        query_params = utils.get_query_params(operations.KkidMasteruserPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidMasteruserPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddUserResponse])
                res.add_user_response = out
        elif http_res.status_code in [202, 409]:
            pass
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out

        return res

    def kkid_share_get(self, request: operations.KkidShareGetRequest, security: operations.KkidShareGetSecurity) -> operations.KkidShareGetResponse:
        r"""Create Share Link
        Create share link
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/share'
        
        query_params = utils.get_query_params(operations.KkidShareGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidShareGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TwoHundredAndOneShare])
                res.two_hundred_and_one_share = out

        return res

    def kkid_user_get(self, request: operations.KkidUserGetRequest) -> operations.KkidUserGetResponse:
        r"""Gets user info
        Gets user info for authenticated user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/user'
        
        query_params = utils.get_query_params(operations.KkidUserGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidUserGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Userlist])
                res.userlist = out

        return res

    def kkid_userlist_delete(self, request: operations.KkidUserlistDeleteRequest, security: operations.KkidUserlistDeleteSecurity) -> operations.KkidUserlistDeleteResponse:
        r"""deletes user
        By passing in the appropriate variables this method deletes the specified user. (This function is restricted to Superusers ONLY)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/userlist'
        
        query_params = utils.get_query_params(operations.KkidUserlistDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidUserlistDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 202, 409]:
            pass
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_userlist_get(self, request: operations.KkidUserlistGetRequest) -> operations.KkidUserlistGetResponse:
        r"""returns list of users
        By passing in the appropriate options, you can search for
        users within the authenticated user's master account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/userlist'
        
        query_params = utils.get_query_params(operations.KkidUserlistGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidUserlistGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Userlist])
                res.userlist = out
        elif http_res.status_code in [202, 400, 401, 403]:
            pass
        elif http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Nodata])
                res.nodata = out
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_userlist_post(self, request: operations.KkidUserlistPostRequest, security: operations.KkidUserlistPostSecurity) -> operations.KkidUserlistPostResponse:
        r"""adds new child user
        By passing in the appropriate variables this method creates a new user and assigns it to the master account of the authenticated user. By default this user will have chores and allowance access.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/userlist'
        
        query_params = utils.get_query_params(operations.KkidUserlistPostRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidUserlistPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddUserResponse])
                res.add_user_response = out
        elif http_res.status_code in [202, 409]:
            pass
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_userlist_put(self, request: operations.KkidUserlistPutRequest) -> operations.KkidUserlistPutResponse:
        r"""updates user
        By passing in the appropriate variables this method updates the user's profile
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/userlist'
        
        query_params = utils.get_query_params(operations.KkidUserlistPutRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidUserlistPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddUserResponse])
                res.add_user_response = out
        elif http_res.status_code in [202, 409]:
            pass
        elif http_res.status_code == 405:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFive])
                res.four_hundred_and_five = out
        elif http_res.status_code == 412:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndTwelve])
                res.four_hundred_and_twelve = out

        return res

    def kkid_wishlist_delete(self, request: operations.KkidWishlistDeleteRequest) -> operations.KkidWishlistDeleteResponse:
        r"""Delete item from wishlist"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/wishlist'
        
        query_params = utils.get_query_params(operations.KkidWishlistDeleteRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidWishlistDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out

        return res

    def kkid_wishlist_get(self, request: operations.KkidWishlistGetRequest) -> operations.KkidWishlistGetResponse:
        r"""Get list of wishlist items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/wishlist'
        
        query_params = utils.get_query_params(operations.KkidWishlistGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidWishlistGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Wishlist])
                res.wishlist = out

        return res

    def kkid_wishlist_post(self, request: operations.KkidWishlistPostRequest) -> operations.KkidWishlistPostResponse:
        r"""Add item to kid's wishlist"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/wishlist'
        
        query_params = utils.get_query_params(operations.KkidWishlistPostRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidWishlistPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out

        return res

    def kkid_wishlist_put(self, request: operations.KkidWishlistPutRequest) -> operations.KkidWishlistPutResponse:
        r"""Update item on kid's wishlist"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/kkid/wishlist'
        
        query_params = utils.get_query_params(operations.KkidWishlistPutRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.KkidWishlistPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Success])
                res.success = out

        return res

    