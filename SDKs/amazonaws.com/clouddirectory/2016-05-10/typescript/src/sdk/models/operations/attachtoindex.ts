/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The reference that identifies an object.
 */
export class AttachToIndexRequestBodyIndexReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Selector" })
  selector?: string;
}

/**
 * The reference that identifies an object.
 */
export class AttachToIndexRequestBodyTargetReference extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Selector" })
  selector?: string;
}

export class AttachToIndexRequestBody extends SpeakeasyBase {
  /**
   * The reference that identifies an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IndexReference" })
  @Type(() => AttachToIndexRequestBodyIndexReference)
  indexReference: AttachToIndexRequestBodyIndexReference;

  /**
   * The reference that identifies an object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TargetReference" })
  @Type(() => AttachToIndexRequestBodyTargetReference)
  targetReference: AttachToIndexRequestBodyTargetReference;
}

export class AttachToIndexRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AttachToIndexRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The Amazon Resource Name (ARN) of the directory where the object and index exist.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-amz-data-partition",
  })
  xAmzDataPartition: string;
}

export class AttachToIndexResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: shared.AccessDeniedException;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  attachToIndexResponse?: shared.AttachToIndexResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DirectoryNotEnabledException
   */
  @SpeakeasyMetadata()
  directoryNotEnabledException?: shared.DirectoryNotEnabledException;

  /**
   * IndexedAttributeMissingException
   */
  @SpeakeasyMetadata()
  indexedAttributeMissingException?: shared.IndexedAttributeMissingException;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: shared.InternalServiceException;

  /**
   * InvalidArnException
   */
  @SpeakeasyMetadata()
  invalidArnException?: shared.InvalidArnException;

  /**
   * InvalidAttachmentException
   */
  @SpeakeasyMetadata()
  invalidAttachmentException?: shared.InvalidAttachmentException;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: shared.LimitExceededException;

  /**
   * LinkNameAlreadyInUseException
   */
  @SpeakeasyMetadata()
  linkNameAlreadyInUseException?: shared.LinkNameAlreadyInUseException;

  /**
   * NotIndexException
   */
  @SpeakeasyMetadata()
  notIndexException?: shared.NotIndexException;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: shared.ResourceNotFoundException;

  /**
   * RetryableConflictException
   */
  @SpeakeasyMetadata()
  retryableConflictException?: shared.RetryableConflictException;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: shared.ValidationException;
}
