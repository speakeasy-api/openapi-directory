/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class UserStorageProvider {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328
   */
  getIdName(
    req: operations.GetIdNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIdNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIdNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{id}/name", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIdNameResponse =
        new operations.GetIdNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getIdName2XXApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328
   */
  getRealmUserStorageIdName(
    req: operations.GetRealmUserStorageIdNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmUserStorageIdNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmUserStorageIdNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/user-storage/{id}/name",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmUserStorageIdNameResponse =
        new operations.GetRealmUserStorageIdNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmUserStorageIdName2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove imported users
   */
  postRealmUserStorageIdRemoveImportedUsers(
    req: operations.PostRealmUserStorageIdRemoveImportedUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUserStorageIdRemoveImportedUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUserStorageIdRemoveImportedUsersRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/user-storage/{id}/remove-imported-users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUserStorageIdRemoveImportedUsersResponse =
        new operations.PostRealmUserStorageIdRemoveImportedUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Trigger sync of users   Action can be "triggerFullSync" or "triggerChangedUsersSync"
   */
  postRealmUserStorageIdSync(
    req: operations.PostRealmUserStorageIdSyncRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUserStorageIdSyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUserStorageIdSyncRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/user-storage/{id}/sync",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUserStorageIdSyncResponse =
        new operations.PostRealmUserStorageIdSyncResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.synchronizationResult = utils.objectToClass(
              httpRes?.data,
              shared.SynchronizationResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unlink imported users from a storage provider
   */
  postRealmUserStorageIdUnlinkUsers(
    req: operations.PostRealmUserStorageIdUnlinkUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUserStorageIdUnlinkUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUserStorageIdUnlinkUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/user-storage/{id}/unlink-users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUserStorageIdUnlinkUsersResponse =
        new operations.PostRealmUserStorageIdUnlinkUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Trigger sync of mapper data related to ldap mapper (roles, groups, â€¦ )   direction is "fedToKeycloak" or "keycloakToFed"
   */
  postRealmUserStorageParentIdMappersIdSync(
    req: operations.PostRealmUserStorageParentIdMappersIdSyncRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmUserStorageParentIdMappersIdSyncResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmUserStorageParentIdMappersIdSyncRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/user-storage/{parentId}/mappers/{id}/sync",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmUserStorageParentIdMappersIdSyncResponse =
        new operations.PostRealmUserStorageParentIdMappersIdSyncResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.synchronizationResult = utils.objectToClass(
              httpRes?.data,
              shared.SynchronizationResult
            );
          }
          break;
      }

      return res;
    });
  }
}
