"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Marketplacedeals:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adexchangebuyer_marketplacedeals_delete(self, request: operations.AdexchangebuyerMarketplacedealsDeleteRequest, security: operations.AdexchangebuyerMarketplacedealsDeleteSecurity) -> operations.AdexchangebuyerMarketplacedealsDeleteResponse:
        r"""Delete the specified deals from the proposal"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerMarketplacedealsDeleteRequest, base_url, '/proposals/{proposalId}/deals/delete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delete_order_deals_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerMarketplacedealsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerMarketplacedealsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteOrderDealsResponse])
                res.delete_order_deals_response = out

        return res

    def adexchangebuyer_marketplacedeals_insert(self, request: operations.AdexchangebuyerMarketplacedealsInsertRequest, security: operations.AdexchangebuyerMarketplacedealsInsertSecurity) -> operations.AdexchangebuyerMarketplacedealsInsertResponse:
        r"""Add new deals for the specified proposal"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerMarketplacedealsInsertRequest, base_url, '/proposals/{proposalId}/deals/insert', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_order_deals_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerMarketplacedealsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerMarketplacedealsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AddOrderDealsResponse])
                res.add_order_deals_response = out

        return res

    def adexchangebuyer_marketplacedeals_list(self, request: operations.AdexchangebuyerMarketplacedealsListRequest, security: operations.AdexchangebuyerMarketplacedealsListSecurity) -> operations.AdexchangebuyerMarketplacedealsListResponse:
        r"""List all the deals for a given proposal"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerMarketplacedealsListRequest, base_url, '/proposals/{proposalId}/deals', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerMarketplacedealsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerMarketplacedealsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetOrderDealsResponse])
                res.get_order_deals_response = out

        return res

    def adexchangebuyer_marketplacedeals_update(self, request: operations.AdexchangebuyerMarketplacedealsUpdateRequest, security: operations.AdexchangebuyerMarketplacedealsUpdateSecurity) -> operations.AdexchangebuyerMarketplacedealsUpdateResponse:
        r"""Replaces all the deals in the proposal with the passed in deals"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerMarketplacedealsUpdateRequest, base_url, '/proposals/{proposalId}/deals/update', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "edit_all_order_deals_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerMarketplacedealsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerMarketplacedealsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EditAllOrderDealsResponse])
                res.edit_all_order_deals_response = out

        return res

    