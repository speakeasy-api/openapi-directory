/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class LicenseeDaily extends SpeakeasyBase {
  /**
   * The number lookups performed by the licensee on the day represented b `licesees.daily.updatedAt`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count: number;

  /**
   * The timestamp when the limit was last used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  updatedAt: string;
}

/**
 * Licensee object which can be defined by user
 */
export class Licensee extends SpeakeasyBase {
  /**
   * Licensee's first, second and third line address as well as post town concatenated by commas
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address: string;

  /**
   * Timestamp for when the licensee was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  createdAt: string;

  @SpeakeasyMetadata()
  @Expose({ name: "daily" })
  @Type(() => LicenseeDaily)
  daily: LicenseeDaily;

  /**
   * An immutable ID provided for every licensee. Primarily used for paginated list requests.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Uniquely identifies a licensee for a key.
   *
   * @remarks
   *
   * Required to perform paid lookups for a specific licensee. Typically begins `sk_`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key: string;

  /**
   * Licensee individual or organisation name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Licensee's postcode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postcode" })
  postcode: string;

  /**
   * A list of allowed URLs. An empty list means that whitelisting is disabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "whitelist" })
  whitelist: string[];
}
