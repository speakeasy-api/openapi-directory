// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionScheduleDataBasicScheduleTimeUnitEnum string

const (
	ConnectionScheduleDataBasicScheduleTimeUnitEnumMinutes ConnectionScheduleDataBasicScheduleTimeUnitEnum = "minutes"
	ConnectionScheduleDataBasicScheduleTimeUnitEnumHours   ConnectionScheduleDataBasicScheduleTimeUnitEnum = "hours"
	ConnectionScheduleDataBasicScheduleTimeUnitEnumDays    ConnectionScheduleDataBasicScheduleTimeUnitEnum = "days"
	ConnectionScheduleDataBasicScheduleTimeUnitEnumWeeks   ConnectionScheduleDataBasicScheduleTimeUnitEnum = "weeks"
	ConnectionScheduleDataBasicScheduleTimeUnitEnumMonths  ConnectionScheduleDataBasicScheduleTimeUnitEnum = "months"
)

func (e *ConnectionScheduleDataBasicScheduleTimeUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = ConnectionScheduleDataBasicScheduleTimeUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionScheduleDataBasicScheduleTimeUnitEnum: %s", s)
	}
}

type ConnectionScheduleDataBasicSchedule struct {
	TimeUnit ConnectionScheduleDataBasicScheduleTimeUnitEnum `json:"timeUnit"`
	Units    int64                                           `json:"units"`
}

type ConnectionScheduleDataCron struct {
	CronExpression string `json:"cronExpression"`
	CronTimeZone   string `json:"cronTimeZone"`
}

// ConnectionScheduleData - schedule for when the the connection should run, per the schedule type
type ConnectionScheduleData struct {
	BasicSchedule *ConnectionScheduleDataBasicSchedule `json:"basicSchedule,omitempty"`
	Cron          *ConnectionScheduleDataCron          `json:"cron,omitempty"`
}
