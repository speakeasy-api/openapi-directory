<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudDiscoveryengineV1alphaDocument - Document captures all raw metadata information of items to be recommended or searched.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudDiscoveryengineV1alphaDocument
{
    /**
     * Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The JSON string representation of the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.
     * 
     * @var ?string $jsonData
     */
	#[\JMS\Serializer\Annotation\SerializedName('jsonData')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $jsonData = null;
    
    /**
     * Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
     * 
     * @var ?string $parentDocumentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('parentDocumentId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parentDocumentId = null;
    
    /**
     * The identifier of the schema located in the same data store.
     * 
     * @var ?string $schemaId
     */
	#[\JMS\Serializer\Annotation\SerializedName('schemaId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $schemaId = null;
    
    /**
     * The structured JSON data for the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.
     * 
     * @var ?array<string, mixed> $structData
     */
	#[\JMS\Serializer\Annotation\SerializedName('structData')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $structData = null;
    
	public function __construct()
	{
		$this->id = null;
		$this->jsonData = null;
		$this->name = null;
		$this->parentDocumentId = null;
		$this->schemaId = null;
		$this->structData = null;
	}
}
