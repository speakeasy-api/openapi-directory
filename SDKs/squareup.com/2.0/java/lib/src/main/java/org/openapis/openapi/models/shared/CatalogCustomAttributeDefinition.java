/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogCustomAttributeDefinition - Contains information defining a custom attribute. Custom attributes are
 * intended to store additional information about a catalog object or to associate a
 * catalog object with an entity in another system. Do not use custom attributes
 * to store any sensitive information (personally identifiable information, card details, etc.).
 * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
 */
public class CatalogCustomAttributeDefinition {
    /**
     * The set of Catalog Object Types that this Custom Attribute may be applied to.
     * Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
     */
    @JsonProperty("allowed_object_types")
    public String[] allowedObjectTypes;
    public CatalogCustomAttributeDefinition withAllowedObjectTypes(String[] allowedObjectTypes) {
        this.allowedObjectTypes = allowedObjectTypes;
        return this;
    }
    
    /**
     * The visibility of a custom attribute to applications other than the application
     * that created the attribute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_visibility")
    public String appVisibility;
    public CatalogCustomAttributeDefinition withAppVisibility(String appVisibility) {
        this.appVisibility = appVisibility;
        return this;
    }
    
    /**
     * __Read-only.__ The number of custom attributes that reference this
     * custom attribute definition. Set by the server in response to a ListCatalog
     * request with `include_counts` set to `true`.  If the actual count is greater
     * than 100, `custom_attribute_usage_count` will be set to `100`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_attribute_usage_count")
    public Long customAttributeUsageCount;
    public CatalogCustomAttributeDefinition withCustomAttributeUsageCount(Long customAttributeUsageCount) {
        this.customAttributeUsageCount = customAttributeUsageCount;
        return this;
    }
    
    /**
     * Seller-oriented description of the meaning of this Custom Attribute,
     * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CatalogCustomAttributeDefinition withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The name of the desired custom attribute key that can be used to access
     * the custom attribute value on catalog objects. Cannot be modified after the
     * custom attribute definition has been created.
     * Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;
    public CatalogCustomAttributeDefinition withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     *  The name of this definition for API and seller-facing UI purposes.
     * The name must be unique within the (merchant, application) pair. Required.
     * May not be empty and may not exceed 255 characters. Can be modified after creation.
     */
    @JsonProperty("name")
    public String name;
    public CatalogCustomAttributeDefinition withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_config")
    public CatalogCustomAttributeDefinitionNumberConfig numberConfig;
    public CatalogCustomAttributeDefinition withNumberConfig(CatalogCustomAttributeDefinitionNumberConfig numberConfig) {
        this.numberConfig = numberConfig;
        return this;
    }
    
    /**
     * Configuration associated with `SELECTION`-type custom attribute definitions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selection_config")
    public CatalogCustomAttributeDefinitionSelectionConfig selectionConfig;
    public CatalogCustomAttributeDefinition withSelectionConfig(CatalogCustomAttributeDefinitionSelectionConfig selectionConfig) {
        this.selectionConfig = selectionConfig;
        return this;
    }
    
    /**
     * The visibility of a custom attribute in seller-facing UIs (including Square Point
     * of Sale applications and Square Dashboard). May be modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seller_visibility")
    public String sellerVisibility;
    public CatalogCustomAttributeDefinition withSellerVisibility(String sellerVisibility) {
        this.sellerVisibility = sellerVisibility;
        return this;
    }
    
    /**
     * Provides information about the application used to generate a change.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_application")
    public SourceApplication sourceApplication;
    public CatalogCustomAttributeDefinition withSourceApplication(SourceApplication sourceApplication) {
        this.sourceApplication = sourceApplication;
        return this;
    }
    
    /**
     * Configuration associated with Custom Attribute Definitions of type `STRING`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("string_config")
    public CatalogCustomAttributeDefinitionStringConfig stringConfig;
    public CatalogCustomAttributeDefinition withStringConfig(CatalogCustomAttributeDefinitionStringConfig stringConfig) {
        this.stringConfig = stringConfig;
        return this;
    }
    
    /**
     * The type of this custom attribute. Cannot be modified after creation.
     * Required.
     */
    @JsonProperty("type")
    public String type;
    public CatalogCustomAttributeDefinition withType(String type) {
        this.type = type;
        return this;
    }
    
}
