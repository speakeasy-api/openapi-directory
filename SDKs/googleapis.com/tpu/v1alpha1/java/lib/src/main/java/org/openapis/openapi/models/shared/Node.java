/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Node - A TPU instance.
 */
public class Node {
    /**
     * Required. The type of hardware accelerators associated with this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceleratorType")
    public String acceleratorType;
    public Node withAcceleratorType(String acceleratorType) {
        this.acceleratorType = acceleratorType;
        return this;
    }
    
    /**
     * Output only. The API version that created this Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public NodeApiVersionEnum apiVersion;
    public Node withApiVersion(NodeApiVersionEnum apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cidrBlock")
    public String cidrBlock;
    public Node withCidrBlock(String cidrBlock) {
        this.cidrBlock = cidrBlock;
        return this;
    }
    
    /**
     * Output only. The time when the node was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Node withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Node withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The health status of the TPU node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("health")
    public NodeHealthEnum health;
    public Node withHealth(NodeHealthEnum health) {
        this.health = health;
        return this;
    }
    
    /**
     * Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthDescription")
    public String healthDescription;
    public Node withHealthDescription(String healthDescription) {
        this.healthDescription = healthDescription;
        return this;
    }
    
    /**
     * Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    public String ipAddress;
    public Node withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Resource labels to represent user-provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Node withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. Immutable. The name of the TPU
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Node withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, "default" will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public Node withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkEndpoints")
    public NetworkEndpoint[] networkEndpoints;
    public Node withNetworkEndpoints(NetworkEndpoint[] networkEndpoints) {
        this.networkEndpoints = networkEndpoints;
        return this;
    }
    
    /**
     * Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public String port;
    public Node withPort(String port) {
        this.port = port;
        return this;
    }
    
    /**
     * Sets the scheduling options for this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingConfig")
    public SchedulingConfig schedulingConfig;
    public Node withSchedulingConfig(SchedulingConfig schedulingConfig) {
        this.schedulingConfig = schedulingConfig;
        return this;
    }
    
    /**
     * Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccount")
    public String serviceAccount;
    public Node withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }
    
    /**
     * Output only. The current state for the TPU Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public NodeStateEnum state;
    public Node withState(NodeStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The Symptoms that have occurred to the TPU Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symptoms")
    public Symptom[] symptoms;
    public Node withSymptoms(Symptom[] symptoms) {
        this.symptoms = symptoms;
        return this;
    }
    
    /**
     * Required. The version of Tensorflow running in the Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tensorflowVersion")
    public String tensorflowVersion;
    public Node withTensorflowVersion(String tensorflowVersion) {
        this.tensorflowVersion = tensorflowVersion;
        return this;
    }
    
    /**
     * Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useServiceNetworking")
    public Boolean useServiceNetworking;
    public Node withUseServiceNetworking(Boolean useServiceNetworking) {
        this.useServiceNetworking = useServiceNetworking;
        return this;
    }
    
}
