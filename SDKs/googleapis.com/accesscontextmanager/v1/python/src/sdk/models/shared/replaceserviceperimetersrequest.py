"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import serviceperimeter as shared_serviceperimeter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplaceServicePerimetersRequest:
    r"""A request to replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically."""
    
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided."""  
    service_perimeters: Optional[list[shared_serviceperimeter.ServicePerimeter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servicePerimeters'), 'exclude': lambda f: f is None }})
    r"""Required. The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy."""  
    