/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class PutRecordRequestBody extends SpeakeasyBase {
  /**
   * <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>
   */
  @SpeakeasyMetadata({ elemType: shared.FeatureValue })
  @Expose({ name: "Record" })
  @Type(() => shared.FeatureValue)
  record: shared.FeatureValue[];

  /**
   * A list of stores to which you're adding the record. By default, Feature Store adds the record to all of the stores that you're using for the <code>FeatureGroup</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TargetStores" })
  targetStores?: shared.TargetStoreEnum[];
}

export class PutRecordRequest extends SpeakeasyBase {
  /**
   * The name of the feature group that you want to insert the record into.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FeatureGroupName",
  })
  featureGroupName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutRecordRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutRecordResponse extends SpeakeasyBase {
  /**
   * AccessForbidden
   */
  @SpeakeasyMetadata()
  accessForbidden?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailure
   */
  @SpeakeasyMetadata()
  internalFailure?: any;

  /**
   * ServiceUnavailable
   */
  @SpeakeasyMetadata()
  serviceUnavailable?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationError
   */
  @SpeakeasyMetadata()
  validationError?: any;
}
