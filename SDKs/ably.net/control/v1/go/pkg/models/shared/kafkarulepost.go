// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KafkaRulePostRuleTypeEnum string

const (
	KafkaRulePostRuleTypeEnumKafka KafkaRulePostRuleTypeEnum = "kafka"
)

func (e KafkaRulePostRuleTypeEnum) ToPointer() *KafkaRulePostRuleTypeEnum {
	return &e
}

func (e *KafkaRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kafka":
		*e = KafkaRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRulePostRuleTypeEnum: %v", v)
	}
}

type KafkaRulePostTargetAuthSaslMechanismEnum string

const (
	KafkaRulePostTargetAuthSaslMechanismEnumPlain       KafkaRulePostTargetAuthSaslMechanismEnum = "plain"
	KafkaRulePostTargetAuthSaslMechanismEnumScramSha256 KafkaRulePostTargetAuthSaslMechanismEnum = "scram-sha-256"
	KafkaRulePostTargetAuthSaslMechanismEnumScramSha512 KafkaRulePostTargetAuthSaslMechanismEnum = "scram-sha-512"
)

func (e KafkaRulePostTargetAuthSaslMechanismEnum) ToPointer() *KafkaRulePostTargetAuthSaslMechanismEnum {
	return &e
}

func (e *KafkaRulePostTargetAuthSaslMechanismEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plain":
		fallthrough
	case "scram-sha-256":
		fallthrough
	case "scram-sha-512":
		*e = KafkaRulePostTargetAuthSaslMechanismEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRulePostTargetAuthSaslMechanismEnum: %v", v)
	}
}

type KafkaRulePostTargetAuthSasl struct {
	Mechanism *KafkaRulePostTargetAuthSaslMechanismEnum `json:"mechanism,omitempty"`
	Password  *string                                   `json:"password,omitempty"`
	Username  *string                                   `json:"username,omitempty"`
}

type KafkaRulePostTargetAuth struct {
	Sasl *KafkaRulePostTargetAuthSasl `json:"sasl,omitempty"`
}

type KafkaRulePostTarget struct {
	Auth       KafkaRulePostTargetAuth `json:"auth"`
	Brokers    []string                `json:"brokers"`
	Enveloped  *bool                   `json:"enveloped,omitempty"`
	Format     *string                 `json:"format,omitempty"`
	RoutingKey string                  `json:"routingKey"`
}

type KafkaRulePost struct {
	RequestMode string                    `json:"requestMode"`
	RuleType    KafkaRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                `json:"source"`
	Status      *string                   `json:"status,omitempty"`
	Target      KafkaRulePostTarget       `json:"target"`
}
