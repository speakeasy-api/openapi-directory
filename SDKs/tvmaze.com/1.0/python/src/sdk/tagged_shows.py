"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TaggedShows:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_user_tags_tag_id_(self, request: operations.DeleteUserTagsTagIDRequest) -> operations.DeleteUserTagsTagIDResponse:
        r"""Delete a specific tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserTagsTagIDRequest, base_url, '/user/tags/{tag_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserTagsTagIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_user_tags_tag_id_shows_show_id_(self, request: operations.DeleteUserTagsTagIDShowsShowIDRequest) -> operations.DeleteUserTagsTagIDShowsShowIDResponse:
        r"""Untag a show"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteUserTagsTagIDShowsShowIDRequest, base_url, '/user/tags/{tag_id}/shows/{show_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteUserTagsTagIDShowsShowIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_user_tags(self) -> operations.GetUserTagsResponse:
        r"""List all tags"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/tags'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Tag]])
                res.tags = out

        return res

    def get_user_tags_tag_id_shows(self, request: operations.GetUserTagsTagIDShowsRequest) -> operations.GetUserTagsTagIDShowsResponse:
        r"""List all shows under this tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserTagsTagIDShowsRequest, base_url, '/user/tags/{tag_id}/shows', request)
        
        query_params = utils.get_query_params(operations.GetUserTagsTagIDShowsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserTagsTagIDShowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagInstance]])
                res.tag_instances = out
        elif http_res.status_code == 404:
            pass

        return res

    def patch_user_tags_tag_id_(self, request: operations.PatchUserTagsTagIDRequest) -> operations.PatchUserTagsTagIDResponse:
        r"""Update a specific tag"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchUserTagsTagIDRequest, base_url, '/user/tags/{tag_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchUserTagsTagIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    def post_user_tags(self, request: shared.TagInput) -> operations.PostUserTagsResponse:
        r"""Create a new tag"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/tags'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostUserTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tag])
                res.tag = out
        elif http_res.status_code == 422:
            pass

        return res

    def put_user_tags_tag_id_shows_show_id_(self, request: operations.PutUserTagsTagIDShowsShowIDRequest) -> operations.PutUserTagsTagIDShowsShowIDResponse:
        r"""Tag a show"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutUserTagsTagIDShowsShowIDRequest, base_url, '/user/tags/{tag_id}/shows/{show_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutUserTagsTagIDShowsShowIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagInstance])
                res.tag_instance = out
        elif http_res.status_code == 404:
            pass

        return res

    