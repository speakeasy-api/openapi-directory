// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SectionSectionTypeEnum - Optional. Type of the current price list section. Default value is FOOD.
type SectionSectionTypeEnum string

const (
	SectionSectionTypeEnumSectionTypeUnspecified SectionSectionTypeEnum = "SECTION_TYPE_UNSPECIFIED"
	SectionSectionTypeEnumFood                   SectionSectionTypeEnum = "FOOD"
	SectionSectionTypeEnumServices               SectionSectionTypeEnum = "SERVICES"
)

func (e SectionSectionTypeEnum) ToPointer() *SectionSectionTypeEnum {
	return &e
}

func (e *SectionSectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SECTION_TYPE_UNSPECIFIED":
		fallthrough
	case "FOOD":
		fallthrough
	case "SERVICES":
		*e = SectionSectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SectionSectionTypeEnum: %v", v)
	}
}

// Section - A section of the price list containing one or more items.
type Section struct {
	// Items that are contained within this section of the price list.
	Items []Item `json:"items,omitempty"`
	// Required. Language-tagged labels for the section. We recommend that section names and descriptions be 140 characters or less. At least one set of labels is required.
	Labels []Label `json:"labels,omitempty"`
	// Required. ID for the section. Price list, section, and item IDs cannot be duplicated within this Location.
	SectionID *string `json:"sectionId,omitempty"`
	// Optional. Type of the current price list section. Default value is FOOD.
	SectionType *SectionSectionTypeEnum `json:"sectionType,omitempty"`
}
