"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Statistics:
    r"""Stats Web Service"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_active_object_count_using_get(self, request: operations.GETActiveObjectCountUsingGETRequest) -> operations.GETActiveObjectCountUsingGETResponse:
        r"""Count of active objects by type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETActiveObjectCountUsingGETRequest, base_url, '/stats/count/activeObject/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETActiveObjectCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_active_object_diff_using_get(self, request: operations.GETActiveObjectDiffUsingGETRequest) -> operations.GETActiveObjectDiffUsingGETResponse:
        r"""Count difference of active objects, by type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETActiveObjectDiffUsingGETRequest, base_url, '/stats/diff/activeObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETActiveObjectDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_type_count_using_get(self, request: operations.GETGeneTypeCountUsingGETRequest) -> operations.GETGeneTypeCountUsingGETResponse:
        r"""Count of gene types, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneTypeCountUsingGETRequest, base_url, '/stats/count/geneType/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneTypeCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_gene_type_diff_using_get(self, request: operations.GETGeneTypeDiffUsingGETRequest) -> operations.GETGeneTypeDiffUsingGETResponse:
        r"""Count difference of gene types, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGeneTypeDiffUsingGETRequest, base_url, '/stats/diff/geneType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGeneTypeDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_object_status_count_using_get(self, request: operations.GETObjectStatusCountUsingGETRequest) -> operations.GETObjectStatusCountUsingGETResponse:
        r"""Count of objects with given status, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectStatusCountUsingGETRequest, base_url, '/stats/count/objectStatus/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectStatusCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_object_status_diff_using_get(self, request: operations.GETObjectStatusDiffUsingGETRequest) -> operations.GETObjectStatusDiffUsingGETResponse:
        r"""Count difference of objects with given status, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectStatusDiffUsingGETRequest, base_url, '/stats/diff/objectStatus/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectStatusDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_ref_seq_count_using_get(self, request: operations.GETObjectsWithRefSeqCountUsingGETRequest) -> operations.GETObjectsWithRefSeqCountUsingGETResponse:
        r"""Count of objects with reference sequence(s), by object type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithRefSeqCountUsingGETRequest, base_url, '/stats/count/objectWithRefSeq/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithRefSeqCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_ref_seq_diff_using_get(self, request: operations.GETObjectsWithRefSeqDiffUsingGETRequest) -> operations.GETObjectsWithRefSeqDiffUsingGETResponse:
        r"""Count difference of objects with reference sequence(s), by object type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithRefSeqDiffUsingGETRequest, base_url, '/stats/diff/objectWithRefSeq/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithRefSeqDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_reference_count_using_get(self, request: operations.GETObjectsWithReferenceCountUsingGETRequest) -> operations.GETObjectsWithReferenceCountUsingGETResponse:
        r"""Count of objects with reference, by object type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithReferenceCountUsingGETRequest, base_url, '/stats/count/objectWithReference/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithReferenceCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_reference_diff_using_get(self, request: operations.GETObjectsWithReferenceDiffUsingGETRequest) -> operations.GETObjectsWithReferenceDiffUsingGETResponse:
        r"""Count difference of objects with reference, by object type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithReferenceDiffUsingGETRequest, base_url, '/stats/diff/objectWithReference/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithReferenceDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_xd_bs_count_using_get(self, request: operations.GETObjectsWithXDBsCountUsingGETRequest) -> operations.GETObjectsWithXDBsCountUsingGETResponse:
        r"""Count of objects with external database ids, by database id, for specified species, object type and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithXDBsCountUsingGETRequest, base_url, '/stats/count/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithXDBsCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_objects_with_xd_bs_diff_using_get(self, request: operations.GETObjectsWithXDBsDiffUsingGETRequest) -> operations.GETObjectsWithXDBsDiffUsingGETResponse:
        r"""Count difference of objects with external database ids, by database id, for specified species, object type and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETObjectsWithXDBsDiffUsingGETRequest, base_url, '/stats/diff/objectWithXdb/{speciesTypeKey}/{objectKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETObjectsWithXDBsDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_protein_interaction_count_using_get(self, request: operations.GETProteinInteractionCountUsingGETRequest) -> operations.GETProteinInteractionCountUsingGETResponse:
        r"""Count of protein interactions, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETProteinInteractionCountUsingGETRequest, base_url, '/stats/count/proteinInteraction/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETProteinInteractionCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_protein_interaction_diff_using_get(self, request: operations.GETProteinInteractionDiffUsingGETRequest) -> operations.GETProteinInteractionDiffUsingGETResponse:
        r"""Count difference of protein interactions, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETProteinInteractionDiffUsingGETRequest, base_url, '/stats/diff/proteinInteraction/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETProteinInteractionDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_qtl_inheritance_type_count_using_get(self, request: operations.GETQtlInheritanceTypeCountUsingGETRequest) -> operations.GETQtlInheritanceTypeCountUsingGETResponse:
        r"""Count of strains, by qtl inheritance type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETQtlInheritanceTypeCountUsingGETRequest, base_url, '/stats/count/qtlInheritanceType/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETQtlInheritanceTypeCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_qtl_inheritance_type_diff_using_get(self, request: operations.GETQtlInheritanceTypeDiffUsingGETRequest) -> operations.GETQtlInheritanceTypeDiffUsingGETResponse:
        r"""Count difference of strains, by qtl inheritance type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETQtlInheritanceTypeDiffUsingGETRequest, base_url, '/stats/diff/qtlInheritanceType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETQtlInheritanceTypeDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_retired_object_count_using_get(self, request: operations.GETRetiredObjectCountUsingGETRequest) -> operations.GETRetiredObjectCountUsingGETResponse:
        r"""Count of retired objects by type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETRetiredObjectCountUsingGETRequest, base_url, '/stats/count/retiredObject/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRetiredObjectCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_retired_object_diff_using_get(self, request: operations.GETRetiredObjectDiffUsingGETRequest) -> operations.GETRetiredObjectDiffUsingGETResponse:
        r"""Count difference of retired objects, by type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETRetiredObjectDiffUsingGETRequest, base_url, '/stats/diff/retiredObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRetiredObjectDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_strain_type_count_using_get(self, request: operations.GETStrainTypeCountUsingGETRequest) -> operations.GETStrainTypeCountUsingGETResponse:
        r"""Count of strain types, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETStrainTypeCountUsingGETRequest, base_url, '/stats/count/strainType/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETStrainTypeCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_strain_type_diff_using_get(self, request: operations.GETStrainTypeDiffUsingGETRequest) -> operations.GETStrainTypeDiffUsingGETResponse:
        r"""Count difference of strain types, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETStrainTypeDiffUsingGETRequest, base_url, '/stats/diff/strainType/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETStrainTypeDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_term_stats_using_get(self, request: operations.GETTermStatsUsingGETRequest) -> operations.GETTermStatsUsingGETResponse:
        r"""getTermStats"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETTermStatsUsingGETRequest, base_url, '/stats/term/{accId}/{filterAccId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETTermStatsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_withdrawn_object_count_using_get(self, request: operations.GETWithdrawnObjectCountUsingGETRequest) -> operations.GETWithdrawnObjectCountUsingGETResponse:
        r"""Count of withdrawn objects by type, for specified species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETWithdrawnObjectCountUsingGETRequest, base_url, '/stats/count/withdrawnObject/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETWithdrawnObjectCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_withdrawn_object_diff_using_get(self, request: operations.GETWithdrawnObjectDiffUsingGETRequest) -> operations.GETWithdrawnObjectDiffUsingGETResponse:
        r"""Count difference of withdrawn objects, by type, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETWithdrawnObjectDiffUsingGETRequest, base_url, '/stats/diff/withdrawnObject/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETWithdrawnObjectDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_xdbs_count_using_get(self, request: operations.GETXdbsCountUsingGETRequest) -> operations.GETXdbsCountUsingGETResponse:
        r"""Count of external database ids, for specied species and date"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETXdbsCountUsingGETRequest, base_url, '/stats/count/xdb/{speciesTypeKey}/{dateYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETXdbsCountUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_xdbs_diff_using_get(self, request: operations.GETXdbsDiffUsingGETRequest) -> operations.GETXdbsDiffUsingGETResponse:
        r"""Count difference of external database ids, for specified species and date range"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETXdbsDiffUsingGETRequest, base_url, '/stats/diff/xdb/{speciesTypeKey}/{dateFromYYYYMMDD}/{dateToYYYYMMDD}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETXdbsDiffUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    