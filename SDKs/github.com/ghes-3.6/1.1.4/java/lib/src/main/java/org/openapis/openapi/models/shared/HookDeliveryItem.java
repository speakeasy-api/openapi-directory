/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * HookDeliveryItem - Delivery made by a webhook, without request and response information.
 */
public class HookDeliveryItem {
    /**
     * The type of activity for the event that triggered the delivery.
     */
    @JsonProperty("action")
    public String action;

    public HookDeliveryItem withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * Time when the webhook delivery occurred.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("delivered_at")
    public OffsetDateTime deliveredAt;

    public HookDeliveryItem withDeliveredAt(OffsetDateTime deliveredAt) {
        this.deliveredAt = deliveredAt;
        return this;
    }
    
    /**
     * Time spent delivering.
     */
    @JsonProperty("duration")
    public Double duration;

    public HookDeliveryItem withDuration(Double duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * The event that triggered the delivery.
     */
    @JsonProperty("event")
    public String event;

    public HookDeliveryItem withEvent(String event) {
        this.event = event;
        return this;
    }
    
    /**
     * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
     */
    @JsonProperty("guid")
    public String guid;

    public HookDeliveryItem withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    /**
     * Unique identifier of the webhook delivery.
     */
    @JsonProperty("id")
    public Long id;

    public HookDeliveryItem withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The id of the GitHub App installation associated with this event.
     */
    @JsonProperty("installation_id")
    public Long installationId;

    public HookDeliveryItem withInstallationId(Long installationId) {
        this.installationId = installationId;
        return this;
    }
    
    /**
     * Whether the webhook delivery is a redelivery.
     */
    @JsonProperty("redelivery")
    public Boolean redelivery;

    public HookDeliveryItem withRedelivery(Boolean redelivery) {
        this.redelivery = redelivery;
        return this;
    }
    
    /**
     * The id of the repository associated with this event.
     */
    @JsonProperty("repository_id")
    public Long repositoryId;

    public HookDeliveryItem withRepositoryId(Long repositoryId) {
        this.repositoryId = repositoryId;
        return this;
    }
    
    /**
     * Describes the response returned after attempting the delivery.
     */
    @JsonProperty("status")
    public String status;

    public HookDeliveryItem withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Status code received when delivery was made.
     */
    @JsonProperty("status_code")
    public Long statusCode;

    public HookDeliveryItem withStatusCode(Long statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    public HookDeliveryItem(@JsonProperty("action") String action, @JsonProperty("delivered_at") OffsetDateTime deliveredAt, @JsonProperty("duration") Double duration, @JsonProperty("event") String event, @JsonProperty("guid") String guid, @JsonProperty("id") Long id, @JsonProperty("installation_id") Long installationId, @JsonProperty("redelivery") Boolean redelivery, @JsonProperty("repository_id") Long repositoryId, @JsonProperty("status") String status, @JsonProperty("status_code") Long statusCode) {
        this.action = action;
        this.deliveredAt = deliveredAt;
        this.duration = duration;
        this.event = event;
        this.guid = guid;
        this.id = id;
        this.installationId = installationId;
        this.redelivery = redelivery;
        this.repositoryId = repositoryId;
        this.status = status;
        this.statusCode = statusCode;
  }
}
