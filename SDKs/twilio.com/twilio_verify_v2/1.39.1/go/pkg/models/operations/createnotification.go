// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateNotificationServerList = []string{
	"https://verify.twilio.com",
}

type CreateNotificationSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type CreateNotificationPathParams struct {
	// The unique SID identifier of the Challenge.
	ChallengeSid string `pathParam:"style=simple,explode=false,name=ChallengeSid"`
	// Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
	Identity string `pathParam:"style=simple,explode=false,name=Identity"`
	// The unique SID identifier of the Service.
	ServiceSid string `pathParam:"style=simple,explode=false,name=ServiceSid"`
}

type CreateNotificationCreateNotificationRequest struct {
	// How long, in seconds, the notification is valid. Can be an integer between 0 and 300. Default is 300. Delivery is attempted until the TTL elapses, even if the device is offline. 0 means that the notification delivery is attempted immediately, only once, and is not stored for future delivery.
	TTL *int64 `form:"name=Ttl"`
}

type CreateNotificationRequest struct {
	PathParams CreateNotificationPathParams
	Request    *CreateNotificationCreateNotificationRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Security   CreateNotificationSecurity
	ServerURL  *string
}

type CreateNotificationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	VerifyV2ServiceEntityChallengeNotification *shared.VerifyV2ServiceEntityChallengeNotification
}
