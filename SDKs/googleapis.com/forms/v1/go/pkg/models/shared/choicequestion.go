// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChoiceQuestionTypeEnum - Required. The type of choice question.
type ChoiceQuestionTypeEnum string

const (
	ChoiceQuestionTypeEnumChoiceTypeUnspecified ChoiceQuestionTypeEnum = "CHOICE_TYPE_UNSPECIFIED"
	ChoiceQuestionTypeEnumRadio                 ChoiceQuestionTypeEnum = "RADIO"
	ChoiceQuestionTypeEnumCheckbox              ChoiceQuestionTypeEnum = "CHECKBOX"
	ChoiceQuestionTypeEnumDropDown              ChoiceQuestionTypeEnum = "DROP_DOWN"
)

func (e ChoiceQuestionTypeEnum) ToPointer() *ChoiceQuestionTypeEnum {
	return &e
}

func (e *ChoiceQuestionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHOICE_TYPE_UNSPECIFIED":
		fallthrough
	case "RADIO":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "DROP_DOWN":
		*e = ChoiceQuestionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChoiceQuestionTypeEnum: %v", v)
	}
}

// ChoiceQuestion - A radio/checkbox/dropdown question.
type ChoiceQuestion struct {
	// Required. List of options that a respondent must choose from.
	Options []Option `json:"options,omitempty"`
	// Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.
	Shuffle *bool `json:"shuffle,omitempty"`
	// Required. The type of choice question.
	Type *ChoiceQuestionTypeEnum `json:"type,omitempty"`
}

// ChoiceQuestionInput - A radio/checkbox/dropdown question.
type ChoiceQuestionInput struct {
	// Required. List of options that a respondent must choose from.
	Options []OptionInput `json:"options,omitempty"`
	// Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.
	Shuffle *bool `json:"shuffle,omitempty"`
	// Required. The type of choice question.
	Type *ChoiceQuestionTypeEnum `json:"type,omitempty"`
}
