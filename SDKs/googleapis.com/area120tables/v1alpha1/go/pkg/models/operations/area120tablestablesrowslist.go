// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type Area120tablesTablesRowsListSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurityOption4 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurityOption5 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurityOption6 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type Area120tablesTablesRowsListSecurity struct {
	Option1 *Area120tablesTablesRowsListSecurityOption1 `security:"option"`
	Option2 *Area120tablesTablesRowsListSecurityOption2 `security:"option"`
	Option3 *Area120tablesTablesRowsListSecurityOption3 `security:"option"`
	Option4 *Area120tablesTablesRowsListSecurityOption4 `security:"option"`
	Option5 *Area120tablesTablesRowsListSecurityOption5 `security:"option"`
	Option6 *Area120tablesTablesRowsListSecurityOption6 `security:"option"`
}

type Area120tablesTablesRowsListPathParams struct {
	// Required. The parent table. Format: tables/{table}
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
}

// Area120tablesTablesRowsListViewEnum - Optional. Column key to use for values in the row. Defaults to user entered name.
type Area120tablesTablesRowsListViewEnum string

const (
	Area120tablesTablesRowsListViewEnumViewUnspecified Area120tablesTablesRowsListViewEnum = "VIEW_UNSPECIFIED"
	Area120tablesTablesRowsListViewEnumColumnIDView    Area120tablesTablesRowsListViewEnum = "COLUMN_ID_VIEW"
)

func (e *Area120tablesTablesRowsListViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_UNSPECIFIED":
		fallthrough
	case "COLUMN_ID_VIEW":
		*e = Area120tablesTablesRowsListViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Area120tablesTablesRowsListViewEnum: %s", s)
	}
}

type Area120tablesTablesRowsListQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Optional. Filter to only include resources matching the requirements. For more information, see [Filtering list results](https://support.google.com/area120-tables/answer/10503371).
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Optional. Sorting order for the list of rows on createTime/updateTime.
	OrderBy *string `queryParam:"style=form,explode=true,name=orderBy"`
	// The maximum number of rows to return. The service may return fewer than this value. If unspecified, at most 50 rows are returned. The maximum value is 1,000; values above 1,000 are coerced to 1,000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// A page token, received from a previous `ListRows` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRows` must match the call that provided the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Optional. Column key to use for values in the row. Defaults to user entered name.
	View *Area120tablesTablesRowsListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type Area120tablesTablesRowsListRequest struct {
	PathParams  Area120tablesTablesRowsListPathParams
	QueryParams Area120tablesTablesRowsListQueryParams
	Security    Area120tablesTablesRowsListSecurity
}

type Area120tablesTablesRowsListResponse struct {
	ContentType string
	// Successful response
	ListRowsResponse *shared.ListRowsResponse
	StatusCode       int
	RawResponse      *http.Response
}
