// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CaptionSnippetAudioTrackTypeEnum - The type of audio track associated with the caption track.
type CaptionSnippetAudioTrackTypeEnum string

const (
	CaptionSnippetAudioTrackTypeEnumUnknown     CaptionSnippetAudioTrackTypeEnum = "unknown"
	CaptionSnippetAudioTrackTypeEnumPrimary     CaptionSnippetAudioTrackTypeEnum = "primary"
	CaptionSnippetAudioTrackTypeEnumCommentary  CaptionSnippetAudioTrackTypeEnum = "commentary"
	CaptionSnippetAudioTrackTypeEnumDescriptive CaptionSnippetAudioTrackTypeEnum = "descriptive"
)

func (e *CaptionSnippetAudioTrackTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknown":
		fallthrough
	case "primary":
		fallthrough
	case "commentary":
		fallthrough
	case "descriptive":
		*e = CaptionSnippetAudioTrackTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CaptionSnippetAudioTrackTypeEnum: %s", s)
	}
}

// CaptionSnippetFailureReasonEnum - The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
type CaptionSnippetFailureReasonEnum string

const (
	CaptionSnippetFailureReasonEnumUnknownFormat     CaptionSnippetFailureReasonEnum = "unknownFormat"
	CaptionSnippetFailureReasonEnumUnsupportedFormat CaptionSnippetFailureReasonEnum = "unsupportedFormat"
	CaptionSnippetFailureReasonEnumProcessingFailed  CaptionSnippetFailureReasonEnum = "processingFailed"
)

func (e *CaptionSnippetFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknownFormat":
		fallthrough
	case "unsupportedFormat":
		fallthrough
	case "processingFailed":
		*e = CaptionSnippetFailureReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CaptionSnippetFailureReasonEnum: %s", s)
	}
}

// CaptionSnippetStatusEnum - The caption track's status.
type CaptionSnippetStatusEnum string

const (
	CaptionSnippetStatusEnumServing CaptionSnippetStatusEnum = "serving"
	CaptionSnippetStatusEnumSyncing CaptionSnippetStatusEnum = "syncing"
	CaptionSnippetStatusEnumFailed  CaptionSnippetStatusEnum = "failed"
)

func (e *CaptionSnippetStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "serving":
		fallthrough
	case "syncing":
		fallthrough
	case "failed":
		*e = CaptionSnippetStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CaptionSnippetStatusEnum: %s", s)
	}
}

// CaptionSnippetTrackKindEnum - The caption track's type.
type CaptionSnippetTrackKindEnum string

const (
	CaptionSnippetTrackKindEnumStandard CaptionSnippetTrackKindEnum = "standard"
	CaptionSnippetTrackKindEnumAsr      CaptionSnippetTrackKindEnum = "ASR"
	CaptionSnippetTrackKindEnumForced   CaptionSnippetTrackKindEnum = "forced"
)

func (e *CaptionSnippetTrackKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "ASR":
		fallthrough
	case "forced":
		*e = CaptionSnippetTrackKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CaptionSnippetTrackKindEnum: %s", s)
	}
}

// CaptionSnippet - Basic details about a caption track, such as its language and name.
type CaptionSnippet struct {
	// The type of audio track associated with the caption track.
	AudioTrackType *CaptionSnippetAudioTrackTypeEnum `json:"audioTrackType,omitempty"`
	// The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
	FailureReason *CaptionSnippetFailureReasonEnum `json:"failureReason,omitempty"`
	// Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
	IsAutoSynced *bool `json:"isAutoSynced,omitempty"`
	// Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
	IsCC *bool `json:"isCC,omitempty"`
	// Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
	IsDraft *bool `json:"isDraft,omitempty"`
	// Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
	IsEasyReader *bool `json:"isEasyReader,omitempty"`
	// Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
	IsLarge *bool `json:"isLarge,omitempty"`
	// The language of the caption track. The property value is a BCP-47 language tag.
	Language *string `json:"language,omitempty"`
	// The date and time when the caption track was last updated.
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	// The name of the caption track. The name is intended to be visible to the user as an option during playback.
	Name *string `json:"name,omitempty"`
	// The caption track's status.
	Status *CaptionSnippetStatusEnum `json:"status,omitempty"`
	// The caption track's type.
	TrackKind *CaptionSnippetTrackKindEnum `json:"trackKind,omitempty"`
	// The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
	VideoID *string `json:"videoId,omitempty"`
}
