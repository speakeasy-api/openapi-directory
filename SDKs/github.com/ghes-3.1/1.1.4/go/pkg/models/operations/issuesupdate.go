// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IssuesUpdateRequestBodyLabels2 struct {
	Color       *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	ID          *int64  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type IssuesUpdateRequestBodyLabelsType string

const (
	IssuesUpdateRequestBodyLabelsTypeStr                            IssuesUpdateRequestBodyLabelsType = "str"
	IssuesUpdateRequestBodyLabelsTypeIssuesUpdateRequestBodyLabels2 IssuesUpdateRequestBodyLabelsType = "issues/update_requestBody_labels_2"
)

type IssuesUpdateRequestBodyLabels struct {
	Str                            *string
	IssuesUpdateRequestBodyLabels2 *IssuesUpdateRequestBodyLabels2

	Type IssuesUpdateRequestBodyLabelsType
}

func CreateIssuesUpdateRequestBodyLabelsStr(str string) IssuesUpdateRequestBodyLabels {
	typ := IssuesUpdateRequestBodyLabelsTypeStr

	return IssuesUpdateRequestBodyLabels{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesUpdateRequestBodyLabelsIssuesUpdateRequestBodyLabels2(issuesUpdateRequestBodyLabels2 IssuesUpdateRequestBodyLabels2) IssuesUpdateRequestBodyLabels {
	typ := IssuesUpdateRequestBodyLabelsTypeIssuesUpdateRequestBodyLabels2

	return IssuesUpdateRequestBodyLabels{
		IssuesUpdateRequestBodyLabels2: &issuesUpdateRequestBodyLabels2,
		Type:                           typ,
	}
}

func (u *IssuesUpdateRequestBodyLabels) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesUpdateRequestBodyLabelsTypeStr
		return nil
	}

	issuesUpdateRequestBodyLabels2 := new(IssuesUpdateRequestBodyLabels2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&issuesUpdateRequestBodyLabels2); err == nil {
		u.IssuesUpdateRequestBodyLabels2 = issuesUpdateRequestBodyLabels2
		u.Type = IssuesUpdateRequestBodyLabelsTypeIssuesUpdateRequestBodyLabels2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesUpdateRequestBodyLabels) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.IssuesUpdateRequestBodyLabels2 != nil {
		return json.Marshal(u.IssuesUpdateRequestBodyLabels2)
	}

	return nil, nil
}

type IssuesUpdateRequestBodyMilestoneType string

const (
	IssuesUpdateRequestBodyMilestoneTypeStr     IssuesUpdateRequestBodyMilestoneType = "str"
	IssuesUpdateRequestBodyMilestoneTypeInteger IssuesUpdateRequestBodyMilestoneType = "integer"
)

type IssuesUpdateRequestBodyMilestone struct {
	Str     *string
	Integer *int64

	Type IssuesUpdateRequestBodyMilestoneType
}

func CreateIssuesUpdateRequestBodyMilestoneStr(str string) IssuesUpdateRequestBodyMilestone {
	typ := IssuesUpdateRequestBodyMilestoneTypeStr

	return IssuesUpdateRequestBodyMilestone{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesUpdateRequestBodyMilestoneInteger(integer int64) IssuesUpdateRequestBodyMilestone {
	typ := IssuesUpdateRequestBodyMilestoneTypeInteger

	return IssuesUpdateRequestBodyMilestone{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *IssuesUpdateRequestBodyMilestone) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesUpdateRequestBodyMilestoneTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = IssuesUpdateRequestBodyMilestoneTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesUpdateRequestBodyMilestone) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

// IssuesUpdateRequestBodyStateEnum - State of the issue. Either `open` or `closed`.
type IssuesUpdateRequestBodyStateEnum string

const (
	IssuesUpdateRequestBodyStateEnumOpen   IssuesUpdateRequestBodyStateEnum = "open"
	IssuesUpdateRequestBodyStateEnumClosed IssuesUpdateRequestBodyStateEnum = "closed"
)

func (e IssuesUpdateRequestBodyStateEnum) ToPointer() *IssuesUpdateRequestBodyStateEnum {
	return &e
}

func (e *IssuesUpdateRequestBodyStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = IssuesUpdateRequestBodyStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesUpdateRequestBodyStateEnum: %v", v)
	}
}

type IssuesUpdateRequestBodyTitleType string

const (
	IssuesUpdateRequestBodyTitleTypeStr     IssuesUpdateRequestBodyTitleType = "str"
	IssuesUpdateRequestBodyTitleTypeInteger IssuesUpdateRequestBodyTitleType = "integer"
)

type IssuesUpdateRequestBodyTitle struct {
	Str     *string
	Integer *int64

	Type IssuesUpdateRequestBodyTitleType
}

func CreateIssuesUpdateRequestBodyTitleStr(str string) IssuesUpdateRequestBodyTitle {
	typ := IssuesUpdateRequestBodyTitleTypeStr

	return IssuesUpdateRequestBodyTitle{
		Str:  &str,
		Type: typ,
	}
}

func CreateIssuesUpdateRequestBodyTitleInteger(integer int64) IssuesUpdateRequestBodyTitle {
	typ := IssuesUpdateRequestBodyTitleTypeInteger

	return IssuesUpdateRequestBodyTitle{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *IssuesUpdateRequestBodyTitle) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = IssuesUpdateRequestBodyTitleTypeStr
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = IssuesUpdateRequestBodyTitleTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u IssuesUpdateRequestBodyTitle) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

type IssuesUpdateRequestBody struct {
	// Login for the user that this issue should be assigned to. **This field is deprecated.**
	Assignee *string `json:"assignee,omitempty"`
	// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
	Assignees []string `json:"assignees,omitempty"`
	// The contents of the issue.
	Body *string `json:"body,omitempty"`
	// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
	Labels    []IssuesUpdateRequestBodyLabels   `json:"labels,omitempty"`
	Milestone *IssuesUpdateRequestBodyMilestone `json:"milestone,omitempty"`
	// State of the issue. Either `open` or `closed`.
	State *IssuesUpdateRequestBodyStateEnum `json:"state,omitempty"`
	// The title of the issue.
	Title *IssuesUpdateRequestBodyTitle `json:"title,omitempty"`
}

type IssuesUpdateRequest struct {
	RequestBody *IssuesUpdateRequestBody `request:"mediaType=application/json"`
	// The number that identifies the issue.
	IssueNumber int64 `pathParam:"style=simple,explode=false,name=issue_number"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// IssuesUpdate503ApplicationJSON - Service unavailable
type IssuesUpdate503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type IssuesUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Moved permanently
	BasicError *shared.BasicError
	// Response
	Issue *shared.Issue
	// Service unavailable
	IssuesUpdate503ApplicationJSONObject *IssuesUpdate503ApplicationJSON
	// Validation failed
	ValidationError *shared.ValidationError
}
