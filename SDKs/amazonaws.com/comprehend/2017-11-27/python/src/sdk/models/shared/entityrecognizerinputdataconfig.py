"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import augmentedmanifestslistitem as shared_augmentedmanifestslistitem
from ..shared import entityrecognizerannotations as shared_entityrecognizerannotations
from ..shared import entityrecognizerdataformat_enum as shared_entityrecognizerdataformat_enum
from ..shared import entityrecognizerdocuments as shared_entityrecognizerdocuments
from ..shared import entityrecognizerentitylist as shared_entityrecognizerentitylist
from ..shared import entitytypeslistitem as shared_entitytypeslistitem
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityRecognizerInputDataConfig:
    r"""Specifies the format and location of the input data."""
    
    entity_types: list[shared_entitytypeslistitem.EntityTypesListItem] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntityTypes') }})  
    annotations: Optional[shared_entityrecognizerannotations.EntityRecognizerAnnotations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Annotations'), 'exclude': lambda f: f is None }})  
    augmented_manifests: Optional[list[shared_augmentedmanifestslistitem.AugmentedManifestsListItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AugmentedManifests'), 'exclude': lambda f: f is None }})  
    data_format: Optional[shared_entityrecognizerdataformat_enum.EntityRecognizerDataFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataFormat'), 'exclude': lambda f: f is None }})  
    documents: Optional[shared_entityrecognizerdocuments.EntityRecognizerDocuments] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Documents'), 'exclude': lambda f: f is None }})  
    entity_list: Optional[shared_entityrecognizerentitylist.EntityRecognizerEntityList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntityList'), 'exclude': lambda f: f is None }})  
    