/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class AssetsCorrelationMatrix {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AssetsCorrelationMatrix(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Correlation Matrix
     * Compute the Pearson asset correlation matrix from either:  
     * * The asset returns
     * * The asset covariance matrix
     * 
     * References
     * * [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixResponse postAssetsCorrelationMatrix(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixResponse() {{
            postAssetsCorrelationMatrix200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrix200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrix200ApplicationJSON.class);
                res.postAssetsCorrelationMatrix200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Bounds
     * Compute the lower bounds and the upper bounds of an asset correlation matrix associated to a given group of assets.
     *  
     *  References
     *  * [Kawee Numpacharoen &amp; Kornkanok Bunwong (2013) Boundaries of Correlation Adjustment with Applications to Financial Risk Management, Applied Mathematical Finance, 20:4, 403-414](http://dx.doi.org/10.1080/1350486X.2012.723517).
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBoundsResponse postAssetsCorrelationMatrixBounds(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBoundsRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/bounds");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBoundsResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBoundsResponse() {{
            postAssetsCorrelationMatrixBounds200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBounds200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixBounds200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixBounds200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Denoised Correlation Matrix
     * Compute a denoised asset correlation matrix, using one of the following methods:
     *  * The eigenvalues clipping method, described in the first reference, which is based on random matrix theory
     *  
     *  References
     *  * [Laurent Laloux, Pierre Cizeau, Jean-Philippe Bouchaud, and Marc Potters, Noise Dressing of Financial Correlation Matrices, Phys. Rev. Lett. 83, 1467](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.83.1467)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoisedResponse postAssetsCorrelationMatrixDenoised(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoisedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/denoised");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoisedResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoisedResponse() {{
            postAssetsCorrelationMatrixDenoised200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoised200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDenoised200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixDenoised200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Distance
     * Compute the distance between an asset correlation matrix and a reference correlation matrix, using one of the following distance metrics:
     * * Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
     * * Correlation matrix distance, defined in the first reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
     * * Bures distance, defined in the second reference
     * 
     *  References
     *  * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
     *  * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures\u2013Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistanceResponse postAssetsCorrelationMatrixDistance(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistanceRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/distance");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistanceResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistanceResponse() {{
            postAssetsCorrelationMatrixDistance200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistance200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixDistance200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixDistance200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Effective Rank
     * Compute the effective rank of an asset correlation matrix.
     * 
     * References
     * * [Olivier Roy and Martin Vetterli, The effective rank: A measure of effective dimensionality, 15th European Signal Processing Conference, 2007](https://ieeexplore.ieee.org/document/7098875)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRankResponse postAssetsCorrelationMatrixEffectiveRank(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRankRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/effective-rank");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRankResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRankResponse() {{
            postAssetsCorrelationMatrixEffectiveRank200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRank200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixEffectiveRank200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixEffectiveRank200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Informativeness
     * Compute the informativeness of an asset correlation matrix, using one of the following distance metrics:
     * * Euclidean distance (default), which is the distance induced by [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm)
     * * Correlation matrix distance, defined in the second reference, which corresponds to [the cosine distance](https://en.wikipedia.org/wiki/Cosine_similarity) between the two vectorized asset correlation matrices
     * * Bures distance, defined in the third reference
     * 
     *  References
     *  * [Austin J. Brockmeier and Tingting Mu and Sophia Ananiadou and John Y. Goulermas, Quantifying the Informativeness of Similarity Measurements, Journal of Machine Learning Research, 2017](http://jmlr.org/papers/v18/16-296.html)
     *  * [M. Herdin, N. Czink, H. Ozcelik and E. Bonek, Correlation matrix distance, a meaningful measure for evaluation of non-stationary MIMO channels, 2005 IEEE 61st Vehicular Technology Conference, 2005, pp. 136-140 Vol. 1](https://ieeexplore.ieee.org/document/1543265)
     *  * [Rajendra Bhatia, Tanvi Jain, Yongdo Lim, On the Bures\u2013Wasserstein distance between positive definite matrices, Expositiones Mathematicae, Volume 37, Issue 2, 2019](https://www.sciencedirect.com/science/article/pii/S0723086918300021)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativenessResponse postAssetsCorrelationMatrixInformativeness(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativenessRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/informativeness");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativenessResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativenessResponse() {{
            postAssetsCorrelationMatrixInformativeness200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativeness200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixInformativeness200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixInformativeness200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Nearest Correlation Matrix
     * Compute the _closest_ - in terms of [the Frobenius norm](https://en.wikipedia.org/wiki/Matrix_norm#Frobenius_norm) - asset correlation matrix to an approximate asset correlation matrix, optionally keeping a selected number of correlations fixed.
     * 
     * References
     * * [Nicholas J. Higham, Computing the Nearest Correlation Matrix\u2014A Problem from Finance, IMA J. Numer. Anal. 22, 329\u2013343, 2002.](http://www.maths.manchester.ac.uk/~higham/narep/narep369.pdf)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearestResponse postAssetsCorrelationMatrixNearest(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearestRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/nearest");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearestResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearestResponse() {{
            postAssetsCorrelationMatrixNearest200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearest200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixNearest200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixNearest200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Random Correlation Matrix
     * Generate an asset correlation matrix uniformly at random over the space of positive definite correlation matrices.
     * 
     * References
     * * [Joe, H., Generating random correlation matrices based on partial correlations. Journal of Multivariate Analysis, 2006, 97, 2177-2189](https://www.sciencedirect.com/science/article/pii/S0047259X05000886)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandomResponse postAssetsCorrelationMatrixRandom(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandomRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/random");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandomResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandomResponse() {{
            postAssetsCorrelationMatrixRandom200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandom200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixRandom200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixRandom200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Shrinkage
     * Compute an asset correlation matrix as a convex linear combination of an asset correlation matrix and a target correlation matrix, the target correlation matrix being either:  
     *  * An equicorrelation matrix made of 1
     *  * An equicorrelation matrix made of 0
     *  * An equicorrelation matrix made of -1/(n-1), with n the number of assets
     *  * A provided correlation matrix
     *  
     *  References
     *  * [Steiner, Andreas, Manipulating Valid Correlation Matrices](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1878165)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixShrinkageResponse postAssetsCorrelationMatrixShrinkage(Object request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/shrinkage");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixShrinkageResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixShrinkageResponse() {{
            postAssetsCorrelationMatrixShrinkage200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixShrinkage200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixShrinkage200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixShrinkage200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Theory-Implied Correlation Matrix
     * Compute the theory-implied asset correlation matrix associated with:
     * * A hierarchical classification of a universe of assets
     * * An asset correlation matrix
     * 
     * References
     * * [Lopez de Prado, Marcos Estimation of Theory-Implied Correlation Matrices (November 9, 2019)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3484152)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImpliedResponse postAssetsCorrelationMatrixTheoryImplied(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImpliedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/theory-implied");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImpliedResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImpliedResponse() {{
            postAssetsCorrelationMatrixTheoryImplied200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImplied200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixTheoryImplied200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixTheoryImplied200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Correlation Matrix Validation
     * Validate whether a matrix is an asset correlation matrix.
     * 
     * References
     * * [Wikipedia, Correlation and Dependence](https://en.wikipedia.org/wiki/Correlation_and_dependence#Correlation_matrices)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidationResponse postAssetsCorrelationMatrixValidation(org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidationRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/correlation/matrix/validation");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidationResponse res = new org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidationResponse() {{
            postAssetsCorrelationMatrixValidation200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidation200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsCorrelationMatrixValidation200ApplicationJSON.class);
                res.postAssetsCorrelationMatrixValidation200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}