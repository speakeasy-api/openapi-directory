"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIClassifierOut:
    r"""The list of classifiers and versions."""
    
    classifier_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classifierName'), 'exclude': lambda f: f is None }})
    r"""The classifier name"""  
    learning: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('learning'), 'exclude': lambda f: f is None }})
    r"""True if the classifier is learning"""  
    probability_calibrated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probabilityCalibrated'), 'exclude': lambda f: f is None }})
    r"""True if the classifier has finished the initial learning and calibrated probabilities (meanwhile, during initial learning, probabilities will be equal to -1)"""  
    serving: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serving'), 'exclude': lambda f: f is None }})
    r"""True if the classifier is serving requests (has reached minimal learning, is not shutting down)"""  
    shutting_down: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shuttingDown'), 'exclude': lambda f: f is None }})
    r"""True if the classifier is shutting down"""  
    