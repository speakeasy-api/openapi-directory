"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import detectedfield as shared_detectedfield
from ..shared import detectedmetricsource as shared_detectedmetricsource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DetectedMetricSetConfig:
    r"""An inferred dataset configuration."""
    
    metric_set_frequency: Optional[shared_detectedfield.DetectedField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSetFrequency'), 'exclude': lambda f: f is None }})  
    metric_source: Optional[shared_detectedmetricsource.DetectedMetricSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSource'), 'exclude': lambda f: f is None }})  
    offset: Optional[shared_detectedfield.DetectedField] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Offset'), 'exclude': lambda f: f is None }})  
    