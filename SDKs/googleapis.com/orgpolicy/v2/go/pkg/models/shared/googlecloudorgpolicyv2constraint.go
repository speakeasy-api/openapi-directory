// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum - The evaluation behavior of this constraint in the absence of a policy.
type GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum string

const (
	GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnumConstraintDefaultUnspecified GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum = "CONSTRAINT_DEFAULT_UNSPECIFIED"
	GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnumAllow                        GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum = "ALLOW"
	GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnumDeny                         GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum = "DENY"
)

func (e GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum) ToPointer() *GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum {
	return &e
}

func (e *GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONSTRAINT_DEFAULT_UNSPECIFIED":
		fallthrough
	case "ALLOW":
		fallthrough
	case "DENY":
		*e = GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum: %v", v)
	}
}

// GoogleCloudOrgpolicyV2Constraint - A constraint describes a way to restrict resource's configuration. For example, you could enforce a constraint that controls which Google Cloud services can be activated across an organization, or whether a Compute Engine instance can have serial port connections established. Constraints can be configured by the organization policy administrator to fit the needs of the organization by setting a policy that includes constraints at different locations in the organization's resource hierarchy. Policies are inherited down the resource hierarchy from higher levels, but can also be overridden. For details about the inheritance rules please read about `policies`. Constraints have a default behavior determined by the `constraint_default` field, which is the enforcement behavior that is used in the absence of a policy being defined or inherited for the resource in question.
type GoogleCloudOrgpolicyV2Constraint struct {
	// A constraint that is either enforced or not. For example, a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.
	BooleanConstraint map[string]interface{} `json:"booleanConstraint,omitempty"`
	// The evaluation behavior of this constraint in the absence of a policy.
	ConstraintDefault *GoogleCloudOrgpolicyV2ConstraintConstraintDefaultEnum `json:"constraintDefault,omitempty"`
	// Detailed description of what this constraint controls as well as how and where it is enforced. Mutable.
	Description *string `json:"description,omitempty"`
	// The human readable name. Mutable.
	DisplayName *string `json:"displayName,omitempty"`
	// A constraint that allows or disallows a list of string values, which are configured by an Organization Policy administrator with a policy.
	ListConstraint *GoogleCloudOrgpolicyV2ConstraintListConstraint `json:"listConstraint,omitempty"`
	// Immutable. The resource name of the constraint. Must be in one of the following forms: * `projects/{project_number}/constraints/{constraint_name}` * `folders/{folder_id}/constraints/{constraint_name}` * `organizations/{organization_id}/constraints/{constraint_name}` For example, "/projects/123/constraints/compute.disableSerialPortAccess".
	Name *string `json:"name,omitempty"`
	// Shows if dry run is supported for this constraint or not.
	SupportsDryRun *bool `json:"supportsDryRun,omitempty"`
}
