"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import error as shared_error
from ..shared import v1money as shared_v1money
from ..shared import v1orderhistoryentry as shared_v1orderhistoryentry
from ..shared import v1tender as shared_v1tender
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V1Order:
    r"""V1Order"""
    
    btc_price_satoshi: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('btc_price_satoshi'), 'exclude': lambda f: f is None }})
    r"""For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC)."""  
    btc_receive_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('btc_receive_address'), 'exclude': lambda f: f is None }})
    r"""For Bitcoin transactions, the address that the buyer sent Bitcoin to."""  
    buyer_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer_email'), 'exclude': lambda f: f is None }})
    r"""The email address of the order's buyer."""  
    buyer_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer_note'), 'exclude': lambda f: f is None }})
    r"""A note provided by the buyer when the order was created, if any."""  
    canceled_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_note'), 'exclude': lambda f: f is None }})
    r"""A note provided by the merchant when the order's state was set to CANCELED, if any."""  
    completed_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_note'), 'exclude': lambda f: f is None }})
    r"""A note provided by the merchant when the order's state was set to COMPLETED, if any"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The time when the order was created, in ISO 8601 format."""  
    errors: Optional[list[shared_error.Error]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Any errors that occurred during the request."""  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'exclude': lambda f: f is None }})
    r"""The time when the order expires if no action is taken, in ISO 8601 format."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The order's unique identifier."""  
    order_history: Optional[list[shared_v1orderhistoryentry.V1OrderHistoryEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_history'), 'exclude': lambda f: f is None }})
    r"""The history of actions associated with the order."""  
    payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the payment associated with the order."""  
    promo_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promo_code'), 'exclude': lambda f: f is None }})
    r"""The promo code provided by the buyer, if any."""  
    recipient_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_name'), 'exclude': lambda f: f is None }})
    r"""The name of the order's buyer."""  
    recipient_phone_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_phone_number'), 'exclude': lambda f: f is None }})
    r"""The phone number to use for the order's delivery."""  
    refunded_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunded_note'), 'exclude': lambda f: f is None }})
    r"""A note provided by the merchant when the order's state was set to REFUNDED, if any."""  
    shipping_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Whether the tax is an ADDITIVE tax or an INCLUSIVE tax."""  
    subtotal_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal_money'), 'exclude': lambda f: f is None }})  
    tender: Optional[shared_v1tender.V1Tender] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tender'), 'exclude': lambda f: f is None }})
    r"""A tender represents a discrete monetary exchange. Square represents this
    exchange as a money object with a specific currency and amount, where the
    amount is given in the smallest denomination of the given currency.
    
    Square POS can accept more than one form of tender for a single payment (such
    as by splitting a bill between a credit card and a gift card). The `tender`
    field of the Payment object lists all forms of tender used for the payment.
    
    Split tender payments behave slightly differently from single tender payments:
    
    The receipt_url for a split tender corresponds only to the first tender listed
    in the tender field. To get the receipt URLs for the remaining tenders, use
    the receipt_url fields of the corresponding Tender objects.
    
    *A note on gift cards**: when a customer purchases a Square gift card from a
    merchant, the merchant receives the full amount of the gift card in the
    associated payment.
    
    When that gift card is used as a tender, the balance of the gift card is
    reduced and the merchant receives no funds. A `Tender` object with a type of
    `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
    associated payment.
    """  
    total_discount_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_discount_money'), 'exclude': lambda f: f is None }})  
    total_price_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_price_money'), 'exclude': lambda f: f is None }})  
    total_shipping_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_shipping_money'), 'exclude': lambda f: f is None }})  
    total_tax_money: Optional[shared_v1money.V1Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_tax_money'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The time when the order was last modified, in ISO 8601 format."""  
    