/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Streamline your workflows by sending payments to your customers on a regular basis with NOWPayments.
 *
 * @remarks
 * This feature involves creating a plan for payments and individual recurring payments for each user.
 * First you need to create a Recurring Payment plan:
 */
export class RecurringPaymentsAPIEmailSubscriptionsFeature {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete recurring payment
   *
   * @remarks
   * Completely removes a particular payment from the recurring payment plan.
   * You need to specify the payment plan id in the request.
   */
  deleteRecurringPayment(
    req: operations.DeleteRecurringPaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRecurringPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRecurringPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/subscriptions/{sub_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRecurringPaymentResponse =
        new operations.DeleteRecurringPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteRecurringPayment200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteRecurringPayment200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteRecurringPayment404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteRecurringPayment404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get many plans
   *
   * @remarks
   * This method allows you to obtain information about all the payment plans you’ve created.
   */
  getManyPlans(
    req: operations.GetManyPlansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetManyPlansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetManyPlansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/subscriptions/plans";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetManyPlansResponse =
        new operations.GetManyPlansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getManyPlans200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetManyPlans200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get one plan
   *
   * @remarks
   * This method allows you to obtain information about your payment plan.
   * (you need to specify your payment plan id in the request).
   */
  getOnePlan(
    req: operations.GetOnePlanRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOnePlanResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOnePlanRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/subscriptions/plans/{plan-id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOnePlanResponse =
        new operations.GetOnePlanResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOnePlan200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetOnePlan200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOnePlan404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetOnePlan404ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update plan
   *
   * @remarks
   * This method allows you to add necessary changes to a created plan. They won’t affect users who have already paid; however, the changes will take effect when a new payment is to be made.
   */
  updatePlan(
    req: operations.UpdatePlanRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePlanResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePlanRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/subscriptions/plans/{plan-id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePlanResponse =
        new operations.UpdatePlanResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
