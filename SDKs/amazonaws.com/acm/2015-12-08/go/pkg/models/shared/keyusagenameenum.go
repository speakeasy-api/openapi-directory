// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KeyUsageNameEnum string

const (
	KeyUsageNameEnumDigitalSignature   KeyUsageNameEnum = "DIGITAL_SIGNATURE"
	KeyUsageNameEnumNonRepudiation     KeyUsageNameEnum = "NON_REPUDIATION"
	KeyUsageNameEnumKeyEncipherment    KeyUsageNameEnum = "KEY_ENCIPHERMENT"
	KeyUsageNameEnumDataEncipherment   KeyUsageNameEnum = "DATA_ENCIPHERMENT"
	KeyUsageNameEnumKeyAgreement       KeyUsageNameEnum = "KEY_AGREEMENT"
	KeyUsageNameEnumCertificateSigning KeyUsageNameEnum = "CERTIFICATE_SIGNING"
	KeyUsageNameEnumCrlSigning         KeyUsageNameEnum = "CRL_SIGNING"
	KeyUsageNameEnumEncipherOnly       KeyUsageNameEnum = "ENCIPHER_ONLY"
	KeyUsageNameEnumDecipherOnly       KeyUsageNameEnum = "DECIPHER_ONLY"
	KeyUsageNameEnumAny                KeyUsageNameEnum = "ANY"
	KeyUsageNameEnumCustom             KeyUsageNameEnum = "CUSTOM"
)

func (e KeyUsageNameEnum) ToPointer() *KeyUsageNameEnum {
	return &e
}

func (e *KeyUsageNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIGITAL_SIGNATURE":
		fallthrough
	case "NON_REPUDIATION":
		fallthrough
	case "KEY_ENCIPHERMENT":
		fallthrough
	case "DATA_ENCIPHERMENT":
		fallthrough
	case "KEY_AGREEMENT":
		fallthrough
	case "CERTIFICATE_SIGNING":
		fallthrough
	case "CRL_SIGNING":
		fallthrough
	case "ENCIPHER_ONLY":
		fallthrough
	case "DECIPHER_ONLY":
		fallthrough
	case "ANY":
		fallthrough
	case "CUSTOM":
		*e = KeyUsageNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyUsageNameEnum: %v", v)
	}
}
