/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AutoCompleteRequest {
    /**
     * The API Authentication Key. Mandatory with all API calls.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;
    public AutoCompleteRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Body subtype to filter the listings on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=body_subtype")
    public String bodySubtype;
    public AutoCompleteRequest withBodySubtype(String bodySubtype) {
        this.bodySubtype = bodySubtype;
        return this;
    }
    
    /**
     * To filter listing on their body type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=body_type")
    public String bodyType;
    public AutoCompleteRequest withBodyType(String bodyType) {
        this.bodyType = bodyType;
        return this;
    }
    
    /**
     * Car type. Allowed values are - new / used
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=car_type")
    public org.openapis.openapi.models.shared.CarTypeEnum carType;
    public AutoCompleteRequest withCarType(org.openapis.openapi.models.shared.CarTypeEnum carType) {
        this.carType = carType;
        return this;
    }
    
    /**
     * To filter listing on City in which they are listed
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=city")
    public String city;
    public AutoCompleteRequest withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * To filter listing on Country in which they are listed
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country")
    public org.openapis.openapi.models.shared.CountryEnum country;
    public AutoCompleteRequest withCountry(org.openapis.openapi.models.shared.CountryEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     * Dealer id to filter the listings.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=dealer_id")
    public String dealerId;
    public AutoCompleteRequest withDealerId(String dealerId) {
        this.dealerId = dealerId;
        return this;
    }
    
    /**
     * To filter listing on their drivetrain
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=drivetrain")
    public String drivetrain;
    public AutoCompleteRequest withDrivetrain(String drivetrain) {
        this.drivetrain = drivetrain;
        return this;
    }
    
    /**
     * To filter listing on their engine
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=engine")
    public String engine;
    public AutoCompleteRequest withEngine(String engine) {
        this.engine = engine;
        return this;
    }
    
    /**
     * Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=engine_block")
    public String engineBlock;
    public AutoCompleteRequest withEngineBlock(String engineBlock) {
        this.engineBlock = engineBlock;
        return this;
    }
    
    /**
     * Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=engine_size")
    public String engineSize;
    public AutoCompleteRequest withEngineSize(String engineSize) {
        this.engineSize = engineSize;
        return this;
    }
    
    /**
     * A list of dealer ids to exclude from result
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude_dealer_ids")
    public String excludeDealerIds;
    public AutoCompleteRequest withExcludeDealerIds(String excludeDealerIds) {
        this.excludeDealerIds = excludeDealerIds;
        return this;
    }
    
    /**
     * A list of sources to exclude from result
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exclude_sources")
    public String excludeSources;
    public AutoCompleteRequest withExcludeSources(String excludeSources) {
        this.excludeSources = excludeSources;
        return this;
    }
    
    /**
     * Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=exterior_color")
    public String exteriorColor;
    public AutoCompleteRequest withExteriorColor(String exteriorColor) {
        this.exteriorColor = exteriorColor;
        return this;
    }
    
    /**
     * Provide minimum count value for facets
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=facet_min_count")
    public Double facetMinCount;
    public AutoCompleteRequest withFacetMinCount(Double facetMinCount) {
        this.facetMinCount = facetMinCount;
        return this;
    }
    
    /**
     * Field name for which you want auto-completion
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=field")
    public AutoCompleteFieldEnum field;
    public AutoCompleteRequest withField(AutoCompleteFieldEnum field) {
        this.field = field;
        return this;
    }
    
    /**
     * To filter listing on their fuel type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fuel_type")
    public String fuelType;
    public AutoCompleteRequest withFuelType(String fuelType) {
        this.fuelType = fuelType;
        return this;
    }
    
    /**
     * Boolean variable to indicate ignore case of current input
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ignore_case")
    public Boolean ignoreCase;
    public AutoCompleteRequest withIgnoreCase(Boolean ignoreCase) {
        this.ignoreCase = ignoreCase;
        return this;
    }
    
    /**
     * A boolean to filter in transit vehicles
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=in_transit")
    public org.openapis.openapi.models.shared.InTransitEnum inTransit;
    public AutoCompleteRequest withInTransit(org.openapis.openapi.models.shared.InTransitEnum inTransit) {
        this.inTransit = inTransit;
        return this;
    }
    
    /**
     * Flag to indicate whether to include non vin listing terms in results or not. Default is false to avoid un-normalised terms from non vin listings out of results
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_non_vin_listings")
    public AutoCompleteIncludeNonVinListingsEnum includeNonVinListings;
    public AutoCompleteRequest withIncludeNonVinListings(AutoCompleteIncludeNonVinListingsEnum includeNonVinListings) {
        this.includeNonVinListings = includeNonVinListings;
        return this;
    }
    
    /**
     * Input entered so far
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=input")
    public String input;
    public AutoCompleteRequest withInput(String input) {
        this.input = input;
        return this;
    }
    
    /**
     * Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=interior_color")
    public String interiorColor;
    public AutoCompleteRequest withInteriorColor(String interiorColor) {
        this.interiorColor = interiorColor;
        return this;
    }
    
    /**
     * Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=inventory_count_range")
    public String inventoryCountRange;
    public AutoCompleteRequest withInventoryCountRange(String inventoryCountRange) {
        this.inventoryCountRange = inventoryCountRange;
        return this;
    }
    
    /**
     * To filter listings on their make
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=make")
    public String make;
    public AutoCompleteRequest withMake(String make) {
        this.make = make;
        return this;
    }
    
    /**
     * To filter listings on their model
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=model")
    public String model;
    public AutoCompleteRequest withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * Radius around the search location (Unit - Miles)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=radius")
    public Integer radius;
    public AutoCompleteRequest withRadius(Integer radius) {
        this.radius = radius;
        return this;
    }
    
    /**
     * seller type for autocomplete
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=seller_type")
    public String sellerType;
    public AutoCompleteRequest withSellerType(String sellerType) {
        this.sellerType = sellerType;
        return this;
    }
    
    /**
     * Sort the response, either by index or count(default)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public AutoCompleteSortByEnum sortBy;
    public AutoCompleteRequest withSortBy(AutoCompleteSortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * To filter listing on their source only for widget requests
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source")
    public String source;
    public AutoCompleteRequest withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * To filter listing on State in which they are listed
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String state;
    public AutoCompleteRequest withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Boolean variable to indicate wheather to include term counts as well in response
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=term_counts")
    public Boolean termCounts;
    public AutoCompleteRequest withTermCounts(Boolean termCounts) {
        this.termCounts = termCounts;
        return this;
    }
    
    /**
     * To filter listing on their transmission
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=transmission")
    public String transmission;
    public AutoCompleteRequest withTransmission(String transmission) {
        this.transmission = transmission;
        return this;
    }
    
    /**
     * To filter listing on their trim
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=trim")
    public String trim;
    public AutoCompleteRequest withTrim(String trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * To filter listing on their vehicle type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicle_type")
    public String vehicleType;
    public AutoCompleteRequest withVehicleType(String vehicleType) {
        this.vehicleType = vehicleType;
        return this;
    }
    
    /**
     * To filter listing on their year
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=year")
    public String year;
    public AutoCompleteRequest withYear(String year) {
        this.year = year;
        return this;
    }
    
    /**
     * To filter listing on ZIP around which they are listed
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=zip")
    public String zip;
    public AutoCompleteRequest withZip(String zip) {
        this.zip = zip;
        return this;
    }
    
}
