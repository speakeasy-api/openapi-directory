"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VirtualTariffConsumptionDataTariffTypeEnum(str, Enum):
    r"""The type of the virtual tariff (e.g. solar)"""
    BATTERY = 'Battery'
    SOLAR = 'Solar'
    NORMAL = 'Normal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualTariffConsumptionData:
    r"""Container class for the virtual tariff consumption"""
    
    consumption: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Consumption'), 'exclude': lambda f: f is None }})
    r"""The consumption (e.g. kWh) of this tariff"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})
    r"""The currency of the price"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The Name of this virtual tariff"""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The price of the energy in this timerange"""  
    tariff_type: Optional[VirtualTariffConsumptionDataTariffTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TariffType'), 'exclude': lambda f: f is None }})
    r"""The type of the virtual tariff (e.g. solar)"""  
    