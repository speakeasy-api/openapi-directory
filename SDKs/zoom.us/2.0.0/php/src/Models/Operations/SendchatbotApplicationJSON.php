<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class SendchatbotApplicationJSON
{
    /**
     * Account ID of the authorized account.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * JSON template describing how the message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
     * 
     * @var array<string, mixed> $content
     */
	#[\JMS\Serializer\Annotation\SerializedName('content')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    public array $content;
    
    /**
     * **Optional**<br>
     * 
     * Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
     * 
     * @var ?bool $isMarkdownSupport
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_markdown_support')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isMarkdownSupport = null;
    
    /**
     * Robot JID created when enabling chatbot features on your marketplace app.
     * 
     * @var string $robotJid
     */
	#[\JMS\Serializer\Annotation\SerializedName('robot_jid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $robotJid;
    
    /**
     * Unique JID of reciever. Can be a group or user.
     * 
     * @var string $toJid
     */
	#[\JMS\Serializer\Annotation\SerializedName('to_jid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $toJid;
    
    /**
     * **Optional**<br>
     * 
     * The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
     * 
     * @var ?string $userJid
     */
	#[\JMS\Serializer\Annotation\SerializedName('user_jid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userJid = null;
    
    /**
     * **Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field.
     * 
     * @var ?string $visibleToUser
     */
	#[\JMS\Serializer\Annotation\SerializedName('visible_to_user')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $visibleToUser = null;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->content = [];
		$this->isMarkdownSupport = null;
		$this->robotJid = "";
		$this->toJid = "";
		$this->userJid = null;
		$this->visibleToUser = null;
	}
}
