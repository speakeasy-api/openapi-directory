// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TypeaheadForWorkspacePathParams struct {
	// Globally unique identifier for the workspace or organization.
	WorkspaceGid string `pathParam:"style=simple,explode=false,name=workspace_gid"`
}

// TypeaheadForWorkspaceResourceTypeEnum - The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `project_template`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.
type TypeaheadForWorkspaceResourceTypeEnum string

const (
	TypeaheadForWorkspaceResourceTypeEnumCustomField     TypeaheadForWorkspaceResourceTypeEnum = "custom_field"
	TypeaheadForWorkspaceResourceTypeEnumProject         TypeaheadForWorkspaceResourceTypeEnum = "project"
	TypeaheadForWorkspaceResourceTypeEnumProjectTemplate TypeaheadForWorkspaceResourceTypeEnum = "project_template"
	TypeaheadForWorkspaceResourceTypeEnumPortfolio       TypeaheadForWorkspaceResourceTypeEnum = "portfolio"
	TypeaheadForWorkspaceResourceTypeEnumTag             TypeaheadForWorkspaceResourceTypeEnum = "tag"
	TypeaheadForWorkspaceResourceTypeEnumTask            TypeaheadForWorkspaceResourceTypeEnum = "task"
	TypeaheadForWorkspaceResourceTypeEnumUser            TypeaheadForWorkspaceResourceTypeEnum = "user"
)

func (e *TypeaheadForWorkspaceResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom_field":
		fallthrough
	case "project":
		fallthrough
	case "project_template":
		fallthrough
	case "portfolio":
		fallthrough
	case "tag":
		fallthrough
	case "task":
		fallthrough
	case "user":
		*e = TypeaheadForWorkspaceResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeaheadForWorkspaceResourceTypeEnum: %s", s)
	}
}

// TypeaheadForWorkspaceTypeEnum - *Deprecated: new integrations should prefer the resource_type field.*
type TypeaheadForWorkspaceTypeEnum string

const (
	TypeaheadForWorkspaceTypeEnumCustomField TypeaheadForWorkspaceTypeEnum = "custom_field"
	TypeaheadForWorkspaceTypeEnumPortfolio   TypeaheadForWorkspaceTypeEnum = "portfolio"
	TypeaheadForWorkspaceTypeEnumProject     TypeaheadForWorkspaceTypeEnum = "project"
	TypeaheadForWorkspaceTypeEnumTag         TypeaheadForWorkspaceTypeEnum = "tag"
	TypeaheadForWorkspaceTypeEnumTask        TypeaheadForWorkspaceTypeEnum = "task"
	TypeaheadForWorkspaceTypeEnumUser        TypeaheadForWorkspaceTypeEnum = "user"
)

func (e *TypeaheadForWorkspaceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "custom_field":
		fallthrough
	case "portfolio":
		fallthrough
	case "project":
		fallthrough
	case "tag":
		fallthrough
	case "task":
		fallthrough
	case "user":
		*e = TypeaheadForWorkspaceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeaheadForWorkspaceTypeEnum: %s", s)
	}
}

type TypeaheadForWorkspaceQueryParams struct {
	// The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned.
	Count *int64 `queryParam:"style=form,explode=true,name=count"`
	// Defines fields to return.
	// Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
	// The id of included objects will always be returned, regardless of the field options.
	OptFields []string `queryParam:"style=form,explode=false,name=opt_fields"`
	// Provides “pretty” output.
	// Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
	OptPretty *bool `queryParam:"style=form,explode=true,name=opt_pretty"`
	// The string that will be used to search for relevant objects. If an empty string is passed in, the API will return results.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `project_template`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported.
	ResourceType TypeaheadForWorkspaceResourceTypeEnum `queryParam:"style=form,explode=true,name=resource_type"`
	// *Deprecated: new integrations should prefer the resource_type field.*
	Type *TypeaheadForWorkspaceTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type TypeaheadForWorkspaceRequest struct {
	PathParams  TypeaheadForWorkspacePathParams
	QueryParams TypeaheadForWorkspaceQueryParams
}

// TypeaheadForWorkspace200ApplicationJSON - A generic list of objects, such as those returned by the typeahead search endpoint.
type TypeaheadForWorkspace200ApplicationJSON struct {
	Data []shared.AsanaNamedResource `json:"data,omitempty"`
}

type TypeaheadForWorkspaceResponse struct {
	ContentType string
	// This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again.
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// Successfully retrieved objects via a typeahead search algorithm.
	TypeaheadForWorkspace200ApplicationJSONObject *TypeaheadForWorkspace200ApplicationJSON
}
