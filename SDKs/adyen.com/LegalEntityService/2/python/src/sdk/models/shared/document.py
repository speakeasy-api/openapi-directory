"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import attachment as shared_attachment
from ..shared import ownerentity as shared_ownerentity
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DocumentTypeEnum(str, Enum):
    r"""Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.
    
    When providing ID numbers:
    * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.
    
    When uploading photo IDs:
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.
    
    When uploading other documents:
    * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**. 
    
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.
    
    * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.
    
    * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
    """
    BANK_STATEMENT = 'bankStatement'
    DRIVERS_LICENSE = 'driversLicense'
    IDENTITY_CARD = 'identityCard'
    NATIONAL_ID_NUMBER = 'nationalIdNumber'
    PASSPORT = 'passport'
    PROOF_OF_ADDRESS = 'proofOfAddress'
    PROOF_OF_NATIONAL_ID_NUMBER = 'proofOfNationalIdNumber'
    PROOF_OF_RESIDENCY = 'proofOfResidency'
    REGISTRATION_DOCUMENT = 'registrationDocument'
    VAT_DOCUMENT = 'vatDocument'
    PROOF_OF_ORGANIZATION_TAX_INFO = 'proofOfOrganizationTaxInfo'
    PROOF_OF_INDUSTRY = 'proofOfIndustry'
    CONSTITUTIONAL_DOCUMENT = 'constitutionalDocument'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentInput:
    
    attachments: list[shared_attachment.Attachment] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments') }})
    r"""Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Your description for the document."""  
    owner: shared_ownerentity.OwnerEntity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})  
    type: DocumentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.
    
    When providing ID numbers:
    * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.
    
    When uploading photo IDs:
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.
    
    When uploading other documents:
    * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**. 
    
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.
    
    * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.
    
    * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
    """  
    attachment: Optional[shared_attachment.Attachment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment'), 'exclude': lambda f: f is None }})  
    expiry_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryDate'), 'exclude': lambda f: f is None }})
    r"""The expiry date of the document, in YYYY-MM-DD format."""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName'), 'exclude': lambda f: f is None }})
    r"""The filename of the document."""  
    issuer_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerCountry'), 'exclude': lambda f: f is None }})
    r"""The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**."""  
    issuer_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerState'), 'exclude': lambda f: f is None }})
    r"""The state or province where the document was issued (AU only)."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number in the document."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Document:
    r"""OK - the request has succeeded."""
    
    attachments: list[shared_attachment.Attachment] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachments') }})
    r"""Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Your description for the document."""  
    owner: shared_ownerentity.OwnerEntity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})  
    type: DocumentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.
    
    When providing ID numbers:
    * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.
    
    When uploading photo IDs:
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.
    
    When uploading other documents:
    * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**. 
    
    * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.
    
    * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.
    
    * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
    """  
    attachment: Optional[shared_attachment.Attachment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The creation date of the document."""  
    expiry_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiryDate'), 'exclude': lambda f: f is None }})
    r"""The expiry date of the document, in YYYY-MM-DD format."""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName'), 'exclude': lambda f: f is None }})
    r"""The filename of the document."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the document."""  
    issuer_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerCountry'), 'exclude': lambda f: f is None }})
    r"""The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**."""  
    issuer_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerState'), 'exclude': lambda f: f is None }})
    r"""The state or province where the document was issued (AU only)."""  
    modification_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modificationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The modification date of the document."""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The number in the document."""  
    