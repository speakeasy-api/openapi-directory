/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The values of StartJobRun API requests used in job runs started using the job template.
 */
export class CreateJobTemplateRequestBodyJobTemplateData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "configurationOverrides" })
  @Type(() => shared.ParametricConfigurationOverrides)
  configurationOverrides?: shared.ParametricConfigurationOverrides;

  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn?: string;

  /**
   * Specify the driver that the job runs on. Exactly one of the two available job drivers is required, either sparkSqlJobDriver or sparkSubmitJobDriver.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobDriver" })
  @Type(() => shared.JobDriver)
  jobDriver?: shared.JobDriver;

  @SpeakeasyMetadata()
  @Expose({ name: "jobTags" })
  jobTags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: shared.TemplateParameterConfiguration })
  @Expose({ name: "parameterConfiguration" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.TemplateParameterConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.TemplateParameterConfiguration
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameterConfiguration?: Record<
    string,
    shared.TemplateParameterConfiguration
  >;

  @SpeakeasyMetadata()
  @Expose({ name: "releaseLabel" })
  releaseLabel?: string;
}

export class CreateJobTemplateRequestBody extends SpeakeasyBase {
  /**
   * The client token of the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * The values of StartJobRun API requests used in job runs started using the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobTemplateData" })
  @Type(() => CreateJobTemplateRequestBodyJobTemplateData)
  jobTemplateData: CreateJobTemplateRequestBodyJobTemplateData;

  /**
   * The KMS key ARN used to encrypt the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyArn" })
  kmsKeyArn?: string;

  /**
   * The specified name of the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The tags that are associated with the job template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateJobTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateJobTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateJobTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createJobTemplateResponse?: shared.CreateJobTemplateResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
