<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class RouteResponsePathInstructions
{
    /**
     * The distance for this instruction, in meters.
     * 
     * 
     * 
     * @var ?float $distance
     */
	#[\JMS\Serializer\Annotation\SerializedName('distance')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $distance = null;
    
    /**
     * Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
     * 
     * 
     * 
     * @var ?int $exitNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('exit_number')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $exitNumber = null;
    
    /**
     * Two indices into `points`, referring to the beginning and the end of the segment of the route
     * 
     * this instruction refers to.
     * 
     * 
     * @var ?array<int> $interval
     */
	#[\JMS\Serializer\Annotation\SerializedName('interval')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $interval = null;
    
    /**
     * A number which specifies the sign to show:
     * 
     * 
     * | sign | description  |
     * |---|---|
     * |-98| an U-turn without the knowledge if it is a right or left U-turn |
     * | -8| a left U-turn |
     * | -7| keep left |
     * | -6| **not yet used**: leave roundabout |
     * | -3| turn sharp left |
     * | -2| turn left |
     * | -1| turn slight left |
     * |  0| continue on street |
     * |  1| turn slight right |
     * |  2| turn right |
     * |  3| turn sharp right |
     * |  4| the finish instruction before the last point |
     * |  5| the instruction before a via point |
     * |  6| the instruction before entering a roundabout |
     * |  7| keep right |
     * |  8| a right U-turn |
     * |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
     * 
     * 
     * @var ?int $sign
     */
	#[\JMS\Serializer\Annotation\SerializedName('sign')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $sign = null;
    
    /**
     * The name of the street to turn onto in order to follow the route.
     * 
     * 
     * 
     * @var ?string $streetName
     */
	#[\JMS\Serializer\Annotation\SerializedName('street_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $streetName = null;
    
    /**
     * A description what the user has to do in order to follow the route. The language depends on the locale parameter.
     * 
     * 
     * 
     * @var ?string $text
     */
	#[\JMS\Serializer\Annotation\SerializedName('text')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $text = null;
    
    /**
     * The duration for this instruction, in milliseconds.
     * 
     * 
     * 
     * @var ?int $time
     */
	#[\JMS\Serializer\Annotation\SerializedName('time')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $time = null;
    
    /**
     * Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
     * 
     * `-2*PI < r < 0` for counterclockwise turns.
     * 
     * 
     * @var ?float $turnAngle
     */
	#[\JMS\Serializer\Annotation\SerializedName('turn_angle')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $turnAngle = null;
    
	public function __construct()
	{
		$this->distance = null;
		$this->exitNumber = null;
		$this->interval = null;
		$this->sign = null;
		$this->streetName = null;
		$this->text = null;
		$this->time = null;
		$this->turnAngle = null;
	}
}
