<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class PaymentLineLink
{
    /**
     * Amount by which the balance of the linked entity is altered, in the currency of the linked entity.  
     * 
     * A negative link amount _reduces_ the outstanding amount on the accounts receivable account.  
     * A positive link amount _increases_ the outstanding amount on the accounts receivable account.
     * 
     * @var ?float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $amount = null;
    
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * @var ?float $currencyRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('currencyRate')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currencyRate = null;
    
    /**
     * Unique identifier of the transaction represented by the link.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Types of payment line links, either:  
     * 
     * `Unknown`  
     * `Unlinked` - Not used  
     * `Invoice` - ID refers to the invoice  
     * `CreditNote` - ID refers to the credit note  
     * `Refund` - ID refers to the sibling payment  
     * `Payment` - ID refers to the sibling payment  
     * `PaymentOnAccount` - ID refers to the customer  
     * `Other` - ID refers to the customer  
     * `Manual Journal`  
     * `Discount` - ID refers to the payment
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\PaymentLinkTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PaymentLinkTypeEnum>')]
    public PaymentLinkTypeEnum $type;
    
	public function __construct()
	{
		$this->amount = null;
		$this->currencyRate = null;
		$this->id = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\PaymentLinkTypeEnum::UNKNOWN;
	}
}
