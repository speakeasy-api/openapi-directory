"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import launchconfig as shared_launchconfig
from ..shared import tool as shared_tool
from ..shared import uploadconfiguration as shared_uploadconfiguration
from ..shared import worldconfig as shared_worldconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SimulationApplicationConfig:
    r"""Information about a simulation application configuration."""
    
    application: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('application') }})  
    launch_config: shared_launchconfig.LaunchConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchConfig') }})  
    application_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationVersion'), 'exclude': lambda f: f is None }})  
    tools: Optional[list[shared_tool.Tool]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tools'), 'exclude': lambda f: f is None }})  
    upload_configurations: Optional[list[shared_uploadconfiguration.UploadConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadConfigurations'), 'exclude': lambda f: f is None }})  
    use_default_tools: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefaultTools'), 'exclude': lambda f: f is None }})  
    use_default_upload_configurations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefaultUploadConfigurations'), 'exclude': lambda f: f is None }})  
    world_configs: Optional[list[shared_worldconfig.WorldConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('worldConfigs'), 'exclude': lambda f: f is None }})  
    