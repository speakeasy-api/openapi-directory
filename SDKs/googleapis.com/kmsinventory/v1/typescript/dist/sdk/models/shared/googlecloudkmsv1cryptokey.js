"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleCloudKmsV1CryptoKey = exports.GoogleCloudKmsV1CryptoKeyPurposeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var googlecloudkmsv1cryptokeyversion_1 = require("./googlecloudkmsv1cryptokeyversion");
var googlecloudkmsv1cryptokeyversiontemplate_1 = require("./googlecloudkmsv1cryptokeyversiontemplate");
var class_transformer_1 = require("class-transformer");
/**
 * Immutable. The immutable purpose of this CryptoKey.
 */
var GoogleCloudKmsV1CryptoKeyPurposeEnum;
(function (GoogleCloudKmsV1CryptoKeyPurposeEnum) {
    GoogleCloudKmsV1CryptoKeyPurposeEnum["CryptoKeyPurposeUnspecified"] = "CRYPTO_KEY_PURPOSE_UNSPECIFIED";
    GoogleCloudKmsV1CryptoKeyPurposeEnum["EncryptDecrypt"] = "ENCRYPT_DECRYPT";
    GoogleCloudKmsV1CryptoKeyPurposeEnum["AsymmetricSign"] = "ASYMMETRIC_SIGN";
    GoogleCloudKmsV1CryptoKeyPurposeEnum["AsymmetricDecrypt"] = "ASYMMETRIC_DECRYPT";
    GoogleCloudKmsV1CryptoKeyPurposeEnum["Mac"] = "MAC";
})(GoogleCloudKmsV1CryptoKeyPurposeEnum = exports.GoogleCloudKmsV1CryptoKeyPurposeEnum || (exports.GoogleCloudKmsV1CryptoKeyPurposeEnum = {}));
/**
 * A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.
 */
var GoogleCloudKmsV1CryptoKey = /** @class */ (function (_super) {
    __extends(GoogleCloudKmsV1CryptoKey, _super);
    function GoogleCloudKmsV1CryptoKey() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createTime" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "createTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cryptoKeyBackend" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "cryptoKeyBackend", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "destroyScheduledDuration" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "destroyScheduledDuration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "importOnly" }),
        __metadata("design:type", Boolean)
    ], GoogleCloudKmsV1CryptoKey.prototype, "importOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], GoogleCloudKmsV1CryptoKey.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextRotationTime" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "nextRotationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "primary" }),
        (0, class_transformer_1.Type)(function () { return googlecloudkmsv1cryptokeyversion_1.GoogleCloudKmsV1CryptoKeyVersion; }),
        __metadata("design:type", googlecloudkmsv1cryptokeyversion_1.GoogleCloudKmsV1CryptoKeyVersion)
    ], GoogleCloudKmsV1CryptoKey.prototype, "primary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "purpose" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "purpose", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rotationPeriod" }),
        __metadata("design:type", String)
    ], GoogleCloudKmsV1CryptoKey.prototype, "rotationPeriod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "versionTemplate" }),
        (0, class_transformer_1.Type)(function () { return googlecloudkmsv1cryptokeyversiontemplate_1.GoogleCloudKmsV1CryptoKeyVersionTemplate; }),
        __metadata("design:type", googlecloudkmsv1cryptokeyversiontemplate_1.GoogleCloudKmsV1CryptoKeyVersionTemplate)
    ], GoogleCloudKmsV1CryptoKey.prototype, "versionTemplate", void 0);
    return GoogleCloudKmsV1CryptoKey;
}(utils_1.SpeakeasyBase));
exports.GoogleCloudKmsV1CryptoKey = GoogleCloudKmsV1CryptoKey;
