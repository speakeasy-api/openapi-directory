/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DomainInput - Represents a managed Microsoft Active Directory domain. If the domain is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.
 */
public class DomainInput {
    /**
     * Optional. The name of delegated administrator account used to perform Active Directory operations. If not specified, `setupadmin` will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin")
    public String admin;

    public DomainInput withAdmin(String admin) {
        this.admin = admin;
        return this;
    }
    
    /**
     * Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auditLogsEnabled")
    public Boolean auditLogsEnabled;

    public DomainInput withAuditLogsEnabled(Boolean auditLogsEnabled) {
        this.auditLogsEnabled = auditLogsEnabled;
        return this;
    }
    
    /**
     * Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) the domain instance is connected to. Networks can be added using UpdateDomain. The domain is only available on networks listed in `authorized_networks`. If CIDR subnets overlap between networks, domain creation will fail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedNetworks")
    public String[] authorizedNetworks;

    public DomainInput withAuthorizedNetworks(String[] authorizedNetworks) {
        this.authorizedNetworks = authorizedNetworks;
        return this;
    }
    
    /**
     * Optional. Resource labels that can contain user-provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public DomainInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Required. Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    public String[] locations;

    public DomainInput withLocations(String[] locations) {
        this.locations = locations;
        return this;
    }
    
    /**
     * Required. The unique name of the domain using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public DomainInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservedIpRange")
    public String reservedIpRange;

    public DomainInput withReservedIpRange(String reservedIpRange) {
        this.reservedIpRange = reservedIpRange;
        return this;
    }
    
    public DomainInput(){}
}
