<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Event 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEventResponse
     */
	public function createEvent(
        \OpenAPI\OpenAPI\Models\Operations\CreateEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/events', \OpenAPI\OpenAPI\Models\Operations\CreateEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createEvent201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateEvent201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEventResponse
     */
	public function deleteEvent(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/events/{event_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteEvent200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventResponse
     */
	public function getEvent(
        \OpenAPI\OpenAPI\Models\Operations\GetEventRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/events/{event_id}', \OpenAPI\OpenAPI\Models\Operations\GetEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventRetrieved = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EventRetrieved', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List events
     * 
     * This endpoint is **DEPRECATED**. Please use [/v0.2/events](/api/conversation.v2#get-events).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/{conversation_id}/events', \OpenAPI\OpenAPI\Models\Operations\GetEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventRetrieveds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventRetrieved>', 'json');
            }
        }

        return $response;
    }
}