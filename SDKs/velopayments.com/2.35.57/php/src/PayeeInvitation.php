<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PayeeInvitation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Initiate Payee Creation
     * 
     * <p>Use v4 instead</p>
     * Initiate the process of creating 1 to 2000 payees in a batch Use the response location header to query
     * for status (201 - Created, 400 - invalid request body. In addition to standard semantic validations, a
     * 400 will also result if there is a duplicate remote id within the batch / if there is a duplicate email
     * within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
     * that provided for another payee within the same batch). The validation at this stage is intra-batch only.
     * Validation against payees who have already been invited occurs subsequently during processing of the batch.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreatePayeesRequestV3Input $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3JsonResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function createPayeeV3Json(
        \OpenAPI\OpenAPI\Models\Shared\CreatePayeesRequestV3Input $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3JsonResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/payees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3JsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPayeesCSVResponseV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePayeesCSVResponseV3', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate Payee Creation
     * 
     * <p>Use v4 instead</p>
     * Initiate the process of creating 1 to 2000 payees in a batch Use the response location header to query
     * for status (201 - Created, 400 - invalid request body. In addition to standard semantic validations, a
     * 400 will also result if there is a duplicate remote id within the batch / if there is a duplicate email
     * within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
     * that provided for another payee within the same batch). The validation at this stage is intra-batch only.
     * Validation against payees who have already been invited occurs subsequently during processing of the batch.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3MultipartFormData $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3MultipartResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function createPayeeV3Multipart(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3MultipartFormData $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3MultipartResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/payees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayeeV3MultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPayeesCSVResponseV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePayeesCSVResponseV3', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Payee Invitation Status
     * 
     * <p>Use v4 instead</p>
     * <p>Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.</p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Response
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function getPayeesInvitationStatusV3(
        \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Response
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/payees/payors/{payorId}/invitationStatus', \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedPayeeInvitationStatusResponseV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedPayeeInvitationStatusResponseV3', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Payee Invitation Status
     * 
     * Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Response
     */
	public function getPayeesInvitationStatusV4(
        \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/payees/payors/{payorId}/invitationStatus', \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayeesInvitationStatusV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedPayeeInvitationStatusResponseV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedPayeeInvitationStatusResponseV4', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Query Batch Status
     * 
     * <p>Use v4 instead</p>
     * Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Response
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function queryBatchStatusV3(
        \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Response
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/payees/batch/{batchId}', \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryBatchResponseV3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryBatchResponseV3', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Query Batch Status
     * 
     * Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Response
     */
	public function queryBatchStatusV4(
        \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/payees/batch/{batchId}', \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryBatchStatusV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryBatchResponseV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryBatchResponseV4', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resend Payee Invite
     * 
     * <p>Use v4 instead</p>
     * <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
     * <p>Any previous invites to the payee by this Payor will be invalidated</p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Response
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function resendPayeeInviteV3(
        \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Response
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/payees/{payeeId}/invite', \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "invitePayeeRequestV3", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse409 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse409', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Resend Payee Invite
     * 
     * <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
     * <p>Any previous invites to the payee by this Payor will be invalidated</p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Response
     */
	public function resendPayeeInviteV4(
        \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/payees/{payeeId}/invite', \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "invitePayeeRequestV4", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResendPayeeInviteV4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse409 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse409', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate Payee Creation
     * 
     * <p>Initiate the process of creating 1 to 2000 payees in a batch</p>
     * <p>Use the batchId in the response to query for status.</p>
     * <p>In addition to standard semantic validations, a 400 will also result if: </p>
     * <ul>
     * <li>there is a duplicate remote id within the batch</li>
     * <li>there is a duplicate email within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
     * that provided for another payee within the same batch).</li>
     * </ul>
     * <p>The validation at this stage is intra-batch only.</p>
     * <p>Validation against payees who have already been invited occurs subsequently during processing of the batch.</p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreatePayeesRequestV4 $request
     * @return \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeJsonResponse
     */
	public function v4CreatePayeeJson(
        \OpenAPI\OpenAPI\Models\Shared\CreatePayeesRequestV4 $request,
    ): \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/payees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPayeesCSVResponseV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePayeesCSVResponseV4', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiate Payee Creation
     * 
     * <p>Initiate the process of creating 1 to 2000 payees in a batch</p>
     * <p>Use the batchId in the response to query for status.</p>
     * <p>In addition to standard semantic validations, a 400 will also result if: </p>
     * <ul>
     * <li>there is a duplicate remote id within the batch</li>
     * <li>there is a duplicate email within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
     * that provided for another payee within the same batch).</li>
     * </ul>
     * <p>The validation at this stage is intra-batch only.</p>
     * <p>Validation against payees who have already been invited occurs subsequently during processing of the batch.</p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeMultipartFormData $request
     * @return \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeMultipartResponse
     */
	public function v4CreatePayeeMultipart(
        \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeMultipartFormData $request,
    ): \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/payees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\V4CreatePayeeMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createPayeesCSVResponseV4 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreatePayeesCSVResponseV4', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse400 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse400', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse401 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse401', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse403 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse403', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->inlineResponse404 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InlineResponse404', 'json');
            }
        }

        return $response;
    }
}