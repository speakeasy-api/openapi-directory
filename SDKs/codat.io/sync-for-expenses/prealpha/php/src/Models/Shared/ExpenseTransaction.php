<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ExpenseTransaction
{
    /**
     * Currency the transaction was recorded in.
     * 
     * @var string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currency;
    
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * @var ?float $currencyRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('currencyRate')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currencyRate = null;
    
    /**
     * Your unique idenfier for the transaction.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var string $issueDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('issueDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueDate;
    
    /**
     * Array of transaction lines.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ExpenseTransactionLine> $lines
     */
	#[\JMS\Serializer\Annotation\SerializedName('lines')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ExpenseTransactionLine>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $lines = null;
    
    /**
     * Name of the merchant where the purchase took place
     * 
     * @var ?string $merchantName
     */
	#[\JMS\Serializer\Annotation\SerializedName('merchantName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $merchantName = null;
    
    /**
     * Any private, company notes about the transaction.
     * 
     * @var ?string $notes
     */
	#[\JMS\Serializer\Annotation\SerializedName('notes')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notes = null;
    
    /**
     * The type of transaction.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ExpenseTransactionTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExpenseTransactionTypeEnum>')]
    public ExpenseTransactionTypeEnum $type;
    
	public function __construct()
	{
		$this->currency = "";
		$this->currencyRate = null;
		$this->id = "";
		$this->issueDate = "";
		$this->lines = null;
		$this->merchantName = null;
		$this->notes = null;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\ExpenseTransactionTypeEnum::PAYMENT;
	}
}
