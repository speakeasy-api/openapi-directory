"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetOrganizationActionBatchRequest:
    
    action_batch_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'actionBatchId', 'style': 'simple', 'explode': False }})  
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationActionBatch200ApplicationJSONActions:
    
    operation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operation') }})
    r"""The operation to be used by this action"""  
    resource: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource') }})
    r"""Unique identifier for the resource to be acted on"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the created resource"""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""URI, not including base, of the created resource"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationActionBatch200ApplicationJSONStatus:
    r"""Status of action batch"""
    
    created_resources: list[GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdResources') }})
    r"""Resources created as a result of this action batch"""  
    completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed'), 'exclude': lambda f: f is None }})
    r"""Flag describing whether all actions in the action batch have completed"""  
    errors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""List of errors encountered when running actions in the action batch"""  
    failed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})
    r"""Flag describing whether any actions in the action batch failed"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationActionBatch200ApplicationJSON:
    r"""Successful operation"""
    
    actions: list[GetOrganizationActionBatch200ApplicationJSONActions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actions') }})
    r"""A set of changes made as part of this action (<a href='https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/'>more details</a>)"""  
    confirmed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed'), 'exclude': lambda f: f is None }})
    r"""Flag describing whether the action should be previewed before executing or not"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}"""  
    organization_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationId'), 'exclude': lambda f: f is None }})
    r"""ID of the organization this action batch belongs to"""  
    status: Optional[GetOrganizationActionBatch200ApplicationJSONStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of action batch"""  
    synchronous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('synchronous'), 'exclude': lambda f: f is None }})
    r"""Flag describing whether actions should run synchronously or asynchronously"""  
    

@dataclasses.dataclass
class GetOrganizationActionBatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_action_batch_200_application_json_object: Optional[GetOrganizationActionBatch200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    