// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FilesetTemplateCreateOperatingSystemTypeEnum - Operating system type of filesets created by template.
type FilesetTemplateCreateOperatingSystemTypeEnum string

const (
	FilesetTemplateCreateOperatingSystemTypeEnumUnixLike FilesetTemplateCreateOperatingSystemTypeEnum = "UnixLike"
	FilesetTemplateCreateOperatingSystemTypeEnumWindows  FilesetTemplateCreateOperatingSystemTypeEnum = "Windows"
)

func (e FilesetTemplateCreateOperatingSystemTypeEnum) ToPointer() *FilesetTemplateCreateOperatingSystemTypeEnum {
	return &e
}

func (e *FilesetTemplateCreateOperatingSystemTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UnixLike":
		fallthrough
	case "Windows":
		*e = FilesetTemplateCreateOperatingSystemTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilesetTemplateCreateOperatingSystemTypeEnum: %v", v)
	}
}

type FilesetTemplateCreateShareTypeEnum string

const (
	FilesetTemplateCreateShareTypeEnumNfs FilesetTemplateCreateShareTypeEnum = "NFS"
	FilesetTemplateCreateShareTypeEnumSmb FilesetTemplateCreateShareTypeEnum = "SMB"
)

func (e FilesetTemplateCreateShareTypeEnum) ToPointer() *FilesetTemplateCreateShareTypeEnum {
	return &e
}

func (e *FilesetTemplateCreateShareTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NFS":
		fallthrough
	case "SMB":
		*e = FilesetTemplateCreateShareTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilesetTemplateCreateShareTypeEnum: %v", v)
	}
}

// FilesetTemplateCreate - Provide an object with the fileset template definition.
type FilesetTemplateCreate struct {
	// Include or exclude hidden folders inside locally-mounted remote file systems from backups.
	AllowBackupHiddenFoldersInNetworkMounts *bool `json:"allowBackupHiddenFoldersInNetworkMounts,omitempty"`
	// Include or exclude locally-mounted remote file systems from backups.
	AllowBackupNetworkMounts *bool `json:"allowBackupNetworkMounts,omitempty"`
	// Action taken if script fails. Options are "abort", "continue".
	BackupScriptErrorHandling *string `json:"backupScriptErrorHandling,omitempty"`
	// Number of seconds after which the script is killed if it has not completed execution.
	BackupScriptTimeout *int64   `json:"backupScriptTimeout,omitempty"`
	Exceptions          []string `json:"exceptions,omitempty"`
	Excludes            []string `json:"excludes,omitempty"`
	Includes            []string `json:"includes"`
	// Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
	IsArrayEnabled *bool  `json:"isArrayEnabled,omitempty"`
	Name           string `json:"name"`
	// Operating system type of filesets created by template.
	OperatingSystemType *FilesetTemplateCreateOperatingSystemTypeEnum `json:"operatingSystemType,omitempty"`
	// Script to run after backup of this fileset ends.
	PostBackupScript *string `json:"postBackupScript,omitempty"`
	// Script to run before backup of this fileset starts.
	PreBackupScript *string                             `json:"preBackupScript,omitempty"`
	ShareType       *FilesetTemplateCreateShareTypeEnum `json:"shareType,omitempty"`
	// Use VSS during Windows backups.
	UseWindowsVss *bool `json:"useWindowsVss,omitempty"`
}
