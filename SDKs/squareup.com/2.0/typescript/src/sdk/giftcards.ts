/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class GiftCards {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * CreateGiftCard
   *
   * @remarks
   * Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before
   * it can be used for payment. For more information, see
   * [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
   */
  createGiftCard(
    req: shared.CreateGiftCardRequest,
    security: operations.CreateGiftCardSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGiftCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateGiftCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/gift-cards";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateGiftCardSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGiftCardResponse =
        new operations.CreateGiftCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGiftCardResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateGiftCardResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * LinkCustomerToGiftCard
   *
   * @remarks
   * Links a customer to a gift card
   */
  linkCustomerToGiftCard(
    req: operations.LinkCustomerToGiftCardRequest,
    security: operations.LinkCustomerToGiftCardSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.LinkCustomerToGiftCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LinkCustomerToGiftCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/gift-cards/{gift_card_id}/link-customer",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "linkCustomerToGiftCardRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.LinkCustomerToGiftCardSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LinkCustomerToGiftCardResponse =
        new operations.LinkCustomerToGiftCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkCustomerToGiftCardResponse = utils.objectToClass(
              httpRes?.data,
              shared.LinkCustomerToGiftCardResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListGiftCards
   *
   * @remarks
   * Lists all gift cards. You can specify optional filters to retrieve
   * a subset of the gift cards.
   */
  listGiftCards(
    req: operations.ListGiftCardsRequest,
    security: operations.ListGiftCardsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListGiftCardsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListGiftCardsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/gift-cards";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListGiftCardsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListGiftCardsResponse =
        new operations.ListGiftCardsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGiftCardsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGiftCardsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveGiftCard
   *
   * @remarks
   * Retrieves a gift card using its ID.
   */
  retrieveGiftCard(
    req: operations.RetrieveGiftCardRequest,
    security: operations.RetrieveGiftCardSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveGiftCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveGiftCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v2/gift-cards/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveGiftCardSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveGiftCardResponse =
        new operations.RetrieveGiftCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveGiftCardResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveGiftCardResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveGiftCardFromGAN
   *
   * @remarks
   * Retrieves a gift card using the gift card account number (GAN).
   */
  retrieveGiftCardFromGAN(
    req: shared.RetrieveGiftCardFromGANRequest,
    security: operations.RetrieveGiftCardFromGANSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveGiftCardFromGANResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.RetrieveGiftCardFromGANRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/gift-cards/from-gan";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveGiftCardFromGANSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveGiftCardFromGANResponse =
        new operations.RetrieveGiftCardFromGANResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveGiftCardFromGANResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveGiftCardFromGANResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveGiftCardFromNonce
   *
   * @remarks
   * Retrieves a gift card using a nonce (a secure token) that represents the gift card.
   */
  retrieveGiftCardFromNonce(
    req: shared.RetrieveGiftCardFromNonceRequest,
    security: operations.RetrieveGiftCardFromNonceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveGiftCardFromNonceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.RetrieveGiftCardFromNonceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/gift-cards/from-nonce";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveGiftCardFromNonceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveGiftCardFromNonceResponse =
        new operations.RetrieveGiftCardFromNonceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveGiftCardFromNonceResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveGiftCardFromNonceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UnlinkCustomerFromGiftCard
   *
   * @remarks
   * Unlinks a customer from a gift card
   */
  unlinkCustomerFromGiftCard(
    req: operations.UnlinkCustomerFromGiftCardRequest,
    security: operations.UnlinkCustomerFromGiftCardSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UnlinkCustomerFromGiftCardResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UnlinkCustomerFromGiftCardRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/gift-cards/{gift_card_id}/unlink-customer",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "unlinkCustomerFromGiftCardRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UnlinkCustomerFromGiftCardSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UnlinkCustomerFromGiftCardResponse =
        new operations.UnlinkCustomerFromGiftCardResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unlinkCustomerFromGiftCardResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnlinkCustomerFromGiftCardResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
