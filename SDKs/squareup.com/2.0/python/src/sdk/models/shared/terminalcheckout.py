"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import devicecheckoutoptions as shared_devicecheckoutoptions
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TerminalCheckout:
    
    amount_money: shared_money.Money = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_money') }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    device_options: shared_devicecheckoutoptions.DeviceCheckoutOptions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_options') }})  
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the application that created the checkout."""  
    cancel_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancel_reason'), 'exclude': lambda f: f is None }})
    r"""Present if the status is `CANCELED`."""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp."""  
    deadline_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deadline_duration'), 'exclude': lambda f: f is None }})
    r"""An RFC 3339 duration, after which the checkout is automatically canceled.
    A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
    of `TIMED_OUT`.
    
    Default: 5 minutes from creation
    
    Maximum: 5 minutes
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique ID for this `TerminalCheckout`."""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The location of the device where the `TerminalCheckout` was directed."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""An optional note to associate with the checkout, as well as with any payments used to complete the checkout."""  
    payment_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_ids'), 'exclude': lambda f: f is None }})
    r"""A list of IDs for payments created by this `TerminalCheckout`."""  
    payment_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type'), 'exclude': lambda f: f is None }})
    r"""The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional user-defined reference ID that can be used to associate
    this `TerminalCheckout` to another entity in an external system. For example, an order
    ID generated by a third-party shopping cart. The ID is also associated with any payments
    used to complete the checkout.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the `TerminalCheckout`.
    Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
    """  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})
    r"""The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp."""  
    