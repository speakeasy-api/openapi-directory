"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Review:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_multiple_reviews(self, request: operations.DeleteMultipleReviewsRequest) -> operations.DeleteMultipleReviewsResponse:
        r"""Delete Multiple Reviews
        Deletes multiple reviews at once.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reviews'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMultipleReviewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.delete_multiple_reviews_200_application_json_boolean = out

        return res

    def delete_review(self, request: operations.DeleteReviewRequest) -> operations.DeleteReviewResponse:
        r"""Delete Review
        Deletes an existing review.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteReviewRequest, base_url, '/review/{reviewId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bool])
                res.delete_review_200_application_json_boolean = out

        return res

    def edit_review(self, request: operations.EditReviewRequest) -> operations.EditReviewResponse:
        r"""Update a Review
        Updates the information of a review.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditReviewRequest, base_url, '/review/{reviewId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditReviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EditReview200ApplicationJSON])
                res.edit_review_200_application_json_object = out

        return res

    def get_reviewby_review_id(self, request: operations.GetReviewbyReviewIDRequest) -> operations.GetReviewbyReviewIDResponse:
        r"""Get Review by Review ID
        Retrieves information of a product review by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetReviewbyReviewIDRequest, base_url, '/review/{reviewId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetReviewbyReviewIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetReviewbyReviewID200ApplicationJSON])
                res.get_reviewby_review_id_200_application_json_object = out

        return res

    def getalistof_reviews(self, request: operations.GetalistofReviewsRequest) -> operations.GetalistofReviewsResponse:
        r"""Get a list of Reviews
        Retrieves a list of reviews.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reviews'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetalistofReviewsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetalistofReviewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetalistofReviews200ApplicationJSON])
                res.getalistof_reviews_200_application_json_object = out

        return res

    def save_multiple_reviews(self, request: operations.SaveMultipleReviewsRequest) -> operations.SaveMultipleReviewsResponse:
        r"""Create Multiple Reviews
        Creates multiple reviews.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reviews'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveMultipleReviewsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.save_multiple_reviews_200_application_json_strings = out

        return res

    def save_review(self, request: operations.SaveReviewRequest) -> operations.SaveReviewResponse:
        r"""Create a Review
        Creates a single review
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/review'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "save_review_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SaveReviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SaveReview200ApplicationJSON])
                res.save_review_200_application_json_object = out

        return res

    