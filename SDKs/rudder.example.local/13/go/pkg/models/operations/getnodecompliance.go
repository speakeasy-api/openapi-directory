// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNodeCompliancePathParams struct {
	// Id of the target node
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type GetNodeComplianceQueryParams struct {
	// Number of depth level of compliance objects to display (1:rules, 2:directives, 3:components, 4:nodes, 5:values, 6:reports)
	Level *int64 `queryParam:"style=form,explode=true,name=level"`
}

type GetNodeComplianceRequest struct {
	PathParams  GetNodeCompliancePathParams
	QueryParams GetNodeComplianceQueryParams
}

// GetNodeCompliance200ApplicationJSONActionEnum - The id of the action
type GetNodeCompliance200ApplicationJSONActionEnum string

const (
	GetNodeCompliance200ApplicationJSONActionEnumGetNodeCompliance GetNodeCompliance200ApplicationJSONActionEnum = "getNodeCompliance"
)

func (e *GetNodeCompliance200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getNodeCompliance":
		*e = GetNodeCompliance200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodeCompliance200ApplicationJSONActionEnum: %s", s)
	}
}

type GetNodeCompliance200ApplicationJSONDataNodesComplianceDetails struct {
	Error                      *float32 `json:"error,omitempty"`
	NoReport                   *float32 `json:"noReport,omitempty"`
	SuccessAlreadyOK           *float32 `json:"successAlreadyOK,omitempty"`
	SuccessNotApplicable       *float32 `json:"successNotApplicable,omitempty"`
	SuccessRepaired            *float32 `json:"successRepaired,omitempty"`
	UnexpectedMissingComponent *float32 `json:"unexpectedMissingComponent,omitempty"`
	UnexpectedUnknownComponent *float32 `json:"unexpectedUnknownComponent,omitempty"`
}

type GetNodeCompliance200ApplicationJSONDataNodesModeEnum string

const (
	GetNodeCompliance200ApplicationJSONDataNodesModeEnumFullCompliance  GetNodeCompliance200ApplicationJSONDataNodesModeEnum = "full-compliance"
	GetNodeCompliance200ApplicationJSONDataNodesModeEnumChangesOnly     GetNodeCompliance200ApplicationJSONDataNodesModeEnum = "changes-only"
	GetNodeCompliance200ApplicationJSONDataNodesModeEnumReportsDisabled GetNodeCompliance200ApplicationJSONDataNodesModeEnum = "reports-disabled"
)

func (e *GetNodeCompliance200ApplicationJSONDataNodesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full-compliance":
		fallthrough
	case "changes-only":
		fallthrough
	case "reports-disabled":
		*e = GetNodeCompliance200ApplicationJSONDataNodesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodeCompliance200ApplicationJSONDataNodesModeEnum: %s", s)
	}
}

type GetNodeCompliance200ApplicationJSONDataNodes struct {
	// Rule compliance level
	Compliance        float32                                                       `json:"compliance"`
	ComplianceDetails GetNodeCompliance200ApplicationJSONDataNodesComplianceDetails `json:"complianceDetails"`
	// id of the node
	ID   string                                               `json:"id"`
	Mode GetNodeCompliance200ApplicationJSONDataNodesModeEnum `json:"mode"`
}

type GetNodeCompliance200ApplicationJSONData struct {
	Nodes []GetNodeCompliance200ApplicationJSONDataNodes `json:"nodes"`
}

// GetNodeCompliance200ApplicationJSONResultEnum - Result of the request
type GetNodeCompliance200ApplicationJSONResultEnum string

const (
	GetNodeCompliance200ApplicationJSONResultEnumSuccess GetNodeCompliance200ApplicationJSONResultEnum = "success"
	GetNodeCompliance200ApplicationJSONResultEnumError   GetNodeCompliance200ApplicationJSONResultEnum = "error"
)

func (e *GetNodeCompliance200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetNodeCompliance200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNodeCompliance200ApplicationJSONResultEnum: %s", s)
	}
}

// GetNodeCompliance200ApplicationJSON - Success
type GetNodeCompliance200ApplicationJSON struct {
	// The id of the action
	Action GetNodeCompliance200ApplicationJSONActionEnum `json:"action"`
	Data   GetNodeCompliance200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetNodeCompliance200ApplicationJSONResultEnum `json:"result"`
}

type GetNodeComplianceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetNodeCompliance200ApplicationJSONObject *GetNodeCompliance200ApplicationJSON
}
