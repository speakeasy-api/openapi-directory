/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AddUserAddUserRequestBody {
    /**
     * Email address for the user
     */
    @JsonProperty("email")
    public String email;
    public AddUserAddUserRequestBody withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Optional timestamp when the user should expire, formatted in date-time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration")
    public String expiration;
    public AddUserAddUserRequestBody withExpiration(String expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.
     * 
     * The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created. 
     * 
     * Users with the `role` **admin** should have their homeResource set to '/'
     */
    @JsonProperty("homeResource")
    public String homeResource;
    public AddUserAddUserRequestBody withHomeResource(String homeResource) {
        this.homeResource = homeResource;
        return this;
    }
    
    /**
     * If true, the user will not be able to log in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    public Boolean locked;
    public AddUserAddUserRequestBody withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * An optional nickname (e.g. 'David from Sales').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    public String nickname;
    public AddUserAddUserRequestBody withNickname(String nickname) {
        this.nickname = nickname;
        return this;
    }
    
    /**
     * Set this to **true** to enable extra help popups in the web file manager for this user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding")
    public Boolean onboarding;
    public AddUserAddUserRequestBody withOnboarding(Boolean onboarding) {
        this.onboarding = onboarding;
        return this;
    }
    
    /**
     * Password for the user
     */
    @JsonProperty("password")
    public String password;
    public AddUserAddUserRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * An object containing name/value pairs for each permission. Any permission that is not passed will be set to `false` by default. Note that users will be unable to see any files in the account unless you include `list` permission.
     * When creating a user with the `role` **admin**, you should set all of the permissions to `true`
     */
    @JsonProperty("permissions")
    public AddUserAddUserRequestBodyPermissions permissions;
    public AddUserAddUserRequestBody withPermissions(AddUserAddUserRequestBodyPermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * The type of user to create, either **user** or **admin**.
     */
    @JsonProperty("role")
    public AddUserAddUserRequestBodyRoleEnum role;
    public AddUserAddUserRequestBody withRole(AddUserAddUserRequestBodyRoleEnum role) {
        this.role = role;
        return this;
    }
    
    /**
     * Time zone, used for accurate time display within the application. See &lt;a href='https://php.net/manual/en/timezones.php' target='blank'&gt;this page&lt;/a&gt; for allowed values.
     * 
     */
    @JsonProperty("timeZone")
    public String timeZone;
    public AddUserAddUserRequestBody withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.
     * 
     * **Note** Usernames must be unique across all ExaVault accounts.
     */
    @JsonProperty("username")
    public String username;
    public AddUserAddUserRequestBody withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcomeEmail")
    public Boolean welcomeEmail;
    public AddUserAddUserRequestBody withWelcomeEmail(Boolean welcomeEmail) {
        this.welcomeEmail = welcomeEmail;
        return this;
    }
    
}
