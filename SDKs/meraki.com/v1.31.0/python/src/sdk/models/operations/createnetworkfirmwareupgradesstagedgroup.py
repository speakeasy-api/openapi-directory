"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevicesDevices:
    
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""Serial of the device"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the device"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevicesSwitchStacks:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Switch Stack"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Switch Stack"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevices:
    r"""The devices and Switch Stacks assigned to the Group"""
    
    devices: Optional[list[CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevicesDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices'), 'exclude': lambda f: f is None }})
    r"""Data Array of Devices containing the name and serial"""  
    switch_stacks: Optional[list[CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevicesSwitchStacks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchStacks'), 'exclude': lambda f: f is None }})
    r"""Data Array of Switch Stacks containing the name and id"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupRequestBody:
    
    is_default: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDefault') }})
    r"""Boolean indicating the default Group. Any device that does not have a group explicitly assigned will upgrade with this group"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Staged Upgrade Group. Length must be 1 to 255 characters"""  
    assigned_devices: Optional[CreateNetworkFirmwareUpgradesStagedGroupRequestBodyAssignedDevices] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedDevices'), 'exclude': lambda f: f is None }})
    r"""The devices and Switch Stacks assigned to the Group"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the Staged Upgrade Group. Length must be 1 to 255 characters"""  
    

@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkFirmwareUpgradesStagedGroupRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkFirmwareUpgradesStagedGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_firmware_upgrades_staged_group_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    