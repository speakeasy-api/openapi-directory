/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://mercure.local"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * [Mercure](https://mercure.rocks) is a protocol allowing to push data updates to web browsers and other HTTP clients in a convenient, fast, reliable and battery-efficient way.
 *
 * @see {@link https://mercure.rocks/spec} - The Mercure protocol specification
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Subscribe to updates
   *
   * @see {@link https://mercure.rocks/spec#subscription} - Subscription specification
   */
  getWellKnownMercure(
    req: operations.GetWellKnownMercureRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWellKnownMercureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWellKnownMercureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/.well-known/mercure";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWellKnownMercureResponse =
        new operations.GetWellKnownMercureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Active subscriptions
   *
   * @see {@link https://mercure.rocks/spec#subscription-api} - Subscription API
   */
  getWellKnownMercureSubscriptions(
    config?: AxiosRequestConfig
  ): Promise<operations.GetWellKnownMercureSubscriptionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/.well-known/mercure/subscriptions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWellKnownMercureSubscriptionsResponse =
        new operations.GetWellKnownMercureSubscriptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/ld+json`)) {
            res.subscriptions = utils.objectToClass(
              httpRes?.data,
              shared.Subscriptions
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Active subscriptions for the given topic
   *
   * @see {@link https://mercure.rocks/spec#subscription-api} - Subscription API
   */
  getWellKnownMercureSubscriptionsTopic(
    req: operations.GetWellKnownMercureSubscriptionsTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWellKnownMercureSubscriptionsTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWellKnownMercureSubscriptionsTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/.well-known/mercure/subscriptions/{topic}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWellKnownMercureSubscriptionsTopicResponse =
        new operations.GetWellKnownMercureSubscriptionsTopicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/ld+json`)) {
            res.subscriptions = utils.objectToClass(
              httpRes?.data,
              shared.Subscriptions
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Active subscription for the given topic and subscriber
   *
   * @see {@link https://mercure.rocks/spec#active-subscriptions} - Subscription API
   */
  getWellKnownMercureSubscriptionsTopicSubscriber(
    req: operations.GetWellKnownMercureSubscriptionsTopicSubscriberRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWellKnownMercureSubscriptionsTopicSubscriberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetWellKnownMercureSubscriptionsTopicSubscriberRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/.well-known/mercure/subscriptions/{topic}/{subscriber}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWellKnownMercureSubscriptionsTopicSubscriberResponse =
        new operations.GetWellKnownMercureSubscriptionsTopicSubscriberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/ld+json`)) {
            res.subscriptions = utils.objectToClass(
              httpRes?.data,
              shared.Subscriptions
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Publish an update
   *
   * @see {@link https://mercure.rocks/spec#publication} - Publishing specification
   */
  postWellKnownMercure(
    req: operations.PostWellKnownMercureRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWellKnownMercureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWellKnownMercureRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/.well-known/mercure";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWellKnownMercureResponse =
        new operations.PostWellKnownMercureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
