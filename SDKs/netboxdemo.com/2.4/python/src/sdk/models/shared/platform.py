"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nestedmanufacturer as shared_nestedmanufacturer
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PlatformLegacyRPCClientEnum(str, Enum):
    JUNIPER_JUNOS = 'juniper-junos'
    CISCO_IOS = 'cisco-ios'
    OPENGEAR = 'opengear'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Platform:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    manufacturer: Optional[shared_nestedmanufacturer.NestedManufacturer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})  
    napalm_args: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('napalm_args'), 'exclude': lambda f: f is None }})
    r"""Additional arguments to pass when initiating the NAPALM driver (JSON format)"""  
    napalm_driver: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('napalm_driver'), 'exclude': lambda f: f is None }})
    r"""The name of the NAPALM driver to use when interacting with devices"""  
    rpc_client: Optional[PlatformLegacyRPCClientEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rpc_client'), 'exclude': lambda f: f is None }})  
    