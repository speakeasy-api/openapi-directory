// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

// ListPaymentsAuditV4PostInstructFxStatusEnum - The status of the post instruct FX step if one was required for the payment
type ListPaymentsAuditV4PostInstructFxStatusEnum string

const (
	ListPaymentsAuditV4PostInstructFxStatusEnumAny         ListPaymentsAuditV4PostInstructFxStatusEnum = "ANY"
	ListPaymentsAuditV4PostInstructFxStatusEnumInitiated   ListPaymentsAuditV4PostInstructFxStatusEnum = "INITIATED"
	ListPaymentsAuditV4PostInstructFxStatusEnumCancelled   ListPaymentsAuditV4PostInstructFxStatusEnum = "CANCELLED"
	ListPaymentsAuditV4PostInstructFxStatusEnumExecuted    ListPaymentsAuditV4PostInstructFxStatusEnum = "EXECUTED"
	ListPaymentsAuditV4PostInstructFxStatusEnumCompleted   ListPaymentsAuditV4PostInstructFxStatusEnum = "COMPLETED"
	ListPaymentsAuditV4PostInstructFxStatusEnumReturned    ListPaymentsAuditV4PostInstructFxStatusEnum = "RETURNED"
	ListPaymentsAuditV4PostInstructFxStatusEnumResubmitted ListPaymentsAuditV4PostInstructFxStatusEnum = "RESUBMITTED"
	ListPaymentsAuditV4PostInstructFxStatusEnumRefunded    ListPaymentsAuditV4PostInstructFxStatusEnum = "REFUNDED"
)

func (e ListPaymentsAuditV4PostInstructFxStatusEnum) ToPointer() *ListPaymentsAuditV4PostInstructFxStatusEnum {
	return &e
}

func (e *ListPaymentsAuditV4PostInstructFxStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANY":
		fallthrough
	case "INITIATED":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "EXECUTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "RESUBMITTED":
		fallthrough
	case "REFUNDED":
		*e = ListPaymentsAuditV4PostInstructFxStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPaymentsAuditV4PostInstructFxStatusEnum: %v", v)
	}
}

// ListPaymentsAuditV4ScheduleStatusEnum - Payout Schedule Status
type ListPaymentsAuditV4ScheduleStatusEnum string

const (
	ListPaymentsAuditV4ScheduleStatusEnumAny       ListPaymentsAuditV4ScheduleStatusEnum = "ANY"
	ListPaymentsAuditV4ScheduleStatusEnumScheduled ListPaymentsAuditV4ScheduleStatusEnum = "SCHEDULED"
	ListPaymentsAuditV4ScheduleStatusEnumExecuted  ListPaymentsAuditV4ScheduleStatusEnum = "EXECUTED"
	ListPaymentsAuditV4ScheduleStatusEnumFailed    ListPaymentsAuditV4ScheduleStatusEnum = "FAILED"
)

func (e ListPaymentsAuditV4ScheduleStatusEnum) ToPointer() *ListPaymentsAuditV4ScheduleStatusEnum {
	return &e
}

func (e *ListPaymentsAuditV4ScheduleStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANY":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "EXECUTED":
		fallthrough
	case "FAILED":
		*e = ListPaymentsAuditV4ScheduleStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPaymentsAuditV4ScheduleStatusEnum: %v", v)
	}
}

// ListPaymentsAuditV4StatusEnum - Payment Status
type ListPaymentsAuditV4StatusEnum string

const (
	ListPaymentsAuditV4StatusEnumAccepted             ListPaymentsAuditV4StatusEnum = "ACCEPTED"
	ListPaymentsAuditV4StatusEnumAwaitingFunds        ListPaymentsAuditV4StatusEnum = "AWAITING_FUNDS"
	ListPaymentsAuditV4StatusEnumFunded               ListPaymentsAuditV4StatusEnum = "FUNDED"
	ListPaymentsAuditV4StatusEnumUnfunded             ListPaymentsAuditV4StatusEnum = "UNFUNDED"
	ListPaymentsAuditV4StatusEnumBankPaymentRequested ListPaymentsAuditV4StatusEnum = "BANK_PAYMENT_REQUESTED"
	ListPaymentsAuditV4StatusEnumRejected             ListPaymentsAuditV4StatusEnum = "REJECTED"
	ListPaymentsAuditV4StatusEnumAcceptedByRails      ListPaymentsAuditV4StatusEnum = "ACCEPTED_BY_RAILS"
	ListPaymentsAuditV4StatusEnumConfirmed            ListPaymentsAuditV4StatusEnum = "CONFIRMED"
	ListPaymentsAuditV4StatusEnumFailed               ListPaymentsAuditV4StatusEnum = "FAILED"
	ListPaymentsAuditV4StatusEnumReturned             ListPaymentsAuditV4StatusEnum = "RETURNED"
	ListPaymentsAuditV4StatusEnumWithdrawn            ListPaymentsAuditV4StatusEnum = "WITHDRAWN"
)

func (e ListPaymentsAuditV4StatusEnum) ToPointer() *ListPaymentsAuditV4StatusEnum {
	return &e
}

func (e *ListPaymentsAuditV4StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCEPTED":
		fallthrough
	case "AWAITING_FUNDS":
		fallthrough
	case "FUNDED":
		fallthrough
	case "UNFUNDED":
		fallthrough
	case "BANK_PAYMENT_REQUESTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "ACCEPTED_BY_RAILS":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "FAILED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "WITHDRAWN":
		*e = ListPaymentsAuditV4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPaymentsAuditV4StatusEnum: %v", v)
	}
}

// ListPaymentsAuditV4TransmissionTypeEnum - Transmission Type
// * ACH
// * SAME_DAY_ACH
// * WIRE
// * GACHO
type ListPaymentsAuditV4TransmissionTypeEnum string

const (
	ListPaymentsAuditV4TransmissionTypeEnumAch        ListPaymentsAuditV4TransmissionTypeEnum = "ACH"
	ListPaymentsAuditV4TransmissionTypeEnumSameDayAch ListPaymentsAuditV4TransmissionTypeEnum = "SAME_DAY_ACH"
	ListPaymentsAuditV4TransmissionTypeEnumWire       ListPaymentsAuditV4TransmissionTypeEnum = "WIRE"
	ListPaymentsAuditV4TransmissionTypeEnumLocal      ListPaymentsAuditV4TransmissionTypeEnum = "LOCAL"
	ListPaymentsAuditV4TransmissionTypeEnumGacho      ListPaymentsAuditV4TransmissionTypeEnum = "GACHO"
)

func (e ListPaymentsAuditV4TransmissionTypeEnum) ToPointer() *ListPaymentsAuditV4TransmissionTypeEnum {
	return &e
}

func (e *ListPaymentsAuditV4TransmissionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACH":
		fallthrough
	case "SAME_DAY_ACH":
		fallthrough
	case "WIRE":
		fallthrough
	case "LOCAL":
		fallthrough
	case "GACHO":
		*e = ListPaymentsAuditV4TransmissionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPaymentsAuditV4TransmissionTypeEnum: %v", v)
	}
}

type ListPaymentsAuditV4Request struct {
	// Page number. Default is 1.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results to return in a page
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// The UUID of the payee.
	PayeeID *string `queryParam:"style=form,explode=true,name=payeeId"`
	// The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom
	PaymentAmountFrom *int `queryParam:"style=form,explode=true,name=paymentAmountFrom"`
	// The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo
	PaymentAmountTo *int `queryParam:"style=form,explode=true,name=paymentAmountTo"`
	// The payment currency filter. Filters based on an exact match on the currency.
	PaymentCurrency *string `queryParam:"style=form,explode=true,name=paymentCurrency"`
	// The payment memo filter. This filters via a case insensitive substring match.
	PaymentMemo *string `queryParam:"style=form,explode=true,name=paymentMemo"`
	// The account owner Payor Id. Required for external users.
	PayorID *string `queryParam:"style=form,explode=true,name=payorId"`
	// The payor’s name. This filters via a case insensitive substring match.
	PayorName *string `queryParam:"style=form,explode=true,name=payorName"`
	// The status of the post instruct FX step if one was required for the payment
	PostInstructFxStatus *ListPaymentsAuditV4PostInstructFxStatusEnum `queryParam:"style=form,explode=true,name=postInstructFxStatus"`
	// Payout Rails ID filter - case insensitive match.
	// Any value is allowed, but you should use one of the supported railsId values.
	// To get this list of values, you should call the 'Get Supported Rails' endpoint.
	//
	RailsID *string `queryParam:"style=form,explode=true,name=railsId"`
	// The remote id of the payees.
	RemoteID *string `queryParam:"style=form,explode=true,name=remoteId"`
	// The id of the remote system that is orchestrating payments
	RemoteSystemID *string `queryParam:"style=form,explode=true,name=remoteSystemId"`
	// Payout Schedule Status
	ScheduleStatus *ListPaymentsAuditV4ScheduleStatusEnum `queryParam:"style=form,explode=true,name=scheduleStatus"`
	// Filter payouts scheduled to run on or after the given date. Format is yyyy-MM-dd.
	ScheduledForDateFrom *types.Date `queryParam:"style=form,explode=true,name=scheduledForDateFrom"`
	// Filter payouts scheduled to run on or before the given date. Format is yyyy-MM-dd.
	ScheduledForDateTo *types.Date `queryParam:"style=form,explode=true,name=scheduledForDateTo"`
	// Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
	// If set to true, and you have permission, the PII values will be returned as their original unmasked values.
	//
	Sensitive *bool `queryParam:"style=form,explode=true,name=sensitive"`
	// List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by submittedDateTime:desc,paymentId:asc
	// The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
	// routingNumber, accountNumber, remoteId, submittedDateTime, status and paymentId
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The source account name filter. This filters via a case insensitive substring match.
	SourceAccountName *string `queryParam:"style=form,explode=true,name=sourceAccountName"`
	// The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom
	SourceAmountFrom *int `queryParam:"style=form,explode=true,name=sourceAmountFrom"`
	// The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo
	SourceAmountTo *int `queryParam:"style=form,explode=true,name=sourceAmountTo"`
	// The source currency filter. Filters based on an exact match on the currency.
	SourceCurrency *string `queryParam:"style=form,explode=true,name=sourceCurrency"`
	// Payment Status
	Status *ListPaymentsAuditV4StatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The submitted date from range filter. Format is yyyy-MM-dd.
	SubmittedDateFrom *types.Date `queryParam:"style=form,explode=true,name=submittedDateFrom"`
	// The submitted date to range filter. Format is yyyy-MM-dd.
	SubmittedDateTo *types.Date `queryParam:"style=form,explode=true,name=submittedDateTo"`
	// Transmission Type
	// * ACH
	// * SAME_DAY_ACH
	// * WIRE
	// * GACHO
	//
	TransmissionType *ListPaymentsAuditV4TransmissionTypeEnum `queryParam:"style=form,explode=true,name=transmissionType"`
}

type ListPaymentsAuditV4Response struct {
	ContentType string
	// Paginated list of payments
	ListPaymentsResponseV4 *shared.ListPaymentsResponseV4
	StatusCode             int
	RawResponse            *http.Response
	// Invalid request. See Error message payload for details of failure
	InlineResponse400 *shared.InlineResponse400
	// Invalid access token. May be expired or invalid
	InlineResponse401 *shared.InlineResponse401
	// The authentication does not have permissions to access the resource
	// This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
	//
	InlineResponse403 *shared.InlineResponse403
}
