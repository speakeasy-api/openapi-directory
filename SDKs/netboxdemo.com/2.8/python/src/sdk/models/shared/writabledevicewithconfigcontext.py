"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nesteddevice as shared_nesteddevice
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class WritableDeviceWithConfigContextRackFaceEnum(str, Enum):
    FRONT = 'front'
    REAR = 'rear'

class WritableDeviceWithConfigContextStatusEnum(str, Enum):
    OFFLINE = 'offline'
    ACTIVE = 'active'
    PLANNED = 'planned'
    STAGED = 'staged'
    FAILED = 'failed'
    INVENTORY = 'inventory'
    DECOMMISSIONING = 'decommissioning'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableDeviceWithConfigContextInput:
    
    device_role: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_role') }})  
    device_type: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type') }})  
    site: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site') }})  
    asset_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asset_tag'), 'exclude': lambda f: f is None }})
    r"""A unique tag used to identify this device"""  
    cluster: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cluster'), 'exclude': lambda f: f is None }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    face: Optional[WritableDeviceWithConfigContextRackFaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('face'), 'exclude': lambda f: f is None }})  
    local_context_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('local_context_data'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    parent_device: Optional[shared_nesteddevice.NestedDeviceInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_device'), 'exclude': lambda f: f is None }})  
    platform: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})  
    position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The lowest-numbered unit occupied by the device"""  
    primary_ip4: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip4'), 'exclude': lambda f: f is None }})  
    primary_ip6: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_ip6'), 'exclude': lambda f: f is None }})  
    rack: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rack'), 'exclude': lambda f: f is None }})  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})  
    status: Optional[WritableDeviceWithConfigContextStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    tenant: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})  
    vc_position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vc_position'), 'exclude': lambda f: f is None }})  
    vc_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vc_priority'), 'exclude': lambda f: f is None }})  
    virtual_chassis: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtual_chassis'), 'exclude': lambda f: f is None }})  
    