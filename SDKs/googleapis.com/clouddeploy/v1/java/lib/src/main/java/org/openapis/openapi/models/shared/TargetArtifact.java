/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TargetArtifact - The artifacts produced by a target render operation.
 */
public class TargetArtifact {
    /**
     * Output only. URI of a directory containing the artifacts. This contains deployment configuration used by Skaffold during a rollout, and all paths are relative to this location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("artifactUri")
    public String artifactUri;

    public TargetArtifact withArtifactUri(String artifactUri) {
        this.artifactUri = artifactUri;
        return this;
    }
    
    /**
     * Output only. File path of the rendered manifest relative to the URI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manifestPath")
    public String manifestPath;

    public TargetArtifact withManifestPath(String manifestPath) {
        this.manifestPath = manifestPath;
        return this;
    }
    
    /**
     * Output only. Map from the phase ID to the phase artifacts for the `Target`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phaseArtifacts")
    public java.util.Map<String, PhaseArtifact> phaseArtifacts;

    public TargetArtifact withPhaseArtifacts(java.util.Map<String, PhaseArtifact> phaseArtifacts) {
        this.phaseArtifacts = phaseArtifacts;
        return this;
    }
    
    /**
     * Output only. File path of the resolved Skaffold configuration relative to the URI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skaffoldConfigPath")
    public String skaffoldConfigPath;

    public TargetArtifact withSkaffoldConfigPath(String skaffoldConfigPath) {
        this.skaffoldConfigPath = skaffoldConfigPath;
        return this;
    }
    
    public TargetArtifact(){}
}
