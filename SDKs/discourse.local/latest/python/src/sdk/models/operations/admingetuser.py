"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class AdminGetUserRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSONApprovedBy:
    
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSONGroups:
    
    allow_membership_requests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_membership_requests') }})  
    automatic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automatic') }})  
    bio_cooked: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_cooked') }})  
    bio_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_excerpt') }})  
    bio_raw: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio_raw') }})  
    can_admin_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_admin_group') }})  
    can_see_members: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_see_members') }})  
    default_notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_notification_level') }})  
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name') }})  
    flair_bg_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_bg_color') }})  
    flair_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_color') }})  
    flair_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flair_url') }})  
    full_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_name') }})  
    grant_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_trust_level') }})  
    has_messages: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_messages') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    incoming_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incoming_email') }})  
    members_visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_visibility_level') }})  
    membership_request_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership_request_template') }})  
    mentionable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mentionable_level') }})  
    messageable_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageable_level') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    primary_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group') }})  
    public_admission: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_admission') }})  
    public_exit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_exit') }})  
    publish_read_state: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publish_read_state') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    user_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_count') }})  
    visibility_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility_level') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSONPenaltyCounts:
    
    silenced: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('silenced') }})  
    suspended: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSONTl3RequirementsPenaltyCounts:
    
    silenced: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('silenced') }})  
    suspended: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended') }})  
    total: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSONTl3Requirements:
    
    days_visited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_visited') }})  
    max_flagged_by_users: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_flagged_by_users') }})  
    max_flagged_posts: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_flagged_posts') }})  
    min_days_visited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_days_visited') }})  
    min_likes_given: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_likes_given') }})  
    min_likes_received: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_likes_received') }})  
    min_likes_received_days: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_likes_received_days') }})  
    min_likes_received_users: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_likes_received_users') }})  
    min_posts_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_posts_read') }})  
    min_posts_read_all_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_posts_read_all_time') }})  
    min_topics_replied_to: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_topics_replied_to') }})  
    min_topics_viewed: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_topics_viewed') }})  
    min_topics_viewed_all_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_topics_viewed_all_time') }})  
    num_flagged_by_users: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_flagged_by_users') }})  
    num_flagged_posts: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_flagged_posts') }})  
    num_likes_given: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_likes_given') }})  
    num_likes_received: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_likes_received') }})  
    num_likes_received_days: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_likes_received_days') }})  
    num_likes_received_users: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_likes_received_users') }})  
    num_topics_replied_to: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_topics_replied_to') }})  
    on_grace_period: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_grace_period') }})  
    penalty_counts: AdminGetUser200ApplicationJSONTl3RequirementsPenaltyCounts = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty_counts') }})  
    posts_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_read') }})  
    posts_read_all_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_read_all_time') }})  
    requirements_lost: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requirements_lost') }})  
    requirements_met: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requirements_met') }})  
    time_period: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_period') }})  
    topics_viewed: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_viewed') }})  
    topics_viewed_all_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_viewed_all_time') }})  
    trust_level_locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level_locked') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdminGetUser200ApplicationJSON:
    r"""response"""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})  
    admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('admin') }})  
    api_key_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_key_count') }})  
    approved_by: AdminGetUser200ApplicationJSONApprovedBy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_by') }})  
    avatar_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_template') }})  
    badge_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badge_count') }})  
    bounce_score: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bounce_score') }})  
    can_activate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_activate') }})  
    can_be_anonymized: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_be_anonymized') }})  
    can_be_deleted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_be_deleted') }})  
    can_be_merged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_be_merged') }})  
    can_deactivate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_deactivate') }})  
    can_delete_all_posts: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete_all_posts') }})  
    can_delete_sso_record: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_delete_sso_record') }})  
    can_disable_second_factor: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_disable_second_factor') }})  
    can_grant_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_grant_admin') }})  
    can_grant_moderation: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_grant_moderation') }})  
    can_impersonate: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_impersonate') }})  
    can_revoke_admin: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_revoke_admin') }})  
    can_revoke_moderation: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_revoke_moderation') }})  
    can_send_activation_email: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_send_activation_email') }})  
    can_view_action_logs: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_view_action_logs') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})  
    created_at_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at_age') }})  
    days_visited: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_visited') }})  
    external_ids: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_ids') }})  
    flag_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flag_level') }})  
    flags_given_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flags_given_count') }})  
    flags_received_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flags_received_count') }})  
    full_suspend_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_suspend_reason') }})  
    groups: list[AdminGetUser200ApplicationJSONGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    ip_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_address') }})  
    last_emailed_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_emailed_age') }})  
    last_emailed_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_emailed_at') }})  
    last_seen_age: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_age') }})  
    last_seen_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at') }})  
    like_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_count') }})  
    like_given_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like_given_count') }})  
    manual_locked_trust_level: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manual_locked_trust_level') }})  
    moderator: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderator') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    posts_read_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posts_read_count') }})  
    primary_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_group_id') }})  
    private_topics_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_topics_count') }})  
    registration_ip_address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_ip_address') }})  
    reset_bounce_score_after: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_bounce_score_after') }})  
    silence_reason: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('silence_reason') }})  
    silenced_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('silenced_by') }})  
    single_sign_on_record: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('single_sign_on_record') }})  
    staged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staged') }})  
    suspended_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended_by') }})  
    time_read: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_read') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    topic_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_count') }})  
    topics_entered: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_entered') }})  
    trust_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trust_level') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    warnings_received_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings_received_count') }})  
    associated_accounts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associated_accounts'), 'exclude': lambda f: f is None }})  
    next_penalty: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_penalty'), 'exclude': lambda f: f is None }})  
    penalty_counts: Optional[AdminGetUser200ApplicationJSONPenaltyCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('penalty_counts'), 'exclude': lambda f: f is None }})  
    post_edits_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_edits_count'), 'exclude': lambda f: f is None }})  
    tl3_requirements: Optional[AdminGetUser200ApplicationJSONTl3Requirements] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tl3_requirements'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AdminGetUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    admin_get_user_200_application_json_object: Optional[AdminGetUser200ApplicationJSON] = dataclasses.field(default=None)
    r"""response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    