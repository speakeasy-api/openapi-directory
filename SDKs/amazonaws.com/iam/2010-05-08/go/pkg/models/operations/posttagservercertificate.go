// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTTagServerCertificateActionEnum
type POSTTagServerCertificateActionEnum string

const (
	POSTTagServerCertificateActionEnumTagServerCertificate POSTTagServerCertificateActionEnum = "TagServerCertificate"
)

func (e *POSTTagServerCertificateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TagServerCertificate":
		*e = POSTTagServerCertificateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTTagServerCertificateActionEnum: %s", s)
	}
}

// POSTTagServerCertificateVersionEnum
type POSTTagServerCertificateVersionEnum string

const (
	POSTTagServerCertificateVersionEnumTwoThousandAndTen0508 POSTTagServerCertificateVersionEnum = "2010-05-08"
)

func (e *POSTTagServerCertificateVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = POSTTagServerCertificateVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTTagServerCertificateVersionEnum: %s", s)
	}
}

type POSTTagServerCertificateQueryParams struct {
	Action  POSTTagServerCertificateActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTTagServerCertificateVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTTagServerCertificateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTTagServerCertificateRequest struct {
	QueryParams POSTTagServerCertificateQueryParams
	Headers     POSTTagServerCertificateHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTTagServerCertificateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
