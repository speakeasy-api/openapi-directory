// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ListChannelMembersSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListChannelMembersRequest struct {
	// Channel Id.
	ChannelID string `pathParam:"style=simple,explode=false,name=channelId"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned with a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Unique identifier of the user who is the owner of this channel.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// ListChannelMembers200ApplicationXMLMembersRoleEnum - The role of the member. The value can be one of these: `owner`, `admin`, `member`.
type ListChannelMembers200ApplicationXMLMembersRoleEnum string

const (
	ListChannelMembers200ApplicationXMLMembersRoleEnumAdmin  ListChannelMembers200ApplicationXMLMembersRoleEnum = "admin"
	ListChannelMembers200ApplicationXMLMembersRoleEnumOwner  ListChannelMembers200ApplicationXMLMembersRoleEnum = "owner"
	ListChannelMembers200ApplicationXMLMembersRoleEnumMember ListChannelMembers200ApplicationXMLMembersRoleEnum = "member"
)

func (e *ListChannelMembers200ApplicationXMLMembersRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "admin":
		fallthrough
	case "owner":
		fallthrough
	case "member":
		*e = ListChannelMembers200ApplicationXMLMembersRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListChannelMembers200ApplicationXMLMembersRoleEnum: %s", s)
	}
}

type ListChannelMembers200ApplicationXMLMembers struct {
	// Email address of the member.
	Email *string
	// Member's first name.
	FirstName *string
	// Member ID: Unique Identifier of the member.
	ID *string
	// Member's last name.
	LastName *string
	// The role of the member. The value can be one of these: `owner`, `admin`, `member`.
	Role *ListChannelMembers200ApplicationXMLMembersRoleEnum
}

// ListChannelMembers200ApplicationXML - **HTTP Status Code:** `200`<br>
// List of channel members returned.
type ListChannelMembers200ApplicationXML struct {
	// Members in a channel.
	Members []ListChannelMembers200ApplicationXMLMembers
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned with a single API call.
	PageSize *int64
	// The total number of records returned.
	TotalRecords *int64
}

// ListChannelMembers200ApplicationJSONMembersRoleEnum - The role of the member. The value can be one of these: `owner`, `admin`, `member`.
type ListChannelMembers200ApplicationJSONMembersRoleEnum string

const (
	ListChannelMembers200ApplicationJSONMembersRoleEnumAdmin  ListChannelMembers200ApplicationJSONMembersRoleEnum = "admin"
	ListChannelMembers200ApplicationJSONMembersRoleEnumOwner  ListChannelMembers200ApplicationJSONMembersRoleEnum = "owner"
	ListChannelMembers200ApplicationJSONMembersRoleEnumMember ListChannelMembers200ApplicationJSONMembersRoleEnum = "member"
)

func (e *ListChannelMembers200ApplicationJSONMembersRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "admin":
		fallthrough
	case "owner":
		fallthrough
	case "member":
		*e = ListChannelMembers200ApplicationJSONMembersRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListChannelMembers200ApplicationJSONMembersRoleEnum: %s", s)
	}
}

type ListChannelMembers200ApplicationJSONMembers struct {
	// Email address of the member.
	Email *string `json:"email,omitempty"`
	// Member's first name.
	FirstName *string `json:"first_name,omitempty"`
	// Member ID: Unique Identifier of the member.
	ID *string `json:"id,omitempty"`
	// Member's last name.
	LastName *string `json:"last_name,omitempty"`
	// The role of the member. The value can be one of these: `owner`, `admin`, `member`.
	Role *ListChannelMembers200ApplicationJSONMembersRoleEnum `json:"role,omitempty"`
}

// ListChannelMembers200ApplicationJSON - **HTTP Status Code:** `200`<br>
// List of channel members returned.
type ListChannelMembers200ApplicationJSON struct {
	// Members in a channel.
	Members []ListChannelMembers200ApplicationJSONMembers `json:"members,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of records returned.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ListChannelMembersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// List of channel members returned.
	//
	//
	ListChannelMembers200ApplicationJSONObject *ListChannelMembers200ApplicationJSON
}
