"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PlacementGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_placement_groups_get(self, request: operations.DfareportingPlacementGroupsGetRequest, security: operations.DfareportingPlacementGroupsGetSecurity) -> operations.DfareportingPlacementGroupsGetResponse:
        r"""Gets one placement group by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementGroupsGetRequest, base_url, '/userprofiles/{profileId}/placementGroups/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingPlacementGroupsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementGroup])
                res.placement_group = out

        return res

    def dfareporting_placement_groups_insert(self, request: operations.DfareportingPlacementGroupsInsertRequest, security: operations.DfareportingPlacementGroupsInsertSecurity) -> operations.DfareportingPlacementGroupsInsertResponse:
        r"""Inserts a new placement group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementGroupsInsertRequest, base_url, '/userprofiles/{profileId}/placementGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementGroupsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementGroupsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementGroup])
                res.placement_group = out

        return res

    def dfareporting_placement_groups_list(self, request: operations.DfareportingPlacementGroupsListRequest, security: operations.DfareportingPlacementGroupsListSecurity) -> operations.DfareportingPlacementGroupsListResponse:
        r"""Retrieves a list of placement groups, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementGroupsListRequest, base_url, '/userprofiles/{profileId}/placementGroups', request)
        
        query_params = utils.get_query_params(operations.DfareportingPlacementGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementGroupsListResponse])
                res.placement_groups_list_response = out

        return res

    def dfareporting_placement_groups_patch(self, request: operations.DfareportingPlacementGroupsPatchRequest, security: operations.DfareportingPlacementGroupsPatchSecurity) -> operations.DfareportingPlacementGroupsPatchResponse:
        r"""Updates an existing placement group. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementGroupsPatchRequest, base_url, '/userprofiles/{profileId}/placementGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementGroupsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementGroupsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementGroup])
                res.placement_group = out

        return res

    def dfareporting_placement_groups_update(self, request: operations.DfareportingPlacementGroupsUpdateRequest, security: operations.DfareportingPlacementGroupsUpdateSecurity) -> operations.DfareportingPlacementGroupsUpdateResponse:
        r"""Updates an existing placement group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingPlacementGroupsUpdateRequest, base_url, '/userprofiles/{profileId}/placementGroups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "placement_group", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingPlacementGroupsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingPlacementGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PlacementGroup])
                res.placement_group = out

        return res

    