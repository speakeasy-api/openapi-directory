/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Reports generation
 */
export class Reports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetch a list of Events within the time period for the Devices or Groups
   *
   * @remarks
   * At least one _deviceId_ or one _groupId_ must be passed
   */
  getReportsEvents(
    req: operations.GetReportsEventsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportsEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportsEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/events";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportsEventsResponse =
        new operations.GetReportsEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a list of Positions within the time period for the Devices or Groups
   *
   * @remarks
   * At least one _deviceId_ or one _groupId_ must be passed
   */
  getReportsRoute(
    req: operations.GetReportsRouteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportsRouteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportsRouteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/route";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportsRouteResponse =
        new operations.GetReportsRouteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.positions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.positions = utils.objectToClass(
              httpRes?.data,
              shared.Position,
              resFieldDepth
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a list of ReportStops within the time period for the Devices or Groups
   *
   * @remarks
   * At least one _deviceId_ or one _groupId_ must be passed
   */
  getReportsStops(
    req: operations.GetReportsStopsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportsStopsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportsStopsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/stops";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportsStopsResponse =
        new operations.GetReportsStopsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reportStops = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reportStops = utils.objectToClass(
              httpRes?.data,
              shared.ReportStops,
              resFieldDepth
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a list of ReportSummary within the time period for the Devices or Groups
   *
   * @remarks
   * At least one _deviceId_ or one _groupId_ must be passed
   */
  getReportsSummary(
    req: operations.GetReportsSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportsSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportsSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/summary";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportsSummaryResponse =
        new operations.GetReportsSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reportSummaries = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reportSummaries = utils.objectToClass(
              httpRes?.data,
              shared.ReportSummary,
              resFieldDepth
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a list of ReportTrips within the time period for the Devices or Groups
   *
   * @remarks
   * At least one _deviceId_ or one _groupId_ must be passed
   */
  getReportsTrips(
    req: operations.GetReportsTripsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReportsTripsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReportsTripsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/trips";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReportsTripsResponse =
        new operations.GetReportsTripsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reportTrips = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.reportTrips = utils.objectToClass(
              httpRes?.data,
              shared.ReportTrips,
              resFieldDepth
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
