/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GETJournalRunType {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregateCurrency")
    public Boolean aggregateCurrency;
    public GETJournalRunType withAggregateCurrency(Boolean aggregateCurrency) {
        this.aggregateCurrency = aggregateCurrency;
        return this;
    }
    
    /**
     * Date and time the journal run was executed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("executedOn")
    public OffsetDateTime executedOn;
    public GETJournalRunType withExecutedOn(OffsetDateTime executedOn) {
        this.executedOn = executedOn;
        return this;
    }
    
    /**
     * Date of the journal entry.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("journalEntryDate")
    public LocalDate journalEntryDate;
    public GETJournalRunType withJournalEntryDate(LocalDate journalEntryDate) {
        this.journalEntryDate = journalEntryDate;
        return this;
    }
    
    /**
     * Journal run number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public GETJournalRunType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Name of GL segmentation rule used in the journal run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segmentationRuleName")
    public String segmentationRuleName;
    public GETJournalRunType withSegmentationRuleName(String segmentationRuleName) {
        this.segmentationRuleName = segmentationRuleName;
        return this;
    }
    
    /**
     * Status of the journal run. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GETJournalRunTypeStatusEnum status;
    public GETJournalRunType withStatus(GETJournalRunTypeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETJournalRunType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * The target end date of the journal run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("targetEndDate")
    public LocalDate targetEndDate;
    public GETJournalRunType withTargetEndDate(LocalDate targetEndDate) {
        this.targetEndDate = targetEndDate;
        return this;
    }
    
    /**
     * The target start date of the journal run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("targetStartDate")
    public LocalDate targetStartDate;
    public GETJournalRunType withTargetStartDate(LocalDate targetStartDate) {
        this.targetStartDate = targetStartDate;
        return this;
    }
    
    /**
     * Total number of journal entries in the journal run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalJournalEntryCount")
    public Long totalJournalEntryCount;
    public GETJournalRunType withTotalJournalEntryCount(Long totalJournalEntryCount) {
        this.totalJournalEntryCount = totalJournalEntryCount;
        return this;
    }
    
    /**
     * Transaction types included in the journal run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionTypes")
    public GETJournalRunTransactionType[] transactionTypes;
    public GETJournalRunType withTransactionTypes(GETJournalRunTransactionType[] transactionTypes) {
        this.transactionTypes = transactionTypes;
        return this;
    }
    
}
