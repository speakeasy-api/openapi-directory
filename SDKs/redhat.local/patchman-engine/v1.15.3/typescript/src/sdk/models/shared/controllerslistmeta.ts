/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ControllersFilterData } from "./controllersfilterdata";
import { Expose, Transform } from "class-transformer";

export class ControllersListMeta extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ControllersFilterData })
  @Expose({ name: "filter" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ControllersFilterData> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ControllersFilterData);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  filter?: Record<string, ControllersFilterData>;

  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  limit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "search" })
  search?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sort" })
  sort?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "subtotals" })
  subtotals?: Record<string, number>;

  @SpeakeasyMetadata()
  @Expose({ name: "total_items" })
  totalItems?: number;
}
