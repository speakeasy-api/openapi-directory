/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OtherContacts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Copies an "Other contact" to a new contact in the user's "myContacts" group Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
   */
  peopleOtherContactsCopyOtherContactToMyContactsGroup(
    req: operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupRequest,
    security: operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{resourceName}:copyOtherContactToMyContactsGroup",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "copyOtherContactToMyContactsGroupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupResponse =
        new operations.PeopleOtherContactsCopyOtherContactToMyContactsGroupResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.person = utils.objectToClass(httpRes?.data, shared.Person);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all "Other contacts", that is contacts that are not in a contact group. "Other contacts" are typically auto created contacts from interactions. Sync tokens expire 7 days after the full sync. A request with an expired sync token will get an error with an [google.rpc.ErrorInfo](https://cloud.google.com/apis/design/errors#error_info) with reason "EXPIRED_SYNC_TOKEN". In the case of such an error clients should make a full sync request without a `sync_token`. The first page of a full sync request has an additional quota. If the quota is exceeded, a 429 error will be returned. This quota is fixed and can not be increased. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the user's other contacts that have changed](/people/v1/other-contacts#list_the_users_other_contacts_that_have_changed).
   */
  peopleOtherContactsList(
    req: operations.PeopleOtherContactsListRequest,
    security: operations.PeopleOtherContactsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PeopleOtherContactsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PeopleOtherContactsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/otherContacts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PeopleOtherContactsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PeopleOtherContactsListResponse =
        new operations.PeopleOtherContactsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOtherContactsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOtherContactsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Provides a list of contacts in the authenticated user's other contacts that matches the search query. The query matches on a contact's `names`, `emailAddresses`, and `phoneNumbers` fields that are from the OTHER_CONTACT source. **IMPORTANT**: Before searching, clients should send a warmup request with an empty query to update the cache. See https://developers.google.com/people/v1/other-contacts#search_the_users_other_contacts
   */
  peopleOtherContactsSearch(
    req: operations.PeopleOtherContactsSearchRequest,
    security: operations.PeopleOtherContactsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PeopleOtherContactsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PeopleOtherContactsSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/otherContacts:search";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PeopleOtherContactsSearchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PeopleOtherContactsSearchResponse =
        new operations.PeopleOtherContactsSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
