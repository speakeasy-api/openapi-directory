// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GitCreateTreePathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// GitCreateTreeRequestBodyTreeModeEnum - The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
type GitCreateTreeRequestBodyTreeModeEnum string

const (
	GitCreateTreeRequestBodyTreeModeEnumOneHundredThousandSixHundredAndFortyFour   GitCreateTreeRequestBodyTreeModeEnum = "100644"
	GitCreateTreeRequestBodyTreeModeEnumOneHundredThousandSevenHundredAndFiftyFive GitCreateTreeRequestBodyTreeModeEnum = "100755"
	GitCreateTreeRequestBodyTreeModeEnumFortyThousand                              GitCreateTreeRequestBodyTreeModeEnum = "040000"
	GitCreateTreeRequestBodyTreeModeEnumOneHundredAndSixtyThousand                 GitCreateTreeRequestBodyTreeModeEnum = "160000"
	GitCreateTreeRequestBodyTreeModeEnumOneHundredAndTwentyThousand                GitCreateTreeRequestBodyTreeModeEnum = "120000"
)

func (e *GitCreateTreeRequestBodyTreeModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "100644":
		fallthrough
	case "100755":
		fallthrough
	case "040000":
		fallthrough
	case "160000":
		fallthrough
	case "120000":
		*e = GitCreateTreeRequestBodyTreeModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GitCreateTreeRequestBodyTreeModeEnum: %s", s)
	}
}

// GitCreateTreeRequestBodyTreeTypeEnum - Either `blob`, `tree`, or `commit`.
type GitCreateTreeRequestBodyTreeTypeEnum string

const (
	GitCreateTreeRequestBodyTreeTypeEnumBlob   GitCreateTreeRequestBodyTreeTypeEnum = "blob"
	GitCreateTreeRequestBodyTreeTypeEnumTree   GitCreateTreeRequestBodyTreeTypeEnum = "tree"
	GitCreateTreeRequestBodyTreeTypeEnumCommit GitCreateTreeRequestBodyTreeTypeEnum = "commit"
)

func (e *GitCreateTreeRequestBodyTreeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "blob":
		fallthrough
	case "tree":
		fallthrough
	case "commit":
		*e = GitCreateTreeRequestBodyTreeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GitCreateTreeRequestBodyTreeTypeEnum: %s", s)
	}
}

type GitCreateTreeRequestBodyTree struct {
	// The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
	//
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
	Content *string `json:"content,omitempty"`
	// The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
	Mode *GitCreateTreeRequestBodyTreeModeEnum `json:"mode,omitempty"`
	// The file referenced in the tree.
	Path *string `json:"path,omitempty"`
	// The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
	//
	// **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
	Sha *string `json:"sha,omitempty"`
	// Either `blob`, `tree`, or `commit`.
	Type *GitCreateTreeRequestBodyTreeTypeEnum `json:"type,omitempty"`
}

type GitCreateTreeRequestBody struct {
	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
	// If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
	//
	BaseTree *string `json:"base_tree,omitempty"`
	// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
	Tree []GitCreateTreeRequestBodyTree `json:"tree"`
}

type GitCreateTreeRequest struct {
	PathParams GitCreateTreePathParams
	Request    GitCreateTreeRequestBody `request:"mediaType=application/json"`
}

type GitCreateTreeResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	GitTree *shared.GitTree
	// Validation failed
	ValidationError *shared.ValidationError
}
