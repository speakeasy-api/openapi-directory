"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetOrganizationDevicesStatusesOverviewProductTypesEnum(str, Enum):
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SENSOR = 'sensor'
    SWITCH = 'switch'
    SYSTEMS_MANAGER = 'systemsManager'
    WIRELESS = 'wireless'


@dataclasses.dataclass
class GetOrganizationDevicesStatusesOverviewRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter device statuses by network."""  
    product_types: Optional[list[GetOrganizationDevicesStatusesOverviewProductTypesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productTypes', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesStatusesOverview200ApplicationJSONCountsByStatus:
    r"""byStatus"""
    
    alerting: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alerting'), 'exclude': lambda f: f is None }})
    r"""alerting count"""  
    dormant: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dormant'), 'exclude': lambda f: f is None }})
    r"""dormant count"""  
    offline: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offline'), 'exclude': lambda f: f is None }})
    r"""offline count"""  
    online: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('online'), 'exclude': lambda f: f is None }})
    r"""online count"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesStatusesOverview200ApplicationJSONCounts:
    r"""counts"""
    
    by_status: Optional[GetOrganizationDevicesStatusesOverview200ApplicationJSONCountsByStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('byStatus'), 'exclude': lambda f: f is None }})
    r"""byStatus"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesStatusesOverview200ApplicationJSON:
    r"""Successful operation"""
    
    counts: Optional[GetOrganizationDevicesStatusesOverview200ApplicationJSONCounts] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""counts"""  
    

@dataclasses.dataclass
class GetOrganizationDevicesStatusesOverviewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_devices_statuses_overview_200_application_json_object: Optional[GetOrganizationDevicesStatusesOverview200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    