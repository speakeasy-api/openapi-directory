// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListProgramsRequest struct {
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	Limit  *int64  `queryParam:"style=form,explode=true,name=limit"`
}

type ListProgramsDefaultApplicationJSON13StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListProgramsDefaultApplicationJSON13StatusEnum = 429
)

func (e ListProgramsDefaultApplicationJSON13StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = ListProgramsDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON13TypeEnum string

const (
	ListProgramsDefaultApplicationJSON13TypeEnumRateLimitedError ListProgramsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e ListProgramsDefaultApplicationJSON13TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = ListProgramsDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON13 struct {
	Detail     string                                         `json:"detail"`
	RetryAfter *int64                                         `json:"retry_after,omitempty"`
	Status     ListProgramsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                         `json:"title"`
	Type       ListProgramsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON12StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListProgramsDefaultApplicationJSON12StatusEnum = 403
)

func (e ListProgramsDefaultApplicationJSON12StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListProgramsDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON12TypeEnum string

const (
	ListProgramsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListProgramsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e ListProgramsDefaultApplicationJSON12TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = ListProgramsDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON12 struct {
	Detail string                                         `json:"detail"`
	Status ListProgramsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListProgramsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON11StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListProgramsDefaultApplicationJSON11StatusEnum = 404
)

func (e ListProgramsDefaultApplicationJSON11StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListProgramsDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON11TypeEnum string

const (
	ListProgramsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListProgramsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e ListProgramsDefaultApplicationJSON11TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = ListProgramsDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON11 struct {
	Detail string                                         `json:"detail"`
	Status ListProgramsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListProgramsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON10StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON10StatusEnumFourHundred ListProgramsDefaultApplicationJSON10StatusEnum = 400
)

func (e ListProgramsDefaultApplicationJSON10StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListProgramsDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON10TypeEnum string

const (
	ListProgramsDefaultApplicationJSON10TypeEnumMalformedRequestError ListProgramsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e ListProgramsDefaultApplicationJSON10TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = ListProgramsDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON10 struct {
	Detail string                                         `json:"detail"`
	Status ListProgramsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                         `json:"title"`
	Type   ListProgramsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON9StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON9StatusEnumFourHundred ListProgramsDefaultApplicationJSON9StatusEnum = 400
)

func (e ListProgramsDefaultApplicationJSON9StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListProgramsDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON9TypeEnum string

const (
	ListProgramsDefaultApplicationJSON9TypeEnumInvalidParametersError ListProgramsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e ListProgramsDefaultApplicationJSON9TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = ListProgramsDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                      `json:"errors"`
	Status ListProgramsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON8StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListProgramsDefaultApplicationJSON8StatusEnum = 409
)

func (e ListProgramsDefaultApplicationJSON8StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListProgramsDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON8TypeEnum string

const (
	ListProgramsDefaultApplicationJSON8TypeEnumInvalidOperationError ListProgramsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e ListProgramsDefaultApplicationJSON8TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = ListProgramsDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON8 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON7StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListProgramsDefaultApplicationJSON7StatusEnum = 401
)

func (e ListProgramsDefaultApplicationJSON7StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = ListProgramsDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON7TypeEnum string

const (
	ListProgramsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListProgramsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e ListProgramsDefaultApplicationJSON7TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = ListProgramsDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON7 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON6StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON6StatusEnumFiveHundred ListProgramsDefaultApplicationJSON6StatusEnum = 500
)

func (e ListProgramsDefaultApplicationJSON6StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = ListProgramsDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON6TypeEnum string

const (
	ListProgramsDefaultApplicationJSON6TypeEnumInternalServerError ListProgramsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e ListProgramsDefaultApplicationJSON6TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = ListProgramsDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON6 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON5StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListProgramsDefaultApplicationJSON5StatusEnum = 403
)

func (e ListProgramsDefaultApplicationJSON5StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListProgramsDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON5TypeEnum string

const (
	ListProgramsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListProgramsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e ListProgramsDefaultApplicationJSON5TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = ListProgramsDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON5 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON4StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListProgramsDefaultApplicationJSON4StatusEnum = 422
)

func (e ListProgramsDefaultApplicationJSON4StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = ListProgramsDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON4TypeEnum string

const (
	ListProgramsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListProgramsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e ListProgramsDefaultApplicationJSON4TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = ListProgramsDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON4 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON3StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListProgramsDefaultApplicationJSON3StatusEnum = 409
)

func (e ListProgramsDefaultApplicationJSON3StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListProgramsDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON3TypeEnum string

const (
	ListProgramsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListProgramsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e ListProgramsDefaultApplicationJSON3TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = ListProgramsDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON3 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON2StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListProgramsDefaultApplicationJSON2StatusEnum = 403
)

func (e ListProgramsDefaultApplicationJSON2StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListProgramsDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON2TypeEnum string

const (
	ListProgramsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListProgramsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e ListProgramsDefaultApplicationJSON2TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = ListProgramsDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON2 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListProgramsDefaultApplicationJSON1StatusEnum int64

const (
	ListProgramsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListProgramsDefaultApplicationJSON1StatusEnum = 404
)

func (e ListProgramsDefaultApplicationJSON1StatusEnum) ToPointer() *ListProgramsDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListProgramsDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON1TypeEnum string

const (
	ListProgramsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListProgramsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e ListProgramsDefaultApplicationJSON1TypeEnum) ToPointer() *ListProgramsDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *ListProgramsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = ListProgramsDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListProgramsDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type ListProgramsDefaultApplicationJSON1 struct {
	Detail string                                        `json:"detail"`
	Status ListProgramsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                        `json:"title"`
	Type   ListProgramsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListProgramsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	Error interface{}
	// Program List
	ProgramList *shared.ProgramList
}
