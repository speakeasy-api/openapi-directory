"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tag as shared_tag
from ..shared import workspaceproperties as shared_workspaceproperties
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkspaceRequest:
    r"""Describes the information used to create a WorkSpace."""
    
    bundle_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BundleId') }})  
    directory_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryId') }})  
    user_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserName') }})  
    root_volume_encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootVolumeEncryptionEnabled'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    user_volume_encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserVolumeEncryptionEnabled'), 'exclude': lambda f: f is None }})  
    volume_encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeEncryptionKey'), 'exclude': lambda f: f is None }})  
    workspace_properties: Optional[shared_workspaceproperties.WorkspaceProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkspaceProperties'), 'exclude': lambda f: f is None }})  
    