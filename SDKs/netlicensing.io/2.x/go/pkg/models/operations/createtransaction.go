// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type CreateTransactionSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// CreateTransactionRequestBodySourceEnum - AUTO Transaction for internal use only
type CreateTransactionRequestBodySourceEnum string

const (
	CreateTransactionRequestBodySourceEnumShop CreateTransactionRequestBodySourceEnum = "SHOP"
)

func (e *CreateTransactionRequestBodySourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SHOP":
		*e = CreateTransactionRequestBodySourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTransactionRequestBodySourceEnum: %s", s)
	}
}

type CreateTransactionRequestBodyStatusEnum string

const (
	CreateTransactionRequestBodyStatusEnumCancelled CreateTransactionRequestBodyStatusEnum = "CANCELLED"
	CreateTransactionRequestBodyStatusEnumClosed    CreateTransactionRequestBodyStatusEnum = "CLOSED"
	CreateTransactionRequestBodyStatusEnumPending   CreateTransactionRequestBodyStatusEnum = "PENDING"
)

func (e *CreateTransactionRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CANCELLED":
		fallthrough
	case "CLOSED":
		fallthrough
	case "PENDING":
		*e = CreateTransactionRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTransactionRequestBodyStatusEnum: %s", s)
	}
}

type CreateTransactionRequestBody struct {
	// Always 'true' for Transactions
	Active         bool       `form:"name=active"`
	DateClosed     *time.Time `form:"name=dateClosed"`
	DateCreated    *time.Time `form:"name=dateCreated"`
	LicenseeNumber *string    `form:"name=licenseeNumber"`
	// Unique number (across all Products of a Vendor) that identifies the Transaction
	Number        *string `form:"name=number"`
	PaymentMethod *string `form:"name=paymentMethod"`
	// AUTO Transaction for internal use only
	Source CreateTransactionRequestBodySourceEnum `form:"name=source"`
	Status CreateTransactionRequestBodyStatusEnum `form:"name=status"`
}

type CreateTransactionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
