// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum - Output only. Current connection state of the network.
type GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum string

const (
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumNetworkConnectionStateUnspecified GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "NETWORK_CONNECTION_STATE_UNSPECIFIED"
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumOnline                            GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "ONLINE"
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumConnected                         GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "CONNECTED"
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumPortal                            GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "PORTAL"
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumConnecting                        GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "CONNECTING"
	GoogleChromeManagementV1NetworkStatusReportConnectionStateEnumNotConnected                      GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum = "NOT_CONNECTED"
)

func (e *GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NETWORK_CONNECTION_STATE_UNSPECIFIED":
		fallthrough
	case "ONLINE":
		fallthrough
	case "CONNECTED":
		fallthrough
	case "PORTAL":
		fallthrough
	case "CONNECTING":
		fallthrough
	case "NOT_CONNECTED":
		*e = GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum: %s", s)
	}
}

// GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum - Output only. Network connection type.
type GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum string

const (
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumNetworkTypeUnspecified GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "NETWORK_TYPE_UNSPECIFIED"
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumCellular               GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "CELLULAR"
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumEthernet               GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "ETHERNET"
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumTether                 GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "TETHER"
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumVpn                    GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "VPN"
	GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnumWifi                   GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum = "WIFI"
)

func (e *GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NETWORK_TYPE_UNSPECIFIED":
		fallthrough
	case "CELLULAR":
		fallthrough
	case "ETHERNET":
		fallthrough
	case "TETHER":
		fallthrough
	case "VPN":
		fallthrough
	case "WIFI":
		*e = GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum: %s", s)
	}
}

// GoogleChromeManagementV1NetworkStatusReport - State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes
type GoogleChromeManagementV1NetworkStatusReport struct {
	// Output only. Current connection state of the network.
	ConnectionState *GoogleChromeManagementV1NetworkStatusReportConnectionStateEnum `json:"connectionState,omitempty"`
	// Output only. Network connection type.
	ConnectionType *GoogleChromeManagementV1NetworkStatusReportConnectionTypeEnum `json:"connectionType,omitempty"`
	// Output only. Whether the wifi encryption key is turned off.
	EncryptionOn *bool `json:"encryptionOn,omitempty"`
	// Output only. Gateway IP address.
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty"`
	// Output only. Network connection guid.
	GUID *string `json:"guid,omitempty"`
	// Output only. LAN IP address.
	LanIPAddress *string `json:"lanIpAddress,omitempty"`
	// Output only. Receiving bit rate measured in Megabits per second.
	ReceivingBitRateMbps *string `json:"receivingBitRateMbps,omitempty"`
	// Output only. Time at which the network state was reported.
	ReportTime *string `json:"reportTime,omitempty"`
	// Output only. Frequency the report is sampled.
	SampleFrequency *string `json:"sampleFrequency,omitempty"`
	// Output only. Signal strength for wireless networks measured in decibels.
	SignalStrengthDbm *int `json:"signalStrengthDbm,omitempty"`
	// Output only. Transmission bit rate measured in Megabits per second.
	TransmissionBitRateMbps *string `json:"transmissionBitRateMbps,omitempty"`
	// Output only. Transmission power measured in decibels.
	TransmissionPowerDbm *int `json:"transmissionPowerDbm,omitempty"`
	// Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.
	WifiLinkQuality *string `json:"wifiLinkQuality,omitempty"`
	// Output only. Wifi power management enabled
	WifiPowerManagementEnabled *bool `json:"wifiPowerManagementEnabled,omitempty"`
}
