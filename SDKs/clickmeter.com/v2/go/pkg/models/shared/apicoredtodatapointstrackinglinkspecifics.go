// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum string

const (
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumSimple                APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "Simple"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumRandomDestination     APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "RandomDestination"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumDestinationByLanguage APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "DestinationByLanguage"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumSpilloverDestination  APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "SpilloverDestination"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumDynamicURL            APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "DynamicUrl"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumBrowserDestination    APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "BrowserDestination"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumDestinationByNation   APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "DestinationByNation"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumUniqueDestination     APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "UniqueDestination"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumSequentialDestination APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "SequentialDestination"
	APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnumWeightedDestination   APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum = "WeightedDestination"
)

func (e *APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Simple":
		fallthrough
	case "RandomDestination":
		fallthrough
	case "DestinationByLanguage":
		fallthrough
	case "SpilloverDestination":
		fallthrough
	case "DynamicUrl":
		fallthrough
	case "BrowserDestination":
		fallthrough
	case "DestinationByNation":
		fallthrough
	case "UniqueDestination":
		fallthrough
	case "SequentialDestination":
		fallthrough
	case "WeightedDestination":
		*e = APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum: %s", s)
	}
}

type APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum string

const (
	APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnumPermanentRedirect APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum = "PermanentRedirect"
	APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnumTemporaryRedirect APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum = "TemporaryRedirect"
)

func (e *APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PermanentRedirect":
		fallthrough
	case "TemporaryRedirect":
		*e = APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum: %s", s)
	}
}

type APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum string

const (
	APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnumNone   APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum = "None"
	APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnumClean  APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum = "Clean"
	APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnumMyself APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum = "Myself"
)

func (e *APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Clean":
		fallthrough
	case "Myself":
		*e = APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum: %s", s)
	}
}

type APICoreDtoDatapointsTrackingLinkSpecifics struct {
	AppendQuery            *bool                                                         `json:"appendQuery,omitempty"`
	BrowserDestinationItem *APICoreDtoDatapointsBrowserBaseDestinationItem               `json:"browserDestinationItem,omitempty"`
	DestinationMode        *APICoreDtoDatapointsTrackingLinkSpecificsDestinationModeEnum `json:"destinationMode,omitempty"`
	DomainID               *int                                                          `json:"domainId,omitempty"`
	EncodeURL              *bool                                                         `json:"encodeUrl,omitempty"`
	ExpirationClicks       *int64                                                        `json:"expirationClicks,omitempty"`
	//  (A date in "YmdHis" format)
	ExpirationDate             *string                                                     `json:"expirationDate,omitempty"`
	FirstURL                   *string                                                     `json:"firstUrl,omitempty"`
	GoDomainID                 *int                                                        `json:"goDomainId,omitempty"`
	HideURL                    *bool                                                       `json:"hideUrl,omitempty"`
	HideURLTitle               *string                                                     `json:"hideUrlTitle,omitempty"`
	IsABTest                   *bool                                                       `json:"isABTest,omitempty"`
	Password                   *string                                                     `json:"password,omitempty"`
	PauseAfterClicksExpiration *bool                                                       `json:"pauseAfterClicksExpiration,omitempty"`
	PauseAfterDateExpiration   *bool                                                       `json:"pauseAfterDateExpiration,omitempty"`
	RandomDestinationItems     []APICoreDtoDatapointsMultipleDestinationItem               `json:"randomDestinationItems,omitempty"`
	RedirectType               *APICoreDtoDatapointsTrackingLinkSpecificsRedirectTypeEnum  `json:"redirectType,omitempty"`
	ReferrerClean              *APICoreDtoDatapointsTrackingLinkSpecificsReferrerCleanEnum `json:"referrerClean,omitempty"`
	Scripts                    []APICoreDtoDatapointsDatapointRetargetingInfo              `json:"scripts,omitempty"`
	SequentialDestinationItems []APICoreDtoDatapointsMultipleDestinationItem               `json:"sequentialDestinationItems,omitempty"`
	SpilloverDestinationItems  []APICoreDtoDatapointsMultipleDestinationItem               `json:"spilloverDestinationItems,omitempty"`
	UniqueDestinationItem      *APICoreDtoDatapointsUniqueDestinationItem                  `json:"uniqueDestinationItem,omitempty"`
	URL                        *string                                                     `json:"url,omitempty"`
	URLAfterClicksExpiration   *string                                                     `json:"urlAfterClicksExpiration,omitempty"`
	URLAfterDateExpiration     *string                                                     `json:"urlAfterDateExpiration,omitempty"`
	UrlsByLanguage             []APICoreDtoDatapointsURLByLanguageItem                     `json:"urlsByLanguage,omitempty"`
	UrlsByNation               []APICoreDtoDatapointsURLByNationItem                       `json:"urlsByNation,omitempty"`
	WeightedDestinationItems   []APICoreDtoDatapointsWeightedDestinationItem               `json:"weightedDestinationItems,omitempty"`
}
