/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Transcode - Represents information about the transcoded audio or video file.
 */
public class Transcode {
    /**
     * The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioBitRateKbps")
    public String audioBitRateKbps;

    public Transcode withAudioBitRateKbps(String audioBitRateKbps) {
        this.audioBitRateKbps = audioBitRateKbps;
        return this;
    }
    
    /**
     * The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioSampleRateHz")
    public String audioSampleRateHz;

    public Transcode withAudioSampleRateHz(String audioSampleRateHz) {
        this.audioSampleRateHz = audioSampleRateHz;
        return this;
    }
    
    /**
     * The transcoding bit rate of the transcoded video, in kilobits per second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitRateKbps")
    public String bitRateKbps;

    public Transcode withBitRateKbps(String bitRateKbps) {
        this.bitRateKbps = bitRateKbps;
        return this;
    }
    
    /**
     * Dimensions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    public Dimensions dimensions;

    public Transcode withDimensions(Dimensions dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * The size of the transcoded file, in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSizeBytes")
    public String fileSizeBytes;

    public Transcode withFileSizeBytes(String fileSizeBytes) {
        this.fileSizeBytes = fileSizeBytes;
        return this;
    }
    
    /**
     * The frame rate of the transcoded video, in frames per second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameRate")
    public Float frameRate;

    public Transcode withFrameRate(Float frameRate) {
        this.frameRate = frameRate;
        return this;
    }
    
    /**
     * The MIME type of the transcoded file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;

    public Transcode withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * The name of the transcoded file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Transcode withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Indicates if the transcoding was successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoded")
    public Boolean transcoded;

    public Transcode withTranscoded(Boolean transcoded) {
        this.transcoded = transcoded;
        return this;
    }
    
    public Transcode(){}
}
