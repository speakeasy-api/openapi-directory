/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Parties {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Parties
   *
   * @remarks
   * Get Parties by Account ID
   */
  getAccountsAccountIdParties(
    req: operations.GetAccountsAccountIdPartiesRequest,
    security: operations.GetAccountsAccountIdPartiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsAccountIdPartiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsAccountIdPartiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/parties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountsAccountIdPartiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsAccountIdPartiesResponse =
        new operations.GetAccountsAccountIdPartiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obReadParty3 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty3
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obReadParty3 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty3
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Party
   *
   * @remarks
   * Get Party by Account ID
   */
  getAccountsAccountIdParty(
    req: operations.GetAccountsAccountIdPartyRequest,
    security: operations.GetAccountsAccountIdPartySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsAccountIdPartyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsAccountIdPartyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/party",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountsAccountIdPartySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsAccountIdPartyResponse =
        new operations.GetAccountsAccountIdPartyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obReadParty2 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty2
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obReadParty2 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty2
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Party
   *
   * @remarks
   * Get Party
   */
  getParty(
    req: operations.GetPartyRequest,
    security: operations.GetPartySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPartyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPartyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/party";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPartySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPartyResponse = new operations.GetPartyResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obReadParty2 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty2
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obReadParty2 = utils.objectToClass(
              httpRes?.data,
              shared.OBReadParty2
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
