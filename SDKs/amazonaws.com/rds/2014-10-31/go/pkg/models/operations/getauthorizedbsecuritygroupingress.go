// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAuthorizeDBSecurityGroupIngressActionEnum
type GETAuthorizeDBSecurityGroupIngressActionEnum string

const (
	GETAuthorizeDBSecurityGroupIngressActionEnumAuthorizeDbSecurityGroupIngress GETAuthorizeDBSecurityGroupIngressActionEnum = "AuthorizeDBSecurityGroupIngress"
)

func (e GETAuthorizeDBSecurityGroupIngressActionEnum) ToPointer() *GETAuthorizeDBSecurityGroupIngressActionEnum {
	return &e
}

func (e *GETAuthorizeDBSecurityGroupIngressActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AuthorizeDBSecurityGroupIngress":
		*e = GETAuthorizeDBSecurityGroupIngressActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeDBSecurityGroupIngressActionEnum: %v", v)
	}
}

// GETAuthorizeDBSecurityGroupIngressVersionEnum
type GETAuthorizeDBSecurityGroupIngressVersionEnum string

const (
	GETAuthorizeDBSecurityGroupIngressVersionEnumTwoThousandAndFourteen1031 GETAuthorizeDBSecurityGroupIngressVersionEnum = "2014-10-31"
)

func (e GETAuthorizeDBSecurityGroupIngressVersionEnum) ToPointer() *GETAuthorizeDBSecurityGroupIngressVersionEnum {
	return &e
}

func (e *GETAuthorizeDBSecurityGroupIngressVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2014-10-31":
		*e = GETAuthorizeDBSecurityGroupIngressVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeDBSecurityGroupIngressVersionEnum: %v", v)
	}
}

type GETAuthorizeDBSecurityGroupIngressRequest struct {
	Action GETAuthorizeDBSecurityGroupIngressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IP range to authorize.
	Cidrip *string `queryParam:"style=form,explode=true,name=CIDRIP"`
	// The name of the DB security group to add authorization to.
	DBSecurityGroupName string `queryParam:"style=form,explode=true,name=DBSecurityGroupName"`
	// Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
	Ec2SecurityGroupID *string `queryParam:"style=form,explode=true,name=EC2SecurityGroupId"`
	// Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
	Ec2SecurityGroupName *string `queryParam:"style=form,explode=true,name=EC2SecurityGroupName"`
	// Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
	Ec2SecurityGroupOwnerID *string                                       `queryParam:"style=form,explode=true,name=EC2SecurityGroupOwnerId"`
	Version                 GETAuthorizeDBSecurityGroupIngressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm           *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAuthorizeDBSecurityGroupIngressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
