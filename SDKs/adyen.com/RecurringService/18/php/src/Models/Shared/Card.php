<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Card
{
	#[\JMS\Serializer\Annotation\SerializedName('billingAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $billingAddress = null;
    
    /**
     * The [card verification code](https://docs.adyen.com/developers/payment-glossary#cardsecuritycodecvccvvcid) (1-20 characters). Depending on the card brand, it is known also as:
     * 
     * * CVV2/CVC2 – length: 3 digits
     * * CID – length: 4 digits
     * > If you are using [Client-Side Encryption](https://docs.adyen.com/developers/ecommerce-integration), the CVC code is present in the encrypted data. You must never post the card details to the server.
     * > This field must be always present in a [one-click payment request](https://docs.adyen.com/developers/features/recurring-payments).
     * > When this value is returned in a response, it is always empty because it is not stored.
     * 
     * @var ?string $cvc
     */
	#[\JMS\Serializer\Annotation\SerializedName('cvc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cvc = null;
    
    /**
     * The card expiry month.
     * 
     * Format: 2 digits, zero-padded for single digits. For example:
     * * 03 = March
     * * 11 = November
     * 
     * @var string $expiryMonth
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiryMonth')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $expiryMonth;
    
    /**
     * The card expiry year.
     * 
     * Format: 4 digits. For example: 2020
     * 
     * @var string $expiryYear
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiryYear')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $expiryYear;
    
    /**
     * The name of the cardholder, as printed on the card.
     * 
     * @var string $holderName
     */
	#[\JMS\Serializer\Annotation\SerializedName('holderName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $holderName;
    
    /**
     * The issue number of the card (for some UK debit cards only).
     * 
     * @var ?string $issueNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('issueNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $issueNumber = null;
    
    /**
     * The card number (4-19 characters). Do not use any separators.
     * 
     * When this value is returned in a response, only the last 4 digits of the card number are returned.
     * 
     * @var string $number
     */
	#[\JMS\Serializer\Annotation\SerializedName('number')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $number;
    
    /**
     * The month component of the start date (for some UK debit cards only).
     * 
     * @var ?string $startMonth
     */
	#[\JMS\Serializer\Annotation\SerializedName('startMonth')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $startMonth = null;
    
    /**
     * The year component of the start date (for some UK debit cards only).
     * 
     * @var ?string $startYear
     */
	#[\JMS\Serializer\Annotation\SerializedName('startYear')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $startYear = null;
    
	public function __construct()
	{
		$this->billingAddress = null;
		$this->cvc = null;
		$this->expiryMonth = "";
		$this->expiryYear = "";
		$this->holderName = "";
		$this->issueNumber = null;
		$this->number = "";
		$this->startMonth = null;
		$this->startYear = null;
	}
}
