/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Login users and verify token. For login we make use of [JSON web tokens](https://jwt.io/).
 *
 * @remarks
 *
 */
export class Login {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Authenticate user
   *
   * @remarks
   * The received token should be used for authenticated requests by including in the Authorization header as `Authorization: JWT <token>`.
   *
   */
  postAuthObtain(
    req: shared.Login,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAuthObtainResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Login(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/auth/obtain/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAuthObtainResponse =
        new operations.PostAuthObtainResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthObtain200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthObtain200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthObtain400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthObtain400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthObtain500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthObtain500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Replace token with a new one
   */
  postAuthRefresh(
    req: operations.PostAuthRefreshRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAuthRefreshResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAuthRefreshRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/auth/refresh/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAuthRefreshResponse =
        new operations.PostAuthRefreshResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRefresh200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRefresh200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRefresh400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRefresh400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRefresh500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRefresh500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Revoke a token
   */
  postAuthRevoke(
    req: operations.PostAuthRevokeRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAuthRevokeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAuthRevokeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/auth/revoke/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAuthRevokeResponse =
        new operations.PostAuthRevokeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRevoke200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRevoke200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRevoke400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRevoke400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthRevoke500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthRevoke500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verify a token
   *
   * @remarks
   * Check for the validity of a user token.
   *
   */
  postAuthVerify(
    req: operations.PostAuthVerifyRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAuthVerifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAuthVerifyRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/auth/verify/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAuthVerifyResponse =
        new operations.PostAuthVerifyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthVerify200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthVerify200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthVerify400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthVerify400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postAuthVerify500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostAuthVerify500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enterprise user authentication
   *
   * @remarks
   * The received token should be used for authenticated requests by including in the Authorization header as `Authorization: JWT <token>`.
   *
   */
  postEnterpriseAuthObtain(
    req: shared.Login,
    config?: AxiosRequestConfig
  ): Promise<operations.PostEnterpriseAuthObtainResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.Login(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/auth/obtain/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostEnterpriseAuthObtainResponse =
        new operations.PostEnterpriseAuthObtainResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthObtain200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthObtain200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthObtain400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthObtain400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthObtain500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthObtain500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enterprise token refresh
   */
  postEnterpriseAuthRefresh(
    req: operations.PostEnterpriseAuthRefreshRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostEnterpriseAuthRefreshResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostEnterpriseAuthRefreshRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/enterprise/auth/refresh/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostEnterpriseAuthRefreshResponse =
        new operations.PostEnterpriseAuthRefreshResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRefresh200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRefresh200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRefresh400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRefresh400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRefresh500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRefresh500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enterprise token revokation
   */
  postEnterpriseAuthRevoke(
    req: operations.PostEnterpriseAuthRevokeRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostEnterpriseAuthRevokeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostEnterpriseAuthRevokeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/auth/revoke/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostEnterpriseAuthRevokeResponse =
        new operations.PostEnterpriseAuthRevokeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRevoke200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRevoke200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRevoke400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRevoke400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthRevoke500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthRevoke500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enterprise token verification
   *
   * @remarks
   * Check for the validity of a user token.
   *
   */
  postEnterpriseAuthVerify(
    req: operations.PostEnterpriseAuthVerifyRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostEnterpriseAuthVerifyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostEnterpriseAuthVerifyRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/enterprise/auth/verify/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostEnterpriseAuthVerifyResponse =
        new operations.PostEnterpriseAuthVerifyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthVerify200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthVerify200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthVerify400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthVerify400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postEnterpriseAuthVerify500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostEnterpriseAuthVerify500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
