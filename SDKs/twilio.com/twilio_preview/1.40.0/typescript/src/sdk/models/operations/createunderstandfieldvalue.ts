/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateUnderstandFieldValueServerList = [
  "https://preview.twilio.com",
] as const;

export class CreateUnderstandFieldValueSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateUnderstandFieldValueCreateUnderstandFieldValueRequest extends SpeakeasyBase {
  /**
   * An ISO language-country string of the value.
   */
  @SpeakeasyMetadata({ data: "form, name=Language" })
  language: string;

  /**
   * A value that indicates this field value is a synonym of. Empty if the value is not a synonym.
   */
  @SpeakeasyMetadata({ data: "form, name=SynonymOf" })
  synonymOf?: string;

  /**
   * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=Value" })
  value: string;
}

export class CreateUnderstandFieldValueRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AssistantSid",
  })
  assistantSid: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FieldTypeSid",
  })
  fieldTypeSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateUnderstandFieldValueCreateUnderstandFieldValueRequest;
}

export class CreateUnderstandFieldValueResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  previewUnderstandAssistantFieldTypeFieldValue?: shared.PreviewUnderstandAssistantFieldTypeFieldValue;
}
