"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotoeventparameters as shared_enterprisecrmeventbusprotoeventparameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoTriggerCriteria:
    
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Required. Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly."""  
    parameters: Optional[shared_enterprisecrmeventbusprotoeventparameters.EnterpriseCrmEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    trigger_criteria_task_implementation_class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerCriteriaTaskImplementationClassName'), 'exclude': lambda f: f is None }})
    r"""Optional. Implementation class name. The class should implement the “TypedTask” interface."""  
    