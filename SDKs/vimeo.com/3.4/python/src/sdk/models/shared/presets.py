"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import picture as shared_picture
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsMetadataConnectionsVideos:
    r"""Information about the videos in this preset."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsMetadataConnections:
    r"""A list of resource URIs related to the album."""
    
    videos: PresetsMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos in this preset."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsMetadata:
    r"""Metadata about the album."""
    
    connections: PresetsMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the album."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsSettingsButtons:
    
    embed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""Whether the preset includes Embed button settings."""  
    hd: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hd') }})
    r"""Whether the preset includes HD button settings."""  
    like: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('like') }})
    r"""Whether the preset includes Like button settings."""  
    share: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share') }})
    r"""Whether the present includes Share button settings."""  
    vote: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vote') }})
    r"""Whether the preset includes Vote button settings."""  
    watchlater: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Whether the preset includes Watch Later button settings."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsSettingsLogos:
    
    custom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom') }})
    r"""Whether the preset includes custom logo settings."""  
    sticky_custom: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sticky_custom') }})
    r"""Whether the present includes sticky custom logo settings."""  
    vimeo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vimeo') }})
    r"""Whether the preset includes Vimeo logo settings."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsSettingsOutroLink:
    r"""The outro link settings. Present only if the type is `link`."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the outro link."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL of the outro link."""  
    
class PresetsSettingsOutroTypeEnum(str, Enum):
    r"""The preset outro type:"""
    LINK = 'link'
    NO_IDEA = 'no idea'
    TEXT = 'text'
    UPLOADED_CLIPS = 'uploaded_clips'
    UPLOADED_VIDEOS = 'uploaded_videos'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsSettingsOutro:
    
    type: PresetsSettingsOutroTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The preset outro type:"""  
    clips: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clips'), 'exclude': lambda f: f is None }})
    r"""A comma-separated list of video URIs. Present only if the type is `uploaded_clips`."""  
    link: Optional[PresetsSettingsOutroLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The outro link settings. Present only if the type is `link`."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The outro text. Present only if the type is `text`."""  
    videos: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})
    r"""A comma-separated list of video URIs. Present only if type is `no idea`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsSettings:
    r"""The contents of the presets group."""
    
    buttons: PresetsSettingsButtons = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buttons') }})  
    logos: PresetsSettingsLogos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logos') }})  
    outro: PresetsSettingsOutro = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outro') }})  
    
class PresetsUserAccountEnum(str, Enum):
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """
    BASIC = 'basic'
    BUSINESS = 'business'
    LIVE_BUSINESS = 'live_business'
    LIVE_PREMIUM = 'live_premium'
    LIVE_PRO = 'live_pro'
    PLUS = 'plus'
    PRO = 'pro'
    PRO_UNLIMITED = 'pro_unlimited'
    PRODUCER = 'producer'

class PresetsUserContentFilterEnum(str, Enum):
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsAlbums:
    r"""Information about the albums created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of albums on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsAppearances:
    r"""Information about the appearances of this user in other videos."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of appearances on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsBlock:
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of blocked users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsCategories:
    r"""Information about this user's followed categories."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of categories on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsChannels:
    r"""Information about this user's subscribed channels."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsFeed:
    r"""Information about this user's feed."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsFolders:
    r"""Information about this user's folders."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of folders on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsFollowers:
    r"""Information about the user's followers."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of followers on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsFollowing:
    r"""Information about the users that the current user is following."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsGroups:
    r"""Information about the groups created by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of groups on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsLikes:
    r"""Information about the videos that this user has liked."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of likes on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsModeratedChannels:
    r"""Information about the channels that this user moderates."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsPictures:
    r"""Information about this user's portraits."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of pictures on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsPortfolios:
    r"""Information about this user's portfolios."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of portfolios on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsRecommendedChannels:
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of channels on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsRecommendedUsers:
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of users on this connection. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsShared:
    r"""Information about the videos that have been shared with this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsVideos:
    r"""Information about the videos uploaded by this user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsWatchedVideos:
    r"""Information about the videos that this user has watched."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnectionsWatchlater:
    r"""Information about the videos that this user wants to watch later."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataConnections:
    r"""The list of resource URIs related to the user."""
    
    albums: PresetsUserMetadataConnectionsAlbums = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('albums') }})
    r"""Information about the albums created by this user."""  
    appearances: PresetsUserMetadataConnectionsAppearances = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appearances') }})
    r"""Information about the appearances of this user in other videos."""  
    block: PresetsUserMetadataConnectionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope."""  
    categories: PresetsUserMetadataConnectionsCategories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})
    r"""Information about this user's followed categories."""  
    channels: PresetsUserMetadataConnectionsChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels') }})
    r"""Information about this user's subscribed channels."""  
    feed: PresetsUserMetadataConnectionsFeed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feed') }})
    r"""Information about this user's feed."""  
    folders: PresetsUserMetadataConnectionsFolders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folders') }})
    r"""Information about this user's folders."""  
    followers: PresetsUserMetadataConnectionsFollowers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})
    r"""Information about the user's followers."""  
    following: PresetsUserMetadataConnectionsFollowing = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})
    r"""Information about the users that the current user is following."""  
    groups: PresetsUserMetadataConnectionsGroups = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""Information about the groups created by this user."""  
    likes: PresetsUserMetadataConnectionsLikes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('likes') }})
    r"""Information about the videos that this user has liked."""  
    moderated_channels: PresetsUserMetadataConnectionsModeratedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderated_channels') }})
    r"""Information about the channels that this user moderates."""  
    pictures: PresetsUserMetadataConnectionsPictures = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""Information about this user's portraits."""  
    portfolios: PresetsUserMetadataConnectionsPortfolios = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})
    r"""Information about this user's portfolios."""  
    recommended_channels: PresetsUserMetadataConnectionsRecommendedChannels = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_channels') }})
    r"""A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope."""  
    recommended_users: PresetsUserMetadataConnectionsRecommendedUsers = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended_users') }})
    r"""A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope."""  
    shared: PresetsUserMetadataConnectionsShared = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shared') }})
    r"""Information about the videos that have been shared with this user."""  
    videos: PresetsUserMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos uploaded by this user."""  
    watched_videos: PresetsUserMetadataConnectionsWatchedVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watched_videos') }})
    r"""Information about the videos that this user has watched."""  
    watchlater: PresetsUserMetadataConnectionsWatchlater = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchlater') }})
    r"""Information about the videos that this user wants to watch later."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataInteractionsAddPrivacyUser:
    
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataInteractionsBlock:
    r"""Information related to the block status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is blocking the current user."""  
    added_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_time') }})
    r"""The time in ISO 8601 format when the block occurred, or the null value if no block exists."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to block or unblock the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataInteractionsFollow:
    r"""Information related to the followed status of this user."""
    
    added: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added') }})
    r"""Whether a user is following the current user."""  
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The URI to follow the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataInteractionsReport:
    r"""Information regarding where and how to report a user."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    reason: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason') }})
    r"""List of valid reasons for reporting a video."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadataInteractions:
    
    block: PresetsUserMetadataInteractionsBlock = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block') }})
    r"""Information related to the block status of this user."""  
    follow: PresetsUserMetadataInteractionsFollow = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('follow') }})
    r"""Information related to the followed status of this user."""  
    report: PresetsUserMetadataInteractionsReport = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report') }})
    r"""Information regarding where and how to report a user."""  
    add_privacy_user: Optional[PresetsUserMetadataInteractionsAddPrivacyUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_privacy_user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserMetadata:
    r"""The user's metadata."""
    
    connections: PresetsUserMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""The list of resource URIs related to the user."""  
    interactions: PresetsUserMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})  
    
class PresetsUserPreferencesVideosPrivacyCommentsEnum(str, Enum):
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    NOBODY = 'nobody'

class PresetsUserPreferencesVideosPrivacyEmbedEnum(str, Enum):
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """
    PRIVATE = 'private'
    PUBLIC = 'public'
    WHITELIST = 'whitelist'

class PresetsUserPreferencesVideosPrivacyViewEnum(str, Enum):
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """
    ANYBODY = 'anybody'
    CONTACTS = 'contacts'
    DISABLE = 'disable'
    NOBODY = 'nobody'
    PASSWORD = 'password'
    UNLISTED = 'unlisted'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserPreferencesVideosPrivacy:
    
    add: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add'), 'exclude': lambda f: f is None }})
    r"""Whether other users can add the user's videos."""  
    comments: Optional[PresetsUserPreferencesVideosPrivacyCommentsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for comments:
    
    Option descriptions:
     * `anybody` - Anyone can comment on the user's videos.
     * `contacts` - Only contacts can comment on the user's videos.
     * `nobody` - No one can comment on the user's videos.
    """  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether other users can download the user's videos."""  
    embed: Optional[PresetsUserPreferencesVideosPrivacyEmbedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for embeds:
    
    Option descriptions:
     * `private` - Only the user can embed their own videos.
     * `public` - Anyone can embed the user's videos.
     * `whitelist` - Only those on the whitelist can embed the user's videos.
    """  
    view: Optional[PresetsUserPreferencesVideosPrivacyViewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view'), 'exclude': lambda f: f is None }})
    r"""The user's privacy preference for views:
    
    Option descriptions:
     * `anybody` - Anyone can view the user's videos.
     * `contacts` - Only contacts can view the user's videos.
     * `disable` - Views are disabled for the user's videos.
     * `nobody` - No one except the user can view the user's videos.
     * `password` - Only those with the password can view the user's videos.
     * `unlisted` - Anybody can view the user's videos if they have a link.
     * `users` - Only other Vimeo members can view the user's videos.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserPreferencesVideos:
    
    privacy: Optional[PresetsUserPreferencesVideosPrivacy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserPreferences:
    
    videos: Optional[PresetsUserPreferencesVideos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserUploadQuotaLifetime:
    r"""Information about the user's lifetime upload usage."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your lifetime maximum."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload across the lifetime of your account."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your lifetime limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserUploadQuotaPeriodic:
    r"""Information about the user's usage for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota for the current period."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The total number of bytes that you can upload per period."""  
    reset_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reset_date') }})
    r"""The time in ISO 8601 format when your upload quota resets."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota in the current period."""  
    
class PresetsUserUploadQuotaSpaceShowingEnum(str, Enum):
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""
    LIFETIME = 'lifetime'
    PERIODIC = 'periodic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserUploadQuotaSpace:
    r"""Information about the user's upload space remaining for the current period."""
    
    free: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free') }})
    r"""The number of bytes remaining in your upload quota."""  
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The maximum number of bytes allotted to your upload quota."""  
    showing: PresetsUserUploadQuotaSpaceShowingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showing') }})
    r"""Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota."""  
    used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used') }})
    r"""The number of bytes that you've already uploaded against your quota."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserUploadQuota:
    r"""Appears only when the user has upload access and is looking at their own user record."""
    
    lifetime: PresetsUserUploadQuotaLifetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifetime') }})
    r"""Information about the user's lifetime upload usage."""  
    periodic: PresetsUserUploadQuotaPeriodic = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodic') }})
    r"""Information about the user's usage for the current period."""  
    space: PresetsUserUploadQuotaSpace = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})
    r"""Information about the user's upload space remaining for the current period."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUserWebsites:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The website's description."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL of the website."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the website."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PresetsUser:
    r"""The owner of the preset."""
    
    account: PresetsUserAccountEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})
    r"""The user's account type:
    
    Option descriptions:
     * `basic` - The user has a Vimeo Basic subscription.
     * `business` - The user has a Vimeo Business subscription.
     * `live_business` - The user has a Vimeo Business Live subscription.
     * `live_premium` - The user has a Vimeo Premium subscription.
     * `live_pro` - The user has a Vimeo PRO Live subscription.
     * `plus` - The user has a Vimeo Plus subscription.
     * `pro` - The user has a Vimeo Pro subscription.
     * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
     * `producer` - The user has a Vimeo Producer subscription.
    """  
    bio: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bio') }})
    r"""The user's bio."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when the user account was created."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The absolute URL of this user's profile page."""  
    location: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The user's location."""  
    metadata: PresetsUserMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The user's metadata."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The user's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active portrait of this user."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The user's resource key string."""  
    upload_quota: PresetsUserUploadQuota = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_quota') }})
    r"""Appears only when the user has upload access and is looking at their own user record."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The user's canonical relative URI."""  
    websites: list[PresetsUserWebsites] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websites') }})
    r"""The user's websites."""  
    content_filter: Optional[PresetsUserContentFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_filter'), 'exclude': lambda f: f is None }})
    r"""The user's content filters:
    
    Option descriptions:
     * `drugs` - Drugs or alcohol use.
     * `language` - Profanity or sexually suggestive content.
     * `nudity` - Nudity.
     * `safe` - Suitable for all audiences.
     * `unrated` - No rating.
     * `violence` - Violent or graphic content.
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The user's email address. This data requires a bearer token with the `email` scope."""  
    preferences: Optional[PresetsUserPreferences] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferences'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Presets:
    r"""The embed preset was returned."""
    
    metadata: PresetsMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Metadata about the album."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The display name of the presets group."""  
    settings: PresetsSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settings') }})
    r"""The contents of the presets group."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The canonical relative URI of the presets object."""  
    user: PresetsUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The owner of the preset."""  
    