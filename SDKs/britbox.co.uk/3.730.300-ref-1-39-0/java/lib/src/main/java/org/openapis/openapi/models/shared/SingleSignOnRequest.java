/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SingleSignOnRequest - A single-sign-on request.
 */
public class SingleSignOnRequest {
    /**
     * If you specify a cookie type then a content filter cookie will be returned
     * along with the token(s). This is only intended for web based clients which
     * need to pass the cookies to a server to render a page based on the user's
     * content filters e.g subscription code.
     * 
     * If type `Session` the cookie will be session based.
     * If type `Persistent` the cookie will have a medium term lifespan.
     * If undefined no cookies will be set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookieType")
    public SingleSignOnRequestCookieTypeEnum cookieType;
    public SingleSignOnRequest withCookieType(SingleSignOnRequestCookieTypeEnum cookieType) {
        this.cookieType = cookieType;
        return this;
    }
    
    /**
     * When a user attempts to sign in using single-sign-on, we may find an account created
     * previously through the manual sign up flow with the same email. If this is the
     * case then an option to link the two accounts can be made available.
     * 
     * If this flag is set to true then accounts will be linked automatically.
     * 
     * If this flag is not set or set to false and an existing account is found 
     * then an http 401 with subcode `6001` will be returned. Client apps can then present the
     * option to link the accounts. If the user decides to accept, then the same call
     * can be repeated with this flag set to true.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkAccounts")
    public Boolean linkAccounts;
    public SingleSignOnRequest withLinkAccounts(Boolean linkAccounts) {
        this.linkAccounts = linkAccounts;
        return this;
    }
    
    /**
     * The third party single-sign-on provider.
     */
    @JsonProperty("provider")
    public SingleSignOnRequestProviderEnum provider;
    public SingleSignOnRequest withProvider(SingleSignOnRequestProviderEnum provider) {
        this.provider = provider;
        return this;
    }
    
    /**
     * The scope(s) of the tokens required.
     * For each scope listed an Account and Profile token of that scope will be returned.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public SingleSignOnRequestScopesEnum[] scopes;
    public SingleSignOnRequest withScopes(SingleSignOnRequestScopesEnum[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * A token from the third party single-sign-on provider e.g. an identity token from Facebook.
     */
    @JsonProperty("token")
    public String token;
    public SingleSignOnRequest withToken(String token) {
        this.token = token;
        return this;
    }
    
}
