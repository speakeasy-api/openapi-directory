/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for creating, deleting or updating users.
 */
export class Users {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete user
   *
   * @remarks
   * Endpoint to delete a user.
   */
  deleteUser(
    req: operations.DeleteUserRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUserRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUserResponse =
        new operations.DeleteUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser202ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser202ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteUser500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DeleteUser500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Link web activity to user
   *
   * @remarks
   * ðŸ’¡ You don't need to use this endpoint if you use our JavaScript snippet in your application.
   *
   * This endpoint is used to link web activity to a user in your application. This will help you discover which channels and campaigns work best.
   *
   * When our JavaScript snippet is embedded on your website, blog or landing pages, a cookie named "__journey" will be set.
   *
   * This will only work if your website and application are under the same top level domain.
   *
   * Website, blog or landing pages
   * * www.my-domain.tld
   * * blog.my-domain.tld
   * * landing-page.my-domain.tld
   *
   * Application
   * * app.my-domain.tld
   *
   * The cookie on my-domain.tld will also be send to your app domain.
   *
   * You should call this endpoint after the user succesfully logged in (so that you know the user's ID). Use the value of the cookie as device ID.
   */
  link(
    req: operations.LinkRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.LinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LinkRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/link";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LinkResponse = new operations.LinkResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.link500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Link500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update user
   *
   * @remarks
   * Endpoint to create or update a user.
   */
  upsertUser(
    req: operations.UpsertUserRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.UpsertUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpsertUserRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/users/upsert";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpsertUserResponse =
        new operations.UpsertUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upsertUser500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpsertUser500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
