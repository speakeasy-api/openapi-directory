/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
 *
 * @remarks
 * \* `pull` - can pull, but not push to or administer this repository.
 * \* `push` - can pull and push, but not administer this repository.
 * \* `admin` - can pull, push and administer this repository.
 * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
 * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
 */
export enum ReposAddCollaboratorRequestBodyPermissionEnum {
  Pull = "pull",
  Push = "push",
  Admin = "admin",
  Maintain = "maintain",
  Triage = "triage",
}

export class ReposAddCollaboratorRequestBody extends SpeakeasyBase {
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
   *
   * @remarks
   * \* `pull` - can pull, but not push to or administer this repository.
   * \* `push` - can pull and push, but not administer this repository.
   * \* `admin` - can pull, push and administer this repository.
   * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
   * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permission" })
  permission?: ReposAddCollaboratorRequestBodyPermissionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "permissions" })
  permissions?: string;
}

export class ReposAddCollaboratorRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ReposAddCollaboratorRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=username",
  })
  username: string;
}

export class ReposAddCollaboratorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response when a new invitation is created
   */
  @SpeakeasyMetadata()
  repositoryInvitation?: shared.RepositoryInvitation;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
