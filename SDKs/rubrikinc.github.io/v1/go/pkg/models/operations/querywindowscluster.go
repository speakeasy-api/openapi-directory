// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// QueryWindowsClusterSnappableStatusEnum - Determines whether Windows clusters are fetched with additional privilege checks.
type QueryWindowsClusterSnappableStatusEnum string

const (
	QueryWindowsClusterSnappableStatusEnumProtectable QueryWindowsClusterSnappableStatusEnum = "Protectable"
)

func (e QueryWindowsClusterSnappableStatusEnum) ToPointer() *QueryWindowsClusterSnappableStatusEnum {
	return &e
}

func (e *QueryWindowsClusterSnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = QueryWindowsClusterSnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryWindowsClusterSnappableStatusEnum: %v", v)
	}
}

type QueryWindowsClusterRequest struct {
	// Filter by is_agentless flag.
	IsAgentless *bool `queryParam:"style=form,explode=true,name=is_agentless"`
	// Filter by primary_cluster_id. Use **local** for the local cluster.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Determines whether Windows clusters are fetched with additional privilege checks.
	SnappableStatus *QueryWindowsClusterSnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
}

type QueryWindowsClusterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Returned if the query was successful.
	WindowsClusterSummaryListResponse *shared.WindowsClusterSummaryListResponse
}
