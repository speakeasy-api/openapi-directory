// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type OfferAvailabilityEnum string

const (
	OfferAvailabilityEnumAvailable  OfferAvailabilityEnum = "Available"
	OfferAvailabilityEnumComingSoon OfferAvailabilityEnum = "ComingSoon"
)

func (e OfferAvailabilityEnum) ToPointer() *OfferAvailabilityEnum {
	return &e
}

func (e *OfferAvailabilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Available":
		fallthrough
	case "ComingSoon":
		*e = OfferAvailabilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfferAvailabilityEnum: %v", v)
	}
}

type OfferDeliveryTypeEnum string

const (
	OfferDeliveryTypeEnumStream              OfferDeliveryTypeEnum = "Stream"
	OfferDeliveryTypeEnumDownload            OfferDeliveryTypeEnum = "Download"
	OfferDeliveryTypeEnumStreamOrDownload    OfferDeliveryTypeEnum = "StreamOrDownload"
	OfferDeliveryTypeEnumProgressiveDownload OfferDeliveryTypeEnum = "ProgressiveDownload"
	OfferDeliveryTypeEnumNone                OfferDeliveryTypeEnum = "None"
)

func (e OfferDeliveryTypeEnum) ToPointer() *OfferDeliveryTypeEnum {
	return &e
}

func (e *OfferDeliveryTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Stream":
		fallthrough
	case "Download":
		fallthrough
	case "StreamOrDownload":
		fallthrough
	case "ProgressiveDownload":
		fallthrough
	case "None":
		*e = OfferDeliveryTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfferDeliveryTypeEnum: %v", v)
	}
}

type OfferOwnershipEnum string

const (
	OfferOwnershipEnumSubscription OfferOwnershipEnum = "Subscription"
	OfferOwnershipEnumFree         OfferOwnershipEnum = "Free"
	OfferOwnershipEnumRent         OfferOwnershipEnum = "Rent"
	OfferOwnershipEnumOwn          OfferOwnershipEnum = "Own"
	OfferOwnershipEnumNone         OfferOwnershipEnum = "None"
)

func (e OfferOwnershipEnum) ToPointer() *OfferOwnershipEnum {
	return &e
}

func (e *OfferOwnershipEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Subscription":
		fallthrough
	case "Free":
		fallthrough
	case "Rent":
		fallthrough
	case "Own":
		fallthrough
	case "None":
		*e = OfferOwnershipEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfferOwnershipEnum: %v", v)
	}
}

type OfferResolutionEnum string

const (
	OfferResolutionEnumSd       OfferResolutionEnum = "SD"
	OfferResolutionEnumHd720    OfferResolutionEnum = "HD-720"
	OfferResolutionEnumHd1080   OfferResolutionEnum = "HD-1080"
	OfferResolutionEnumHd4K     OfferResolutionEnum = "HD-4K"
	OfferResolutionEnumExternal OfferResolutionEnum = "External"
	OfferResolutionEnumUnknown  OfferResolutionEnum = "Unknown"
)

func (e OfferResolutionEnum) ToPointer() *OfferResolutionEnum {
	return &e
}

func (e *OfferResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SD":
		fallthrough
	case "HD-720":
		fallthrough
	case "HD-1080":
		fallthrough
	case "HD-4K":
		fallthrough
	case "External":
		fallthrough
	case "Unknown":
		*e = OfferResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OfferResolutionEnum: %v", v)
	}
}

// Offer - The base type for both Offer and Entitlement.
type Offer struct {
	Availability OfferAvailabilityEnum `json:"availability"`
	// A map of custom fields defined by a curator for an offer.
	CustomFields map[string]interface{} `json:"customFields,omitempty"`
	DeliveryType OfferDeliveryTypeEnum  `json:"deliveryType"`
	EndDate      *time.Time             `json:"endDate,omitempty"`
	// Any specific playback exclusion rules.
	ExclusionRules []ExclusionRule `json:"exclusionRules,omitempty"`
	ID             *string         `json:"id,omitempty"`
	// The maximum number of allowed downloads.
	MaxDownloads *int `json:"maxDownloads,omitempty"`
	// The maximum number of allowed plays.
	MaxPlays  *int               `json:"maxPlays,omitempty"`
	Name      *string            `json:"name,omitempty"`
	Ownership OfferOwnershipEnum `json:"ownership"`
	// The length of time in minutes which the rental will last once played for the first time.
	PlayPeriod *int    `json:"playPeriod,omitempty"`
	Price      float32 `json:"price"`
	// The length of time in minutes which the rental will last once purchased.
	RentalPeriod *int                `json:"rentalPeriod,omitempty"`
	Resolution   OfferResolutionEnum `json:"resolution"`
	Scopes       []string            `json:"scopes"`
	StartDate    *time.Time          `json:"startDate,omitempty"`
	// The code of the subscription this offer is offered under, if any.
	SubscriptionCode *string `json:"subscriptionCode,omitempty"`
}
