"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Rebalance:
    r"""The rebalancing feature provides advisors and portfolio managers the ability to evaluate which pots have drifted significantly from their target portfolios, and trigger a rebalance execution for these pots to bring the holdings back to parity with the pot's target portfolio. Driven by a single rebalance request, the system completely orchestrates this multi-day buy/sell process across a host of different pots, with status updates being provided via API endpoints and web sockets."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_rebalance(self, request: operations.CreateRebalanceRequest, security: operations.CreateRebalanceSecurity) -> operations.CreateRebalanceResponse:
        r"""Trigger rebalance process
        This endpoint allows you to trigger the rebalancing of a pot (or a group of pots), all pots belonging to an investor (or a group of investors) or all pots linked to a portfolio (or a group of portfolios). The response will contain a `rebalance_request_id` and `status` of the request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/transactions/v1/rebalance'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateRebalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance201ApplicationJSON])
                res.create_rebalance_201_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance400ApplicationJSON])
                res.create_rebalance_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance401ApplicationJSON])
                res.create_rebalance_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance403ApplicationJSON])
                res.create_rebalance_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance404ApplicationJSON])
                res.create_rebalance_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance409ApplicationJSON])
                res.create_rebalance_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance429ApplicationJSON])
                res.create_rebalance_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateRebalance500ApplicationJSON])
                res.create_rebalance_500_application_json_object = out

        return res

    def evaluate_rebalance(self, request: operations.EvaluateRebalanceRequest, security: operations.EvaluateRebalanceSecurity) -> operations.EvaluateRebalanceResponse:
        r"""Evaluate rebalance
        Evaluate if a pot or a group of pots has deviated significatly from the target portfolio and eligible for rebalancing. The request can be sent for a pot (or a group of pots), all pots belonging to an investor (or a group of investors) or all pots linked to a portfolio (or a group of portfolios). The response will indicate if the pot is eligible for rebalance and % deviation from the target portfolio template.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/transactions/v1/rebalance/evaluate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EvaluateRebalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalanceThisIsTheReturnObjectWithEvaluationPerPot])
                res.this_is_the_return_object_with_evaluation_per_pot = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance400ApplicationJSON])
                res.evaluate_rebalance_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance401ApplicationJSON])
                res.evaluate_rebalance_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance403ApplicationJSON])
                res.evaluate_rebalance_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance404ApplicationJSON])
                res.evaluate_rebalance_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance409ApplicationJSON])
                res.evaluate_rebalance_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance429ApplicationJSON])
                res.evaluate_rebalance_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EvaluateRebalance500ApplicationJSON])
                res.evaluate_rebalance_500_application_json_object = out

        return res

    def get_rebalance_details(self, request: operations.GetRebalanceDetailsRequest, security: operations.GetRebalanceDetailsSecurity) -> operations.GetRebalanceDetailsResponse:
        r"""Retrieve rebalance request related details
        Retrieve details of a rebalace request using the `rebalance_request_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRebalanceDetailsRequest, base_url, '/tenant/transactions/v1/rebalance/{rebalance_request_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRebalanceDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails200ApplicationJSON])
                res.get_rebalance_details_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails400ApplicationJSON])
                res.get_rebalance_details_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails401ApplicationJSON])
                res.get_rebalance_details_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails403ApplicationJSON])
                res.get_rebalance_details_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails404ApplicationJSON])
                res.get_rebalance_details_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails409ApplicationJSON])
                res.get_rebalance_details_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails429ApplicationJSON])
                res.get_rebalance_details_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetRebalanceDetails500ApplicationJSON])
                res.get_rebalance_details_500_application_json_object = out

        return res

    