"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import additionalconstraintselement_enum as shared_additionalconstraintselement_enum
from ..shared import backendauthappleproviderconfig as shared_backendauthappleproviderconfig
from ..shared import backendauthsocialproviderconfig as shared_backendauthsocialproviderconfig
from ..shared import createbackendauthresponse as shared_createbackendauthresponse
from ..shared import mfamode_enum as shared_mfamode_enum
from ..shared import mfatypeselement_enum as shared_mfatypeselement_enum
from ..shared import oauthscopeselement_enum as shared_oauthscopeselement_enum
from ..shared import requiredsignupattributeselement_enum as shared_requiredsignupattributeselement_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateBackendAuthRequestBodyResourceConfigAuthResourcesEnum(str, Enum):
    r"""Defines whether you want to configure only authentication or both authentication and authorization settings."""
    USER_POOL_ONLY = 'USER_POOL_ONLY'
    IDENTITY_POOL_AND_USER_POOL = 'IDENTITY_POOL_AND_USER_POOL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs:
    r"""Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project."""
    
    identity_pool_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolName') }})  
    unauthenticated_login: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnauthenticatedLogin') }})  
    
class CreateBackendAuthRequestBodyResourceConfigServiceEnum(str, Enum):
    r"""Defines the service name to use when configuring an authentication resource in your Amplify project."""
    COGNITO = 'COGNITO'

class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum(str, Enum):
    r"""<b>(DEPRECATED)</b> Describes which mode to use (either SMS or email) to deliver messages to app users who want to recover their password."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the email sent when an app user forgets their password."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings:
    r"""<b>(DEPRECATED)</b> The configuration for the SMS message sent when an app user forgets their password."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword:
    r"""<b>(DEPRECATED)</b> Describes the forgotten password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordDeliveryMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod') }})  
    email_settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPasswordSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings:
    r"""Describes the configuration settings and methods for your Amplify app users to use MFA."""
    
    mfa_types: Optional[list[shared_mfatypeselement_enum.MfaTypesElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MfaTypes'), 'exclude': lambda f: f is None }})  
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa:
    r"""Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project."""
    
    mfa_mode: shared_mfamode_enum.MFAModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MFAMode') }})  
    settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfaSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum(str, Enum):
    r"""The OAuth grant type that you use to allow app users to authenticate from your Amplify app."""
    CODE = 'CODE'
    IMPLICIT = 'IMPLICIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings:
    r"""The settings for using social providers to access your Amplify app."""
    
    facebook: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Facebook'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    google: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Google'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    login_with_amazon: Optional[shared_backendauthsocialproviderconfig.BackendAuthSocialProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LoginWithAmazon'), 'exclude': lambda f: f is None }})
    r"""Describes third-party social federation configurations for allowing your app users to sign in using OAuth."""  
    sign_in_with_apple: Optional[shared_backendauthappleproviderconfig.BackendAuthAppleProviderConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignInWithApple'), 'exclude': lambda f: f is None }})
    r"""Describes Apple social federation configurations for allowing your app users to sign in using OAuth."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth:
    r"""Describes the OAuth policy and rules for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    o_auth_grant_type: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthOAuthGrantTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthGrantType') }})  
    o_auth_scopes: list[shared_oauthscopeselement_enum.OAuthScopesElementEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuthScopes') }})  
    redirect_sign_in_ur_is: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignInURIs') }})  
    redirect_sign_out_ur_is: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedirectSignOutURIs') }})  
    domain_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainPrefix'), 'exclude': lambda f: f is None }})  
    social_provider_settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuthSocialProviderSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SocialProviderSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy:
    r"""Describes the password policy for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    minimum_length: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumLength') }})  
    additional_constraints: Optional[list[shared_additionalconstraintselement_enum.AdditionalConstraintsElementEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalConstraints'), 'exclude': lambda f: f is None }})  
    
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsSignInMethodEnum(str, Enum):
    r"""Describes the sign-in methods that your Amplify app users use to log in using the Amazon Cognito user pool, configured as a part of your Amplify project."""
    EMAIL = 'EMAIL'
    EMAIL_AND_PHONE_NUMBER = 'EMAIL_AND_PHONE_NUMBER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    USERNAME = 'USERNAME'

class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum(str, Enum):
    r"""The type of verification message to send."""
    EMAIL = 'EMAIL'
    SMS = 'SMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings:
    r"""The settings for the email message."""
    
    email_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailMessage'), 'exclude': lambda f: f is None }})  
    email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSubject'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings:
    r"""The settings for the SMS message."""
    
    sms_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage:
    r"""Describes the email or SMS verification message for your Amazon Cognito user pool, configured as a part of your Amplify project."""
    
    delivery_method: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageDeliveryMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryMethod') }})  
    email_settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageEmailSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailSettings'), 'exclude': lambda f: f is None }})  
    sms_settings: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessageSmsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SmsSettings'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfigUserPoolConfigs:
    r"""Describes authentication configuration for the Amazon Cognito user pool, provisioned as a part of your auth resource in the Amplify project."""
    
    required_sign_up_attributes: list[shared_requiredsignupattributeselement_enum.RequiredSignUpAttributesElementEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequiredSignUpAttributes') }})  
    sign_in_method: CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsSignInMethodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignInMethod') }})  
    user_pool_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolName') }})  
    forgot_password: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsForgotPassword] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForgotPassword'), 'exclude': lambda f: f is None }})  
    mfa: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsMfa] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mfa'), 'exclude': lambda f: f is None }})  
    o_auth: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsOAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OAuth'), 'exclude': lambda f: f is None }})  
    password_policy: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsPasswordPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PasswordPolicy'), 'exclude': lambda f: f is None }})  
    verification_message: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigsVerificationMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerificationMessage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBodyResourceConfig:
    r"""Defines the resource configuration when creating an auth resource in your Amplify project."""
    
    auth_resources: Optional[CreateBackendAuthRequestBodyResourceConfigAuthResourcesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthResources'), 'exclude': lambda f: f is None }})  
    identity_pool_configs: Optional[CreateBackendAuthRequestBodyResourceConfigIdentityPoolConfigs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolConfigs'), 'exclude': lambda f: f is None }})  
    service: Optional[CreateBackendAuthRequestBodyResourceConfigServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service'), 'exclude': lambda f: f is None }})  
    user_pool_configs: Optional[CreateBackendAuthRequestBodyResourceConfigUserPoolConfigs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolConfigs'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateBackendAuthRequestBody:
    
    backend_environment_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendEnvironmentName') }})
    r"""The name of the backend environment."""  
    resource_config: CreateBackendAuthRequestBodyResourceConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceConfig') }})
    r"""Defines the resource configuration when creating an auth resource in your Amplify project."""  
    resource_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName') }})
    r"""The name of this resource."""  
    

@dataclasses.dataclass
class CreateBackendAuthRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The app ID."""  
    request_body: CreateBackendAuthRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateBackendAuthResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_backend_auth_response: Optional[shared_createbackendauthresponse.CreateBackendAuthResponse] = dataclasses.field(default=None)
    r"""Success"""  
    gateway_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""GatewayTimeoutException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    