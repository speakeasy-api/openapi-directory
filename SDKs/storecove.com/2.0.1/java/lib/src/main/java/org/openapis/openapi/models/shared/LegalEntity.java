/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LegalEntity - Success
 */
public class LegalEntity {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_tax_identifiers")public AdditionalTaxIdentifier[] additionalTaxIdentifiers;
    public LegalEntity withAdditionalTaxIdentifiers(AdditionalTaxIdentifier[] additionalTaxIdentifiers) {
        this.additionalTaxIdentifiers = additionalTaxIdentifiers;
        return this;
    }
    
    /**
     * A list of document types to advertise. Use if this LegalEntity needs the ability to receive more than only invoice documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertisements")public LegalEntityDocumentTypeEnum[] advertisements;
    public LegalEntity withAdvertisements(LegalEntityDocumentTypeEnum[] advertisements) {
        this.advertisements = advertisements;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_keys")public String[] apiKeys;
    public LegalEntity withApiKeys(String[] apiKeys) {
        this.apiKeys = apiKeys;
        return this;
    }
    
    /**
     * The city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")public String city;
    public LegalEntity withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * An ISO 3166-1 alpha-2 country code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")public CountryEnum country;
    public LegalEntity withCountry(CountryEnum country) {
        this.country = country;
        return this;
    }
    
    /**
     * County, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")public String county;
    public LegalEntity withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * The Storecove assigned id for the LegalEntity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")public Long id;
    public LegalEntity withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The first address line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")public String line1;
    public LegalEntity withLine1(String line1) {
        this.line1 = line1;
        return this;
    }
    
    /**
     * The second address line, if applicable
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")public String line2;
    public LegalEntity withLine2(String line2) {
        this.line2 = line2;
        return this;
    }
    
    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party_name")public String partyName;
    public LegalEntity withPartyName(String partyName) {
        this.partyName = partyName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peppol_identifiers")public PeppolIdentifier[] peppolIdentifiers;
    public LegalEntity withPeppolIdentifiers(PeppolIdentifier[] peppolIdentifiers) {
        this.peppolIdentifiers = peppolIdentifiers;
        return this;
    }
    
    /**
     * Whether or not this LegalEntity is public. Public means it will be listed in the PEPPOL directory at https://directory.peppol.eu/ which is normally what you want. If you have a good reason to not want the LegalEntity listed, provide false. This property is ignored when for country SG, where it is always true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")public Boolean public_;
    public LegalEntity withPublic(Boolean public_) {
        this.public_ = public_;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rea")public Rea rea;
    public LegalEntity withRea(Rea rea) {
        this.rea = rea;
        return this;
    }
    
    /**
     * DEPRECATED. Use the &lt;&lt;_openapi_receiveddocuments_resource&gt;&gt; endpoint. The email address of the Smart Inbox for this LegalEntity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smart_inbox")public String smartInbox;
    public LegalEntity withSmartInbox(String smartInbox) {
        this.smartInbox = smartInbox;
        return this;
    }
    
    /**
     * The id of the tenant, to be used in case of multi-tenant solutions. This property will included in webhook events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenant_id")public String tenantId;
    public LegalEntity withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }
    
    /**
     * The password to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("third_party_password")public String thirdPartyPassword;
    public LegalEntity withThirdPartyPassword(String thirdPartyPassword) {
        this.thirdPartyPassword = thirdPartyPassword;
        return this;
    }
    
    /**
     * The username to use to authenticate to a system through which to send the document, or to obtain tax authority approval to send it. This field is currently relevant only for India and mandatory when creating an IN LegalEntity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("third_party_username")public String thirdPartyUsername;
    public LegalEntity withThirdPartyUsername(String thirdPartyUsername) {
        this.thirdPartyUsername = thirdPartyUsername;
        return this;
    }
    
    /**
     * The zipcode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")public String zip;
    public LegalEntity withZip(String zip) {
        this.zip = zip;
        return this;
    }
    
}
