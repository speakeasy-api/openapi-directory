/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode - The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.
 */
public class GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode {
    /**
     * The access token represents the authorization of a specific application to access specific parts of a user\u2019s data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    public GoogleCloudIntegrationsV1alphaAccessToken accessToken;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withAccessToken(GoogleCloudIntegrationsV1alphaAccessToken accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyReauthPolicy")
    public Boolean applyReauthPolicy;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withApplyReauthPolicy(Boolean applyReauthPolicy) {
        this.applyReauthPolicy = applyReauthPolicy;
        return this;
    }
    
    /**
     * The Auth Code that is used to initially retrieve the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authCode")
    public String authCode;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withAuthCode(String authCode) {
        this.authCode = authCode;
        return this;
    }
    
    /**
     * The auth url endpoint to send the auth code request to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authEndpoint")
    public String authEndpoint;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withAuthEndpoint(String authEndpoint) {
        this.authEndpoint = authEndpoint;
        return this;
    }
    
    /**
     * A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authParams")
    public GoogleCloudIntegrationsV1alphaParameterMap authParams;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withAuthParams(GoogleCloudIntegrationsV1alphaParameterMap authParams) {
        this.authParams = authParams;
        return this;
    }
    
    /**
     * The client's id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The client's secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    public String clientSecret;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Represent how to pass parameters to fetch access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestType")
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestTypeEnum requestType;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withRequestType(GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCodeRequestTypeEnum requestType) {
        this.requestType = requestType;
        return this;
    }
    
    /**
     * A space-delimited list of requested scope permissions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * The token url endpoint to send the token request to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenEndpoint")
    public String tokenEndpoint;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withTokenEndpoint(String tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }
    
    /**
     * A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenParams")
    public GoogleCloudIntegrationsV1alphaParameterMap tokenParams;
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode withTokenParams(GoogleCloudIntegrationsV1alphaParameterMap tokenParams) {
        this.tokenParams = tokenParams;
        return this;
    }
    
}
