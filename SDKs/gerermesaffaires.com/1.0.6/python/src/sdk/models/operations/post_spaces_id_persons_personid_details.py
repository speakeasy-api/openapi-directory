"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesIDPersonsPersonIDDetailsRequestBodyAddress:
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Complement'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Street'), 'exclude': lambda f: f is None }})  
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipCode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesIDPersonsPersonIDDetailsRequestBody:
    r"""Contact details to add or replace (Designation and Phone or Mail are mandatory)"""
    
    designation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Designation') }})  
    address: Optional[PostSpacesIDPersonsPersonIDDetailsRequestBodyAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})  
    email: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})  
    phone: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Phone'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesIDPersonsPersonIDDetailsRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    person_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'personId', 'style': 'simple', 'explode': False }})
    r"""Id of the person or memberId"""  
    request_body: PostSpacesIDPersonsPersonIDDetailsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Contact details to add or replace (Designation and Phone or Mail are mandatory)"""  
    

@dataclasses.dataclass
class PostSpacesIDPersonsPersonIDDetailsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    