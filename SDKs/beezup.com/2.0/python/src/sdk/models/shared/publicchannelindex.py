"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import links_getchannelsindexlink as shared_links_getchannelsindexlink
from ..shared import links_getchannelslink as shared_links_getchannelslink
from ..shared import links_getpubliclistofvalueslink as shared_links_getpubliclistofvalueslink
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicChannelIndexLinks:
    
    channel_country_lov: Optional[shared_links_getpubliclistofvalueslink.LinksGetPublicListOfValuesLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelCountryLov'), 'exclude': lambda f: f is None }})  
    channel_type_lov: Optional[shared_links_getpubliclistofvalueslink.LinksGetPublicListOfValuesLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelTypeLov'), 'exclude': lambda f: f is None }})  
    sector_lov: Optional[shared_links_getpubliclistofvalueslink.LinksGetPublicListOfValuesLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sectorLov'), 'exclude': lambda f: f is None }})  
    self_: Optional[shared_links_getchannelsindexlink.LinksGetChannelsIndexLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicChannelIndex:
    r"""Channel list regrouped by country and links to list of values"""
    
    channels: Optional[dict[str, shared_links_getchannelslink.LinksGetChannelsLink]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channels'), 'exclude': lambda f: f is None }})
    r"""The key is the country iso code"""  
    links: Optional[PublicChannelIndexLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    