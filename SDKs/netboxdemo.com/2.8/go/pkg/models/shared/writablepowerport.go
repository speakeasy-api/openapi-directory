// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritablePowerPortConnectionStatusEnum string

const (
	WritablePowerPortConnectionStatusEnumFalse WritablePowerPortConnectionStatusEnum = "false"
	WritablePowerPortConnectionStatusEnumTrue  WritablePowerPortConnectionStatusEnum = "true"
)

func (e *WritablePowerPortConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = WritablePowerPortConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerPortConnectionStatusEnum: %s", s)
	}
}

// WritablePowerPortTypeEnum - Physical port type
type WritablePowerPortTypeEnum string

const (
	WritablePowerPortTypeEnumIec60320C6     WritablePowerPortTypeEnum = "iec-60320-c6"
	WritablePowerPortTypeEnumIec60320C8     WritablePowerPortTypeEnum = "iec-60320-c8"
	WritablePowerPortTypeEnumIec60320C14    WritablePowerPortTypeEnum = "iec-60320-c14"
	WritablePowerPortTypeEnumIec60320C16    WritablePowerPortTypeEnum = "iec-60320-c16"
	WritablePowerPortTypeEnumIec60320C20    WritablePowerPortTypeEnum = "iec-60320-c20"
	WritablePowerPortTypeEnumIec60309Pne4h  WritablePowerPortTypeEnum = "iec-60309-p-n-e-4h"
	WritablePowerPortTypeEnumIec60309Pne6h  WritablePowerPortTypeEnum = "iec-60309-p-n-e-6h"
	WritablePowerPortTypeEnumIec60309Pne9h  WritablePowerPortTypeEnum = "iec-60309-p-n-e-9h"
	WritablePowerPortTypeEnumIec603092pE4h  WritablePowerPortTypeEnum = "iec-60309-2p-e-4h"
	WritablePowerPortTypeEnumIec603092pE6h  WritablePowerPortTypeEnum = "iec-60309-2p-e-6h"
	WritablePowerPortTypeEnumIec603092pE9h  WritablePowerPortTypeEnum = "iec-60309-2p-e-9h"
	WritablePowerPortTypeEnumIec603093pE4h  WritablePowerPortTypeEnum = "iec-60309-3p-e-4h"
	WritablePowerPortTypeEnumIec603093pE6h  WritablePowerPortTypeEnum = "iec-60309-3p-e-6h"
	WritablePowerPortTypeEnumIec603093pE9h  WritablePowerPortTypeEnum = "iec-60309-3p-e-9h"
	WritablePowerPortTypeEnumIec603093pNe4h WritablePowerPortTypeEnum = "iec-60309-3p-n-e-4h"
	WritablePowerPortTypeEnumIec603093pNe6h WritablePowerPortTypeEnum = "iec-60309-3p-n-e-6h"
	WritablePowerPortTypeEnumIec603093pNe9h WritablePowerPortTypeEnum = "iec-60309-3p-n-e-9h"
	WritablePowerPortTypeEnumNema115p       WritablePowerPortTypeEnum = "nema-1-15p"
	WritablePowerPortTypeEnumNema515p       WritablePowerPortTypeEnum = "nema-5-15p"
	WritablePowerPortTypeEnumNema520p       WritablePowerPortTypeEnum = "nema-5-20p"
	WritablePowerPortTypeEnumNema530p       WritablePowerPortTypeEnum = "nema-5-30p"
	WritablePowerPortTypeEnumNema550p       WritablePowerPortTypeEnum = "nema-5-50p"
	WritablePowerPortTypeEnumNema615p       WritablePowerPortTypeEnum = "nema-6-15p"
	WritablePowerPortTypeEnumNema620p       WritablePowerPortTypeEnum = "nema-6-20p"
	WritablePowerPortTypeEnumNema630p       WritablePowerPortTypeEnum = "nema-6-30p"
	WritablePowerPortTypeEnumNema650p       WritablePowerPortTypeEnum = "nema-6-50p"
	WritablePowerPortTypeEnumNema1030p      WritablePowerPortTypeEnum = "nema-10-30p"
	WritablePowerPortTypeEnumNema1050p      WritablePowerPortTypeEnum = "nema-10-50p"
	WritablePowerPortTypeEnumNema1420p      WritablePowerPortTypeEnum = "nema-14-20p"
	WritablePowerPortTypeEnumNema1430p      WritablePowerPortTypeEnum = "nema-14-30p"
	WritablePowerPortTypeEnumNema1450p      WritablePowerPortTypeEnum = "nema-14-50p"
	WritablePowerPortTypeEnumNema1460p      WritablePowerPortTypeEnum = "nema-14-60p"
	WritablePowerPortTypeEnumNemaL115p      WritablePowerPortTypeEnum = "nema-l1-15p"
	WritablePowerPortTypeEnumNemaL515p      WritablePowerPortTypeEnum = "nema-l5-15p"
	WritablePowerPortTypeEnumNemaL520p      WritablePowerPortTypeEnum = "nema-l5-20p"
	WritablePowerPortTypeEnumNemaL530p      WritablePowerPortTypeEnum = "nema-l5-30p"
	WritablePowerPortTypeEnumNemaL550p      WritablePowerPortTypeEnum = "nema-l5-50p"
	WritablePowerPortTypeEnumNemaL615p      WritablePowerPortTypeEnum = "nema-l6-15p"
	WritablePowerPortTypeEnumNemaL620p      WritablePowerPortTypeEnum = "nema-l6-20p"
	WritablePowerPortTypeEnumNemaL630p      WritablePowerPortTypeEnum = "nema-l6-30p"
	WritablePowerPortTypeEnumNemaL650p      WritablePowerPortTypeEnum = "nema-l6-50p"
	WritablePowerPortTypeEnumNemaL1030p     WritablePowerPortTypeEnum = "nema-l10-30p"
	WritablePowerPortTypeEnumNemaL1420p     WritablePowerPortTypeEnum = "nema-l14-20p"
	WritablePowerPortTypeEnumNemaL1430p     WritablePowerPortTypeEnum = "nema-l14-30p"
	WritablePowerPortTypeEnumNemaL1450p     WritablePowerPortTypeEnum = "nema-l14-50p"
	WritablePowerPortTypeEnumNemaL1460p     WritablePowerPortTypeEnum = "nema-l14-60p"
	WritablePowerPortTypeEnumNemaL2120p     WritablePowerPortTypeEnum = "nema-l21-20p"
	WritablePowerPortTypeEnumNemaL2130p     WritablePowerPortTypeEnum = "nema-l21-30p"
	WritablePowerPortTypeEnumCs6361c        WritablePowerPortTypeEnum = "cs6361c"
	WritablePowerPortTypeEnumCs6365c        WritablePowerPortTypeEnum = "cs6365c"
	WritablePowerPortTypeEnumCs8165c        WritablePowerPortTypeEnum = "cs8165c"
	WritablePowerPortTypeEnumCs8265c        WritablePowerPortTypeEnum = "cs8265c"
	WritablePowerPortTypeEnumCs8365c        WritablePowerPortTypeEnum = "cs8365c"
	WritablePowerPortTypeEnumCs8465c        WritablePowerPortTypeEnum = "cs8465c"
	WritablePowerPortTypeEnumItaE           WritablePowerPortTypeEnum = "ita-e"
	WritablePowerPortTypeEnumItaF           WritablePowerPortTypeEnum = "ita-f"
	WritablePowerPortTypeEnumItaEf          WritablePowerPortTypeEnum = "ita-ef"
	WritablePowerPortTypeEnumItaG           WritablePowerPortTypeEnum = "ita-g"
	WritablePowerPortTypeEnumItaH           WritablePowerPortTypeEnum = "ita-h"
	WritablePowerPortTypeEnumItaI           WritablePowerPortTypeEnum = "ita-i"
	WritablePowerPortTypeEnumItaJ           WritablePowerPortTypeEnum = "ita-j"
	WritablePowerPortTypeEnumItaK           WritablePowerPortTypeEnum = "ita-k"
	WritablePowerPortTypeEnumItaL           WritablePowerPortTypeEnum = "ita-l"
	WritablePowerPortTypeEnumItaM           WritablePowerPortTypeEnum = "ita-m"
	WritablePowerPortTypeEnumItaN           WritablePowerPortTypeEnum = "ita-n"
	WritablePowerPortTypeEnumItaO           WritablePowerPortTypeEnum = "ita-o"
)

func (e *WritablePowerPortTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "iec-60320-c6":
		fallthrough
	case "iec-60320-c8":
		fallthrough
	case "iec-60320-c14":
		fallthrough
	case "iec-60320-c16":
		fallthrough
	case "iec-60320-c20":
		fallthrough
	case "iec-60309-p-n-e-4h":
		fallthrough
	case "iec-60309-p-n-e-6h":
		fallthrough
	case "iec-60309-p-n-e-9h":
		fallthrough
	case "iec-60309-2p-e-4h":
		fallthrough
	case "iec-60309-2p-e-6h":
		fallthrough
	case "iec-60309-2p-e-9h":
		fallthrough
	case "iec-60309-3p-e-4h":
		fallthrough
	case "iec-60309-3p-e-6h":
		fallthrough
	case "iec-60309-3p-e-9h":
		fallthrough
	case "iec-60309-3p-n-e-4h":
		fallthrough
	case "iec-60309-3p-n-e-6h":
		fallthrough
	case "iec-60309-3p-n-e-9h":
		fallthrough
	case "nema-1-15p":
		fallthrough
	case "nema-5-15p":
		fallthrough
	case "nema-5-20p":
		fallthrough
	case "nema-5-30p":
		fallthrough
	case "nema-5-50p":
		fallthrough
	case "nema-6-15p":
		fallthrough
	case "nema-6-20p":
		fallthrough
	case "nema-6-30p":
		fallthrough
	case "nema-6-50p":
		fallthrough
	case "nema-10-30p":
		fallthrough
	case "nema-10-50p":
		fallthrough
	case "nema-14-20p":
		fallthrough
	case "nema-14-30p":
		fallthrough
	case "nema-14-50p":
		fallthrough
	case "nema-14-60p":
		fallthrough
	case "nema-l1-15p":
		fallthrough
	case "nema-l5-15p":
		fallthrough
	case "nema-l5-20p":
		fallthrough
	case "nema-l5-30p":
		fallthrough
	case "nema-l5-50p":
		fallthrough
	case "nema-l6-15p":
		fallthrough
	case "nema-l6-20p":
		fallthrough
	case "nema-l6-30p":
		fallthrough
	case "nema-l6-50p":
		fallthrough
	case "nema-l10-30p":
		fallthrough
	case "nema-l14-20p":
		fallthrough
	case "nema-l14-30p":
		fallthrough
	case "nema-l14-50p":
		fallthrough
	case "nema-l14-60p":
		fallthrough
	case "nema-l21-20p":
		fallthrough
	case "nema-l21-30p":
		fallthrough
	case "cs6361c":
		fallthrough
	case "cs6365c":
		fallthrough
	case "cs8165c":
		fallthrough
	case "cs8265c":
		fallthrough
	case "cs8365c":
		fallthrough
	case "cs8465c":
		fallthrough
	case "ita-e":
		fallthrough
	case "ita-f":
		fallthrough
	case "ita-ef":
		fallthrough
	case "ita-g":
		fallthrough
	case "ita-h":
		fallthrough
	case "ita-i":
		fallthrough
	case "ita-j":
		fallthrough
	case "ita-k":
		fallthrough
	case "ita-l":
		fallthrough
	case "ita-m":
		fallthrough
	case "ita-n":
		fallthrough
	case "ita-o":
		*e = WritablePowerPortTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePowerPortTypeEnum: %s", s)
	}
}

type WritablePowerPortInput struct {
	// Allocated power draw (watts)
	AllocatedDraw    *int64                                 `json:"allocated_draw,omitempty"`
	Cable            *NestedCableInput                      `json:"cable,omitempty"`
	ConnectionStatus *WritablePowerPortConnectionStatusEnum `json:"connection_status,omitempty"`
	Description      *string                                `json:"description,omitempty"`
	Device           int64                                  `json:"device"`
	// Maximum power draw (watts)
	MaximumDraw *int64   `json:"maximum_draw,omitempty"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags,omitempty"`
	// Physical port type
	Type *WritablePowerPortTypeEnum `json:"type,omitempty"`
}
