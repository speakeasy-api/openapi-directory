/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The BGP status.
 */
export enum DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationBgpConfigurationsBgpStatusEnum {
  Up = "up",
  Down = "down",
}

/**
 * The BGP configuration information.
 */
export class DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationBgpConfigurations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  bgpStatus?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationBgpConfigurationsBgpStatusEnum;

  @SpeakeasyMetadata()
  peerAddress?: string;

  @SpeakeasyMetadata()
  peerAsn?: number;

  @SpeakeasyMetadata()
  transitGatewayAddress?: string;

  @SpeakeasyMetadata()
  transitGatewayAsn?: number;
}

/**
 * The tunnel protocol.
 */
export enum DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationProtocolEnum {
  Gre = "gre",
}

/**
 * The Connect peer details.
 */
export class DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationBgpConfigurations,
  })
  bgpConfigurations?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationBgpConfigurations[];

  @SpeakeasyMetadata()
  insideCidrBlocks?: string[];

  @SpeakeasyMetadata()
  peerAddress?: string;

  @SpeakeasyMetadata()
  protocol?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfigurationProtocolEnum;

  @SpeakeasyMetadata()
  transitGatewayAddress?: string;
}

/**
 * The state of the Connect peer.
 */
export enum DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a transit gateway Connect peer.
 */
export class DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  connectPeerConfiguration?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersConnectPeerConfiguration;

  @SpeakeasyMetadata()
  creationTime?: Date;

  @SpeakeasyMetadata()
  state?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersStateEnum;

  @SpeakeasyMetadata({
    elemType:
      DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersTags,
  })
  tags?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeersTags[];

  @SpeakeasyMetadata()
  transitGatewayAttachmentId?: string;

  @SpeakeasyMetadata()
  transitGatewayConnectPeerId?: string;
}

/**
 * Success
 */
export class DescribeTransitGatewayConnectPeersResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({
    elemType:
      DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeers,
  })
  transitGatewayConnectPeers?: DescribeTransitGatewayConnectPeersResultTransitGatewayConnectPeers[];
}
