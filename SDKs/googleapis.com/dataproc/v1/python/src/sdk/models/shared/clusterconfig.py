"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoscalingconfig as shared_autoscalingconfig
from ..shared import auxiliarynodegroup as shared_auxiliarynodegroup
from ..shared import dataprocmetricconfig as shared_dataprocmetricconfig
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import endpointconfig as shared_endpointconfig
from ..shared import gceclusterconfig as shared_gceclusterconfig
from ..shared import gkeclusterconfig as shared_gkeclusterconfig
from ..shared import instancegroupconfig as shared_instancegroupconfig
from ..shared import lifecycleconfig as shared_lifecycleconfig
from ..shared import metastoreconfig as shared_metastoreconfig
from ..shared import nodeinitializationaction as shared_nodeinitializationaction
from ..shared import securityconfig as shared_securityconfig
from ..shared import softwareconfig as shared_softwareconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterConfigInput:
    r"""The cluster config."""
    
    autoscaling_config: Optional[shared_autoscalingconfig.AutoscalingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscalingConfig'), 'exclude': lambda f: f is None }})
    r"""Autoscaling Policy config associated with the cluster."""  
    auxiliary_node_groups: Optional[list[shared_auxiliarynodegroup.AuxiliaryNodeGroupInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliaryNodeGroups'), 'exclude': lambda f: f is None }})
    r"""Optional. The node group settings."""  
    config_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configBucket'), 'exclude': lambda f: f is None }})
    r"""Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket."""  
    dataproc_metric_config: Optional[shared_dataprocmetricconfig.DataprocMetricConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataprocMetricConfig'), 'exclude': lambda f: f is None }})
    r"""Dataproc metric config."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Encryption settings for the cluster."""  
    endpoint_config: Optional[shared_endpointconfig.EndpointConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointConfig'), 'exclude': lambda f: f is None }})
    r"""Endpoint config for this cluster"""  
    gce_cluster_config: Optional[shared_gceclusterconfig.GceClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gceClusterConfig'), 'exclude': lambda f: f is None }})
    r"""Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster."""  
    gke_cluster_config: Optional[shared_gkeclusterconfig.GkeClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeClusterConfig'), 'exclude': lambda f: f is None }})
    r"""The cluster's GKE config."""  
    initialization_actions: Optional[list[shared_nodeinitializationaction.NodeInitializationAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initializationActions'), 'exclude': lambda f: f is None }})
    r"""Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \\"${ROLE}\\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi"""  
    lifecycle_config: Optional[shared_lifecycleconfig.LifecycleConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifecycleConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the cluster auto-delete schedule configuration."""  
    master_config: Optional[shared_instancegroupconfig.InstanceGroupConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    metastore_config: Optional[shared_metastoreconfig.MetastoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metastoreConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies a Metastore configuration."""  
    secondary_worker_config: Optional[shared_instancegroupconfig.InstanceGroupConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryWorkerConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    security_config: Optional[shared_securityconfig.SecurityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityConfig'), 'exclude': lambda f: f is None }})
    r"""Security related configuration, including encryption, Kerberos, etc."""  
    software_config: Optional[shared_softwareconfig.SoftwareConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the selection and config of software inside the cluster."""  
    temp_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tempBucket'), 'exclude': lambda f: f is None }})
    r"""Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket."""  
    worker_config: Optional[shared_instancegroupconfig.InstanceGroupConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterConfig:
    r"""The cluster config."""
    
    autoscaling_config: Optional[shared_autoscalingconfig.AutoscalingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscalingConfig'), 'exclude': lambda f: f is None }})
    r"""Autoscaling Policy config associated with the cluster."""  
    auxiliary_node_groups: Optional[list[shared_auxiliarynodegroup.AuxiliaryNodeGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auxiliaryNodeGroups'), 'exclude': lambda f: f is None }})
    r"""Optional. The node group settings."""  
    config_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configBucket'), 'exclude': lambda f: f is None }})
    r"""Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket."""  
    dataproc_metric_config: Optional[shared_dataprocmetricconfig.DataprocMetricConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataprocMetricConfig'), 'exclude': lambda f: f is None }})
    r"""Dataproc metric config."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Encryption settings for the cluster."""  
    endpoint_config: Optional[shared_endpointconfig.EndpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointConfig'), 'exclude': lambda f: f is None }})
    r"""Endpoint config for this cluster"""  
    gce_cluster_config: Optional[shared_gceclusterconfig.GceClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gceClusterConfig'), 'exclude': lambda f: f is None }})
    r"""Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster."""  
    gke_cluster_config: Optional[shared_gkeclusterconfig.GkeClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeClusterConfig'), 'exclude': lambda f: f is None }})
    r"""The cluster's GKE config."""  
    initialization_actions: Optional[list[shared_nodeinitializationaction.NodeInitializationAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initializationActions'), 'exclude': lambda f: f is None }})
    r"""Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ \\"${ROLE}\\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi"""  
    lifecycle_config: Optional[shared_lifecycleconfig.LifecycleConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lifecycleConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the cluster auto-delete schedule configuration."""  
    master_config: Optional[shared_instancegroupconfig.InstanceGroupConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masterConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    metastore_config: Optional[shared_metastoreconfig.MetastoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metastoreConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies a Metastore configuration."""  
    secondary_worker_config: Optional[shared_instancegroupconfig.InstanceGroupConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryWorkerConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    security_config: Optional[shared_securityconfig.SecurityConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityConfig'), 'exclude': lambda f: f is None }})
    r"""Security related configuration, including encryption, Kerberos, etc."""  
    software_config: Optional[shared_softwareconfig.SoftwareConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('softwareConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies the selection and config of software inside the cluster."""  
    temp_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tempBucket'), 'exclude': lambda f: f is None }})
    r"""Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket."""  
    worker_config: Optional[shared_instancegroupconfig.InstanceGroupConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workerConfig'), 'exclude': lambda f: f is None }})
    r"""The config settings for Compute Engine resources in an instance group, such as a master or worker group."""  
    