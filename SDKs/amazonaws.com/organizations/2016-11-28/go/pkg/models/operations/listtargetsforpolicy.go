// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListTargetsForPolicyQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListTargetsForPolicyXAmzTargetEnum
type ListTargetsForPolicyXAmzTargetEnum string

const (
	ListTargetsForPolicyXAmzTargetEnumAwsOrganizationsV20161128ListTargetsForPolicy ListTargetsForPolicyXAmzTargetEnum = "AWSOrganizationsV20161128.ListTargetsForPolicy"
)

func (e *ListTargetsForPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSOrganizationsV20161128.ListTargetsForPolicy":
		*e = ListTargetsForPolicyXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTargetsForPolicyXAmzTargetEnum: %s", s)
	}
}

type ListTargetsForPolicyHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListTargetsForPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListTargetsForPolicyRequest struct {
	QueryParams ListTargetsForPolicyQueryParams
	Headers     ListTargetsForPolicyHeaders
	Request     shared.ListTargetsForPolicyRequest `request:"mediaType=application/json"`
}

type ListTargetsForPolicyResponse struct {
	// AWSOrganizationsNotInUseException
	AWSOrganizationsNotInUseException interface{}
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InvalidInputException
	InvalidInputException interface{}
	// Success
	ListTargetsForPolicyResponse *shared.ListTargetsForPolicyResponse
	// PolicyNotFoundException
	PolicyNotFoundException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UnsupportedAPIEndpointException
	UnsupportedAPIEndpointException interface{}
}
