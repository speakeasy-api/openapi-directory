// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETListPolicyVersionsActionEnum
type GETListPolicyVersionsActionEnum string

const (
	GETListPolicyVersionsActionEnumListPolicyVersions GETListPolicyVersionsActionEnum = "ListPolicyVersions"
)

func (e *GETListPolicyVersionsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListPolicyVersions":
		*e = GETListPolicyVersionsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListPolicyVersionsActionEnum: %s", s)
	}
}

// GETListPolicyVersionsVersionEnum
type GETListPolicyVersionsVersionEnum string

const (
	GETListPolicyVersionsVersionEnumTwoThousandAndTen0508 GETListPolicyVersionsVersionEnum = "2010-05-08"
)

func (e *GETListPolicyVersionsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = GETListPolicyVersionsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListPolicyVersionsVersionEnum: %s", s)
	}
}

type GETListPolicyVersionsQueryParams struct {
	Action GETListPolicyVersionsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
	MaxItems *int64 `queryParam:"style=form,explode=true,name=MaxItems"`
	// <p>The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
	PolicyArn string                           `queryParam:"style=form,explode=true,name=PolicyArn"`
	Version   GETListPolicyVersionsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETListPolicyVersionsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListPolicyVersionsRequest struct {
	QueryParams GETListPolicyVersionsQueryParams
	Headers     GETListPolicyVersionsHeaders
}

type GETListPolicyVersionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
