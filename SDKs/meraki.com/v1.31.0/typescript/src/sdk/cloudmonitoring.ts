/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class CloudMonitoring {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Imports event logs related to the onboarding app into elastisearch
   *
   * @remarks
   * Imports event logs related to the onboarding app into elastisearch
   */
  createOrganizationInventoryOnboardingCloudMonitoringExportEvent(
    req: operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/exportEvents",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse =
        new operations.CreateOrganizationInventoryOnboardingCloudMonitoringExportEventResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createOrganizationInventoryOnboardingCloudMonitoringExportEvent202ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
   *
   * @remarks
   * Commits the import operation to complete the onboarding of a device into Dashboard for monitoring.
   */
  createOrganizationInventoryOnboardingCloudMonitoringImport(
    req: operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse =
        new operations.CreateOrganizationInventoryOnboardingCloudMonitoringImportResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.createOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateOrganizationInventoryOnboardingCloudMonitoringImport201ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check the status of a committed Import operation
   *
   * @remarks
   * Check the status of a committed Import operation
   */
  getOrganizationInventoryOnboardingCloudMonitoringImports(
    req: operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/imports",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse =
        new operations.GetOrganizationInventoryOnboardingCloudMonitoringImportsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetOrganizationInventoryOnboardingCloudMonitoringImports200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns list of networks eligible for adding cloud monitored device
   *
   * @remarks
   * Returns list of networks eligible for adding cloud monitored device
   */
  getOrganizationInventoryOnboardingCloudMonitoringNetworks(
    req: operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/organizations/{organizationId}/inventory/onboarding/cloudMonitoring/networks",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse =
        new operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworksResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
            headers: utils.getHeadersFromResponse(httpRes.headers),
          }
        );
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSONObjects =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.GetOrganizationInventoryOnboardingCloudMonitoringNetworks202ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }
}
