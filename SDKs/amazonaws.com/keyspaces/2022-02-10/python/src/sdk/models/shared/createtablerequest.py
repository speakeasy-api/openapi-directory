"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import capacityspecification as shared_capacityspecification
from ..shared import clientsidetimestamps as shared_clientsidetimestamps
from ..shared import comment as shared_comment
from ..shared import encryptionspecification as shared_encryptionspecification
from ..shared import pointintimerecovery as shared_pointintimerecovery
from ..shared import schemadefinition as shared_schemadefinition
from ..shared import tag as shared_tag
from ..shared import timetolive as shared_timetolive
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTableRequest:
    
    keyspace_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyspaceName') }})  
    schema_definition: shared_schemadefinition.SchemaDefinition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaDefinition') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableName') }})  
    capacity_specification: Optional[shared_capacityspecification.CapacitySpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacitySpecification'), 'exclude': lambda f: f is None }})  
    client_side_timestamps: Optional[shared_clientsidetimestamps.ClientSideTimestamps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSideTimestamps'), 'exclude': lambda f: f is None }})  
    comment: Optional[shared_comment.Comment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})  
    default_time_to_live: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTimeToLive'), 'exclude': lambda f: f is None }})  
    encryption_specification: Optional[shared_encryptionspecification.EncryptionSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionSpecification'), 'exclude': lambda f: f is None }})  
    point_in_time_recovery: Optional[shared_pointintimerecovery.PointInTimeRecovery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointInTimeRecovery'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    ttl: Optional[shared_timetolive.TimeToLive] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})  
    