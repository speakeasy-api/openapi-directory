"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetailsLinkProposalInitiatingProductEnum(str, Enum):
    r"""Output only. The source of this proposal."""
    LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED = 'LINK_PROPOSAL_INITIATING_PRODUCT_UNSPECIFIED'
    GOOGLE_ANALYTICS = 'GOOGLE_ANALYTICS'
    LINKED_PRODUCT = 'LINKED_PRODUCT'

class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetailsLinkProposalStateEnum(str, Enum):
    r"""Output only. The state of this proposal."""
    LINK_PROPOSAL_STATE_UNSPECIFIED = 'LINK_PROPOSAL_STATE_UNSPECIFIED'
    AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS = 'AWAITING_REVIEW_FROM_GOOGLE_ANALYTICS'
    AWAITING_REVIEW_FROM_LINKED_PRODUCT = 'AWAITING_REVIEW_FROM_LINKED_PRODUCT'
    WITHDRAWN = 'WITHDRAWN'
    DECLINED = 'DECLINED'
    EXPIRED = 'EXPIRED'
    OBSOLETE = 'OBSOLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1alphaLinkProposalStatusDetails:
    r"""Status information for a link proposal."""
    
    link_proposal_initiating_product: Optional[GoogleAnalyticsAdminV1alphaLinkProposalStatusDetailsLinkProposalInitiatingProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkProposalInitiatingProduct'), 'exclude': lambda f: f is None }})
    r"""Output only. The source of this proposal."""  
    link_proposal_state: Optional[GoogleAnalyticsAdminV1alphaLinkProposalStatusDetailsLinkProposalStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkProposalState'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of this proposal."""  
    requestor_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestorEmail'), 'exclude': lambda f: f is None }})
    r"""Output only. The email address of the user that proposed this linkage."""  
    