// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAdvertiseByoipCidrActionEnum
type GETAdvertiseByoipCidrActionEnum string

const (
	GETAdvertiseByoipCidrActionEnumAdvertiseByoipCidr GETAdvertiseByoipCidrActionEnum = "AdvertiseByoipCidr"
)

func (e GETAdvertiseByoipCidrActionEnum) ToPointer() *GETAdvertiseByoipCidrActionEnum {
	return &e
}

func (e *GETAdvertiseByoipCidrActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AdvertiseByoipCidr":
		*e = GETAdvertiseByoipCidrActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAdvertiseByoipCidrActionEnum: %v", v)
	}
}

// GETAdvertiseByoipCidrVersionEnum
type GETAdvertiseByoipCidrVersionEnum string

const (
	GETAdvertiseByoipCidrVersionEnumTwoThousandAndSixteen1115 GETAdvertiseByoipCidrVersionEnum = "2016-11-15"
)

func (e GETAdvertiseByoipCidrVersionEnum) ToPointer() *GETAdvertiseByoipCidrVersionEnum {
	return &e
}

func (e *GETAdvertiseByoipCidrVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETAdvertiseByoipCidrVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAdvertiseByoipCidrVersionEnum: %v", v)
	}
}

type GETAdvertiseByoipCidrRequest struct {
	Action GETAdvertiseByoipCidrActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.
	Cidr string `queryParam:"style=form,explode=true,name=Cidr"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun            *bool                            `queryParam:"style=form,explode=true,name=DryRun"`
	Version           GETAdvertiseByoipCidrVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAdvertiseByoipCidrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
