/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LoggingConfig } from "./loggingconfig";
import { QueryList } from "./querylist";
import { Expose, Type } from "class-transformer";

/**
 * A Dataproc job for running Trino (https://trino.io/) queries. IMPORTANT: The Dataproc Trino Optional Component (https://cloud.google.com/dataproc/docs/concepts/components/trino) must be enabled when the cluster is created to submit a Trino job to the cluster.
 */
export class TrinoJob extends SpeakeasyBase {
  /**
   * Optional. Trino client tags to attach to this query
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientTags" })
  clientTags?: string[];

  /**
   * Optional. Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "continueOnFailure" })
  continueOnFailure?: boolean;

  /**
   * The runtime logging config of the job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loggingConfig" })
  @Type(() => LoggingConfig)
  loggingConfig?: LoggingConfig;

  /**
   * Optional. The format in which query output will be displayed. See the Trino documentation for supported output formats
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputFormat" })
  outputFormat?: string;

  /**
   * Optional. A mapping of property names to values. Used to set Trino session properties (https://trino.io/docs/current/sql/set-session.html) Equivalent to using the --session flag in the Trino CLI
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: Record<string, string>;

  /**
   * The HCFS URI of the script that contains SQL queries.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryFileUri" })
  queryFileUri?: string;

  /**
   * A list of queries to run on a cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryList" })
  @Type(() => QueryList)
  queryList?: QueryList;
}
