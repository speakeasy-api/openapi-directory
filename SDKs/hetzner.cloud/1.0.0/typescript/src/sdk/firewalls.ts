/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Firewalls can limit the network access to or from your resources.
 *
 * @remarks
 *
 * * When applying a firewall with no `in` rule all inbound traffic will be dropped. The default for `in` is `DROP`.
 * * When applying a firewall with no `out` rule all outbound traffic will be accepted. The default for `out` is `ACCEPT`.
 *
 */
export class Firewalls {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a Firewall
   *
   * @remarks
   * Deletes a Firewall.
   *
   * #### Call specific error codes
   *
   * | Code                 | Description                               |
   * |--------------------- |-------------------------------------------|
   * | `resource_in_use`    | Firewall must not be in use to be deleted |
   *
   */
  deleteFirewallsId(
    req: operations.DeleteFirewallsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFirewallsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteFirewallsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/firewalls/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteFirewallsIdResponse =
        new operations.DeleteFirewallsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get all Firewalls
   *
   * @remarks
   * Returns all Firewall objects.
   */
  getFirewalls(
    req: operations.GetFirewallsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFirewallsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFirewallsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/firewalls";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFirewallsResponse =
        new operations.GetFirewallsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallsResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetFirewallsFirewallsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a Firewall
   *
   * @remarks
   * Gets a specific Firewall object.
   */
  getFirewallsId(
    req: operations.GetFirewallsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFirewallsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFirewallsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/firewalls/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFirewallsIdResponse =
        new operations.GetFirewallsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetFirewallsIdFirewallResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a Firewall
   *
   * @remarks
   * Creates a new Firewall.
   *
   * #### Call specific error codes
   *
   * | Code                          | Description                                                   |
   * |------------------------------ |-------------------------------------------------------------- |
   * | `server_already_added`        | Server added more than one time to resource                   |
   * | `incompatible_network_type`   | The Network type is incompatible for the given resource       |
   * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
   *
   */
  postFirewalls(
    req: operations.PostFirewallsCreateFirewallRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFirewallsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFirewallsCreateFirewallRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/firewalls";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFirewallsResponse =
        new operations.PostFirewallsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFirewallResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFirewallsCreateFirewallResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a Firewall
   *
   * @remarks
   * Updates the Firewall.
   *
   * Note that when updating labels, the Firewall's current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
   *
   * Note: if the Firewall object changes during the request, the response will be a “conflict” error.
   *
   */
  putFirewallsId(
    req: operations.PutFirewallsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutFirewallsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutFirewallsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/firewalls/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutFirewallsIdResponse =
        new operations.PutFirewallsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firewallResponse = utils.objectToClass(
              httpRes?.data,
              operations.PutFirewallsIdFirewallResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
