// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmEventbusProtoConditionOperatorEnum - Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
type EnterpriseCrmEventbusProtoConditionOperatorEnum string

const (
	EnterpriseCrmEventbusProtoConditionOperatorEnumUnset        EnterpriseCrmEventbusProtoConditionOperatorEnum = "UNSET"
	EnterpriseCrmEventbusProtoConditionOperatorEnumEquals       EnterpriseCrmEventbusProtoConditionOperatorEnum = "EQUALS"
	EnterpriseCrmEventbusProtoConditionOperatorEnumContains     EnterpriseCrmEventbusProtoConditionOperatorEnum = "CONTAINS"
	EnterpriseCrmEventbusProtoConditionOperatorEnumLessThan     EnterpriseCrmEventbusProtoConditionOperatorEnum = "LESS_THAN"
	EnterpriseCrmEventbusProtoConditionOperatorEnumGreaterThan  EnterpriseCrmEventbusProtoConditionOperatorEnum = "GREATER_THAN"
	EnterpriseCrmEventbusProtoConditionOperatorEnumExists       EnterpriseCrmEventbusProtoConditionOperatorEnum = "EXISTS"
	EnterpriseCrmEventbusProtoConditionOperatorEnumDoesNotExist EnterpriseCrmEventbusProtoConditionOperatorEnum = "DOES_NOT_EXIST"
	EnterpriseCrmEventbusProtoConditionOperatorEnumIsEmpty      EnterpriseCrmEventbusProtoConditionOperatorEnum = "IS_EMPTY"
	EnterpriseCrmEventbusProtoConditionOperatorEnumIsNotEmpty   EnterpriseCrmEventbusProtoConditionOperatorEnum = "IS_NOT_EMPTY"
)

func (e EnterpriseCrmEventbusProtoConditionOperatorEnum) ToPointer() *EnterpriseCrmEventbusProtoConditionOperatorEnum {
	return &e
}

func (e *EnterpriseCrmEventbusProtoConditionOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSET":
		fallthrough
	case "EQUALS":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "EXISTS":
		fallthrough
	case "DOES_NOT_EXIST":
		fallthrough
	case "IS_EMPTY":
		fallthrough
	case "IS_NOT_EMPTY":
		*e = EnterpriseCrmEventbusProtoConditionOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoConditionOperatorEnum: %v", v)
	}
}

// EnterpriseCrmEventbusProtoCondition - Condition that uses `operator` to evaluate the key against the value.
type EnterpriseCrmEventbusProtoCondition struct {
	// Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.
	EventPropertyKey *string `json:"eventPropertyKey,omitempty"`
	// Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.
	Operator *EnterpriseCrmEventbusProtoConditionOperatorEnum `json:"operator,omitempty"`
	// Used for define type for values. Currently supported value types include int, string, double, array, and any proto message.
	Value *EnterpriseCrmEventbusProtoValueType `json:"value,omitempty"`
}
