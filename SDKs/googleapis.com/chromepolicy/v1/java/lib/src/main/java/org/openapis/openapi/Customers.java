/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Customers {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Customers(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse chromepolicyCustomersPoliciesGroupsBatchDelete(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest.class, baseUrl, "/v1/{customer}/policies/groups:batchDelete", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchDeleteResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyResponse chromepolicyCustomersPoliciesGroupsBatchModify(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyRequest.class, baseUrl, "/v1/{customer}/policies/groups:batchModify", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsBatchModifyResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest.class, baseUrl, "/v1/{customer}/policies/groups:listGroupPriorityOrdering", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1ListGroupPriorityOrderingResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse.class);
                res.googleChromePolicyVersionsV1ListGroupPriorityOrderingResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest.class, baseUrl, "/v1/{customer}/policies/groups:updateGroupPriorityOrdering", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Creates a certificate at a specified OU for a customer.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse chromepolicyCustomersPoliciesNetworksDefineCertificate(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest.class, baseUrl, "/v1/{customer}/policies/networks:defineCertificate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1DefineCertificateRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineCertificateResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1DefineCertificateResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1DefineCertificateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1DefineCertificateResponse.class);
                res.googleChromePolicyVersionsV1DefineCertificateResponse = out;
            }
        }

        return res;
    }

    /**
     * Define a new network.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse chromepolicyCustomersPoliciesNetworksDefineNetwork(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest.class, baseUrl, "/v1/{customer}/policies/networks:defineNetwork", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1DefineNetworkRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksDefineNetworkResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1DefineNetworkResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1DefineNetworkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1DefineNetworkResponse.class);
                res.googleChromePolicyVersionsV1DefineNetworkResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove an existing certificate by guid.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse chromepolicyCustomersPoliciesNetworksRemoveCertificate(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest.class, baseUrl, "/v1/{customer}/policies/networks:removeCertificate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1RemoveCertificateRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveCertificateResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1RemoveCertificateResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleChromePolicyVersionsV1RemoveCertificateResponse = out;
            }
        }

        return res;
    }

    /**
     * Remove an existing network by guid.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse chromepolicyCustomersPoliciesNetworksRemoveNetwork(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest.class, baseUrl, "/v1/{customer}/policies/networks:removeNetwork", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1RemoveNetworkRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesNetworksRemoveNetworkResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1RemoveNetworkResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleChromePolicyVersionsV1RemoveNetworkResponse = out;
            }
        }

        return res;
    }

    /**
     * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse chromepolicyCustomersPoliciesOrgunitsBatchInherit(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest.class, baseUrl, "/v1/{customer}/policies/orgunits:batchInherit", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchInheritResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse chromepolicyCustomersPoliciesOrgunitsBatchModify(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest.class, baseUrl, "/v1/{customer}/policies/orgunits:batchModify", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesOrgunitsBatchModifyResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Gets the resolved policy values for a list of policies that match a search query.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveResponse chromepolicyCustomersPoliciesResolve(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveRequest.class, baseUrl, "/v1/{customer}/policies:resolve", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleChromePolicyVersionsV1ResolveRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPoliciesResolveResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1ResolveResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ResolveResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ResolveResponse.class);
                res.googleChromePolicyVersionsV1ResolveResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a specific policy schema for a customer by its resource name.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetResponse chromepolicyCustomersPolicySchemasGet(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasGetResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1PolicySchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1PolicySchema out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1PolicySchema.class);
                res.googleChromePolicyVersionsV1PolicySchema = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of policy schemas that match a specified filter value for a given customer.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListResponse chromepolicyCustomersPolicySchemasList(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListRequest request, org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListRequest.class, baseUrl, "/v1/{parent}/policySchemas", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListResponse res = new org.openapis.openapi.models.operations.ChromepolicyCustomersPolicySchemasListResponse(contentType, httpRes.statusCode()) {{
            googleChromePolicyVersionsV1ListPolicySchemasResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ListPolicySchemasResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleChromePolicyVersionsV1ListPolicySchemasResponse.class);
                res.googleChromePolicyVersionsV1ListPolicySchemasResponse = out;
            }
        }

        return res;
    }
}