/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Receiver - A receiver of reports from the data hub
 */
public class Receiver {
    /**
     * Display ready description of the receiver
     */
    @JsonProperty("description")
    public String description;
    public Receiver withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * What items to include in the report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdictionalFilters")
    public ReceiverJurisdictionalFilters[] jurisdictionalFilters;
    public Receiver withJurisdictionalFilters(ReceiverJurisdictionalFilters[] jurisdictionalFilters) {
        this.jurisdictionalFilters = jurisdictionalFilters;
        return this;
    }
    
    /**
     * The metadata associated with an setting
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    public SettingMetadata meta;
    public Receiver withMeta(SettingMetadata meta) {
        this.meta = meta;
        return this;
    }
    
    /**
     * The unique name for the receiver. Should include the organization name as a prefix.
     */
    @JsonProperty("name")
    public String name;
    public Receiver withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The name of the organization that this receiver belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationName")
    public String organizationName;
    public Receiver withOrganizationName(String organizationName) {
        this.organizationName = organizationName;
        return this;
    }
    
    /**
     * When the report is sent if not immediately
     */
    @JsonProperty("timing")
    public ReceiverTiming timing;
    public Receiver withTiming(ReceiverTiming timing) {
        this.timing = timing;
        return this;
    }
    
    /**
     * The topic of for this receiver. Must match the supported topics.
     */
    @JsonProperty("topic")
    public String topic;
    public Receiver withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * How the report is translated from the sender. A report can be sent in multiple ways.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("translations")
    public Object[] translations;
    public Receiver withTranslations(Object[] translations) {
        this.translations = translations;
        return this;
    }
    
}
