// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteEventDataStoreXAmzTargetEnum
type DeleteEventDataStoreXAmzTargetEnum string

const (
	DeleteEventDataStoreXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101DeleteEventDataStore DeleteEventDataStoreXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteEventDataStore"
)

func (e *DeleteEventDataStoreXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteEventDataStore":
		*e = DeleteEventDataStoreXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteEventDataStoreXAmzTargetEnum: %s", s)
	}
}

type DeleteEventDataStoreHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteEventDataStoreXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteEventDataStoreRequest struct {
	Headers DeleteEventDataStoreHeaders
	Request shared.DeleteEventDataStoreRequest `request:"mediaType=application/json"`
}

type DeleteEventDataStoreResponse struct {
	// ChannelExistsForEDSException
	ChannelExistsForEDSException interface{}
	ContentType                  string
	// Success
	DeleteEventDataStoreResponse map[string]interface{}
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreHasOngoingImportException
	EventDataStoreHasOngoingImportException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// EventDataStoreTerminationProtectedException
	EventDataStoreTerminationProtectedException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InsufficientDependencyServiceAccessPermissionException
	InsufficientDependencyServiceAccessPermissionException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// NotOrganizationMasterAccountException
	NotOrganizationMasterAccountException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
