/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ValueFilter {
    /**
     * The `operator_name` applied to the query, such as *price_greater_than*. The filter can work against both types of filters defined in the schema for your data source: 1. `operator_name`, where the query filters results by the property that matches the value. 2. `greater_than_operator_name` or `less_than_operator_name` in your schema. The query filters the results for the property values that are greater than or less than the supplied value in the query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operatorName")
    public String operatorName;

    public ValueFilter withOperatorName(String operatorName) {
        this.operatorName = operatorName;
        return this;
    }
    
    /**
     * Definition of a single value with generic type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    public Value value;

    public ValueFilter withValue(Value value) {
        this.value = value;
        return this;
    }
    
    public ValueFilter(){}
}
