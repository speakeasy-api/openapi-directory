/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The details of the audio detection config.
 */
export class UpdateDeviceCameraSenseRequestBodyAudioDetection extends SpeakeasyBase {
  /**
   * Boolean indicating if audio detection is enabled(true) or disabled(false) on the camera
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

export class UpdateDeviceCameraSenseRequestBody extends SpeakeasyBase {
  /**
   * The details of the audio detection config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audioDetection" })
  @Type(() => UpdateDeviceCameraSenseRequestBodyAudioDetection)
  audioDetection?: UpdateDeviceCameraSenseRequestBodyAudioDetection;

  /**
   * The ID of the object detection model
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectionModelId" })
  detectionModelId?: string;

  /**
   * The ID of the MQTT broker to be enabled on the camera. A value of null will disable MQTT on the camera
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mqttBrokerId" })
  mqttBrokerId?: string;

  /**
   * Boolean indicating if sense(license) is enabled(true) or disabled(false) on the camera
   */
  @SpeakeasyMetadata()
  @Expose({ name: "senseEnabled" })
  senseEnabled?: boolean;
}

export class UpdateDeviceCameraSenseRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateDeviceCameraSenseRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=serial",
  })
  serial: string;
}

export class UpdateDeviceCameraSenseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateDeviceCameraSense200ApplicationJSONObject?: Record<string, any>;
}
