"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VisionExamples:
    r"""Resources that manage image examples."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_example(self, request: operations.AddExampleRequest, security: operations.AddExampleSecurity) -> operations.AddExampleResponse:
        r"""Create an Example
        Adds an example with the specified label to a dataset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddExampleRequest, base_url, '/v2/vision/datasets/{datasetId}/examples', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddExampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Example])
                res.example = out

        return res

    def get_examples_by_label_1(self, request: operations.GetExamplesByLabel1Request, security: operations.GetExamplesByLabel1Security) -> operations.GetExamplesByLabel1Response:
        r"""Get All Examples for Label
        Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/examples'
        
        query_params = utils.get_query_params(operations.GetExamplesByLabel1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExamplesByLabel1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExampleList])
                res.example_list = out

        return res

    def get_examples_1(self, request: operations.GetExamples1Request, security: operations.GetExamples1Security) -> operations.GetExamples1Response:
        r"""Get All Examples
        Returns all the examples for the specified dataset. By default, returns examples created by uploading them from a .zip file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExamples1Request, base_url, '/v2/vision/datasets/{datasetId}/examples', request)
        
        query_params = utils.get_query_params(operations.GetExamples1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExamples1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExampleList])
                res.example_list = out

        return res

    def provide_feedback_1(self, request: operations.ProvideFeedback1RequestBody, security: operations.ProvideFeedback1Security) -> operations.ProvideFeedback1Response:
        r"""Create a Feedback Example
        Adds a feedback example to the dataset associated with the specified model.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/feedback'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProvideFeedback1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Example])
                res.example = out

        return res

    def update_dataset_async_1(self, request: operations.UpdateDatasetAsync1RequestBody, security: operations.UpdateDatasetAsync1Security) -> operations.UpdateDatasetAsync1Response:
        r"""Create Feedback Examples From a Zip File
        Adds feedback examples to the dataset associated with the specified object detection model.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/vision/bulkfeedback'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDatasetAsync1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    def update_dataset_async_2(self, request: operations.UpdateDatasetAsync2Request, security: operations.UpdateDatasetAsync2Security) -> operations.UpdateDatasetAsync2Response:
        r"""Create Examples From a Zip File
        Adds examples from a .zip file to a dataset. You can use this call only with a dataset that was created from a .zip file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDatasetAsync2Request, base_url, '/v2/vision/datasets/{datasetId}/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDatasetAsync2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dataset])
                res.dataset = out

        return res

    