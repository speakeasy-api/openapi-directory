/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a snapshot.
   */
  dataflowProjectsDeleteSnapshots(
    req: operations.DataflowProjectsDeleteSnapshotsRequest,
    security: operations.DataflowProjectsDeleteSnapshotsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsDeleteSnapshotsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsDeleteSnapshotsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/snapshots",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsDeleteSnapshotsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsDeleteSnapshotsResponse =
        new operations.DataflowProjectsDeleteSnapshotsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSnapshotResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the jobs of a project across all regions.
   */
  dataflowProjectsJobsAggregated(
    req: operations.DataflowProjectsJobsAggregatedRequest,
    security: operations.DataflowProjectsJobsAggregatedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsAggregatedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsAggregatedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs:aggregated",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsAggregatedSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsAggregatedResponse =
        new operations.DataflowProjectsJobsAggregatedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
   */
  dataflowProjectsJobsCreate(
    req: operations.DataflowProjectsJobsCreateRequest,
    security: operations.DataflowProjectsJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsCreateResponse =
        new operations.DataflowProjectsJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get encoded debug configuration for component. Not cacheable.
   */
  dataflowProjectsJobsDebugGetConfig(
    req: operations.DataflowProjectsJobsDebugGetConfigRequest,
    security: operations.DataflowProjectsJobsDebugGetConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsDebugGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsDebugGetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getDebugConfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsDebugGetConfigSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsDebugGetConfigResponse =
        new operations.DataflowProjectsJobsDebugGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDebugConfigResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDebugConfigResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send encoded debug capture data for component.
   */
  dataflowProjectsJobsDebugSendCapture(
    req: operations.DataflowProjectsJobsDebugSendCaptureRequest,
    security: operations.DataflowProjectsJobsDebugSendCaptureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsDebugSendCaptureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsDebugSendCaptureRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sendDebugCaptureRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsDebugSendCaptureSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsDebugSendCaptureResponse =
        new operations.DataflowProjectsJobsDebugSendCaptureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendDebugCaptureResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
   */
  dataflowProjectsJobsGet(
    req: operations.DataflowProjectsJobsGetRequest,
    security: operations.DataflowProjectsJobsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsGetResponse =
        new operations.DataflowProjectsJobsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
   */
  dataflowProjectsJobsGetMetrics(
    req: operations.DataflowProjectsJobsGetMetricsRequest,
    security: operations.DataflowProjectsJobsGetMetricsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsGetMetricsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsGetMetricsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/metrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsGetMetricsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsGetMetricsResponse =
        new operations.DataflowProjectsJobsGetMetricsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobMetrics = utils.objectToClass(
              httpRes?.data,
              shared.JobMetrics
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.
   */
  dataflowProjectsJobsList(
    req: operations.DataflowProjectsJobsListRequest,
    security: operations.DataflowProjectsJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsListResponse =
        new operations.DataflowProjectsJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
   */
  dataflowProjectsJobsMessagesList(
    req: operations.DataflowProjectsJobsMessagesListRequest,
    security: operations.DataflowProjectsJobsMessagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsMessagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsMessagesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/messages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsMessagesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsMessagesListResponse =
        new operations.DataflowProjectsJobsMessagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobMessagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobMessagesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Snapshot the state of a streaming job.
   */
  dataflowProjectsJobsSnapshot(
    req: operations.DataflowProjectsJobsSnapshotRequest,
    security: operations.DataflowProjectsJobsSnapshotSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsSnapshotResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsSnapshotRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}:snapshot",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "snapshotJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsSnapshotSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsSnapshotResponse =
        new operations.DataflowProjectsJobsSnapshotResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.snapshot = utils.objectToClass(httpRes?.data, shared.Snapshot);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
   */
  dataflowProjectsJobsUpdate(
    req: operations.DataflowProjectsJobsUpdateRequest,
    security: operations.DataflowProjectsJobsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsUpdateResponse =
        new operations.DataflowProjectsJobsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Leases a dataflow WorkItem to run.
   */
  dataflowProjectsJobsWorkItemsLease(
    req: operations.DataflowProjectsJobsWorkItemsLeaseRequest,
    security: operations.DataflowProjectsJobsWorkItemsLeaseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsWorkItemsLeaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsWorkItemsLeaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "leaseWorkItemRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsJobsWorkItemsLeaseSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsWorkItemsLeaseResponse =
        new operations.DataflowProjectsJobsWorkItemsLeaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaseWorkItemResponse = utils.objectToClass(
              httpRes?.data,
              shared.LeaseWorkItemResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reports the status of dataflow WorkItems leased by a worker.
   */
  dataflowProjectsJobsWorkItemsReportStatus(
    req: operations.DataflowProjectsJobsWorkItemsReportStatusRequest,
    security: operations.DataflowProjectsJobsWorkItemsReportStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsJobsWorkItemsReportStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsJobsWorkItemsReportStatusRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportWorkItemStatusRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsJobsWorkItemsReportStatusSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsJobsWorkItemsReportStatusResponse =
        new operations.DataflowProjectsJobsWorkItemsReportStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reportWorkItemStatusResponse = utils.objectToClass(
              httpRes?.data,
              shared.ReportWorkItemStatusResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Launch a job with a FlexTemplate.
   */
  dataflowProjectsLocationsFlexTemplatesLaunch(
    req: operations.DataflowProjectsLocationsFlexTemplatesLaunchRequest,
    security: operations.DataflowProjectsLocationsFlexTemplatesLaunchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsFlexTemplatesLaunchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsFlexTemplatesLaunchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "launchFlexTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsFlexTemplatesLaunchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsFlexTemplatesLaunchResponse =
        new operations.DataflowProjectsLocationsFlexTemplatesLaunchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.launchFlexTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.LaunchFlexTemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API.
   */
  dataflowProjectsLocationsJobsCreate(
    req: operations.DataflowProjectsLocationsJobsCreateRequest,
    security: operations.DataflowProjectsLocationsJobsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsCreateResponse =
        new operations.DataflowProjectsLocationsJobsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get encoded debug configuration for component. Not cacheable.
   */
  dataflowProjectsLocationsJobsDebugGetConfig(
    req: operations.DataflowProjectsLocationsJobsDebugGetConfigRequest,
    security: operations.DataflowProjectsLocationsJobsDebugGetConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsDebugGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsDebugGetConfigRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getDebugConfigRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsDebugGetConfigSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsDebugGetConfigResponse =
        new operations.DataflowProjectsLocationsJobsDebugGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDebugConfigResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDebugConfigResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send encoded debug capture data for component.
   */
  dataflowProjectsLocationsJobsDebugSendCapture(
    req: operations.DataflowProjectsLocationsJobsDebugSendCaptureRequest,
    security: operations.DataflowProjectsLocationsJobsDebugSendCaptureSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsDebugSendCaptureResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsDebugSendCaptureRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sendDebugCaptureRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsDebugSendCaptureSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsDebugSendCaptureResponse =
        new operations.DataflowProjectsLocationsJobsDebugSendCaptureResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendDebugCaptureResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.
   */
  dataflowProjectsLocationsJobsGet(
    req: operations.DataflowProjectsLocationsJobsGetRequest,
    security: operations.DataflowProjectsLocationsJobsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsGetResponse =
        new operations.DataflowProjectsLocationsJobsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
   */
  dataflowProjectsLocationsJobsGetExecutionDetails(
    req: operations.DataflowProjectsLocationsJobsGetExecutionDetailsRequest,
    security: operations.DataflowProjectsLocationsJobsGetExecutionDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsGetExecutionDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DataflowProjectsLocationsJobsGetExecutionDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsGetExecutionDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsGetExecutionDetailsResponse =
        new operations.DataflowProjectsLocationsJobsGetExecutionDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobExecutionDetails = utils.objectToClass(
              httpRes?.data,
              shared.JobExecutionDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
   */
  dataflowProjectsLocationsJobsGetMetrics(
    req: operations.DataflowProjectsLocationsJobsGetMetricsRequest,
    security: operations.DataflowProjectsLocationsJobsGetMetricsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsGetMetricsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsGetMetricsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsGetMetricsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsGetMetricsResponse =
        new operations.DataflowProjectsLocationsJobsGetMetricsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobMetrics = utils.objectToClass(
              httpRes?.data,
              shared.JobMetrics
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.
   */
  dataflowProjectsLocationsJobsList(
    req: operations.DataflowProjectsLocationsJobsListRequest,
    security: operations.DataflowProjectsLocationsJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsListResponse =
        new operations.DataflowProjectsLocationsJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.
   */
  dataflowProjectsLocationsJobsMessagesList(
    req: operations.DataflowProjectsLocationsJobsMessagesListRequest,
    security: operations.DataflowProjectsLocationsJobsMessagesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsMessagesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsMessagesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsMessagesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsMessagesListResponse =
        new operations.DataflowProjectsLocationsJobsMessagesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listJobMessagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListJobMessagesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Snapshot the state of a streaming job.
   */
  dataflowProjectsLocationsJobsSnapshot(
    req: operations.DataflowProjectsLocationsJobsSnapshotRequest,
    security: operations.DataflowProjectsLocationsJobsSnapshotSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsSnapshotResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsSnapshotRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "snapshotJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsSnapshotSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsSnapshotResponse =
        new operations.DataflowProjectsLocationsJobsSnapshotResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.snapshot = utils.objectToClass(httpRes?.data, shared.Snapshot);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists snapshots.
   */
  dataflowProjectsLocationsJobsSnapshotsList(
    req: operations.DataflowProjectsLocationsJobsSnapshotsListRequest,
    security: operations.DataflowProjectsLocationsJobsSnapshotsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsSnapshotsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsSnapshotsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsSnapshotsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsSnapshotsListResponse =
        new operations.DataflowProjectsLocationsJobsSnapshotsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSnapshotsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSnapshotsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.
   */
  dataflowProjectsLocationsJobsStagesGetExecutionDetails(
    req: operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest,
    security: operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse =
        new operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.stageExecutionDetails = utils.objectToClass(
              httpRes?.data,
              shared.StageExecutionDetails
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.
   */
  dataflowProjectsLocationsJobsUpdate(
    req: operations.DataflowProjectsLocationsJobsUpdateRequest,
    security: operations.DataflowProjectsLocationsJobsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "jobInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsJobsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsUpdateResponse =
        new operations.DataflowProjectsLocationsJobsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Leases a dataflow WorkItem to run.
   */
  dataflowProjectsLocationsJobsWorkItemsLease(
    req: operations.DataflowProjectsLocationsJobsWorkItemsLeaseRequest,
    security: operations.DataflowProjectsLocationsJobsWorkItemsLeaseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsWorkItemsLeaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsJobsWorkItemsLeaseRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "leaseWorkItemRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsWorkItemsLeaseSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsWorkItemsLeaseResponse =
        new operations.DataflowProjectsLocationsJobsWorkItemsLeaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.leaseWorkItemResponse = utils.objectToClass(
              httpRes?.data,
              shared.LeaseWorkItemResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reports the status of dataflow WorkItems leased by a worker.
   */
  dataflowProjectsLocationsJobsWorkItemsReportStatus(
    req: operations.DataflowProjectsLocationsJobsWorkItemsReportStatusRequest,
    security: operations.DataflowProjectsLocationsJobsWorkItemsReportStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsJobsWorkItemsReportStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DataflowProjectsLocationsJobsWorkItemsReportStatusRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "reportWorkItemStatusRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsJobsWorkItemsReportStatusSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsJobsWorkItemsReportStatusResponse =
        new operations.DataflowProjectsLocationsJobsWorkItemsReportStatusResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.reportWorkItemStatusResponse = utils.objectToClass(
              httpRes?.data,
              shared.ReportWorkItemStatusResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a snapshot.
   */
  dataflowProjectsLocationsSnapshotsDelete(
    req: operations.DataflowProjectsLocationsSnapshotsDeleteRequest,
    security: operations.DataflowProjectsLocationsSnapshotsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsSnapshotsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsSnapshotsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsSnapshotsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsSnapshotsDeleteResponse =
        new operations.DataflowProjectsLocationsSnapshotsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSnapshotResponse = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a snapshot.
   */
  dataflowProjectsLocationsSnapshotsGet(
    req: operations.DataflowProjectsLocationsSnapshotsGetRequest,
    security: operations.DataflowProjectsLocationsSnapshotsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsSnapshotsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsSnapshotsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsSnapshotsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsSnapshotsGetResponse =
        new operations.DataflowProjectsLocationsSnapshotsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.snapshot = utils.objectToClass(httpRes?.data, shared.Snapshot);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists snapshots.
   */
  dataflowProjectsLocationsSnapshotsList(
    req: operations.DataflowProjectsLocationsSnapshotsListRequest,
    security: operations.DataflowProjectsLocationsSnapshotsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsSnapshotsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsSnapshotsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/snapshots",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsSnapshotsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsSnapshotsListResponse =
        new operations.DataflowProjectsLocationsSnapshotsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSnapshotsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSnapshotsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
   */
  dataflowProjectsLocationsTemplatesCreate(
    req: operations.DataflowProjectsLocationsTemplatesCreateRequest,
    security: operations.DataflowProjectsLocationsTemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsTemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsTemplatesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/templates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createJobFromTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsTemplatesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsTemplatesCreateResponse =
        new operations.DataflowProjectsLocationsTemplatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the template associated with a template.
   */
  dataflowProjectsLocationsTemplatesGet(
    req: operations.DataflowProjectsLocationsTemplatesGetRequest,
    security: operations.DataflowProjectsLocationsTemplatesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsTemplatesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsTemplatesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/templates:get",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsTemplatesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsTemplatesGetResponse =
        new operations.DataflowProjectsLocationsTemplatesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Launch a template.
   */
  dataflowProjectsLocationsTemplatesLaunch(
    req: operations.DataflowProjectsLocationsTemplatesLaunchRequest,
    security: operations.DataflowProjectsLocationsTemplatesLaunchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsTemplatesLaunchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsTemplatesLaunchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/templates:launch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "launchTemplateParameters",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DataflowProjectsLocationsTemplatesLaunchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsTemplatesLaunchResponse =
        new operations.DataflowProjectsLocationsTemplatesLaunchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.launchTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.LaunchTemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send a worker_message to the service.
   */
  dataflowProjectsLocationsWorkerMessages(
    req: operations.DataflowProjectsLocationsWorkerMessagesRequest,
    security: operations.DataflowProjectsLocationsWorkerMessagesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsLocationsWorkerMessagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsLocationsWorkerMessagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/locations/{location}/WorkerMessages",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sendWorkerMessagesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsLocationsWorkerMessagesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsLocationsWorkerMessagesResponse =
        new operations.DataflowProjectsLocationsWorkerMessagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendWorkerMessagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SendWorkerMessagesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a snapshot.
   */
  dataflowProjectsSnapshotsGet(
    req: operations.DataflowProjectsSnapshotsGetRequest,
    security: operations.DataflowProjectsSnapshotsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsSnapshotsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsSnapshotsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/snapshots/{snapshotId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsSnapshotsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsSnapshotsGetResponse =
        new operations.DataflowProjectsSnapshotsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.snapshot = utils.objectToClass(httpRes?.data, shared.Snapshot);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists snapshots.
   */
  dataflowProjectsSnapshotsList(
    req: operations.DataflowProjectsSnapshotsListRequest,
    security: operations.DataflowProjectsSnapshotsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsSnapshotsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsSnapshotsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/snapshots",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsSnapshotsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsSnapshotsListResponse =
        new operations.DataflowProjectsSnapshotsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSnapshotsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSnapshotsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API.
   */
  dataflowProjectsTemplatesCreate(
    req: operations.DataflowProjectsTemplatesCreateRequest,
    security: operations.DataflowProjectsTemplatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsTemplatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsTemplatesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/templates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createJobFromTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsTemplatesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsTemplatesCreateResponse =
        new operations.DataflowProjectsTemplatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.job = utils.objectToClass(httpRes?.data, shared.Job);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the template associated with a template.
   */
  dataflowProjectsTemplatesGet(
    req: operations.DataflowProjectsTemplatesGetRequest,
    security: operations.DataflowProjectsTemplatesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsTemplatesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsTemplatesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/templates:get",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsTemplatesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsTemplatesGetResponse =
        new operations.DataflowProjectsTemplatesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Launch a template.
   */
  dataflowProjectsTemplatesLaunch(
    req: operations.DataflowProjectsTemplatesLaunchRequest,
    security: operations.DataflowProjectsTemplatesLaunchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsTemplatesLaunchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsTemplatesLaunchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/templates:launch",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "launchTemplateParameters",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsTemplatesLaunchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsTemplatesLaunchResponse =
        new operations.DataflowProjectsTemplatesLaunchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.launchTemplateResponse = utils.objectToClass(
              httpRes?.data,
              shared.LaunchTemplateResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Send a worker_message to the service.
   */
  dataflowProjectsWorkerMessages(
    req: operations.DataflowProjectsWorkerMessagesRequest,
    security: operations.DataflowProjectsWorkerMessagesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataflowProjectsWorkerMessagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataflowProjectsWorkerMessagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1b3/projects/{projectId}/WorkerMessages",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "sendWorkerMessagesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataflowProjectsWorkerMessagesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataflowProjectsWorkerMessagesResponse =
        new operations.DataflowProjectsWorkerMessagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendWorkerMessagesResponse = utils.objectToClass(
              httpRes?.data,
              shared.SendWorkerMessagesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
