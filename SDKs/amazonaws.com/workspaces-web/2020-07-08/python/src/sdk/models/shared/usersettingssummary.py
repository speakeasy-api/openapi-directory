"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enabledtype_enum as shared_enabledtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserSettingsSummary:
    r"""The summary of user settings."""
    
    copy_allowed: Optional[shared_enabledtype_enum.EnabledTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyAllowed'), 'exclude': lambda f: f is None }})  
    disconnect_timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disconnectTimeoutInMinutes'), 'exclude': lambda f: f is None }})  
    download_allowed: Optional[shared_enabledtype_enum.EnabledTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('downloadAllowed'), 'exclude': lambda f: f is None }})  
    idle_disconnect_timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idleDisconnectTimeoutInMinutes'), 'exclude': lambda f: f is None }})  
    paste_allowed: Optional[shared_enabledtype_enum.EnabledTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pasteAllowed'), 'exclude': lambda f: f is None }})  
    print_allowed: Optional[shared_enabledtype_enum.EnabledTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printAllowed'), 'exclude': lambda f: f is None }})  
    upload_allowed: Optional[shared_enabledtype_enum.EnabledTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadAllowed'), 'exclude': lambda f: f is None }})  
    user_settings_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userSettingsArn'), 'exclude': lambda f: f is None }})  
    