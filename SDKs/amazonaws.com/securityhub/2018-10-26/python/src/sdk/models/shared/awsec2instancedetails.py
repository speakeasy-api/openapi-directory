"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2instancemetadataoptions as shared_awsec2instancemetadataoptions
from ..shared import awsec2instancemonitoringdetails as shared_awsec2instancemonitoringdetails
from ..shared import awsec2instancenetworkinterfacesdetails as shared_awsec2instancenetworkinterfacesdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2InstanceDetails:
    r"""The details of an Amazon EC2 instance."""
    
    iam_instance_profile_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamInstanceProfileArn'), 'exclude': lambda f: f is None }})  
    image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageId'), 'exclude': lambda f: f is None }})  
    ip_v4_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpV4Addresses'), 'exclude': lambda f: f is None }})  
    ip_v6_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpV6Addresses'), 'exclude': lambda f: f is None }})  
    key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyName'), 'exclude': lambda f: f is None }})  
    launched_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchedAt'), 'exclude': lambda f: f is None }})  
    metadata_options: Optional[shared_awsec2instancemetadataoptions.AwsEc2InstanceMetadataOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataOptions'), 'exclude': lambda f: f is None }})  
    monitoring: Optional[shared_awsec2instancemonitoringdetails.AwsEc2InstanceMonitoringDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Monitoring'), 'exclude': lambda f: f is None }})  
    network_interfaces: Optional[list[shared_awsec2instancenetworkinterfacesdetails.AwsEc2InstanceNetworkInterfacesDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaces'), 'exclude': lambda f: f is None }})  
    subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetId'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    virtualization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VirtualizationType'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    