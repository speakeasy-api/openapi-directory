/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetTransactionsByIdv3Request extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dateRangeFrom",
  })
  dateRangeFrom?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=dateRangeTo",
  })
  dateRangeTo?: number;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ican",
  })
  ican: number;

  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startAfter",
  })
  startAfter?: string;
}

/**
 * Details of the batch run if this transaction was part of a batch.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionBatchItemDetails extends SpeakeasyBase {
  /**
   * The UUID for this item in the batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchItemPublicUuid" })
  batchItemPublicUuid?: string;

  /**
   * The optional name given to the batch at creation time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchName" })
  batchName?: string;

  /**
   * The UUID for this batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchPublicUuid" })
  batchPublicUuid?: string;

  /**
   * The optional job number given to the batch to link it to your own system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobNumber" })
  jobNumber?: string;
}

/**
 * Details of the card used (if applicable)
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedCard extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "alias" })
  alias?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "cardId" })
  cardId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "embossBusinessName" })
  embossBusinessName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "embossCardName" })
  embossCardName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "expiryDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expiryDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "maskedPan" })
  maskedPan?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider?: string;
}

/**
 * The three letter code for the currency - either `EUR` or `GBP`.
 */
export enum GetTransactionsByIdv3CardTransactionsv3TransactionCurrencyCodeEnum {
  Eur = "EUR",
  Gbp = "GBP",
}

/**
 * The currency.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionCurrency extends SpeakeasyBase {
  /**
   * The three letter code for the currency - either `EUR` or `GBP`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: GetTransactionsByIdv3CardTransactionsv3TransactionCurrencyCodeEnum;

  /**
   * The name of the currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;
}

/**
 * Details of the direct debit (if applicable)
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionDirectDebitDetails extends SpeakeasyBase {
  /**
   * The direct debit reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directDebitReference" })
  directDebitReference?: string;

  /**
   * The UUID for the direct debit payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directDebitUuid" })
  directDebitUuid?: string;

  /**
   * the reference of the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateReference" })
  mandateReference?: string;

  /**
   * The UUID for the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateUUid" })
  mandateUUid?: string;

  /**
   * The UUID for the mandate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandateUuid" })
  mandateUuid1?: string;

  /**
   * The Alias of the party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorAlias" })
  originatorAlias?: string;

  /**
   * URL pointing to a large version of the Originator Logo (if available)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorLogoUrlLarge" })
  originatorLogoUrlLarge?: string;

  /**
   * URL pointing to a small version of the Originator Logo (if available)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorLogoUrlSmall" })
  originatorLogoUrlSmall?: string;

  /**
   * The creator of the party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorName" })
  originatorName?: string;

  /**
   * Set by party who sets up the direct debit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originatorReference" })
  originatorReference?: string;
}

/**
 * Details of the FX trade (if applicable)
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionFxTrade extends SpeakeasyBase {
  /**
   * amount of buyCurrency being bought
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buyAmount" })
  buyAmount?: number;

  /**
   * currency which is being bought
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buyCurrency" })
  buyCurrency?: string;

  /**
   * type of trade - BUY or SELL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fixedSide" })
  fixedSide?: string;

  /**
   * The FX provider used to make the trade.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider?: string;

  /**
   * exchange rate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rate4d" })
  rate4d?: number;

  /**
   * amount of sellCurrency being sold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellAmount" })
  sellAmount?: number;

  /**
   * currency which is being sold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellCurrency" })
  sellCurrency?: string;
}

export class GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails extends SpeakeasyBase {
  /**
   * the scheme proprietary data - key pairs separated by | and key/values separated by ^
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data?: string;

  /**
   * the type of proprietary scheme - SCT for SEPA, FPS for Faster Payments etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentCardMerchant extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "acquirerIdDe32" })
  acquirerIdDe32?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "additionalAmtDe54" })
  additionalAmtDe54?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "additionalDataDe124" })
  additionalDataDe124?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "additionalDataDe48" })
  additionalDataDe48?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "authCodeDe38" })
  authCodeDe38?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "authorisedByGps" })
  authorisedByGps?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "avsResult" })
  avsResult?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "billAmt" })
  billAmt?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "billCcy" })
  billCcy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "expiryDate" })
  expiryDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mccCode" })
  mccCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchIdDe42" })
  merchIdDe42?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchNameDe43" })
  merchNameDe43?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mtId" })
  mtId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "posDataDe22" })
  posDataDe22?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "posDataDe61" })
  posDataDe61?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "posTermnlDe41" })
  posTermnlDe41?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "procCode" })
  procCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recordDataDe120" })
  recordDataDe120?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "respCodeDe39" })
  respCodeDe39?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "retRefNoDe37" })
  retRefNoDe37?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "txnAmt4d" })
  txnAmt4d?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "txnCcy" })
  txnCcy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "txnCtry" })
  txnCtry?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "txnDesc" })
  txnDesc?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "txnStatCode" })
  txnStatCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "txnType" })
  txnType?: string;
}

export enum GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentTypeEnum {
  CardMerchant = "CARD_MERCHANT",
  CardAtm = "CARD_ATM",
}

/**
 * Details of the related third party involved in the transaction.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPayment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cardMerchant" })
  @Type(
    () =>
      GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentCardMerchant
  )
  cardMerchant?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentCardMerchant;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyCardPaymentTypeEnum;
}

export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeAccount extends SpeakeasyBase {
  /**
   * The account number of the Withdrawl account in reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountNumber" })
  accountNumber?: string;

  /**
   * The Alias name of the Withdrawl account in reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alias" })
  alias?: string;

  /**
   * The BIC of the Withdrawl account in reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bic" })
  bic?: string;

  /**
   * The BIC of the Withdrawl account in reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iban" })
  iban?: string;

  /**
   * The ID number of the Withdrawl account in reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * (Conditional) Provide this field if using Mode 2 and the payee account is in GBP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nsc" })
  nsc?: string;
}

export enum GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeTypeEnum {
  WithdrawalAccount = "WITHDRAWAL_ACCOUNT",
}

/**
 * Details of the related third party involved in the transaction.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayee extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(
    () =>
      GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeAccount
  )
  account?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyPayeeTypeEnum;
}

export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountAccount extends SpeakeasyBase {
  /**
   * the Account Number of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountNumber" })
  accountNumber?: string;

  /**
   * the name the user gives to the account to help them identify it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alias" })
  alias?: string;

  /**
   * the BIC of the account (provided if currency is EUR).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bic" })
  bic?: string;

  /**
   * the IBAN of the account (provided if currency is EUR).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iban" })
  iban?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * the Sort Code of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nsc" })
  nsc?: string;
}

export enum GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountTypeEnum {
  ExternalAccount = "EXTERNAL_ACCOUNT",
}

/**
 * Details of the related third party involved in the transaction.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccount extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(
    () =>
      GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountAccount
  )
  account?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyExternalAccountTypeEnum;
}

export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountAccount extends SpeakeasyBase {
  /**
   * the Account Number of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountNumber" })
  accountNumber?: string;

  /**
   * the name the user gives to the account to help them identify it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alias" })
  alias?: string;

  /**
   * the BIC of the account (provided if currency is EUR).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bic" })
  bic?: string;

  /**
   * the IBAN of the account (provided if currency is EUR).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "iban" })
  iban?: string;

  /**
   * identifier for the fire.com account (assigned by fire.com)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * the Sort Code of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nsc" })
  nsc?: string;
}

export enum GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountTypeEnum {
  FireAccount = "FIRE_ACCOUNT",
}

/**
 * Details of the related third party involved in the transaction.
 */
export class GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccount extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(
    () =>
      GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountAccount
  )
  account?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountAccount;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedPartyRelatedPartyFireAccountTypeEnum;
}

export class GetTransactionsByIdv3CardTransactionsv3Transaction extends SpeakeasyBase {
  /**
   * Net amount lodged or taken from the account after fees and charges were applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amountAfterCharges" })
  amountAfterCharges?: number;

  /**
   * Amount of the transaction before the fees and taxes were applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amountBeforeCharges" })
  amountBeforeCharges?: number;

  /**
   * the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "balance" })
  balance?: number;

  /**
   * Details of the batch run if this transaction was part of a batch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchItemDetails" })
  @Type(
    () => GetTransactionsByIdv3CardTransactionsv3TransactionBatchItemDetails
  )
  batchItemDetails?: GetTransactionsByIdv3CardTransactionsv3TransactionBatchItemDetails;

  /**
   * Details of the card used (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card" })
  @Type(() => GetTransactionsByIdv3CardTransactionsv3TransactionRelatedCard)
  card?: GetTransactionsByIdv3CardTransactionsv3TransactionRelatedCard;

  /**
   * The currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  @Type(() => GetTransactionsByIdv3CardTransactionsv3TransactionCurrency)
  currency?: GetTransactionsByIdv3CardTransactionsv3TransactionCurrency;

  /**
   * Date of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "dateAcknowledged" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateAcknowledged?: Date;

  /**
   * Details of the direct debit (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "directDebitDetails" })
  @Type(
    () => GetTransactionsByIdv3CardTransactionsv3TransactionDirectDebitDetails
  )
  directDebitDetails?: GetTransactionsByIdv3CardTransactionsv3TransactionDirectDebitDetails;

  /**
   * An internal Fire reference for the transaction (UUID)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventUuid" })
  eventUuid?: string;

  /**
   * The amount of the fee, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feeAmount" })
  feeAmount?: number;

  /**
   * Details of the FX trade (if applicable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fxTradeDetails" })
  @Type(() => GetTransactionsByIdv3CardTransactionsv3TransactionFxTrade)
  fxTradeDetails?: GetTransactionsByIdv3CardTransactionsv3TransactionFxTrade;

  /**
   * identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ican" })
  ican?: number;

  /**
   * The comment/reference on the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "myRef" })
  myRef?: string;

  /**
   * (FOP payments only) The FOP Payment Code that was used to make this payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentRequestPublicCode" })
  paymentRequestPublicCode?: string;

  /**
   * Extra details about the transaction based on the scheme used to make the payment.
   */
  @SpeakeasyMetadata({
    elemType:
      GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails,
  })
  @Expose({ name: "proprietarySchemeDetails" })
  @Type(
    () =>
      GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails
  )
  proprietarySchemeDetails?: GetTransactionsByIdv3CardTransactionsv3TransactionProprietarySchemeDetails[];

  /**
   * The id of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refId" })
  refId?: number;

  /**
   * Details of the related third party involved in the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relatedParty" })
  relatedParty?: any;

  /**
   * The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxAmount" })
  taxAmount?: number;

  /**
   * The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId?: number;

  /**
   * The type of the transaction:
   *
   * @remarks
   * * `LODGEMENT` - Bank Transfer received
   * * `PIS_LODGEMENT` - Fire Open Payments Lodgement received
   * * `MANUAL_TRANSFER` - Manual Transfer to
   * * `WITHDRAWAL` - Bank Transfer sent
   * * `REVERSAL` - Credit Reversal
   * * `DIRECT_DEBIT` - A direct debit.
   * * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing.
   * * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit.
   * * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency)
   * * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency)
   * * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned
   * * `LODGEMENT_REVERSED` - Bank Transfer received returned
   * * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency)
   * * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency)
   * * `CREATE_CARD` - The fee taken when a debit card is issued.
   * * `ADD_ACCOUNT` - The fee taken when an account is created.
   * * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.
   * * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin
   * * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin
   * * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC
   * * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC
   * * `CARD_ECOMMERCE_DEBIT` - Card used on the internet
   * * `CARD_ECOMMERCE_CREDIT` - Card used on the internet
   * * `CARD_ATM_DEBIT` - Card used in an ATM
   * * `CARD_ATM_CREDIT` - Card used in an ATM
   * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
   * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin
   * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC
   * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC
   * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT	` - Card used on the internet in non-processing currency
   * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency
   * * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency
   * * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency
   * * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
   * * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed
   * * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed
   * * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed
   * * `CARD_ECOMMERCE_DEBIT_REVERSAL	` - Card used on the internet - reversed
   * * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed
   * * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed
   * * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed
   * * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
   * * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed
   * * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
   * * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types.
   * * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
   * * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed
   * * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
   * * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
   */
  @SpeakeasyMetadata()
  @Expose({ name: "yourRef" })
  yourRef?: string;
}

export class GetTransactionsByIdv3CardTransactionsv3Links extends SpeakeasyBase {
  /**
   * https://api.fire.com/business/v3/accounts/1/transactions?startAfter=eyJpY2F
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * The relationship of this link to the current object - self, next, prev page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rel" })
  rel?: string;
}

/**
 * An array of transaction objects for the account with a count (`total`).
 */
export class GetTransactionsByIdv3CardTransactionsv3 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetTransactionsByIdv3CardTransactionsv3Transaction,
  })
  @Expose({ name: "content" })
  @Type(() => GetTransactionsByIdv3CardTransactionsv3Transaction)
  content?: GetTransactionsByIdv3CardTransactionsv3Transaction[];

  @SpeakeasyMetadata({ elemType: GetTransactionsByIdv3CardTransactionsv3Links })
  @Expose({ name: "links" })
  @Type(() => GetTransactionsByIdv3CardTransactionsv3Links)
  links?: GetTransactionsByIdv3CardTransactionsv3Links[];
}

export class GetTransactionsByIdv3Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * An array of transaction objects for the account with a count (`total`).
   */
  @SpeakeasyMetadata()
  cardTransactionsv3?: GetTransactionsByIdv3CardTransactionsv3;
}
