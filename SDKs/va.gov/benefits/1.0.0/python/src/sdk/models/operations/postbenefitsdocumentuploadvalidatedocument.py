"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import documentvalidationerrormodel as shared_documentvalidationerrormodel
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument500ApplicationJSON:
    r"""Internal server error"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Unambiguous status code. Only present if status = \\"error\\" 
    
    * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
    * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
    * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
    * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
    * `DOC105` - Invalid or unknown id
    * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
    * `DOC107` - Empty payload.
    * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
    * `DOC201` - Upload server error.
    * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
    """  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Human readable error detail. Only present if status = \\"error\\" """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Unambiguous status code. Only present if status = \\"error\\" 
    
    * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
    * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
    * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
    * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
    * `DOC105` - Invalid or unknown id
    * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
    * `DOC107` - Empty payload.
    * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
    * `DOC201` - Upload server error.
    * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
    """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Human readable title description."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument429ApplicationJSON:
    r"""Too many requests"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message'), 'exclude': lambda f: f is None }})
    r"""message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument422ApplicationJSON:
    r"""Document did NOT pass system requirements"""
    
    errors: list[shared_documentvalidationerrormodel.DocumentValidationErrorModel] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument403ApplicationJSON:
    r"""Forbidden"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message'), 'exclude': lambda f: f is None }})
    r"""Error detail"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument401ApplicationJSON:
    r"""Unauthorized request"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Message'), 'exclude': lambda f: f is None }})
    r"""Error detail"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument200ApplicationJSONDataAttributes:
    
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument200ApplicationJSONData:
    
    attributes: Optional[PostBenefitsDocumentUploadValidateDocument200ApplicationJSONDataAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""schema type"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocument200ApplicationJSON:
    r"""Document passed system requirements"""
    
    data: Optional[PostBenefitsDocumentUploadValidateDocument200ApplicationJSONData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostBenefitsDocumentUploadValidateDocumentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_benefits_document_upload_validate_document_200_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument200ApplicationJSON] = dataclasses.field(default=None)
    r"""Document passed system requirements"""  
    post_benefits_document_upload_validate_document_401_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument401ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized request"""  
    post_benefits_document_upload_validate_document_403_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument403ApplicationJSON] = dataclasses.field(default=None)
    r"""Forbidden"""  
    post_benefits_document_upload_validate_document_422_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument422ApplicationJSON] = dataclasses.field(default=None)
    r"""Document did NOT pass system requirements"""  
    post_benefits_document_upload_validate_document_429_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument429ApplicationJSON] = dataclasses.field(default=None)
    r"""Too many requests"""  
    post_benefits_document_upload_validate_document_500_application_json_object: Optional[PostBenefitsDocumentUploadValidateDocument500ApplicationJSON] = dataclasses.field(default=None)
    r"""Internal server error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    