// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateReturnLabelRequestBodyDisplaySchemeEnum - The display format that the label should be shown in.
type CreateReturnLabelRequestBodyDisplaySchemeEnum string

const (
	CreateReturnLabelRequestBodyDisplaySchemeEnumLabel          CreateReturnLabelRequestBodyDisplaySchemeEnum = "label"
	CreateReturnLabelRequestBodyDisplaySchemeEnumQrCode         CreateReturnLabelRequestBodyDisplaySchemeEnum = "qr_code"
	CreateReturnLabelRequestBodyDisplaySchemeEnumLabelAndQrCode CreateReturnLabelRequestBodyDisplaySchemeEnum = "label_and_qr_code"
)

func (e *CreateReturnLabelRequestBodyDisplaySchemeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "label":
		fallthrough
	case "qr_code":
		fallthrough
	case "label_and_qr_code":
		*e = CreateReturnLabelRequestBodyDisplaySchemeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReturnLabelRequestBodyDisplaySchemeEnum: %s", s)
	}
}

// CreateReturnLabelRequestBodyLabelDownloadTypeEnum - There are two different ways to [download a label](https://www.shipengine.com/docs/labels/downloading/):
//
// |Label Download Type | Description
// |--------------------|------------------------------
// |`url`               |You will receive a URL, which you can use to download the label in a separate request. The URL will remain valid for 90 days.<br><br>This is the default if `label_download_type` is unspecified.
// |`inline`            |You will receive the Base64-encoded label as part of the response. No need for a second request to download the label.
type CreateReturnLabelRequestBodyLabelDownloadTypeEnum string

const (
	CreateReturnLabelRequestBodyLabelDownloadTypeEnumURL    CreateReturnLabelRequestBodyLabelDownloadTypeEnum = "url"
	CreateReturnLabelRequestBodyLabelDownloadTypeEnumInline CreateReturnLabelRequestBodyLabelDownloadTypeEnum = "inline"
)

func (e *CreateReturnLabelRequestBodyLabelDownloadTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "url":
		fallthrough
	case "inline":
		*e = CreateReturnLabelRequestBodyLabelDownloadTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReturnLabelRequestBodyLabelDownloadTypeEnum: %s", s)
	}
}

// CreateReturnLabelRequestBodyLabelFormatEnum - The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
//
// |Label Format  | Supported Carriers
// |--------------|-----------------------------------
// |`pdf`         | All carriers
// |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
// |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
type CreateReturnLabelRequestBodyLabelFormatEnum string

const (
	CreateReturnLabelRequestBodyLabelFormatEnumPdf CreateReturnLabelRequestBodyLabelFormatEnum = "pdf"
	CreateReturnLabelRequestBodyLabelFormatEnumPng CreateReturnLabelRequestBodyLabelFormatEnum = "png"
	CreateReturnLabelRequestBodyLabelFormatEnumZpl CreateReturnLabelRequestBodyLabelFormatEnum = "zpl"
)

func (e *CreateReturnLabelRequestBodyLabelFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		fallthrough
	case "png":
		fallthrough
	case "zpl":
		*e = CreateReturnLabelRequestBodyLabelFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReturnLabelRequestBodyLabelFormatEnum: %s", s)
	}
}

// CreateReturnLabelRequestBodyLabelLayoutEnum - The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
type CreateReturnLabelRequestBodyLabelLayoutEnum string

const (
	CreateReturnLabelRequestBodyLabelLayoutEnumFourx6 CreateReturnLabelRequestBodyLabelLayoutEnum = "4x6"
	CreateReturnLabelRequestBodyLabelLayoutEnumLetter CreateReturnLabelRequestBodyLabelLayoutEnum = "letter"
)

func (e *CreateReturnLabelRequestBodyLabelLayoutEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4x6":
		fallthrough
	case "letter":
		*e = CreateReturnLabelRequestBodyLabelLayoutEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateReturnLabelRequestBodyLabelLayoutEnum: %s", s)
	}
}

// CreateReturnLabelRequestBody - A create return label request body
type CreateReturnLabelRequestBody struct {
	// The label charge event.
	//
	ChargeEvent *LabelChargeEventEnum `json:"charge_event,omitempty"`
	// The display format that the label should be shown in.
	DisplayScheme     *CreateReturnLabelRequestBodyDisplaySchemeEnum     `json:"display_scheme,omitempty"`
	LabelDownloadType *CreateReturnLabelRequestBodyLabelDownloadTypeEnum `json:"label_download_type,omitempty"`
	// The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
	//
	LabelFormat *CreateReturnLabelRequestBodyLabelFormatEnum `json:"label_format,omitempty"`
	// The label image resource that was used to create a custom label image.
	LabelImageID *string `json:"label_image_id,omitempty"`
	// The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
	//
	LabelLayout *CreateReturnLabelRequestBodyLabelLayoutEnum `json:"label_layout,omitempty"`
}
