"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import resourceidentifier as shared_resourceidentifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SeriesAttributesStatusEnum(str, Enum):
    r"""The status of the series"""
    ACTIVE = 'active'
    INACTIVE = 'inactive'

class SeriesAttributesTypeEnum(str, Enum):
    r"""The type of the series"""
    SERIES = 'Series'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesAttributes:
    
    amazon_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amazon_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Amazon Music subscription URL"""  
    castbox_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('castbox_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The CastBox subscription URL"""  
    cover_image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover_image_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `cover_image` in a future update.<br/>
    The image ID of the cover art for this series. The `/images` endpoint provideds details to the image.
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the series eventually in HTML format"""  
    description_is_html: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_is_html'), 'exclude': lambda f: f is None }})
    r"""Determines whether `description` is in HTML format or plain."""  
    description_plain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_plain'), 'exclude': lambda f: f is None }})
    r"""The description with all HTML markup removed. If the description does not contain markup
    this is identitcal to `description`.
    """  
    facebook_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('facebook_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the series on Facebook"""  
    google_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Google subscription URL"""  
    iheart_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iheart_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The iHeartRadio subscription URL"""  
    instagram_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instagram_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the series on Instagram"""  
    itunes_subscription_badge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itunes_subscription_badge_enabled'), 'exclude': lambda f: f is None }})
    r"""If `null` or `true`, the ART19 web player will render an iTunes subscription badge"""  
    itunes_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itunes_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Apple iTunes subscription URL"""  
    linkedin_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedin_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the series on LinkedIn"""  
    pocket_casts_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pocket_casts_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Pocket Casts subscription URL"""  
    podcast_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcast_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the RSS feed"""  
    public_page_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_page_enabled'), 'exclude': lambda f: f is None }})
    r"""If this is `true`, a public web page for this series is available under
    `https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.
    This public page provides details about the series as well as descriptive links to all its
    episodes. If this is `false`, no such public page is available.
    """  
    public_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_title'), 'exclude': lambda f: f is None }})
    r"""If present, this is the preferred title for the series in the RSS Feed"""  
    radio_public_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radio_public_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The RadioPublic subscription URL"""  
    rss_author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss_author'), 'exclude': lambda f: f is None }})
    r"""The author responsible for the RSS feed"""  
    rss_copyright: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss_copyright'), 'exclude': lambda f: f is None }})
    r"""The copyright disclaimer for the contents of the show, appearing after a Â© symbol, e.g. `2020 ART19, Inc.`"""  
    rss_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss_email'), 'exclude': lambda f: f is None }})
    r"""The pubic point of contact for the show"""  
    rss_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss_owner'), 'exclude': lambda f: f is None }})
    r"""The name of the contact for the show"""  
    slug: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug'), 'exclude': lambda f: f is None }})
    r"""This slug is unique over all series and networks system wide and is used to access the series' feed
    as well as its eventually enabled public page on ART19.
    """  
    sort_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_title'), 'exclude': lambda f: f is None }})
    r"""The title of the series modified for sorting. This converts all characters to
    lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
    """  
    spotify_subscription_badge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spotify_subscription_badge_enabled'), 'exclude': lambda f: f is None }})
    r"""If `null` or `true`, the ART19 web player will render a Spotify subscription badge"""  
    spotify_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spotify_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Spotify subscription URL"""  
    status: Optional[SeriesAttributesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the series"""  
    stitcher_subscription_badge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stitcher_subscription_badge_enabled'), 'exclude': lambda f: f is None }})
    r"""If `null` or `true`, the ART19 web player will render a Stitcher subscription badge"""  
    stitcher_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stitcher_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The Stitcher subscription URL"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the series"""  
    tumblr_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tumblr_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the series on Tumblr"""  
    tune_in_subscription_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tune_in_subscription_url'), 'exclude': lambda f: f is None }})
    r"""The TuneIn subscription URL"""  
    twitter_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twitter_url'), 'exclude': lambda f: f is None }})
    r"""The URL of the series on Twitter"""  
    type: Optional[SeriesAttributesTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the series"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    website_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website_url'), 'exclude': lambda f: f is None }})
    r"""The custom website URL for the series"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsCoverImage:
    r"""The cover image for the series"""
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsTheCoverImageForTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsTheNetworkTheSeriesBelongsTo:
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfSeasonsInTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationshipsAListOfTagsAssociatedWithTheSeries:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeriesRelationships:
    
    classification_inclusions: Optional[SeriesRelationshipsAListOfClassificationsAssociatedWithTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification_inclusions'), 'exclude': lambda f: f is None }})  
    cover_image: Optional[SeriesRelationshipsCoverImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover_image'), 'exclude': lambda f: f is None }})
    r"""The cover image for the series"""  
    credits: Optional[SeriesRelationshipsAListOfCreditsGivenToPeopleInTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits'), 'exclude': lambda f: f is None }})  
    episodes: Optional[SeriesRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodes'), 'exclude': lambda f: f is None }})  
    images: Optional[SeriesRelationshipsTheCoverImageForTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})  
    network: Optional[SeriesRelationshipsTheNetworkTheSeriesBelongsTo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})  
    seasons: Optional[SeriesRelationshipsAListOfSeasonsInTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasons'), 'exclude': lambda f: f is None }})  
    taggings: Optional[SeriesRelationshipsAListOfAssociationsLinkingTagsToTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taggings'), 'exclude': lambda f: f is None }})  
    tags: Optional[SeriesRelationshipsAListOfTagsAssociatedWithTheSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Series:
    
    attributes: Optional[SeriesAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[SeriesRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `series`"""  
    