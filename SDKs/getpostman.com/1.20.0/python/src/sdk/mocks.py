"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, operations
from typing import Optional

class Mocks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def all_mocks(self) -> operations.AllMocksResponse:
        r"""All Mocks
        This endpoint fetches all the mocks that you have created.
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mocks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllMocksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AllMocks200ApplicationJSON])
                res.all_mocks_200_application_json_object = out

        return res

    def create_mock(self, request: operations.CreateMockRequestBody) -> operations.CreateMockResponse:
        r"""Create Mock
        This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.
        
        You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mocks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateMock200ApplicationJSON])
                res.create_mock_200_application_json_object = out

        return res

    def delete_mock(self, request: operations.DeleteMockRequest) -> operations.DeleteMockResponse:
        r"""Delete Mock
        This endpoint allows you to delete an existing mock using its `uid`.
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMockRequest, base_url, '/mocks/{mock_uid}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteMock200ApplicationJSON])
                res.delete_mock_200_application_json_object = out

        return res

    def publish_mock(self, request: operations.PublishMockRequest) -> operations.PublishMockResponse:
        r"""Publish Mock
        This endpoint publishes the mock you have created using its `uid`
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PublishMockRequest, base_url, '/mocks/{mock_uid}/publish', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PublishMock200ApplicationJSON])
                res.publish_mock_200_application_json_object = out

        return res

    def single_mock(self, request: operations.SingleMockRequest) -> operations.SingleMockResponse:
        r"""Single Mock
        This endpoint fetches you the basic information about a single mock using its `uid`.
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SingleMockRequest, base_url, '/mocks/{mock_uid}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SingleMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SingleMock200ApplicationJSON])
                res.single_mock_200_application_json_object = out

        return res

    def unpublish_mock(self, request: operations.UnpublishMockRequest) -> operations.UnpublishMockResponse:
        r"""Unpublish Mock
        This endpoint unpublishes the mock you have created using its `uid`
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnpublishMockRequest, base_url, '/mocks/{mock_uid}/unpublish', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnpublishMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UnpublishMock200ApplicationJSON])
                res.unpublish_mock_200_application_json_object = out

        return res

    def update_mock(self, request: operations.UpdateMockRequest) -> operations.UpdateMockResponse:
        r"""Update Mock
        This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,
        * name
        * environment
        * description
        * private
        * versionTag
        
        > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateMockRequest, base_url, '/mocks/{mock_uid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateMockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateMock200ApplicationJSON])
                res.update_mock_200_application_json_object = out

        return res

    