"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Segments:
    r"""With these endpoints you can manage your Segments.
    Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_segment(self, request: operations.CreateSegmentRequest) -> operations.CreateSegmentResponse:
        r"""Create Segment
        This endpoint creates a new Segment in a specified Product 
        identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSegmentRequest, base_url, '/v1/products/{productId}/segments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_segment_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModelHaljson])
                res.segment_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModel])
                res.segment_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def delete_segment(self, request: operations.DeleteSegmentRequest) -> operations.DeleteSegmentResponse:
        r"""Delete Segment
        This endpoint removes a Segment identified by the `segmentId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSegmentRequest, base_url, '/v1/segments/{segmentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_segment(self, request: operations.GetSegmentRequest) -> operations.GetSegmentResponse:
        r"""Get Segment
        This endpoint returns the metadata of a Segment
        identified by the `segmentId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSegmentRequest, base_url, '/v1/segments/{segmentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModelHaljson])
                res.segment_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModel])
                res.segment_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_segments(self, request: operations.GetSegmentsRequest) -> operations.GetSegmentsResponse:
        r"""List Segments
        This endpoint returns the list of the Segments that belongs to the given Product identified by the
        `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSegmentsRequest, base_url, '/v1/products/{productId}/segments', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSegmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SegmentListModelHaljson]])
                res.segment_list_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SegmentListModel]])
                res.segment_list_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def update_segment(self, request: operations.UpdateSegmentRequest) -> operations.UpdateSegmentResponse:
        r"""Update Segment
        This endpoint updates a Segment identified by the `segmentId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSegmentRequest, base_url, '/v1/segments/{segmentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_segment_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModelHaljson])
                res.segment_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SegmentModel])
                res.segment_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    