<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Export 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new export configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateResponse
     */
	public function exportConfigurationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsCreate202ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreate202ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete export configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteResponse
     */
	public function exportConfigurationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable export configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableResponse
     */
	public function exportConfigurationsDisable(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsDisableDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsDisableDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable export configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableResponse
     */
	public function exportConfigurationsEnable(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsEnableDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsEnableDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get export configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetResponse
     */
	public function exportConfigurationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List export configurations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListResponse
     */
	public function exportConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partially update export configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateResponse
     */
	public function exportConfigurationsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsPartialUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportConfigurationsPartialUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ExportConfigurationsPartialUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}