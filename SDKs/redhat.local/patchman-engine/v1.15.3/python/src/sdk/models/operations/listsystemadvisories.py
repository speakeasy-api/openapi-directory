"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import controllers_systemadvisoriesresponse as shared_controllers_systemadvisoriesresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class ListSystemAdvisoriesSecurity:
    
    rh_identity: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-rh-identity' }})  
    
class ListSystemAdvisoriesSortEnum(str, Enum):
    r"""Sort field"""
    ID = 'id'
    NAME = 'name'
    TYPE = 'type'
    SYNOPSIS = 'synopsis'
    PUBLIC_DATE = 'public_date'


@dataclasses.dataclass
class ListSystemAdvisoriesRequest:
    
    inventory_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'inventory_id', 'style': 'simple', 'explode': False }})
    r"""Inventory ID"""  
    filter_advisory_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[advisory_type]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    filter_description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[description]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    filter_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[id]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    filter_public_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[public_date]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    filter_severity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[severity]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    filter_synopsis: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter[synopsis]', 'style': 'form', 'explode': True }})
    r"""Filter"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limit for paging, set -1 to return all"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Offset for paging"""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Find matching text"""  
    sort: Optional[ListSystemAdvisoriesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort field"""  
    

@dataclasses.dataclass
class ListSystemAdvisoriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    controllers_system_advisories_response: Optional[shared_controllers_systemadvisoriesresponse.ControllersSystemAdvisoriesResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    