<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class UpdateServiceUpdateServiceRequest
{
    /**
     * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
     * 
     * @var ?int $consumptionReportInterval
     */
	#[SpeakeasyMetadata('form:name=ConsumptionReportInterval')]
    public ?int $consumptionReportInterval = null;
    
    /**
     * The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     * 
     * @var ?string $defaultChannelCreatorRoleSid
     */
	#[SpeakeasyMetadata('form:name=DefaultChannelCreatorRoleSid')]
    public ?string $defaultChannelCreatorRoleSid = null;
    
    /**
     * The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     * 
     * @var ?string $defaultChannelRoleSid
     */
	#[SpeakeasyMetadata('form:name=DefaultChannelRoleSid')]
    public ?string $defaultChannelRoleSid = null;
    
    /**
     * The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
     * 
     * @var ?string $defaultServiceRoleSid
     */
	#[SpeakeasyMetadata('form:name=DefaultServiceRoleSid')]
    public ?string $defaultServiceRoleSid = null;
    
    /**
     * A descriptive string that you create to describe the resource.
     * 
     * @var ?string $friendlyName
     */
	#[SpeakeasyMetadata('form:name=FriendlyName')]
    public ?string $friendlyName = null;
    
    /**
     * The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
     * 
     * @var ?int $limitsChannelMembers
     */
	#[SpeakeasyMetadata('form:name=Limits.ChannelMembers')]
    public ?int $limitsChannelMembers = null;
    
    /**
     * The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
     * 
     * @var ?int $limitsUserChannels
     */
	#[SpeakeasyMetadata('form:name=Limits.UserChannels')]
    public ?int $limitsUserChannels = null;
    
    /**
     * The message to send when a media message has no text. Can be used as placeholder message.
     * 
     * @var ?string $mediaCompatibilityMessage
     */
	#[SpeakeasyMetadata('form:name=Media.CompatibilityMessage')]
    public ?string $mediaCompatibilityMessage = null;
    
    /**
     * Whether to send a notification when a member is added to a channel. The default is `false`.
     * 
     * @var ?bool $notificationsAddedToChannelEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.AddedToChannel.Enabled')]
    public ?bool $notificationsAddedToChannelEnabled = null;
    
    /**
     * The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsAddedToChannelSound
     */
	#[SpeakeasyMetadata('form:name=Notifications.AddedToChannel.Sound')]
    public ?string $notificationsAddedToChannelSound = null;
    
    /**
     * The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsAddedToChannelTemplate
     */
	#[SpeakeasyMetadata('form:name=Notifications.AddedToChannel.Template')]
    public ?string $notificationsAddedToChannelTemplate = null;
    
    /**
     * Whether to send a notification when a user is invited to a channel. The default is `false`.
     * 
     * @var ?bool $notificationsInvitedToChannelEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.InvitedToChannel.Enabled')]
    public ?bool $notificationsInvitedToChannelEnabled = null;
    
    /**
     * The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsInvitedToChannelSound
     */
	#[SpeakeasyMetadata('form:name=Notifications.InvitedToChannel.Sound')]
    public ?string $notificationsInvitedToChannelSound = null;
    
    /**
     * The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsInvitedToChannelTemplate
     */
	#[SpeakeasyMetadata('form:name=Notifications.InvitedToChannel.Template')]
    public ?string $notificationsInvitedToChannelTemplate = null;
    
    /**
     * Whether to log notifications. The default is `false`.
     * 
     * @var ?bool $notificationsLogEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.LogEnabled')]
    public ?bool $notificationsLogEnabled = null;
    
    /**
     * Whether the new message badge is enabled. The default is `false`.
     * 
     * @var ?bool $notificationsNewMessageBadgeCountEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.NewMessage.BadgeCountEnabled')]
    public ?bool $notificationsNewMessageBadgeCountEnabled = null;
    
    /**
     * Whether to send a notification when a new message is added to a channel. The default is `false`.
     * 
     * @var ?bool $notificationsNewMessageEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.NewMessage.Enabled')]
    public ?bool $notificationsNewMessageEnabled = null;
    
    /**
     * The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
     * 
     * @var ?string $notificationsNewMessageSound
     */
	#[SpeakeasyMetadata('form:name=Notifications.NewMessage.Sound')]
    public ?string $notificationsNewMessageSound = null;
    
    /**
     * The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
     * 
     * @var ?string $notificationsNewMessageTemplate
     */
	#[SpeakeasyMetadata('form:name=Notifications.NewMessage.Template')]
    public ?string $notificationsNewMessageTemplate = null;
    
    /**
     * Whether to send a notification to a user when they are removed from a channel. The default is `false`.
     * 
     * @var ?bool $notificationsRemovedFromChannelEnabled
     */
	#[SpeakeasyMetadata('form:name=Notifications.RemovedFromChannel.Enabled')]
    public ?bool $notificationsRemovedFromChannelEnabled = null;
    
    /**
     * The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsRemovedFromChannelSound
     */
	#[SpeakeasyMetadata('form:name=Notifications.RemovedFromChannel.Sound')]
    public ?string $notificationsRemovedFromChannelSound = null;
    
    /**
     * The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
     * 
     * @var ?string $notificationsRemovedFromChannelTemplate
     */
	#[SpeakeasyMetadata('form:name=Notifications.RemovedFromChannel.Template')]
    public ?string $notificationsRemovedFromChannelTemplate = null;
    
    /**
     * The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
     * 
     * @var ?int $postWebhookRetryCount
     */
	#[SpeakeasyMetadata('form:name=PostWebhookRetryCount')]
    public ?int $postWebhookRetryCount = null;
    
    /**
     * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     * 
     * @var ?string $postWebhookUrl
     */
	#[SpeakeasyMetadata('form:name=PostWebhookUrl')]
    public ?string $postWebhookUrl = null;
    
    /**
     * The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
     * 
     * @var ?int $preWebhookRetryCount
     */
	#[SpeakeasyMetadata('form:name=PreWebhookRetryCount')]
    public ?int $preWebhookRetryCount = null;
    
    /**
     * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     * 
     * @var ?string $preWebhookUrl
     */
	#[SpeakeasyMetadata('form:name=PreWebhookUrl')]
    public ?string $preWebhookUrl = null;
    
    /**
     * Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
     * 
     * @var ?bool $reachabilityEnabled
     */
	#[SpeakeasyMetadata('form:name=ReachabilityEnabled')]
    public ?bool $reachabilityEnabled = null;
    
    /**
     * Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
     * 
     * @var ?bool $readStatusEnabled
     */
	#[SpeakeasyMetadata('form:name=ReadStatusEnabled')]
    public ?bool $readStatusEnabled = null;
    
    /**
     * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
     * 
     * @var ?int $typingIndicatorTimeout
     */
	#[SpeakeasyMetadata('form:name=TypingIndicatorTimeout')]
    public ?int $typingIndicatorTimeout = null;
    
    /**
     * The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     * 
     * @var ?array<string> $webhookFilters
     */
	#[SpeakeasyMetadata('form:name=WebhookFilters')]
    public ?array $webhookFilters = null;
    
    /**
     * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateServiceUpdateServiceRequestWebhookMethodEnum $webhookMethod
     */
	#[SpeakeasyMetadata('form:name=WebhookMethod')]
    public ?UpdateServiceUpdateServiceRequestWebhookMethodEnum $webhookMethod = null;
    
	public function __construct()
	{
		$this->consumptionReportInterval = null;
		$this->defaultChannelCreatorRoleSid = null;
		$this->defaultChannelRoleSid = null;
		$this->defaultServiceRoleSid = null;
		$this->friendlyName = null;
		$this->limitsChannelMembers = null;
		$this->limitsUserChannels = null;
		$this->mediaCompatibilityMessage = null;
		$this->notificationsAddedToChannelEnabled = null;
		$this->notificationsAddedToChannelSound = null;
		$this->notificationsAddedToChannelTemplate = null;
		$this->notificationsInvitedToChannelEnabled = null;
		$this->notificationsInvitedToChannelSound = null;
		$this->notificationsInvitedToChannelTemplate = null;
		$this->notificationsLogEnabled = null;
		$this->notificationsNewMessageBadgeCountEnabled = null;
		$this->notificationsNewMessageEnabled = null;
		$this->notificationsNewMessageSound = null;
		$this->notificationsNewMessageTemplate = null;
		$this->notificationsRemovedFromChannelEnabled = null;
		$this->notificationsRemovedFromChannelSound = null;
		$this->notificationsRemovedFromChannelTemplate = null;
		$this->postWebhookRetryCount = null;
		$this->postWebhookUrl = null;
		$this->preWebhookRetryCount = null;
		$this->preWebhookUrl = null;
		$this->reachabilityEnabled = null;
		$this->readStatusEnabled = null;
		$this->typingIndicatorTimeout = null;
		$this->webhookFilters = null;
		$this->webhookMethod = null;
	}
}
