/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AudioAsset - The AudioAsset is used to add sound effects and audio at specific intervals on the timeline. The src must be a publicly accessible URL to an audio resource such  as an mp3 file.
 */
public class AudioAsset {
    /**
     * The effect to apply to the audio asset &lt;ul&gt;
     *   &lt;li&gt;`fadeIn` - fade volume in only&lt;/li&gt;
     *   &lt;li&gt;`fadeOut` - fade volume out only&lt;/li&gt;
     *   &lt;li&gt;`fadeInFadeOut` - fade volume in and out&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effect")
    public AudioAssetEffectEnum effect;

    public AudioAsset withEffect(AudioAssetEffectEnum effect) {
        this.effect = effect;
        return this;
    }
    
    /**
     * The audio source URL. The URL must be publicly accessible or include credentials.
     */
    @JsonProperty("src")
    public String src;

    public AudioAsset withSrc(String src) {
        this.src = src;
        return this;
    }
    
    /**
     * The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trim")
    public Double trim;

    public AudioAsset withTrim(Double trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * The type of asset - set to `audio` for audio assets.
     */
    @JsonProperty("type")
    public String type;

    public AudioAsset withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volume")
    public Double volume;

    public AudioAsset withVolume(Double volume) {
        this.volume = volume;
        return this;
    }
    
    public AudioAsset(@JsonProperty("src") String src, @JsonProperty("type") String type) {
        this.src = src;
        this.type = type;
  }
}
