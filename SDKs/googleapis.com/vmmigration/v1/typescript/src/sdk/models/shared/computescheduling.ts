/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SchedulingNodeAffinity } from "./schedulingnodeaffinity";
import { Expose, Type } from "class-transformer";

/**
 * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
 */
export enum ComputeSchedulingOnHostMaintenanceEnum {
  OnHostMaintenanceUnspecified = "ON_HOST_MAINTENANCE_UNSPECIFIED",
  Terminate = "TERMINATE",
  Migrate = "MIGRATE",
}

/**
 * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
 */
export enum ComputeSchedulingRestartTypeEnum {
  RestartTypeUnspecified = "RESTART_TYPE_UNSPECIFIED",
  AutomaticRestart = "AUTOMATIC_RESTART",
  NoAutomaticRestart = "NO_AUTOMATIC_RESTART",
}

/**
 * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
 */
export class ComputeScheduling extends SpeakeasyBase {
  /**
   * The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minNodeCpus" })
  minNodeCpus?: number;

  /**
   * A set of node affinity and anti-affinity configurations for sole tenant nodes.
   */
  @SpeakeasyMetadata({ elemType: SchedulingNodeAffinity })
  @Expose({ name: "nodeAffinities" })
  @Type(() => SchedulingNodeAffinity)
  nodeAffinities?: SchedulingNodeAffinity[];

  /**
   * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "onHostMaintenance" })
  onHostMaintenance?: ComputeSchedulingOnHostMaintenanceEnum;

  /**
   * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restartType" })
  restartType?: ComputeSchedulingRestartTypeEnum;
}
