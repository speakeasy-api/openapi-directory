"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configurationtype_enum as shared_configurationtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckpointConfigurationDescription:
    r"""Describes checkpointing parameters for a Flink-based Kinesis Data Analytics application."""
    
    checkpointing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointingEnabled'), 'exclude': lambda f: f is None }})  
    checkpoint_interval: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointInterval'), 'exclude': lambda f: f is None }})  
    configuration_type: Optional[shared_configurationtype_enum.ConfigurationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationType'), 'exclude': lambda f: f is None }})  
    min_pause_between_checkpoints: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinPauseBetweenCheckpoints'), 'exclude': lambda f: f is None }})  
    