/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FlexTemplateRuntimeEnvironment - The environment values to be set at runtime for flex template.
 */
public class FlexTemplateRuntimeEnvironment {
    /**
     * Additional experiment flags for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalExperiments")
    public String[] additionalExperiments;

    public FlexTemplateRuntimeEnvironment withAdditionalExperiments(String[] additionalExperiments) {
        this.additionalExperiments = additionalExperiments;
        return this;
    }
    
    /**
     * Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalUserLabels")
    public java.util.Map<String, String> additionalUserLabels;

    public FlexTemplateRuntimeEnvironment withAdditionalUserLabels(java.util.Map<String, String> additionalUserLabels) {
        this.additionalUserLabels = additionalUserLabels;
        return this;
    }
    
    /**
     * The algorithm to use for autoscaling
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoscalingAlgorithm")
    public FlexTemplateRuntimeEnvironmentAutoscalingAlgorithmEnum autoscalingAlgorithm;

    public FlexTemplateRuntimeEnvironment withAutoscalingAlgorithm(FlexTemplateRuntimeEnvironmentAutoscalingAlgorithmEnum autoscalingAlgorithm) {
        this.autoscalingAlgorithm = autoscalingAlgorithm;
        return this;
    }
    
    /**
     * Worker disk size, in gigabytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeGb")
    public Integer diskSizeGb;

    public FlexTemplateRuntimeEnvironment withDiskSizeGb(Integer diskSizeGb) {
        this.diskSizeGb = diskSizeGb;
        return this;
    }
    
    /**
     * If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dumpHeapOnOom")
    public Boolean dumpHeapOnOom;

    public FlexTemplateRuntimeEnvironment withDumpHeapOnOom(Boolean dumpHeapOnOom) {
        this.dumpHeapOnOom = dumpHeapOnOom;
        return this;
    }
    
    /**
     * If true serial port logging will be enabled for the launcher VM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableLauncherVmSerialPortLogging")
    public Boolean enableLauncherVmSerialPortLogging;

    public FlexTemplateRuntimeEnvironment withEnableLauncherVmSerialPortLogging(Boolean enableLauncherVmSerialPortLogging) {
        this.enableLauncherVmSerialPortLogging = enableLauncherVmSerialPortLogging;
        return this;
    }
    
    /**
     * Whether to enable Streaming Engine for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableStreamingEngine")
    public Boolean enableStreamingEngine;

    public FlexTemplateRuntimeEnvironment withEnableStreamingEngine(Boolean enableStreamingEngine) {
        this.enableStreamingEngine = enableStreamingEngine;
        return this;
    }
    
    /**
     * Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flexrsGoal")
    public FlexTemplateRuntimeEnvironmentFlexrsGoalEnum flexrsGoal;

    public FlexTemplateRuntimeEnvironment withFlexrsGoal(FlexTemplateRuntimeEnvironmentFlexrsGoalEnum flexrsGoal) {
        this.flexrsGoal = flexrsGoal;
        return this;
    }
    
    /**
     * Configuration for VM IPs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipConfiguration")
    public FlexTemplateRuntimeEnvironmentIpConfigurationEnum ipConfiguration;

    public FlexTemplateRuntimeEnvironment withIpConfiguration(FlexTemplateRuntimeEnvironmentIpConfigurationEnum ipConfiguration) {
        this.ipConfiguration = ipConfiguration;
        return this;
    }
    
    /**
     * Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsKeyName")
    public String kmsKeyName;

    public FlexTemplateRuntimeEnvironment withKmsKeyName(String kmsKeyName) {
        this.kmsKeyName = kmsKeyName;
        return this;
    }
    
    /**
     * The machine type to use for launching the job. The default is n1-standard-1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launcherMachineType")
    public String launcherMachineType;

    public FlexTemplateRuntimeEnvironment withLauncherMachineType(String launcherMachineType) {
        this.launcherMachineType = launcherMachineType;
        return this;
    }
    
    /**
     * The machine type to use for the job. Defaults to the value from the template if not specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;

    public FlexTemplateRuntimeEnvironment withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxWorkers")
    public Integer maxWorkers;

    public FlexTemplateRuntimeEnvironment withMaxWorkers(Integer maxWorkers) {
        this.maxWorkers = maxWorkers;
        return this;
    }
    
    /**
     * Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;

    public FlexTemplateRuntimeEnvironment withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * The initial number of Google Compute Engine instances for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numWorkers")
    public Integer numWorkers;

    public FlexTemplateRuntimeEnvironment withNumWorkers(Integer numWorkers) {
        this.numWorkers = numWorkers;
        return this;
    }
    
    /**
     * Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that `dump_heap_on_oom` is set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saveHeapDumpsToGcsPath")
    public String saveHeapDumpsToGcsPath;

    public FlexTemplateRuntimeEnvironment withSaveHeapDumpsToGcsPath(String saveHeapDumpsToGcsPath) {
        this.saveHeapDumpsToGcsPath = saveHeapDumpsToGcsPath;
        return this;
    }
    
    /**
     * Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sdkContainerImage")
    public String sdkContainerImage;

    public FlexTemplateRuntimeEnvironment withSDKContainerImage(String sdkContainerImage) {
        this.sdkContainerImage = sdkContainerImage;
        return this;
    }
    
    /**
     * The email address of the service account to run the job as.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountEmail")
    public String serviceAccountEmail;

    public FlexTemplateRuntimeEnvironment withServiceAccountEmail(String serviceAccountEmail) {
        this.serviceAccountEmail = serviceAccountEmail;
        return this;
    }
    
    /**
     * The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with `gs://`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stagingLocation")
    public String stagingLocation;

    public FlexTemplateRuntimeEnvironment withStagingLocation(String stagingLocation) {
        this.stagingLocation = stagingLocation;
        return this;
    }
    
    /**
     * Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetwork")
    public String subnetwork;

    public FlexTemplateRuntimeEnvironment withSubnetwork(String subnetwork) {
        this.subnetwork = subnetwork;
        return this;
    }
    
    /**
     * The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tempLocation")
    public String tempLocation;

    public FlexTemplateRuntimeEnvironment withTempLocation(String tempLocation) {
        this.tempLocation = tempLocation;
        return this;
    }
    
    /**
     * The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerRegion")
    public String workerRegion;

    public FlexTemplateRuntimeEnvironment withWorkerRegion(String workerRegion) {
        this.workerRegion = workerRegion;
        return this;
    }
    
    /**
     * The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerZone")
    public String workerZone;

    public FlexTemplateRuntimeEnvironment withWorkerZone(String workerZone) {
        this.workerZone = workerZone;
        return this;
    }
    
    /**
     * The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;

    public FlexTemplateRuntimeEnvironment withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
    public FlexTemplateRuntimeEnvironment(){}
}
