"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import player as shared_player
from enum import Enum
from typing import Optional

class InjuredPlayersByCompetitionFormatEnum(str, Enum):
    r"""Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>."""
    XML = 'xml'
    JSON = 'json'


@dataclasses.dataclass
class InjuredPlayersByCompetitionRequest:
    
    competition: str = dataclasses.field(metadata={'path_param': { 'field_name': 'competition', 'style': 'simple', 'explode': False }})
    r"""An indication of a soccer competition/league. This value can be the CompetitionId or the Competition Key. Possible values include: <code>EPL</code>, <code>1</code>, <code>MLS</code>, <code>8</code>, etc."""  
    format: InjuredPlayersByCompetitionFormatEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>."""  
    

@dataclasses.dataclass
class InjuredPlayersByCompetitionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    players: Optional[list[shared_player.Player]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    