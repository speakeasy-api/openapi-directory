/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to.
 */
export class PutReportDefinitionRequestBodyDestinationS3Location extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "bucket" })
  bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "prefix" })
  prefix?: string;
}

/**
 * Required. The format to use for the generated report.
 */
export enum PutReportDefinitionRequestBodyFormatEnum {
  Csv = "CSV",
  Parquet = "PARQUET",
}

/**
 * Required. The cadence to generate the report.
 */
export enum PutReportDefinitionRequestBodyReportFrequencyEnum {
  Monthly = "MONTHLY",
  Daily = "DAILY",
  All = "ALL",
}

export class PutReportDefinitionRequestBody extends SpeakeasyBase {
  /**
   * Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationS3Location" })
  @Type(() => PutReportDefinitionRequestBodyDestinationS3Location)
  destinationS3Location: PutReportDefinitionRequestBodyDestinationS3Location;

  /**
   * Required. The format to use for the generated report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: PutReportDefinitionRequestBodyFormatEnum;

  /**
   * Required. Description of the report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportDescription" })
  reportDescription: string;

  /**
   * Required. The cadence to generate the report.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportFrequency" })
  reportFrequency: PutReportDefinitionRequestBodyReportFrequencyEnum;

  /**
   * Required. ID of the report. You can choose any valid string matching the pattern for the ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportId" })
  reportId: string;
}

export class PutReportDefinitionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutReportDefinitionRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class PutReportDefinitionResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putReportDefinitionResult?: shared.PutReportDefinitionResult;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
