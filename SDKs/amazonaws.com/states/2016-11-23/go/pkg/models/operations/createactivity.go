// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateActivityXAmzTargetEnum
type CreateActivityXAmzTargetEnum string

const (
	CreateActivityXAmzTargetEnumAwsStepFunctionsCreateActivity CreateActivityXAmzTargetEnum = "AWSStepFunctions.CreateActivity"
)

func (e CreateActivityXAmzTargetEnum) ToPointer() *CreateActivityXAmzTargetEnum {
	return &e
}

func (e *CreateActivityXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSStepFunctions.CreateActivity":
		*e = CreateActivityXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateActivityXAmzTargetEnum: %v", v)
	}
}

type CreateActivityRequest struct {
	CreateActivityInput shared.CreateActivityInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          CreateActivityXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateActivityResponse struct {
	// ActivityLimitExceeded
	ActivityLimitExceeded interface{}
	ContentType           string
	// Success
	CreateActivityOutput *shared.CreateActivityOutput
	// InvalidName
	InvalidName interface{}
	StatusCode  int
	RawResponse *http.Response
	// TooManyTags
	TooManyTags interface{}
}
