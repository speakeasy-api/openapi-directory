/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SecurityPolicyAdaptiveProtectionConfig } from "./securitypolicyadaptiveprotectionconfig";
import { SecurityPolicyAdvancedOptionsConfig } from "./securitypolicyadvancedoptionsconfig";
import { SecurityPolicyAssociation } from "./securitypolicyassociation";
import { SecurityPolicyDdosProtectionConfig } from "./securitypolicyddosprotectionconfig";
import { SecurityPolicyRecaptchaOptionsConfig } from "./securitypolicyrecaptchaoptionsconfig";
import { SecurityPolicyRule } from "./securitypolicyrule";
import { Expose, Type } from "class-transformer";

/**
 * The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time.
 */
export enum SecurityPolicyTypeEnum {
  CloudArmor = "CLOUD_ARMOR",
  CloudArmorEdge = "CLOUD_ARMOR_EDGE",
  CloudArmorNetwork = "CLOUD_ARMOR_NETWORK",
  Firewall = "FIREWALL",
}

/**
 * Represents a Google Cloud Armor security policy resource. Only external backend services that use load balancers can reference a security policy. For more information, see Google Cloud Armor security policy overview.
 */
export class SecurityPolicy extends SpeakeasyBase {
  /**
   * Configuration options for Cloud Armor Adaptive Protection (CAAP).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adaptiveProtectionConfig" })
  @Type(() => SecurityPolicyAdaptiveProtectionConfig)
  adaptiveProtectionConfig?: SecurityPolicyAdaptiveProtectionConfig;

  @SpeakeasyMetadata()
  @Expose({ name: "advancedOptionsConfig" })
  @Type(() => SecurityPolicyAdvancedOptionsConfig)
  advancedOptionsConfig?: SecurityPolicyAdvancedOptionsConfig;

  /**
   * A list of associations that belong to this policy.
   */
  @SpeakeasyMetadata({ elemType: SecurityPolicyAssociation })
  @Expose({ name: "associations" })
  @Type(() => SecurityPolicyAssociation)
  associations?: SecurityPolicyAssociation[];

  /**
   * [Output Only] Creation timestamp in RFC3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ddosProtectionConfig" })
  @Type(() => SecurityPolicyDdosProtectionConfig)
  ddosProtectionConfig?: SecurityPolicyDdosProtectionConfig;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * User-provided name of the Organization security plicy. The name should be unique in the organization in which the security policy is created. This should only be used when SecurityPolicyType is FIREWALL. The name must be 1-63 characters long, and comply with https://www.ietf.org/rfc/rfc1035.txt. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * [Output only] Type of the resource. Always compute#securityPolicyfor security policies
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * A fingerprint for the labels being applied to this security policy, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the security policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelFingerprint" })
  labelFingerprint?: string;

  /**
   * Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * [Output Only] The parent of the security policy.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent" })
  parent?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recaptchaOptionsConfig" })
  @Type(() => SecurityPolicyRecaptchaOptionsConfig)
  recaptchaOptionsConfig?: SecurityPolicyRecaptchaOptionsConfig;

  /**
   * [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * [Output Only] Total count of all security policy rule tuples. A security policy can not exceed a set number of tuples.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ruleTupleCount" })
  ruleTupleCount?: number;

  /**
   * A list of rules that belong to this policy. There must always be a default rule which is a rule with priority 2147483647 and match all condition (for the match condition this means match "*" for srcIpRanges and for the networkMatch condition every field must be either match "*" or not set). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
   */
  @SpeakeasyMetadata({ elemType: SecurityPolicyRule })
  @Expose({ name: "rules" })
  @Type(() => SecurityPolicyRule)
  rules?: SecurityPolicyRule[];

  /**
   * [Output Only] Server-defined URL for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * [Output Only] Server-defined URL for this resource with the resource id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLinkWithId" })
  selfLinkWithId?: string;

  /**
   * The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD_ARMOR_NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests before the request is served from the application. This field can be set only at resource creation time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: SecurityPolicyTypeEnum;
}
