"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class SalesCreditNotes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sales_credit_notes_delete(self, request: operations.SalesCreditNotesDeleteRequest) -> operations.SalesCreditNotesDeleteResponse:
        r"""Removes an existing Sales Credit Note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SalesCreditNotesDeleteRequest, base_url, '/v1/salesCreditNotes/{id}', request)
        
        query_params = utils.get_query_params(operations.SalesCreditNotesDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SalesCreditNotesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sales_credit_notes_delete_200_application_json_object = out

        return res

    def sales_credit_notes_get(self) -> operations.SalesCreditNotesGetResponse:
        r"""Returns a list of company's Sales Credit Notes. Supports OData querying protocol.
        Filtering is allowed by \\"entryDate\\" field.
        Ordering is allowed by \\"id\\" field.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/salesCreditNotes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SalesCreditNotesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultSalesCreditNoteQueryDto])
                res.page_result_sales_credit_note_query_dto = out

        return res

    def sales_credit_notes_post(self, request: shared.SalesInvoiceCreditNoteDto) -> operations.SalesCreditNotesPostResponse:
        r"""Creates a new Sales Credit Note."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/salesCreditNotes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SalesCreditNotesPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sales_credit_notes_post_200_application_json_object = out

        return res

    def sales_credit_notes_process_batch(self, request: list[shared.BatchItemSalesInvoiceCreditNoteDto]) -> operations.SalesCreditNotesProcessBatchResponse:
        r"""Processes a batch of Sales Credit Notes."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/salesCreditNotes/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SalesCreditNotesProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sales_credit_notes_process_batch_200_application_json_object = out

        return res

    def sales_credit_notes_put(self, request: operations.SalesCreditNotesPutRequest) -> operations.SalesCreditNotesPutResponse:
        r"""Updates an existing Sales Credit Note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SalesCreditNotesPutRequest, base_url, '/v1/salesCreditNotes/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sales_invoice_credit_note_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SalesCreditNotesPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sales_credit_notes_put_200_application_json_object = out

        return res

    def get_v1_sales_credit_notes_id_(self, request: operations.GetV1SalesCreditNotesIDRequest) -> operations.GetV1SalesCreditNotesIDResponse:
        r"""Returns information about a single Sales Credit Note."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1SalesCreditNotesIDRequest, base_url, '/v1/salesCreditNotes/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1SalesCreditNotesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SalesInvoiceCreditNoteDto])
                res.sales_invoice_credit_note_dto = out

        return res

    