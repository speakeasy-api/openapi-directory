"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Earnings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_or_update_an_employee_earning(self, request: operations.AddOrUpdateAnEmployeeEarningRequest, security: operations.AddOrUpdateAnEmployeeEarningSecurity) -> operations.AddOrUpdateAnEmployeeEarningResponse:
        r"""Add/Update Earning
        Add/Update Earning API sends new or updated employee earnings information directly to Web Pay.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddOrUpdateAnEmployeeEarningRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/earnings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "earning", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddOrUpdateAnEmployeeEarningResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401, 403, 429]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def delete_earning_by_earning_code_and_start_date(self, request: operations.DeleteEarningByEarningCodeAndStartDateRequest, security: operations.DeleteEarningByEarningCodeAndStartDateSecurity) -> operations.DeleteEarningByEarningCodeAndStartDateResponse:
        r"""Delete Earning by Earning Code and Start Date
        Delete Earning by Earning Code and Start Date
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteEarningByEarningCodeAndStartDateRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEarningByEarningCodeAndStartDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 403, 404, 429]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_all_earnings(self, request: operations.GetAllEarningsRequest, security: operations.GetAllEarningsSecurity) -> operations.GetAllEarningsResponse:
        r"""Get All Earnings
        Get All Earnings returns all earnings for the selected employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllEarningsRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/earnings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllEarningsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Earning]])
                res.earnings = out
        elif http_res.status_code in [401, 403, 404, 429]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_earning_by_earning_code_and_start_date(self, request: operations.GetEarningByEarningCodeAndStartDateRequest, security: operations.GetEarningByEarningCodeAndStartDateSecurity) -> operations.GetEarningByEarningCodeAndStartDateResponse:
        r"""Get Earning by Earning Code and Start Date
        Get Earnings returns the single earning with the provided earning code and start date for the selected employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEarningByEarningCodeAndStartDateRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}/{startDate}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEarningByEarningCodeAndStartDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Earning])
                res.earning = out
        elif http_res.status_code in [401, 403, 404, 429]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_earnings_by_earning_code(self, request: operations.GetEarningsByEarningCodeRequest, security: operations.GetEarningsByEarningCodeSecurity) -> operations.GetEarningsByEarningCodeResponse:
        r"""Get Earnings by Earning Code
        Get Earnings returns all earnings with the provided earning code for the selected employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEarningsByEarningCodeRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/earnings/{earningCode}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEarningsByEarningCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Earning]])
                res.earnings = out
        elif http_res.status_code in [401, 403, 404, 429]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    