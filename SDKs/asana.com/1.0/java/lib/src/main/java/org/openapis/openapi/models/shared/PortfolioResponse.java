/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PortfolioResponse - A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/docs/asana-project-statuses) update.
 * Portfolios have some restrictions on size. Each portfolio has a max of 500 items and, like projects, a max of 20 custom fields.
 */
public class PortfolioResponse {
    /**
     * Color of the portfolio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    public PortfolioResponseColorEnum color;
    public PortfolioResponse withColor(PortfolioResponseColorEnum color) {
        this.color = color;
        return this;
    }
    
    /**
     * The time at which this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public PortfolioResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    public UserCompact createdBy;
    public PortfolioResponse withCreatedBy(UserCompact createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * The latest `status_update` posted to this portfolio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_status_update")
    public PortfolioResponseCurrentStatusUpdate currentStatusUpdate;
    public PortfolioResponse withCurrentStatusUpdate(PortfolioResponseCurrentStatusUpdate currentStatusUpdate) {
        this.currentStatusUpdate = currentStatusUpdate;
        return this;
    }
    
    /**
     * Array of custom field settings applied to the portfolio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_field_settings")
    public CustomFieldSettingResponse[] customFieldSettings;
    public PortfolioResponse withCustomFieldSettings(CustomFieldSettingResponse[] customFieldSettings) {
        this.customFieldSettings = customFieldSettings;
        return this;
    }
    
    /**
     * Array of Custom Fields.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    public CustomFieldCompact[] customFields;
    public PortfolioResponse withCustomFields(CustomFieldCompact[] customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_on")
    public OffsetDateTime dueOn;
    public PortfolioResponse withDueOn(OffsetDateTime dueOn) {
        this.dueOn = dueOn;
        return this;
    }
    
    /**
     * Globally unique identifier of the resource, as a string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gid")
    public String gid;
    public PortfolioResponse withGid(String gid) {
        this.gid = gid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members")
    public UserCompact[] members;
    public PortfolioResponse withMembers(UserCompact[] members) {
        this.members = members;
        return this;
    }
    
    /**
     * The name of the portfolio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PortfolioResponse withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public UserCompact owner;
    public PortfolioResponse withOwner(UserCompact owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * A url that points directly to the object within Asana.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permalink_url")
    public String permalinkUrl;
    public PortfolioResponse withPermalinkUrl(String permalinkUrl) {
        this.permalinkUrl = permalinkUrl;
        return this;
    }
    
    /**
     * True if the portfolio is public to its workspace members.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public")
    public Boolean public_;
    public PortfolioResponse withPublic(Boolean public_) {
        this.public_ = public_;
        return this;
    }
    
    /**
     * The base type of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    public String resourceType;
    public PortfolioResponse withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }
    
    /**
     * The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_on")
    public LocalDate startOn;
    public PortfolioResponse withStartOn(LocalDate startOn) {
        this.startOn = startOn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace")
    public PortfolioResponseWorkspace workspace;
    public PortfolioResponse withWorkspace(PortfolioResponseWorkspace workspace) {
        this.workspace = workspace;
        return this;
    }
    
}
