/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * S3DeltaDirectTarget - Specifies a target that writes to a Delta Lake data source in Amazon S3.
 */
public class S3DeltaDirectTarget {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdditionalOptions")
    public java.util.Map<String, String> additionalOptions;

    public S3DeltaDirectTarget withAdditionalOptions(java.util.Map<String, String> additionalOptions) {
        this.additionalOptions = additionalOptions;
        return this;
    }
    
    @JsonProperty("Compression")
    public DeltaTargetCompressionTypeEnum compression;

    public S3DeltaDirectTarget withCompression(DeltaTargetCompressionTypeEnum compression) {
        this.compression = compression;
        return this;
    }
    
    @JsonProperty("Format")
    public TargetFormatEnum format;

    public S3DeltaDirectTarget withFormat(TargetFormatEnum format) {
        this.format = format;
        return this;
    }
    
    @JsonProperty("Inputs")
    public String[] inputs;

    public S3DeltaDirectTarget withInputs(String[] inputs) {
        this.inputs = inputs;
        return this;
    }
    
    @JsonProperty("Name")
    public String name;

    public S3DeltaDirectTarget withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PartitionKeys")
    public String[][] partitionKeys;

    public S3DeltaDirectTarget withPartitionKeys(String[][] partitionKeys) {
        this.partitionKeys = partitionKeys;
        return this;
    }
    
    @JsonProperty("Path")
    public String path;

    public S3DeltaDirectTarget withPath(String path) {
        this.path = path;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SchemaChangePolicy")
    public DirectSchemaChangePolicy schemaChangePolicy;

    public S3DeltaDirectTarget withSchemaChangePolicy(DirectSchemaChangePolicy schemaChangePolicy) {
        this.schemaChangePolicy = schemaChangePolicy;
        return this;
    }
    
    public S3DeltaDirectTarget(@JsonProperty("Compression") DeltaTargetCompressionTypeEnum compression, @JsonProperty("Format") TargetFormatEnum format, @JsonProperty("Inputs") String[] inputs, @JsonProperty("Name") String name, @JsonProperty("Path") String path) {
        this.compression = compression;
        this.format = format;
        this.inputs = inputs;
        this.name = name;
        this.path = path;
  }
}
