// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var UpdateParticipantServerList = []string{
	"https://api.twilio.com",
}

type UpdateParticipantSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type UpdateParticipantPathParams struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
	AccountSid string `pathParam:"style=simple,explode=false,name=AccountSid"`
	// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
	CallSid string `pathParam:"style=simple,explode=false,name=CallSid"`
	// The SID of the conference with the participant to update.
	ConferenceSid string `pathParam:"style=simple,explode=false,name=ConferenceSid"`
}

// UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum - The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
type UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum string

const (
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumHead   UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "HEAD"
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumGet    UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "GET"
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumPost   UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "POST"
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumPatch  UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "PATCH"
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumPut    UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "PUT"
	UpdateParticipantUpdateParticipantRequestAnnounceMethodEnumDelete UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum = "DELETE"
)

func (e *UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum: %s", s)
	}
}

// UpdateParticipantUpdateParticipantRequestHoldMethodEnum - The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
type UpdateParticipantUpdateParticipantRequestHoldMethodEnum string

const (
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumHead   UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "HEAD"
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumGet    UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "GET"
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumPost   UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "POST"
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumPatch  UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "PATCH"
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumPut    UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "PUT"
	UpdateParticipantUpdateParticipantRequestHoldMethodEnumDelete UpdateParticipantUpdateParticipantRequestHoldMethodEnum = "DELETE"
)

func (e *UpdateParticipantUpdateParticipantRequestHoldMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateParticipantUpdateParticipantRequestHoldMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParticipantUpdateParticipantRequestHoldMethodEnum: %s", s)
	}
}

// UpdateParticipantUpdateParticipantRequestWaitMethodEnum - The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
type UpdateParticipantUpdateParticipantRequestWaitMethodEnum string

const (
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumHead   UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "HEAD"
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumGet    UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "GET"
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumPost   UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "POST"
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumPatch  UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "PATCH"
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumPut    UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "PUT"
	UpdateParticipantUpdateParticipantRequestWaitMethodEnumDelete UpdateParticipantUpdateParticipantRequestWaitMethodEnum = "DELETE"
)

func (e *UpdateParticipantUpdateParticipantRequestWaitMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = UpdateParticipantUpdateParticipantRequestWaitMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateParticipantUpdateParticipantRequestWaitMethodEnum: %s", s)
	}
}

type UpdateParticipantUpdateParticipantRequest struct {
	// The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
	AnnounceMethod *UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum `form:"name=AnnounceMethod"`
	// The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceURL *string `form:"name=AnnounceUrl"`
	// Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
	BeepOnExit *bool `form:"name=BeepOnExit"`
	// The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
	CallSidToCoach *string `form:"name=CallSidToCoach"`
	// Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
	Coaching *bool `form:"name=Coaching"`
	// Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
	EndConferenceOnExit *bool `form:"name=EndConferenceOnExit"`
	// Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
	Hold *bool `form:"name=Hold"`
	// The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
	HoldMethod *UpdateParticipantUpdateParticipantRequestHoldMethodEnum `form:"name=HoldMethod"`
	// The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	HoldURL *string `form:"name=HoldUrl"`
	// Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
	Muted *bool `form:"name=Muted"`
	// The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
	WaitMethod *UpdateParticipantUpdateParticipantRequestWaitMethodEnum `form:"name=WaitMethod"`
	// The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
	WaitURL *string `form:"name=WaitUrl"`
}

type UpdateParticipantRequest struct {
	PathParams UpdateParticipantPathParams
	Request    *UpdateParticipantUpdateParticipantRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Security   UpdateParticipantSecurity
	ServerURL  *string
}

type UpdateParticipantResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	APIV2010AccountConferenceParticipant *shared.APIV2010AccountConferenceParticipant
}
