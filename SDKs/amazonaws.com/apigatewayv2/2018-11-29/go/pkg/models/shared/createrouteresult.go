// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateRouteResultAuthorizationTypeEnum - The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
type CreateRouteResultAuthorizationTypeEnum string

const (
	CreateRouteResultAuthorizationTypeEnumNone   CreateRouteResultAuthorizationTypeEnum = "NONE"
	CreateRouteResultAuthorizationTypeEnumAwsIam CreateRouteResultAuthorizationTypeEnum = "AWS_IAM"
	CreateRouteResultAuthorizationTypeEnumCustom CreateRouteResultAuthorizationTypeEnum = "CUSTOM"
	CreateRouteResultAuthorizationTypeEnumJwt    CreateRouteResultAuthorizationTypeEnum = "JWT"
)

func (e *CreateRouteResultAuthorizationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "AWS_IAM":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "JWT":
		*e = CreateRouteResultAuthorizationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteResultAuthorizationTypeEnum: %s", s)
	}
}

// CreateRouteResult - Success
type CreateRouteResult struct {
	APIGatewayManaged                *bool                                   `json:"ApiGatewayManaged,omitempty"`
	APIKeyRequired                   *bool                                   `json:"ApiKeyRequired,omitempty"`
	AuthorizationScopes              []string                                `json:"AuthorizationScopes,omitempty"`
	AuthorizationType                *CreateRouteResultAuthorizationTypeEnum `json:"AuthorizationType,omitempty"`
	AuthorizerID                     *string                                 `json:"AuthorizerId,omitempty"`
	ModelSelectionExpression         *string                                 `json:"ModelSelectionExpression,omitempty"`
	OperationName                    *string                                 `json:"OperationName,omitempty"`
	RequestModels                    map[string]string                       `json:"RequestModels,omitempty"`
	RequestParameters                map[string]ParameterConstraints         `json:"RequestParameters,omitempty"`
	RouteID                          *string                                 `json:"RouteId,omitempty"`
	RouteKey                         *string                                 `json:"RouteKey,omitempty"`
	RouteResponseSelectionExpression *string                                 `json:"RouteResponseSelectionExpression,omitempty"`
	Target                           *string                                 `json:"Target,omitempty"`
}
