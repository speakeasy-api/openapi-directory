"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def workstations_projects_locations_operations_cancel(self, request: operations.WorkstationsProjectsLocationsOperationsCancelRequest, security: operations.WorkstationsProjectsLocationsOperationsCancelSecurity) -> operations.WorkstationsProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsOperationsCancelRequest, base_url, '/v1beta/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.google_protobuf_empty = out

        return res

    def workstations_projects_locations_operations_list(self, request: operations.WorkstationsProjectsLocationsOperationsListRequest, security: operations.WorkstationsProjectsLocationsOperationsListSecurity) -> operations.WorkstationsProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsOperationsListRequest, base_url, '/v1beta/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def workstations_projects_locations_workstation_clusters_create(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersCreateRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersCreateSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersCreateResponse:
        r"""Creates a new workstation cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersCreateRequest, base_url, '/v1beta/{parent}/workstationClusters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workstation_cluster_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_list(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersListRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersListSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersListResponse:
        r"""Returns all workstation clusters in the specified location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersListRequest, base_url, '/v1beta/{parent}/workstationClusters', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkstationClustersResponse])
                res.list_workstation_clusters_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_create(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateResponse:
        r"""Creates a new workstation configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest, base_url, '/v1beta/{parent}/workstationConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workstation_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_list(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListResponse:
        r"""Returns all workstation configurations in the specified cluster."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest, base_url, '/v1beta/{parent}/workstationConfigs', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkstationConfigsResponse])
                res.list_workstation_configs_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_list_usable(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableResponse:
        r"""Returns all workstation configurations in the specified cluster on which the caller has the \\"workstations.workstation.create\\" permission."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest, base_url, '/v1beta/{parent}/workstationConfigs:listUsable', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsListUsableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUsableWorkstationConfigsResponse])
                res.list_usable_workstation_configs_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_create(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateResponse:
        r"""Creates a new workstation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest, base_url, '/v1beta/{parent}/workstations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workstation_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_delete(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteResponse:
        r"""Deletes the specified workstation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_generate_access_token(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenResponse:
        r"""Returns a short-lived credential that can be used to send authenticated and authorized traffic to a workstation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest, base_url, '/v1beta/{workstation}:generateAccessToken', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_access_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGenerateAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateAccessTokenResponse])
                res.generate_access_token_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_get(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetResponse:
        r"""Returns the requested workstation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest, base_url, '/v1beta/{name}', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Workstation])
                res.workstation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_get_iam_policy(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicySecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest, base_url, '/v1beta/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_list(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListResponse:
        r"""Returns all Workstations using the specified config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest, base_url, '/v1beta/{parent}/workstations', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkstationsResponse])
                res.list_workstations_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_list_usable(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableResponse:
        r"""Returns all Workstations using the specified config on which the caller has the \\"workstations.workstations.use\\" permission."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest, base_url, '/v1beta/{parent}/workstations:listUsable', request)
        
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsListUsableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListUsableWorkstationsResponse])
                res.list_usable_workstations_response = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_patch(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchResponse:
        r"""Updates an existing workstation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest, base_url, '/v1beta/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "workstation_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_set_iam_policy(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicySecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest, base_url, '/v1beta/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_start(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartResponse:
        r"""Starts running a workstation so that users can connect to it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest, base_url, '/v1beta/{name}:start', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "start_workstation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_stop(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopResponse:
        r"""Stops running a workstation, reducing costs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest, base_url, '/v1beta/{name}:stop', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "stop_workstation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def workstations_projects_locations_workstation_clusters_workstation_configs_workstations_test_iam_permissions(self, request: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest, security: operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsSecurity) -> operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest, base_url, '/v1beta/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WorkstationsProjectsLocationsWorkstationClustersWorkstationConfigsWorkstationsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    