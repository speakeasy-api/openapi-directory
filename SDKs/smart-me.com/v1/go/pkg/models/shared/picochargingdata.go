// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PicoChargingDataStateEnum - The state of the charging station
type PicoChargingDataStateEnum string

const (
	PicoChargingDataStateEnumBooting             PicoChargingDataStateEnum = "Booting"
	PicoChargingDataStateEnumReadyNoCarConnected PicoChargingDataStateEnum = "ReadyNoCarConnected"
	PicoChargingDataStateEnumReadyCarConnected   PicoChargingDataStateEnum = "ReadyCarConnected"
	PicoChargingDataStateEnumStartedWaitForCar   PicoChargingDataStateEnum = "StartedWaitForCar"
	PicoChargingDataStateEnumCharging            PicoChargingDataStateEnum = "Charging"
	PicoChargingDataStateEnumOffline             PicoChargingDataStateEnum = "Offline"
)

func (e *PicoChargingDataStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Booting":
		fallthrough
	case "ReadyNoCarConnected":
		fallthrough
	case "ReadyCarConnected":
		fallthrough
	case "StartedWaitForCar":
		fallthrough
	case "Charging":
		fallthrough
	case "Offline":
		*e = PicoChargingDataStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PicoChargingDataStateEnum: %s", s)
	}
}

// PicoChargingData - Container class for the pico charging station API
type PicoChargingData struct {
	// The energy used by this active charging (in kWh)
	ActiveChargingEnergy *float64 `json:"ActiveChargingEnergy,omitempty"`
	// The power of the active charging (in kW)
	ActiveChargingPower *float64 `json:"ActiveChargingPower,omitempty"`
	// The duration of this charging in seconds
	Duration *int `json:"Duration,omitempty"`
	// The state of the charging station
	State *PicoChargingDataStateEnum `json:"State,omitempty"`
	// The date of this values
	ValueDate *time.Time `json:"ValueDate,omitempty"`
}
