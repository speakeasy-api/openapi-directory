// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdateServiceSpecificCredentialActionEnum
type GETUpdateServiceSpecificCredentialActionEnum string

const (
	GETUpdateServiceSpecificCredentialActionEnumUpdateServiceSpecificCredential GETUpdateServiceSpecificCredentialActionEnum = "UpdateServiceSpecificCredential"
)

func (e GETUpdateServiceSpecificCredentialActionEnum) ToPointer() *GETUpdateServiceSpecificCredentialActionEnum {
	return &e
}

func (e *GETUpdateServiceSpecificCredentialActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UpdateServiceSpecificCredential":
		*e = GETUpdateServiceSpecificCredentialActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateServiceSpecificCredentialActionEnum: %v", v)
	}
}

// GETUpdateServiceSpecificCredentialStatusEnum - The status to be assigned to the service-specific credential.
type GETUpdateServiceSpecificCredentialStatusEnum string

const (
	GETUpdateServiceSpecificCredentialStatusEnumActive   GETUpdateServiceSpecificCredentialStatusEnum = "Active"
	GETUpdateServiceSpecificCredentialStatusEnumInactive GETUpdateServiceSpecificCredentialStatusEnum = "Inactive"
)

func (e GETUpdateServiceSpecificCredentialStatusEnum) ToPointer() *GETUpdateServiceSpecificCredentialStatusEnum {
	return &e
}

func (e *GETUpdateServiceSpecificCredentialStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Inactive":
		*e = GETUpdateServiceSpecificCredentialStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateServiceSpecificCredentialStatusEnum: %v", v)
	}
}

// GETUpdateServiceSpecificCredentialVersionEnum
type GETUpdateServiceSpecificCredentialVersionEnum string

const (
	GETUpdateServiceSpecificCredentialVersionEnumTwoThousandAndTen0508 GETUpdateServiceSpecificCredentialVersionEnum = "2010-05-08"
)

func (e GETUpdateServiceSpecificCredentialVersionEnum) ToPointer() *GETUpdateServiceSpecificCredentialVersionEnum {
	return &e
}

func (e *GETUpdateServiceSpecificCredentialVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETUpdateServiceSpecificCredentialVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateServiceSpecificCredentialVersionEnum: %v", v)
	}
}

type GETUpdateServiceSpecificCredentialRequest struct {
	Action GETUpdateServiceSpecificCredentialActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
	ServiceSpecificCredentialID string `queryParam:"style=form,explode=true,name=ServiceSpecificCredentialId"`
	// The status to be assigned to the service-specific credential.
	Status GETUpdateServiceSpecificCredentialStatusEnum `queryParam:"style=form,explode=true,name=Status"`
	// <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          *string                                       `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETUpdateServiceSpecificCredentialVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdateServiceSpecificCredentialResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
