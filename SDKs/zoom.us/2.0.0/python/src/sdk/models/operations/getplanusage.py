"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPlanUsageSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetPlanUsageRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanBase:
    
    hosts: Optional[int] = dataclasses.field(default=None)
    r"""Number of hosts under the base plan."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""Type of the base plan."""  
    usage: Optional[int] = dataclasses.field(default=None)
    r"""Total number of usage of this plan."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanLargeMeeting:
    
    hosts: Optional[int] = dataclasses.field(default=None)
    r"""Number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""Large meeting Plan Type"""  
    usage: Optional[int] = dataclasses.field(default=None)
    r"""Number of usages for this account plan."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanRecording:
    r"""Recording Plan"""
    
    free_storage: Optional[str] = dataclasses.field(default=None)
    r"""Recording free storage."""  
    free_storage_usage: Optional[str] = dataclasses.field(default=None)
    r"""Amount of free storage used."""  
    plan_storage: Optional[str] = dataclasses.field(default=None)
    r"""Recording plan storage."""  
    plan_storage_exceed: Optional[str] = dataclasses.field(default=None)  
    plan_storage_usage: Optional[str] = dataclasses.field(default=None)
    r"""Recording storage usage."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""Recording plan type."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanUnited:
    r"""[Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""
    
    hosts: Optional[int] = dataclasses.field(default=None)
    r"""Number of licenses purchased."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the plan."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans)."""  
    usage: Optional[int] = dataclasses.field(default=None)
    r"""Number of licenses that are already being used."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanWebinar:
    
    hosts: Optional[int] = dataclasses.field(default=None)
    r"""The number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type of Webinar plan for the account."""  
    usage: Optional[int] = dataclasses.field(default=None)
    r"""The total number of plan usage."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXMLPlanZoomRooms:
    
    hosts: Optional[int] = dataclasses.field(default=None)
    r"""The number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""THe plan type for Zoom room plan."""  
    usage: Optional[int] = dataclasses.field(default=None)
    r"""The total number of usage for this plan."""  
    

@dataclasses.dataclass
class GetPlanUsage200ApplicationXML:
    r"""**HTTP Status Code:** `200` <br>
    Plan Usage returned.<br>
    """
    
    plan_base: Optional[list[GetPlanUsage200ApplicationXMLPlanBase]] = dataclasses.field(default=None)
    r"""The base plan subscribed for the sub account."""  
    plan_large_meeting: Optional[list[GetPlanUsage200ApplicationXMLPlanLargeMeeting]] = dataclasses.field(default=None)
    r"""Large Meeting Plan"""  
    plan_recording: Optional[GetPlanUsage200ApplicationXMLPlanRecording] = dataclasses.field(default=None)
    r"""Recording Plan"""  
    plan_united: Optional[GetPlanUsage200ApplicationXMLPlanUnited] = dataclasses.field(default=None)
    r"""[Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""  
    plan_webinar: Optional[list[GetPlanUsage200ApplicationXMLPlanWebinar]] = dataclasses.field(default=None)
    r"""Webinar Plan"""  
    plan_zoom_rooms: Optional[list[GetPlanUsage200ApplicationXMLPlanZoomRooms]] = dataclasses.field(default=None)
    r"""Zoom Rooms Plan"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanBase:
    
    hosts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""Number of hosts under the base plan."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the base plan."""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Total number of usage of this plan."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanLargeMeeting:
    
    hosts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""Number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Large meeting Plan Type"""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Number of usages for this account plan."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanRecording:
    r"""Recording Plan"""
    
    free_storage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free_storage'), 'exclude': lambda f: f is None }})
    r"""Recording free storage."""  
    free_storage_usage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('free_storage_usage'), 'exclude': lambda f: f is None }})
    r"""Amount of free storage used."""  
    plan_storage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_storage'), 'exclude': lambda f: f is None }})
    r"""Recording plan storage."""  
    plan_storage_exceed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_storage_exceed'), 'exclude': lambda f: f is None }})  
    plan_storage_usage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_storage_usage'), 'exclude': lambda f: f is None }})
    r"""Recording storage usage."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Recording plan type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanUnited:
    r"""[Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""
    
    hosts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""Number of licenses purchased."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the plan."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans)."""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Number of licenses that are already being used."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanWebinar:
    
    hosts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""The number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of Webinar plan for the account."""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""The total number of plan usage."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSONPlanZoomRooms:
    
    hosts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hosts'), 'exclude': lambda f: f is None }})
    r"""The number of hosts in this plan."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""THe plan type for Zoom room plan."""  
    usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""The total number of usage for this plan."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPlanUsage200ApplicationJSON:
    r"""**HTTP Status Code:** `200` <br>
    Plan Usage returned.<br>
    """
    
    plan_base: Optional[list[GetPlanUsage200ApplicationJSONPlanBase]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_base'), 'exclude': lambda f: f is None }})
    r"""The base plan subscribed for the sub account."""  
    plan_large_meeting: Optional[list[GetPlanUsage200ApplicationJSONPlanLargeMeeting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_large_meeting'), 'exclude': lambda f: f is None }})
    r"""Large Meeting Plan"""  
    plan_recording: Optional[GetPlanUsage200ApplicationJSONPlanRecording] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_recording'), 'exclude': lambda f: f is None }})
    r"""Recording Plan"""  
    plan_united: Optional[GetPlanUsage200ApplicationJSONPlanUnited] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_united'), 'exclude': lambda f: f is None }})
    r"""[Zoom United](https://zoom.us/pricing/zoom-bundles) plan."""  
    plan_webinar: Optional[list[GetPlanUsage200ApplicationJSONPlanWebinar]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_webinar'), 'exclude': lambda f: f is None }})
    r"""Webinar Plan"""  
    plan_zoom_rooms: Optional[list[GetPlanUsage200ApplicationJSONPlanZoomRooms]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_zoom_rooms'), 'exclude': lambda f: f is None }})
    r"""Zoom Rooms Plan"""  
    

@dataclasses.dataclass
class GetPlanUsageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_plan_usage_200_application_json_object: Optional[GetPlanUsage200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` <br>
    Plan Usage returned.<br>
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    