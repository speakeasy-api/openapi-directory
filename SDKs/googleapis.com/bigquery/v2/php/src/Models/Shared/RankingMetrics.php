<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RankingMetrics - Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RankingMetrics
{
    /**
     * Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
     * 
     * @var ?float $averageRank
     */
	#[\JMS\Serializer\Annotation\SerializedName('averageRank')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $averageRank = null;
    
    /**
     * Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
     * 
     * @var ?float $meanAveragePrecision
     */
	#[\JMS\Serializer\Annotation\SerializedName('meanAveragePrecision')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $meanAveragePrecision = null;
    
    /**
     * Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
     * 
     * @var ?float $meanSquaredError
     */
	#[\JMS\Serializer\Annotation\SerializedName('meanSquaredError')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $meanSquaredError = null;
    
    /**
     * A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
     * 
     * @var ?float $normalizedDiscountedCumulativeGain
     */
	#[\JMS\Serializer\Annotation\SerializedName('normalizedDiscountedCumulativeGain')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $normalizedDiscountedCumulativeGain = null;
    
	public function __construct()
	{
		$this->averageRank = null;
		$this->meanAveragePrecision = null;
		$this->meanSquaredError = null;
		$this->normalizedDiscountedCumulativeGain = null;
	}
}
