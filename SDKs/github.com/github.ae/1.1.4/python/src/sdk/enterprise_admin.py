"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EnterpriseAdmin:
    r"""Enterprise Administration"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(self, request: operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest) -> operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse:
        r"""Add a self-hosted runner to a group for an enterprise
        Adds a self-hosted runner to a runner group configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise`
        scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_create_global_webhook(self, request: operations.EnterpriseAdminCreateGlobalWebhookRequestBody) -> operations.EnterpriseAdminCreateGlobalWebhookResponse:
        r"""Create a global webhook
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/hooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook])
                res.global_hook = out

        return res

    def enterprise_admin_create_impersonation_o_auth_token(self, request: operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest) -> operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse:
        r"""Create an impersonation OAuth token
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateImpersonationOAuthTokenRequest, base_url, '/admin/users/{username}/authorizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateImpersonationOAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Authorization])
                res.authorization = out

        return res

    def enterprise_admin_create_org(self, request: operations.EnterpriseAdminCreateOrgRequestBody) -> operations.EnterpriseAdminCreateOrgResponse:
        r"""Create an organization
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/organizations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrganizationSimple])
                res.organization_simple = out

        return res

    def enterprise_admin_create_pre_receive_environment(self, request: operations.EnterpriseAdminCreatePreReceiveEnvironmentRequestBody) -> operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse:
        r"""Create a pre-receive environment
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-environments'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreatePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out

        return res

    def enterprise_admin_create_registration_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse:
        r"""Create a registration token for an enterprise
        Returns a token that you can pass to the `config` script. The token expires after one hour.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        #### Example using registration token
        
        Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        
        ```
        ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
        ```
        https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/registration-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_remove_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse:
        r"""Create a remove token for an enterprise
        Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        
        #### Example using remove token
        
        To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
        endpoint.
        
        ```
        ./config.sh remove --token TOKEN
        ```
        https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/remove-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Create a self-hosted runner group for an enterprise
        Creates a new self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_delete_global_webhook(self, request: operations.EnterpriseAdminDeleteGlobalWebhookRequest) -> operations.EnterpriseAdminDeleteGlobalWebhookResponse:
        r"""Delete a global webhook
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_impersonation_o_auth_token(self, request: operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest) -> operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse:
        r"""Delete an impersonation OAuth token
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteImpersonationOAuthTokenRequest, base_url, '/admin/users/{username}/authorizations', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteImpersonationOAuthTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_personal_access_token(self, request: operations.EnterpriseAdminDeletePersonalAccessTokenRequest) -> operations.EnterpriseAdminDeletePersonalAccessTokenResponse:
        r"""Delete a personal access token
        Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePersonalAccessTokenRequest, base_url, '/admin/tokens/{token_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePersonalAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_pre_receive_environment(self, request: operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest) -> operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse:
        r"""Delete a pre-receive environment
        If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
        
        The possible error messages are:
        
        *   _Cannot modify or delete the default environment_
        *   _Cannot delete environment that has hooks_
        *   _Cannot delete environment when download is in progress_
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminDeletePreReceiveEnvironment422ApplicationJSON])
                res.enterprise_admin_delete_pre_receive_environment_422_application_json_object = out

        return res

    def enterprise_admin_delete_public_key(self, request: operations.EnterpriseAdminDeletePublicKeyRequest) -> operations.EnterpriseAdminDeletePublicKeyResponse:
        r"""Delete a public key
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeletePublicKeyRequest, base_url, '/admin/keys/{key_ids}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeletePublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_self_hosted_runner_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse:
        r"""Delete a self-hosted runner from an enterprise
        Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_self_hosted_runner_group_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse:
        r"""Delete a self-hosted runner group from an enterprise
        Deletes a self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_user(self, request: operations.EnterpriseAdminDeleteUserRequest) -> operations.EnterpriseAdminDeleteUserResponse:
        r"""Delete a user
        Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
        
        You can delete any user account except your own.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteUserRequest, base_url, '/admin/users/{username}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_disable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Disable a selected organization for GitHub Actions in an enterprise
        Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_enable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Enable a selected organization for GitHub Actions in an enterprise
        Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_get_all_stats(self) -> operations.EnterpriseAdminGetAllStatsResponse:
        r"""Get all statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/all'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseOverview])
                res.enterprise_overview = out

        return res

    def enterprise_admin_get_allowed_actions_enterprise(self, request: operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse:
        r"""Get allowed actions for an enterprise
        Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#get-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SelectedActions])
                res.selected_actions = out

        return res

    def enterprise_admin_get_announcement(self) -> operations.EnterpriseAdminGetAnnouncementResponse:
        r"""Get the global announcement banner
        Gets the current message and expiration date of the global announcement banner in your enterprise.
        https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#get-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Announcement])
                res.announcement = out

        return res

    def enterprise_admin_get_audit_log(self, request: operations.EnterpriseAdminGetAuditLogRequest) -> operations.EnterpriseAdminGetAuditLogResponse:
        r"""Get the audit log for an enterprise
        Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAuditLogRequest, base_url, '/enterprises/{enterprise}/audit-log', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetAuditLogRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAuditLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogEvent]])
                res.audit_log_events = out

        return res

    def enterprise_admin_get_comment_stats(self) -> operations.EnterpriseAdminGetCommentStatsResponse:
        r"""Get comment statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/comments'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetCommentStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseCommentOverview])
                res.enterprise_comment_overview = out

        return res

    def enterprise_admin_get_download_status_for_pre_receive_environment(self, request: operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest) -> operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse:
        r"""Get the download status for a pre-receive environment
        In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetDownloadStatusForPreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironmentDownloadStatus])
                res.pre_receive_environment_download_status = out

        return res

    def enterprise_admin_get_gist_stats(self) -> operations.EnterpriseAdminGetGistStatsResponse:
        r"""Get gist statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/gists'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGistStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseGistOverview])
                res.enterprise_gist_overview = out

        return res

    def enterprise_admin_get_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse:
        r"""Get GitHub Actions permissions for an enterprise
        Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#get-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsEnterprisePermissions])
                res.actions_enterprise_permissions = out

        return res

    def enterprise_admin_get_global_webhook(self, request: operations.EnterpriseAdminGetGlobalWebhookRequest) -> operations.EnterpriseAdminGetGlobalWebhookResponse:
        r"""Get a global webhook
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook])
                res.global_hook = out

        return res

    def enterprise_admin_get_hooks_stats(self) -> operations.EnterpriseAdminGetHooksStatsResponse:
        r"""Get hooks statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/hooks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetHooksStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseHookOverview])
                res.enterprise_hook_overview = out

        return res

    def enterprise_admin_get_issue_stats(self) -> operations.EnterpriseAdminGetIssueStatsResponse:
        r"""Get issue statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/issues'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetIssueStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseIssueOverview])
                res.enterprise_issue_overview = out

        return res

    def enterprise_admin_get_license_information(self) -> operations.EnterpriseAdminGetLicenseInformationResponse:
        r"""Get license information
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/settings/license'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetLicenseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LicenseInfo])
                res.license_info = out

        return res

    def enterprise_admin_get_milestone_stats(self) -> operations.EnterpriseAdminGetMilestoneStatsResponse:
        r"""Get milestone statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/milestones'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetMilestoneStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseMilestoneOverview])
                res.enterprise_milestone_overview = out

        return res

    def enterprise_admin_get_org_stats(self) -> operations.EnterpriseAdminGetOrgStatsResponse:
        r"""Get organization statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/orgs'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetOrgStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseOrganizationOverview])
                res.enterprise_organization_overview = out

        return res

    def enterprise_admin_get_pages_stats(self) -> operations.EnterpriseAdminGetPagesStatsResponse:
        r"""Get pages statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/pages'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPagesStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterprisePageOverview])
                res.enterprise_page_overview = out

        return res

    def enterprise_admin_get_pre_receive_environment(self, request: operations.EnterpriseAdminGetPreReceiveEnvironmentRequest) -> operations.EnterpriseAdminGetPreReceiveEnvironmentResponse:
        r"""Get a pre-receive environment
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetPreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out

        return res

    def enterprise_admin_get_pull_request_stats(self) -> operations.EnterpriseAdminGetPullRequestStatsResponse:
        r"""Get pull request statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/pulls'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetPullRequestStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterprisePullRequestOverview])
                res.enterprise_pull_request_overview = out

        return res

    def enterprise_admin_get_repo_stats(self) -> operations.EnterpriseAdminGetRepoStatsResponse:
        r"""Get repository statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/repos'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetRepoStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseRepositoryOverview])
                res.enterprise_repository_overview = out

        return res

    def enterprise_admin_get_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse:
        r"""Get a self-hosted runner for an enterprise
        Gets a specific self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Runner])
                res.runner = out

        return res

    def enterprise_admin_get_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Get a self-hosted runner group for an enterprise
        Gets a specific self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_get_user_stats(self) -> operations.EnterpriseAdminGetUserStatsResponse:
        r"""Get users statistics
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/stats/users'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetUserStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseUserOverview])
                res.enterprise_user_overview = out

        return res

    def enterprise_admin_list_global_webhooks(self, request: operations.EnterpriseAdminListGlobalWebhooksRequest) -> operations.EnterpriseAdminListGlobalWebhooksResponse:
        r"""List global webhooks
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/hooks'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListGlobalWebhooksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListGlobalWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GlobalHook]])
                res.global_hooks = out

        return res

    def enterprise_admin_list_personal_access_tokens(self, request: operations.EnterpriseAdminListPersonalAccessTokensRequest) -> operations.EnterpriseAdminListPersonalAccessTokensResponse:
        r"""List personal access tokens
        Lists personal access tokens for all users, including admin users.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/tokens'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPersonalAccessTokensRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPersonalAccessTokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Authorization]])
                res.authorizations = out

        return res

    def enterprise_admin_list_pre_receive_environments(self, request: operations.EnterpriseAdminListPreReceiveEnvironmentsRequest) -> operations.EnterpriseAdminListPreReceiveEnvironmentsResponse:
        r"""List pre-receive environments
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/pre-receive-environments'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPreReceiveEnvironmentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPreReceiveEnvironmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PreReceiveEnvironment]])
                res.pre_receive_environments = out

        return res

    def enterprise_admin_list_public_keys(self, request: operations.EnterpriseAdminListPublicKeysRequest) -> operations.EnterpriseAdminListPublicKeysResponse:
        r"""List public keys
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/keys'
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListPublicKeysRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListPublicKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PublicKeyFull]])
                res.public_key_fulls = out

        return res

    def enterprise_admin_list_runner_applications_for_enterprise(self, request: operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest) -> operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse:
        r"""List runner applications for an enterprise
        Lists binaries for the runner application that you can download and run.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#list-runner-applications-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RunnerApplication]])
                res.runner_applications = out

        return res

    def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""List selected organizations enabled for GitHub Actions in an enterprise
        Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON])
                res.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runner_groups_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse:
        r"""List self-hosted runner groups for an enterprise
        Lists all self-hosted runner groups for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse:
        r"""List self-hosted runners for an enterprise
        Lists all self-hosted runners configured for an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""List self-hosted runners in a group for an enterprise
        Lists the self-hosted runners that are in a specific enterprise group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_ping_global_webhook(self, request: operations.EnterpriseAdminPingGlobalWebhookRequest) -> operations.EnterpriseAdminPingGlobalWebhookResponse:
        r"""Ping a global webhook
        This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminPingGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}/pings', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminPingGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_remove_announcement(self) -> operations.EnterpriseAdminRemoveAnnouncementResponse:
        r"""Remove the global announcement banner
        Removes the global announcement banner in your enterprise.
        https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#remove-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(self, request: operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest) -> operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse:
        r"""Remove a self-hosted runner from a group for an enterprise
        Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_allowed_actions_enterprise(self, request: operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse:
        r"""Set allowed actions for an enterprise
        Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#set-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "selected_actions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_announcement(self, request: shared.Announcement) -> operations.EnterpriseAdminSetAnnouncementResponse:
        r"""Set the global announcement banner
        Sets the message and expiration time for the global announcement banner in your enterprise.
        https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#set-the-global-announcement-banner - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/enterprise/announcement'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Announcement])
                res.announcement = out

        return res

    def enterprise_admin_set_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse:
        r"""Set GitHub Actions permissions for an enterprise
        Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#set-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""Set selected organizations enabled for GitHub Actions in an enterprise
        Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""Set self-hosted runners in a group for an enterprise
        Replaces the list of self-hosted runners that are part of an enterprise runner group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_start_pre_receive_environment_download(self, request: operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest) -> operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse:
        r"""Start a pre-receive environment download
        Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
        
        If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
        
        The possible error messages are:
        
        * _Cannot modify or delete the default environment_
        * _Can not start a new download when a download is in progress_
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminStartPreReceiveEnvironmentDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironmentDownloadStatus])
                res.pre_receive_environment_download_status = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminStartPreReceiveEnvironmentDownload422ApplicationJSON])
                res.enterprise_admin_start_pre_receive_environment_download_422_application_json_object = out

        return res

    def enterprise_admin_suspend_user(self, request: operations.EnterpriseAdminSuspendUserRequest) -> operations.EnterpriseAdminSuspendUserResponse:
        r"""Suspend a user
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
        
        You can suspend any user account except your own.
        
        Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\" 
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSuspendUserRequest, base_url, '/users/{username}/suspended', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_unsuspend_user(self, request: operations.EnterpriseAdminUnsuspendUserRequest) -> operations.EnterpriseAdminUnsuspendUserResponse:
        r"""Unsuspend a user
        If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUnsuspendUserRequest, base_url, '/users/{username}/suspended', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUnsuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_update_global_webhook(self, request: operations.EnterpriseAdminUpdateGlobalWebhookRequest) -> operations.EnterpriseAdminUpdateGlobalWebhookResponse:
        r"""Update a global webhook
        Parameters that are not provided will be overwritten with the default value or removed if no default exists.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateGlobalWebhookRequest, base_url, '/admin/hooks/{hook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateGlobalWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GlobalHook2])
                res.global_hook_2 = out

        return res

    def enterprise_admin_update_org_name(self, request: operations.EnterpriseAdminUpdateOrgNameRequest) -> operations.EnterpriseAdminUpdateOrgNameResponse:
        r"""Update an organization name
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateOrgNameRequest, base_url, '/admin/organizations/{org}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateOrgNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminUpdateOrgName202ApplicationJSON])
                res.enterprise_admin_update_org_name_202_application_json_object = out

        return res

    def enterprise_admin_update_pre_receive_environment(self, request: operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest) -> operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse:
        r"""Update a pre-receive environment
        You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
        https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdatePreReceiveEnvironmentRequest, base_url, '/admin/pre-receive-environments/{pre_receive_environment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdatePreReceiveEnvironmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PreReceiveEnvironment])
                res.pre_receive_environment = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminUpdatePreReceiveEnvironment422ApplicationJSON])
                res.enterprise_admin_update_pre_receive_environment_422_application_json_object = out

        return res

    def enterprise_admin_update_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Update a self-hosted runner group for an enterprise
        Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    