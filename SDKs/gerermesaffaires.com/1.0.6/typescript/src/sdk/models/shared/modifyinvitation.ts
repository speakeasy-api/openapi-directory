/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum ModifyInvitationClientManagementEnum {
  No = "no",
  Manager = "manager",
  Adn = "adn",
}

export enum ModifyInvitationFoldersRightEnum {
  Read = "read",
  Write = "write",
}

export class ModifyInvitationFolders extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Right" })
  right?: ModifyInvitationFoldersRightEnum;
}

export enum ModifyInvitationPlayerEnum {
  Guest = "guest",
  Owner = "owner",
  Manager = "manager",
  Assistant = "assistant",
  Collaborator = "collaborator",
}

/**
 * Infos to invite
 */
export class ModifyInvitation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ClientManagement" })
  clientManagement?: ModifyInvitationClientManagementEnum;

  @SpeakeasyMetadata({ elemType: ModifyInvitationFolders })
  @Expose({ name: "Folders" })
  @Type(() => ModifyInvitationFolders)
  folders?: ModifyInvitationFolders[];

  @SpeakeasyMetadata()
  @Expose({ name: "GroupIds" })
  groupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "IsAdmin" })
  isAdmin?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Player" })
  player?: ModifyInvitationPlayerEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "PlayerEnd" })
  playerEnd?: string;
}
