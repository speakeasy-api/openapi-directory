// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposSetAppAccessRestrictionsPathParams struct {
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-cloud@latest//graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposSetAppAccessRestrictionsRequestBody1 struct {
	// The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
	Apps []string `json:"apps"`
}

type ReposSetAppAccessRestrictionsRequestBodyType string

const (
	ReposSetAppAccessRestrictionsRequestBodyTypeReposSetAppAccessRestrictionsRequestBody1 ReposSetAppAccessRestrictionsRequestBodyType = "repos/set-app-access-restrictions_requestBody_1"
	ReposSetAppAccessRestrictionsRequestBodyTypeArrayOfstr                                ReposSetAppAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposSetAppAccessRestrictionsRequestBody struct {
	ReposSetAppAccessRestrictionsRequestBody1 *ReposSetAppAccessRestrictionsRequestBody1
	ArrayOfstr                                []string

	Type ReposSetAppAccessRestrictionsRequestBodyType
}

func CreateReposSetAppAccessRestrictionsRequestBodyReposSetAppAccessRestrictionsRequestBody1(reposSetAppAccessRestrictionsRequestBody1 ReposSetAppAccessRestrictionsRequestBody1) ReposSetAppAccessRestrictionsRequestBody {
	typ := ReposSetAppAccessRestrictionsRequestBodyTypeReposSetAppAccessRestrictionsRequestBody1

	return ReposSetAppAccessRestrictionsRequestBody{
		ReposSetAppAccessRestrictionsRequestBody1: &reposSetAppAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposSetAppAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposSetAppAccessRestrictionsRequestBody {
	typ := ReposSetAppAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposSetAppAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposSetAppAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposSetAppAccessRestrictionsRequestBody1 := new(ReposSetAppAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposSetAppAccessRestrictionsRequestBody1); err == nil {
		u.ReposSetAppAccessRestrictionsRequestBody1 = reposSetAppAccessRestrictionsRequestBody1
		u.Type = ReposSetAppAccessRestrictionsRequestBodyTypeReposSetAppAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposSetAppAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposSetAppAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposSetAppAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposSetAppAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposSetAppAccessRestrictionsRequest struct {
	PathParams ReposSetAppAccessRestrictionsPathParams
	Request    *ReposSetAppAccessRestrictionsRequestBody `request:"mediaType=application/json"`
}

type ReposSetAppAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Integrations []shared.Integration
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
