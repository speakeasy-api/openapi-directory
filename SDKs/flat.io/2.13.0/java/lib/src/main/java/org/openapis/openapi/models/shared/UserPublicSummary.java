/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserPublicSummary - Public User details summary
 */
public class UserPublicSummary {
    /**
     * User's Class Role (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classRole")
    public ClassRolesEnum classRole;

    public UserPublicSummary withClassRole(ClassRolesEnum classRole) {
        this.classRole = classRole;
        return this;
    }
    
    /**
     * Firstname of the user (for education users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstname")
    public String firstname;

    public UserPublicSummary withFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    /**
     * Link to user profile (for Indiv. users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlUrl")
    public String htmlUrl;

    public UserPublicSummary withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The user unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public UserPublicSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Will be 'true' if user is part of the Flat Team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFlatTeam")
    public Boolean isFlatTeam;

    public UserPublicSummary withIsFlatTeam(Boolean isFlatTeam) {
        this.isFlatTeam = isFlatTeam;
        return this;
    }
    
    /**
     * User license status. 'true' if user is an individual Power user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPowerUser")
    public Boolean isPowerUser;

    public UserPublicSummary withIsPowerUser(Boolean isPowerUser) {
        this.isPowerUser = isPowerUser;
        return this;
    }
    
    /**
     * Lastname of the user (for education users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastname")
    public String lastname;

    public UserPublicSummary withLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    /**
     * A displayable name for the user (for consumer users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UserPublicSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Organization ID (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;

    public UserPublicSummary withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * User's Organization Role (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationRole")
    public OrganizationRolesEnum organizationRole;

    public UserPublicSummary withOrganizationRole(OrganizationRolesEnum organizationRole) {
        this.organizationRole = organizationRole;
        return this;
    }
    
    /**
     * The URL of the picture to display
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("picture")
    public String picture;

    public UserPublicSummary withPicture(String picture) {
        this.picture = picture;
        return this;
    }
    
    /**
     * The name that can be directly printed (name, firstname &amp; lastname, or username)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("printableName")
    public String printableName;

    public UserPublicSummary withPrintableName(String printableName) {
        this.printableName = printableName;
        return this;
    }
    
    /**
     * The type of user account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public UserPublicSummaryTypeEnum type;

    public UserPublicSummary withType(UserPublicSummaryTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The user name (unique for the organization)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public UserPublicSummary withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public UserPublicSummary(){}
}
