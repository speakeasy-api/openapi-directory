/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum UntagResourceXAmzTargetEnum {
  CodeCommit20150413UntagResource = "CodeCommit_20150413.UntagResource",
}

export class UntagResourceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  untagResourceInput: shared.UntagResourceInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: UntagResourceXAmzTargetEnum;
}

export class UntagResourceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidResourceArnException
   */
  @SpeakeasyMetadata()
  invalidResourceArnException?: any;

  /**
   * InvalidSystemTagUsageException
   */
  @SpeakeasyMetadata()
  invalidSystemTagUsageException?: any;

  /**
   * InvalidTagKeysListException
   */
  @SpeakeasyMetadata()
  invalidTagKeysListException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceArnRequiredException
   */
  @SpeakeasyMetadata()
  resourceArnRequiredException?: any;

  /**
   * TagKeysListRequiredException
   */
  @SpeakeasyMetadata()
  tagKeysListRequiredException?: any;

  /**
   * TagPolicyException
   */
  @SpeakeasyMetadata()
  tagPolicyException?: any;

  /**
   * TooManyTagsException
   */
  @SpeakeasyMetadata()
  tooManyTagsException?: any;
}
