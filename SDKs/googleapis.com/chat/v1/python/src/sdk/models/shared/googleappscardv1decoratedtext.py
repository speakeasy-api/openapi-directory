"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleappscardv1button as shared_googleappscardv1button
from ..shared import googleappscardv1icon as shared_googleappscardv1icon
from ..shared import googleappscardv1onclick as shared_googleappscardv1onclick
from ..shared import googleappscardv1switchcontrol as shared_googleappscardv1switchcontrol
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAppsCardV1DecoratedText:
    r"""A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text."""
    
    bottom_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bottomLabel'), 'exclude': lambda f: f is None }})
    r"""The text that appears below `text`. Always truncates."""  
    button: Optional[shared_googleappscardv1button.GoogleAppsCardV1Button] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('button'), 'exclude': lambda f: f is None }})
    r"""A text, icon, or text + icon button that users can click. To make an image a clickable button, specify an Image (not an ImageComponent) and set an `onClick` action. Currently supported in Chat apps (including [dialogs] (https://developers.google.com/chat/how-tos/dialogs) and [card messages] (https://developers.google.com/chat/api/guides/message-formats/cards)) and Google Workspace Add-ons."""  
    end_icon: Optional[shared_googleappscardv1icon.GoogleAppsCardV1Icon] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIcon'), 'exclude': lambda f: f is None }})
    r"""An icon displayed in a widget on a card. Supports [built-in](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons) and [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons) icons."""  
    icon: Optional[shared_googleappscardv1icon.GoogleAppsCardV1Icon] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon'), 'exclude': lambda f: f is None }})
    r"""An icon displayed in a widget on a card. Supports [built-in](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons) and [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons) icons."""  
    on_click: Optional[shared_googleappscardv1onclick.GoogleAppsCardV1OnClick] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onClick'), 'exclude': lambda f: f is None }})
    r"""Represents how to respond when users click an interactive element on a card, such as a button."""  
    start_icon: Optional[shared_googleappscardv1icon.GoogleAppsCardV1Icon] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIcon'), 'exclude': lambda f: f is None }})
    r"""An icon displayed in a widget on a card. Supports [built-in](https://developers.google.com/chat/api/guides/message-formats/cards#builtinicons) and [custom](https://developers.google.com/chat/api/guides/message-formats/cards#customicons) icons."""  
    switch_control: Optional[shared_googleappscardv1switchcontrol.GoogleAppsCardV1SwitchControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchControl'), 'exclude': lambda f: f is None }})
    r"""Either a toggle-style switch or a checkbox inside a `decoratedText` widget. Only supported on the `decoratedText` widget."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Required. The primary text. Supports simple formatting. See Text formatting for formatting details."""  
    top_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topLabel'), 'exclude': lambda f: f is None }})
    r"""The text that appears above `text`. Always truncates."""  
    wrap_text: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrapText'), 'exclude': lambda f: f is None }})
    r"""The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`."""  
    