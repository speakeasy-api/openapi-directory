"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mutation as shared_mutation
from ..shared import transactionoptions as shared_transactionoptions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CommitRequestModeEnum(str, Enum):
    r"""The type of commit to perform. Defaults to `TRANSACTIONAL`."""
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    TRANSACTIONAL = 'TRANSACTIONAL'
    NON_TRANSACTIONAL = 'NON_TRANSACTIONAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitRequest:
    r"""The request for Datastore.Commit."""
    
    database_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseId'), 'exclude': lambda f: f is None }})
    r"""The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database."""  
    mode: Optional[CommitRequestModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The type of commit to perform. Defaults to `TRANSACTIONAL`."""  
    mutations: Optional[list[shared_mutation.Mutation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutations'), 'exclude': lambda f: f is None }})
    r"""The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity."""  
    single_use_transaction: Optional[shared_transactionoptions.TransactionOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleUseTransaction'), 'exclude': lambda f: f is None }})
    r"""Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests."""  
    transaction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction'), 'exclude': lambda f: f is None }})
    r"""The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction."""  
    