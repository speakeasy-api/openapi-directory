/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LambdaFunctionSortByEnum } from "./lambdafunctionsortbyenum";
import { MapFilter } from "./mapfilter";
import { SortOrderEnum } from "./sortorderenum";
import { StringFilter } from "./stringfilter";
import { Expose, Type } from "class-transformer";

/**
 * The details that define a findings aggregation based on AWS Lambda functions.
 */
export class LambdaFunctionAggregation extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "functionNames" })
  @Type(() => StringFilter)
  functionNames?: StringFilter[];

  @SpeakeasyMetadata({ elemType: MapFilter })
  @Expose({ name: "functionTags" })
  @Type(() => MapFilter)
  functionTags?: MapFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "resourceIds" })
  @Type(() => StringFilter)
  resourceIds?: StringFilter[];

  @SpeakeasyMetadata({ elemType: StringFilter })
  @Expose({ name: "runtimes" })
  @Type(() => StringFilter)
  runtimes?: StringFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "sortBy" })
  sortBy?: LambdaFunctionSortByEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sortOrder" })
  sortOrder?: SortOrderEnum;
}
