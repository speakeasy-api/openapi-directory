/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class BqmlTrainingRun {
    /**
     * [Output-only, Beta] List of each iteration results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iterationResults")
    public BqmlIterationResult[] iterationResults;
    public BqmlTrainingRun withIterationResults(BqmlIterationResult[] iterationResults) {
        this.iterationResults = iterationResults;
        return this;
    }
    
    /**
     * [Output-only, Beta] Training run start time in milliseconds since the epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;
    public BqmlTrainingRun withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public BqmlTrainingRun withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trainingOptions")
    public BqmlTrainingRunTrainingOptions trainingOptions;
    public BqmlTrainingRun withTrainingOptions(BqmlTrainingRunTrainingOptions trainingOptions) {
        this.trainingOptions = trainingOptions;
        return this;
    }
    
}
