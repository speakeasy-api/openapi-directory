"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PricingConfigurationPriceVariation:
    r"""Price Variation object."""
    
    lower_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lowerLimit'), 'exclude': lambda f: f is None }})
    r"""Lower variation limit."""  
    upper_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upperLimit'), 'exclude': lambda f: f is None }})
    r"""Upper variation limit."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PricingConfigurationTradePolicyConfigs:
    
    minimum_markup: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumMarkup'), 'exclude': lambda f: f is None }})
    r"""Trade Policy Minimum Markup."""  
    rules_should_affect_list_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesShouldAffectListPrice'), 'exclude': lambda f: f is None }})
    r"""Defines if the Price Rule should affect the list price too."""  
    trade_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradePolicyId'), 'exclude': lambda f: f is None }})
    r"""Trade Policy ID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PricingConfiguration:
    r"""OK"""
    
    default_markup: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultMarkup') }})
    r"""Account default markup."""  
    has_migrated: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasMigrated') }})
    r"""Defines if the account has migrated to Pricing V2."""  
    minimum_markups: dict[str, int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumMarkups') }})
    r"""Account minimum markup."""  
    block_account: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockAccount'), 'exclude': lambda f: f is None }})
    r"""Defines if access to the Pricing APIs is blocked for external requests."""  
    blocked_routes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockedRoutes'), 'exclude': lambda f: f is None }})
    r"""Array with all blocked routes."""  
    has_optional_base_price: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasOptionalBasePrice'), 'exclude': lambda f: f is None }})
    r"""Defines if optional base price is allowed."""  
    has_price_inheritance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasPriceInheritance'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Use the `priceInheritance` field instead."""  
    migration_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrationStatus'), 'exclude': lambda f: f is None }})
    r"""Pricing V2 migration status."""  
    price_inheritance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceInheritance'), 'exclude': lambda f: f is None }})
    r"""Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices."""  
    price_table_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTableLimit'), 'exclude': lambda f: f is None }})
    r"""Price Table Limit."""  
    price_table_selection_strategy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceTableSelectionStrategy'), 'exclude': lambda f: f is None }})
    r"""The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`."""  
    price_variation: Optional[PricingConfigurationPriceVariation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceVariation'), 'exclude': lambda f: f is None }})
    r"""Price Variation object."""  
    sellers_to_override: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellersToOverride'), 'exclude': lambda f: f is None }})
    r"""Overrides prices from sellers."""  
    trade_policy_configs: Optional[list[PricingConfigurationTradePolicyConfigs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradePolicyConfigs'), 'exclude': lambda f: f is None }})
    r"""Trade Policy Configurations array."""  
    