"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationPolicy = exports.ApplicationPolicyWorkProfileWidgetsEnum = exports.ApplicationPolicyInstallTypeEnum = exports.ApplicationPolicyDelegatedScopesEnum = exports.ApplicationPolicyDefaultPermissionPolicyEnum = exports.ApplicationPolicyConnectedWorkAndPersonalAppEnum = exports.ApplicationPolicyAutoUpdateModeEnum = exports.ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var extensionconfig_1 = require("./extensionconfig");
var managedconfigurationtemplate_1 = require("./managedconfigurationtemplate");
var permissiongrant_1 = require("./permissiongrant");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy.
 */
var ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum;
(function (ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum) {
    ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum["AlwaysOnVpnLockdownExemptionUnspecified"] = "ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED";
    ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum["VpnLockdownEnforced"] = "VPN_LOCKDOWN_ENFORCED";
    ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum["VpnLockdownExemption"] = "VPN_LOCKDOWN_EXEMPTION";
})(ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum = exports.ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum || (exports.ApplicationPolicyAlwaysOnVpnLockdownExemptionEnum = {}));
/**
 * Controls the auto-update mode for the app.
 */
var ApplicationPolicyAutoUpdateModeEnum;
(function (ApplicationPolicyAutoUpdateModeEnum) {
    ApplicationPolicyAutoUpdateModeEnum["AutoUpdateModeUnspecified"] = "AUTO_UPDATE_MODE_UNSPECIFIED";
    ApplicationPolicyAutoUpdateModeEnum["AutoUpdateDefault"] = "AUTO_UPDATE_DEFAULT";
    ApplicationPolicyAutoUpdateModeEnum["AutoUpdatePostponed"] = "AUTO_UPDATE_POSTPONED";
    ApplicationPolicyAutoUpdateModeEnum["AutoUpdateHighPriority"] = "AUTO_UPDATE_HIGH_PRIORITY";
})(ApplicationPolicyAutoUpdateModeEnum = exports.ApplicationPolicyAutoUpdateModeEnum || (exports.ApplicationPolicyAutoUpdateModeEnum = {}));
/**
 * Controls whether the app can communicate with itself across a deviceâ€™s work and personal profiles, subject to user consent.
 */
var ApplicationPolicyConnectedWorkAndPersonalAppEnum;
(function (ApplicationPolicyConnectedWorkAndPersonalAppEnum) {
    ApplicationPolicyConnectedWorkAndPersonalAppEnum["ConnectedWorkAndPersonalAppUnspecified"] = "CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED";
    ApplicationPolicyConnectedWorkAndPersonalAppEnum["ConnectedWorkAndPersonalAppDisallowed"] = "CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED";
    ApplicationPolicyConnectedWorkAndPersonalAppEnum["ConnectedWorkAndPersonalAppAllowed"] = "CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED";
})(ApplicationPolicyConnectedWorkAndPersonalAppEnum = exports.ApplicationPolicyConnectedWorkAndPersonalAppEnum || (exports.ApplicationPolicyConnectedWorkAndPersonalAppEnum = {}));
/**
 * The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps.
 */
var ApplicationPolicyDefaultPermissionPolicyEnum;
(function (ApplicationPolicyDefaultPermissionPolicyEnum) {
    ApplicationPolicyDefaultPermissionPolicyEnum["PermissionPolicyUnspecified"] = "PERMISSION_POLICY_UNSPECIFIED";
    ApplicationPolicyDefaultPermissionPolicyEnum["Prompt"] = "PROMPT";
    ApplicationPolicyDefaultPermissionPolicyEnum["Grant"] = "GRANT";
    ApplicationPolicyDefaultPermissionPolicyEnum["Deny"] = "DENY";
})(ApplicationPolicyDefaultPermissionPolicyEnum = exports.ApplicationPolicyDefaultPermissionPolicyEnum || (exports.ApplicationPolicyDefaultPermissionPolicyEnum = {}));
var ApplicationPolicyDelegatedScopesEnum;
(function (ApplicationPolicyDelegatedScopesEnum) {
    ApplicationPolicyDelegatedScopesEnum["DelegatedScopeUnspecified"] = "DELEGATED_SCOPE_UNSPECIFIED";
    ApplicationPolicyDelegatedScopesEnum["CertInstall"] = "CERT_INSTALL";
    ApplicationPolicyDelegatedScopesEnum["ManagedConfigurations"] = "MANAGED_CONFIGURATIONS";
    ApplicationPolicyDelegatedScopesEnum["BlockUninstall"] = "BLOCK_UNINSTALL";
    ApplicationPolicyDelegatedScopesEnum["PermissionGrant"] = "PERMISSION_GRANT";
    ApplicationPolicyDelegatedScopesEnum["PackageAccess"] = "PACKAGE_ACCESS";
    ApplicationPolicyDelegatedScopesEnum["EnableSystemApp"] = "ENABLE_SYSTEM_APP";
    ApplicationPolicyDelegatedScopesEnum["NetworkActivityLogs"] = "NETWORK_ACTIVITY_LOGS";
    ApplicationPolicyDelegatedScopesEnum["SecurityLogs"] = "SECURITY_LOGS";
})(ApplicationPolicyDelegatedScopesEnum = exports.ApplicationPolicyDelegatedScopesEnum || (exports.ApplicationPolicyDelegatedScopesEnum = {}));
/**
 * The type of installation to perform.
 */
var ApplicationPolicyInstallTypeEnum;
(function (ApplicationPolicyInstallTypeEnum) {
    ApplicationPolicyInstallTypeEnum["InstallTypeUnspecified"] = "INSTALL_TYPE_UNSPECIFIED";
    ApplicationPolicyInstallTypeEnum["Preinstalled"] = "PREINSTALLED";
    ApplicationPolicyInstallTypeEnum["ForceInstalled"] = "FORCE_INSTALLED";
    ApplicationPolicyInstallTypeEnum["Blocked"] = "BLOCKED";
    ApplicationPolicyInstallTypeEnum["Available"] = "AVAILABLE";
    ApplicationPolicyInstallTypeEnum["RequiredForSetup"] = "REQUIRED_FOR_SETUP";
    ApplicationPolicyInstallTypeEnum["Kiosk"] = "KIOSK";
})(ApplicationPolicyInstallTypeEnum = exports.ApplicationPolicyInstallTypeEnum || (exports.ApplicationPolicyInstallTypeEnum = {}));
/**
 * Specifies whether the app installed in the work profile is allowed to add widgets to the home screen.
 */
var ApplicationPolicyWorkProfileWidgetsEnum;
(function (ApplicationPolicyWorkProfileWidgetsEnum) {
    ApplicationPolicyWorkProfileWidgetsEnum["WorkProfileWidgetsUnspecified"] = "WORK_PROFILE_WIDGETS_UNSPECIFIED";
    ApplicationPolicyWorkProfileWidgetsEnum["WorkProfileWidgetsAllowed"] = "WORK_PROFILE_WIDGETS_ALLOWED";
    ApplicationPolicyWorkProfileWidgetsEnum["WorkProfileWidgetsDisallowed"] = "WORK_PROFILE_WIDGETS_DISALLOWED";
})(ApplicationPolicyWorkProfileWidgetsEnum = exports.ApplicationPolicyWorkProfileWidgetsEnum || (exports.ApplicationPolicyWorkProfileWidgetsEnum = {}));
/**
 * Policy for an individual app.
 */
var ApplicationPolicy = /** @class */ (function (_super) {
    __extends(ApplicationPolicy, _super);
    function ApplicationPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accessibleTrackIds" }),
        __metadata("design:type", Array)
    ], ApplicationPolicy.prototype, "accessibleTrackIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alwaysOnVpnLockdownExemption" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "alwaysOnVpnLockdownExemption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoUpdateMode" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "autoUpdateMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "connectedWorkAndPersonalApp" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "connectedWorkAndPersonalApp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "defaultPermissionPolicy" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "defaultPermissionPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "delegatedScopes" }),
        __metadata("design:type", Array)
    ], ApplicationPolicy.prototype, "delegatedScopes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "disabled" }),
        __metadata("design:type", Boolean)
    ], ApplicationPolicy.prototype, "disabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "extensionConfig" }),
        (0, class_transformer_1.Type)(function () { return extensionconfig_1.ExtensionConfig; }),
        __metadata("design:type", extensionconfig_1.ExtensionConfig)
    ], ApplicationPolicy.prototype, "extensionConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "installType" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "installType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lockTaskAllowed" }),
        __metadata("design:type", Boolean)
    ], ApplicationPolicy.prototype, "lockTaskAllowed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "managedConfiguration" }),
        __metadata("design:type", Object)
    ], ApplicationPolicy.prototype, "managedConfiguration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "managedConfigurationTemplate" }),
        (0, class_transformer_1.Type)(function () { return managedconfigurationtemplate_1.ManagedConfigurationTemplate; }),
        __metadata("design:type", managedconfigurationtemplate_1.ManagedConfigurationTemplate)
    ], ApplicationPolicy.prototype, "managedConfigurationTemplate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minimumVersionCode" }),
        __metadata("design:type", Number)
    ], ApplicationPolicy.prototype, "minimumVersionCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "packageName" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "packageName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: permissiongrant_1.PermissionGrant }),
        (0, class_transformer_1.Expose)({ name: "permissionGrants" }),
        (0, class_transformer_1.Type)(function () { return permissiongrant_1.PermissionGrant; }),
        __metadata("design:type", Array)
    ], ApplicationPolicy.prototype, "permissionGrants", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "workProfileWidgets" }),
        __metadata("design:type", String)
    ], ApplicationPolicy.prototype, "workProfileWidgets", void 0);
    return ApplicationPolicy;
}(utils_1.SpeakeasyBase));
exports.ApplicationPolicy = ApplicationPolicy;
