// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CompensationFilterTypeEnum - Required. Type of filter.
type CompensationFilterTypeEnum string

const (
	CompensationFilterTypeEnumFilterTypeUnspecified CompensationFilterTypeEnum = "FILTER_TYPE_UNSPECIFIED"
	CompensationFilterTypeEnumUnitOnly              CompensationFilterTypeEnum = "UNIT_ONLY"
	CompensationFilterTypeEnumUnitAndAmount         CompensationFilterTypeEnum = "UNIT_AND_AMOUNT"
	CompensationFilterTypeEnumAnnualizedBaseAmount  CompensationFilterTypeEnum = "ANNUALIZED_BASE_AMOUNT"
	CompensationFilterTypeEnumAnnualizedTotalAmount CompensationFilterTypeEnum = "ANNUALIZED_TOTAL_AMOUNT"
)

func (e CompensationFilterTypeEnum) ToPointer() *CompensationFilterTypeEnum {
	return &e
}

func (e *CompensationFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILTER_TYPE_UNSPECIFIED":
		fallthrough
	case "UNIT_ONLY":
		fallthrough
	case "UNIT_AND_AMOUNT":
		fallthrough
	case "ANNUALIZED_BASE_AMOUNT":
		fallthrough
	case "ANNUALIZED_TOTAL_AMOUNT":
		*e = CompensationFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompensationFilterTypeEnum: %v", v)
	}
}

type CompensationFilterUnitsEnum string

const (
	CompensationFilterUnitsEnumCompensationUnitUnspecified CompensationFilterUnitsEnum = "COMPENSATION_UNIT_UNSPECIFIED"
	CompensationFilterUnitsEnumHourly                      CompensationFilterUnitsEnum = "HOURLY"
	CompensationFilterUnitsEnumDaily                       CompensationFilterUnitsEnum = "DAILY"
	CompensationFilterUnitsEnumWeekly                      CompensationFilterUnitsEnum = "WEEKLY"
	CompensationFilterUnitsEnumMonthly                     CompensationFilterUnitsEnum = "MONTHLY"
	CompensationFilterUnitsEnumYearly                      CompensationFilterUnitsEnum = "YEARLY"
	CompensationFilterUnitsEnumOneTime                     CompensationFilterUnitsEnum = "ONE_TIME"
	CompensationFilterUnitsEnumOtherCompensationUnit       CompensationFilterUnitsEnum = "OTHER_COMPENSATION_UNIT"
)

func (e CompensationFilterUnitsEnum) ToPointer() *CompensationFilterUnitsEnum {
	return &e
}

func (e *CompensationFilterUnitsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPENSATION_UNIT_UNSPECIFIED":
		fallthrough
	case "HOURLY":
		fallthrough
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "YEARLY":
		fallthrough
	case "ONE_TIME":
		fallthrough
	case "OTHER_COMPENSATION_UNIT":
		*e = CompensationFilterUnitsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompensationFilterUnitsEnum: %v", v)
	}
}

// CompensationFilter - Input only. Filter on job compensation type and amount.
type CompensationFilter struct {
	// Optional. If set to true, jobs with unspecified compensation range fields are included.
	IncludeJobsWithUnspecifiedCompensationRange *bool `json:"includeJobsWithUnspecifiedCompensationRange,omitempty"`
	// Compensation range.
	Range *CompensationRange `json:"range,omitempty"`
	// Required. Type of filter.
	Type *CompensationFilterTypeEnum `json:"type,omitempty"`
	// Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.
	Units []CompensationFilterUnitsEnum `json:"units,omitempty"`
}
