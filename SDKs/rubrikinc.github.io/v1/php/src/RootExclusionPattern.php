<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootExclusionPattern 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk create exclusion patterns
     * 
     * Bulk create exclusion patterns.
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\ExclusionPatternCreateConfig> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkCreateExclusionPatternResponse
     */
	public function bulkCreateExclusionPattern(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkCreateExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern/bulk');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkCreateExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exclusionPatternDetailList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExclusionPatternDetailList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Bulk delete the provided mutable exclusion patterns
     * 
     * Bulk deletes the mutable patterns in a specified set of exclusion patterns.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternResponse
     */
	public function bulkDeleteExclusionPattern(
        \OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern/bulk');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BulkDeleteExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create an exclusion pattern
     * 
     * Create a exclusion pattern.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ExclusionPatternCreateConfig $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExclusionPatternResponse
     */
	public function createExclusionPattern(
        \OpenAPI\OpenAPI\Models\Shared\ExclusionPatternCreateConfig $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exclusionPatternDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExclusionPatternDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Delete a mutable exclusion pattern
     * 
     * Deletes an exclusion pattern if that pattern is mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternResponse
     */
	public function deleteExclusionPattern(
        \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get details of a exclusion pattern
     * 
     * Get details of a exclusion pattern.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternResponse
     */
	public function getExclusionPattern(
        \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern/{id}', \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exclusionPatternDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExclusionPatternDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a summary of all exclusion patterns
     * 
     * Get a summary of all exclusion patterns.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternResponse
     */
	public function queryExclusionPattern(
        \OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exclusionPatternDetailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExclusionPatternDetailListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a mutable exclusion pattern
     * 
     * Update mutable exclusion pattern with specified properties. The exclusion pattern which is mutable can be modified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternResponse
     */
	public function updateExclusionPattern(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exclusion_pattern/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "exclusionPatternUpdateConfig", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExclusionPatternResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exclusionPatternDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExclusionPatternDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}