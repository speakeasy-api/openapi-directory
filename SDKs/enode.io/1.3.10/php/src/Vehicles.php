<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Vehicles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Vehicle Charge State
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateResponse
     */
	public function getVehicleChargestate(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/charge-state', \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehicleChargestate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehicleChargestate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Vehicles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse
     */
	public function getVehicles(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onevehicles1Percent7BvehicleIdPercent7DGetResponses200ContentApplication1jsonSchemas = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Onevehicles1Percent7BvehicleIdPercent7DGetResponses200ContentApplication1jsonSchema>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Vehicle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidResponse
     */
	public function getVehiclesVehicleid(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}', \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehiclesVehicleid200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleid200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Vehicle Information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationResponse
     */
	public function getVehiclesVehicleidInformation(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/information', \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehiclesVehicleidInformation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidInformation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Vehicle Location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationResponse
     */
	public function getVehiclesVehicleidLocation(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/location', \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehiclesVehicleidLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidLocation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Vehicle Odometer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerResponse
     */
	public function getVehiclesVehicleidOdometer(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/odometer', \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehiclesVehicleidOdometer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidOdometer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Vehicle Smart Charging Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyResponse
     */
	public function getVehiclesVehicleidSmartchargingpolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/smart-charging-policy', \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesVehicleidSmartchargingpolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onevehicles1Percent7BvehicleIdPercent7D1smartChargingPolicyPutRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Onevehicles1Percent7BvehicleIdPercent7D1smartChargingPolicyPutRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start / Stop Charging
     * 
     * Instruct the vehicle to start or stop charging. 
     * 
     * #### Precedence over smart charging
     * If the vehicle is at a charging location where smart charging is activated:
     * - a request to `start` charging will override smart charging and charging will stay on until fully charged. 
     * - a request to `stop` charging will override smart charging and charging will be kept off for the duration of the current smart charging cycle.
     * 
     * The smart charging settings are not altered by these actions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingResponse
     */
	public function postVehiclesVehicleidCharging(
        \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/charging', \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidChargingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Start Watching Vehicle
     * 
     * Temporarily triggers high-rate updates of the vehicle's properties, and this state expires automatically. This gives you a way to tell us that user may be interacting with your application and are expecting as-fast-as-possible updates on the status of their vehicle in your UI.
     * 
     * Any data changes resulting from this high-rate updating are reflected everywhere, whether you pull data from the `Vehicles` endpoint, or recieve it via the [Firehose Webhook](#tag/Webhooks)
     * 
     * The specifics of the expiration times, watch behaviors, and change thresholds are tuned by us to make sure that they work as expected, without causing undue interruption to the vehicle. For many vendors, it is not appropriate to let the high-rate monitoring last indefinitely, as it will keep systems within the car awake that should be allowed to fall into low-power/standby modes.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchResponse
     */
	public function postVehiclesVehicleidWatch(
        \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/watch', \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVehiclesVehicleidWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onevehicles1Percent7BvehicleIdPercent7D1watchPostRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Onevehicles1Percent7BvehicleIdPercent7D1watchPostRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Vehicle Smart Charging Policy
     * 
     * Updates the Smart Charging settings for a vehicle
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyResponse
     */
	public function putVehiclesVehicleidSmartchargingpolicy(
        \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/vehicles/{vehicleId}/smart-charging-policy', \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutVehiclesVehicleidSmartchargingpolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onevehicles1Percent7BvehicleIdPercent7D1smartChargingPolicyPutRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Onevehicles1Percent7BvehicleIdPercent7D1smartChargingPolicyPutRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
}