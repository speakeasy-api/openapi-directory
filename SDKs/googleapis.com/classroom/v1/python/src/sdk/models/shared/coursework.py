"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assignment as shared_assignment
from ..shared import date_ as shared_date_
from ..shared import gradecategory as shared_gradecategory
from ..shared import individualstudentsoptions as shared_individualstudentsoptions
from ..shared import material as shared_material
from ..shared import multiplechoicequestion as shared_multiplechoicequestion
from ..shared import timeofday as shared_timeofday
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CourseWorkAssigneeModeEnum(str, Enum):
    r"""Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`."""
    ASSIGNEE_MODE_UNSPECIFIED = 'ASSIGNEE_MODE_UNSPECIFIED'
    ALL_STUDENTS = 'ALL_STUDENTS'
    INDIVIDUAL_STUDENTS = 'INDIVIDUAL_STUDENTS'

class CourseWorkStateEnum(str, Enum):
    r"""Status of this course work. If unspecified, the default state is `DRAFT`."""
    COURSE_WORK_STATE_UNSPECIFIED = 'COURSE_WORK_STATE_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    DRAFT = 'DRAFT'
    DELETED = 'DELETED'

class CourseWorkSubmissionModificationModeEnum(str, Enum):
    r"""Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`."""
    SUBMISSION_MODIFICATION_MODE_UNSPECIFIED = 'SUBMISSION_MODIFICATION_MODE_UNSPECIFIED'
    MODIFIABLE_UNTIL_TURNED_IN = 'MODIFIABLE_UNTIL_TURNED_IN'
    MODIFIABLE = 'MODIFIABLE'

class CourseWorkWorkTypeEnum(str, Enum):
    r"""Type of this course work. The type is set when the course work is created and cannot be changed."""
    COURSE_WORK_TYPE_UNSPECIFIED = 'COURSE_WORK_TYPE_UNSPECIFIED'
    ASSIGNMENT = 'ASSIGNMENT'
    SHORT_ANSWER_QUESTION = 'SHORT_ANSWER_QUESTION'
    MULTIPLE_CHOICE_QUESTION = 'MULTIPLE_CHOICE_QUESTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CourseWork:
    r"""Course work created by a teacher for students of the course."""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only."""  
    assignee_mode: Optional[CourseWorkAssigneeModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assigneeMode'), 'exclude': lambda f: f is None }})
    r"""Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`."""  
    assignment: Optional[shared_assignment.Assignment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignment'), 'exclude': lambda f: f is None }})
    r"""Additional details for assignments."""  
    associated_with_developer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedWithDeveloper'), 'exclude': lambda f: f is None }})
    r"""Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only."""  
    course_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseId'), 'exclude': lambda f: f is None }})
    r"""Identifier of the course. Read-only."""  
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp when this course work was created. Read-only."""  
    creator_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorUserId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the user that created the coursework. Read-only."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters."""  
    due_date: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueDate'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    due_time: Optional[shared_timeofday.TimeOfDay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dueTime'), 'exclude': lambda f: f is None }})
    r"""Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`."""  
    grade_category: Optional[shared_gradecategory.GradeCategory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeCategory'), 'exclude': lambda f: f is None }})
    r"""Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Classroom-assigned identifier of this course work, unique per course. Read-only."""  
    individual_students_options: Optional[shared_individualstudentsoptions.IndividualStudentsOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualStudentsOptions'), 'exclude': lambda f: f is None }})
    r"""Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`."""  
    materials: Optional[list[shared_material.Material]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('materials'), 'exclude': lambda f: f is None }})
    r"""Additional materials. CourseWork must have no more than 20 material items."""  
    max_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPoints'), 'exclude': lambda f: f is None }})
    r"""Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value."""  
    multiple_choice_question: Optional[shared_multiplechoicequestion.MultipleChoiceQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleChoiceQuestion'), 'exclude': lambda f: f is None }})
    r"""Additional details for multiple-choice questions."""  
    scheduled_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scheduledTime'), 'exclude': lambda f: f is None }})
    r"""Optional timestamp when this course work is scheduled to be published."""  
    state: Optional[CourseWorkStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Status of this course work. If unspecified, the default state is `DRAFT`."""  
    submission_modification_mode: Optional[CourseWorkSubmissionModificationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submissionModificationMode'), 'exclude': lambda f: f is None }})
    r"""Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters."""  
    topic_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topicId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the topic that this coursework is associated with. Must match an existing topic in the course."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp of the most recent change to this course work. Read-only."""  
    work_type: Optional[CourseWorkWorkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workType'), 'exclude': lambda f: f is None }})
    r"""Type of this course work. The type is set when the course work is created and cannot be changed."""  
    