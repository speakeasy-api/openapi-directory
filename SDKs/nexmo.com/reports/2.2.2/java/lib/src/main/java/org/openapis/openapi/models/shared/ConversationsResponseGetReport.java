/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ConversationsResponseGetReport - Conversations
 */
public class ConversationsResponseGetReport {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public Links links;
    public ConversationsResponseGetReport withLinks(Links links) {
        this.links = links;
        return this;
    }
    
    /**
     * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public ConversationsResponseGetReport withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * URL to send a callback upon completion of the report. This POST callback contains the same information as the response to [Get status of report](/api/reports#get-report).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    public String callbackUrl;
    public ConversationsResponseGetReport withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * Search only for events sent to this particular Conversation. This should include the "CON-" prefix.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversation_id")
    public String conversationId;
    public ConversationsResponseGetReport withConversationId(String conversationId) {
        this.conversationId = conversationId;
        return this;
    }
    
    /**
     * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]\u00b1hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when report should end.  It is exclusive, i.e. the provided value is strictly greater than the value in the field `date_received` in the CDR. &lt;br&gt;If unspecified, defaults to the current time.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date_end")
    public LocalDate dateEnd;
    public ConversationsResponseGetReport withDateEnd(LocalDate dateEnd) {
        this.dateEnd = dateEnd;
        return this;
    }
    
    /**
     * ISO-8601 extended time zone offset or ISO-8601 UTC zone offset formatted date (format `yyyy-mm-ddThh:mm:ss[.sss]\u00b1hh:mm` or `yyyy-mm-ddThh:mm:ss[.sss]Z`) for when reports  should begin. It filters on the time the API call was received by Vonage and corresponds to the field `date_received` (`date_start` for Voice) in the report file. It is inclusive, i.e. the provided value is less than or equal to the value in the field `date_received` (`date_start` for Voice) in the CDR.&lt;br&gt;If unspecified, defaults  to seven days ago.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date_start")
    public LocalDate dateStart;
    public ConversationsResponseGetReport withDateStart(LocalDate dateStart) {
        this.dateStart = dateStart;
        return this;
    }
    
    /**
     * Whether to include subaccounts or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_subaccounts")
    public IncludeSubaccountsEnum includeSubaccounts;
    public ConversationsResponseGetReport withIncludeSubaccounts(IncludeSubaccountsEnum includeSubaccounts) {
        this.includeSubaccounts = includeSubaccounts;
        return this;
    }
    
    /**
     * The number of rows in the resulting file (when report has been completed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items_count")
    public Long itemsCount;
    public ConversationsResponseGetReport withItemsCount(Long itemsCount) {
        this.itemsCount = itemsCount;
        return this;
    }
    
    /**
     * Which product you wish to generate a report for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    public ProductConversationsEnum product;
    public ConversationsResponseGetReport withProduct(ProductConversationsEnum product) {
        this.product = product;
        return this;
    }
    
    /**
     * Time at which the report request was received by the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("receive_time")
    public LocalDate receiveTime;
    public ConversationsResponseGetReport withReceiveTime(LocalDate receiveTime) {
        this.receiveTime = receiveTime;
        return this;
    }
    
    /**
     * UUID of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    public String requestId;
    public ConversationsResponseGetReport withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
    /**
     * Status of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_status")
    public RequestStatusEnum requestStatus;
    public ConversationsResponseGetReport withRequestStatus(RequestStatusEnum requestStatus) {
        this.requestStatus = requestStatus;
        return this;
    }
    
    /**
     * Time at which the report processing of the report has started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start_time")
    public LocalDate startTime;
    public ConversationsResponseGetReport withStartTime(LocalDate startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Search only for conversation events with the specified event status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ConversationsResponseGetReport withStatus(String status) {
        this.status = status;
        return this;
    }
    
}
