<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Principal - [Deprecated] All fields defined in a principal are ANDed.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Principal
{
    /**
     * An expression to specify custom condition.
     * 
     * @var ?string $condition
     */
	#[\JMS\Serializer\Annotation\SerializedName('condition')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $condition = null;
    
    /**
     * The groups the principal belongs to. Exact match, prefix match, and suffix match are supported.
     * 
     * @var ?array<string> $groups
     */
	#[\JMS\Serializer\Annotation\SerializedName('groups')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $groups = null;
    
    /**
     * IPv4 or IPv6 address or range (In CIDR format)
     * 
     * @var ?array<string> $ips
     */
	#[\JMS\Serializer\Annotation\SerializedName('ips')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $ips = null;
    
    /**
     * The namespaces. Exact match, prefix match, and suffix match are supported.
     * 
     * @var ?array<string> $namespaces
     */
	#[\JMS\Serializer\Annotation\SerializedName('namespaces')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $namespaces = null;
    
    /**
     * Negate of groups. Specifies exclusions.
     * 
     * @var ?array<string> $notGroups
     */
	#[\JMS\Serializer\Annotation\SerializedName('notGroups')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $notGroups = null;
    
    /**
     * Negate of IPs. Specifies exclusions.
     * 
     * @var ?array<string> $notIps
     */
	#[\JMS\Serializer\Annotation\SerializedName('notIps')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $notIps = null;
    
    /**
     * Negate of namespaces. Specifies exclusions.
     * 
     * @var ?array<string> $notNamespaces
     */
	#[\JMS\Serializer\Annotation\SerializedName('notNamespaces')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $notNamespaces = null;
    
    /**
     * Negate of users. Specifies exclusions.
     * 
     * @var ?array<string> $notUsers
     */
	#[\JMS\Serializer\Annotation\SerializedName('notUsers')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $notUsers = null;
    
    /**
     * A map of Istio attribute to expected values. Exact match, prefix match, and suffix match are supported for values. For example, `request.headers[version]: "v1"`. The properties are ANDed together.
     * 
     * @var ?array<string, string> $properties
     */
	#[\JMS\Serializer\Annotation\SerializedName('properties')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $properties = null;
    
    /**
     * The user names/IDs or service accounts. Exact match, prefix match, and suffix match are supported.
     * 
     * @var ?array<string> $users
     */
	#[\JMS\Serializer\Annotation\SerializedName('users')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $users = null;
    
	public function __construct()
	{
		$this->condition = null;
		$this->groups = null;
		$this->ips = null;
		$this->namespaces = null;
		$this->notGroups = null;
		$this->notIps = null;
		$this->notNamespaces = null;
		$this->notUsers = null;
		$this->properties = null;
		$this->users = null;
	}
}
