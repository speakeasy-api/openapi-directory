"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsReadResponse = exports.LogsReadLog = exports.LogsReadLogRelationships = exports.LogsReadLogLinks = exports.LogsReadLogAttributes = exports.LogsReadLogAttributesLogParams = exports.LogsReadRequest = void 0;
var utils_1 = require("../../../internal/utils");
var LogsReadRequest = /** @class */ (function (_super) {
    __extends(LogsReadRequest, _super);
    function LogsReadRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=log_id",
        }),
        __metadata("design:type", String)
    ], LogsReadRequest.prototype, "logId", void 0);
    return LogsReadRequest;
}(utils_1.SpeakeasyBase));
exports.LogsReadRequest = LogsReadRequest;
/**
 * The type of action performed on the OSF. See description for full list of possible actions.
 */
var LogsReadLogAttributesLogParams = /** @class */ (function (_super) {
    __extends(LogsReadLogAttributesLogParams, _super);
    function LogsReadLogAttributesLogParams() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "addon", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], LogsReadLogAttributesLogParams.prototype, "anonymousLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "bucket", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "citationName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "contributors", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "dataSet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "destination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "figshareTitle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "file", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "filename", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "folder", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "folderName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "forwardUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "githubRepo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "githubUser", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "identifiers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "institution", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "license", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "oldPage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "page", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "pageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "paramsNode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "paramsProject", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "path", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "pointer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "preprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "preprintProvider", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "previousInstitution", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "study", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "tag", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "target", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "templateNode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "titleNew", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "titleOriginal", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "updatedFields", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "urls", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "version", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributesLogParams.prototype, "wiki", void 0);
    return LogsReadLogAttributesLogParams;
}(utils_1.SpeakeasyBase));
exports.LogsReadLogAttributesLogParams = LogsReadLogAttributesLogParams;
/**
 * The properties of the log.
 */
var LogsReadLogAttributes = /** @class */ (function (_super) {
    __extends(LogsReadLogAttributes, _super);
    function LogsReadLogAttributes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogAttributes.prototype, "action", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], LogsReadLogAttributes.prototype, "date", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", LogsReadLogAttributesLogParams)
    ], LogsReadLogAttributes.prototype, "params", void 0);
    return LogsReadLogAttributes;
}(utils_1.SpeakeasyBase));
exports.LogsReadLogAttributes = LogsReadLogAttributes;
/**
 * URLs to alternative representations of the log entity.
 */
var LogsReadLogLinks = /** @class */ (function (_super) {
    __extends(LogsReadLogLinks, _super);
    function LogsReadLogLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogLinks.prototype, "self", void 0);
    return LogsReadLogLinks;
}(utils_1.SpeakeasyBase));
exports.LogsReadLogLinks = LogsReadLogLinks;
/**
 * URLs to other entities or entity collections that have a relationship to the log.
 */
var LogsReadLogRelationships = /** @class */ (function (_super) {
    __extends(LogsReadLogRelationships, _super);
    function LogsReadLogRelationships() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogRelationships.prototype, "linkedNode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogRelationships.prototype, "node", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogRelationships.prototype, "originalNode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogRelationships.prototype, "templateNode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLogRelationships.prototype, "user", void 0);
    return LogsReadLogRelationships;
}(utils_1.SpeakeasyBase));
exports.LogsReadLogRelationships = LogsReadLogRelationships;
var LogsReadLog = /** @class */ (function (_super) {
    __extends(LogsReadLog, _super);
    function LogsReadLog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", LogsReadLogAttributes)
    ], LogsReadLog.prototype, "attributes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLog.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", LogsReadLogLinks)
    ], LogsReadLog.prototype, "links", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", LogsReadLogRelationships)
    ], LogsReadLog.prototype, "relationships", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadLog.prototype, "type", void 0);
    return LogsReadLog;
}(utils_1.SpeakeasyBase));
exports.LogsReadLog = LogsReadLog;
var LogsReadResponse = /** @class */ (function (_super) {
    __extends(LogsReadResponse, _super);
    function LogsReadResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], LogsReadResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], LogsReadResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], LogsReadResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], LogsReadResponse.prototype, "rawResponse", void 0);
    return LogsReadResponse;
}(utils_1.SpeakeasyBase));
exports.LogsReadResponse = LogsReadResponse;
