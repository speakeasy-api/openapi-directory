/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GroupLockedSettingsApplicationJSON1Recording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_user_access_recording")
    public Boolean accountUserAccessRecording;
    public GroupLockedSettingsApplicationJSON1Recording withAccountUserAccessRecording(Boolean accountUserAccessRecording) {
        this.accountUserAccessRecording = accountUserAccessRecording;
        return this;
    }
    
    /**
     * Allow Zoom to automatically delete recordings permanently after a specified number of days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_delete_cmr")
    public Boolean autoDeleteCmr;
    public GroupLockedSettingsApplicationJSON1Recording withAutoDeleteCmr(Boolean autoDeleteCmr) {
        this.autoDeleteCmr = autoDeleteCmr;
        return this;
    }
    
    /**
     * Record meetings automatically as they start.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_recording")
    public String autoRecording;
    public GroupLockedSettingsApplicationJSON1Recording withAutoRecording(String autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording")
    public Boolean cloudRecording;
    public GroupLockedSettingsApplicationJSON1Recording withCloudRecording(Boolean cloudRecording) {
        this.cloudRecording = cloudRecording;
        return this;
    }
    
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording_download")
    public Boolean cloudRecordingDownload;
    public GroupLockedSettingsApplicationJSON1Recording withCloudRecordingDownload(Boolean cloudRecordingDownload) {
        this.cloudRecordingDownload = cloudRecordingDownload;
        return this;
    }
    
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_delete_cloud_recording")
    public Boolean hostDeleteCloudRecording;
    public GroupLockedSettingsApplicationJSON1Recording withHostDeleteCloudRecording(Boolean hostDeleteCloudRecording) {
        this.hostDeleteCloudRecording = hostDeleteCloudRecording;
        return this;
    }
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address_access_control")
    public GroupLockedSettingsApplicationJSON1RecordingIpAddressAccessControl ipAddressAccessControl;
    public GroupLockedSettingsApplicationJSON1Recording withIpAddressAccessControl(GroupLockedSettingsApplicationJSON1RecordingIpAddressAccessControl ipAddressAccessControl) {
        this.ipAddressAccessControl = ipAddressAccessControl;
        return this;
    }
    
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("local_recording")
    public Boolean localRecording;
    public GroupLockedSettingsApplicationJSON1Recording withLocalRecording(Boolean localRecording) {
        this.localRecording = localRecording;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_authentication")
    public String recordingAuthentication;
    public GroupLockedSettingsApplicationJSON1Recording withRecordingAuthentication(String recordingAuthentication) {
        this.recordingAuthentication = recordingAuthentication;
        return this;
    }
    
}
