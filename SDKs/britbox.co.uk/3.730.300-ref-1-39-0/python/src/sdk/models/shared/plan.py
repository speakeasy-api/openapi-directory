"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PlanBillingPeriodTypeEnum(str, Enum):
    r"""The type of billing period used."""
    DAY = 'day'
    WEEK = 'week'
    MONTH = 'month'
    YEAR = 'year'
    NONE = 'none'

class PlanRevenueTypeEnum(str, Enum):
    r"""The revenue type a plan targets."""
    TVOD = 'TVOD'
    SVOD = 'SVOD'

class PlanTypeEnum(str, Enum):
    r"""The type of plan."""
    FREE = 'Free'
    SUBSCRIPTION = 'Subscription'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Plan:
    r"""The Plan requested."""
    
    alias: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias') }})
    r"""An alias for a plan."""  
    benefits: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefits') }})
    r"""The list of benefits to display for a plan."""  
    billing_period_frequency: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPeriodFrequency') }})
    r"""Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks."""  
    billing_period_type: PlanBillingPeriodTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPeriodType') }})
    r"""The type of billing period used."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency a plan is offered in."""  
    has_trial_period: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasTrialPeriod') }})
    r"""True if a plan has a trial period, false if not."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier of a plan."""  
    is_active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive') }})
    r"""True if a plan is active, false if its retired."""  
    is_featured: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFeatured') }})
    r"""True if a plan should be highlighted as featured, false if not."""  
    is_private: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrivate') }})
    r"""True if a plan should not be presented in the primary plan options, false if not."""  
    revenue_type: PlanRevenueTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueType') }})
    r"""The revenue type a plan targets."""  
    subscription_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionCode') }})
    r"""The subscription code a plan targets."""  
    tagline: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagline') }})
    r"""The short tagline for a plan."""  
    terms_and_conditions: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions') }})
    r"""The terms and conditions for a plan."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title of a plan."""  
    trial_period_days: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriodDays') }})
    r"""How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true."""  
    type: PlanTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of plan."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""A map of custom fields defined by a curator for a plan."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The price of a plan. If a free plan then undefined."""  
    