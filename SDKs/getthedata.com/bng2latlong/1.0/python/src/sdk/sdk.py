"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

SERVERS = [
    "https://api.getthedata.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.
    https://www.getthedata.com/bng2latlong - Full documentation
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_bng2latlong_easting_northing_(self, request: operations.GetBng2latlongEastingNorthingRequest) -> operations.GetBng2latlongEastingNorthingResponse:
        r"""Returns latitude and longitude for the given easting and northing.
        Takes an OSGB36 easting and northing (British National Grid) and returns the geographically equivalent WGS84 latitude and longitude.
        #### A successful request returns the following fields:
        * status - this will be `ok`
        * easting - the easting provided in the request
        * northing - the northing provided in the request
        * latitude - the latitude of the converted coordinates
        * longitude - the longitude of the converted coordinates
        #### An unsuccessful request returns the following fields:
        * status - this will be `error`
        * error - an error message
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBng2latlongEastingNorthingRequest, base_url, '/bng2latlong/{easting}/{northing}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBng2latlongEastingNorthingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetBng2latlongEastingNorthing200ApplicationJSON])
                res.get_bng2latlong_easting_northing_200_application_json_object = out

        return res

    