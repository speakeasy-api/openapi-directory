// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StromkontoLoginRequestBody struct {
	Email *string `json:"email,omitempty"`
}

// StromkontoLogin200ApplicationJSONStatusEnum - Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.
type StromkontoLogin200ApplicationJSONStatusEnum string

const (
	StromkontoLogin200ApplicationJSONStatusEnumRegistered   StromkontoLogin200ApplicationJSONStatusEnum = "registered"
	StromkontoLogin200ApplicationJSONStatusEnumUnregistered StromkontoLogin200ApplicationJSONStatusEnum = "unregistered"
)

func (e *StromkontoLogin200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "registered":
		fallthrough
	case "unregistered":
		*e = StromkontoLogin200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StromkontoLogin200ApplicationJSONStatusEnum: %s", s)
	}
}

// StromkontoLogin200ApplicationJSON - Success
type StromkontoLogin200ApplicationJSON struct {
	// Registration status of a user. In case unregistered gets returned use the `register` endpoint to (re-)register.
	Status *StromkontoLogin200ApplicationJSONStatusEnum `json:"status,omitempty"`
}

type StromkontoLoginResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StromkontoLogin200ApplicationJSONObject *StromkontoLogin200ApplicationJSON
}
