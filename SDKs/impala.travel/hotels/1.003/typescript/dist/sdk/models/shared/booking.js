"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Booking = exports.BookingStatusEnum = exports.BookingNotes = exports.BookingPerson = exports.BookingCancellation = void 0;
var utils_1 = require("../../../internal/utils");
var bookedroom_1 = require("./bookedroom");
var cancellationfee_1 = require("./cancellationfee");
var hotelstub_1 = require("./hotelstub");
var class_transformer_1 = require("class-transformer");
/**
 * Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
 */
var BookingCancellation = /** @class */ (function (_super) {
    __extends(BookingCancellation, _super);
    function BookingCancellation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fee" }),
        (0, class_transformer_1.Type)(function () { return cancellationfee_1.CancellationFee; }),
        __metadata("design:type", cancellationfee_1.CancellationFee)
    ], BookingCancellation.prototype, "fee", void 0);
    return BookingCancellation;
}(utils_1.SpeakeasyBase));
exports.BookingCancellation = BookingCancellation;
/**
 * Information on a person and their contact details.
 */
var BookingPerson = /** @class */ (function (_super) {
    __extends(BookingPerson, _super);
    function BookingPerson() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contactId" }),
        __metadata("design:type", String)
    ], BookingPerson.prototype, "contactId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "email" }),
        __metadata("design:type", String)
    ], BookingPerson.prototype, "email", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "firstName" }),
        __metadata("design:type", String)
    ], BookingPerson.prototype, "firstName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastName" }),
        __metadata("design:type", String)
    ], BookingPerson.prototype, "lastName", void 0);
    return BookingPerson;
}(utils_1.SpeakeasyBase));
exports.BookingPerson = BookingPerson;
/**
 * The notes that were transmitted to the hotel as part of this booking.
 *
 * @remarks
 *
 * These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
 */
var BookingNotes = /** @class */ (function (_super) {
    __extends(BookingNotes, _super);
    function BookingNotes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromGuest" }),
        __metadata("design:type", String)
    ], BookingNotes.prototype, "fromGuest", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fromSeller" }),
        __metadata("design:type", String)
    ], BookingNotes.prototype, "fromSeller", void 0);
    return BookingNotes;
}(utils_1.SpeakeasyBase));
exports.BookingNotes = BookingNotes;
/**
 * Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
 */
var BookingStatusEnum;
(function (BookingStatusEnum) {
    BookingStatusEnum["Cancelled"] = "CANCELLED";
    BookingStatusEnum["Pending"] = "PENDING";
    BookingStatusEnum["Accepted"] = "ACCEPTED";
    BookingStatusEnum["PaymentRequired"] = "PAYMENT_REQUIRED";
    BookingStatusEnum["PaymentAbandoned"] = "PAYMENT_ABANDONED";
})(BookingStatusEnum = exports.BookingStatusEnum || (exports.BookingStatusEnum = {}));
/**
 * Details of an existing booking.
 */
var Booking = /** @class */ (function (_super) {
    __extends(Booking, _super);
    function Booking() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: bookedroom_1.BookedRoom }),
        (0, class_transformer_1.Expose)({ name: "bookedRooms" }),
        (0, class_transformer_1.Type)(function () { return bookedroom_1.BookedRoom; }),
        __metadata("design:type", Array)
    ], Booking.prototype, "bookedRooms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bookingId" }),
        __metadata("design:type", String)
    ], Booking.prototype, "bookingId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cancellation" }),
        (0, class_transformer_1.Type)(function () { return BookingCancellation; }),
        __metadata("design:type", BookingCancellation)
    ], Booking.prototype, "cancellation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contact" }),
        (0, class_transformer_1.Type)(function () { return BookingPerson; }),
        __metadata("design:type", BookingPerson)
    ], Booking.prototype, "contact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Booking.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Booking.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hotel" }),
        (0, class_transformer_1.Type)(function () { return hotelstub_1.HotelStub; }),
        __metadata("design:type", hotelstub_1.HotelStub)
    ], Booking.prototype, "hotel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hotelConfirmationCode" }),
        __metadata("design:type", String)
    ], Booking.prototype, "hotelConfirmationCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "notes" }),
        (0, class_transformer_1.Type)(function () { return BookingNotes; }),
        __metadata("design:type", BookingNotes)
    ], Booking.prototype, "notes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentBearerToken" }),
        __metadata("design:type", String)
    ], Booking.prototype, "paymentBearerToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentClientSecret" }),
        __metadata("design:type", String)
    ], Booking.prototype, "paymentClientSecret", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Booking.prototype, "start", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Booking.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Booking.prototype, "updatedAt", void 0);
    return Booking;
}(utils_1.SpeakeasyBase));
exports.Booking = Booking;
