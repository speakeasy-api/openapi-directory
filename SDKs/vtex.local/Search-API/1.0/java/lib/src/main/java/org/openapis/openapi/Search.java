/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class Search {
	
    /**
	 * PRODUCT_SEARCH_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * PRODUCT_SEARCH_FILTEREDAND_ORDERED_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] PRODUCT_SEARCH_FILTEREDAND_ORDERED_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
    /**
	 * SEARCHBYPRODUCTURL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] SEARCHBYPRODUCTURL_SERVERS = {
        "http://example.com/.{environment}.com.br",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Search(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Search for Products
     * Retrieves general information about the products related to the term searched. 
     * This is the main search used by the store. The user can type anything to be searched.  
     * 
     * For example, if they search for a "decanter", this is the URL: `https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter`. 
     * 
     * Note that maybe the response can be HTTP 200 or 206, 206 means that it's a partial content response.
     * 
     * If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources \u2192 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchResponse productSearch(org.openapis.openapi.models.operations.ProductSearchRequest request) throws Exception {
        return this.productSearch(request, null);
    }

    /**
     * Search for Products
     * Retrieves general information about the products related to the term searched. 
     * This is the main search used by the store. The user can type anything to be searched.  
     * 
     * For example, if they search for a "decanter", this is the URL: `https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter`. 
     * 
     * Note that maybe the response can be HTTP 200 or 206, 206 means that it's a partial content response.
     * 
     * If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources \u2192 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchResponse productSearch(org.openapis.openapi.models.operations.ProductSearchRequest request, String serverURL) throws Exception {
        String baseUrl = PRODUCT_SEARCH_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProductSearchRequest.class, baseUrl, "/api/catalog_system/pub/products/search/{search}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchResponse res = new org.openapis.openapi.models.operations.ProductSearchResponse() {{
            productSearch200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProductSearch200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProductSearch200ApplicationJSON[].class);
                res.productSearch200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Search for Products with Filter, Order and Pagination
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered. 
     * 
     * ## Filters  
     * 
     * - **Filter by full text** - `ft={searchWord}`  
     * E.g.: `ft=television`
     * 
     * - **Filter by category** - `fq=C:/{a}/{b}`  
     * `{a}` and `{b}` are Category IDs   
     * E.g.: `fq=C:/1000041/1000049/`
     * 
     * - **Filter by brand** - `fq=B:/{a}/{b}`  
     * `{a}` and `{b}` are Brand IDs
     * E.g.: `fq=B:/189385/189387/`
     * 
     * - **Filter by specification** - `fq=specificationFilter_{a}:{b}`  
     * `{a}` is the specification ID
     * `{b}` is the specification value
     * E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: `fq=specificationFilter_123:Blue`
     * 
     * - **Filter by price range** - `fq=P:[{a} TO {b}]`  
     * `{a}`  is the minimum price "from"
     * `{b}` is the highest price "to"  
     * E.g.: `fq=P:[0 TO 20]` will search products between 0.00 and 20.00.  
     * 
     * - **Filter by collection** - `fq=productClusterIds:{{productClusterId}}` 
     * `productClusterId` is the same as `collectionId`  
     * For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).
     * 
     * - **Filter by product ID** - `fq=productId:{{productId}}`
     * 
     * - **Filter by SKU ID** - `fq=skuId:{{skuId}}`
     * 
     * - **Filter by referenceId** - `fq=alternateIds_RefId:{{referenceId}}`
     * 
     * - **Filter by EAN13** - `fq=alternateIds_Ean:{{ean13}}`
     * 
     * - **Filter by availability at a specific sales channel** - `fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`  
     * `{{sc}}` is the desired sales channel  
     * `{{bool}}` is true ou false, 1 or 0.  
     * E.g.: seaching available products for the sales channel 4 would be `fq=isAvailablePerSalesChannel_4:1`
     * 
     * - **Filter by available at a specific seller** - `fq=sellerId:{{sellerId}}`
     * The search does not include White Label Sellers.
     * 
     * ## Pagination
     * 
     * - **Initial item number** - `_from={{first}}`
     * - **Final item number** - `_to={{last}}`
     * 
     * &gt;\u26a0\ufe0f This endpoint returns a maximum of 50 items per response, so the difference between `_from` and `_to` should not exceed this number. The result order is descending, from the highest product ID to the lowest.
     * 
     * ## Sorting
     * 
     * - **Price**  
     * `O=OrderByPriceDESC`  
     * `O=OrderByPriceASC`
     * 
     * - **Top Selling Products**  
     * `O=OrderByTopSaleDESC`
     * 
     * - **Best Reviews**  
     * `O=OrderByReviewRateDESC`
     * 
     * - **Name**  
     * `O=OrderByNameASC`  
     * `O=OrderByNameDESC`
     * 
     * - **Release Date**  
     * `O=OrderByReleaseDateDESC`
     * 
     * - **Best Discounts**  
     * `O=OrderByBestDiscountDESC`
     * 
     * - **Score**  
     * `O=OrderByScoreDESC`
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedResponse productSearchFilteredandOrdered(org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedRequest request) throws Exception {
        return this.productSearchFilteredandOrdered(request, null);
    }

    /**
     * Search for Products with Filter, Order and Pagination
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered. 
     * 
     * ## Filters  
     * 
     * - **Filter by full text** - `ft={searchWord}`  
     * E.g.: `ft=television`
     * 
     * - **Filter by category** - `fq=C:/{a}/{b}`  
     * `{a}` and `{b}` are Category IDs   
     * E.g.: `fq=C:/1000041/1000049/`
     * 
     * - **Filter by brand** - `fq=B:/{a}/{b}`  
     * `{a}` and `{b}` are Brand IDs
     * E.g.: `fq=B:/189385/189387/`
     * 
     * - **Filter by specification** - `fq=specificationFilter_{a}:{b}`  
     * `{a}` is the specification ID
     * `{b}` is the specification value
     * E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: `fq=specificationFilter_123:Blue`
     * 
     * - **Filter by price range** - `fq=P:[{a} TO {b}]`  
     * `{a}`  is the minimum price "from"
     * `{b}` is the highest price "to"  
     * E.g.: `fq=P:[0 TO 20]` will search products between 0.00 and 20.00.  
     * 
     * - **Filter by collection** - `fq=productClusterIds:{{productClusterId}}` 
     * `productClusterId` is the same as `collectionId`  
     * For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).
     * 
     * - **Filter by product ID** - `fq=productId:{{productId}}`
     * 
     * - **Filter by SKU ID** - `fq=skuId:{{skuId}}`
     * 
     * - **Filter by referenceId** - `fq=alternateIds_RefId:{{referenceId}}`
     * 
     * - **Filter by EAN13** - `fq=alternateIds_Ean:{{ean13}}`
     * 
     * - **Filter by availability at a specific sales channel** - `fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`  
     * `{{sc}}` is the desired sales channel  
     * `{{bool}}` is true ou false, 1 or 0.  
     * E.g.: seaching available products for the sales channel 4 would be `fq=isAvailablePerSalesChannel_4:1`
     * 
     * - **Filter by available at a specific seller** - `fq=sellerId:{{sellerId}}`
     * The search does not include White Label Sellers.
     * 
     * ## Pagination
     * 
     * - **Initial item number** - `_from={{first}}`
     * - **Final item number** - `_to={{last}}`
     * 
     * &gt;\u26a0\ufe0f This endpoint returns a maximum of 50 items per response, so the difference between `_from` and `_to` should not exceed this number. The result order is descending, from the highest product ID to the lowest.
     * 
     * ## Sorting
     * 
     * - **Price**  
     * `O=OrderByPriceDESC`  
     * `O=OrderByPriceASC`
     * 
     * - **Top Selling Products**  
     * `O=OrderByTopSaleDESC`
     * 
     * - **Best Reviews**  
     * `O=OrderByReviewRateDESC`
     * 
     * - **Name**  
     * `O=OrderByNameASC`  
     * `O=OrderByNameDESC`
     * 
     * - **Release Date**  
     * `O=OrderByReleaseDateDESC`
     * 
     * - **Best Discounts**  
     * `O=OrderByBestDiscountDESC`
     * 
     * - **Score**  
     * `O=OrderByScoreDESC`
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedResponse productSearchFilteredandOrdered(org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedRequest request, String serverURL) throws Exception {
        String baseUrl = PRODUCT_SEARCH_FILTEREDAND_ORDERED_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/api/catalog_system/pub/products/search");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedResponse res = new org.openapis.openapi.models.operations.ProductSearchFilteredandOrderedResponse() {{
            productSearchFilteredandOrdered200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ProductSearchFilteredandOrdered200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ProductSearchFilteredandOrdered200ApplicationJSON[].class);
                res.productSearchFilteredandOrdered200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Search Product by Product URL
     * Retrieves general information about the product of the URL you searched for.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchbyproducturlResponse searchbyproducturl(org.openapis.openapi.models.operations.SearchbyproducturlRequest request) throws Exception {
        return this.searchbyproducturl(request, null);
    }

    /**
     * Search Product by Product URL
     * Retrieves general information about the product of the URL you searched for.
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SearchbyproducturlResponse searchbyproducturl(org.openapis.openapi.models.operations.SearchbyproducturlRequest request, String serverURL) throws Exception {
        String baseUrl = SEARCHBYPRODUCTURL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SearchbyproducturlRequest.class, baseUrl, "/api/catalog_system/pub/products/search/{product-text-link}/p", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SearchbyproducturlResponse res = new org.openapis.openapi.models.operations.SearchbyproducturlResponse() {{
            searchbyproducturl200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Searchbyproducturl200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Searchbyproducturl200ApplicationJSON[].class);
                res.searchbyproducturl200ApplicationJSONObjects = out;
            }
        }

        return res;
    }
}