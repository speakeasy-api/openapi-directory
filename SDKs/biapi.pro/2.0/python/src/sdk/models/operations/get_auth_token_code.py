"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAuthTokenCode200ApplicationJSON:
    
    access: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""the reusability of a token (standard or single use)"""  
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""the temporary token"""  
    expires_in: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_in') }})
    r"""duration in seconds of the token validity"""  
    type: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""the token type"""  
    

@dataclasses.dataclass
class GetAuthTokenCodeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_auth_token_code_200_application_json_object: Optional[GetAuthTokenCode200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    