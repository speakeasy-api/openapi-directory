// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchDescribeMergeConflictsXAmzTargetEnum
type BatchDescribeMergeConflictsXAmzTargetEnum string

const (
	BatchDescribeMergeConflictsXAmzTargetEnumCodeCommit20150413BatchDescribeMergeConflicts BatchDescribeMergeConflictsXAmzTargetEnum = "CodeCommit_20150413.BatchDescribeMergeConflicts"
)

func (e BatchDescribeMergeConflictsXAmzTargetEnum) ToPointer() *BatchDescribeMergeConflictsXAmzTargetEnum {
	return &e
}

func (e *BatchDescribeMergeConflictsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.BatchDescribeMergeConflicts":
		*e = BatchDescribeMergeConflictsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchDescribeMergeConflictsXAmzTargetEnum: %v", v)
	}
}

type BatchDescribeMergeConflictsRequest struct {
	BatchDescribeMergeConflictsInput shared.BatchDescribeMergeConflictsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       BatchDescribeMergeConflictsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchDescribeMergeConflictsResponse struct {
	// Success
	BatchDescribeMergeConflictsOutput *shared.BatchDescribeMergeConflictsOutput
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitRequiredException
	CommitRequiredException interface{}
	ContentType             string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidCommitException
	InvalidCommitException interface{}
	// InvalidConflictDetailLevelException
	InvalidConflictDetailLevelException interface{}
	// InvalidConflictResolutionStrategyException
	InvalidConflictResolutionStrategyException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxConflictFilesException
	InvalidMaxConflictFilesException interface{}
	// InvalidMaxMergeHunksException
	InvalidMaxMergeHunksException interface{}
	// InvalidMergeOptionException
	InvalidMergeOptionException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// MaximumFileContentToLoadExceededException
	MaximumFileContentToLoadExceededException interface{}
	// MaximumItemsToCompareExceededException
	MaximumItemsToCompareExceededException interface{}
	// MergeOptionRequiredException
	MergeOptionRequiredException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
	// TipsDivergenceExceededException
	TipsDivergenceExceededException interface{}
}
