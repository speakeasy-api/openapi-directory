// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RegisterDevicesXAmzTargetEnum
type RegisterDevicesXAmzTargetEnum string

const (
	RegisterDevicesXAmzTargetEnumSageMakerRegisterDevices RegisterDevicesXAmzTargetEnum = "SageMaker.RegisterDevices"
)

func (e *RegisterDevicesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.RegisterDevices":
		*e = RegisterDevicesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegisterDevicesXAmzTargetEnum: %s", s)
	}
}

type RegisterDevicesHeaders struct {
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RegisterDevicesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RegisterDevicesRequest struct {
	Headers RegisterDevicesHeaders
	Request shared.RegisterDevicesRequest `request:"mediaType=application/json"`
}

type RegisterDevicesResponse struct {
	ContentType string
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	StatusCode            int
	RawResponse           *http.Response
}
