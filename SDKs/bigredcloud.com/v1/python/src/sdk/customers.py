"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def customers_delete(self, request: operations.CustomersDeleteRequest) -> operations.CustomersDeleteResponse:
        r"""Removes an existing Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersDeleteRequest, base_url, '/v1/customers/{id}', request)
        
        query_params = utils.get_query_params(operations.CustomersDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.customers_delete_200_application_json_object = out

        return res

    def customers_get(self) -> operations.CustomersGetResponse:
        r"""Returns a list of company's Customers. Supports OData querying protocol.
        Filtering is forbidden.
        Ordering is allowed by \\"id\\" and \\"code\\" fields.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/customers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultCustomerQueryDto])
                res.page_result_customer_query_dto = out

        return res

    def customers_get_account_trans(self, request: operations.CustomersGetAccountTransRequest) -> operations.CustomersGetAccountTransResponse:
        r"""Returns a list of Customer's account transactions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersGetAccountTransRequest, base_url, '/v1/customers/{itemId}/accountTrans', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersGetAccountTransResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AccountTranDto]])
                res.account_tran_dtos = out

        return res

    def customers_get_opening_balance(self, request: operations.CustomersGetOpeningBalanceRequest) -> operations.CustomersGetOpeningBalanceResponse:
        r"""Returns a Customer's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersGetOpeningBalanceRequest, base_url, '/v1/customers/{itemId}/openingBalance', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersGetOpeningBalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OwnerOpeningBalanceInPeriodsDto])
                res.owner_opening_balance_in_periods_dto = out

        return res

    def customers_get_opening_balance_list(self, request: operations.CustomersGetOpeningBalanceListRequest) -> operations.CustomersGetOpeningBalanceListResponse:
        r"""Returns a list of Customer's opening balance transactions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersGetOpeningBalanceListRequest, base_url, '/v1/customers/{itemId}/openingBalanceList', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersGetOpeningBalanceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OwnerOpeningBalanceDto]])
                res.owner_opening_balance_dtos = out

        return res

    def customers_get_quotes(self, request: operations.CustomersGetQuotesRequest) -> operations.CustomersGetQuotesResponse:
        r"""Returns a list of Customer's quotes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersGetQuotesRequest, base_url, '/v1/customers/{itemId}/quotes', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersGetQuotesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.QuoteDto]])
                res.quote_dtos = out

        return res

    def customers_post(self, request: shared.CustomerDto) -> operations.CustomersPostResponse:
        r"""Creates a new Customer."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/customers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.customers_post_200_application_json_object = out

        return res

    def customers_process_batch(self, request: list[shared.BatchItemCustomerDto]) -> operations.CustomersProcessBatchResponse:
        r"""Processes a batch of Customers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/customers/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.customers_process_batch_200_application_json_object = out

        return res

    def customers_put(self, request: operations.CustomersPutRequest) -> operations.CustomersPutResponse:
        r"""Updates an existing Customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomersPutRequest, base_url, '/v1/customers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "customer_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomersPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.customers_put_200_application_json_object = out

        return res

    def get_v1_customers_id_(self, request: operations.GetV1CustomersIDRequest) -> operations.GetV1CustomersIDResponse:
        r"""Returns information about a single Customer. You may specify that Customer's ledger balance should be calculated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1CustomersIDRequest, base_url, '/v1/customers/{id}', request)
        
        query_params = utils.get_query_params(operations.GetV1CustomersIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1CustomersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerDto])
                res.customer_dto = out

        return res

    