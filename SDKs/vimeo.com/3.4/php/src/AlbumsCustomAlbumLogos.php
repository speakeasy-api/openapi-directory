<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AlbumsCustomAlbumLogos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a custom album logo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoResponse
     */
	public function createAlbumLogo(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/logos', \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlbumLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a custom album logo
     * 
     * This method removes a custom logo from the specified album.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoResponse
     */
	public function deleteAlbumLogo(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific custom album logo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoResponse
     */
	public function getAlbumLogo(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the custom logos of an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosResponse
     */
	public function getAlbumLogos(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/logos', \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumLogosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pictures = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Picture>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace a custom album logo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoResponse
     */
	public function replaceAlbumLogo(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}/logos/{logo_id}', \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceAlbumLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}