// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UlimitNameEnum string

const (
	UlimitNameEnumCore       UlimitNameEnum = "core"
	UlimitNameEnumCPU        UlimitNameEnum = "cpu"
	UlimitNameEnumData       UlimitNameEnum = "data"
	UlimitNameEnumFsize      UlimitNameEnum = "fsize"
	UlimitNameEnumLocks      UlimitNameEnum = "locks"
	UlimitNameEnumMemlock    UlimitNameEnum = "memlock"
	UlimitNameEnumMsgqueue   UlimitNameEnum = "msgqueue"
	UlimitNameEnumNice       UlimitNameEnum = "nice"
	UlimitNameEnumNofile     UlimitNameEnum = "nofile"
	UlimitNameEnumNproc      UlimitNameEnum = "nproc"
	UlimitNameEnumRss        UlimitNameEnum = "rss"
	UlimitNameEnumRtprio     UlimitNameEnum = "rtprio"
	UlimitNameEnumRttime     UlimitNameEnum = "rttime"
	UlimitNameEnumSigpending UlimitNameEnum = "sigpending"
	UlimitNameEnumStack      UlimitNameEnum = "stack"
)

func (e *UlimitNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "core":
		fallthrough
	case "cpu":
		fallthrough
	case "data":
		fallthrough
	case "fsize":
		fallthrough
	case "locks":
		fallthrough
	case "memlock":
		fallthrough
	case "msgqueue":
		fallthrough
	case "nice":
		fallthrough
	case "nofile":
		fallthrough
	case "nproc":
		fallthrough
	case "rss":
		fallthrough
	case "rtprio":
		fallthrough
	case "rttime":
		fallthrough
	case "sigpending":
		fallthrough
	case "stack":
		*e = UlimitNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UlimitNameEnum: %s", s)
	}
}
