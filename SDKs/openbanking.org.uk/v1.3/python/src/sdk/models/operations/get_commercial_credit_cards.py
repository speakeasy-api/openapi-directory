"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetCommercialCreditCardsRequest:
    
    if_modified_since: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Modified-Since', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if modified since a given date"""  
    if_none_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-None-Match', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if the given Etag value does not match"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCardsErrorObject:
    r"""A standard error response."""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Further details describing the error"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""This corresponds to the HTTP status code"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A short title of the type of error"""  
    
class GetCommercialCreditCards503ErrorObjectDescriptionEnum(str, Enum):
    THE_SERVICE_IS_TEMPORARILY_UNAVAILABLE_ = 'The service is temporarily unavailable.'

class GetCommercialCreditCards503ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED_AND_THREE = '503'

class GetCommercialCreditCards503ErrorObjectTitleEnum(str, Enum):
    SERVICE_TEMPORARILY_UNAVAILABLE = 'Service temporarily unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards503ErrorObject:
    r"""The service is temporarily unavailable."""
    
    description: GetCommercialCreditCards503ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetCommercialCreditCards503ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetCommercialCreditCards503ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetCommercialCreditCards500ErrorObjectDescriptionEnum(str, Enum):
    AN_ERROR_OCCURRED_ON_THE_SERVER_NO_FURTHER_INFORMATION_IS_AVAILABLE_ = 'An error occurred on the server. No further information is available.'

class GetCommercialCreditCards500ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED = '500'

class GetCommercialCreditCards500ErrorObjectTitleEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'Internal server error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards500ErrorObject:
    r"""An error occurred on the server. No further information is available."""
    
    description: GetCommercialCreditCards500ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetCommercialCreditCards500ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetCommercialCreditCards500ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetCommercialCreditCards429ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_REQUESTED_THIS_RESOURCE_TOO_OFTEN_SLOW_DOWN_ = 'You have requested this resource too often. Slow down.'

class GetCommercialCreditCards429ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_TWENTY_NINE = '429'

class GetCommercialCreditCards429ErrorObjectTitleEnum(str, Enum):
    TOO_MANY_REQUESTS = 'Too many requests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards429ErrorObject:
    r"""You have requested this resource too often. Slow down."""
    
    description: GetCommercialCreditCards429ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetCommercialCreditCards429ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetCommercialCreditCards429ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetCommercialCreditCards408ErrorObjectDescriptionEnum(str, Enum):
    YOUR_CLIENT_HAS_FAILED_TO_SUBMIT_A_REQUEST_AND_A_TIMEOUT_HAS_OCCURRED_ = 'Your client has failed to submit a request, and a timeout has occurred.'

class GetCommercialCreditCards408ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_EIGHT = '408'

class GetCommercialCreditCards408ErrorObjectTitleEnum(str, Enum):
    CLIENT_TIMEOUT = 'Client timeout'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards408ErrorObject:
    r"""Your client has failed to submit a request, and a timeout has occurred."""
    
    description: GetCommercialCreditCards408ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetCommercialCreditCards408ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetCommercialCreditCards408ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetCommercialCreditCards400ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_SENT_A_REQUEST_WHICH_COULD_NOT_BE_UNDERSTOOD_ = 'You have sent a request which could not be understood.'

class GetCommercialCreditCards400ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED = '400'

class GetCommercialCreditCards400ErrorObjectTitleEnum(str, Enum):
    BAD_REQUEST = 'Bad request'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards400ErrorObject:
    r"""You have sent a request which could not be understood."""
    
    description: GetCommercialCreditCards400ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetCommercialCreditCards400ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetCommercialCreditCards400ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum(str, Enum):
    r"""Criteria that is required in order to be eligible for the Benefit"""
    CASH_DEPOSIT = 'CashDeposit'
    DEPOSIT = 'Deposit'
    DIRECT_DEBIT = 'DirectDebit'
    INITIAL_DEPOSIT = 'InitialDeposit'
    INTERNET_LOGON = 'InternetLogon'
    MOBILE_LOGON = 'MobileLogon'
    REGULAR_DEPOSIT = 'RegularDeposit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetail:
    r"""Benefit detail"""
    
    benefit_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitDescription'), 'exclude': lambda f: f is None }})
    r"""A textual explanation of what the benefit is"""  
    benefit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitID'), 'exclude': lambda f: f is None }})
    r"""Unique benefit identifier per organisation"""  
    benefit_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitName'), 'exclude': lambda f: f is None }})
    r"""The name of the benefit"""  
    benefit_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitType'), 'exclude': lambda f: f is None }})
    r"""Type that represents the nature of the benefit"""  
    benefit_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitValue'), 'exclude': lambda f: f is None }})
    r"""The value or values permissible for a specific benefit for an individual product representing a product characteristic"""  
    counter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Counter'), 'exclude': lambda f: f is None }})
    r"""Counter for the criteria (e.g. number of DD)"""  
    criteria_type: Optional[list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetailCriteriaTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CriteriaType'), 'exclude': lambda f: f is None }})  
    default_to_accounts: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultToAccounts'), 'exclude': lambda f: f is None }})
    r"""Is the benefit part of the default account"""  
    maximum_criteria: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumCriteria'), 'exclude': lambda f: f is None }})
    r"""Maximum amount for the criteria"""  
    minimum_criteria: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumCriteria'), 'exclude': lambda f: f is None }})
    r"""Minimum amount for the criteria"""  
    promotion_end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PromotionEndDate'), 'exclude': lambda f: f is None }})
    r"""If the benefit is temporal the end date is when the benefit is no longer applicable"""  
    promotion_start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PromotionStartDate'), 'exclude': lambda f: f is None }})
    r"""If the benefit is temporal the start date is when the benefit comes into effect"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItem:
    r"""Benefit Item"""
    
    benefit_detail: Optional[list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItemBenefitDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitDetail'), 'exclude': lambda f: f is None }})  
    date_of_change: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateOfChange'), 'exclude': lambda f: f is None }})
    r"""Date of the change if it refers to future terms"""  
    length_promotional_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LengthPromotionalInDays'), 'exclude': lambda f: f is None }})
    r"""Describes the length if only a duration is given instead of a date in days"""  
    start_promotion_or_future_terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartPromotionOrFutureTerms'), 'exclude': lambda f: f is None }})
    r"""Describes the start date"""  
    stop_promotion_or_future_terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StopPromotionOrFutureTerms'), 'exclude': lambda f: f is None }})
    r"""Describes the end date"""  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum(str, Enum):
    r"""Benefit Subtype Code"""
    FUTURE_MULTIPLE_TERMS = 'FutureMultipleTerms'
    PROMOTIONAL = 'Promotional'
    REGULAR = 'Regular'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroup:
    r"""Benefit Interest Group"""
    
    benefit_item: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitItem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitItem') }})
    r"""Benefit Item"""  
    benefit_sub_type: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroupBenefitSubTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitSubType'), 'exclude': lambda f: f is None }})
    r"""Benefit Subtype Code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefits:
    r"""Benefit"""
    
    benefit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Benefit') }})
    r"""Describe  one or more benefits if they exist"""  
    benefit_group: Optional[list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefitsBenefitGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BenefitGroup'), 'exclude': lambda f: f is None }})  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum(str, Enum):
    r"""CCC Subtype Code"""
    FUTURE_MULTIPLE_TERMS = 'FutureMultipleTerms'
    PROMOTIONAL = 'Promotional'
    REGULAR = 'Regular'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum(str, Enum):
    r"""The period used to define the specific interest rate for balance transfers"""
    ANNUAL = 'Annual'
    MONTHLY = 'Monthly'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum(str, Enum):
    r"""Card Scheme Code"""
    CASHCARD = 'Cashcard'
    CREDIT_MASTERCARD = 'CreditMastercard'
    CREDIT_VISA = 'CreditVisa'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum(str, Enum):
    r"""Repayment frequency"""
    DAILY = 'Daily'
    FLEXIBLE = 'Flexible'
    FORTNIGHTLY = 'Fortnightly'
    HALF_YEARLY = 'HalfYearly'
    MONTHLY = 'Monthly'
    QUARTERLY = 'Quarterly'
    WEEKLY = 'Weekly'
    YEARLY = 'Yearly'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItem:
    r"""Commercial Credit Card Item"""
    
    access_to_online_data_reporting_tool: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessToOnlineDataReportingTool') }})
    r"""Describes whether the account have access to an online tool for reprting on expenditure"""  
    annual_fee_amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualFeeAmount') }})
    r"""Standard fee on the card"""  
    apr_rate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('APRRate') }})
    r"""Annual Percentage Rate"""  
    card_scheme: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemCardSchemeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CardScheme') }})
    r"""Card Scheme Code"""  
    cash_advance_rate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashAdvanceRate') }})
    r"""Cash advance rate"""  
    cash_withdrawals_allowed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashWithdrawalsAllowed') }})
    r"""Describes whether cash withdrawals are allowed"""  
    convenience_cheque: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConvenienceCheque') }})
    r"""Describes whether the card account allow convenience cheques"""  
    days_interest_free_credit_if_payment_full: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DaysInterestFreeCreditIfPaymentFull') }})
    r"""Describes how many interest free days are given if the card is fully paid at each term"""  
    exchange_rate_adjustment: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExchangeRateAdjustment') }})
    r"""The margin added, by certain card issuers, to the scheme rate in order to arrive at the exchange rate qouted as the reference exchange rate to the cardholder"""  
    issuing_emergency_cards_fees: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuingEmergencyCardsFees') }})
    r"""Amount payable for issuing an emergency card"""  
    minimum_credit_limit: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumCreditLimit') }})
    r"""Minimum £500, maximum subject to status"""  
    payment_days_after_statement: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentDaysAfterStatement') }})
    r"""How many days after statement is the payment expected"""  
    purchase_rate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PurchaseRate') }})
    r"""Purchase rate"""  
    repayment_frequency: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepaymentFrequency') }})
    r"""Repayment frequency"""  
    statement_at_account_level: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatementAtAccountLevel') }})
    r"""Describes whether there is a statement at account level"""  
    statement_at_personal_level: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatementAtPersonalLevel') }})
    r"""Describes whether there is a statement at card level"""  
    ability_to_set_individual_limits: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AbilityToSetIndividualLimits'), 'exclude': lambda f: f is None }})
    r"""The ability to set separate limts on different cards in one account"""  
    allocationof_repayment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocationofRepayment'), 'exclude': lambda f: f is None }})
    r"""Allocation rules for repayment"""  
    annual_account_fee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualAccountFeeType'), 'exclude': lambda f: f is None }})
    r"""Details on annual account fee, such as non payable when there is a turnover above a certain sum"""  
    balance_transfer_interest_rate_period: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BalanceTransferInterestRatePeriod'), 'exclude': lambda f: f is None }})
    r"""The period used to define the specific interest rate for balance transfers"""  
    balance_transfer_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BalanceTransferRate'), 'exclude': lambda f: f is None }})
    r"""Balance transfer rate"""  
    cashback_percent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CashbackPercent'), 'exclude': lambda f: f is None }})
    r"""Percent of cashback on amount spend"""  
    cheque_fee_percent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChequeFeePercent'), 'exclude': lambda f: f is None }})
    r"""Percentage fee on convenience cheques"""  
    date_of_change: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateOfChange'), 'exclude': lambda f: f is None }})
    r"""Date of the change if it refers to future terms"""  
    fees_on_cheque: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeesOnCheque'), 'exclude': lambda f: f is None }})
    r"""Percentage fee on a convenince cheques"""  
    foreign_cash_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForeignCashFee'), 'exclude': lambda f: f is None }})
    r"""Additional card fee applied to sterling cash withdrawal made abroad"""  
    foreign_cash_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForeignCashFeeRate'), 'exclude': lambda f: f is None }})
    r"""Additional card fee rate applied to sterling cash withdrawal made abroad"""  
    foreign_purchase_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForeignPurchaseFee'), 'exclude': lambda f: f is None }})
    r"""Additional card fee applied to sterling retail transactions made abroad"""  
    foreign_purchase_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ForeignPurchaseFeeRate'), 'exclude': lambda f: f is None }})
    r"""Additional card fee rate applied to sterling retail transactions made abroad"""  
    length_promotional_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LengthPromotionalInDays'), 'exclude': lambda f: f is None }})
    r"""Describes the length if only a duration is given instead of a date"""  
    maximum_number_of_cards_permitted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumNumberOfCardsPermitted'), 'exclude': lambda f: f is None }})
    r"""The maximum numbers of cards per account"""  
    minimum_lending_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumLendingAmount'), 'exclude': lambda f: f is None }})
    r"""The minimum lending available"""  
    minimum_repayment_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumRepaymentAmount'), 'exclude': lambda f: f is None }})
    r"""Minimum repayment amount"""  
    minimum_repayment_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumRepaymentPercentage'), 'exclude': lambda f: f is None }})
    r"""Minimum repayment as percentage"""  
    non_sterling_cash_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingCashFee'), 'exclude': lambda f: f is None }})
    r"""An additional fee applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling"""  
    non_sterling_cash_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingCashFeeRate'), 'exclude': lambda f: f is None }})
    r"""An additional fee rate applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling"""  
    non_sterling_purchase_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingPurchaseFee'), 'exclude': lambda f: f is None }})
    r"""An additional fee applied to certain card retail transactions"""  
    non_sterling_purchase_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingPurchaseFeeRate'), 'exclude': lambda f: f is None }})
    r"""An additional fee rate applied to certain card retail transactions"""  
    non_sterling_transaction_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingTransactionFee'), 'exclude': lambda f: f is None }})
    r"""A fee applied to all non-Sterling card transactions"""  
    non_sterling_transaction_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonSterlingTransactionFeeRate'), 'exclude': lambda f: f is None }})
    r"""A fee rate applied to all non-Sterling card transactions"""  
    over_limit_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverLimitFee'), 'exclude': lambda f: f is None }})
    r"""Fee applicable if the card was credited over its limit"""  
    payment_scheme_exchange_fee: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentSchemeExchangeFee'), 'exclude': lambda f: f is None }})
    r"""Any payment network fee applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder"""  
    payment_scheme_exchange_fee_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentSchemeExchangeFeeRate'), 'exclude': lambda f: f is None }})
    r"""Any payment network fee rate applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder"""  
    payment_scheme_exchange_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentSchemeExchangeRate'), 'exclude': lambda f: f is None }})
    r"""The base exchange rate used in settlement of the transaction between issuer and scheme"""  
    repayment_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepaymentNotes'), 'exclude': lambda f: f is None }})
    r"""Additional notes"""  
    start_promotion_or_future_terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartPromotionOrFutureTerms'), 'exclude': lambda f: f is None }})
    r"""Describes the start date"""  
    stop_promotion_or_future_terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StopPromotionOrFutureTerms'), 'exclude': lambda f: f is None }})
    r"""Describes the end date"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetails:
    r"""Commercial Credit Card Group"""
    
    cc_sub_type: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCCSubTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CCSubType') }})
    r"""CCC Subtype Code"""  
    commercial_credit_card_item: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetailsCommercialCreditCardItem = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommercialCreditCardItem') }})
    r"""Commercial Credit Card Item"""  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum(str, Enum):
    r"""Eligibility type"""
    ANY_BUSINESS_CUSTOMER = 'AnyBusinessCustomer'
    BUSINESS_ONLY = 'BusinessOnly'
    CREDIT_CARD = 'CreditCard'
    CREDIT_SCORING = 'CreditScoring'
    EMAIL_ADDRESS = 'EmailAddress'
    EXISTING_CUSTOMERS = 'ExistingCustomers'
    ID_AND_V = 'IdAndV'
    MORTGAGE = 'Mortgage'
    NO_ARREARS_ON_LOAN = 'NoArrearsOnLoan'
    NO_CUSTOMER_IN_ARREARS = 'NoCustomerInArrears'
    NO_OVER_OVERDRAFT_THIRTY_DAYS = 'NoOverOverdraftThirtyDays'
    NO_SOLE_UK_ACCOUNT_OR_BANKRUPT = 'NoSoleUkAccountOrBankrupt'
    NTB = 'NTB'
    NTB_BUSINESS = 'NTBBusiness'
    SOLE_STUDENT_ACCOUNT = 'SoleStudentAccount'
    SOLE_UK_ACCOUNT = 'SoleUkAccount'
    STUDENTS_ONLY = 'StudentsOnly'
    TWO_MONTHS_OF_COURSE_START = 'TwoMonthsOfCourseStart'
    UCAS_FULLTIME_TWO_YEARS = 'UCASFulltimeTwoYears'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum(str, Enum):
    r"""Specific eligibility for marketing"""
    EXISTING_CUSTOMERS = 'ExistingCustomers'
    NEW_CUSTOMERS_ONLY = 'NewCustomersOnly'
    SWITCHERS_ONLY = 'SwitchersOnly'
    START_UP = 'StartUp'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum(str, Enum):
    r"""The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts"""
    ACADEMIC_TERM = 'AcademicTerm'
    HALF_YEARLY = 'HalfYearly'
    MONTHLY = 'Monthly'
    QUARTERLY = 'Quarterly'
    WEEKLY = 'Weekly'
    YEARLY = 'Yearly'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum(str, Enum):
    r"""Indicates a customer must be current resident of a geographic area/country"""
    UK = 'UK'
    EEA = 'EEA'
    EU = 'EU'
    EFTA = 'EFTA'
    GB_ENG = 'GB - ENG'
    GB_NIR = 'GB - NIR'
    GB_SCT = 'GB - SCT'
    GB_WLS = 'GB - WLS'
    IRL = 'IRL'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum(str, Enum):
    r"""Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this"""
    JOINT = 'Joint'
    SOLE_INCOME = 'SoleIncome'
    SOLE_OR_JOINT = 'SoleOrJoint'
    TURNOVER = 'Turnover'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibility:
    r"""Eligibility"""
    
    age_restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AgeRestricted') }})
    r"""Indicates a customer's age is part of eligibility criteria"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description') }})
    r"""One paragraph detailing the eligibility"""  
    income_turnover_related: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncomeTurnoverRelated') }})
    r"""Indicates if eligibility linked to income"""  
    other_financial_holding_required: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherFinancialHoldingRequired') }})
    r"""Indicates that it is necessary to hold another product with the bank in order to be eligible for this product or feature"""  
    previous_bankruptcy: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreviousBankruptcy') }})
    r"""Describes if a previous bankruptcy / insolvency disqualfies for this account Details in ELI-280"""  
    residency_restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResidencyRestricted') }})
    r"""Indicates a customer's residency forms part of the eligibility criteria"""  
    third_sector_organisations: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThirdSectorOrganisations') }})
    r"""Is the product available to operate as a Clubs or Societies account?"""  
    annual_business_turnover: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualBusinessTurnover'), 'exclude': lambda f: f is None }})
    r"""Annual Business Turnover"""  
    annual_business_turnover_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualBusinessTurnoverCurrency'), 'exclude': lambda f: f is None }})
    r"""Annual Business Turnover Currency"""  
    eligibility_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EligibilityName'), 'exclude': lambda f: f is None }})
    r"""Free text description, denotes non standard eligibilities not included in the code list"""  
    eligibility_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EligibilityNotes'), 'exclude': lambda f: f is None }})
    r"""Optional additional notes to supplement the eligibility conditions. Only used for very specific conditions"""  
    eligibility_type: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityEligibilityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EligibilityType'), 'exclude': lambda f: f is None }})
    r"""Eligibility type"""  
    income_condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncomeCondition'), 'exclude': lambda f: f is None }})
    r"""Stipulates any particular definition of income that applies to the income eligibility and/or method by which income must paid into the account (eg Salary DD)"""  
    marketing_eligibility: Optional[list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMarketingEligibilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MarketingEligibility'), 'exclude': lambda f: f is None }})  
    maximum_age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumAge'), 'exclude': lambda f: f is None }})
    r"""Maximum age, in years, allowed to hold the account"""  
    maximum_age_to_open: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumAgeToOpen'), 'exclude': lambda f: f is None }})
    r"""Maximum age, in years, to open an account"""  
    maximum_opening_amount: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumOpeningAmount'), 'exclude': lambda f: f is None }})
    r"""A maximum amount to be deposited at opening"""  
    max_number_of_accounts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxNumberOfAccounts'), 'exclude': lambda f: f is None }})
    r"""Maximum number of the same prodcut the customer may hold"""  
    minimum_age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumAge'), 'exclude': lambda f: f is None }})
    r"""Minimum age, in years, required to hold an account"""  
    minimum_deposit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumDeposit'), 'exclude': lambda f: f is None }})
    r"""A minimum deposit required to hold this account"""  
    minimum_income_frequency: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityMinimumIncomeFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumIncomeFrequency'), 'exclude': lambda f: f is None }})
    r"""The frequency that the minimum mentioned before is deposited in the account. Yearly is very important for premium accounts"""  
    minimum_income_turnover_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumIncomeTurnoverAmount'), 'exclude': lambda f: f is None }})
    r"""Minimum income / Turnover required to hold the product"""  
    minimum_income_turnover_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumIncomeTurnoverCurrency'), 'exclude': lambda f: f is None }})
    r"""Minimum income / Turnover Currency"""  
    minimum_operating_balance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumOperatingBalance'), 'exclude': lambda f: f is None }})
    r"""Minimum Operating Balance"""  
    minimum_operating_balance_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumOperatingBalanceCurrency'), 'exclude': lambda f: f is None }})
    r"""Minimum Operating Balance currency"""  
    minimum_operating_balance_exists: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumOperatingBalanceExists'), 'exclude': lambda f: f is None }})
    r"""Is there a Minimum Operating Balance?"""  
    min_income_turnover_paid_into_account: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinIncomeTurnoverPaidIntoAccount'), 'exclude': lambda f: f is None }})
    r"""Minimum Income Amount required to paid into the account"""  
    opening_deposit_maximum_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningDepositMaximumAmount'), 'exclude': lambda f: f is None }})
    r"""Maximum Amount to be depositing at opening"""  
    opening_deposit_maximum_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningDepositMaximumCurrency'), 'exclude': lambda f: f is None }})
    r"""The currency of the Minimum Amount to be depositing at opening"""  
    opening_deposit_minimum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningDepositMinimum'), 'exclude': lambda f: f is None }})
    r"""Minimum Amount to be held on account"""  
    opening_deposit_minimum_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpeningDepositMinimumCurrency'), 'exclude': lambda f: f is None }})
    r"""The currency of the Minimum Amount to be depositing at opening"""  
    residency_restricted_region: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilityResidencyRestrictedRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResidencyRestrictedRegion'), 'exclude': lambda f: f is None }})
    r"""Indicates a customer must be current resident of a geographic area/country"""  
    single_joint_income: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibilitySingleJointIncomeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SingleJointIncome'), 'exclude': lambda f: f is None }})
    r"""Minimum Income Source. For certain products a minimum income is required. This can be mandated as to the single income or to a joint income. This field describes this"""  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum(str, Enum):
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""
    UK = 'UK'
    EU = 'EU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrand:
    r"""Brand"""
    
    trademark_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkID') }})
    r"""The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted"""  
    trademark_ipo_code: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrandTrademarkIPOCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkIPOCode') }})
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisationOrganisationName:
    r"""Organisation Name"""
    
    legal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LegalName') }})
    r"""Legal Name of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisation:
    r"""Parent organisation"""
    
    organisation_name: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisationOrganisationName = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganisationName') }})
    r"""Organisation Name"""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BIC'), 'exclude': lambda f: f is None }})
    r"""The BIC from the organisation"""  
    lei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LEI'), 'exclude': lambda f: f is None }})
    r"""The LEI ID of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisation:
    r"""Organisation"""
    
    brand: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationBrand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Brand') }})
    r"""Brand"""  
    parent_organisation: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisationParentOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentOrganisation') }})
    r"""Parent organisation"""  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum(str, Enum):
    r"""Marketing or industry segment that the product is designed for"""
    CASHBACK = 'Cashback'
    CORPORATE = 'Corporate'
    GENERAL = 'General'
    REWARD = 'Reward'
    SME = 'SME'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum(str, Enum):
    r"""Descriptive code for the product category"""
    COMMERCIAL_CREDIT_CARDS = 'CommercialCreditCards'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONData:
    r"""Commercial Credit Card"""
    
    benefits: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataBenefits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Benefits') }})
    r"""Benefit"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description') }})
    r"""Product description"""  
    details: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataDetails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Details') }})
    r"""Commercial Credit Card Group"""  
    eligibility: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataEligibility = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Eligibility') }})
    r"""Eligibility"""  
    key_features: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyFeatures') }})
    r"""Product key features"""  
    organisation: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Organisation') }})
    r"""Organisation"""  
    payment_holiday: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentHoliday') }})
    r"""Indicates whether a payment holiday is possible"""  
    product_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductIdentifier') }})
    r"""Identifier within the parent organisation for the product. Must be unique in the organisation"""  
    product_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductName') }})
    r"""Name of the Commercial Credit Card"""  
    product_type: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductType') }})
    r"""Descriptive code for the product category"""  
    product_url: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductURL') }})
    r"""URL provided by the organisation which redirects to the product (on live products only). There might be more than one product at a given URL"""  
    tsand_cs: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TsandCs') }})
    r"""URL provided by the parent organisation which redirects to the current T&Cs. Only applies on live products"""  
    other_key_features: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherKeyFeatures'), 'exclude': lambda f: f is None }})
    r"""Additional Features of the card"""  
    payment_holiday_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentHolidayDescription'), 'exclude': lambda f: f is None }})
    r"""Detailed description on the payment holiday if available"""  
    product_segment: Optional[list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONDataProductSegmentEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductSegment'), 'exclude': lambda f: f is None }})
    r"""Marketing or industry segment that the product is designed for"""  
    
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum(str, Enum):
    USE_OF_THE_AP_IS_AND_ANY_RELATED_DATA_WILL_BE_SUBJECT_TO_THE_TERMS_OF_THE_OPEN_LICENCE_AND_SUBJECT_TO_TERMS_AND_CONDITIONS = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum(str, Enum):
    r"""Open Banking License"""
    HTTPS_WWW_OPENBANKING_ORG_UK_OPEN_LICENCE = 'https://www.openbanking.org.uk/open-licence'

class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum(str, Enum):
    r"""Open Banking Terms of Use"""
    HTTPS_WWW_OPENBANKING_ORG_UK_TERMS = 'https://www.openbanking.org.uk/terms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData:
    
    agreement: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Agreement') }})  
    last_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    license: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('License') }})
    r"""Open Banking License"""  
    terms_of_use: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TermsOfUse') }})
    r"""Open Banking Terms of Use"""  
    total_results: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalResults') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSON:
    r"""Successful response with a list of `Commercial Credit Card` data"""
    
    data: list[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    meta: GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclasses.dataclass
class GetCommercialCreditCardsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error_object: Optional[GetCommercialCreditCards400ErrorObject] = dataclasses.field(default=None)
    r"""You have sent a request which could not be understood."""  
    four_hundred_and_eight_error_object: Optional[GetCommercialCreditCards408ErrorObject] = dataclasses.field(default=None)
    r"""Your client has failed to submit a request, and a timeout has occurred."""  
    four_hundred_and_twenty_nine_error_object: Optional[GetCommercialCreditCards429ErrorObject] = dataclasses.field(default=None)
    r"""You have requested this resource too often. Slow down."""  
    five_hundred_error_object: Optional[GetCommercialCreditCards500ErrorObject] = dataclasses.field(default=None)
    r"""An error occurred on the server. No further information is available."""  
    five_hundred_and_three_error_object: Optional[GetCommercialCreditCards503ErrorObject] = dataclasses.field(default=None)
    r"""The service is temporarily unavailable."""  
    error_object: Optional[GetCommercialCreditCardsErrorObject] = dataclasses.field(default=None)
    r"""A standard error response."""  
    get_commercial_credit_cards_200_application_prs_openbanking_opendata_v1_3_plus_json_object: Optional[GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJSON] = dataclasses.field(default=None)
    r"""Successful response with a list of `Commercial Credit Card` data"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    