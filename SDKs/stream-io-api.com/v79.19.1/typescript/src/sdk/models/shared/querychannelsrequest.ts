/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SortParamRequest } from "./sortparamrequest";
import { Expose, Type } from "class-transformer";

/**
 * Query Channels Request
 */
export class QueryChannelsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "client_id" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "connection_id" })
  connectionId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "filter_conditions" })
  filterConditions?: Record<string, any>;

  /**
   * Number of channels to limit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "limit" })
  limit?: number;

  /**
   * Number of members to limit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member_limit" })
  memberLimit?: number;

  /**
   * Number of messages to limit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_limit" })
  messageLimit?: number;

  /**
   * Channel pagination offset
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "presence" })
  presence?: boolean;

  /**
   * List of sort parameters
   */
  @SpeakeasyMetadata({ elemType: SortParamRequest })
  @Expose({ name: "sort" })
  @Type(() => SortParamRequest)
  sort: SortParamRequest[];

  /**
   * Whether to update channel state or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: boolean;

  /**
   * Represents chat user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;

  /**
   * Whether to start watching found channels or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watch" })
  watch?: boolean;
}
