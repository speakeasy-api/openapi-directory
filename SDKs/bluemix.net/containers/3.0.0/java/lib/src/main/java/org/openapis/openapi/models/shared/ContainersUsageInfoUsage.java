/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ContainersUsageInfoUsage {
    /**
     * The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containers")
    public Integer containers;
    public ContainersUsageInfoUsage withContainers(Integer containers) {
        this.containers = containers;
        return this;
    }
    
    /**
     * The number of public IP addresses that are allocated to the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips")
    public Integer floatingIps;
    public ContainersUsageInfoUsage withFloatingIps(Integer floatingIps) {
        this.floatingIps = floatingIps;
        return this;
    }
    
    /**
     * The number of public IP addresses that are bound to a container in the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips_bound")
    public Integer floatingIpsBound;
    public ContainersUsageInfoUsage withFloatingIpsBound(Integer floatingIpsBound) {
        this.floatingIpsBound = floatingIpsBound;
        return this;
    }
    
    /**
     * The number of private images that were added to the private Bluemix registry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public Integer images;
    public ContainersUsageInfoUsage withImages(Integer images) {
        this.images = images;
        return this;
    }
    
    /**
     * The amount of container memory that is already used by the containers that were created in the space in megabyte.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory_MB")
    public Integer memoryMB;
    public ContainersUsageInfoUsage withMemoryMB(Integer memoryMB) {
        this.memoryMB = memoryMB;
        return this;
    }
    
    /**
     * The number of containers that are currently in a running state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("running")
    public Integer running;
    public ContainersUsageInfoUsage withRunning(Integer running) {
        this.running = running;
        return this;
    }
    
    /**
     * The number of virtual CPUs that are allocated to the space.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vcpu")
    public Integer vcpu;
    public ContainersUsageInfoUsage withVcpu(Integer vcpu) {
        this.vcpu = vcpu;
        return this;
    }
    
}
