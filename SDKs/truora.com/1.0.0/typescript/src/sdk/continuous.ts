/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Allows creating recurring checks with customizable frequency that notify whenever there are changes in check scores.
 */
export class Continuous {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists history associated with a Check. It can be paginated
   */
  getContinuousCheck(
    req: operations.GetContinuousCheckRequest,
    security: operations.GetContinuousCheckSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContinuousCheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContinuousCheckRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/continuous-checks/{continuous_check_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetContinuousCheckSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContinuousCheckResponse =
        new operations.GetContinuousCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.continuousCheck = utils.objectToClass(
              httpRes?.data,
              shared.ContinuousCheck
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all continuous checks
   */
  listContinuousChecks(
    config?: AxiosRequestConfig
  ): Promise<operations.ListContinuousChecksResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/continuous-checks";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListContinuousChecksResponse =
        new operations.ListContinuousChecksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listContinuousChecksOutput = utils.objectToClass(
              httpRes?.data,
              shared.ListContinuousChecksOutput
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a continuous check
   */
  updateContinuousCheck(
    req: operations.UpdateContinuousCheckRequest,
    security: operations.UpdateContinuousCheckSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateContinuousCheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateContinuousCheckRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/continuous-checks/{continuous_check_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateContinuousCheckInput",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateContinuousCheckSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateContinuousCheckResponse =
        new operations.UpdateContinuousCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.continuousCheck = utils.objectToClass(
              httpRes?.data,
              shared.ContinuousCheck
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a continuous check that will run background checks recurrently according to the frequency provided.
   */
  createContinuousCheck(
    req: shared.CreateContinuousCheckInput,
    security: operations.CreateContinuousCheckSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateContinuousCheckResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateContinuousCheckInput(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/continuous-checks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateContinuousCheckSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateContinuousCheckResponse =
        new operations.CreateContinuousCheckResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.continuousCheck = utils.objectToClass(
              httpRes?.data,
              shared.ContinuousCheck
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists background check logs. It can be paginated
   *
   */
  getV1ContinuousChecksContinuousCheckIdHistory(
    req: operations.GetV1ContinuousChecksContinuousCheckIdHistoryRequest,
    security: operations.GetV1ContinuousChecksContinuousCheckIdHistorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV1ContinuousChecksContinuousCheckIdHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV1ContinuousChecksContinuousCheckIdHistoryRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/continuous-checks/{continuous_check_id}/history",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetV1ContinuousChecksContinuousCheckIdHistorySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV1ContinuousChecksContinuousCheckIdHistoryResponse =
        new operations.GetV1ContinuousChecksContinuousCheckIdHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContiuousCheckHistoryOutput = utils.objectToClass(
              httpRes?.data,
              shared.GetContiuousCheckHistoryOutput
            );
          }
          break;
      }

      return res;
    });
  }
}
