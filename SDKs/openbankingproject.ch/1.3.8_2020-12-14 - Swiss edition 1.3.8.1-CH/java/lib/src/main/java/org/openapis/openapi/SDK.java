/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Summary
 * The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of
 * Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.
 * The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards
 * in Europe and, aligned with the goals of the Euro Retail Payments Board,
 * enables European banking customers to benefit from innovative products and services ('Banking as a Service')
 * by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.
 * 
 * The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.
 * 
 * The possible Approaches are:
 *   * Redirect SCA Approach
 *   * *(Not recommended by obp.ch community) OAuth SCA Approach*
 *   * *(Not recommended by obp.ch community) Decoupled SCA Approach*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*
 * 
 *   Not every message defined in this API definition is necessary for all approaches.
 *   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional
 *   Therefore for a particular implementation of a compliant API it is only necessary to support
 *   a certain subset of the methods defined in this API definition.
 * 
 *   **Please have a look at the implementation guidelines if you are not sure
 *   which message has to be used for the approach you are going to use.**
 * 
 * ## Some General Remarks Related to this version of the OpenAPI Specification:
 * * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**
 *   It is not a replacement in any sense.
 *   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API.
 * * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**
 * * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**
 * * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]
 * 
 *     "If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored."
 * 
 *   The element "Accept" will not be defined in this file at any place.
 * 
 *   The elements "Content-Type" and "Authorization" are implicitly defined by the OpenApi tags "content" and "security".
 * 
 * * There are several predefined types which might occur in payment initiation messages,
 *   but are not used in the standard JSON messages in the Implementation Guidelines.
 *   Therefore they are not used in the corresponding messages in this file either.
 *   We added them for the convenience of the user.
 *   If there is a payment product, which needs these fields, one can easily use the predefined types.
 *   But the ASPSP need not to accept them in general.
 * 
 * * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)
 *   except they are mentioned in the Implementation Guidelines.**
 *   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.
 * 
 * ## General Remarks on Data Types
 * 
 * The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters
 * 
 * a b c d e f g h i j k l m n o p q r s t u v w x y z
 * 
 * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 * 
 * 0 1 2 3 4 5 6 7 8 9
 * 
 * / - ? : ( ) . , ' +
 * 
 * Space
 * 
 * https://github.com/openbankingproject-ch/obp-apis - Full Documentation of NextGen Access to Account Interoperability Framework
 * (General Introduction Paper, Operational Rules, Implementation Guidelines)
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Open Banking Project Switzerland Developer Portal
         */
        "https://api.dev.openbankingproject.ch",
	};
  	
    /**
     * The Account Information Service (AIS) offers the following services:
     *   * Transaction reports for a given account or card account including balances if applicable
     *   * Balances of a given account or card account
     *   * A list of available accounts or card account
     *   * Account details of a given account or card account or of the list of all accessible accounts or card account  relative to a granted consent
     * 
     */
    public AccountInformationServiceAIS accountInformationServiceAIS;
    /**
     * Processes on starting authorisations, update PSU identification or PSU authentication data and explicit 
     * authorisation of transactions by using SCA are very similar in PIS and AIS and signing baskets services. 
     * The API calls supporting these processes are described in the following independently from the service/endpoint. 
     * For reasons of clarity, the endpoints are defined always for the Payment Initiation Service, the payment cancellation, 
     * the Account Information Service (Consents), and Signing Baskets separately. 
     * These processes usually are used following a hyperlink of the ASPSP. 
     * 
     */
    public CommonServices commonServices;
    /**
     * Confirmation of Funds Service (PIIS) returns a confirmation of funds request at the ASPSP.
     * 
     */
    public ConfirmationOfFundsServicePIIS confirmationOfFundsServicePIIS;
    /**
     * The component for Payment Initiation Service (PIS) offers the following services:
     *   * Initiation and update of a payment request
     *   * Status information of a payment
     * 
     */
    public PaymentInitiationServicePIS paymentInitiationServicePIS;
    /**
     * Signing basket methods are used for authorising several transactions and resp. or consents with one SCA operation.
     * 
     */
    public SigningBasketsServiceSBS signingBasketsServiceSBS;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.accountInformationServiceAIS = new AccountInformationServiceAIS(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.commonServices = new CommonServices(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.confirmationOfFundsServicePIIS = new ConfirmationOfFundsServicePIIS(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.paymentInitiationServicePIS = new PaymentInitiationServicePIS(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.signingBasketsServiceSBS = new SigningBasketsServiceSBS(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}