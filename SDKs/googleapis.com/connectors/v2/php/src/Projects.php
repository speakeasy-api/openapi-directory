<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteResponse
     */
	public function connectorsProjectsLocationsConnectionsActionsExecute(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:execute', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "executeActionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsExecuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->executeActionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExecuteActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the schema of all the actions supported by the connector.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListResponse
     */
	public function connectorsProjectsLocationsConnectionsActionsList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/actions', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsActionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listActionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message contains a `Entity` message object returned as a response by the external system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entities', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Entity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing entity row matching the entity type and entity id specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes entities based on conditions specified in the request and not on entity id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditions(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{entityType}/entities:deleteEntitiesWithConditions', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a single entity row matching the entity type and entity id specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Entity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates, inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entities', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEntitiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Entity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates entities based on conditions specified in the request and not on entity id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditions(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{entityType}/entities:updateEntitiesWithConditions', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateEntitiesWithConditionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateEntitiesWithConditionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists metadata related to all entity types present in the external system.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListResponse
     */
	public function connectorsProjectsLocationsConnectionsEntityTypesList(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entityTypes', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsEntityTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEntityTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEntityTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id = o.AccountId'.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryResponse
     */
	public function connectorsProjectsLocationsConnectionsExecuteSqlQuery(
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{connection}:executeSqlQuery', \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "executeSqlQueryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConnectorsProjectsLocationsConnectionsExecuteSqlQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->executeSqlQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExecuteSqlQueryResponse', 'json');
            }
        }

        return $response;
    }
}