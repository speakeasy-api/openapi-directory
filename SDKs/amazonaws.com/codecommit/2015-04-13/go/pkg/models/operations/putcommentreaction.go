// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutCommentReactionXAmzTargetEnum
type PutCommentReactionXAmzTargetEnum string

const (
	PutCommentReactionXAmzTargetEnumCodeCommit20150413PutCommentReaction PutCommentReactionXAmzTargetEnum = "CodeCommit_20150413.PutCommentReaction"
)

func (e *PutCommentReactionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.PutCommentReaction":
		*e = PutCommentReactionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutCommentReactionXAmzTargetEnum: %s", s)
	}
}

type PutCommentReactionHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutCommentReactionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutCommentReactionRequest struct {
	Headers PutCommentReactionHeaders
	Request shared.PutCommentReactionInput `request:"mediaType=application/json"`
}

type PutCommentReactionResponse struct {
	// CommentDeletedException
	CommentDeletedException interface{}
	// CommentDoesNotExistException
	CommentDoesNotExistException interface{}
	// CommentIdRequiredException
	CommentIDRequiredException interface{}
	ContentType                string
	// InvalidCommentIdException
	InvalidCommentIDException interface{}
	// InvalidReactionValueException
	InvalidReactionValueException interface{}
	// ReactionLimitExceededException
	ReactionLimitExceededException interface{}
	// ReactionValueRequiredException
	ReactionValueRequiredException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
