"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clustersconfigdump as shared_clustersconfigdump
from ..shared import listenersconfigdump as shared_listenersconfigdump
from ..shared import routesconfigdump as shared_routesconfigdump
from ..shared import scopedroutesconfigdump as shared_scopedroutesconfigdump
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PerXdsConfigStatusEnum(str, Enum):
    UNKNOWN = 'UNKNOWN'
    SYNCED = 'SYNCED'
    NOT_SENT = 'NOT_SENT'
    STALE = 'STALE'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PerXdsConfig:
    r"""Detailed config (per xDS) with status. [#next-free-field: 6]"""
    
    cluster_config: Optional[shared_clustersconfigdump.ClustersConfigDump] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterConfig'), 'exclude': lambda f: f is None }})
    r"""Envoy's cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response."""  
    listener_config: Optional[shared_listenersconfigdump.ListenersConfigDump] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listenerConfig'), 'exclude': lambda f: f is None }})
    r"""Envoy's listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response."""  
    route_config: Optional[shared_routesconfigdump.RoutesConfigDump] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeConfig'), 'exclude': lambda f: f is None }})
    r"""Envoy's RDS implementation fills this message with all currently loaded routes, as described by their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration or defined inline while configuring listeners are separated from those configured dynamically via RDS. Route configuration information can be used to recreate an Envoy configuration by populating all routes as static routes or by returning them in RDS responses."""  
    scoped_route_config: Optional[shared_scopedroutesconfigdump.ScopedRoutesConfigDump] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopedRouteConfig'), 'exclude': lambda f: f is None }})
    r"""Envoy's scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API."""  
    status: Optional[PerXdsConfigStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    