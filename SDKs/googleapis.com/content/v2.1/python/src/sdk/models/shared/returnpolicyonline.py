"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import returnpolicyonlinepolicy as shared_returnpolicyonlinepolicy
from ..shared import returnpolicyonlinerestockingfee as shared_returnpolicyonlinerestockingfee
from ..shared import returnpolicyonlinereturnreasoncategoryinfo as shared_returnpolicyonlinereturnreasoncategoryinfo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReturnPolicyOnlineItemConditionsEnum(str, Enum):
    ITEM_CONDITION_UNSPECIFIED = 'ITEM_CONDITION_UNSPECIFIED'
    NEW = 'NEW'
    USED = 'USED'

class ReturnPolicyOnlineReturnMethodsEnum(str, Enum):
    RETURN_METHOD_UNSPECIFIED = 'RETURN_METHOD_UNSPECIFIED'
    BY_MAIL = 'BY_MAIL'
    IN_STORE = 'IN_STORE'
    AT_A_KIOSK = 'AT_A_KIOSK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReturnPolicyOnlineInput:
    r"""Return policy online object. This is currently used to represent return policies for ads and free listings programs."""
    
    countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \\"US\\"."""  
    item_conditions: Optional[list[ReturnPolicyOnlineItemConditionsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemConditions'), 'exclude': lambda f: f is None }})
    r"""The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the policy as shown in Merchant Center."""  
    policy: Optional[shared_returnpolicyonlinepolicy.ReturnPolicyOnlinePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""The available policies."""  
    restocking_fee: Optional[shared_returnpolicyonlinerestockingfee.ReturnPolicyOnlineRestockingFee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restockingFee'), 'exclude': lambda f: f is None }})
    r"""The restocking fee. This can either be a fixed fee or a micro percent."""  
    return_methods: Optional[list[ReturnPolicyOnlineReturnMethodsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnMethods'), 'exclude': lambda f: f is None }})
    r"""The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns."""  
    return_policy_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnPolicyUri'), 'exclude': lambda f: f is None }})
    r"""The return policy uri. This can used by Google to do a sanity check for the policy."""  
    return_reason_category_info: Optional[list[shared_returnpolicyonlinereturnreasoncategoryinfo.ReturnPolicyOnlineReturnReasonCategoryInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnReasonCategoryInfo'), 'exclude': lambda f: f is None }})
    r"""The return reason category information. This required to not be empty unless the type of return policy is noReturns."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReturnPolicyOnline:
    r"""Return policy online object. This is currently used to represent return policies for ads and free listings programs."""
    
    countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \\"US\\"."""  
    item_conditions: Optional[list[ReturnPolicyOnlineItemConditionsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemConditions'), 'exclude': lambda f: f is None }})
    r"""The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the policy as shown in Merchant Center."""  
    policy: Optional[shared_returnpolicyonlinepolicy.ReturnPolicyOnlinePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policy'), 'exclude': lambda f: f is None }})
    r"""The available policies."""  
    restocking_fee: Optional[shared_returnpolicyonlinerestockingfee.ReturnPolicyOnlineRestockingFee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restockingFee'), 'exclude': lambda f: f is None }})
    r"""The restocking fee. This can either be a fixed fee or a micro percent."""  
    return_methods: Optional[list[ReturnPolicyOnlineReturnMethodsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnMethods'), 'exclude': lambda f: f is None }})
    r"""The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns."""  
    return_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnPolicyId'), 'exclude': lambda f: f is None }})
    r"""Output only. Return policy ID generated by Google."""  
    return_policy_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnPolicyUri'), 'exclude': lambda f: f is None }})
    r"""The return policy uri. This can used by Google to do a sanity check for the policy."""  
    return_reason_category_info: Optional[list[shared_returnpolicyonlinereturnreasoncategoryinfo.ReturnPolicyOnlineReturnReasonCategoryInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnReasonCategoryInfo'), 'exclude': lambda f: f is None }})
    r"""The return reason category information. This required to not be empty unless the type of return policy is noReturns."""  
    