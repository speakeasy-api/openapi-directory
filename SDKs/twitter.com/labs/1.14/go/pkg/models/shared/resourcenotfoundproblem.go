// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ResourceNotFoundProblemResourceTypeEnum string

const (
	ResourceNotFoundProblemResourceTypeEnumUser  ResourceNotFoundProblemResourceTypeEnum = "user"
	ResourceNotFoundProblemResourceTypeEnumTweet ResourceNotFoundProblemResourceTypeEnum = "tweet"
)

func (e *ResourceNotFoundProblemResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "tweet":
		*e = ResourceNotFoundProblemResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceNotFoundProblemResourceTypeEnum: %s", s)
	}
}

// ResourceNotFoundProblem - A problem that indicates that a given Tweet, User, etc. does not exist.
type ResourceNotFoundProblem struct {
	Detail       string                                  `json:"detail"`
	Parameter    string                                  `json:"parameter"`
	ResourceType ResourceNotFoundProblemResourceTypeEnum `json:"resource_type"`
	Title        string                                  `json:"title"`
	Type         string                                  `json:"type"`
	// Value will match the schema of the field.
	Value interface{} `json:"value"`
}
