"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .item import Item
from .item_group import ItemGroup
from .item_priority import ItemPriority
from .item_snapshot import ItemSnapshot

SERVERS = [
    "https://api.ebay.com/buy/feed/v1_beta",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""<span class=\\"tablenote\\"><b>Note:</b> This is a <a href=\\"https://developer.ebay.com/api-docs/static/versioning.html#limited \\" target=\\"_blank\\"> <img src=\\"/cms/img/docs/partners-api.svg\\" class=\\"legend-icon partners-icon\\" title=\\"Limited Release\\"  alt=\\"Limited Release\\" />(Limited Release)</a> API available only to select developers approved by business units. For information on how to obtain access to this API in production, see the <a href=\\"api-docs/buy/static/buy-requirements.html\\" target=\\"_blank\\">Buy APIs Requirements</a>.</span><br><br>The Feed API provides the ability to download TSV_GZIP feed files containing eBay items and an hourly snapshot file of the items that have changed within an hour for a specific category, date and marketplace. <p>In addition to the API, there is an open source <a href=\\"https://github.com/eBay/FeedSDK \\" target=\\"_blank\\">Feed SDK</a> written in Java that downloads, combines files into a single file when needed, and unzips the entire feed file. It also lets you specify field filters to curate the items in the file.</p>"""
    item: Item
    item_group: ItemGroup
    item_priority: ItemPriority
    item_snapshot: ItemSnapshot

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.item = Item(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.item_group = ItemGroup(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.item_priority = ItemPriority(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.item_snapshot = ItemSnapshot(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    