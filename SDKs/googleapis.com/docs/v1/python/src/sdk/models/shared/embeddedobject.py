"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimension as shared_dimension
from ..shared import embeddedobjectborder as shared_embeddedobjectborder
from ..shared import imageproperties as shared_imageproperties
from ..shared import linkedcontentreference as shared_linkedcontentreference
from ..shared import size as shared_size
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbeddedObject:
    r"""An embedded object in the document."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the embedded object. The `title` and `description` are both combined to display alt text."""  
    embedded_drawing_properties: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedDrawingProperties'), 'exclude': lambda f: f is None }})
    r"""The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported."""  
    embedded_object_border: Optional[shared_embeddedobjectborder.EmbeddedObjectBorder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedObjectBorder'), 'exclude': lambda f: f is None }})
    r"""A border around an EmbeddedObject."""  
    image_properties: Optional[shared_imageproperties.ImageProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageProperties'), 'exclude': lambda f: f is None }})
    r"""The properties of an image."""  
    linked_content_reference: Optional[shared_linkedcontentreference.LinkedContentReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedContentReference'), 'exclude': lambda f: f is None }})
    r"""A reference to the external linked source content."""  
    margin_bottom: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginBottom'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    margin_left: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginLeft'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    margin_right: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginRight'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    margin_top: Optional[shared_dimension.Dimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginTop'), 'exclude': lambda f: f is None }})
    r"""A magnitude in a single direction in the specified units."""  
    size: Optional[shared_size.Size] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""A width and height."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the embedded object. The `title` and `description` are both combined to display alt text."""  
    