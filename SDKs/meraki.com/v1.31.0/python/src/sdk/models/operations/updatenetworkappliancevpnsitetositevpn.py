"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs:
    
    hub_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hubId') }})
    r"""The network ID of the hub."""  
    use_default_route: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefaultRoute'), 'exclude': lambda f: f is None }})
    r"""Only valid in 'spoke' mode. Indicates whether default route traffic should be sent to this hub."""  
    
class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum(str, Enum):
    r"""The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'"""
    HUB = 'hub'
    NONE = 'none'
    SPOKE = 'spoke'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets:
    
    local_subnet: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localSubnet') }})
    r"""The CIDR notation subnet used within the VPN"""  
    use_vpn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useVpn'), 'exclude': lambda f: f is None }})
    r"""Indicates the presence of the subnet in the VPN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody:
    
    mode: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode') }})
    r"""The site-to-site VPN mode. Can be one of 'none', 'spoke' or 'hub'"""  
    hubs: Optional[list[UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodyHubs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hubs'), 'exclude': lambda f: f is None }})
    r"""The list of VPN hubs, in order of preference. In spoke mode, at least 1 hub is required."""  
    subnets: Optional[list[UpdateNetworkApplianceVpnSiteToSiteVpnRequestBodySubnets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets'), 'exclude': lambda f: f is None }})
    r"""The list of subnets and their VPN presence."""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpnRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateNetworkApplianceVpnSiteToSiteVpnRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs:
    
    hub_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hubId'), 'exclude': lambda f: f is None }})
    r"""The network ID of the hub."""  
    use_default_route: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefaultRoute'), 'exclude': lambda f: f is None }})
    r"""Indicates whether default route traffic should be sent to this hub."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets:
    
    local_subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localSubnet'), 'exclude': lambda f: f is None }})
    r"""The CIDR notation subnet used within the VPN"""  
    use_vpn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useVpn'), 'exclude': lambda f: f is None }})
    r"""Indicates the presence of the subnet in the VPN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON:
    r"""Successful operation"""
    
    hubs: Optional[list[UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONHubs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hubs'), 'exclude': lambda f: f is None }})
    r"""The list of VPN hubs, in order of preference."""  
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""The site-to-site VPN mode."""  
    subnets: Optional[list[UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSONSubnets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets'), 'exclude': lambda f: f is None }})
    r"""The list of subnets and their VPN presence."""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceVpnSiteToSiteVpnResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_vpn_site_to_site_vpn_200_application_json_object: Optional[UpdateNetworkApplianceVpnSiteToSiteVpn200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    