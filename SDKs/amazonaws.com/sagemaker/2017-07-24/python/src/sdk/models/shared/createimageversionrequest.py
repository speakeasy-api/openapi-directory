"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import jobtype_enum as shared_jobtype_enum
from ..shared import processor_enum as shared_processor_enum
from ..shared import vendorguidance_enum as shared_vendorguidance_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateImageVersionRequest:
    
    base_image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaseImage') }})  
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientToken') }})  
    image_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageName') }})  
    aliases: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aliases'), 'exclude': lambda f: f is None }})  
    horovod: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Horovod'), 'exclude': lambda f: f is None }})  
    job_type: Optional[shared_jobtype_enum.JobTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobType'), 'exclude': lambda f: f is None }})  
    ml_framework: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MLFramework'), 'exclude': lambda f: f is None }})  
    processor: Optional[shared_processor_enum.ProcessorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Processor'), 'exclude': lambda f: f is None }})  
    programming_lang: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProgrammingLang'), 'exclude': lambda f: f is None }})  
    release_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReleaseNotes'), 'exclude': lambda f: f is None }})  
    vendor_guidance: Optional[shared_vendorguidance_enum.VendorGuidanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VendorGuidance'), 'exclude': lambda f: f is None }})  
    