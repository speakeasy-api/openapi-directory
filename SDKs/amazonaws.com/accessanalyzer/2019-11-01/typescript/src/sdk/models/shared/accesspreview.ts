/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AccessPreviewStatusEnum } from "./accesspreviewstatusenum";
import { AccessPreviewStatusReason } from "./accesspreviewstatusreason";
import { Configuration } from "./configuration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains information about an access preview.
 */
export class AccessPreview extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "analyzerArn" })
  analyzerArn: string;

  @SpeakeasyMetadata({ elemType: Configuration })
  @Expose({ name: "configurations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Configuration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Configuration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  configurations: Record<string, Configuration>;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: AccessPreviewStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusReason" })
  @Type(() => AccessPreviewStatusReason)
  statusReason?: AccessPreviewStatusReason;
}
