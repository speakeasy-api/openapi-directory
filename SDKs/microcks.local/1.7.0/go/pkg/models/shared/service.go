// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceTypeEnum - Service or API Type
type ServiceTypeEnum string

const (
	ServiceTypeEnumRest         ServiceTypeEnum = "REST"
	ServiceTypeEnumSoapHTTP     ServiceTypeEnum = "SOAP_HTTP"
	ServiceTypeEnumGenericRest  ServiceTypeEnum = "GENERIC_REST"
	ServiceTypeEnumGenericEvent ServiceTypeEnum = "GENERIC_EVENT"
	ServiceTypeEnumEvent        ServiceTypeEnum = "EVENT"
	ServiceTypeEnumGrpc         ServiceTypeEnum = "GRPC"
	ServiceTypeEnumGraphql      ServiceTypeEnum = "GRAPHQL"
)

func (e ServiceTypeEnum) ToPointer() *ServiceTypeEnum {
	return &e
}

func (e *ServiceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REST":
		fallthrough
	case "SOAP_HTTP":
		fallthrough
	case "GENERIC_REST":
		fallthrough
	case "GENERIC_EVENT":
		fallthrough
	case "EVENT":
		fallthrough
	case "GRPC":
		fallthrough
	case "GRAPHQL":
		*e = ServiceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceTypeEnum: %v", v)
	}
}

// Service - Represents a Service or API definition as registred into Microcks repository
type Service struct {
	// Unique identifier for this Service or API
	ID *string `json:"id,omitempty"`
	// Commodity object for holding metadata on any entity. This object is inspired by Kubernetes metadata.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Distinct name for this Service or API (maybe shared among many versions)
	Name string `json:"name"`
	// Set of Operations for Service or API
	Operations []Operation `json:"operations,omitempty"`
	// Service or API Type
	Type ServiceTypeEnum `json:"type"`
	// Distinct version for a named Service or API
	Version string `json:"version"`
	// Associated Xml Namespace in case of Xml based Service
	XMLNS *string `json:"xmlNS,omitempty"`
}
