"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ColumnEntity:
    r"""Column is not used as an independent entity, it is retrieved as part of a Table entity."""
    
    array: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('array'), 'exclude': lambda f: f is None }})
    r"""Is the column of array type."""  
    array_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arrayLength'), 'exclude': lambda f: f is None }})
    r"""If the column is array, of which length."""  
    auto_generated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoGenerated'), 'exclude': lambda f: f is None }})
    r"""Is the column auto-generated/identity."""  
    charset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charset'), 'exclude': lambda f: f is None }})
    r"""Charset override - instead of table level charset."""  
    collation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collation'), 'exclude': lambda f: f is None }})
    r"""Collation override - instead of table level collation."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comment associated with the column."""  
    custom_features: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFeatures'), 'exclude': lambda f: f is None }})
    r"""Custom engine specific features."""  
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""Column data type."""  
    default_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})
    r"""Default value of the column."""  
    fractional_seconds_precision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fractionalSecondsPrecision'), 'exclude': lambda f: f is None }})
    r"""Column fractional second precision - used for timestamp based datatypes."""  
    length: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""Column length - e.g. varchar (50)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Column name."""  
    nullable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nullable'), 'exclude': lambda f: f is None }})
    r"""Is the column nullable."""  
    ordinal_position: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ordinalPosition'), 'exclude': lambda f: f is None }})
    r"""Column order in the table."""  
    precision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision'), 'exclude': lambda f: f is None }})
    r"""Column precision - when relevant."""  
    scale: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scale'), 'exclude': lambda f: f is None }})
    r"""Column scale - when relevant."""  
    set_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setValues'), 'exclude': lambda f: f is None }})
    r"""Specifies the list of values allowed in the column. Only used for set data type."""  
    udt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udt'), 'exclude': lambda f: f is None }})
    r"""Is the column a UDT."""  
    