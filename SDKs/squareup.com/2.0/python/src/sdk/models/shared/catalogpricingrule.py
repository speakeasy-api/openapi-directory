"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogPricingRule:
    r"""Defines how discounts are automatically applied to a set of items that match the pricing rule
    during the active time period.
    """
    
    apply_products_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apply_products_id'), 'exclude': lambda f: f is None }})
    r"""__Deprecated__: Please use the `exclude_products_id` field to apply
    an exclude set instead. Exclude sets allow better control over quantity
    ranges and offer more flexibility for which matched items receive a discount.
    
    `CatalogProductSet` to apply the pricing to.
    An apply rule matches within the subset of the cart that fits the match rules (the match set).
    An apply rule can only match once in the match set.
    If not supplied, the pricing will be applied to all products in the match set.
    Other products retain their base price, or a price generated by other rules.
    """  
    customer_group_ids_any: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_group_ids_any'), 'exclude': lambda f: f is None }})
    r"""A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.
    Notice that a group ID is generated by the Customers API.
    If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer
    has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount
    applies only to matched products sold to customers belonging to the specified customer groups.
    """  
    discount_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount_id'), 'exclude': lambda f: f is None }})
    r"""Unique ID for the `CatalogDiscount` to take off
    the price of all matched items.
    """  
    exclude_products_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_products_id'), 'exclude': lambda f: f is None }})
    r"""`CatalogProductSet` to exclude from the pricing rule.
    An exclude rule matches within the subset of the cart that fits the match rules (the match set).
    An exclude rule can only match once in the match set.
    If not supplied, the pricing will be applied to all products in the match set.
    Other products retain their base price, or a price generated by other rules.
    """  
    exclude_strategy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_strategy'), 'exclude': lambda f: f is None }})
    r"""If an `exclude_products_id` was given, controls which subset of matched
    products is excluded from any discounts.
    
    Default value: `LEAST_EXPENSIVE`
    """  
    match_products_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('match_products_id'), 'exclude': lambda f: f is None }})
    r"""Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
    matches within the entire cart, and can match multiple times. This field will always be set.
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""User-defined name for the pricing rule. For example, \\"Buy one get one
    free\" or \"10% off\".
    """  
    time_period_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_period_ids'), 'exclude': lambda f: f is None }})
    r"""A list of unique IDs for the catalog time periods when
    this pricing rule is in effect. If left unset, the pricing rule is always
    in effect.
    """  
    valid_from_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid_from_date'), 'exclude': lambda f: f is None }})
    r"""Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD)."""  
    valid_from_local_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid_from_local_time'), 'exclude': lambda f: f is None }})
    r"""Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
    (HH:MM:SS). Partial seconds will be truncated.
    """  
    valid_until_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid_until_date'), 'exclude': lambda f: f is None }})
    r"""Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD)."""  
    valid_until_local_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid_until_local_time'), 'exclude': lambda f: f is None }})
    r"""Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
    (HH:MM:SS). Partial seconds will be truncated.
    """  
    