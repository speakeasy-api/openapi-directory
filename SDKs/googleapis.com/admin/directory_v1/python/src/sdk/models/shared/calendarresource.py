"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalendarResource:
    r"""Public API: Resources.calendars"""
    
    building_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildingId'), 'exclude': lambda f: f is None }})
    r"""Unique ID for the building a resource is located in."""  
    capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity'), 'exclude': lambda f: f is None }})
    r"""Capacity of a resource, number of seats in a room."""  
    etags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etags'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    feature_instances: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featureInstances'), 'exclude': lambda f: f is None }})
    r"""Instances of features for the calendar resource."""  
    floor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorName'), 'exclude': lambda f: f is None }})
    r"""Name of the floor a resource is located on."""  
    floor_section: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorSection'), 'exclude': lambda f: f is None }})
    r"""Name of the section within a floor a resource is located in."""  
    generated_resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generatedResourceName'), 'exclude': lambda f: f is None }})
    r"""The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \\"NYC-2-Training Room 1A (16)\\"."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`."""  
    resource_category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceCategory'), 'exclude': lambda f: f is None }})
    r"""The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."""  
    resource_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the resource, visible only to admins."""  
    resource_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceEmail'), 'exclude': lambda f: f is None }})
    r"""The read-only email for the calendar resource. Generated as part of creating a new calendar resource."""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceId'), 'exclude': lambda f: f is None }})
    r"""The unique ID for the calendar resource."""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName'), 'exclude': lambda f: f is None }})
    r"""The name of the calendar resource. For example, \\"Training Room 1A\\"."""  
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""The type of the calendar resource, intended for non-room resources."""  
    user_visible_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userVisibleDescription'), 'exclude': lambda f: f is None }})
    r"""Description of the resource, visible to users and admins."""  
    