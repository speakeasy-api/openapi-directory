"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timedimension as shared_timedimension
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DimensionalMetricValueMetricOptionEnum(str, Enum):
    r"""The option that requested this dimensional value."""
    METRIC_OPTION_UNSPECIFIED = 'METRIC_OPTION_UNSPECIFIED'
    AGGREGATED_TOTAL = 'AGGREGATED_TOTAL'
    AGGREGATED_DAILY = 'AGGREGATED_DAILY'
    BREAKDOWN_DAY_OF_WEEK = 'BREAKDOWN_DAY_OF_WEEK'
    BREAKDOWN_HOUR_OF_DAY = 'BREAKDOWN_HOUR_OF_DAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DimensionalMetricValue:
    r"""A value for a single metric with a given time dimension."""
    
    metric_option: Optional[DimensionalMetricValueMetricOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricOption'), 'exclude': lambda f: f is None }})
    r"""The option that requested this dimensional value."""  
    time_dimension: Optional[shared_timedimension.TimeDimension] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeDimension'), 'exclude': lambda f: f is None }})
    r"""The dimension for which data is divided over."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The value. If no value is set, then the requested data is missing."""  
    