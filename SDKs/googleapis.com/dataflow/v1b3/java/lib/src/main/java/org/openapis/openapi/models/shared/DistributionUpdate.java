/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DistributionUpdate - A metric value representing a distribution.
 */
public class DistributionUpdate {
    /**
     * A representation of an int64, n, that is immune to precision loss when encoded in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    public SplitInt64 count;
    public DistributionUpdate withCount(SplitInt64 count) {
        this.count = count;
        return this;
    }
    
    /**
     * Histogram of value counts for a distribution. Buckets have an inclusive lower bound and exclusive upper bound and use "1,2,5 bucketing": The first bucket range is from [0,1) and all subsequent bucket boundaries are powers of ten multiplied by 1, 2, or 5. Thus, bucket boundaries are 0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, ... Negative values are not supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("histogram")
    public Histogram histogram;
    public DistributionUpdate withHistogram(Histogram histogram) {
        this.histogram = histogram;
        return this;
    }
    
    /**
     * A representation of an int64, n, that is immune to precision loss when encoded in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    public SplitInt64 max;
    public DistributionUpdate withMax(SplitInt64 max) {
        this.max = max;
        return this;
    }
    
    /**
     * A representation of an int64, n, that is immune to precision loss when encoded in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    public SplitInt64 min;
    public DistributionUpdate withMin(SplitInt64 min) {
        this.min = min;
        return this;
    }
    
    /**
     * A representation of an int64, n, that is immune to precision loss when encoded in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sum")
    public SplitInt64 sum;
    public DistributionUpdate withSum(SplitInt64 sum) {
        this.sum = sum;
        return this;
    }
    
    /**
     * Use a double since the sum of squares is likely to overflow int64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sumOfSquares")
    public Double sumOfSquares;
    public DistributionUpdate withSumOfSquares(Double sumOfSquares) {
        this.sumOfSquares = sumOfSquares;
        return this;
    }
    
}
