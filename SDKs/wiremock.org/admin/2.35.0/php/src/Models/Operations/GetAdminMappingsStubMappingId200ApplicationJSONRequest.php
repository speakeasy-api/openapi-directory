<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GetAdminMappingsStubMappingId200ApplicationJSONRequest
{
    /**
     * Pre-emptive basic auth credentials to match against
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingId200ApplicationJSONRequestBasicAuthCredentials $basicAuthCredentials
     */
	#[\JMS\Serializer\Annotation\SerializedName('basicAuthCredentials')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingId200ApplicationJSONRequestBasicAuthCredentials')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GetAdminMappingsStubMappingId200ApplicationJSONRequestBasicAuthCredentials $basicAuthCredentials = null;
    
    /**
     * Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
     * 
     * @var ?array<array<string, mixed>> $bodyPatterns
     */
	#[\JMS\Serializer\Annotation\SerializedName('bodyPatterns')]
    #[\JMS\Serializer\Annotation\Type('array<array<string, mixed>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $bodyPatterns = null;
    
    /**
     * Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
     * 
     * @var ?array<string, mixed> $cookies
     */
	#[\JMS\Serializer\Annotation\SerializedName('cookies')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $cookies = null;
    
    /**
     * Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
     * 
     * @var ?array<string, mixed> $headers
     */
	#[\JMS\Serializer\Annotation\SerializedName('headers')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $headers = null;
    
    /**
     * The HTTP request method e.g. GET
     * 
     * @var ?string $method
     */
	#[\JMS\Serializer\Annotation\SerializedName('method')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $method = null;
    
    /**
     * Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
     * 
     * @var ?array<string, mixed> $queryParameters
     */
	#[\JMS\Serializer\Annotation\SerializedName('queryParameters')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $queryParameters = null;
    
    /**
     * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
    /**
     * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
     * 
     * @var ?string $urlPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('urlPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $urlPath = null;
    
    /**
     * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
     * 
     * @var ?string $urlPathPattern
     */
	#[\JMS\Serializer\Annotation\SerializedName('urlPathPattern')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $urlPathPattern = null;
    
    /**
     * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
     * 
     * @var ?string $urlPattern
     */
	#[\JMS\Serializer\Annotation\SerializedName('urlPattern')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $urlPattern = null;
    
	public function __construct()
	{
		$this->basicAuthCredentials = null;
		$this->bodyPatterns = null;
		$this->cookies = null;
		$this->headers = null;
		$this->method = null;
		$this->queryParameters = null;
		$this->url = null;
		$this->urlPath = null;
		$this->urlPathPattern = null;
		$this->urlPattern = null;
	}
}
