// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BtcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type BtcerRequestBodyCertificateParameters struct {
	// ApplicationNo
	ApplicationNo string `json:"ApplicationNo"`
	// CertificateID
	CertificateID string `json:"CertificateID"`
}

// BtcerRequestBodyFormatEnum - The format of the certificate in response.
type BtcerRequestBodyFormatEnum string

const (
	BtcerRequestBodyFormatEnumXML BtcerRequestBodyFormatEnum = "xml"
	BtcerRequestBodyFormatEnumPdf BtcerRequestBodyFormatEnum = "pdf"
)

func (e *BtcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "xml":
		fallthrough
	case "pdf":
		*e = BtcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BtcerRequestBodyFormatEnum: %s", s)
	}
}

// BtcerRequestBody - Request format
type BtcerRequestBody struct {
	CertificateParameters *BtcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BtcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type BtcerRequest struct {
	// Request format
	Request  *BtcerRequestBody `request:"mediaType=application/json"`
	Security BtcerSecurity
}

type Btcer504ApplicationJSONErrorEnum string

const (
	Btcer504ApplicationJSONErrorEnumGatewayTimeout Btcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Btcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Btcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer504ApplicationJSONErrorDescriptionEnum string

const (
	Btcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Btcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Btcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Btcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer504ApplicationJSON - Gateway timeout
type Btcer504ApplicationJSON struct {
	Error            *Btcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer503ApplicationJSONErrorEnum string

const (
	Btcer503ApplicationJSONErrorEnumServiceUnavailable Btcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Btcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Btcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer503ApplicationJSONErrorDescriptionEnum string

const (
	Btcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Btcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Btcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Btcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer503ApplicationJSON - Service unavailable
type Btcer503ApplicationJSON struct {
	Error            *Btcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer502ApplicationJSONErrorEnum string

const (
	Btcer502ApplicationJSONErrorEnumBadGatewy Btcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Btcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Btcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer502ApplicationJSONErrorDescriptionEnum string

const (
	Btcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Btcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Btcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Btcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer502ApplicationJSON - Bad gateway
type Btcer502ApplicationJSON struct {
	Error            *Btcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer500ApplicationJSONErrorEnum string

const (
	Btcer500ApplicationJSONErrorEnumInternalServerError Btcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Btcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Btcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer500ApplicationJSONErrorDescriptionEnum string

const (
	Btcer500ApplicationJSONErrorDescriptionEnumInternalServerError Btcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Btcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Btcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer500ApplicationJSON - Internal server error
type Btcer500ApplicationJSON struct {
	Error            *Btcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer404ApplicationJSONErrorEnum string

const (
	Btcer404ApplicationJSONErrorEnumRecordNotFound Btcer404ApplicationJSONErrorEnum = "record_not_found"
	Btcer404ApplicationJSONErrorEnumURLNotFound    Btcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Btcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Btcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer404ApplicationJSONErrorDescriptionEnum string

const (
	Btcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Btcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Btcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Btcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Btcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Btcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer404ApplicationJSON - No record found
type Btcer404ApplicationJSON struct {
	Error            *Btcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer401ApplicationJSONErrorEnum string

const (
	Btcer401ApplicationJSONErrorEnumInvalidAuthentication Btcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Btcer401ApplicationJSONErrorEnumInvalidAuthorization  Btcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Btcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Btcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer401ApplicationJSONErrorDescriptionEnum string

const (
	Btcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Btcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Btcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Btcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Btcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Btcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer401ApplicationJSON - Unauthorized access
type Btcer401ApplicationJSON struct {
	Error            *Btcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Btcer400ApplicationJSONErrorEnum string

const (
	Btcer400ApplicationJSONErrorEnumMissingParameter Btcer400ApplicationJSONErrorEnum = "missing_parameter"
	Btcer400ApplicationJSONErrorEnumInvalidParameter Btcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Btcer400ApplicationJSONErrorEnumInvalidFormat    Btcer400ApplicationJSONErrorEnum = "invalid_format"
	Btcer400ApplicationJSONErrorEnumInvalidTxnid     Btcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Btcer400ApplicationJSONErrorEnumInvalidConsentid Btcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Btcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Btcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Btcer400ApplicationJSONErrorDescriptionEnum string

const (
	Btcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Btcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Btcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Btcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Btcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Btcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Btcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Btcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Btcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Btcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Btcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Btcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Btcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Btcer400ApplicationJSON - Bad request
type Btcer400ApplicationJSON struct {
	Error            *Btcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Btcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BtcerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Btcer400ApplicationJSONObject *Btcer400ApplicationJSON
	// Unauthorized access
	Btcer401ApplicationJSONObject *Btcer401ApplicationJSON
	// No record found
	Btcer404ApplicationJSONObject *Btcer404ApplicationJSON
	// Internal server error
	Btcer500ApplicationJSONObject *Btcer500ApplicationJSON
	// Bad gateway
	Btcer502ApplicationJSONObject *Btcer502ApplicationJSON
	// Service unavailable
	Btcer503ApplicationJSONObject *Btcer503ApplicationJSON
	// Gateway timeout
	Btcer504ApplicationJSONObject *Btcer504ApplicationJSON
}
