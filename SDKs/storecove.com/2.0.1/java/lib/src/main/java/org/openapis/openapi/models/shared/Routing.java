/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Routing - The different ways to send the invoice to the recipient. The publicIdentifiers are used to send via the Peppol network, if the recipient is not registered on the Peppol network, the invoice will be sent to the email addresses in the emails property. This property is only mandatory when sending the invoice data using the &lt;&lt;_openapi_invoice&gt;&gt; property, not when sending using the &lt;&lt;_openapi_invoicedata&gt;&gt; property, in which case this information will be extracted from the &lt;&lt;_openapi_invoicedata&gt;&gt; object. If you do specify an &lt;&lt;_openapi_invoicerecipient&gt;&gt; object and an &lt;&lt;_openapi_invoicedata&gt;&gt; object, the data from the two will be merged.
 */
public class Routing {
    /**
     * If you wish to send the document yourself in a Y-flow, use this flag. Wait for the 'cleared' webhook and use the &lt;&lt;_openapi_show_document_submission_evidence&gt;&gt; endpoint to retrieve the clearing evidence. This will include a sendable document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clearWithoutSending")public Boolean clearWithoutSending;
    public Routing withClearWithoutSending(Boolean clearWithoutSending) {
        this.clearWithoutSending = clearWithoutSending;
        return this;
    }
    
    /**
     * A list of electronic routing identifiers. These are the identifiers used on the Peppol network or for other destinations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eIdentifiers")public RoutingIdentifier[] eIdentifiers;
    public Routing withEIdentifiers(RoutingIdentifier[] eIdentifiers) {
        this.eIdentifiers = eIdentifiers;
        return this;
    }
    
    /**
     * The email addresses the invoice should be sent to if none of the other identifiers can be used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")public String[] emails;
    public Routing withEmails(String[] emails) {
        this.emails = emails;
        return this;
    }
    
}
