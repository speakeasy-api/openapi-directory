// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LfcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LfcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// LfcerRequestBodyFormatEnum - The format of the certificate in response.
type LfcerRequestBodyFormatEnum string

const (
	LfcerRequestBodyFormatEnumPdf LfcerRequestBodyFormatEnum = "pdf"
)

func (e *LfcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LfcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LfcerRequestBodyFormatEnum: %s", s)
	}
}

// LfcerRequestBody - Request format
type LfcerRequestBody struct {
	CertificateParameters *LfcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LfcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lfcer504ApplicationJSONErrorEnum string

const (
	Lfcer504ApplicationJSONErrorEnumGatewayTimeout Lfcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Lfcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Lfcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer504ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lfcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Lfcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Lfcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer504ApplicationJSON - Gateway timeout
type Lfcer504ApplicationJSON struct {
	Error            *Lfcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer503ApplicationJSONErrorEnum string

const (
	Lfcer503ApplicationJSONErrorEnumServiceUnavailable Lfcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Lfcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Lfcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer503ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lfcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Lfcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Lfcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer503ApplicationJSON - Service unavailable
type Lfcer503ApplicationJSON struct {
	Error            *Lfcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer502ApplicationJSONErrorEnum string

const (
	Lfcer502ApplicationJSONErrorEnumBadGatewy Lfcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Lfcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Lfcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer502ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lfcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Lfcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Lfcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer502ApplicationJSON - Bad gateway
type Lfcer502ApplicationJSON struct {
	Error            *Lfcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer500ApplicationJSONErrorEnum string

const (
	Lfcer500ApplicationJSONErrorEnumInternalServerError Lfcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Lfcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Lfcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer500ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer500ApplicationJSONErrorDescriptionEnumInternalServerError Lfcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Lfcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Lfcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer500ApplicationJSON - Internal server error
type Lfcer500ApplicationJSON struct {
	Error            *Lfcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer404ApplicationJSONErrorEnum string

const (
	Lfcer404ApplicationJSONErrorEnumRecordNotFound Lfcer404ApplicationJSONErrorEnum = "record_not_found"
	Lfcer404ApplicationJSONErrorEnumURLNotFound    Lfcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Lfcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lfcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer404ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lfcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lfcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lfcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Lfcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lfcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer404ApplicationJSON - No record found
type Lfcer404ApplicationJSON struct {
	Error            *Lfcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer401ApplicationJSONErrorEnum string

const (
	Lfcer401ApplicationJSONErrorEnumInvalidAuthentication Lfcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Lfcer401ApplicationJSONErrorEnumInvalidAuthorization  Lfcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Lfcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lfcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer401ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lfcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lfcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lfcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Lfcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lfcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer401ApplicationJSON - Unauthorized access
type Lfcer401ApplicationJSON struct {
	Error            *Lfcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lfcer400ApplicationJSONErrorEnum string

const (
	Lfcer400ApplicationJSONErrorEnumMissingParameter Lfcer400ApplicationJSONErrorEnum = "missing_parameter"
	Lfcer400ApplicationJSONErrorEnumInvalidParameter Lfcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Lfcer400ApplicationJSONErrorEnumInvalidFormat    Lfcer400ApplicationJSONErrorEnum = "invalid_format"
	Lfcer400ApplicationJSONErrorEnumInvalidTxnid     Lfcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Lfcer400ApplicationJSONErrorEnumInvalidConsentid Lfcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Lfcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lfcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Lfcer400ApplicationJSONErrorDescriptionEnum string

const (
	Lfcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lfcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lfcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Lfcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lfcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lfcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lfcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lfcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lfcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lfcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Lfcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lfcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lfcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lfcer400ApplicationJSON - Bad request
type Lfcer400ApplicationJSON struct {
	Error            *Lfcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lfcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LfcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lfcer400ApplicationJSONObject *Lfcer400ApplicationJSON
	// Unauthorized access
	Lfcer401ApplicationJSONObject *Lfcer401ApplicationJSON
	// No record found
	Lfcer404ApplicationJSONObject *Lfcer404ApplicationJSON
	// Internal server error
	Lfcer500ApplicationJSONObject *Lfcer500ApplicationJSON
	// Bad gateway
	Lfcer502ApplicationJSONObject *Lfcer502ApplicationJSON
	// Service unavailable
	Lfcer503ApplicationJSONObject *Lfcer503ApplicationJSON
	// Gateway timeout
	Lfcer504ApplicationJSONObject *Lfcer504ApplicationJSON
}
