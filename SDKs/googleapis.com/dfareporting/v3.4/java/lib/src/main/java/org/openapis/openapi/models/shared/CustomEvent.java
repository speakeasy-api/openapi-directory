/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CustomEvent - Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
 */
public class CustomEvent {
    /**
     * Annotate a click event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotateClickEvent")
    public CustomEventClickAnnotation annotateClickEvent;

    public CustomEvent withAnnotateClickEvent(CustomEventClickAnnotation annotateClickEvent) {
        this.annotateClickEvent = annotateClickEvent;
        return this;
    }
    
    /**
     * Annotate an impression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotateImpressionEvent")
    public CustomEventImpressionAnnotation annotateImpressionEvent;

    public CustomEvent withAnnotateImpressionEvent(CustomEventImpressionAnnotation annotateImpressionEvent) {
        this.annotateImpressionEvent = annotateImpressionEvent;
        return this;
    }
    
    /**
     * Custom variables associated with the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customVariables")
    public CustomVariable[] customVariables;

    public CustomEvent withCustomVariables(CustomVariable[] customVariables) {
        this.customVariables = customVariables;
        return this;
    }
    
    /**
     * The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventType")
    public CustomEventEventTypeEnum eventType;

    public CustomEvent withEventType(CustomEventEventTypeEnum eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Floodlight configuration ID of the advertiser the event is linked to. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightConfigurationId")
    public String floodlightConfigurationId;

    public CustomEvent withFloodlightConfigurationId(String floodlightConfigurationId) {
        this.floodlightConfigurationId = floodlightConfigurationId;
        return this;
    }
    
    /**
     * Custom event to be inserted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertEvent")
    public CustomEventInsert insertEvent;

    public CustomEvent withInsertEvent(CustomEventInsert insertEvent) {
        this.insertEvent = insertEvent;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "dfareporting#customEvent".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public CustomEvent withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The ordinal of this custom event. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordinal")
    public String ordinal;

    public CustomEvent withOrdinal(String ordinal) {
        this.ordinal = ordinal;
        return this;
    }
    
    /**
     * The timestamp of this custom event, in Unix epoch micros. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampMicros")
    public String timestampMicros;

    public CustomEvent withTimestampMicros(String timestampMicros) {
        this.timestampMicros = timestampMicros;
        return this;
    }
    
    public CustomEvent(){}
}
