// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateTopicStatusRequestBodyEnabledEnum string

const (
	UpdateTopicStatusRequestBodyEnabledEnumTrue  UpdateTopicStatusRequestBodyEnabledEnum = "true"
	UpdateTopicStatusRequestBodyEnabledEnumFalse UpdateTopicStatusRequestBodyEnabledEnum = "false"
)

func (e *UpdateTopicStatusRequestBodyEnabledEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = UpdateTopicStatusRequestBodyEnabledEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTopicStatusRequestBodyEnabledEnum: %s", s)
	}
}

type UpdateTopicStatusRequestBodyStatusEnum string

const (
	UpdateTopicStatusRequestBodyStatusEnumClosed         UpdateTopicStatusRequestBodyStatusEnum = "closed"
	UpdateTopicStatusRequestBodyStatusEnumPinned         UpdateTopicStatusRequestBodyStatusEnum = "pinned"
	UpdateTopicStatusRequestBodyStatusEnumPinnedGlobally UpdateTopicStatusRequestBodyStatusEnum = "pinned_globally"
	UpdateTopicStatusRequestBodyStatusEnumArchived       UpdateTopicStatusRequestBodyStatusEnum = "archived"
	UpdateTopicStatusRequestBodyStatusEnumVisible        UpdateTopicStatusRequestBodyStatusEnum = "visible"
)

func (e *UpdateTopicStatusRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "closed":
		fallthrough
	case "pinned":
		fallthrough
	case "pinned_globally":
		fallthrough
	case "archived":
		fallthrough
	case "visible":
		*e = UpdateTopicStatusRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTopicStatusRequestBodyStatusEnum: %s", s)
	}
}

type UpdateTopicStatusRequestBody struct {
	Enabled UpdateTopicStatusRequestBodyEnabledEnum `json:"enabled"`
	Status  UpdateTopicStatusRequestBodyStatusEnum  `json:"status"`
	// Only required for `pinned` and `pinned_globally`
	Until *string `json:"until,omitempty"`
}

type UpdateTopicStatusRequest struct {
	APIKey      string                        `header:"style=simple,explode=false,name=Api-Key"`
	APIUsername string                        `header:"style=simple,explode=false,name=Api-Username"`
	RequestBody *UpdateTopicStatusRequestBody `request:"mediaType=application/json"`
	ID          string                        `pathParam:"style=simple,explode=false,name=id"`
}

// UpdateTopicStatus200ApplicationJSON - topic updated
type UpdateTopicStatus200ApplicationJSON struct {
	Success           *string `json:"success,omitempty"`
	TopicStatusUpdate *string `json:"topic_status_update,omitempty"`
}

type UpdateTopicStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// topic updated
	UpdateTopicStatus200ApplicationJSONObject *UpdateTopicStatus200ApplicationJSON
}
