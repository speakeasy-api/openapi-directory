// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SendaChatMessageSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type SendaChatMessagePathParams struct {
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// SendaChatMessageApplicationJSONAtItemsAtTypeEnum - Type of mention. You can use one of the following values:<br>
// * `1`: Mention a contact.
//
// * `2`: Mention "all" to notify everyone in the channel.
type SendaChatMessageApplicationJSONAtItemsAtTypeEnum string

const (
	SendaChatMessageApplicationJSONAtItemsAtTypeEnumOne SendaChatMessageApplicationJSONAtItemsAtTypeEnum = "1"
	SendaChatMessageApplicationJSONAtItemsAtTypeEnumTwo SendaChatMessageApplicationJSONAtItemsAtTypeEnum = "2"
)

func (e *SendaChatMessageApplicationJSONAtItemsAtTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = SendaChatMessageApplicationJSONAtItemsAtTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SendaChatMessageApplicationJSONAtItemsAtTypeEnum: %s", s)
	}
}

type SendaChatMessageApplicationJSONAtItems struct {
	// This field is required if the value of `at_type` field is set to 1.
	//
	// Email address of the contact.
	//
	//
	AtContact *string `json:"at_contact,omitempty"`
	// Type of mention. You can use one of the following values:<br>
	// * `1`: Mention a contact.
	//
	// * `2`: Mention "all" to notify everyone in the channel.
	AtType *SendaChatMessageApplicationJSONAtItemsAtTypeEnum `json:"at_type,omitempty"`
	// End position of the mention.
	//
	// Example message: "@Shrijana How are you?"
	// In this case, the end position of the mention "@Shrijana" is 8. Hence, the value of this field will be 8.
	EndPosition *int64 `json:"end_position,omitempty"`
	// Start position of the mention("@") in the message string.
	//
	// For example if you want to include the mention at the beginning of the message, the value for this field will be 0.
	//
	// Example message: "@Shrijana How are you?"
	//
	//
	StartPosition *int64 `json:"start_position,omitempty"`
}

type SendaChatMessageApplicationJSON struct {
	// [Chat mentions](https://support.zoom.us/hc/en-us/articles/360037567431-Using-chat-mentions-and-slash-commands) object. Use this object to include mentions in the message that will be sent to  a channel.
	AtItems []SendaChatMessageApplicationJSONAtItems `json:"at_items,omitempty"`
	// The message to be sent.
	Message string `json:"message"`
	// The Channel Id of the channel where you would like to send a message.
	ToChannel *string `json:"to_channel,omitempty"`
	// The email address of the contact to whom you would like to send the message.
	ToContact *string `json:"to_contact,omitempty"`
}

type SendaChatMessageRequest struct {
	PathParams SendaChatMessagePathParams
	Request    *SendaChatMessageApplicationJSON `request:"mediaType=application/json"`
	Security   SendaChatMessageSecurity
}

// SendaChatMessage201ApplicationXML - **Status Code:** `201`<br>
// Message sent.
type SendaChatMessage201ApplicationXML struct {
	// Message ID: Unique Identifier of the message.
	ID *string
}

// SendaChatMessage201ApplicationJSON - **Status Code:** `201`<br>
// Message sent.
type SendaChatMessage201ApplicationJSON struct {
	// Message ID: Unique Identifier of the message.
	ID *string `json:"id,omitempty"`
}

type SendaChatMessageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Status Code:** `201`<br>
	// Message sent.
	SendaChatMessage201ApplicationJSONObject *SendaChatMessage201ApplicationJSON
}
