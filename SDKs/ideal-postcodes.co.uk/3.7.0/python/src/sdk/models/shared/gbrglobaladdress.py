"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import country_enum as shared_country_enum
from ..shared import countryiso2_enum as shared_countryiso2_enum
from ..shared import countryiso_enum as shared_countryiso_enum
from ..shared import dataset_enum as shared_dataset_enum
from ..shared import language_enum as shared_language_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any

class GbrGlobalAddressAdministrativeCountyEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressBuildingNameEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressBuildingNumberEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDeliveryPointSuffixEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDepartmentNameEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDependantLocalityEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDependantThoroughfareEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDistrictEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressDoubleDependantLocalityEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressEastingsEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressNorthingsEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressOrganisationNameEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPoBoxEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPostalCountyEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPostcodeInwardEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPostcodeOutwardEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPostcodeTypeEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressPremiseEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressSuOrganisationIndicatorEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressSubBuildingNameEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressThoroughfareEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressTraditionalCountyEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''

class GbrGlobalAddressUmprnEnum(str, Enum):
    r"""Not available for non-UK addresses. See `id` for address identifier"""
    UNKNOWN = ''

class GbrGlobalAddressUprnEnum(str, Enum):
    r"""Not available for non-UK addresses. See `id` for address identifier"""
    UNKNOWN = ''

class GbrGlobalAddressWardEnum(str, Enum):
    r"""Not available for non-UK addresses"""
    UNKNOWN = ''


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GbrGlobalAddress:
    r"""Global (non-UK) address in the UK address format"""
    
    administrative_county: GbrGlobalAddressAdministrativeCountyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administrative_county') }})
    r"""Not available for non-UK addresses"""  
    building_name: GbrGlobalAddressBuildingNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('building_name') }})
    r"""Not available for non-UK addresses"""  
    building_number: GbrGlobalAddressBuildingNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('building_number') }})
    r"""Not available for non-UK addresses"""  
    country: shared_country_enum.CountryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Full country names (ISO 3166)"""  
    country_iso: shared_countryiso_enum.CountryISOEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_iso') }})
    r"""3 letter country code (ISO 3166-1)"""  
    country_iso_2: shared_countryiso2_enum.CountryIso2Enum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_iso_2') }})
    r"""2 letter country code (ISO 3166-1)"""  
    county: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county') }})
    r"""State or county name"""  
    county_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county_code') }})
    r"""Code abbreviation for state or county used in some countries."""  
    dataset: shared_dataset_enum.DatasetEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset') }})
    r"""Indicates the provenance of an address.
    
      - `paf` (GBR) Postcode Address File
      - `mr` (GBR) Multiple Residence File
      - `nyb` (GBR) Not Yet Built File
      - `pafa` (GBR) Alias File
      - `pafw` (GBR) Welsh File
      - `ecaf` (IRL) Eircode ECAF
      - `ecad` (IRL) Eircode ECAD
      - `usps` (USA) USPS Zip+4
    """  
    delivery_point_suffix: GbrGlobalAddressDeliveryPointSuffixEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivery_point_suffix') }})
    r"""Not available for non-UK addresses"""  
    department_name: GbrGlobalAddressDepartmentNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('department_name') }})
    r"""Not available for non-UK addresses"""  
    dependant_locality: GbrGlobalAddressDependantLocalityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependant_locality') }})
    r"""Not available for non-UK addresses"""  
    dependant_thoroughfare: GbrGlobalAddressDependantThoroughfareEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependant_thoroughfare') }})
    r"""Not available for non-UK addresses"""  
    district: GbrGlobalAddressDistrictEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('district') }})
    r"""Not available for non-UK addresses"""  
    double_dependant_locality: GbrGlobalAddressDoubleDependantLocalityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('double_dependant_locality') }})
    r"""Not available for non-UK addresses"""  
    eastings: GbrGlobalAddressEastingsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eastings') }})
    r"""Not available for non-UK addresses"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Global unique internally generated identifier for an address"""  
    language: shared_language_enum.LanguageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""Language represented by 2 letter ISO Code (639-1)"""  
    latitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""The latitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. `51.5083983`.
    
    Returns an empty string if no location data is available.
    """  
    line_1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_1') }})
    r"""First line of the address. Typically the building number and street name"""  
    line_2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_2') }})
    r"""Second line of the address. Can be blank"""  
    line_3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_3') }})
    r"""Third line of the address. Can also be blank"""  
    longitude: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""The longitude of the postcode (WGS84/ETRS89).
    
    Can be a positive or negative decimal. E.g. -0.1283983
    
    Returns an empty string if no location data is available.
    """  
    native: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('native') }})
    r"""The native representation of a non-UK address"""  
    northings: GbrGlobalAddressNorthingsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('northings') }})
    r"""Not available for non-UK addresses"""  
    organisation_name: GbrGlobalAddressOrganisationNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organisation_name') }})
    r"""Not available for non-UK addresses"""  
    po_box: GbrGlobalAddressPoBoxEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('po_box') }})
    r"""Not available for non-UK addresses"""  
    post_town: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_town') }})
    r"""The city, town or other primary locality"""  
    postal_county: GbrGlobalAddressPostalCountyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal_county') }})
    r"""Not available for non-UK addresses"""  
    postcode: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode') }})
    r"""Represents the postal or zip code"""  
    postcode_inward: GbrGlobalAddressPostcodeInwardEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode_inward') }})
    r"""Not available for non-UK addresses"""  
    postcode_outward: GbrGlobalAddressPostcodeOutwardEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode_outward') }})
    r"""Not available for non-UK addresses"""  
    postcode_type: GbrGlobalAddressPostcodeTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postcode_type') }})
    r"""Not available for non-UK addresses"""  
    premise: GbrGlobalAddressPremiseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('premise') }})
    r"""Not available for non-UK addresses"""  
    su_organisation_indicator: GbrGlobalAddressSuOrganisationIndicatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('su_organisation_indicator') }})
    r"""Not available for non-UK addresses"""  
    sub_building_name: GbrGlobalAddressSubBuildingNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_building_name') }})
    r"""Not available for non-UK addresses"""  
    thoroughfare: GbrGlobalAddressThoroughfareEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thoroughfare') }})
    r"""Not available for non-UK addresses"""  
    traditional_county: GbrGlobalAddressTraditionalCountyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traditional_county') }})
    r"""Not available for non-UK addresses"""  
    udprn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udprn') }})
    r"""Not available for non-UK addresses. See `id` for address identifier"""  
    umprn: GbrGlobalAddressUmprnEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('umprn') }})
    r"""Not available for non-UK addresses. See `id` for address identifier"""  
    uprn: GbrGlobalAddressUprnEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uprn') }})
    r"""Not available for non-UK addresses. See `id` for address identifier"""  
    ward: GbrGlobalAddressWardEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ward') }})
    r"""Not available for non-UK addresses"""  
    