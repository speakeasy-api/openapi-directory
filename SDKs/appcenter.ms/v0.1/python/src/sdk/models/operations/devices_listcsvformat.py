"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DevicesListCsvFormatSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class DevicesListCsvFormatRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    distribution_group_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'distribution_group_name', 'style': 'simple', 'explode': False }})
    r"""The name of the distribution group."""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    udids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'udids', 'style': 'form', 'explode': False }})
    r"""multiple UDIDs which should be part of the resulting CSV."""  
    unprovisioned_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unprovisioned_only', 'style': 'form', 'explode': True }})
    r"""when true, filters out provisioned devices"""  
    
class DevicesListCsvFormat400TextCsvCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclasses.dataclass
class DevicesListCsvFormat400TextCsv:
    r"""<b>bad_request</b>: Devices information can only be requested for iOS apps."""
    
    code: DevicesListCsvFormat400TextCsvCodeEnum = dataclasses.field()  
    message: str = dataclasses.field()  
    

@dataclasses.dataclass
class DevicesListCsvFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    