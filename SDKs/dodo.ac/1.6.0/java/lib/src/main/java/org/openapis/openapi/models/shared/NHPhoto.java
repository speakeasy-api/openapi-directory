/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NHPhoto - A JSON object describing the photo or poster.
 */
public class NHPhoto {
    /**
     * Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public NHPhotoAvailability[] availability;

    public NHPhoto withAvailability(NHPhotoAvailability[] availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buy")
    public NHPhotoBuy[] buy;

    public NHPhoto withBuy(NHPhotoBuy[] buy) {
        this.buy = buy;
        return this;
    }
    
    /**
     * The category of item as shown in the player's inventory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public NHPhotoCategoryEnum category;

    public NHPhoto withCategory(NHPhotoCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_body_part")
    public String customBodyPart;

    public NHPhoto withCustomBodyPart(String customBodyPart) {
        this.customBodyPart = customBodyPart;
        return this;
    }
    
    /**
     * The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_kits")
    public Long customKits;

    public NHPhoto withCustomKits(Long customKits) {
        this.customKits = customKits;
        return this;
    }
    
    /**
     * Whether or not the item is customizable via a crafting table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customizable")
    public Boolean customizable;

    public NHPhoto withCustomizable(Boolean customizable) {
        this.customizable = customizable;
        return this;
    }
    
    /**
     * The number of lengthwise grid spaces this item takes up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grid_length")
    public Float gridLength;

    public NHPhoto withGridLength(Float gridLength) {
        this.gridLength = gridLength;
        return this;
    }
    
    /**
     * The number of widthwise grid spaces this item takes up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grid_width")
    public Float gridWidth;

    public NHPhoto withGridWidth(Float gridWidth) {
        this.gridWidth = gridWidth;
        return this;
    }
    
    /**
     * Whether or not the item can be interacted with. This field is true for all photos and false for all posters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interactable")
    public Boolean interactable;

    public NHPhoto withInteractable(Boolean interactable) {
        this.interactable = interactable;
        return this;
    }
    
    /**
     * The name of the photo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public NHPhoto withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of Bells the photo can be sold to the store for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell")
    public Long sell;

    public NHPhoto withSell(Long sell) {
        this.sell = sell;
        return this;
    }
    
    /**
     * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unlocked")
    public Boolean unlocked;

    public NHPhoto withUnlocked(Boolean unlocked) {
        this.unlocked = unlocked;
        return this;
    }
    
    /**
     * Link to the respective Nookipedia article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public NHPhoto withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    public NHPhotoVariations[] variations;

    public NHPhoto withVariations(NHPhotoVariations[] variations) {
        this.variations = variations;
        return this;
    }
    
    /**
     * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_added")
    public String versionAdded;

    public NHPhoto withVersionAdded(String versionAdded) {
        this.versionAdded = versionAdded;
        return this;
    }
    
    public NHPhoto(){}
}
