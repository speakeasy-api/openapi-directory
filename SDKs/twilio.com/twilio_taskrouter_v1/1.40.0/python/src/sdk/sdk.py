"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://taskrouter.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_activity(self, request: operations.CreateActivityRequest, security: operations.CreateActivitySecurity, server_url: Optional[str] = None) -> operations.CreateActivityResponse:
        base_url = operations.CREATE_ACTIVITY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateActivityRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Activities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceActivity])
                res.taskrouter_v1_workspace_activity = out

        return res

    def create_task(self, request: operations.CreateTaskRequest, security: operations.CreateTaskSecurity, server_url: Optional[str] = None) -> operations.CreateTaskResponse:
        base_url = operations.CREATE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTaskRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTask])
                res.taskrouter_v1_workspace_task = out

        return res

    def create_task_channel(self, request: operations.CreateTaskChannelRequest, security: operations.CreateTaskChannelSecurity, server_url: Optional[str] = None) -> operations.CreateTaskChannelResponse:
        base_url = operations.CREATE_TASK_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTaskChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskChannels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskChannel])
                res.taskrouter_v1_workspace_task_channel = out

        return res

    def create_task_queue(self, request: operations.CreateTaskQueueRequest, security: operations.CreateTaskQueueSecurity, server_url: Optional[str] = None) -> operations.CreateTaskQueueResponse:
        base_url = operations.CREATE_TASK_QUEUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTaskQueueRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueue])
                res.taskrouter_v1_workspace_task_queue = out

        return res

    def create_worker(self, request: operations.CreateWorkerRequest, security: operations.CreateWorkerSecurity, server_url: Optional[str] = None) -> operations.CreateWorkerResponse:
        base_url = operations.CREATE_WORKER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateWorkerRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWorkerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorker])
                res.taskrouter_v1_workspace_worker = out

        return res

    def create_workflow(self, request: operations.CreateWorkflowRequest, security: operations.CreateWorkflowSecurity, server_url: Optional[str] = None) -> operations.CreateWorkflowResponse:
        base_url = operations.CREATE_WORKFLOW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateWorkflowRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflow])
                res.taskrouter_v1_workspace_workflow = out

        return res

    def create_workspace(self, request: operations.CreateWorkspaceCreateWorkspaceRequest, security: operations.CreateWorkspaceSecurity, server_url: Optional[str] = None) -> operations.CreateWorkspaceResponse:
        base_url = operations.CREATE_WORKSPACE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Workspaces'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1Workspace])
                res.taskrouter_v1_workspace = out

        return res

    def delete_activity(self, request: operations.DeleteActivityRequest, security: operations.DeleteActivitySecurity, server_url: Optional[str] = None) -> operations.DeleteActivityResponse:
        base_url = operations.DELETE_ACTIVITY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteActivityRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_task(self, request: operations.DeleteTaskRequest, security: operations.DeleteTaskSecurity, server_url: Optional[str] = None) -> operations.DeleteTaskResponse:
        base_url = operations.DELETE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTaskRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_task_channel(self, request: operations.DeleteTaskChannelRequest, security: operations.DeleteTaskChannelSecurity, server_url: Optional[str] = None) -> operations.DeleteTaskChannelResponse:
        base_url = operations.DELETE_TASK_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTaskChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaskChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_task_queue(self, request: operations.DeleteTaskQueueRequest, security: operations.DeleteTaskQueueSecurity, server_url: Optional[str] = None) -> operations.DeleteTaskQueueResponse:
        base_url = operations.DELETE_TASK_QUEUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTaskQueueRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaskQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_worker(self, request: operations.DeleteWorkerRequest, security: operations.DeleteWorkerSecurity, server_url: Optional[str] = None) -> operations.DeleteWorkerResponse:
        base_url = operations.DELETE_WORKER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteWorkerRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_workflow(self, request: operations.DeleteWorkflowRequest, security: operations.DeleteWorkflowSecurity, server_url: Optional[str] = None) -> operations.DeleteWorkflowResponse:
        base_url = operations.DELETE_WORKFLOW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteWorkflowRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_workspace(self, request: operations.DeleteWorkspaceRequest, security: operations.DeleteWorkspaceSecurity, server_url: Optional[str] = None) -> operations.DeleteWorkspaceResponse:
        base_url = operations.DELETE_WORKSPACE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteWorkspaceRequest, base_url, '/v1/Workspaces/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_activity(self, request: operations.FetchActivityRequest, security: operations.FetchActivitySecurity, server_url: Optional[str] = None) -> operations.FetchActivityResponse:
        base_url = operations.FETCH_ACTIVITY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchActivityRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceActivity])
                res.taskrouter_v1_workspace_activity = out

        return res

    def fetch_event(self, request: operations.FetchEventRequest, security: operations.FetchEventSecurity, server_url: Optional[str] = None) -> operations.FetchEventResponse:
        base_url = operations.FETCH_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchEventRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Events/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceEvent])
                res.taskrouter_v1_workspace_event = out

        return res

    def fetch_task(self, request: operations.FetchTaskRequest, security: operations.FetchTaskSecurity, server_url: Optional[str] = None) -> operations.FetchTaskResponse:
        base_url = operations.FETCH_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTask])
                res.taskrouter_v1_workspace_task = out

        return res

    def fetch_task_channel(self, request: operations.FetchTaskChannelRequest, security: operations.FetchTaskChannelSecurity, server_url: Optional[str] = None) -> operations.FetchTaskChannelResponse:
        base_url = operations.FETCH_TASK_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskChannel])
                res.taskrouter_v1_workspace_task_channel = out

        return res

    def fetch_task_queue(self, request: operations.FetchTaskQueueRequest, security: operations.FetchTaskQueueSecurity, server_url: Optional[str] = None) -> operations.FetchTaskQueueResponse:
        base_url = operations.FETCH_TASK_QUEUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskQueueRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueue])
                res.taskrouter_v1_workspace_task_queue = out

        return res

    def fetch_task_queue_cumulative_statistics(self, request: operations.FetchTaskQueueCumulativeStatisticsRequest, security: operations.FetchTaskQueueCumulativeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchTaskQueueCumulativeStatisticsResponse:
        base_url = operations.FETCH_TASK_QUEUE_CUMULATIVE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskQueueCumulativeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchTaskQueueCumulativeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskQueueCumulativeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics])
                res.taskrouter_v1_workspace_task_queue_task_queue_cumulative_statistics = out

        return res

    def fetch_task_queue_real_time_statistics(self, request: operations.FetchTaskQueueRealTimeStatisticsRequest, security: operations.FetchTaskQueueRealTimeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchTaskQueueRealTimeStatisticsResponse:
        base_url = operations.FETCH_TASK_QUEUE_REAL_TIME_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskQueueRealTimeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchTaskQueueRealTimeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskQueueRealTimeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics])
                res.taskrouter_v1_workspace_task_queue_task_queue_real_time_statistics = out

        return res

    def fetch_task_queue_statistics(self, request: operations.FetchTaskQueueStatisticsRequest, security: operations.FetchTaskQueueStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchTaskQueueStatisticsResponse:
        base_url = operations.FETCH_TASK_QUEUE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskQueueStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics', request)
        
        query_params = utils.get_query_params(operations.FetchTaskQueueStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskQueueStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics])
                res.taskrouter_v1_workspace_task_queue_task_queue_statistics = out

        return res

    def fetch_task_reservation(self, request: operations.FetchTaskReservationRequest, security: operations.FetchTaskReservationSecurity, server_url: Optional[str] = None) -> operations.FetchTaskReservationResponse:
        base_url = operations.FETCH_TASK_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskTaskReservation])
                res.taskrouter_v1_workspace_task_task_reservation = out

        return res

    def fetch_worker(self, request: operations.FetchWorkerRequest, security: operations.FetchWorkerSecurity, server_url: Optional[str] = None) -> operations.FetchWorkerResponse:
        base_url = operations.FETCH_WORKER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkerRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorker])
                res.taskrouter_v1_workspace_worker = out

        return res

    def fetch_worker_channel(self, request: operations.FetchWorkerChannelRequest, security: operations.FetchWorkerChannelSecurity, server_url: Optional[str] = None) -> operations.FetchWorkerChannelResponse:
        base_url = operations.FETCH_WORKER_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkerChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkerChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerChannel])
                res.taskrouter_v1_workspace_worker_worker_channel = out

        return res

    def fetch_worker_instance_statistics(self, request: operations.FetchWorkerInstanceStatisticsRequest, security: operations.FetchWorkerInstanceStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkerInstanceStatisticsResponse:
        base_url = operations.FETCH_WORKER_INSTANCE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkerInstanceStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkerInstanceStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkerInstanceStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics])
                res.taskrouter_v1_workspace_worker_worker_instance_statistics = out

        return res

    def fetch_worker_reservation(self, request: operations.FetchWorkerReservationRequest, security: operations.FetchWorkerReservationSecurity, server_url: Optional[str] = None) -> operations.FetchWorkerReservationResponse:
        base_url = operations.FETCH_WORKER_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkerReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkerReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerReservation])
                res.taskrouter_v1_workspace_worker_worker_reservation = out

        return res

    def fetch_worker_statistics(self, request: operations.FetchWorkerStatisticsRequest, security: operations.FetchWorkerStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkerStatisticsResponse:
        base_url = operations.FETCH_WORKER_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkerStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/Statistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkerStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkerStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerStatistics])
                res.taskrouter_v1_workspace_worker_worker_statistics = out

        return res

    def fetch_workers_cumulative_statistics(self, request: operations.FetchWorkersCumulativeStatisticsRequest, security: operations.FetchWorkersCumulativeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkersCumulativeStatisticsResponse:
        base_url = operations.FETCH_WORKERS_CUMULATIVE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkersCumulativeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkersCumulativeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkersCumulativeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics])
                res.taskrouter_v1_workspace_worker_workers_cumulative_statistics = out

        return res

    def fetch_workers_real_time_statistics(self, request: operations.FetchWorkersRealTimeStatisticsRequest, security: operations.FetchWorkersRealTimeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkersRealTimeStatisticsResponse:
        base_url = operations.FETCH_WORKERS_REAL_TIME_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkersRealTimeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkersRealTimeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkersRealTimeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics])
                res.taskrouter_v1_workspace_worker_workers_real_time_statistics = out

        return res

    def fetch_workflow(self, request: operations.FetchWorkflowRequest, security: operations.FetchWorkflowSecurity, server_url: Optional[str] = None) -> operations.FetchWorkflowResponse:
        base_url = operations.FETCH_WORKFLOW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkflowRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflow])
                res.taskrouter_v1_workspace_workflow = out

        return res

    def fetch_workflow_cumulative_statistics(self, request: operations.FetchWorkflowCumulativeStatisticsRequest, security: operations.FetchWorkflowCumulativeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkflowCumulativeStatisticsResponse:
        base_url = operations.FETCH_WORKFLOW_CUMULATIVE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkflowCumulativeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkflowCumulativeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkflowCumulativeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics])
                res.taskrouter_v1_workspace_workflow_workflow_cumulative_statistics = out

        return res

    def fetch_workflow_real_time_statistics(self, request: operations.FetchWorkflowRealTimeStatisticsRequest, security: operations.FetchWorkflowRealTimeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkflowRealTimeStatisticsResponse:
        base_url = operations.FETCH_WORKFLOW_REAL_TIME_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkflowRealTimeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkflowRealTimeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkflowRealTimeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics])
                res.taskrouter_v1_workspace_workflow_workflow_real_time_statistics = out

        return res

    def fetch_workflow_statistics(self, request: operations.FetchWorkflowStatisticsRequest, security: operations.FetchWorkflowStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkflowStatisticsResponse:
        base_url = operations.FETCH_WORKFLOW_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkflowStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkflowStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkflowStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics])
                res.taskrouter_v1_workspace_workflow_workflow_statistics = out

        return res

    def fetch_workspace(self, request: operations.FetchWorkspaceRequest, security: operations.FetchWorkspaceSecurity, server_url: Optional[str] = None) -> operations.FetchWorkspaceResponse:
        base_url = operations.FETCH_WORKSPACE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkspaceRequest, base_url, '/v1/Workspaces/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1Workspace])
                res.taskrouter_v1_workspace = out

        return res

    def fetch_workspace_cumulative_statistics(self, request: operations.FetchWorkspaceCumulativeStatisticsRequest, security: operations.FetchWorkspaceCumulativeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkspaceCumulativeStatisticsResponse:
        base_url = operations.FETCH_WORKSPACE_CUMULATIVE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkspaceCumulativeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkspaceCumulativeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkspaceCumulativeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics])
                res.taskrouter_v1_workspace_workspace_cumulative_statistics = out

        return res

    def fetch_workspace_real_time_statistics(self, request: operations.FetchWorkspaceRealTimeStatisticsRequest, security: operations.FetchWorkspaceRealTimeStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkspaceRealTimeStatisticsResponse:
        base_url = operations.FETCH_WORKSPACE_REAL_TIME_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkspaceRealTimeStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkspaceRealTimeStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkspaceRealTimeStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics])
                res.taskrouter_v1_workspace_workspace_real_time_statistics = out

        return res

    def fetch_workspace_statistics(self, request: operations.FetchWorkspaceStatisticsRequest, security: operations.FetchWorkspaceStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchWorkspaceStatisticsResponse:
        base_url = operations.FETCH_WORKSPACE_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWorkspaceStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Statistics', request)
        
        query_params = utils.get_query_params(operations.FetchWorkspaceStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWorkspaceStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkspaceStatistics])
                res.taskrouter_v1_workspace_workspace_statistics = out

        return res

    def list_activity(self, request: operations.ListActivityRequest, security: operations.ListActivitySecurity, server_url: Optional[str] = None) -> operations.ListActivityResponse:
        base_url = operations.LIST_ACTIVITY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListActivityRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Activities', request)
        
        query_params = utils.get_query_params(operations.ListActivityRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListActivityListActivityResponse])
                res.list_activity_response = out

        return res

    def list_event(self, request: operations.ListEventRequest, security: operations.ListEventSecurity, server_url: Optional[str] = None) -> operations.ListEventResponse:
        base_url = operations.LIST_EVENT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListEventRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Events', request)
        
        query_params = utils.get_query_params(operations.ListEventRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEventListEventResponse])
                res.list_event_response = out

        return res

    def list_task(self, request: operations.ListTaskRequest, security: operations.ListTaskSecurity, server_url: Optional[str] = None) -> operations.ListTaskResponse:
        base_url = operations.LIST_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks', request)
        
        query_params = utils.get_query_params(operations.ListTaskRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskListTaskResponse])
                res.list_task_response = out

        return res

    def list_task_channel(self, request: operations.ListTaskChannelRequest, security: operations.ListTaskChannelSecurity, server_url: Optional[str] = None) -> operations.ListTaskChannelResponse:
        base_url = operations.LIST_TASK_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskChannels', request)
        
        query_params = utils.get_query_params(operations.ListTaskChannelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskChannelListTaskChannelResponse])
                res.list_task_channel_response = out

        return res

    def list_task_queue(self, request: operations.ListTaskQueueRequest, security: operations.ListTaskQueueSecurity, server_url: Optional[str] = None) -> operations.ListTaskQueueResponse:
        base_url = operations.LIST_TASK_QUEUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskQueueRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues', request)
        
        query_params = utils.get_query_params(operations.ListTaskQueueRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskQueueListTaskQueueResponse])
                res.list_task_queue_response = out

        return res

    def list_task_queues_statistics(self, request: operations.ListTaskQueuesStatisticsRequest, security: operations.ListTaskQueuesStatisticsSecurity, server_url: Optional[str] = None) -> operations.ListTaskQueuesStatisticsResponse:
        base_url = operations.LIST_TASK_QUEUES_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskQueuesStatisticsRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics', request)
        
        query_params = utils.get_query_params(operations.ListTaskQueuesStatisticsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskQueuesStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse])
                res.list_task_queues_statistics_response = out

        return res

    def list_task_reservation(self, request: operations.ListTaskReservationRequest, security: operations.ListTaskReservationSecurity, server_url: Optional[str] = None) -> operations.ListTaskReservationResponse:
        base_url = operations.LIST_TASK_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations', request)
        
        query_params = utils.get_query_params(operations.ListTaskReservationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskReservationListTaskReservationResponse])
                res.list_task_reservation_response = out

        return res

    def list_worker(self, request: operations.ListWorkerRequest, security: operations.ListWorkerSecurity, server_url: Optional[str] = None) -> operations.ListWorkerResponse:
        base_url = operations.LIST_WORKER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListWorkerRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers', request)
        
        query_params = utils.get_query_params(operations.ListWorkerRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkerListWorkerResponse])
                res.list_worker_response = out

        return res

    def list_worker_channel(self, request: operations.ListWorkerChannelRequest, security: operations.ListWorkerChannelSecurity, server_url: Optional[str] = None) -> operations.ListWorkerChannelResponse:
        base_url = operations.LIST_WORKER_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListWorkerChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels', request)
        
        query_params = utils.get_query_params(operations.ListWorkerChannelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkerChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkerChannelListWorkerChannelResponse])
                res.list_worker_channel_response = out

        return res

    def list_worker_reservation(self, request: operations.ListWorkerReservationRequest, security: operations.ListWorkerReservationSecurity, server_url: Optional[str] = None) -> operations.ListWorkerReservationResponse:
        base_url = operations.LIST_WORKER_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListWorkerReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations', request)
        
        query_params = utils.get_query_params(operations.ListWorkerReservationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkerReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkerReservationListWorkerReservationResponse])
                res.list_worker_reservation_response = out

        return res

    def list_workflow(self, request: operations.ListWorkflowRequest, security: operations.ListWorkflowSecurity, server_url: Optional[str] = None) -> operations.ListWorkflowResponse:
        base_url = operations.LIST_WORKFLOW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListWorkflowRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows', request)
        
        query_params = utils.get_query_params(operations.ListWorkflowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkflowListWorkflowResponse])
                res.list_workflow_response = out

        return res

    def list_workspace(self, request: operations.ListWorkspaceRequest, security: operations.ListWorkspaceSecurity, server_url: Optional[str] = None) -> operations.ListWorkspaceResponse:
        base_url = operations.LIST_WORKSPACE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Workspaces'
        
        query_params = utils.get_query_params(operations.ListWorkspaceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkspaceListWorkspaceResponse])
                res.list_workspace_response = out

        return res

    def update_activity(self, request: operations.UpdateActivityRequest, security: operations.UpdateActivitySecurity, server_url: Optional[str] = None) -> operations.UpdateActivityResponse:
        base_url = operations.UPDATE_ACTIVITY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateActivityRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateActivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceActivity])
                res.taskrouter_v1_workspace_activity = out

        return res

    def update_task(self, request: operations.UpdateTaskRequest, security: operations.UpdateTaskSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskResponse:
        base_url = operations.UPDATE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTask])
                res.taskrouter_v1_workspace_task = out

        return res

    def update_task_channel(self, request: operations.UpdateTaskChannelRequest, security: operations.UpdateTaskChannelSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskChannelResponse:
        base_url = operations.UPDATE_TASK_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskChannel])
                res.taskrouter_v1_workspace_task_channel = out

        return res

    def update_task_queue(self, request: operations.UpdateTaskQueueRequest, security: operations.UpdateTaskQueueSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskQueueResponse:
        base_url = operations.UPDATE_TASK_QUEUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskQueueRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskQueue])
                res.taskrouter_v1_workspace_task_queue = out

        return res

    def update_task_reservation(self, request: operations.UpdateTaskReservationRequest, security: operations.UpdateTaskReservationSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskReservationResponse:
        base_url = operations.UPDATE_TASK_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceTaskTaskReservation])
                res.taskrouter_v1_workspace_task_task_reservation = out

        return res

    def update_worker(self, request: operations.UpdateWorkerRequest, security: operations.UpdateWorkerSecurity, server_url: Optional[str] = None) -> operations.UpdateWorkerResponse:
        base_url = operations.UPDATE_WORKER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWorkerRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorker])
                res.taskrouter_v1_workspace_worker = out

        return res

    def update_worker_channel(self, request: operations.UpdateWorkerChannelRequest, security: operations.UpdateWorkerChannelSecurity, server_url: Optional[str] = None) -> operations.UpdateWorkerChannelResponse:
        base_url = operations.UPDATE_WORKER_CHANNEL_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWorkerChannelRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkerChannelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerChannel])
                res.taskrouter_v1_workspace_worker_worker_channel = out

        return res

    def update_worker_reservation(self, request: operations.UpdateWorkerReservationRequest, security: operations.UpdateWorkerReservationSecurity, server_url: Optional[str] = None) -> operations.UpdateWorkerReservationResponse:
        base_url = operations.UPDATE_WORKER_RESERVATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWorkerReservationRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkerReservationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkerWorkerReservation])
                res.taskrouter_v1_workspace_worker_worker_reservation = out

        return res

    def update_workflow(self, request: operations.UpdateWorkflowRequest, security: operations.UpdateWorkflowSecurity, server_url: Optional[str] = None) -> operations.UpdateWorkflowResponse:
        base_url = operations.UPDATE_WORKFLOW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWorkflowRequest, base_url, '/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkflowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1WorkspaceWorkflow])
                res.taskrouter_v1_workspace_workflow = out

        return res

    def update_workspace(self, request: operations.UpdateWorkspaceRequest, security: operations.UpdateWorkspaceSecurity, server_url: Optional[str] = None) -> operations.UpdateWorkspaceResponse:
        base_url = operations.UPDATE_WORKSPACE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWorkspaceRequest, base_url, '/v1/Workspaces/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskrouterV1Workspace])
                res.taskrouter_v1_workspace = out

        return res

    