/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class UpdateConsentsPsuDataRequest {
    /**
     * Is contained if and only if the "Signature" element is contained in the header of the request.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Digest")
    public String digest;

    public UpdateConsentsPsuDataRequest withDigest(String digest) {
        this.digest = digest;
        return this;
    }
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Accept")
    public String psuAccept;

    public UpdateConsentsPsuDataRequest withPSUAccept(String psuAccept) {
        this.psuAccept = psuAccept;
        return this;
    }
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Accept-Charset")
    public String psuAcceptCharset;

    public UpdateConsentsPsuDataRequest withPSUAcceptCharset(String psuAcceptCharset) {
        this.psuAcceptCharset = psuAcceptCharset;
        return this;
    }
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Accept-Encoding")
    public String psuAcceptEncoding;

    public UpdateConsentsPsuDataRequest withPSUAcceptEncoding(String psuAcceptEncoding) {
        this.psuAcceptEncoding = psuAcceptEncoding;
        return this;
    }
    
    /**
     * The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Accept-Language")
    public String psuAcceptLanguage;

    public UpdateConsentsPsuDataRequest withPSUAcceptLanguage(String psuAcceptLanguage) {
        this.psuAcceptLanguage = psuAcceptLanguage;
        return this;
    }
    
    /**
     * Might be mandated in the ASPSP's documentation. Only used in a corporate context.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Corporate-ID")
    public String psuCorporateID;

    public UpdateConsentsPsuDataRequest withPSUCorporateID(String psuCorporateID) {
        this.psuCorporateID = psuCorporateID;
        return this;
    }
    
    /**
     * Might be mandated in the ASPSP's documentation. Only used in a corporate context.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Corporate-ID-Type")
    public String psuCorporateIDType;

    public UpdateConsentsPsuDataRequest withPSUCorporateIDType(String psuCorporateIDType) {
        this.psuCorporateIDType = psuCorporateIDType;
        return this;
    }
    
    /**
     * UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
     * UUID identifies either a device or a device dependant application installation.
     * In case of an installation identification this ID needs to be unaltered until removal from device.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Device-ID")
    public String psuDeviceID;

    public UpdateConsentsPsuDataRequest withPSUDeviceID(String psuDeviceID) {
        this.psuDeviceID = psuDeviceID;
        return this;
    }
    
    /**
     * The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Geo-Location")
    public String psuGeoLocation;

    public UpdateConsentsPsuDataRequest withPSUGeoLocation(String psuGeoLocation) {
        this.psuGeoLocation = psuGeoLocation;
        return this;
    }
    
    /**
     * HTTP method used at the PSU ? TPP interface, if available.
     * Valid values are:
     * * GET
     * * POST
     * * PUT
     * * PATCH
     * * DELETE
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-Http-Method")
    public org.openapis.openapi.models.shared.PSUHttpMethodEnum psuHttpMethod;

    public UpdateConsentsPsuDataRequest withPSUHttpMethod(org.openapis.openapi.models.shared.PSUHttpMethodEnum psuHttpMethod) {
        this.psuHttpMethod = psuHttpMethod;
        return this;
    }
    
    /**
     * Client ID of the PSU in the ASPSP client interface.
     * 
     * Might be mandated in the ASPSP's documentation.
     * 
     * It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding
     * AIS service in the same session.
     * In this case the ASPSP might check whether PSU-ID and token match,
     * according to ASPSP documentation.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-ID")
    public String psuId;

    public UpdateConsentsPsuDataRequest withPsuId(String psuId) {
        this.psuId = psuId;
        return this;
    }
    
    /**
     * Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
     * 
     * In this case, the mean and use are then defined in the ASPSP's documentation.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-ID-Type")
    public String psuIDType;

    public UpdateConsentsPsuDataRequest withPSUIDType(String psuIDType) {
        this.psuIDType = psuIDType;
        return this;
    }
    
    /**
     * The forwarded IP Address header field consists of the corresponding HTTP request
     * IP Address field between PSU and TPP.
     * It shall be contained if and only if this request was actively initiated by the PSU.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-IP-Address")
    public String psuIPAddress;

    public UpdateConsentsPsuDataRequest withPSUIPAddress(String psuIPAddress) {
        this.psuIPAddress = psuIPAddress;
        return this;
    }
    
    /**
     * The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-IP-Port")
    public String psuIPPort;

    public UpdateConsentsPsuDataRequest withPSUIPPort(String psuIPPort) {
        this.psuIPPort = psuIPPort;
        return this;
    }
    
    /**
     * The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=PSU-User-Agent")
    public String psuUserAgent;

    public UpdateConsentsPsuDataRequest withPSUUserAgent(String psuUserAgent) {
        this.psuUserAgent = psuUserAgent;
        return this;
    }
    
    @SpeakeasyMetadata("request:mediaType=application/json")
    public Object requestBody;

    public UpdateConsentsPsuDataRequest withRequestBody(Object requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    /**
     * A signature of the request by the TPP on application level. This might be mandated by ASPSP.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Signature")
    public String signature;

    public UpdateConsentsPsuDataRequest withSignature(String signature) {
        this.signature = signature;
        return this;
    }
    
    /**
     * The certificate used for signing the request, in base64 encoding.
     * Must be contained if a signature is contained.
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=TPP-Signature-Certificate")
    public String tppSignatureCertificate;

    public UpdateConsentsPsuDataRequest withTPPSignatureCertificate(String tppSignatureCertificate) {
        this.tppSignatureCertificate = tppSignatureCertificate;
        return this;
    }
    
    /**
     * ID of the request, unique to the call, as determined by the initiating party.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Request-ID")
    public String xRequestID;

    public UpdateConsentsPsuDataRequest withXRequestID(String xRequestID) {
        this.xRequestID = xRequestID;
        return this;
    }
    
    /**
     * Resource identification of the related SCA.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=authorisationId")
    public String authorisationId;

    public UpdateConsentsPsuDataRequest withAuthorisationId(String authorisationId) {
        this.authorisationId = authorisationId;
        return this;
    }
    
    /**
     * ID of the corresponding consent object as returned by an account information consent request.
     * 
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=consentId")
    public String consentId;

    public UpdateConsentsPsuDataRequest withConsentId(String consentId) {
        this.consentId = consentId;
        return this;
    }
    
    public UpdateConsentsPsuDataRequest(@JsonProperty("X-Request-ID") String xRequestID, @JsonProperty("authorisationId") String authorisationId, @JsonProperty("consentId") String consentId) {
        this.xRequestID = xRequestID;
        this.authorisationId = authorisationId;
        this.consentId = consentId;
  }
}
