"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import costcategoryrule as shared_costcategoryrule
from ..shared import costcategoryruleversion_enum as shared_costcategoryruleversion_enum
from ..shared import costcategorysplitchargerule as shared_costcategorysplitchargerule
from ..shared import resourcetag as shared_resourcetag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCostCategoryDefinitionRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The unique name of the Cost Category."""  
    rules: list[shared_costcategoryrule.CostCategoryRule] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rules') }})  
    rule_version: shared_costcategoryruleversion_enum.CostCategoryRuleVersionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleVersion') }})
    r"""The rule schema version in this particular Cost Category."""  
    default_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultValue'), 'exclude': lambda f: f is None }})
    r"""The default value for the cost category."""  
    effective_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveStart'), 'exclude': lambda f: f is None }})  
    resource_tags: Optional[list[shared_resourcetag.ResourceTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceTags'), 'exclude': lambda f: f is None }})  
    split_charge_rules: Optional[list[shared_costcategorysplitchargerule.CostCategorySplitChargeRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SplitChargeRules'), 'exclude': lambda f: f is None }})  
    