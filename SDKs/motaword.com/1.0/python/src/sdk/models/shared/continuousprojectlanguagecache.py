"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContinuousProjectLanguageCache:
    r"""TM, MT and Nonparsed cache list for translations"""
    
    mt: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mt'), 'exclude': lambda f: f is None }})
    r"""source > target map of strings for translations"""  
    nonparsed: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonparsed'), 'exclude': lambda f: f is None }})
    r"""source > target map of strings for translations"""  
    tm: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tm'), 'exclude': lambda f: f is None }})
    r"""source > target map of strings for translations"""  
    