"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import runtimemetadata as shared_runtimemetadata
from ..shared import status as shared_status
from ..shared import templatemetadata as shared_templatemetadata
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetTemplateResponseTemplateTypeEnum(str, Enum):
    r"""Template Type."""
    UNKNOWN = 'UNKNOWN'
    LEGACY = 'LEGACY'
    FLEX = 'FLEX'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTemplateResponse:
    r"""The response to a GetTemplate request."""
    
    metadata: Optional[shared_templatemetadata.TemplateMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata describing a template."""  
    runtime_metadata: Optional[shared_runtimemetadata.RuntimeMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeMetadata'), 'exclude': lambda f: f is None }})
    r"""RuntimeMetadata describing a runtime environment."""  
    status: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    template_type: Optional[GetTemplateResponseTemplateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateType'), 'exclude': lambda f: f is None }})
    r"""Template Type."""  
    