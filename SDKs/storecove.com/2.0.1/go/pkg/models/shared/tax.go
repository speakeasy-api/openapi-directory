// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaxTaxCategoryEnum - The optional category code for the tax. This is not mandatory, but highly recommended. If not provided, it will be automatically derived from the country/percentage in combination with the invoice taxPointDate (which defaults to the issueDate), but there are situations in which this fails and the category needs to be specified explicitly. In particular, there are multiple categories available for 0%. The allowed values depend on the country of the tax.
// ++++
// <ul><li>AU/NZ:<ul><li>standard (S)</li><li>zero_rated (Z - 0%)</li><li>exempt (E - 0%)</li><li>export (G - 0%)</li><li>outside_scope (O - 0%)</li></ul></li><li>EU:<ul><li>standard (S)</li><li>zero_rated (Z - 0%)</li><li>reverse_charge (AE - 0%)</li><li>intra_community (K - 0%)</li><li>exempt (E - 0%)</li><li>export (G - 0%)</li><li>outside_scope (O - 0%)</li></ul></li><li>SG:<ul><li>standard (SR)</li><li>deemed_supply (DS)</li><li>srca_s (SRCA-S)</li><li>srca_c (SRCA-C - 0%)</li><li>zero_rated (ZR - 0%)</li><li>regulation33_exempt (ES33 - 0%)</li><li>nonregulation33_exempt (ESN33 - 0%)</li><li>outside_scope (OS - 0%)</li><li>not_registered (NG - 0%)</li></ul></li><li>MY:<ul><li>sales_tax (S), also 0%</li><li>sales_tax_work (SW)</li><li>service_tax (SV), also 0%</li><li>service_tax_import (SVI)</li><li>sales_export_market (EEM)</li><li>sales_special_area (ESP)</li><li>sales_designated_area (EDA)</li><li>exemption_schedule_a (ESA)</li><li>exemption_schedule_b (ESB)</li><li>exemption_schedule_c_a (ESC-A)</li><li>exemption_schedule_c_b (ESC-B)</li><li>exemption_schedule_c_c (ESC-C)</li><li>exemption_service_tax (ESV)</li></ul></li></ul>
// ++++
type TaxTaxCategoryEnum string

const (
	TaxTaxCategoryEnumStandard              TaxTaxCategoryEnum = "standard"
	TaxTaxCategoryEnumZeroRated             TaxTaxCategoryEnum = "zero_rated"
	TaxTaxCategoryEnumReverseCharge         TaxTaxCategoryEnum = "reverse_charge"
	TaxTaxCategoryEnumIntraCommunity        TaxTaxCategoryEnum = "intra_community"
	TaxTaxCategoryEnumExempt                TaxTaxCategoryEnum = "exempt"
	TaxTaxCategoryEnumExport                TaxTaxCategoryEnum = "export"
	TaxTaxCategoryEnumOutsideScope          TaxTaxCategoryEnum = "outside_scope"
	TaxTaxCategoryEnumRegulation33Exempt    TaxTaxCategoryEnum = "regulation33_exempt"
	TaxTaxCategoryEnumNonregulation33Exempt TaxTaxCategoryEnum = "nonregulation33_exempt"
	TaxTaxCategoryEnumDeemedSupply          TaxTaxCategoryEnum = "deemed_supply"
	TaxTaxCategoryEnumSrcaS                 TaxTaxCategoryEnum = "srca_s"
	TaxTaxCategoryEnumSrcaC                 TaxTaxCategoryEnum = "srca_c"
	TaxTaxCategoryEnumNotRegistered         TaxTaxCategoryEnum = "not_registered"
	TaxTaxCategoryEnumSalesTax              TaxTaxCategoryEnum = "sales_tax"
	TaxTaxCategoryEnumSalesTaxWork          TaxTaxCategoryEnum = "sales_tax_work"
	TaxTaxCategoryEnumServiceTax            TaxTaxCategoryEnum = "service_tax"
	TaxTaxCategoryEnumServiceTaxImport      TaxTaxCategoryEnum = "service_tax_import"
	TaxTaxCategoryEnumSalesToExportMarket   TaxTaxCategoryEnum = "sales_to_export_market"
	TaxTaxCategoryEnumSalesToSpecialArea    TaxTaxCategoryEnum = "sales_to_special_area"
	TaxTaxCategoryEnumSalesToDesignatedArea TaxTaxCategoryEnum = "sales_to_designated_area"
	TaxTaxCategoryEnumExemptionScheduleA    TaxTaxCategoryEnum = "exemption_schedule_a"
	TaxTaxCategoryEnumExemptionScheduleB    TaxTaxCategoryEnum = "exemption_schedule_b"
	TaxTaxCategoryEnumExemptionScheduleCA   TaxTaxCategoryEnum = "exemption_schedule_c_a"
	TaxTaxCategoryEnumExemptionScheduleCB   TaxTaxCategoryEnum = "exemption_schedule_c_b"
	TaxTaxCategoryEnumExemptionScheduleCC   TaxTaxCategoryEnum = "exemption_schedule_c_c"
	TaxTaxCategoryEnumExemptionServiceTax   TaxTaxCategoryEnum = "exemption_service_tax"
)

func (e *TaxTaxCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "zero_rated":
		fallthrough
	case "reverse_charge":
		fallthrough
	case "intra_community":
		fallthrough
	case "exempt":
		fallthrough
	case "export":
		fallthrough
	case "outside_scope":
		fallthrough
	case "regulation33_exempt":
		fallthrough
	case "nonregulation33_exempt":
		fallthrough
	case "deemed_supply":
		fallthrough
	case "srca_s":
		fallthrough
	case "srca_c":
		fallthrough
	case "not_registered":
		fallthrough
	case "sales_tax":
		fallthrough
	case "sales_tax_work":
		fallthrough
	case "service_tax":
		fallthrough
	case "service_tax_import":
		fallthrough
	case "sales_to_export_market":
		fallthrough
	case "sales_to_special_area":
		fallthrough
	case "sales_to_designated_area":
		fallthrough
	case "exemption_schedule_a":
		fallthrough
	case "exemption_schedule_b":
		fallthrough
	case "exemption_schedule_c_a":
		fallthrough
	case "exemption_schedule_c_b":
		fallthrough
	case "exemption_schedule_c_c":
		fallthrough
	case "exemption_service_tax":
		*e = TaxTaxCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxTaxCategoryEnum: %s", s)
	}
}

type Tax struct {
	// The amount of tax. Mandatory if taxSystem == 'tax_line_amounts'. However, it is best to use taxSystem tax_line_percentages and provide only the percentage, not the actual amount. The amount is then provided at the invoice level, in the taxSubtotals element.
	Amount *float64 `json:"amount,omitempty"`
	// The optional category code for the tax. This is not mandatory, but highly recommended. If not provided, it will be automatically derived from the country/percentage in combination with the invoice taxPointDate (which defaults to the issueDate), but there are situations in which this fails and the category needs to be specified explicitly. In particular, there are multiple categories available for 0%. The allowed values depend on the country of the tax.
	// ++++
	// <ul><li>AU/NZ:<ul><li>standard (S)</li><li>zero_rated (Z - 0%)</li><li>exempt (E - 0%)</li><li>export (G - 0%)</li><li>outside_scope (O - 0%)</li></ul></li><li>EU:<ul><li>standard (S)</li><li>zero_rated (Z - 0%)</li><li>reverse_charge (AE - 0%)</li><li>intra_community (K - 0%)</li><li>exempt (E - 0%)</li><li>export (G - 0%)</li><li>outside_scope (O - 0%)</li></ul></li><li>SG:<ul><li>standard (SR)</li><li>deemed_supply (DS)</li><li>srca_s (SRCA-S)</li><li>srca_c (SRCA-C - 0%)</li><li>zero_rated (ZR - 0%)</li><li>regulation33_exempt (ES33 - 0%)</li><li>nonregulation33_exempt (ESN33 - 0%)</li><li>outside_scope (OS - 0%)</li><li>not_registered (NG - 0%)</li></ul></li><li>MY:<ul><li>sales_tax (S), also 0%</li><li>sales_tax_work (SW)</li><li>service_tax (SV), also 0%</li><li>service_tax_import (SVI)</li><li>sales_export_market (EEM)</li><li>sales_special_area (ESP)</li><li>sales_designated_area (EDA)</li><li>exemption_schedule_a (ESA)</li><li>exemption_schedule_b (ESB)</li><li>exemption_schedule_c_a (ESC-A)</li><li>exemption_schedule_c_b (ESC-B)</li><li>exemption_schedule_c_c (ESC-C)</li><li>exemption_service_tax (ESV)</li></ul></li></ul>
	// ++++
	Category *TaxTaxCategoryEnum `json:"category,omitempty"`
	// An ISO 3166-1 alpha-2 country code.
	Country CountryEnum `json:"country"`
	// The percentage Tax. This should be a valid Tax percentage in the country at the time of the issueDate of this invoice. Mandatory if taxSystem == 'tax_line_percentages'
	Percentage *float64 `json:"percentage,omitempty"`
}
