/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum UpdateCommentXAmzTargetEnum {
  CodeCommit20150413UpdateComment = "CodeCommit_20150413.UpdateComment",
}

export class UpdateCommentRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  updateCommentInput: shared.UpdateCommentInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: UpdateCommentXAmzTargetEnum;
}

export class UpdateCommentResponse extends SpeakeasyBase {
  /**
   * CommentContentRequiredException
   */
  @SpeakeasyMetadata()
  commentContentRequiredException?: any;

  /**
   * CommentContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  commentContentSizeLimitExceededException?: any;

  /**
   * CommentDeletedException
   */
  @SpeakeasyMetadata()
  commentDeletedException?: any;

  /**
   * CommentDoesNotExistException
   */
  @SpeakeasyMetadata()
  commentDoesNotExistException?: any;

  /**
   * CommentIdRequiredException
   */
  @SpeakeasyMetadata()
  commentIdRequiredException?: any;

  /**
   * CommentNotCreatedByCallerException
   */
  @SpeakeasyMetadata()
  commentNotCreatedByCallerException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidCommentIdException
   */
  @SpeakeasyMetadata()
  invalidCommentIdException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateCommentOutput?: shared.UpdateCommentOutput;
}
