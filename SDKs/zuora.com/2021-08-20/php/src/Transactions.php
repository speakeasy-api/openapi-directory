<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Transactions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List all invoices for an account
     * 
     * Retrieves invoices for a specified account. 
     * Invoices are returned in reverse chronological order by **updatedDate**.
     * 
     * For a use case of this operation, see [View invoices](https://www.zuora.com/developer/api-guides/#View-invoices).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceResponse
     */
	public function getTransactionInvoice(
        \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/transactions/invoices/accounts/{account-key}', \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTransactionInvoiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getInvoiceFileWrapper = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETInvoiceFileWrapper', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all payments for an account
     * 
     * Retrieves payments for a specified account. Payments are returned in
     * reverse chronological order by **updatedDate**.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentResponse
     */
	public function getTransactionPayment(
        \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/transactions/payments/accounts/{account-key}', \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTransactionPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPaymentsType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETPaymentsType', 'json');
            }
        }

        return $response;
    }
}