/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PortfolioOptimizationMeanVariance {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Maximum Return Portfolio
   *
   * @remarks
   * Compute the asset weights of the maximum return portfolio, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumReturn(
    req: operations.PostPortfolioOptimizationMaximumReturnRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumReturnResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPortfolioOptimizationMaximumReturnRequestBody(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/optimization/maximum-return";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumReturnResponse =
        new operations.PostPortfolioOptimizationMaximumReturnResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumReturn200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumReturn200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Diversified Maximum Return Portfolio
   *
   * @remarks
   * Compute the asset weights of the diversified maximum return portfolio, as defined in the first reference, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
   *
   * References
   *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
   *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumReturnDiversified(
    req: operations.PostPortfolioOptimizationMaximumReturnDiversifiedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumReturnDiversifiedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMaximumReturnDiversifiedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/maximum-return/diversified";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumReturnDiversifiedResponse =
        new operations.PostPortfolioOptimizationMaximumReturnDiversifiedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumReturnDiversified200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumReturnDiversified200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subset Resampling-Based Maximum Return Portfolio
   *
   * @remarks
   * Compute the asset weights of the subset resampling-based maximum return portfolio, following the methodology described in the first and the second references, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
   *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumReturnSubsetResamplingBased(
    req: operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/maximum-return/subset-resampling-based";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse =
        new operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBasedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumReturnSubsetResamplingBased200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumReturnSubsetResamplingBased200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Maximum Sharpe Ratio Portfolio
   *
   * @remarks
   * Compute the asset weights of the maximum Sharpe ratio portfolio, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumSharpeRatio(
    req: operations.PostPortfolioOptimizationMaximumSharpeRatioRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumSharpeRatioResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/maximum-sharpe-ratio";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumSharpeRatioResponse =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumSharpeRatio200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumSharpeRatio200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Diversified Maximum Sharpe Ratio Portfolio
   *
   * @remarks
   * Compute the asset weights of the diversified maximum Sharpe ratio portfolio, as defined in the first reference, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
   *
   * References
   *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
   *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumSharpeRatioDiversified(
    req: operations.PostPortfolioOptimizationMaximumSharpeRatioDiversifiedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioDiversifiedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/maximum-sharpe-ratio/diversified";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioDiversifiedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumSharpeRatioDiversified200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumSharpeRatioDiversified200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subset Resampling-Based Maximum Sharpe Ratio Portfolio
   *
   * @remarks
   * Compute the asset weights of the susbet resampling-based maximum Sharpe ratio portfolio, following the methodology described in the first and the second references, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
   *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased(
    req: operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/maximum-sharpe-ratio/subset-resampling-based";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse =
        new operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBasedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMaximumSharpeRatioSubsetResamplingBased200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Mean-Variance Efficient Portfolio
   *
   * @remarks
   * Compute the asset weights of a mean-variance efficient portfolio, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * > A mean-variance efficient portfolio is a portfolio belonging to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier).
   *
   * References
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMeanVarianceEfficient(
    req: operations.PostPortfolioOptimizationMeanVarianceEfficientRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMeanVarianceEfficientResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/mean-variance-efficient";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMeanVarianceEfficientResponse =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMeanVarianceEfficient200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMeanVarianceEfficient200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Diversified Mean-Variance Efficient Portfolio
   *
   * @remarks
   * Compute the asset weights of a diversified mean-variance efficient portfolio, as defined in the first reference, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
   *
   * > A diversified mean-variance efficient portfolio does NOT belong to [the mean-variance efficient frontier](#post-/portfolio/analysis/mean-variance/efficient-frontier), but is close to this frontier.
   *
   * References
   *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
   *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMeanVarianceEfficientDiversified(
    req: operations.PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/mean-variance-efficient/diversified";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientDiversifiedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMeanVarianceEfficientDiversified200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMeanVarianceEfficientDiversified200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subset Resampling-Based Mean-Variance Efficient Portfolio
   *
   * @remarks
   * Compute the asset weights of a subset resampling-based  mean-variance efficient portfolio, following the methodology described in the first and the second references, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
   *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased(
    req: operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/mean-variance-efficient/subset-resampling-based";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse =
        new operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBasedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMeanVarianceEfficientSubsetResamplingBased200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Minimum Variance Portfolio
   *
   * @remarks
   * Compute the asset weights of the minimum variance portfolio, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMinimumVariance(
    req: operations.PostPortfolioOptimizationMinimumVarianceRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMinimumVarianceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostPortfolioOptimizationMinimumVarianceRequestBody(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/portfolio/optimization/minimum-variance";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMinimumVarianceResponse =
        new operations.PostPortfolioOptimizationMinimumVarianceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMinimumVariance200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMinimumVariance200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Diversified Minimum Variance Portfolio
   *
   * @remarks
   * Compute the asset weights of the diversified minimum variance portfolio, as defined in the first reference, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * The diversification measure used in the optimization procedure is the [Herfindahl-Hirschman Index](https://en.wikipedia.org/wiki/Herfindahl%E2%80%93Hirschman_index) of the assets weights.
   *
   * References
   *  * [Alejandro Corvalan, 2005. Well Diversified Efficient Portfolios, Working Papers Central Bank of Chile 336, Central Bank of Chile](https://ideas.repec.org/p/chb/bcchwp/336.html)
   *  * [Bouchaud, Jean-Philippe and Potters, Marc and Aguilar, Jean-Pierre, Missing Information and Asset Allocation, arXiv, 1997](https://arxiv.org/abs/cond-mat/9707042)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMinimumVarianceDiversified(
    req: operations.PostPortfolioOptimizationMinimumVarianceDiversifiedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMinimumVarianceDiversifiedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMinimumVarianceDiversifiedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/minimum-variance/diversified";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMinimumVarianceDiversifiedResponse =
        new operations.PostPortfolioOptimizationMinimumVarianceDiversifiedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMinimumVarianceDiversified200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMinimumVarianceDiversified200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Subset Resampling-Based Minimum Variance Portfolio
   *
   * @remarks
   * Compute the asset weights of the subset resampling-based minimum variance portfolio, following the methodology described in the first and the second references, optionally subject to:
   * * Minimum and maximum weights constraints
   * * Maximum group weights constraints
   * * Minimum and maximum portfolio exposure constraints
   *
   * References
   *  * [CSSA, Random Subspace Optimization (RSO)](https://cssanalytics.wordpress.com/2013/10/06/random-subspace-optimization-rso/)
   *  * [Subset Optimization for Asset Allocation,Benjamin J. Gillen](https://www.bengillen.com/uploads/1/2/3/8/123891022/subsets.pdf)
   *  * Harry M. Markowitz, Portfolio Selection, Efficient Diversification of Investments, Second edition, Blackwell Publishers Inc.
   *
   */
  postPortfolioOptimizationMinimumVarianceSubsetResamplingBased(
    req: operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedRequestBody(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/portfolio/optimization/minimum-variance/subset-resampling-based";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse =
        new operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBasedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postPortfolioOptimizationMinimumVarianceSubsetResamplingBased200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostPortfolioOptimizationMinimumVarianceSubsetResamplingBased200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
