"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SetPrincipalTagAttributeMapInput:
    
    identity_pool_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityPoolId') }})  
    identity_provider_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityProviderName') }})  
    principal_tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrincipalTags'), 'exclude': lambda f: f is None }})  
    use_defaults: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseDefaults'), 'exclude': lambda f: f is None }})  
    