// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETUpdateLoginProfileActionEnum
type GETUpdateLoginProfileActionEnum string

const (
	GETUpdateLoginProfileActionEnumUpdateLoginProfile GETUpdateLoginProfileActionEnum = "UpdateLoginProfile"
)

func (e *GETUpdateLoginProfileActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UpdateLoginProfile":
		*e = GETUpdateLoginProfileActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateLoginProfileActionEnum: %s", s)
	}
}

// GETUpdateLoginProfileVersionEnum
type GETUpdateLoginProfileVersionEnum string

const (
	GETUpdateLoginProfileVersionEnumTwoThousandAndTen0508 GETUpdateLoginProfileVersionEnum = "2010-05-08"
)

func (e *GETUpdateLoginProfileVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = GETUpdateLoginProfileVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETUpdateLoginProfileVersionEnum: %s", s)
	}
}

type GETUpdateLoginProfileRequest struct {
	Action GETUpdateLoginProfileActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the Amazon Web Services account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
	Password *string `queryParam:"style=form,explode=true,name=Password"`
	// Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
	PasswordResetRequired *bool `queryParam:"style=form,explode=true,name=PasswordResetRequired"`
	// <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName          string                           `queryParam:"style=form,explode=true,name=UserName"`
	Version           GETUpdateLoginProfileVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETUpdateLoginProfileResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
