// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type UpdateInvestorSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type UpdateInvestorUpdateRequestBodyForInvestorAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    *string `json:"country,omitempty"`
	PostalCode *string `json:"postal_code,omitempty"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

type UpdateInvestorUpdateRequestBodyForInvestorDateOfBirth struct {
	// two digit string `DD`
	Day *string `json:"day,omitempty"`
	// two digit string `MM`
	Month *string `json:"month,omitempty"`
	// four digit string `YYYY`
	Year *string `json:"year,omitempty"`
}

type UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum string

const (
	UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnumInactive UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum = "inactive"
	UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnumActive   UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum = "active"
)

func (e UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum) ToPointer() *UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum {
	return &e
}

func (e *UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inactive":
		fallthrough
	case "active":
		*e = UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum: %v", v)
	}
}

// UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum - Status of an investor best describes their personal circumstances.
type UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum string

const (
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumEmployed                UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "employed"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumSelfEmployed            UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "self_employed"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumPensioner               UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "pensioner"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumChildUnder16            UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "child_under_16"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumInFullTimeEducation     UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "in_full_time_education"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumUnemployed              UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "unemployed"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumCaringForAPersonOver16  UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "caring_for_a_person_over_16"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumCaringForAPersonUnder16 UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "caring_for_a_person_under_16"
	UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnumOther                   UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum = "other"
)

func (e UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum) ToPointer() *UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum {
	return &e
}

func (e *UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum: %v", v)
	}
}

type UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWishSippBeneficiaries struct {
	Address   string  `json:"address"`
	Email     *string `json:"email,omitempty"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	// Percentage of assets that will be allocated to the beneficiary
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWishSippNominees struct {
	Address   string  `json:"address"`
	Email     *string `json:"email,omitempty"`
	FirstName string  `json:"first_name"`
	LastName  string  `json:"last_name"`
	// Percentage of assets that will be allocated to the nominee
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWish - Beneficiary and nominee list of the expression of wish.
type UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWish struct {
	// Beneficiaries list of the expression of wish
	SippBeneficiaries []UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	// Nominees list of the expression of wish
	SippNominees []UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWishSippNominees `json:"sipp_nominees,omitempty"`
}

type UpdateInvestorUpdateRequestBodyForInvestorIDNumbers struct {
	IDNumber *string `json:"id_number,omitempty"`
	IDType   *string `json:"id_type,omitempty"`
}

type UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum string

const (
	UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnumSubmitted      UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum = "submitted"
	UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnumKycFailedError UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum = "kyc_failed_error"
	UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnumPending        UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum = "pending"
	UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnumClear          UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum = "clear"
	UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnumNotStarted     UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum = "not_started"
)

func (e UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum) ToPointer() *UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum {
	return &e
}

func (e *UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum: %v", v)
	}
}

// UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum - primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
type UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumPrimary  UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumEnhanced UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp12     UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp14     UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp14     UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp16     UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp16     UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) ToPointer() *UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum {
	return &e
}

func (e *UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum: %v", v)
	}
}

type UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetails struct {
	// Protected lifetime allowance of the investor. Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Primary protection factor of the investor. Required only when the lta_protection_type is primary.
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Protection notification number issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp16 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Scheme administrator reference issued by HMRC. Required for protection from 2016 onwards. Required when the lta_protection_type is fp16 or ip16.
	LtaProtectionSchemeAdministratorReference *string `json:"lta_protection_scheme_administrator_reference,omitempty"`
	// primary=Primary protection, enhanced=Enhanced protection, fp12=Fixed protection 2012, fp14=Fixed protection 2014, fp16=Fixed protection 2016, ip14=Individual protection 2014, ip16=Individual protection 2016
	LtaProtectionType UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

// UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
type UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum string

const (
	UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnumGbEng UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum = "GB-ENG"
	UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnumGbNir UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum = "GB-NIR"
	UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnumGbSct UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum = "GB-SCT"
	UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnumGbWls UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum = "GB-WLS"
)

func (e UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum) ToPointer() *UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum {
	return &e
}

func (e *UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum: %v", v)
	}
}

// UpdateInvestorUpdateRequestBodyForInvestorInput - JSON for the Update Investor resource type
type UpdateInvestorUpdateRequestBodyForInvestorInput struct {
	Address       *UpdateInvestorUpdateRequestBodyForInvestorAddress           `json:"address,omitempty"`
	DateOfBirth   *UpdateInvestorUpdateRequestBodyForInvestorDateOfBirth       `json:"date_of_birth,omitempty"`
	DealingStatus *UpdateInvestorUpdateRequestBodyForInvestorDealingStatusEnum `json:"dealing_status,omitempty"`
	Email         *string                                                      `json:"email,omitempty"`
	// Status of an investor best describes their personal circumstances.
	EmploymentStatus *UpdateInvestorUpdateRequestBodyForInvestorEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Beneficiary and nominee list of the expression of wish.
	ExpressionOfWish *UpdateInvestorUpdateRequestBodyForInvestorExpressionOfWish `json:"expression_of_wish,omitempty"`
	FirstName        *string                                                     `json:"first_name,omitempty"`
	Gender           *string                                                     `json:"gender,omitempty"`
	HomeNumber       *string                                                     `json:"home_number,omitempty"`
	// Replaces the array in the server.
	IDNumbers    []UpdateInvestorUpdateRequestBodyForInvestorIDNumbers       `json:"id_numbers,omitempty"`
	KycAmlStatus *UpdateInvestorUpdateRequestBodyForInvestorKycAmlStatusEnum `json:"kyc_aml_status,omitempty"`
	LastName     *string                                                     `json:"last_name,omitempty"`
	// Additional details of the lifetime allowance protections of the investor.
	LtaProtectionDetails []UpdateInvestorUpdateRequestBodyForInvestorLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID           *string                                                          `json:"mifid_tax_id,omitempty"`
	MobileNumber         *string                                                          `json:"mobile_number,omitempty"`
	// Whether the investor has triggered the Money Purchase Annual Allowance.
	MpaaTriggered *bool `json:"mpaa_triggered,omitempty"`
	// Date of triggering the Money Purchase Annual Allowance. This is only required if mpaa_triggered is true.
	MpaaTriggeredDate *string `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality      *string `json:"nationality,omitempty"`
	OfficeNumber     *string `json:"office_number,omitempty"`
	ReferenceVersion int64   `json:"reference_version"`
	// Intended retirement age of the investor.
	RetirementAge *float64 `json:"retirement_age,omitempty"`
	TaxID         *string  `json:"tax_id,omitempty"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
	TaxResidence          *UpdateInvestorUpdateRequestBodyForInvestorTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant *bool                                                       `json:"tax_residency_compliant,omitempty"`
	Title                 *string                                                     `json:"title,omitempty"`
}

type UpdateInvestorRequest struct {
	RequestBody UpdateInvestorUpdateRequestBodyForInvestorInput `request:"mediaType=application/json"`
	// Investor Id
	InvestorID string `pathParam:"style=simple,explode=false,name=investor_id"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// UpdateInvestor500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type UpdateInvestor500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdateInvestor429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type UpdateInvestor429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdateInvestor409ApplicationJSONStatusEnum - Current status of the original request
type UpdateInvestor409ApplicationJSONStatusEnum string

const (
	UpdateInvestor409ApplicationJSONStatusEnumProcessing UpdateInvestor409ApplicationJSONStatusEnum = "PROCESSING"
	UpdateInvestor409ApplicationJSONStatusEnumComplete   UpdateInvestor409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e UpdateInvestor409ApplicationJSONStatusEnum) ToPointer() *UpdateInvestor409ApplicationJSONStatusEnum {
	return &e
}

func (e *UpdateInvestor409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = UpdateInvestor409ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestor409ApplicationJSONStatusEnum: %v", v)
	}
}

// UpdateInvestor409ApplicationJSON - Duplicate request
type UpdateInvestor409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status UpdateInvestor409ApplicationJSONStatusEnum `json:"status"`
}

// UpdateInvestor404ApplicationJSON - The specified resource was not found
type UpdateInvestor404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdateInvestor403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type UpdateInvestor403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdateInvestor401ApplicationJSON - You do not have permissions to access this resource.
type UpdateInvestor401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// UpdateInvestor400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type UpdateInvestor400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type UpdateInvestorRootTypeForInvestorAddress struct {
	AddressLine *string `json:"address_line,omitempty"`
	City        *string `json:"city,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Country    string  `json:"country"`
	PostalCode string  `json:"postal_code"`
	State      *string `json:"state,omitempty"`
	StreetName *string `json:"street_name,omitempty"`
}

type UpdateInvestorRootTypeForInvestorDateOfBirth struct {
	// two digit string `DD`
	Day *string `json:"day,omitempty"`
	// two digit string `MM`
	Month *string `json:"month,omitempty"`
	// four digit string `YYYY`
	Year *string `json:"year,omitempty"`
}

type UpdateInvestorRootTypeForInvestorDealingStatusEnum string

const (
	UpdateInvestorRootTypeForInvestorDealingStatusEnumInactive UpdateInvestorRootTypeForInvestorDealingStatusEnum = "inactive"
	UpdateInvestorRootTypeForInvestorDealingStatusEnumActive   UpdateInvestorRootTypeForInvestorDealingStatusEnum = "active"
)

func (e UpdateInvestorRootTypeForInvestorDealingStatusEnum) ToPointer() *UpdateInvestorRootTypeForInvestorDealingStatusEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorDealingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inactive":
		fallthrough
	case "active":
		*e = UpdateInvestorRootTypeForInvestorDealingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorDealingStatusEnum: %v", v)
	}
}

// UpdateInvestorRootTypeForInvestorEmploymentStatusEnum - Status of an investor best describes their personal circumstances.
type UpdateInvestorRootTypeForInvestorEmploymentStatusEnum string

const (
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumEmployed                UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "employed"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumSelfEmployed            UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "self_employed"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumPensioner               UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "pensioner"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumChildUnder16            UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "child_under_16"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumInFullTimeEducation     UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "in_full_time_education"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumUnemployed              UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "unemployed"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumCaringForAPersonOver16  UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_over_16"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumCaringForAPersonUnder16 UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "caring_for_a_person_under_16"
	UpdateInvestorRootTypeForInvestorEmploymentStatusEnumOther                   UpdateInvestorRootTypeForInvestorEmploymentStatusEnum = "other"
)

func (e UpdateInvestorRootTypeForInvestorEmploymentStatusEnum) ToPointer() *UpdateInvestorRootTypeForInvestorEmploymentStatusEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorEmploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "employed":
		fallthrough
	case "self_employed":
		fallthrough
	case "pensioner":
		fallthrough
	case "child_under_16":
		fallthrough
	case "in_full_time_education":
		fallthrough
	case "unemployed":
		fallthrough
	case "caring_for_a_person_over_16":
		fallthrough
	case "caring_for_a_person_under_16":
		fallthrough
	case "other":
		*e = UpdateInvestorRootTypeForInvestorEmploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorEmploymentStatusEnum: %v", v)
	}
}

type UpdateInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type UpdateInvestorRootTypeForInvestorExpressionOfWishSippNominees struct {
	Address     string  `json:"address"`
	Email       *string `json:"email,omitempty"`
	FirstName   string  `json:"first_name"`
	LastName    string  `json:"last_name"`
	Percentage  string  `json:"percentage"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	TaxID       *string `json:"tax_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateInvestorRootTypeForInvestorExpressionOfWish - Beneficiary and nominee list of the expression of wish.
type UpdateInvestorRootTypeForInvestorExpressionOfWish struct {
	SippBeneficiaries []UpdateInvestorRootTypeForInvestorExpressionOfWishSippBeneficiaries `json:"sipp_beneficiaries,omitempty"`
	SippNominees      []UpdateInvestorRootTypeForInvestorExpressionOfWishSippNominees      `json:"sipp_nominees,omitempty"`
}

type UpdateInvestorRootTypeForInvestorIDNumbers struct {
	IDNumber string `json:"id_number"`
	IDType   string `json:"id_type"`
}

type UpdateInvestorRootTypeForInvestorKycAmlStatusEnum string

const (
	UpdateInvestorRootTypeForInvestorKycAmlStatusEnumSubmitted      UpdateInvestorRootTypeForInvestorKycAmlStatusEnum = "submitted"
	UpdateInvestorRootTypeForInvestorKycAmlStatusEnumKycFailedError UpdateInvestorRootTypeForInvestorKycAmlStatusEnum = "kyc_failed_error"
	UpdateInvestorRootTypeForInvestorKycAmlStatusEnumPending        UpdateInvestorRootTypeForInvestorKycAmlStatusEnum = "pending"
	UpdateInvestorRootTypeForInvestorKycAmlStatusEnumClear          UpdateInvestorRootTypeForInvestorKycAmlStatusEnum = "clear"
	UpdateInvestorRootTypeForInvestorKycAmlStatusEnumNotStarted     UpdateInvestorRootTypeForInvestorKycAmlStatusEnum = "not_started"
)

func (e UpdateInvestorRootTypeForInvestorKycAmlStatusEnum) ToPointer() *UpdateInvestorRootTypeForInvestorKycAmlStatusEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorKycAmlStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submitted":
		fallthrough
	case "kyc_failed_error":
		fallthrough
	case "pending":
		fallthrough
	case "clear":
		fallthrough
	case "not_started":
		*e = UpdateInvestorRootTypeForInvestorKycAmlStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorKycAmlStatusEnum: %v", v)
	}
}

type UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum string

const (
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumPrimary  UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "primary"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumEnhanced UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "enhanced"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp12     UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp12"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp14     UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp14"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp14     UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip14"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumFp16     UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "fp16"
	UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnumIp16     UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum = "ip16"
)

func (e UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) ToPointer() *UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "enhanced":
		fallthrough
	case "fp12":
		fallthrough
	case "fp14":
		fallthrough
	case "ip14":
		fallthrough
	case "fp16":
		fallthrough
	case "ip16":
		*e = UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum: %v", v)
	}
}

type UpdateInvestorRootTypeForInvestorLtaProtectionDetails struct {
	// Required when the lta_protection_type is ip14 or ip16.
	LtaIndividualProtectionAmount *string `json:"lta_individual_protection_amount,omitempty"`
	// Required only when the lta_protection_type is primary
	LtaPrimaryProtectionFactor *string `json:"lta_primary_protection_factor,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionNotificationNumber *string `json:"lta_protection_notification_number,omitempty"`
	// Required when the lta_protection_type is fp14 or ip16.
	LtaProtectionSchemeAdministratorReference *string                                                                    `json:"lta_protection_scheme_administrator_reference,omitempty"`
	LtaProtectionType                         UpdateInvestorRootTypeForInvestorLtaProtectionDetailsLtaProtectionTypeEnum `json:"lta_protection_type"`
}

type UpdateInvestorRootTypeForInvestorStatusEnum string

const (
	UpdateInvestorRootTypeForInvestorStatusEnumKycPending UpdateInvestorRootTypeForInvestorStatusEnum = "kyc_pending"
	UpdateInvestorRootTypeForInvestorStatusEnumKycFailed  UpdateInvestorRootTypeForInvestorStatusEnum = "kyc_failed"
	UpdateInvestorRootTypeForInvestorStatusEnumInactive   UpdateInvestorRootTypeForInvestorStatusEnum = "inactive"
	UpdateInvestorRootTypeForInvestorStatusEnumActive     UpdateInvestorRootTypeForInvestorStatusEnum = "active"
)

func (e UpdateInvestorRootTypeForInvestorStatusEnum) ToPointer() *UpdateInvestorRootTypeForInvestorStatusEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kyc_pending":
		fallthrough
	case "kyc_failed":
		fallthrough
	case "inactive":
		fallthrough
	case "active":
		*e = UpdateInvestorRootTypeForInvestorStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorStatusEnum: %v", v)
	}
}

// UpdateInvestorRootTypeForInvestorTaxResidenceEnum - Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
type UpdateInvestorRootTypeForInvestorTaxResidenceEnum string

const (
	UpdateInvestorRootTypeForInvestorTaxResidenceEnumGbEng UpdateInvestorRootTypeForInvestorTaxResidenceEnum = "GB-ENG"
	UpdateInvestorRootTypeForInvestorTaxResidenceEnumGbNir UpdateInvestorRootTypeForInvestorTaxResidenceEnum = "GB-NIR"
	UpdateInvestorRootTypeForInvestorTaxResidenceEnumGbSct UpdateInvestorRootTypeForInvestorTaxResidenceEnum = "GB-SCT"
	UpdateInvestorRootTypeForInvestorTaxResidenceEnumGbWls UpdateInvestorRootTypeForInvestorTaxResidenceEnum = "GB-WLS"
)

func (e UpdateInvestorRootTypeForInvestorTaxResidenceEnum) ToPointer() *UpdateInvestorRootTypeForInvestorTaxResidenceEnum {
	return &e
}

func (e *UpdateInvestorRootTypeForInvestorTaxResidenceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GB-ENG":
		fallthrough
	case "GB-NIR":
		fallthrough
	case "GB-SCT":
		fallthrough
	case "GB-WLS":
		*e = UpdateInvestorRootTypeForInvestorTaxResidenceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvestorRootTypeForInvestorTaxResidenceEnum: %v", v)
	}
}

// UpdateInvestorRootTypeForInvestor - JSON for the Investor resource type
type UpdateInvestorRootTypeForInvestor struct {
	Address UpdateInvestorRootTypeForInvestorAddress `json:"address"`
	// Array of bank account IDs
	BankAccounts  []string                                            `json:"bank_accounts,omitempty"`
	CreatedAt     *time.Time                                          `json:"created_at,omitempty"`
	DateOfBirth   UpdateInvestorRootTypeForInvestorDateOfBirth        `json:"date_of_birth"`
	DealingStatus *UpdateInvestorRootTypeForInvestorDealingStatusEnum `json:"dealing_status,omitempty"`
	Email         *string                                             `json:"email,omitempty"`
	// Status of an investor best describes their personal circumstances.
	EmploymentStatus *UpdateInvestorRootTypeForInvestorEmploymentStatusEnum `json:"employment_status,omitempty"`
	// Beneficiary and nominee list of the expression of wish.
	ExpressionOfWish        *UpdateInvestorRootTypeForInvestorExpressionOfWish `json:"expression_of_wish,omitempty"`
	FirstName               string                                             `json:"first_name"`
	Gender                  *string                                            `json:"gender,omitempty"`
	HomeNumber              *string                                            `json:"home_number,omitempty"`
	IDNumbers               []UpdateInvestorRootTypeForInvestorIDNumbers       `json:"id_numbers,omitempty"`
	InvestorID              string                                             `json:"investor_id"`
	KycAmlStatus            *UpdateInvestorRootTypeForInvestorKycAmlStatusEnum `json:"kyc_aml_status,omitempty"`
	KycAmlStatusLastUpdated *time.Time                                         `json:"kyc_aml_status_last_updated,omitempty"`
	LastName                string                                             `json:"last_name"`
	// Additional details of the lifetime allowance protections of the investor
	LtaProtectionDetails []UpdateInvestorRootTypeForInvestorLtaProtectionDetails `json:"lta_protection_details,omitempty"`
	MifidTaxID           *string                                                 `json:"mifid_tax_id,omitempty"`
	MobileNumber         *string                                                 `json:"mobile_number,omitempty"`
	// Whether the investor has triggered the Money Purchase Annual Allowance.
	MpaaTriggered *bool `json:"mpaa_triggered,omitempty"`
	// Date of triggering the Money Purchase Annual Allowance. It is required if mpaa_triggered is true.
	MpaaTriggeredDate *string `json:"mpaa_triggered_date,omitempty"`
	// 3 character country code inline with ISO 3166-1 alpha-3
	Nationality      string  `json:"nationality"`
	OfficeNumber     *string `json:"office_number,omitempty"`
	ReferenceVersion *int64  `json:"reference_version,omitempty"`
	// Intended retirement age of the investor
	RetirementAge *float64                                     `json:"retirement_age,omitempty"`
	Status        *UpdateInvestorRootTypeForInvestorStatusEnum `json:"status,omitempty"`
	TaxID         string                                       `json:"tax_id"`
	// Residence of the investor for tax purposes. (for example, to claim relief at source) GB-ENG=England GB-NIR=Northern Ireland GB-SCT=Scotland GB-WLS=Wales
	TaxResidence          *UpdateInvestorRootTypeForInvestorTaxResidenceEnum `json:"tax_residence,omitempty"`
	TaxResidencyCompliant bool                                               `json:"tax_residency_compliant"`
	Title                 *string                                            `json:"title,omitempty"`
	UpdatedAt             *time.Time                                         `json:"updated_at,omitempty"`
}

type UpdateInvestorResponse struct {
	ContentType string
	// success
	RootTypeForInvestor *UpdateInvestorRootTypeForInvestor
	StatusCode          int
	RawResponse         *http.Response
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	UpdateInvestor400ApplicationJSONObject *UpdateInvestor400ApplicationJSON
	// You do not have permissions to access this resource.
	UpdateInvestor401ApplicationJSONObject *UpdateInvestor401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	UpdateInvestor403ApplicationJSONObject *UpdateInvestor403ApplicationJSON
	// The specified resource was not found
	UpdateInvestor404ApplicationJSONObject *UpdateInvestor404ApplicationJSON
	// Duplicate request
	UpdateInvestor409ApplicationJSONObject *UpdateInvestor409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	UpdateInvestor429ApplicationJSONObject *UpdateInvestor429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	UpdateInvestor500ApplicationJSONObject *UpdateInvestor500ApplicationJSON
}
