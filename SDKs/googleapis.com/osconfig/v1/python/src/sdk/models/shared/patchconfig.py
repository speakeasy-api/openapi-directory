"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aptsettings as shared_aptsettings
from ..shared import execstep as shared_execstep
from ..shared import windowsupdatesettings as shared_windowsupdatesettings
from ..shared import yumsettings as shared_yumsettings
from ..shared import zyppersettings as shared_zyppersettings
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PatchConfigRebootConfigEnum(str, Enum):
    r"""Post-patch reboot settings."""
    REBOOT_CONFIG_UNSPECIFIED = 'REBOOT_CONFIG_UNSPECIFIED'
    DEFAULT = 'DEFAULT'
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchConfig:
    r"""Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance."""
    
    apt: Optional[shared_aptsettings.AptSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apt'), 'exclude': lambda f: f is None }})
    r"""Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed."""  
    goo: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goo'), 'exclude': lambda f: f is None }})
    r"""Googet patching is performed by running `googet update`."""  
    mig_instances_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migInstancesAllowed'), 'exclude': lambda f: f is None }})
    r"""Allows the patch job to run on Managed instance groups (MIGs)."""  
    post_step: Optional[shared_execstep.ExecStep] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postStep'), 'exclude': lambda f: f is None }})
    r"""A step that runs an executable for a PatchJob."""  
    pre_step: Optional[shared_execstep.ExecStep] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preStep'), 'exclude': lambda f: f is None }})
    r"""A step that runs an executable for a PatchJob."""  
    reboot_config: Optional[PatchConfigRebootConfigEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rebootConfig'), 'exclude': lambda f: f is None }})
    r"""Post-patch reboot settings."""  
    windows_update: Optional[shared_windowsupdatesettings.WindowsUpdateSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windowsUpdate'), 'exclude': lambda f: f is None }})
    r"""Windows patching is performed using the Windows Update Agent."""  
    yum: Optional[shared_yumsettings.YumSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yum'), 'exclude': lambda f: f is None }})
    r"""Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms."""  
    zypper: Optional[shared_zyppersettings.ZypperSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zypper'), 'exclude': lambda f: f is None }})
    r"""Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual."""  
    