/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ParticipantTokenCapabilityEnum } from "./participanttokencapabilityenum";
import { Expose, Transform } from "class-transformer";

/**
 * Object specifying a participant token in a stage.
 */
export class ParticipantToken extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "capabilities" })
  capabilities?: ParticipantTokenCapabilityEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "expirationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expirationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "participantId" })
  participantId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "token" })
  token?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId?: string;
}
