/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Output only. The current state of the instance.
 */
export enum InstanceStateEnum {
  StateNotKnown = "STATE_NOT_KNOWN",
  Ready = "READY",
  Creating = "CREATING",
}

/**
 * The type of the instance. Defaults to `PRODUCTION`.
 */
export enum InstanceTypeEnum {
  TypeUnspecified = "TYPE_UNSPECIFIED",
  Production = "PRODUCTION",
  Development = "DEVELOPMENT",
}

/**
 * A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
 */
export class Instance extends SpeakeasyBase {
  /**
   * Output only. A commit timestamp representing when this Instance was created. For instances created before this field was added (August 2021), this value is `seconds: 0, nanos: 1`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. Reserved for future use.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "satisfiesPzs" })
  satisfiesPzs?: boolean;

  /**
   * Output only. The current state of the instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: InstanceStateEnum;

  /**
   * The type of the instance. Defaults to `PRODUCTION`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: InstanceTypeEnum;
}

/**
 * A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.
 */
export class InstanceInput extends SpeakeasyBase {
  /**
   * Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\p{Ll}\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The type of the instance. Defaults to `PRODUCTION`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: InstanceTypeEnum;
}
