/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FeaturedCollectionCoverItem } from "./featuredcollectioncoveritem";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Metadata about a featured collection
 */
export class FeaturedCollection extends SpeakeasyBase {
  /**
   * Featured collection cover item metadata
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cover_item" })
  @Type(() => FeaturedCollectionCoverItem)
  coverItem?: FeaturedCollectionCoverItem;

  /**
   * Date that the collection was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTime?: Date;

  /**
   * Featured collection cover item metadata
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hero_item" })
  @Type(() => FeaturedCollectionCoverItem)
  heroItem?: FeaturedCollectionCoverItem;

  /**
   * Collection ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Date that an item in the collection was last added or removed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "items_updated_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  itemsUpdatedTime?: Date;

  /**
   * Name of the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Unique share url for the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "share_url" })
  shareUrl?: string;

  /**
   * Total number of items in the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_item_count" })
  totalItemCount: number;

  /**
   * Date that the collection was last modified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedTime?: Date;
}
