"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BookingStatusItemLevelEnum(str, Enum):
    r"""**level** of *this* item's booking status"""
    ITEM = 'ITEM'
    ITINERARY = 'ITINERARY'

class BookingStatusItemTypeEnum(str, Enum):
    r"""**specifier** of *this* item's booking status
    * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
    """
    WAITING = 'WAITING'
    CONFIRMED = 'CONFIRMED'
    UNAVAILABLE = 'UNAVAILABLE'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    EXPIRED = 'EXPIRED'
    AMENDED = 'AMENDED'
    PENDING_AMEND = 'PENDING_AMEND'
    REJECTED = 'REJECTED'
    ON_HOLD = 'ON_HOLD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingStatusItem:
    r"""**object** containing item booking status information"""
    
    amended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amended'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* item's booking has been amended"""  
    cancelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelled'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* item's booking has been cancelled"""  
    confirmed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmed'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* item's booking is confirmed"""  
    failed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* item's booking has failed"""  
    level: Optional[BookingStatusItemLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""**level** of *this* item's booking status"""  
    pending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if *this* item's booking is pending"""  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""**numeric identifier** of *this* item's booking status"""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* item's booking status; e.g., 'Waiting to be booked'"""  
    type: Optional[BookingStatusItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""**specifier** of *this* item's booking status
    * See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
    """  
    