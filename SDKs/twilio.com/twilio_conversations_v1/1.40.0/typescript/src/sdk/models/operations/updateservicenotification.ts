/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateServiceNotificationServerList = [
  "https://conversations.twilio.com",
] as const;

export class UpdateServiceNotificationSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class UpdateServiceNotificationUpdateServiceNotificationRequest extends SpeakeasyBase {
  /**
   * Whether to send a notification when a participant is added to a conversation. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=AddedToConversation.Enabled" })
  addedToConversationEnabled?: boolean;

  /**
   * The name of the sound to play when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=AddedToConversation.Sound" })
  addedToConversationSound?: string;

  /**
   * The template to use to create the notification text displayed when a participant is added to a conversation and `added_to_conversation.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=AddedToConversation.Template" })
  addedToConversationTemplate?: string;

  /**
   * Weather the notification logging is enabled.
   */
  @SpeakeasyMetadata({ data: "form, name=LogEnabled" })
  logEnabled?: boolean;

  /**
   * Whether the new message badge is enabled. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.BadgeCountEnabled" })
  newMessageBadgeCountEnabled?: boolean;

  /**
   * Whether to send a notification when a new message is added to a conversation. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.Enabled" })
  newMessageEnabled?: boolean;

  /**
   * The name of the sound to play when a new message is added to a conversation and `new_message.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.Sound" })
  newMessageSound?: string;

  /**
   * The template to use to create the notification text displayed when a new message is added to a conversation and `new_message.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.Template" })
  newMessageTemplate?: string;

  /**
   * Whether to send a notification when a new message with media/file attachments is added to a conversation. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.WithMedia.Enabled" })
  newMessageWithMediaEnabled?: boolean;

  /**
   * The template to use to create the notification text displayed when a new message with media/file attachments is added to a conversation and `new_message.attachments.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=NewMessage.WithMedia.Template" })
  newMessageWithMediaTemplate?: string;

  /**
   * Whether to send a notification to a user when they are removed from a conversation. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=RemovedFromConversation.Enabled" })
  removedFromConversationEnabled?: boolean;

  /**
   * The name of the sound to play to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=RemovedFromConversation.Sound" })
  removedFromConversationSound?: string;

  /**
   * The template to use to create the notification text displayed to a user when they are removed from a conversation and `removed_from_conversation.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=RemovedFromConversation.Template" })
  removedFromConversationTemplate?: string;
}

export class UpdateServiceNotificationRequest extends SpeakeasyBase {
  /**
   * The SID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) the Configuration applies to.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ChatServiceSid",
  })
  chatServiceSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateServiceNotificationUpdateServiceNotificationRequest;
}

export class UpdateServiceNotificationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  conversationsV1ServiceServiceConfigurationServiceNotification?: shared.ConversationsV1ServiceServiceConfigurationServiceNotification;
}
