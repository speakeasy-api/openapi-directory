/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Data Query feature enables you to perform SQL queries in your Zuora tenant. To learn how to get started with Data Query, see [Overview of Data Query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/A_Overview_of_Data_Query).
 *
 * @remarks
 *
 */
export class DataQueries {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Cancel a data query job
   *
   * @remarks
   * Cancels a [data query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query) job, which prevents Zuora from performing the query. This operation is only applicable if the status of the query job is `accepted` or `in_progress`.
   *
   */
  deleteDataQueryJob(
    req: operations.DELETEDataQueryJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DELETEDataQueryJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DELETEDataQueryJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/query/jobs/{job-id}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DELETEDataQueryJobResponse =
        new operations.DELETEDataQueryJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.deleteDataQueryJobResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteDataQueryJobResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.dataQueryErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.DataQueryErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a data query job
   *
   * @remarks
   * Retrieves a [data query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query) job. You can use this operation to track the status of the query job and obtain the URL of the query results.
   *
   * If you are an administrator, you can retrieve every query job in your tenant.
   *
   * If you are a non-admin user and try to retrieve a query job that you are not the owner of, you will get a 403 response indicating that you are forbidden from viewing this job. As a non-admin user, you can only retrieve your own query job.
   *
   */
  getDataQueryJob(
    req: operations.GETDataQueryJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETDataQueryJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETDataQueryJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/query/jobs/{job-id}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETDataQueryJobResponse =
        new operations.GETDataQueryJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getDataQueryJobResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDataQueryJobResponse
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.dataQueryErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.DataQueryErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List data query jobs
   *
   * @remarks
   * Returns a list of [data query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query) jobs that have been created in your Zuora tenant. You can filter the list by status.
   *
   * If you are an administrator, you can retrieve all the query jobs in your tenant. Otherwise, you can only retrieve your own query jobs.
   *
   */
  getDataQueryJobs(
    req: operations.GETDataQueryJobsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETDataQueryJobsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETDataQueryJobsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/query/jobs";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETDataQueryJobsResponse =
        new operations.GETDataQueryJobsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getDataQueryJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDataQueryJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit a data query
   *
   * @remarks
   * Submits a [data query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query) to be performed by Zuora and creates a query job. You can use [Retrieve a data query job](#operation/GET_DataQueryJob) to track the status of the query job and obtain the URL of the query results.
   *
   */
  postDataQueryJob(
    req: operations.POSTDataQueryJobRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTDataQueryJobResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTDataQueryJobRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/query/jobs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "submitDataQueryRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTDataQueryJobResponse =
        new operations.POSTDataQueryJobResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.submitDataQueryResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubmitDataQueryResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.dataQueryErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.DataQueryErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
