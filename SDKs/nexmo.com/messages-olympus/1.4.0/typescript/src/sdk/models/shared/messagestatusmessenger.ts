/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The channel sending to.
 */
export enum MessageStatusMessengerChannelEnum {
  Messenger = "messenger",
}

/**
 * If the message encountered a problem a descriptive error will be supplied in this object.
 */
export class MessageStatusMessengerError extends SpeakeasyBase {
  /**
   * Text describing the error. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detail" })
  detail?: string;

  /**
   * The record id of this error's occurrence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instance" })
  instance?: string;

  /**
   * The error code encountered when sending the message. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The type of error encountered, follow URL for more details
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export enum MessageStatusMessengerStatusEnum {
  Submitted = "submitted",
  Delivered = "delivered",
  Rejected = "rejected",
  Undeliverable = "undeliverable",
  Read = "read",
}

/**
 * The charge currency in ISO 4217 format.
 */
export enum MessageStatusMessengerUsageCurrencyEnum {
  Eur = "EUR",
}

export class MessageStatusMessengerUsage extends SpeakeasyBase {
  /**
   * The charge currency in ISO 4217 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: MessageStatusMessengerUsageCurrencyEnum;

  /**
   * The charge amount as a stringified number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: string;
}

/**
 * Messenger
 */
export class MessageStatusMessenger extends SpeakeasyBase {
  /**
   * The channel sending to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  channel: MessageStatusMessengerChannelEnum;

  /**
   * Client reference of up to 100 characters. The reference will be present in every message status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_ref" })
  clientRef?: string;

  /**
   * If the message encountered a problem a descriptive error will be supplied in this object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => MessageStatusMessengerError)
  error?: MessageStatusMessengerError;

  /**
   * The ID of the message sender
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from: string;

  /**
   * The UUID of the message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_uuid" })
  messageUuid: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: MessageStatusMessengerStatusEnum;

  /**
   * The datetime of when the event occurred, in `ISO 8601` format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp: string;

  /**
   * The ID of the message recipient
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to: string;

  @SpeakeasyMetadata()
  @Expose({ name: "usage" })
  @Type(() => MessageStatusMessengerUsage)
  usage?: MessageStatusMessengerUsage;
}
