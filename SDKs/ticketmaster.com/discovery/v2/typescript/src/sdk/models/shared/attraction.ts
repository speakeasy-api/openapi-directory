/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Classification } from "./classification";
import { ExternalLink } from "./externallink";
import { Image } from "./image";

/**
 * Type of the entity
 */
export enum AttractionTypeEnum {
  Event = "event",
  Venue = "venue",
  Attraction = "attraction",
}

/**
 * Attraction
 */
export class Attraction extends SpeakeasyBase {
  /**
   * Additional information of the entity
   */
  @SpeakeasyMetadata()
  additionalInfo?: string;

  /**
   * Attraction's classifications
   */
  @SpeakeasyMetadata({ elemType: Classification })
  classifications?: Classification[];

  /**
   * Description's of the entity
   */
  @SpeakeasyMetadata()
  description?: string;

  /**
   * List of external links
   */
  @SpeakeasyMetadata({ elemType: ExternalLink, elemDepth: 2 })
  externalLinks?: Record<string, ExternalLink[]>;

  /**
   * Unique id of the entity in the discovery API
   */
  @SpeakeasyMetadata()
  id: string;

  /**
   * Images of the entity
   */
  @SpeakeasyMetadata({ elemType: Image })
  images?: Image[];

  /**
   * Locale in which the content is returned
   */
  @SpeakeasyMetadata()
  locale?: string;

  /**
   * Name of the entity
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Indicate if this is a test entity, by default test entities won't appear in discovery API
   */
  @SpeakeasyMetadata()
  test?: boolean;

  /**
   * Type of the entity
   */
  @SpeakeasyMetadata()
  type: AttractionTypeEnum;

  /**
   * number of upcoming events
   */
  @SpeakeasyMetadata()
  upcomingEvents?: Record<string, number>;

  /**
   * URL of a web site detail page of the entity
   */
  @SpeakeasyMetadata()
  url?: string;
}
