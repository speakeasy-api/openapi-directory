// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserAPITokensDeleteSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type UserAPITokensDeleteRequest struct {
	// The unique ID (UUID) of the api token
	APITokenID string `pathParam:"style=simple,explode=false,name=api_token_id"`
}

type UserAPITokensDelete404ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumConflict            UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumNotFound            UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensDelete404ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensDelete404ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UserAPITokensDelete404ApplicationJSONErrorCodeEnum) ToPointer() *UserAPITokensDelete404ApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UserAPITokensDelete404ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensDelete404ApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensDelete404ApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UserAPITokensDelete404ApplicationJSONError struct {
	Code    UserAPITokensDelete404ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// UserAPITokensDelete404ApplicationJSON - NotFound
type UserAPITokensDelete404ApplicationJSON struct {
	Error UserAPITokensDelete404ApplicationJSONError `json:"error"`
}

type UserAPITokensDelete401ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumConflict            UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumNotFound            UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensDelete401ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensDelete401ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UserAPITokensDelete401ApplicationJSONErrorCodeEnum) ToPointer() *UserAPITokensDelete401ApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UserAPITokensDelete401ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensDelete401ApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensDelete401ApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UserAPITokensDelete401ApplicationJSONError struct {
	Code    UserAPITokensDelete401ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// UserAPITokensDelete401ApplicationJSON - Unauthorized
type UserAPITokensDelete401ApplicationJSON struct {
	Error UserAPITokensDelete401ApplicationJSONError `json:"error"`
}

type UserAPITokensDelete400ApplicationJSONErrorCodeEnum string

const (
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumBadRequest          UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "BadRequest"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumConflict            UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "Conflict"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumNotAcceptable       UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "NotAcceptable"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumNotFound            UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "NotFound"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumInternalServerError UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "InternalServerError"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumUnauthorized        UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "Unauthorized"
	UserAPITokensDelete400ApplicationJSONErrorCodeEnumTooManyRequests     UserAPITokensDelete400ApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e UserAPITokensDelete400ApplicationJSONErrorCodeEnum) ToPointer() *UserAPITokensDelete400ApplicationJSONErrorCodeEnum {
	return &e
}

func (e *UserAPITokensDelete400ApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = UserAPITokensDelete400ApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPITokensDelete400ApplicationJSONErrorCodeEnum: %v", v)
	}
}

type UserAPITokensDelete400ApplicationJSONError struct {
	Code    UserAPITokensDelete400ApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                             `json:"message"`
}

// UserAPITokensDelete400ApplicationJSON - Error
type UserAPITokensDelete400ApplicationJSON struct {
	Error UserAPITokensDelete400ApplicationJSONError `json:"error"`
}

type UserAPITokensDeleteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	UserAPITokensDelete400ApplicationJSONObject *UserAPITokensDelete400ApplicationJSON
	// Unauthorized
	UserAPITokensDelete401ApplicationJSONObject *UserAPITokensDelete401ApplicationJSON
	// NotFound
	UserAPITokensDelete404ApplicationJSONObject *UserAPITokensDelete404ApplicationJSON
}
