/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ExperimentVariations {
    /**
     * The name of the variation. This field is required when creating an experiment. This field may not be changed for an experiment whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ExperimentVariations withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Status of the variation. Possible values: "ACTIVE", "INACTIVE". INACTIVE variations are not served. This field may not be changed for an experiment whose status is ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ExperimentVariations withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URL of the variation. This field may not be changed for an experiment whose status is RUNNING or ENDED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public ExperimentVariations withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Weight that this variation should receive. Only present if the experiment is running. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public Double weight;
    public ExperimentVariations withWeight(Double weight) {
        this.weight = weight;
        return this;
    }
    
    /**
     * True if the experiment has ended and this variation performed (statistically) significantly better than the original. This field is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("won")
    public Boolean won;
    public ExperimentVariations withWon(Boolean won) {
        this.won = won;
        return this;
    }
    
}
