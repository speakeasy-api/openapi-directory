"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import datetimezone as shared_datetimezone
from ..shared import duration as shared_duration
from ..shared import locale as shared_locale
from ..shared import localtimezonerestriction as shared_localtimezonerestriction
from ..shared import timezone as shared_timezone
from ..shared import zoneid as shared_zoneid
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AccountBrandEnum(str, Enum):
    r"""~"""
    EZTEXTING = 'EZTEXTING'
    CLUBTEXTING = 'CLUBTEXTING'
    GROUPTEXTING = 'GROUPTEXTING'
    TELLMYCELL = 'TELLMYCELL'
    EZ = 'EZ'
    CALLFIRE = 'CALLFIRE'
    TESLA = 'TESLA'

class AccountCountryEnum(str, Enum):
    r"""~"""
    US = 'US'
    CA = 'CA'

class AccountCountryOrDefaultEnum(str, Enum):
    r"""~"""
    US = 'US'
    CA = 'CA'

class AccountEntityTypeEnum(str, Enum):
    r"""~"""
    SP = 'SP'
    COMPANY = 'COMPANY'

class AccountIndustryEnum(str, Enum):
    r"""~"""
    UNKNOWN = 'UNKNOWN'
    ADVERTISING = 'ADVERTISING'
    AUTOMOTIVE = 'AUTOMOTIVE'
    COLLECTIONS = 'COLLECTIONS'
    CONSULTING = 'CONSULTING'
    DECLINE = 'DECLINE'
    EDUCATION = 'EDUCATION'
    EMERGENCY = 'EMERGENCY'
    ENTERTAINMENT = 'ENTERTAINMENT'
    FINANCE = 'FINANCE'
    HOSPITALITY = 'HOSPITALITY'
    HEALTHFITNESS = 'HEALTHFITNESS'
    HEALTHCARE = 'HEALTHCARE'
    INSURANCE = 'INSURANCE'
    LEAD = 'LEAD'
    OTHER = 'OTHER'
    POLITICAL = 'POLITICAL'
    REAL_ESTATE = 'REAL_ESTATE'
    RETAIL = 'RETAIL'
    SEARCH_MARKETING = 'SEARCH_MARKETING'
    TELECOM = 'TELECOM'

class AccountReceiverPeriodTimeUnitEnum(str, Enum):
    r"""~"""
    NANOSECONDS = 'NANOSECONDS'
    MICROSECONDS = 'MICROSECONDS'
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'
    MINUTES = 'MINUTES'
    HOURS = 'HOURS'
    DAYS = 'DAYS'

class AccountStatusEnum(str, Enum):
    r"""~"""
    ACTIVE = 'ACTIVE'
    PENDING_CANCELLED = 'PENDING_CANCELLED'
    CANCELLED = 'CANCELLED'
    ARCHIVED = 'ARCHIVED'

class AccountTrustLevelEnum(str, Enum):
    r"""~"""
    LOCKED = 'LOCKED'
    SUSPENDED = 'SUSPENDED'
    PROBATION = 'PROBATION'
    NORMAL = 'NORMAL'
    TRUSTED = 'TRUSTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account:
    r"""Object represents user account in Callfire system"""
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""~"""  
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""~"""  
    age: Optional[shared_duration.Duration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('age'), 'exclude': lambda f: f is None }})
    r"""~"""  
    agency_managed_accounts: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agencyManagedAccounts'), 'exclude': lambda f: f is None }})
    r"""~"""  
    allowed_to_create_campaign: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedToCreateCampaign'), 'exclude': lambda f: f is None }})
    r"""~"""  
    api_call_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiCallLimit'), 'exclude': lambda f: f is None }})
    r"""~"""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""~"""  
    auto_add_do_not_contact: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoAddDoNotContact'), 'exclude': lambda f: f is None }})
    r"""~"""  
    brand: Optional[AccountBrandEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""~"""  
    canceled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled'), 'exclude': lambda f: f is None }})
    r"""~"""  
    canceled_or_archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceledOrArchived'), 'exclude': lambda f: f is None }})
    r"""~"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""~"""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})
    r"""~"""  
    country: Optional[AccountCountryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""~"""  
    country_or_default: Optional[AccountCountryOrDefaultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryOrDefault'), 'exclude': lambda f: f is None }})
    r"""~"""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""~"""  
    date_time_zone: Optional[shared_datetimezone.DateTimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTimeZone'), 'exclude': lambda f: f is None }})
    r"""~"""  
    default_notification_ttl_millis: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultNotificationTtlMillis'), 'exclude': lambda f: f is None }})
    r"""~"""  
    default_number_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultNumberId'), 'exclude': lambda f: f is None }})
    r"""~"""  
    ein: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ein'), 'exclude': lambda f: f is None }})
    r"""~"""  
    entity_type: Optional[AccountEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityType'), 'exclude': lambda f: f is None }})
    r"""~"""  
    ez: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ez'), 'exclude': lambda f: f is None }})
    r"""~"""  
    failed_verification_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedVerificationAttempts'), 'exclude': lambda f: f is None }})
    r"""~"""  
    from_number_pool: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromNumberPool'), 'exclude': lambda f: f is None }})
    r"""~"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""An id of an account"""  
    industry: Optional[AccountIndustryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('industry'), 'exclude': lambda f: f is None }})
    r"""~"""  
    industry_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('industryName'), 'exclude': lambda f: f is None }})
    r"""~"""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""~"""  
    locale: Optional[shared_locale.Locale] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""~"""  
    local_time_zone_restriction: Optional[shared_localtimezonerestriction.LocalTimeZoneRestriction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localTimeZoneRestriction'), 'exclude': lambda f: f is None }})
    r"""~"""  
    max_agents: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxAgents'), 'exclude': lambda f: f is None }})
    r"""~"""  
    message_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageClass'), 'exclude': lambda f: f is None }})
    r"""~"""  
    message_flows: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageFlows'), 'exclude': lambda f: f is None }})
    r"""~"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name associated with an account"""  
    outbound_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outboundThreshold'), 'exclude': lambda f: f is None }})
    r"""~"""  
    receiver_period_call: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverPeriodCall'), 'exclude': lambda f: f is None }})
    r"""~"""  
    receiver_period_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverPeriodEnabled'), 'exclude': lambda f: f is None }})
    r"""~"""  
    receiver_period_global: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverPeriodGlobal'), 'exclude': lambda f: f is None }})
    r"""~"""  
    receiver_period_text: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverPeriodText'), 'exclude': lambda f: f is None }})
    r"""~"""  
    receiver_period_time_unit: Optional[AccountReceiverPeriodTimeUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiverPeriodTimeUnit'), 'exclude': lambda f: f is None }})
    r"""~"""  
    retain_only_metadata: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retainOnlyMetadata'), 'exclude': lambda f: f is None }})
    r"""~"""  
    retain_only_metadata_last_detail_record_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retainOnlyMetadataLastDetailRecordId'), 'exclude': lambda f: f is None }})
    r"""~"""  
    retain_only_metadata_last_modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retainOnlyMetadataLastModified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""~"""  
    scrub: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scrub'), 'exclude': lambda f: f is None }})
    r"""~"""  
    shared_short_code_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedShortCodeAllowed'), 'exclude': lambda f: f is None }})
    r"""~"""  
    shared_short_code_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedShortCodeId'), 'exclude': lambda f: f is None }})
    r"""~"""  
    soa_account: Optional[Account] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('soaAccount'), 'exclude': lambda f: f is None }})
    r"""Object represents user account in Callfire system"""  
    start_capable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startCapable'), 'exclude': lambda f: f is None }})
    r"""~"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""~"""  
    status: Optional[AccountStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""~"""  
    text_outbound_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textOutboundThreshold'), 'exclude': lambda f: f is None }})
    r"""~"""  
    time_zone: Optional[shared_timezone.TimeZone] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }})
    r"""~"""  
    time_zone_id: Optional[shared_zoneid.ZoneID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZoneId'), 'exclude': lambda f: f is None }})
    r"""~"""  
    trust_level: Optional[AccountTrustLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trustLevel'), 'exclude': lambda f: f is None }})
    r"""~"""  
    tsr_agreement: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tsrAgreement'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""~"""  
    tsr_initials: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tsrInitials'), 'exclude': lambda f: f is None }})
    r"""~"""  
    ui_context: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uiContext'), 'exclude': lambda f: f is None }})
    r"""~"""  
    universal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('universal'), 'exclude': lambda f: f is None }})
    r"""~"""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})
    r"""~"""  
    zipcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zipcode'), 'exclude': lambda f: f is None }})
    r"""~"""  
    