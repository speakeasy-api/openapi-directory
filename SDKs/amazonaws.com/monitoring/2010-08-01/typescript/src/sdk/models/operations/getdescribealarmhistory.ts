/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GETDescribeAlarmHistoryActionEnum {
  DescribeAlarmHistory = "DescribeAlarmHistory",
}

/**
 * The type of alarm histories to retrieve.
 */
export enum GETDescribeAlarmHistoryHistoryItemTypeEnum {
  ConfigurationUpdate = "ConfigurationUpdate",
  StateUpdate = "StateUpdate",
  Action = "Action",
}

/**
 * Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first.
 */
export enum GETDescribeAlarmHistoryScanByEnum {
  TimestampDescending = "TimestampDescending",
  TimestampAscending = "TimestampAscending",
}

export enum GETDescribeAlarmHistoryVersionEnum {
  TwoThousandAndTen0801 = "2010-08-01",
}

export class GETDescribeAlarmHistoryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETDescribeAlarmHistoryActionEnum;

  /**
   * The name of the alarm.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AlarmName",
  })
  alarmName?: string;

  /**
   * Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AlarmTypes",
  })
  alarmTypes?: shared.AlarmTypeEnum[];

  /**
   * The ending date to retrieve alarm history.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EndDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  endDate?: Date;

  /**
   * The type of alarm histories to retrieve.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=HistoryItemType",
  })
  historyItemType?: GETDescribeAlarmHistoryHistoryItemTypeEnum;

  /**
   * The maximum number of alarm history records to retrieve.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MaxRecords",
  })
  maxRecords?: number;

  /**
   * The token returned by a previous call to indicate that there is more data available.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  /**
   * Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ScanBy",
  })
  scanBy?: GETDescribeAlarmHistoryScanByEnum;

  /**
   * The starting date to retrieve alarm history.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=StartDate;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  startDate?: Date;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETDescribeAlarmHistoryVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETDescribeAlarmHistoryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
