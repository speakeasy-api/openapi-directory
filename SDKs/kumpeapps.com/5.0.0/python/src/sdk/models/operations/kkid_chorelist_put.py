"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import four_hundred_and_five as shared_four_hundred_and_five
from ..shared import four_hundred_and_twelve as shared_four_hundred_and_twelve
from ..shared import nodata as shared_nodata
from ..shared import success as shared_success
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class KkidChorelistPutSecurity:
    
    auth_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-Auth' }})  
    
class KkidChorelistPutWhereDayEnum(str, Enum):
    r"""Where day equals..."""
    SUNDAY = 'Sunday'
    MONDAY = 'Monday'
    TUESDAY = 'Tuesday'
    WEDNESDAY = 'Wednesday'
    THURSDAY = 'Thursday'
    FRIDAY = 'Friday'
    SATURDAY = 'Saturday'
    WEEKLY = 'Weekly'
    TODAY = 'Today'


@dataclasses.dataclass
class KkidChorelistPutRequest:
    
    id_chore_list: int = dataclasses.field(metadata={'query_param': { 'field_name': 'idChoreList', 'style': 'form', 'explode': True }})
    r"""id number of chore you wish to update"""  
    altitude: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'altitude', 'style': 'form', 'explode': True }})
    r"""GPS altitude of where the chore was marked"""  
    latitude: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latitude', 'style': 'form', 'explode': True }})
    r"""GPS latitude of where the chore was marked"""  
    longitude: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'longitude', 'style': 'form', 'explode': True }})
    r"""GPS longitude of where the chore was marked"""  
    nfc_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nfcTag', 'style': 'form', 'explode': True }})
    r"""text field of NFC tag that is required to be scanned to check off this chore (normally null)"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'notes', 'style': 'form', 'explode': True }})
    r"""notes field for chore"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""new status of chore"""  
    stolen: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stolen', 'style': 'form', 'explode': True }})
    r"""mark chore as stolen by sibling"""  
    stolen_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stolenBy', 'style': 'form', 'explode': True }})
    r"""username of sibling that stole the chore (required if stolen is true)"""  
    updated_by_automation: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedByAutomation', 'style': 'form', 'explode': True }})
    r"""true if updated via API by automation system"""  
    where_day: Optional[KkidChorelistPutWhereDayEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'whereDay', 'style': 'form', 'explode': True }})
    r"""Where day equals..."""  
    where_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'whereName', 'style': 'form', 'explode': True }})
    r"""Where chore name equals..."""  
    where_status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'whereStatus', 'style': 'form', 'explode': True }})
    r"""Where status equals..."""  
    

@dataclasses.dataclass
class KkidChorelistPutResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_and_five: Optional[shared_four_hundred_and_five.FourHundredAndFive] = dataclasses.field(default=None)
    r"""Method Not Allowed- API user does not have access to use this method"""  
    four_hundred_and_twelve: Optional[shared_four_hundred_and_twelve.FourHundredAndTwelve] = dataclasses.field(default=None)
    r"""API Access Denied! Your API key is invalid, expired, or not supplied!"""  
    nodata: Optional[shared_nodata.Nodata] = dataclasses.field(default=None)
    r"""No Data Found."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    success: Optional[shared_success.Success] = dataclasses.field(default=None)
    r"""search results matching criteria"""  
    