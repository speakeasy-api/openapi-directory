"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batch = exports.BatchBatchStatusEnum = exports.BatchLabelLayoutEnum = exports.BatchLabelFormatEnum = exports.BatchLabelDownload = exports.BatchOptionalLink = void 0;
var utils_1 = require("../../../internal/utils");
var optionallink_1 = require("./optionallink");
var class_transformer_1 = require("class-transformer");
/**
 * A link to a related resource, or an empty object if there is no resource to link to
 */
var BatchOptionalLink = /** @class */ (function (_super) {
    __extends(BatchOptionalLink, _super);
    function BatchOptionalLink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "href" }),
        __metadata("design:type", String)
    ], BatchOptionalLink.prototype, "href", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], BatchOptionalLink.prototype, "type", void 0);
    return BatchOptionalLink;
}(utils_1.SpeakeasyBase));
exports.BatchOptionalLink = BatchOptionalLink;
/**
 * Reference to the various downloadable file formats for the generated label
 *
 * @remarks
 *
 */
var BatchLabelDownload = /** @class */ (function (_super) {
    __extends(BatchLabelDownload, _super);
    function BatchLabelDownload() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "href" }),
        __metadata("design:type", String)
    ], BatchLabelDownload.prototype, "href", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pdf" }),
        __metadata("design:type", String)
    ], BatchLabelDownload.prototype, "pdf", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "png" }),
        __metadata("design:type", String)
    ], BatchLabelDownload.prototype, "png", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zpl" }),
        __metadata("design:type", String)
    ], BatchLabelDownload.prototype, "zpl", void 0);
    return BatchLabelDownload;
}(utils_1.SpeakeasyBase));
exports.BatchLabelDownload = BatchLabelDownload;
/**
 * The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
 *
 * @remarks
 *
 * |Label Format  | Supported Carriers
 * |--------------|-----------------------------------
 * |`pdf`         | All carriers
 * |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
 * |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
 *
 */
var BatchLabelFormatEnum;
(function (BatchLabelFormatEnum) {
    BatchLabelFormatEnum["Pdf"] = "pdf";
    BatchLabelFormatEnum["Png"] = "png";
    BatchLabelFormatEnum["Zpl"] = "zpl";
})(BatchLabelFormatEnum = exports.BatchLabelFormatEnum || (exports.BatchLabelFormatEnum = {}));
/**
 * The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
 *
 * @remarks
 *
 */
var BatchLabelLayoutEnum;
(function (BatchLabelLayoutEnum) {
    BatchLabelLayoutEnum["Fourx6"] = "4x6";
    BatchLabelLayoutEnum["Letter"] = "letter";
})(BatchLabelLayoutEnum = exports.BatchLabelLayoutEnum || (exports.BatchLabelLayoutEnum = {}));
/**
 * The possible batch status values
 */
var BatchBatchStatusEnum;
(function (BatchBatchStatusEnum) {
    BatchBatchStatusEnum["Open"] = "open";
    BatchBatchStatusEnum["Queued"] = "queued";
    BatchBatchStatusEnum["Processing"] = "processing";
    BatchBatchStatusEnum["Completed"] = "completed";
    BatchBatchStatusEnum["CompletedWithErrors"] = "completed_with_errors";
    BatchBatchStatusEnum["Archived"] = "archived";
    BatchBatchStatusEnum["Notifying"] = "notifying";
    BatchBatchStatusEnum["Invalid"] = "invalid";
})(BatchBatchStatusEnum = exports.BatchBatchStatusEnum || (exports.BatchBatchStatusEnum = {}));
/**
 * Batches are an advanced feature of ShipEngine designed for users who need to generate hundreds or
 *
 * @remarks
 * thousands of labels at a time.
 *
 */
var Batch = /** @class */ (function (_super) {
    __extends(Batch, _super);
    function Batch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_errors_url" }),
        (0, class_transformer_1.Type)(function () { return BatchOptionalLink; }),
        __metadata("design:type", BatchOptionalLink)
    ], Batch.prototype, "batchErrorsUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_id" }),
        __metadata("design:type", String)
    ], Batch.prototype, "batchId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_labels_url" }),
        (0, class_transformer_1.Type)(function () { return optionallink_1.OptionalLink; }),
        __metadata("design:type", optionallink_1.OptionalLink)
    ], Batch.prototype, "batchLabelsUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_notes" }),
        __metadata("design:type", String)
    ], Batch.prototype, "batchNotes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_number" }),
        __metadata("design:type", String)
    ], Batch.prototype, "batchNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "batch_shipments_url" }),
        (0, class_transformer_1.Type)(function () { return optionallink_1.OptionalLink; }),
        __metadata("design:type", optionallink_1.OptionalLink)
    ], Batch.prototype, "batchShipmentsUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "completed" }),
        __metadata("design:type", Number)
    ], Batch.prototype, "completed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "count" }),
        __metadata("design:type", Number)
    ], Batch.prototype, "count", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Batch.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "errors" }),
        __metadata("design:type", Number)
    ], Batch.prototype, "errors", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "external_batch_id" }),
        __metadata("design:type", String)
    ], Batch.prototype, "externalBatchId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "form_download" }),
        (0, class_transformer_1.Type)(function () { return BatchOptionalLink; }),
        __metadata("design:type", BatchOptionalLink)
    ], Batch.prototype, "formDownload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "forms" }),
        __metadata("design:type", Number)
    ], Batch.prototype, "forms", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label_download" }),
        (0, class_transformer_1.Type)(function () { return BatchLabelDownload; }),
        __metadata("design:type", BatchLabelDownload)
    ], Batch.prototype, "labelDownload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label_format" }),
        __metadata("design:type", String)
    ], Batch.prototype, "labelFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label_layout" }),
        __metadata("design:type", String)
    ], Batch.prototype, "labelLayout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "processed_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Batch.prototype, "processedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Batch.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "warnings" }),
        __metadata("design:type", Number)
    ], Batch.prototype, "warnings", void 0);
    return Batch;
}(utils_1.SpeakeasyBase));
exports.Batch = Batch;
