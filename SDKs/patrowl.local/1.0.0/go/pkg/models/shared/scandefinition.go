// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScanDefinitionAssetsCriticityEnum string

const (
	ScanDefinitionAssetsCriticityEnumLow    ScanDefinitionAssetsCriticityEnum = "low"
	ScanDefinitionAssetsCriticityEnumMedium ScanDefinitionAssetsCriticityEnum = "medium"
	ScanDefinitionAssetsCriticityEnumHigh   ScanDefinitionAssetsCriticityEnum = "high"
)

func (e ScanDefinitionAssetsCriticityEnum) ToPointer() *ScanDefinitionAssetsCriticityEnum {
	return &e
}

func (e *ScanDefinitionAssetsCriticityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = ScanDefinitionAssetsCriticityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanDefinitionAssetsCriticityEnum: %v", v)
	}
}

type ScanDefinitionAssetsDatatypeEnum string

const (
	ScanDefinitionAssetsDatatypeEnumIP           ScanDefinitionAssetsDatatypeEnum = "ip"
	ScanDefinitionAssetsDatatypeEnumIPRange      ScanDefinitionAssetsDatatypeEnum = "ip-range"
	ScanDefinitionAssetsDatatypeEnumIPSubnet     ScanDefinitionAssetsDatatypeEnum = "ip-subnet"
	ScanDefinitionAssetsDatatypeEnumFqdn         ScanDefinitionAssetsDatatypeEnum = "fqdn"
	ScanDefinitionAssetsDatatypeEnumDomain       ScanDefinitionAssetsDatatypeEnum = "domain"
	ScanDefinitionAssetsDatatypeEnumURL          ScanDefinitionAssetsDatatypeEnum = "url"
	ScanDefinitionAssetsDatatypeEnumKeyword      ScanDefinitionAssetsDatatypeEnum = "keyword"
	ScanDefinitionAssetsDatatypeEnumPerson       ScanDefinitionAssetsDatatypeEnum = "person"
	ScanDefinitionAssetsDatatypeEnumOrganisation ScanDefinitionAssetsDatatypeEnum = "organisation"
	ScanDefinitionAssetsDatatypeEnumPath         ScanDefinitionAssetsDatatypeEnum = "path"
	ScanDefinitionAssetsDatatypeEnumApplication  ScanDefinitionAssetsDatatypeEnum = "application"
)

func (e ScanDefinitionAssetsDatatypeEnum) ToPointer() *ScanDefinitionAssetsDatatypeEnum {
	return &e
}

func (e *ScanDefinitionAssetsDatatypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip":
		fallthrough
	case "ip-range":
		fallthrough
	case "ip-subnet":
		fallthrough
	case "fqdn":
		fallthrough
	case "domain":
		fallthrough
	case "url":
		fallthrough
	case "keyword":
		fallthrough
	case "person":
		fallthrough
	case "organisation":
		fallthrough
	case "path":
		fallthrough
	case "application":
		*e = ScanDefinitionAssetsDatatypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScanDefinitionAssetsDatatypeEnum: %v", v)
	}
}

type ScanDefinitionAssets struct {
	Criticity *ScanDefinitionAssetsCriticityEnum `json:"criticity,omitempty"`
	Datatype  *ScanDefinitionAssetsDatatypeEnum  `json:"datatype,omitempty"`
	ID        *string                            `json:"id,omitempty"`
	Value     *string                            `json:"value,omitempty"`
}

type ScanDefinition struct {
	Assets  []ScanDefinitionAssets `json:"assets,omitempty"`
	Options map[string]interface{} `json:"options,omitempty"`
	ScanID  *int64                 `json:"scan_id,omitempty"`
}
