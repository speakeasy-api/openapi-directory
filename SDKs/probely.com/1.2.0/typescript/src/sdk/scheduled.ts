/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * You can schedule scans for the future as a one off, or on a recurring
 *
 * @remarks
 * basis.
 *
 */
export class Scheduled {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete
   */
  deleteTargetsTargetIdScheduledscansId(
    req: operations.DeleteTargetsTargetIdScheduledscansIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTargetsTargetIdScheduledscansIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTargetsTargetIdScheduledscansIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/{id}/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTargetsTargetIdScheduledscansIdResponse =
        new operations.DeleteTargetsTargetIdScheduledscansIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTargetsTargetIdScheduledscansId401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteTargetsTargetIdScheduledscansId401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTargetsTargetIdScheduledscansId403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteTargetsTargetIdScheduledscansId403ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List scheduled scans for all targets expanding recurrence
   */
  getTargetsAllScheduledscansExpanded(
    req: operations.GetTargetsAllScheduledscansExpandedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsAllScheduledscansExpandedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsAllScheduledscansExpandedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/targets/all/scheduledscans/expanded/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsAllScheduledscansExpandedResponse =
        new operations.GetTargetsAllScheduledscansExpandedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllScheduledscansExpanded200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllScheduledscansExpanded200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsAllScheduledscansExpanded404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsAllScheduledscansExpanded404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List scheduled scans
   */
  getTargetsTargetIdScheduledscans(
    req: operations.GetTargetsTargetIdScheduledscansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScheduledscansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScheduledscansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScheduledscansResponse =
        new operations.GetTargetsTargetIdScheduledscansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscans200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscans200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscans401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscans401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscans404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscans404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List scheduled scans expanding recurrence
   */
  getTargetsTargetIdScheduledscansExpanded(
    req: operations.GetTargetsTargetIdScheduledscansExpandedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScheduledscansExpandedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScheduledscansExpandedRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/expanded/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScheduledscansExpandedResponse =
        new operations.GetTargetsTargetIdScheduledscansExpandedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscansExpanded200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscansExpanded200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscansExpanded404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscansExpanded404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a scheduled scan
   */
  getTargetsTargetIdScheduledscansId(
    req: operations.GetTargetsTargetIdScheduledscansIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTargetsTargetIdScheduledscansIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTargetsTargetIdScheduledscansIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/{id}/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTargetsTargetIdScheduledscansIdResponse =
        new operations.GetTargetsTargetIdScheduledscansIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scheduled = utils.objectToClass(
              httpRes?.data,
              shared.Scheduled
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscansId401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscansId401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTargetsTargetIdScheduledscansId404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTargetsTargetIdScheduledscansId404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partial update
   */
  patchTargetsTargetIdScheduledscansId(
    req: operations.PatchTargetsTargetIdScheduledscansIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchTargetsTargetIdScheduledscansIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchTargetsTargetIdScheduledscansIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/{id}/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchTargetsTargetIdScheduledscansIdResponse =
        new operations.PatchTargetsTargetIdScheduledscansIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scheduled = utils.objectToClass(
              httpRes?.data,
              shared.Scheduled
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdScheduledscansId400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdScheduledscansId400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdScheduledscansId401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdScheduledscansId401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdScheduledscansId403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdScheduledscansId403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchTargetsTargetIdScheduledscansId404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchTargetsTargetIdScheduledscansId404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create new scheduled scan
   */
  postTargetsTargetIdScheduledscans(
    req: operations.PostTargetsTargetIdScheduledscansRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostTargetsTargetIdScheduledscansResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostTargetsTargetIdScheduledscansRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostTargetsTargetIdScheduledscansResponse =
        new operations.PostTargetsTargetIdScheduledscansResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scheduled = utils.objectToClass(
              httpRes?.data,
              shared.Scheduled
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScheduledscans400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScheduledscans400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScheduledscans401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScheduledscans401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScheduledscans403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScheduledscans403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postTargetsTargetIdScheduledscans404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostTargetsTargetIdScheduledscans404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a scheduled scan
   */
  putTargetsTargetIdScheduledscansId(
    req: operations.PutTargetsTargetIdScheduledscansIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutTargetsTargetIdScheduledscansIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutTargetsTargetIdScheduledscansIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/targets/{target_id}/scheduledscans/{id}/",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutTargetsTargetIdScheduledscansIdResponse =
        new operations.PutTargetsTargetIdScheduledscansIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scheduled = utils.objectToClass(
              httpRes?.data,
              shared.Scheduled
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdScheduledscansId400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdScheduledscansId400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdScheduledscansId401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdScheduledscansId401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdScheduledscansId403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdScheduledscansId403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putTargetsTargetIdScheduledscansId404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PutTargetsTargetIdScheduledscansId404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
