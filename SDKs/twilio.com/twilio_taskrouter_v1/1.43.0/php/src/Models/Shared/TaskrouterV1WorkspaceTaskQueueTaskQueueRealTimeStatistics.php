<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics - OK
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics
{
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
     * 
     * @var ?string $accountSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountSid = null;
    
    /**
     * The number of current Workers by Activity.
     * 
     * @var ?array<mixed> $activityStatistics
     */
	#[\JMS\Serializer\Annotation\SerializedName('activity_statistics')]
    #[\JMS\Serializer\Annotation\Type('array<mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $activityStatistics = null;
    
    /**
     * The relative age in the TaskQueue for the longest waiting Task. Calculation is based on the time when the Task entered the TaskQueue.
     * 
     * @var ?int $longestRelativeTaskAgeInQueue
     */
	#[\JMS\Serializer\Annotation\SerializedName('longest_relative_task_age_in_queue')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $longestRelativeTaskAgeInQueue = null;
    
    /**
     * The Task SID of the Task waiting in the TaskQueue the longest. Calculation is based on the time when the Task entered the TaskQueue.
     * 
     * @var ?string $longestRelativeTaskSidInQueue
     */
	#[\JMS\Serializer\Annotation\SerializedName('longest_relative_task_sid_in_queue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $longestRelativeTaskSidInQueue = null;
    
    /**
     * The age of the longest waiting Task.
     * 
     * @var ?int $longestTaskWaitingAge
     */
	#[\JMS\Serializer\Annotation\SerializedName('longest_task_waiting_age')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $longestTaskWaitingAge = null;
    
    /**
     * The SID of the longest waiting Task.
     * 
     * @var ?string $longestTaskWaitingSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('longest_task_waiting_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $longestTaskWaitingSid = null;
    
    /**
     * The SID of the TaskQueue from which these statistics were calculated.
     * 
     * @var ?string $taskQueueSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('task_queue_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taskQueueSid = null;
    
    /**
     * The number of Tasks by priority. For example: `{"0": "10", "99": "5"}` shows 10 Tasks at priority 0 and 5 at priority 99.
     * 
     * @var mixed $tasksByPriority
     */
	#[\JMS\Serializer\Annotation\SerializedName('tasks_by_priority')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $tasksByPriority = null;
    
    /**
     * The number of Tasks by their current status. For example: `{"pending": "1", "reserved": "3", "assigned": "2", "completed": "5"}`.
     * 
     * @var mixed $tasksByStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('tasks_by_status')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $tasksByStatus = null;
    
    /**
     * The total number of Workers available for Tasks in the TaskQueue.
     * 
     * @var ?int $totalAvailableWorkers
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_available_workers')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalAvailableWorkers = null;
    
    /**
     * The total number of Workers eligible for Tasks in the TaskQueue, independent of their Activity state.
     * 
     * @var ?int $totalEligibleWorkers
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_eligible_workers')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalEligibleWorkers = null;
    
    /**
     * The total number of Tasks.
     * 
     * @var ?int $totalTasks
     */
	#[\JMS\Serializer\Annotation\SerializedName('total_tasks')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalTasks = null;
    
    /**
     * The absolute URL of the TaskQueue statistics resource.
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
    /**
     * The SID of the Workspace that contains the TaskQueue.
     * 
     * @var ?string $workspaceSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('workspace_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $workspaceSid = null;
    
	public function __construct()
	{
		$this->accountSid = null;
		$this->activityStatistics = null;
		$this->longestRelativeTaskAgeInQueue = null;
		$this->longestRelativeTaskSidInQueue = null;
		$this->longestTaskWaitingAge = null;
		$this->longestTaskWaitingSid = null;
		$this->taskQueueSid = null;
		$this->tasksByPriority = null;
		$this->tasksByStatus = null;
		$this->totalAvailableWorkers = null;
		$this->totalEligibleWorkers = null;
		$this->totalTasks = null;
		$this->url = null;
		$this->workspaceSid = null;
	}
}
