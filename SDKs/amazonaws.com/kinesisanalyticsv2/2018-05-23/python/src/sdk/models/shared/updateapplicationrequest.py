"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationconfigurationupdate as shared_applicationconfigurationupdate
from ..shared import cloudwatchloggingoptionupdate as shared_cloudwatchloggingoptionupdate
from ..shared import runconfigurationupdate as shared_runconfigurationupdate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateApplicationRequest:
    
    application_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationName') }})  
    application_configuration_update: Optional[shared_applicationconfigurationupdate.ApplicationConfigurationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationConfigurationUpdate'), 'exclude': lambda f: f is None }})  
    cloud_watch_logging_option_updates: Optional[list[shared_cloudwatchloggingoptionupdate.CloudWatchLoggingOptionUpdate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptionUpdates'), 'exclude': lambda f: f is None }})  
    conditional_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConditionalToken'), 'exclude': lambda f: f is None }})  
    current_application_version_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentApplicationVersionId'), 'exclude': lambda f: f is None }})  
    run_configuration_update: Optional[shared_runconfigurationupdate.RunConfigurationUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunConfigurationUpdate'), 'exclude': lambda f: f is None }})  
    service_execution_role_update: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceExecutionRoleUpdate'), 'exclude': lambda f: f is None }})  
    