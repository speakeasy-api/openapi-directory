"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyFantasyScoring:
    
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    fantasy_points: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPoints'), 'exclude': lambda f: f is None }})  
    fantasy_points_draft_kings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsDraftKings'), 'exclude': lambda f: f is None }})  
    fantasy_points_fan_duel: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFanDuel'), 'exclude': lambda f: f is None }})  
    fantasy_points_fantasy_draft: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsFantasyDraft'), 'exclude': lambda f: f is None }})  
    fantasy_points_ppr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsPPR'), 'exclude': lambda f: f is None }})  
    fantasy_points_yahoo: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FantasyPointsYahoo'), 'exclude': lambda f: f is None }})  
    has_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasStarted'), 'exclude': lambda f: f is None }})  
    is_in_progress: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsInProgress'), 'exclude': lambda f: f is None }})  
    is_over: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsOver'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    