/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateMerchantWebhookRequest {
    /**
     * Indicates if expired SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsExpiredCertificate")
    public Boolean acceptsExpiredCertificate;

    public UpdateMerchantWebhookRequest withAcceptsExpiredCertificate(Boolean acceptsExpiredCertificate) {
        this.acceptsExpiredCertificate = acceptsExpiredCertificate;
        return this;
    }
    
    /**
     * Indicates if self-signed SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsSelfSignedCertificate")
    public Boolean acceptsSelfSignedCertificate;

    public UpdateMerchantWebhookRequest withAcceptsSelfSignedCertificate(Boolean acceptsSelfSignedCertificate) {
        this.acceptsSelfSignedCertificate = acceptsSelfSignedCertificate;
        return this;
    }
    
    /**
     * Indicates if untrusted SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsUntrustedRootCertificate")
    public Boolean acceptsUntrustedRootCertificate;

    public UpdateMerchantWebhookRequest withAcceptsUntrustedRootCertificate(Boolean acceptsUntrustedRootCertificate) {
        this.acceptsUntrustedRootCertificate = acceptsUntrustedRootCertificate;
        return this;
    }
    
    /**
     * Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;

    public UpdateMerchantWebhookRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalSettings")
    public AdditionalSettings additionalSettings;

    public UpdateMerchantWebhookRequest withAdditionalSettings(AdditionalSettings additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }
    
    /**
     * Format or protocol for receiving webhooks. Possible values:
     * * **soap**
     * * **http**
     * * **json** 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("communicationFormat")
    public UpdateMerchantWebhookRequestCommunicationFormatEnum communicationFormat;

    public UpdateMerchantWebhookRequest withCommunicationFormat(UpdateMerchantWebhookRequestCommunicationFormatEnum communicationFormat) {
        this.communicationFormat = communicationFormat;
        return this;
    }
    
    /**
     * Your description for this webhook configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public UpdateMerchantWebhookRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Network type for Terminal API notification webhooks. Possible values:
     * * **public**
     * * **local**
     * 
     * Default Value: **public**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkType")
    public UpdateMerchantWebhookRequestNetworkTypeEnum networkType;

    public UpdateMerchantWebhookRequest withNetworkType(UpdateMerchantWebhookRequestNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Password to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public UpdateMerchantWebhookRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Indicates if the SOAP action header needs to be populated. Default value: **false**.
     * 
     * Only applies if `communicationFormat`: **soap**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populateSoapActionHeader")
    public Boolean populateSoapActionHeader;

    public UpdateMerchantWebhookRequest withPopulateSoapActionHeader(Boolean populateSoapActionHeader) {
        this.populateSoapActionHeader = populateSoapActionHeader;
        return this;
    }
    
    /**
     * SSL version to access the public webhook URL specified in the `url` field. Possible values:
     * * **TLSv1.3**
     * * **TLSv1.2**
     * * **HTTP** - Only allowed on Test environment.
     * 
     * If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslVersion")
    public UpdateMerchantWebhookRequestSslVersionEnum sslVersion;

    public UpdateMerchantWebhookRequest withSslVersion(UpdateMerchantWebhookRequestSslVersionEnum sslVersion) {
        this.sslVersion = sslVersion;
        return this;
    }
    
    /**
     * Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public UpdateMerchantWebhookRequest withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Username to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public UpdateMerchantWebhookRequest withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public UpdateMerchantWebhookRequest(){}
}
