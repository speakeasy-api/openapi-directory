"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import getinvoicetaxitemtype as shared_getinvoicetaxitemtype
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class InvoiceItemRevRecTriggerConditionEnum(str, Enum):
    r"""The date when revenue recognition is triggered.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """
    CONTRACT_EFFECTIVE_DATE = 'ContractEffectiveDate'
    SERVICE_ACTIVATION_DATE = 'ServiceActivationDate'
    CUSTOMER_ACCEPTANCE_DATE = 'CustomerAcceptanceDate'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvoiceItemTaxationItems:
    r"""Container for the taxation items of the invoice item."""
    
    data: Optional[list[shared_getinvoicetaxitemtype.GETInvoiceTaxItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""List of taxation items."""  
    next_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPage'), 'exclude': lambda f: f is None }})
    r"""URL to retrieve the next page of the response if it exists; otherwise absent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvoiceItem:
    r"""Container for custom fields of an Invoice Item object."""
    
    accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code associated with the invoice item."""  
    applied_to_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedToItemId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the invoice item that the discount charge is applied to."""  
    available_to_credit_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableToCreditAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the invoice item that is available to credit."""  
    balance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""The balance of the invoice item."""  
    booking_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingReference'), 'exclude': lambda f: f is None }})
    r"""The booking reference of the invoice item.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    charge_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the charge.
    
    This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.
    """  
    charge_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the charge."""  
    charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the charge."""  
    charge_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeName'), 'exclude': lambda f: f is None }})
    r"""The name of the charge."""  
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The deferred revenue accounting code associated with the invoice item.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the invoice item."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Item ID."""  
    integration_id_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationId__NS'), 'exclude': lambda f: f is None }})
    r"""ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    integration_status_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegrationStatus__NS'), 'exclude': lambda f: f is None }})
    r"""Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    item_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemType'), 'exclude': lambda f: f is None }})
    r"""The type of the invoice item.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productName'), 'exclude': lambda f: f is None }})
    r"""Name of the product associated with this item."""  
    product_rate_plan_charge_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productRatePlanChargeId'), 'exclude': lambda f: f is None }})
    r"""The ID of the product rate plan charge that the invoice item is created from.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    purchase_order_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNumber'), 'exclude': lambda f: f is None }})
    r"""The purchase order number associated with the invoice item.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The quantity of this item, in the configured unit of measure for the charge."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The recognized revenue accounting code associated with the invoice item.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The tevenue recognition rule of the invoice item.
    
    **Note:** This field is only available if you have Zuora Finance enabled.
    """  
    rev_rec_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revRecCode'), 'exclude': lambda f: f is None }})
    r"""The revenue recognition code.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    rev_rec_trigger_condition: Optional[InvoiceItemRevRecTriggerConditionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revRecTriggerCondition'), 'exclude': lambda f: f is None }})
    r"""The date when revenue recognition is triggered.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the service period for this item, i.e., the last day of the service period, as _yyyy-mm-dd_."""  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the service period for this item, as _yyyy-mm-dd_. For a one-time fee item, the date of the charge."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The SKU of the invoice item.
    
    **Note:** This field is only available if you have Unified Invoicing enabled.
    """  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription for this item."""  
    subscription_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionName'), 'exclude': lambda f: f is None }})
    r"""The name of the subscription for this item."""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Returns `true` if the request was processed successfully."""  
    sync_date_ns: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SyncDate__NS'), 'exclude': lambda f: f is None }})
    r"""Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265)."""  
    tax_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxAmount'), 'exclude': lambda f: f is None }})
    r"""Tax applied to the charge."""  
    taxation_items: Optional[InvoiceItemTaxationItems] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxationItems'), 'exclude': lambda f: f is None }})
    r"""Container for the taxation items of the invoice item."""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""The tax code of the invoice item.
    **Note** Only when taxation feature is enabled, this field can be presented.
    """  
    tax_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the invoice item.
    **Note** Only when taxation feature is enabled, this field can be presented.
    """  
    unit_of_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""Unit used to measure consumption."""  
    unit_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitPrice'), 'exclude': lambda f: f is None }})
    r"""The per-unit price of the invoice item."""  
    