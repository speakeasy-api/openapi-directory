"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MessageStatusMessengerChannelEnum(str, Enum):
    r"""The channel sending to."""
    MESSENGER = 'messenger'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusMessengerError:
    r"""If the message encountered a problem a descriptive error will be supplied in this object."""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Text describing the error. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors"""  
    instance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instance'), 'exclude': lambda f: f is None }})
    r"""The record id of this error's occurrence."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The error code encountered when sending the message. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of error encountered, follow URL for more details"""  
    
class MessageStatusMessengerStatusEnum(str, Enum):
    SUBMITTED = 'submitted'
    DELIVERED = 'delivered'
    REJECTED = 'rejected'
    UNDELIVERABLE = 'undeliverable'
    READ = 'read'

class MessageStatusMessengerUsageCurrencyEnum(str, Enum):
    r"""The charge currency in ISO 4217 format."""
    EUR = 'EUR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusMessengerUsage:
    
    currency: Optional[MessageStatusMessengerUsageCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The charge currency in ISO 4217 format."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The charge amount as a stringified number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusMessenger:
    r"""Messenger"""
    
    channel: MessageStatusMessengerChannelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel') }})
    r"""The channel sending to."""  
    from_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from') }})
    r"""The ID of the message sender"""  
    message_uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid') }})
    r"""The UUID of the message"""  
    status: MessageStatusMessengerStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    timestamp: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp') }})
    r"""The datetime of when the event occurred, in `ISO 8601` format."""  
    to: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to') }})
    r"""The ID of the message recipient"""  
    client_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ref'), 'exclude': lambda f: f is None }})
    r"""Client reference of up to 100 characters. The reference will be present in every message status."""  
    error: Optional[MessageStatusMessengerError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""If the message encountered a problem a descriptive error will be supplied in this object."""  
    usage: Optional[MessageStatusMessengerUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})  
    