/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * POSTAccountTypePaymentMethod - Container for custom fields of a payment method object.
 * 
 */
public class POSTAccountTypePaymentMethod {
    /**
     * ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BAID")
    public String baid;
    public POSTAccountTypePaymentMethod withBaid(String baid) {
        this.baid = baid;
        return this;
    }
    
    /**
     * The International Bank Account Number. This field is used to create the SEPA payment method.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IBAN")
    public String iban;
    public POSTAccountTypePaymentMethod withIban(String iban) {
        this.iban = iban;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountHolderInfo")
    public POSTAccountTypePaymentMethodAccountHolderInfo accountHolderInfo;
    public POSTAccountTypePaymentMethod withAccountHolderInfo(POSTAccountTypePaymentMethodAccountHolderInfo accountHolderInfo) {
        this.accountHolderInfo = accountHolderInfo;
        return this;
    }
    
    /**
     * Internal ID of the customer account that will own the payment method. 
     * 
     * To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountKey")
    public String accountKey;
    public POSTAccountTypePaymentMethod withAccountKey(String accountKey) {
        this.accountKey = accountKey;
        return this;
    }
    
    /**
     * The number of the customer's bank account. Use this field for direct debit payment methods.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    public String accountNumber;
    public POSTAccountTypePaymentMethod withAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    
    /**
     * First address line, 255 characters or less.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLine1")
    public String addressLine1;
    public POSTAccountTypePaymentMethod withAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
    }
    
    /**
     * Second address line, 255 characters or less.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLine2")
    public String addressLine2;
    public POSTAccountTypePaymentMethod withAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
    }
    
    /**
     * Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.
     * 
     * If you do not set this field, Zuora will use one of the following payment gateways instead:
     * 
     * * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set.
     * * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authGateway")
    public String authGateway;
    public POSTAccountTypePaymentMethod withAuthGateway(String authGateway) {
        this.authGateway = authGateway;
        return this;
    }
    
    /**
     * The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankABACode")
    public String bankABACode;
    public POSTAccountTypePaymentMethod withBankABACode(String bankABACode) {
        this.bankABACode = bankABACode;
        return this;
    }
    
    /**
     * The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountName")
    public String bankAccountName;
    public POSTAccountTypePaymentMethod withBankAccountName(String bankAccountName) {
        this.bankAccountName = bankAccountName;
        return this;
    }
    
    /**
     * The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountNumber")
    public String bankAccountNumber;
    public POSTAccountTypePaymentMethod withBankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
        return this;
    }
    
    /**
     * The type of bank account associated with the ACH payment. This field is only required if the `type` field is set to `ACH`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountType")
    public POSTAccountTypePaymentMethodBankAccountTypeEnum bankAccountType;
    public POSTAccountTypePaymentMethod withBankAccountType(POSTAccountTypePaymentMethodBankAccountTypeEnum bankAccountType) {
        this.bankAccountType = bankAccountType;
        return this;
    }
    
    /**
     * The sort code or number that identifies the bank. This is also known as the sort code. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankCode")
    public String bankCode;
    public POSTAccountTypePaymentMethod withBankCode(String bankCode) {
        this.bankCode = bankCode;
        return this;
    }
    
    /**
     * The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankName")
    public String bankName;
    public POSTAccountTypePaymentMethod withBankName(String bankName) {
        this.bankName = bankName;
        return this;
    }
    
    /**
     * The branch code of the bank used for direct debit.  
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branchCode")
    public String branchCode;
    public POSTAccountTypePaymentMethod withBranchCode(String branchCode) {
        this.branchCode = branchCode;
        return this;
    }
    
    /**
     * The BIC code used for SEPA.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessIdentificationCode")
    public String businessIdentificationCode;
    public POSTAccountTypePaymentMethod withBusinessIdentificationCode(String businessIdentificationCode) {
        this.businessIdentificationCode = businessIdentificationCode;
        return this;
    }
    
    /**
     * Container for cardholder information. If provided, Zuora will
     * only use this information for this card. Otherwise, Zuora will use
     * the account''s existing bill-to contact information for this card.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardHolderInfo")
    public CreatePaymentMethodCardholderInfo cardHolderInfo;
    public POSTAccountTypePaymentMethod withCardHolderInfo(CreatePaymentMethodCardholderInfo cardHolderInfo) {
        this.cardHolderInfo = cardHolderInfo;
        return this;
    }
    
    /**
     * Credit card number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardNumber")
    public String cardNumber;
    public POSTAccountTypePaymentMethod withCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
        return this;
    }
    
    /**
     * The type of the credit card.
     * 
     * Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardType")
    public String cardType;
    public POSTAccountTypePaymentMethod withCardType(String cardType) {
        this.cardType = cardType;
        return this;
    }
    
    /**
     * Indicates whether the duplication check is performed when you create a new credit card payment method. The default value is `false`.
     * 
     * With this field set to `true`, Zuora will check all active payment methods associated with the same billing account to ensure that no duplicate credit card payment methods are created. An error is returned if a duplicate payment method is found.
     *         
     * The following fields are used for the duplication check:
     *   * `cardHolderName`
     *   * `expirationMonth`
     *   * `expirationYear`
     *   * `creditCardMaskNumber`. It is the masked credit card number generated by Zuora. For example, `****1234`. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkDuplicated")
    public Boolean checkDuplicated;
    public POSTAccountTypePaymentMethod withCheckDuplicated(Boolean checkDuplicated) {
        this.checkDuplicated = checkDuplicated;
        return this;
    }
    
    /**
     * City, 40 characters or less.
     *     
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;
    public POSTAccountTypePaymentMethod withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Country, must be a valid country name or abbreviation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public POSTAccountTypePaymentMethod withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The currency used for payment method authorization.
     * 
     * If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyCode")
    public String currencyCode;
    public POSTAccountTypePaymentMethod withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * Email address associated with the payment method. This field is required if you want to create a PayPal Express Checkout payment method or a PayPal Adaptive payment method.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public POSTAccountTypePaymentMethod withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * One or two digit expiration month (1-12) of the credit card.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationMonth")
    public Long expirationMonth;
    public POSTAccountTypePaymentMethod withExpirationMonth(Long expirationMonth) {
        this.expirationMonth = expirationMonth;
        return this;
    }
    
    /**
     * Four-digit expiration year of the credit card.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationYear")
    public Long expirationYear;
    public POSTAccountTypePaymentMethod withExpirationYear(Long expirationYear) {
        this.expirationYear = expirationYear;
        return this;
    }
    
    /**
     * The identity number used for Bank Transfer.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityNumber")
    public String identityNumber;
    public POSTAccountTypePaymentMethod withIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
        return this;
    }
    
    /**
     * Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("makeDefault")
    public Boolean makeDefault;
    public POSTAccountTypePaymentMethod withMakeDefault(Boolean makeDefault) {
        this.makeDefault = makeDefault;
        return this;
    }
    
    /**
     * Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitConsentAgreementRef")
    public String mitConsentAgreementRef;
    public POSTAccountTypePaymentMethod withMitConsentAgreementRef(String mitConsentAgreementRef) {
        this.mitConsentAgreementRef = mitConsentAgreementRef;
        return this;
    }
    
    /**
     * Required if you set the `mitProfileAction` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitConsentAgreementSrc")
    public POSTAccountTypePaymentMethodMitConsentAgreementSrcEnum mitConsentAgreementSrc;
    public POSTAccountTypePaymentMethod withMitConsentAgreementSrc(POSTAccountTypePaymentMethodMitConsentAgreementSrcEnum mitConsentAgreementSrc) {
        this.mitConsentAgreementSrc = mitConsentAgreementSrc;
        return this;
    }
    
    /**
     * Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitNetworkTransactionId")
    public String mitNetworkTransactionId;
    public POSTAccountTypePaymentMethod withMitNetworkTransactionId(String mitNetworkTransactionId) {
        this.mitNetworkTransactionId = mitNetworkTransactionId;
        return this;
    }
    
    /**
     * If you set this field, Zuora creates a stored credential profile within the payment method.
     * 
     * **Note:** This feature is in the **Early Adopters** phase. We are actively soliciting feedback from a small set of early adopters before releasing as generally available.
     * 
     * * `Activate` - Use this value if you are creating the stored credential profile after receiving the customer's consent.
     * 
     *   Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
     *   
     *   If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
     * 
     * 
     * * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitProfileAction")
    public POSTAccountTypePaymentMethodMitProfileActionEnum mitProfileAction;
    public POSTAccountTypePaymentMethod withMitProfileAction(POSTAccountTypePaymentMethodMitProfileActionEnum mitProfileAction) {
        this.mitProfileAction = mitProfileAction;
        return this;
    }
    
    /**
     * The date on which the profile is agreed. The date format is `yyyy-mm-dd`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("mitProfileAgreedOn")
    public LocalDate mitProfileAgreedOn;
    public POSTAccountTypePaymentMethod withMitProfileAgreedOn(LocalDate mitProfileAgreedOn) {
        this.mitProfileAgreedOn = mitProfileAgreedOn;
        return this;
    }
    
    /**
     * Required if you set the `mitProfileAction` field. Indicates the type of the stored credential profile to process recurring or unsecheduled transactions.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mitProfileType")
    public POSTAccountTypePaymentMethodMitProfileTypeEnum mitProfileType;
    public POSTAccountTypePaymentMethod withMitProfileType(POSTAccountTypePaymentMethodMitProfileTypeEnum mitProfileType) {
        this.mitProfileType = mitProfileType;
        return this;
    }
    
    /**
     * Phone number, 40 characters or less.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public String phone;
    public POSTAccountTypePaymentMethod withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * The PayPal preapproval key.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preapprovalKey")
    public String preapprovalKey;
    public POSTAccountTypePaymentMethod withPreapprovalKey(String preapprovalKey) {
        this.preapprovalKey = preapprovalKey;
        return this;
    }
    
    /**
     * CVV or CVV2 security code of the credit card.
     * 
     * To ensure PCI compliance, this value is not stored and cannot be queried.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityCode")
    public String securityCode;
    public POSTAccountTypePaymentMethod withSecurityCode(String securityCode) {
        this.securityCode = securityCode;
        return this;
    }
    
    /**
     * State, must be a valid state name or 2-character abbreviation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public POSTAccountTypePaymentMethod withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Type of payment method. Possible values include:
     * 
     * * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance.
     * * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance.
     * * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance.
     * * `CreditCard` - Credit card payment method.
     * * `ACH` - ACH payment method.
     * * `SEPA` - Single Euro Payments Area.
     * * `Betalingsservice` - Direct Debit DK.
     * * `Autogiro` - Direct Debit SE.
     * * `Bacs` - Direct Debit UK.
     * * You can also specify a custom payment method type. This type is only available if the Universal Payment Connector and Open Payment Method services are enabled. See [Set up custom payment gateways and payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) for details.
     * 
     */
    @JsonProperty("type")
    public String type;
    public POSTAccountTypePaymentMethod withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Zip code, 20 characters or less.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipCode")
    public String zipCode;
    public POSTAccountTypePaymentMethod withZipCode(String zipCode) {
        this.zipCode = zipCode;
        return this;
    }
    
}
