"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class VehicleMotStatusEnum(str, Enum):
    r"""MOT Status of the vehicle"""
    NO_DETAILS_HELD_BY_DVLA = 'No details held by DVLA'
    NO_RESULTS_RETURNED = 'No results returned'
    NOT_VALID = 'Not valid'
    VALID = 'Valid'

class VehicleTaxStatusEnum(str, Enum):
    r"""Tax status of the vehicle"""
    NOT_TAXED_FOR_ON_ROAD_USE = 'Not Taxed for on Road Use'
    SORN = 'SORN'
    TAXED = 'Taxed'
    UNTAXED = 'Untaxed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Vehicle:
    r"""Successful response"""
    
    registration_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationNumber') }})
    r"""Registration number of the vehicle"""  
    art_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Additional Rate of Tax End Date, format: YYYY-MM-DD"""  
    co2_emissions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2Emissions'), 'exclude': lambda f: f is None }})
    r"""Carbon Dioxide emissions in grams per kilometre"""  
    colour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('colour'), 'exclude': lambda f: f is None }})
    r"""Vehicle colour"""  
    date_of_last_v5_c_issued: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfLastV5CIssued'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of last V5C issued"""  
    engine_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('engineCapacity'), 'exclude': lambda f: f is None }})
    r"""Engine capacity in cubic centimetres"""  
    euro_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('euroStatus'), 'exclude': lambda f: f is None }})
    r"""Euro Status (Dealer / Customer Provided (new vehicles))"""  
    fuel_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fuelType'), 'exclude': lambda f: f is None }})
    r"""Fuel type (Method of Propulsion)"""  
    make: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('make'), 'exclude': lambda f: f is None }})
    r"""Vehicle make"""  
    marked_for_export: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('markedForExport'), 'exclude': lambda f: f is None }})
    r"""True only if vehicle has been export marked"""  
    month_of_first_dvla_registration: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthOfFirstDvlaRegistration'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Month of First DVLA Registration"""  
    month_of_first_registration: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthOfFirstRegistration'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Month of First Registration"""  
    mot_expiry_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motExpiryDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Mot Expiry Date"""  
    mot_status: Optional[VehicleMotStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motStatus'), 'exclude': lambda f: f is None }})
    r"""MOT Status of the vehicle"""  
    real_driving_emissions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('realDrivingEmissions'), 'exclude': lambda f: f is None }})
    r"""Real Driving Emissions value"""  
    revenue_weight: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueWeight'), 'exclude': lambda f: f is None }})
    r"""Revenue weight in kilograms"""  
    tax_due_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxDueDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of tax liablity, Used in calculating licence information presented to user"""  
    tax_status: Optional[VehicleTaxStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxStatus'), 'exclude': lambda f: f is None }})
    r"""Tax status of the vehicle"""  
    type_approval: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeApproval'), 'exclude': lambda f: f is None }})
    r"""Vehicle Type Approval Category"""  
    wheelplan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wheelplan'), 'exclude': lambda f: f is None }})
    r"""Vehicle wheel plan"""  
    year_of_manufacture: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yearOfManufacture'), 'exclude': lambda f: f is None }})
    r"""Year of Manufacture"""  
    