<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateResponse
     */
	public function integrationsProjectsLocationsAppsScriptProjectsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/appsScriptProjects', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaCreateAppsScriptProjectRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaCreateAppsScriptProjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaCreateAppsScriptProjectResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Links a existing Apps Script project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkResponse
     */
	public function integrationsProjectsLocationsAppsScriptProjectsLink(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/appsScriptProjects:link', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaLinkAppsScriptProjectRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsAppsScriptProjectsLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaLinkAppsScriptProjectResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaLinkAppsScriptProjectResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Connections in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListResponse
     */
	public function integrationsProjectsLocationsConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/connections', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the JSON schemas for the inputs and outputs of actions, filtered by action name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListResponse
     */
	public function integrationsProjectsLocationsConnectionsRuntimeActionSchemasList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/runtimeActionSchemas', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeActionSchemasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListRuntimeActionSchemasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListRuntimeActionSchemasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the JSON schemas for the properties of runtime entities, filtered by entity name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse
     */
	public function integrationsProjectsLocationsConnectionsRuntimeEntitySchemasList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/runtimeEntitySchemas', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsConnectionsRuntimeEntitySchemasListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListRuntimeEntitySchemasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListRuntimeEntitySchemasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateResponse
     */
	public function integrationsProjectsLocationsProductsAuthConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/authConfigs', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaAuthConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaAuthConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaAuthConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all auth configs that match the filter. Restrict to auth configs belong to the current client only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListResponse
     */
	public function integrationsProjectsLocationsProductsAuthConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/authConfigs', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsAuthConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListAuthConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListAuthConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new certificate. The certificate will be registered to the trawler service and will be encrypted using cloud KMS and stored in Spanner Returns the certificate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateResponse
     */
	public function integrationsProjectsLocationsProductsCertificatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaCertificateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the certificates that match the filter. Restrict to certificate of current client only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListResponse
     */
	public function integrationsProjectsLocationsProductsCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListCertificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListCertificatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Executes integrations synchronously by passing the trigger id in the request body. The request is not returned until the requested executions are either fulfilled or experienced an error. If the integration name is not specified (passing `-`), all of the associated integration under the given trigger_id will be executed. Otherwise only the specified integration for the given `trigger_id` is executed. This is helpful for execution the integration from UI.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecute(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:execute', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaExecuteIntegrationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaExecuteIntegrationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaExecuteIntegrationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancellation of an execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecutionsCancel(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaCancelExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaCancelExecutionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the results of all the integration executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecutionsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * * Lifts suspension for advanced suspension task. Fetch corresponding suspension with provided suspension Id, resolve suspension, and set up suspension result for the Suspension Task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLift(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:lift', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaLiftSuspensionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsLiftResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaLiftSuspensionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaLiftSuspensionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * * Lists suspensions associated with a specific execution. Only those with permissions to resolve the relevant suspensions will be able to view them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/suspensions', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListSuspensionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListSuspensionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * * Resolves (lifts/rejects) any number of suspensions. If the integration is already running, only the status of the suspension is updated. Otherwise, the suspended integration will begin execution again.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolve(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:resolve', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaResolveSuspensionRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsExecutionsSuspensionsResolveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaResolveSuspensionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all integrations in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/integrations', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListIntegrationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListIntegrationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedules an integration for execution by passing the trigger id and the scheduled time in the request body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsSchedule(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:schedule', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaScheduleIntegrationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaScheduleIntegrationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaScheduleIntegrationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Downloads an integration. Retrieves the `IntegrationVersion` for a given `integration_id` and returns the response as a string.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsVersionsDownload(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:download', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaDownloadIntegrationVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaDownloadIntegrationVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This RPC throws an exception if the integration is in ARCHIVED or ACTIVE state. This RPC throws an exception if the version being published is DRAFT, and if the `locked_by` user is not the same as the user performing the Publish. Audit fields updated include last_published_timestamp, last_published_by, last_modified_timestamp, last_modified_by. Any existing lock is on this integration is released.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsVersionsPublish(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:publish', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaPublishIntegrationVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears the `locked_by` and `locked_at_timestamp`in the DRAFT version of this integration. It then performs the same action as the CreateDraftIntegrationVersion (i.e., copies the DRAFT version of the integration as a SNAPSHOT and then creates a new DRAFT version with the `locked_by` set to the `user_taking_over` and the `locked_at_timestamp` set to the current timestamp). Both the `locked_by` and `user_taking_over` are notified via email about the takeover. This RPC throws an exception if the integration is not in DRAFT status or if the `locked_by` and `locked_at_timestamp` fields are not set.The TakeoverEdit lock is treated the same as an edit of the integration, and hence shares ACLs with edit. Audit fields updated include last_modified_timestamp, last_modified_by.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLock(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{integrationVersion}:takeoverEditLock', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsTakeoverEditLockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaTakeoverEditLockResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaTakeoverEditLockResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the status of the ACTIVE integration to SNAPSHOT with a new tag "PREVIOUSLY_PUBLISHED" after validating it. The "HEAD" and "PUBLISH_REQUESTED" tags do not change. This RPC throws an exception if the version being snapshot is not ACTIVE. Audit fields added include action, action_by, action_timestamp.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsVersionsUnpublish(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:unpublish', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUnpublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationsVersionsUpload(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/versions:upload', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaUploadIntegrationVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationsVersionsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaUploadIntegrationVersionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaUploadIntegrationVersionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an IntegrationTemplateVersion.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaIntegrationTemplateVersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaIntegrationTemplateVersion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaIntegrationTemplateVersion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all IntegrationTemplateVersions in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListResponse
     */
	public function integrationsProjectsLocationsProductsIntegrationtemplatesVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsProductsIntegrationtemplatesVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListIntegrationTemplateVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListIntegrationTemplateVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an sfdc instance record. Store the sfdc instance in Spanner. Returns the sfdc instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/sfdcInstances', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaSfdcInstanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaSfdcInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaSfdcInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sfdc instances that match the filter. Restrict to sfdc instances belonging to the current client only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/sfdcInstances', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListSfdcInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListSfdcInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesSfdcChannelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/sfdcChannels', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaSfdcChannelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaSfdcChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaSfdcChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an sfdc channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesSfdcChannelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesSfdcChannelsGet(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaSfdcChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaSfdcChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sfdc channels that match the filter. Restrict to sfdc channels belonging to the current client only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesSfdcChannelsList(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/sfdcChannels', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaListSfdcChannelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaListSfdcChannelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an sfdc channel. Updates the sfdc channel in spanner. Returns the sfdc channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchResponse
     */
	public function integrationsProjectsLocationsSfdcInstancesSfdcChannelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIntegrationsV1alphaSfdcChannelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IntegrationsProjectsLocationsSfdcInstancesSfdcChannelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIntegrationsV1alphaSfdcChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIntegrationsV1alphaSfdcChannel', 'json');
            }
        }

        return $response;
    }
}