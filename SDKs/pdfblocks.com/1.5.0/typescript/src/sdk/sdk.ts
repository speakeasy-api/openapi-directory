/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Global endpoint (default).
   */
  "https://api.pdfblocks.com",
  /**
   * European-only endpoint.
   */
  "https://eu.api.pdfblocks.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * @see {@link https://www.pdfblocks.com/docs/api/v1} - Documentation and examples
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Add an image watermark to a PDF
   *
   * @remarks
   * Add an image watermark to each page of a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/add-watermark-image} - Documentation and examples
   */
  addImageWatermarkV1(
    req: operations.AddImageWatermarkV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AddImageWatermarkV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddImageWatermarkV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/add_watermark/image";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddImageWatermarkV1Response =
        new operations.AddImageWatermarkV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.addImageWatermarkV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.addImageWatermarkV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AddImageWatermarkV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a password to a PDF
   *
   * @remarks
   * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/add-password} - Documentation and examples
   */
  addPasswordV1(
    req: operations.AddPasswordV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AddPasswordV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddPasswordV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/add_password";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddPasswordV1Response =
        new operations.AddPasswordV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.addPasswordV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.addPasswordV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AddPasswordV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add restrictions to a PDF
   *
   * @remarks
   * Add restrictions to prevent copying, printing, and modifying a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/add-restrictions} - Documentation and examples
   */
  addRestrictionsV1(
    req: operations.AddRestrictionsV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AddRestrictionsV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddRestrictionsV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/add_restrictions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddRestrictionsV1Response =
        new operations.AddRestrictionsV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.addRestrictionsV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.addRestrictionsV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AddRestrictionsV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a text watermark to a PDF
   *
   * @remarks
   * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/add-watermark-text} - Documentation and examples
   */
  addTextWatermarkV1(
    req: operations.AddTextWatermarkV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AddTextWatermarkV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddTextWatermarkV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/add_watermark/text";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddTextWatermarkV1Response =
        new operations.AddTextWatermarkV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.addTextWatermarkV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.addTextWatermarkV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AddTextWatermarkV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Extract pages from a PDF
   *
   * @remarks
   * Extract one or more pages from a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/extract-pages} - Documentation and examples
   */
  extractPagesV1(
    req: operations.ExtractPagesV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.ExtractPagesV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ExtractPagesV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/extract_pages";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExtractPagesV1Response =
        new operations.ExtractPagesV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.extractPagesV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.extractPagesV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ExtractPagesV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Merge PDF documents
   *
   * @remarks
   * Combine multiple PDF documents into a single PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/merge-documents} - Documentation and examples
   */
  mergeDocumentsV1(
    req: operations.MergeDocumentsV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.MergeDocumentsV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MergeDocumentsV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/merge_documents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MergeDocumentsV1Response =
        new operations.MergeDocumentsV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.mergeDocumentsV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.mergeDocumentsV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.MergeDocumentsV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove pages from a PDF
   *
   * @remarks
   * Remove one or more pages from a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/remove-pages} - Documentation and examples
   */
  removePagesV1(
    req: operations.RemovePagesV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RemovePagesV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemovePagesV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/remove_pages";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemovePagesV1Response =
        new operations.RemovePagesV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.removePagesV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.removePagesV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemovePagesV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove the password from a PDF
   *
   * @remarks
   * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/remove-password} - Documentation and examples
   */
  removePasswordV1(
    req: operations.RemovePasswordV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RemovePasswordV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemovePasswordV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/remove_password";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemovePasswordV1Response =
        new operations.RemovePasswordV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.removePasswordV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.removePasswordV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemovePasswordV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove the restrictions from a PDF
   *
   * @remarks
   * Remove all the restrictions from a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/remove-restrictions} - Documentation and examples
   */
  removeRestrictionsV1(
    req: operations.RemoveRestrictionsV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveRestrictionsV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveRestrictionsV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/remove_restrictions";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveRestrictionsV1Response =
        new operations.RemoveRestrictionsV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.removeRestrictionsV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.removeRestrictionsV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveRestrictionsV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove the signatures from a PDF
   *
   * @remarks
   * Remove the cryptographic signatures and timestamps from a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/remove-signatures} - Documentation and examples
   */
  removeSignaturesV1(
    req: operations.RemoveSignaturesV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveSignaturesV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveSignaturesV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/remove_signatures";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveSignaturesV1Response =
        new operations.RemoveSignaturesV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.removeSignaturesV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.removeSignaturesV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RemoveSignaturesV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Reverse the pages of a PDF
   *
   * @remarks
   * Reverse the order of the pages of a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/reverse-pages} - Documentation and examples
   */
  reversePagesV1(
    req: operations.ReversePagesV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.ReversePagesV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReversePagesV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/reverse_pages";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReversePagesV1Response =
        new operations.ReversePagesV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.reversePagesV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.reversePagesV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ReversePagesV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rotate pages in a PDF
   *
   * @remarks
   * Rotate one or more pages in a PDF document.
   *
   * @see {@link https://www.pdfblocks.com/docs/api/v1/rotate-pages} - Documentation and examples
   */
  rotatePagesV1(
    req: operations.RotatePagesV1RequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.RotatePagesV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RotatePagesV1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/rotate_pages";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RotatePagesV1Response =
        new operations.RotatePagesV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.rotatePagesV1200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status >= 400 && httpRes?.status < 500:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.rotatePagesV14XXApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RotatePagesV14XXApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }
}
