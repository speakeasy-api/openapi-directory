// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum - Choice between 'dual', '2.4ghz' or '5ghz'.
type UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumTwo4ghz UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "2.4ghz"
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumFiveghz UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "5ghz"
	UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnumDual    UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum = "dual"
)

func (e *UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2.4ghz":
		fallthrough
	case "5ghz":
		fallthrough
	case "dual":
		*e = UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum: %s", s)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyApBandSettings - Settings that will be enabled if selectionType is set to 'ap'.
type UpdateNetworkWirelessRfProfileRequestBodyApBandSettings struct {
	// Choice between 'dual', '2.4ghz' or '5ghz'.
	BandOperationMode *UpdateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum `json:"bandOperationMode,omitempty"`
	// Steers client to most open band. Can be either true or false.
	BandSteeringEnabled *bool `json:"bandSteeringEnabled,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum - Band selection can be set to either 'ssid' or 'ap'.
type UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumAp   UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ap"
	UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnumSsid UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = "ssid"
)

func (e *UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ap":
		fallthrough
	case "ssid":
		*e = UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum: %s", s)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings - Settings related to 5Ghz band
type UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings struct {
	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.
	ChannelWidth *string `json:"channelWidth,omitempty"`
	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *int64 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

// UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum - Minimum bitrate can be set to either 'band' or 'ssid'.
type UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum string

const (
	UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumBand UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "band"
	UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnumSsid UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum = "ssid"
)

func (e *UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "band":
		fallthrough
	case "ssid":
		*e = UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum: %s", s)
	}
}

// UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings - Settings related to 2.4Ghz band
type UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings struct {
	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled *bool `json:"axEnabled,omitempty"`
	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MaxPower *int64 `json:"maxPower,omitempty"`
	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate *float32 `json:"minBitrate,omitempty"`
	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MinPower *int64 `json:"minPower,omitempty"`
	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop *int64 `json:"rxsop,omitempty"`
	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.
	ValidAutoChannels []int64 `json:"validAutoChannels,omitempty"`
}

type UpdateNetworkWirelessRfProfileRequestBody struct {
	// Settings that will be enabled if selectionType is set to 'ap'.
	ApBandSettings *UpdateNetworkWirelessRfProfileRequestBodyApBandSettings `json:"apBandSettings,omitempty"`
	// Band selection can be set to either 'ssid' or 'ap'.
	BandSelectionType *UpdateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum `json:"bandSelectionType,omitempty"`
	// Steers client to best available access point. Can be either true or false.
	ClientBalancingEnabled *bool `json:"clientBalancingEnabled,omitempty"`
	// Settings related to 5Ghz band
	FiveGhzSettings *UpdateNetworkWirelessRfProfileRequestBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`
	// Minimum bitrate can be set to either 'band' or 'ssid'.
	MinBitrateType *UpdateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum `json:"minBitrateType,omitempty"`
	// The name of the new profile. Must be unique.
	Name *string `json:"name,omitempty"`
	// Settings related to 2.4Ghz band
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

type UpdateNetworkWirelessRfProfileRequest struct {
	RequestBody *UpdateNetworkWirelessRfProfileRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                     `pathParam:"style=simple,explode=false,name=networkId"`
	RfProfileID string                                     `pathParam:"style=simple,explode=false,name=rfProfileId"`
}

type UpdateNetworkWirelessRfProfileResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessRfProfile200ApplicationJSONObject map[string]interface{}
}
