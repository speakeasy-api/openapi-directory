/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReleasesGetLatestByHash200ApplicationJSON - Details of an uploaded release
 */
public class ReleasesGetLatestByHash200ApplicationJSON {
    /**
     * The release's minimum required Android API level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("android_min_api_level")
    public String androidMinApiLevel;
    public ReleasesGetLatestByHash200ApplicationJSON withAndroidMinApiLevel(String androidMinApiLevel) {
        this.androidMinApiLevel = androidMinApiLevel;
        return this;
    }
    
    /**
     * The app's display name.
     */
    @JsonProperty("app_display_name")
    public String appDisplayName;
    public ReleasesGetLatestByHash200ApplicationJSON withAppDisplayName(String appDisplayName) {
        this.appDisplayName = appDisplayName;
        return this;
    }
    
    /**
     * A URL to the app's icon.
     */
    @JsonProperty("app_icon_url")
    public String appIconUrl;
    public ReleasesGetLatestByHash200ApplicationJSON withAppIconUrl(String appIconUrl) {
        this.appIconUrl = appIconUrl;
        return this;
    }
    
    /**
     * The app's name (extracted from the uploaded release).
     */
    @JsonProperty("app_name")
    public String appName;
    public ReleasesGetLatestByHash200ApplicationJSON withAppName(String appName) {
        this.appName = appName;
        return this;
    }
    
    /**
     * The app's OS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_os")
    public String appOs;
    public ReleasesGetLatestByHash200ApplicationJSON withAppOs(String appOs) {
        this.appOs = appOs;
        return this;
    }
    
    /**
     * Contains metadata about the build that produced the release being uploaded
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    public ReleasesGetLatestByHash200ApplicationJSONBuild build;
    public ReleasesGetLatestByHash200ApplicationJSON withBuild(ReleasesGetLatestByHash200ApplicationJSONBuild build) {
        this.build = build;
        return this;
    }
    
    /**
     * The identifier of the apps bundle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_identifier")
    public String bundleIdentifier;
    public ReleasesGetLatestByHash200ApplicationJSON withBundleIdentifier(String bundleIdentifier) {
        this.bundleIdentifier = bundleIdentifier;
        return this;
    }
    
    /**
     * In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_resign")
    public Boolean canResign;
    public ReleasesGetLatestByHash200ApplicationJSON withCanResign(Boolean canResign) {
        this.canResign = canResign;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt;
     * &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt;
     * &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned.&lt;br&gt;
     * &lt;b&gt;tester&lt;/b&gt;: The release distributed testers details will be returned.&lt;br&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination_type")
    public ReleasesGetLatestByHash200ApplicationJSONDestinationTypeEnum destinationType;
    public ReleasesGetLatestByHash200ApplicationJSON withDestinationType(ReleasesGetLatestByHash200ApplicationJSONDestinationTypeEnum destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * A list of distribution groups or stores.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinations")
    public ReleasesGetLatestByHash200ApplicationJSONDestinations[] destinations;
    public ReleasesGetLatestByHash200ApplicationJSON withDestinations(ReleasesGetLatestByHash200ApplicationJSONDestinations[] destinations) {
        this.destinations = destinations;
        return this;
    }
    
    /**
     * The release's device family.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_family")
    public String deviceFamily;
    public ReleasesGetLatestByHash200ApplicationJSON withDeviceFamily(String deviceFamily) {
        this.deviceFamily = deviceFamily;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distribution_groups")
    public ReleasesGetLatestByHash200ApplicationJSONDistributionGroups[] distributionGroups;
    public ReleasesGetLatestByHash200ApplicationJSON withDistributionGroups(ReleasesGetLatestByHash200ApplicationJSONDistributionGroups[] distributionGroups) {
        this.distributionGroups = distributionGroups;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distribution_stores")
    public ReleasesGetLatestByHash200ApplicationJSONDistributionStores[] distributionStores;
    public ReleasesGetLatestByHash200ApplicationJSON withDistributionStores(ReleasesGetLatestByHash200ApplicationJSONDistributionStores[] distributionStores) {
        this.distributionStores = distributionStores;
        return this;
    }
    
    /**
     * The URL that hosts the binary for this release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    public String downloadUrl;
    public ReleasesGetLatestByHash200ApplicationJSON withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * This value determines the whether a release currently is enabled or disabled.
     */
    @JsonProperty("enabled")
    public Boolean enabled;
    public ReleasesGetLatestByHash200ApplicationJSON withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * MD5 checksum of the release binary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public ReleasesGetLatestByHash200ApplicationJSON withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * ID identifying this unique release.
     */
    @JsonProperty("id")
    public Long id;
    public ReleasesGetLatestByHash200ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&amp;url=`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("install_url")
    public String installUrl;
    public ReleasesGetLatestByHash200ApplicationJSON withInstallUrl(String installUrl) {
        this.installUrl = installUrl;
        return this;
    }
    
    /**
     * This value determines if a release is external or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_external_build")
    public Boolean isExternalBuild;
    public ReleasesGetLatestByHash200ApplicationJSON withIsExternalBuild(Boolean isExternalBuild) {
        this.isExternalBuild = isExternalBuild;
        return this;
    }
    
    /**
     * A flag that determines whether the release's provisioning profile is still extracted or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_provisioning_profile_syncing")
    public Boolean isProvisioningProfileSyncing;
    public ReleasesGetLatestByHash200ApplicationJSON withIsProvisioningProfileSyncing(Boolean isProvisioningProfileSyncing) {
        this.isProvisioningProfileSyncing = isProvisioningProfileSyncing;
        return this;
    }
    
    /**
     * In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_udid_provisioned")
    public Boolean isUdidProvisioned;
    public ReleasesGetLatestByHash200ApplicationJSON withIsUdidProvisioned(Boolean isUdidProvisioned) {
        this.isUdidProvisioned = isUdidProvisioned;
        return this;
    }
    
    /**
     * The release's minimum required operating system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min_os")
    public String minOs;
    public ReleasesGetLatestByHash200ApplicationJSON withMinOs(String minOs) {
        this.minOs = minOs;
        return this;
    }
    
    /**
     * The release's origin
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public ReleasesGetLatestByHash200ApplicationJSONOriginEnum origin;
    public ReleasesGetLatestByHash200ApplicationJSON withOrigin(ReleasesGetLatestByHash200ApplicationJSONOriginEnum origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Hashes for the packages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_hashes")
    public String[] packageHashes;
    public ReleasesGetLatestByHash200ApplicationJSON withPackageHashes(String[] packageHashes) {
        this.packageHashes = packageHashes;
        return this;
    }
    
    /**
     * expiration date of provisioning profile in UTC format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioning_profile_expiry_date")
    public String provisioningProfileExpiryDate;
    public ReleasesGetLatestByHash200ApplicationJSON withProvisioningProfileExpiryDate(String provisioningProfileExpiryDate) {
        this.provisioningProfileExpiryDate = provisioningProfileExpiryDate;
        return this;
    }
    
    /**
     * The release's provisioning profile name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioning_profile_name")
    public String provisioningProfileName;
    public ReleasesGetLatestByHash200ApplicationJSON withProvisioningProfileName(String provisioningProfileName) {
        this.provisioningProfileName = provisioningProfileName;
        return this;
    }
    
    /**
     * The type of the provisioning profile for the requested app version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioning_profile_type")
    public ReleasesGetLatestByHash200ApplicationJSONProvisioningProfileTypeEnum provisioningProfileType;
    public ReleasesGetLatestByHash200ApplicationJSON withProvisioningProfileType(ReleasesGetLatestByHash200ApplicationJSONProvisioningProfileTypeEnum provisioningProfileType) {
        this.provisioningProfileType = provisioningProfileType;
        return this;
    }
    
    /**
     * The release's release notes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("release_notes")
    public String releaseNotes;
    public ReleasesGetLatestByHash200ApplicationJSON withReleaseNotes(String releaseNotes) {
        this.releaseNotes = releaseNotes;
        return this;
    }
    
    /**
     * The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_download_url")
    public String secondaryDownloadUrl;
    public ReleasesGetLatestByHash200ApplicationJSON withSecondaryDownloadUrl(String secondaryDownloadUrl) {
        this.secondaryDownloadUrl = secondaryDownloadUrl;
        return this;
    }
    
    /**
     * The release's short version.&lt;br&gt;
     * For iOS: CFBundleShortVersionString from info.plist.
     * For Android: android:versionName from AppManifest.xml.
     * 
     */
    @JsonProperty("short_version")
    public String shortVersion;
    public ReleasesGetLatestByHash200ApplicationJSON withShortVersion(String shortVersion) {
        this.shortVersion = shortVersion;
        return this;
    }
    
    /**
     * The release's size in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;
    public ReleasesGetLatestByHash200ApplicationJSON withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * Status of the release.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public ReleasesGetLatestByHash200ApplicationJSON withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * UTC time in ISO 8601 format of the uploaded time.
     */
    @JsonProperty("uploaded_at")
    public String uploadedAt;
    public ReleasesGetLatestByHash200ApplicationJSON withUploadedAt(String uploadedAt) {
        this.uploadedAt = uploadedAt;
        return this;
    }
    
    /**
     * The release's version.&lt;br&gt;
     * For iOS: CFBundleVersion from info.plist.
     * For Android: android:versionCode from AppManifest.xml.
     * 
     */
    @JsonProperty("version")
    public String version;
    public ReleasesGetLatestByHash200ApplicationJSON withVersion(String version) {
        this.version = version;
        return this;
    }
    
}
