"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Flightobject:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_flightobject_addmessage(self, request: operations.WalletobjectsFlightobjectAddmessageRequest, security: operations.WalletobjectsFlightobjectAddmessageSecurity) -> operations.WalletobjectsFlightobjectAddmessageResponse:
        r"""Adds a message to the flight object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsFlightobjectAddmessageRequest, base_url, '/walletobjects/v1/flightObject/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObjectAddMessageResponse])
                res.flight_object_add_message_response = out

        return res

    def walletobjects_flightobject_get(self, request: operations.WalletobjectsFlightobjectGetRequest, security: operations.WalletobjectsFlightobjectGetSecurity) -> operations.WalletobjectsFlightobjectGetResponse:
        r"""Returns the flight object with the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsFlightobjectGetRequest, base_url, '/walletobjects/v1/flightObject/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObject])
                res.flight_object = out

        return res

    def walletobjects_flightobject_insert(self, request: operations.WalletobjectsFlightobjectInsertRequest, security: operations.WalletobjectsFlightobjectInsertSecurity) -> operations.WalletobjectsFlightobjectInsertResponse:
        r"""Inserts an flight object with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/flightObject'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "flight_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObject])
                res.flight_object = out

        return res

    def walletobjects_flightobject_list(self, request: operations.WalletobjectsFlightobjectListRequest, security: operations.WalletobjectsFlightobjectListSecurity) -> operations.WalletobjectsFlightobjectListResponse:
        r"""Returns a list of all flight objects for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/flightObject'
        
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObjectListResponse])
                res.flight_object_list_response = out

        return res

    def walletobjects_flightobject_patch(self, request: operations.WalletobjectsFlightobjectPatchRequest, security: operations.WalletobjectsFlightobjectPatchSecurity) -> operations.WalletobjectsFlightobjectPatchResponse:
        r"""Updates the flight object referenced by the given object ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsFlightobjectPatchRequest, base_url, '/walletobjects/v1/flightObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "flight_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObject])
                res.flight_object = out

        return res

    def walletobjects_flightobject_update(self, request: operations.WalletobjectsFlightobjectUpdateRequest, security: operations.WalletobjectsFlightobjectUpdateSecurity) -> operations.WalletobjectsFlightobjectUpdateResponse:
        r"""Updates the flight object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsFlightobjectUpdateRequest, base_url, '/walletobjects/v1/flightObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "flight_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsFlightobjectUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsFlightobjectUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FlightObject])
                res.flight_object = out

        return res

    