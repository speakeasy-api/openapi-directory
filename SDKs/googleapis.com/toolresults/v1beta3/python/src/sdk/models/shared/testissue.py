"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import any as shared_any
from ..shared import stacktrace as shared_stacktrace
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TestIssueCategoryEnum(str, Enum):
    r"""Category of issue. Required."""
    UNSPECIFIED_CATEGORY = 'unspecifiedCategory'
    COMMON = 'common'
    ROBO = 'robo'

class TestIssueSeverityEnum(str, Enum):
    r"""Severity of issue. Required."""
    UNSPECIFIED_SEVERITY = 'unspecifiedSeverity'
    INFO = 'info'
    SUGGESTION = 'suggestion'
    WARNING = 'warning'
    SEVERE = 'severe'

class TestIssueTypeEnum(str, Enum):
    r"""Type of issue. Required."""
    UNSPECIFIED_TYPE = 'unspecifiedType'
    FATAL_EXCEPTION = 'fatalException'
    NATIVE_CRASH = 'nativeCrash'
    ANR = 'anr'
    UNUSED_ROBO_DIRECTIVE = 'unusedRoboDirective'
    COMPATIBLE_WITH_ORCHESTRATOR = 'compatibleWithOrchestrator'
    LAUNCHER_ACTIVITY_NOT_FOUND = 'launcherActivityNotFound'
    START_ACTIVITY_NOT_FOUND = 'startActivityNotFound'
    INCOMPLETE_ROBO_SCRIPT_EXECUTION = 'incompleteRoboScriptExecution'
    COMPLETE_ROBO_SCRIPT_EXECUTION = 'completeRoboScriptExecution'
    FAILED_TO_INSTALL = 'failedToInstall'
    AVAILABLE_DEEP_LINKS = 'availableDeepLinks'
    NON_SDK_API_USAGE_VIOLATION = 'nonSdkApiUsageViolation'
    NON_SDK_API_USAGE_REPORT = 'nonSdkApiUsageReport'
    ENCOUNTERED_NON_ANDROID_UI_WIDGET_SCREEN = 'encounteredNonAndroidUiWidgetScreen'
    ENCOUNTERED_LOGIN_SCREEN = 'encounteredLoginScreen'
    PERFORMED_GOOGLE_LOGIN = 'performedGoogleLogin'
    IOS_EXCEPTION = 'iosException'
    IOS_CRASH = 'iosCrash'
    PERFORMED_MONKEY_ACTIONS = 'performedMonkeyActions'
    USED_ROBO_DIRECTIVE = 'usedRoboDirective'
    USED_ROBO_IGNORE_DIRECTIVE = 'usedRoboIgnoreDirective'
    INSUFFICIENT_COVERAGE = 'insufficientCoverage'
    IN_APP_PURCHASES = 'inAppPurchases'
    CRASH_DIALOG_ERROR = 'crashDialogError'
    UI_ELEMENTS_TOO_DEEP = 'uiElementsTooDeep'
    BLANK_SCREEN = 'blankScreen'
    OVERLAPPING_UI_ELEMENTS = 'overlappingUiElements'
    UNITY_EXCEPTION = 'unityException'
    DEVICE_OUT_OF_MEMORY = 'deviceOutOfMemory'
    LOGCAT_COLLECTION_ERROR = 'logcatCollectionError'
    DETECTED_APP_SPLASH_SCREEN = 'detectedAppSplashScreen'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestIssue:
    r"""An issue detected occurring during a test execution."""
    
    category: Optional[TestIssueCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""Category of issue. Required."""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""A brief human-readable message describing the issue. Required."""  
    severity: Optional[TestIssueSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Severity of issue. Required."""  
    stack_trace: Optional[shared_stacktrace.StackTrace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stackTrace'), 'exclude': lambda f: f is None }})
    r"""A stacktrace."""  
    type: Optional[TestIssueTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of issue. Required."""  
    warning: Optional[shared_any.Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning'), 'exclude': lambda f: f is None }})
    r"""`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \\"foo.bar.com/x/y.z\\" will yield type name \\"y.z\\". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \\"@type\\": \\"type.googleapis.com/google.profile.Person\\", \\"firstName\\": , \\"lastName\\": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { \\"@type\\": \\"type.googleapis.com/google.protobuf.Duration\\", \\"value\\": \\"1.212s\\" }"""  
    