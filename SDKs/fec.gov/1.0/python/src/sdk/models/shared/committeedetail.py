"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeDetailJfcCommittee:
    
    joint_committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint_committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    joint_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('joint_committee_name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitteeDetail:
    
    committee_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_id') }})
    r"""A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits."""  
    affiliated_committee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliated_committee_name'), 'exclude': lambda f: f is None }})
    r"""Affiliated committee or connected organization"""  
    candidate_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_ids'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office.
    """  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City of committee as reported on the Form 1"""  
    committee_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    committee_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committee_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter type code of the organization:
            - C communication cost
            - D delegate
            - E electioneering communication
            - H House
            - I independent expenditure filer (not a committee)
            - N PAC - nonqualified
            - O independent expenditure-only (super PACs)
            - P presidential
            - Q PAC - qualified
            - S Senate
            - U single candidate independent expenditure
            - V PAC with non-contribution account, nonqualified
            - W PAC with non-contribution account, qualified
            - X party, nonqualified
            - Y party, qualified
            - Z national party non-federal account
    """  
    custodian_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_city'), 'exclude': lambda f: f is None }})
    r"""City of committee custodian as reported on the Form 1"""  
    custodian_name_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_1'), 'exclude': lambda f: f is None }})
    r"""Name 1 of committee custodian as reported on the Form 1"""  
    custodian_name_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_2'), 'exclude': lambda f: f is None }})
    r"""Name 2 of committee custodian as reported on the Form 1"""  
    custodian_name_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_full'), 'exclude': lambda f: f is None }})
    r"""Full name of committee custodian as reported on the Form 1"""  
    custodian_name_middle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_middle'), 'exclude': lambda f: f is None }})
    r"""Middle name of committee custodian as reported on the Form 1"""  
    custodian_name_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_prefix'), 'exclude': lambda f: f is None }})
    r"""Name prefix of committee custodian as reported on the Form 1"""  
    custodian_name_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_suffix'), 'exclude': lambda f: f is None }})
    r"""Suffix name of the committee custodian as reported on the Form 1"""  
    custodian_name_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_name_title'), 'exclude': lambda f: f is None }})
    r"""Name title of the committee custodian as reported on the Form 1"""  
    custodian_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_phone'), 'exclude': lambda f: f is None }})
    r"""Phone number of committee custodian as reported on the Form 1"""  
    custodian_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_state'), 'exclude': lambda f: f is None }})
    r"""State of committee custodian as reported on the Form 1"""  
    custodian_street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_street_1'), 'exclude': lambda f: f is None }})
    r"""Street address of the committee custodian as reported on the Form 1"""  
    custodian_street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_street_2'), 'exclude': lambda f: f is None }})
    r"""Second line of the street address of the committee custodian as reported on the Form 1"""  
    custodian_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custodian_zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of the committee custodian as reported on the Form 1"""  
    cycles: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycles'), 'exclude': lambda f: f is None }})
    r"""A two year election cycle that the committee was active- (after original registration
    date but before expiration date in Form 1s) The cycle begins with
    an odd year and is named for its ending, even year.
    """  
    designation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('designation'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    designation_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('designation_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter designation code of the organization:
             - A authorized by a candidate
             - J joint fundraising committee
             - P principal campaign committee of a candidate
             - U unauthorized
             - B lobbyist/registrant PAC
             - D leadership PAC
    """  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email as reported on the Form 1"""  
    fax: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fax'), 'exclude': lambda f: f is None }})
    r"""Fax as reported on the Form 1"""  
    filing_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filing_frequency'), 'exclude': lambda f: f is None }})
    r"""The one-letter
        code of the filing frequency:
             - A Administratively terminated
             - D Debt
             - M Monthly filer
             - Q Quarterly filer
             - T Terminated
             - W Waived
    """  
    first_f1_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_f1_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first Form 1"""  
    first_file_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_file_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's first filing. This is usually a Form 1 committee registration."""  
    form_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_type'), 'exclude': lambda f: f is None }})
    r"""The form where the underlying data comes from, for example, Form 1 would appear as F1:
        - F1   Statement of Organization
        - F1M  Notification of Multicandidate Status
        - F2   Statement of Candidacy
        - F3   Report of Receipts and Disbursements for an Authorized Committee
        - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
        - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
        - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
        - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
        - F5   Report of Independent Expenditures Made and Contributions Received
        - F6   48 Hour Notice of Contributions/Loans Received
        - F7   Report of Communication Costs by Corporations and Membership Organizations
        - F8   Debt Settlement Plan
        - F9   24 Hour Notice of Disbursements for Electioneering Communications
        - F13  Report of Donations Accepted for Inaugural Committee
        - F99  Miscellaneous Text
        - FRQ  Request for Additional Information
    """  
    jfc_committee: Optional[list[CommitteeDetailJfcCommittee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jfc_committee'), 'exclude': lambda f: f is None }})  
    last_f1_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_f1_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's most recent Form 1"""  
    last_file_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_file_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The day the FEC received the committee's most recent filing"""  
    leadership_pac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadership_pac'), 'exclude': lambda f: f is None }})
    r"""Indicates if the committee is a leadership PAC"""  
    lobbyist_registrant_pac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lobbyist_registrant_pac'), 'exclude': lambda f: f is None }})
    r"""Indicates if the committee is a lobbyist registrant PAC"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records."""  
    organization_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    organization_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_type_full'), 'exclude': lambda f: f is None }})
    r"""The one-letter code for the kind for organization:
            - C corporation
            - L labor organization
            - M membership organization
            - T trade association
            - V cooperative
            - W corporation without capital stock
    """  
    party: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    party_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_full'), 'exclude': lambda f: f is None }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    party_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_type'), 'exclude': lambda f: f is None }})
    r"""Code for the type of party the committee is, only if applicable"""  
    party_type_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('party_type_full'), 'exclude': lambda f: f is None }})
    r"""Description of the type of party the committee is, only if applicable"""  
    sponsor_candidate_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sponsor_candidate_ids'), 'exclude': lambda f: f is None }})
    r"""A unique identifier assigned to each candidate registered with the FEC.
    If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the committee's address as filed on the Form 1"""  
    state_full: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_full'), 'exclude': lambda f: f is None }})
    r"""State of committee as reported on the Form 1"""  
    street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_1'), 'exclude': lambda f: f is None }})
    r"""Street address of committee as reported on the Form 1"""  
    street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_2'), 'exclude': lambda f: f is None }})
    r"""Second line of street address of committee as reported on the Form 1"""  
    treasurer_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_city'), 'exclude': lambda f: f is None }})
    r"""City of committee treasurer as reported on the Form 1"""  
    treasurer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name'), 'exclude': lambda f: f is None }})
    r"""Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown."""  
    treasurer_name_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_1'), 'exclude': lambda f: f is None }})
    r"""Name 1 of committee treasurer as reported on the Form 1"""  
    treasurer_name_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_2'), 'exclude': lambda f: f is None }})
    r"""Name 2 of committee treasurer as reported on the Form 1"""  
    treasurer_name_middle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_middle'), 'exclude': lambda f: f is None }})
    r"""Middle name of committee treasurer as reported on the Form 1"""  
    treasurer_name_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_prefix'), 'exclude': lambda f: f is None }})
    r"""Name Prefix of committee treasurer as reported on the Form 1"""  
    treasurer_name_suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_suffix'), 'exclude': lambda f: f is None }})
    r"""Name suffix of committee treasurer as reported on the Form 1"""  
    treasurer_name_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_name_title'), 'exclude': lambda f: f is None }})
    r"""Name title of committee treasurer as reported on the Form 1"""  
    treasurer_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_phone'), 'exclude': lambda f: f is None }})
    r"""Phone of committee treasurer as reported on the Form 1"""  
    treasurer_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_state'), 'exclude': lambda f: f is None }})
    r"""State of committee treasurer as reported on the Form 1"""  
    treasurer_street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_street_1'), 'exclude': lambda f: f is None }})
    r"""Street of committee treasurer as reported on the Form 1"""  
    treasurer_street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_street_2'), 'exclude': lambda f: f is None }})
    r"""Second line of the street of committee treasurer as reported on the Form 1"""  
    treasurer_zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treasurer_zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of committee treasurer as reported on the Form 1"""  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})
    r"""Website url as reported on the Form 1"""  
    zip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip'), 'exclude': lambda f: f is None }})
    r"""Zip code of committee as reported on the Form 1"""  
    