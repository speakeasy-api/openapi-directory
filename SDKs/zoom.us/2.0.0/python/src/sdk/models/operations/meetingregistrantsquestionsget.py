"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    
class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum(str, Enum):
    r"""Type of the question being asked."""
    SHORT = 'short'
    SINGLE = 'single'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""Answer choices for the question. Can not be used for `short` question type as this type of question requires registrants to type out the answer."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the custom question is required to be answered by participants or not."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of the custom question."""  
    type: Optional[MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the question being asked."""  
    
class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum(str, Enum):
    r"""Field name of the question."""
    ADDRESS = 'address'
    CITY = 'city'
    COUNTRY = 'country'
    ZIP = 'zip'
    STATE = 'state'
    PHONE = 'phone'
    INDUSTRY = 'industry'
    ORG = 'org'
    JOB_TITLE = 'job_title'
    PURCHASING_TIME_FRAME = 'purchasing_time_frame'
    ROLE_IN_PURCHASE_PROCESS = 'role_in_purchase_process'
    NO_OF_EMPLOYEES = 'no_of_employees'
    COMMENTS = 'comments'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions:
    
    field_name: Optional[MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestionsFieldNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_name'), 'exclude': lambda f: f is None }})
    r"""Field name of the question."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not the displayed fields are required to be filled out by registrants."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions:
    r"""Meeting Registrant Questions"""
    
    custom_questions: Optional[list[MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsCustomQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_questions'), 'exclude': lambda f: f is None }})
    r"""Array of Registrant Custom Questions"""  
    questions: Optional[list[MeetingRegistrantsQuestionsGetMeetingRegistrantQuestionsQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""Array of Registrant Questions"""  
    

@dataclasses.dataclass
class MeetingRegistrantsQuestionsGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    meeting_registrant_questions: Optional[MeetingRegistrantsQuestionsGetMeetingRegistrantQuestions] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Meeting Registrant Question object returned
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    