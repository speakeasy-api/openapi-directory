// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PromoteToRelayPathParams struct {
	// Id of the target node
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type PromoteToRelayRequest struct {
	PathParams PromoteToRelayPathParams
}

// PromoteToRelay200ApplicationJSONActionEnum - The id of the action
type PromoteToRelay200ApplicationJSONActionEnum string

const (
	PromoteToRelay200ApplicationJSONActionEnumPromoteToRelay PromoteToRelay200ApplicationJSONActionEnum = "promoteToRelay"
)

func (e *PromoteToRelay200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "promoteToRelay":
		*e = PromoteToRelay200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PromoteToRelay200ApplicationJSONActionEnum: %s", s)
	}
}

// PromoteToRelay200ApplicationJSONResultEnum - Result of the request
type PromoteToRelay200ApplicationJSONResultEnum string

const (
	PromoteToRelay200ApplicationJSONResultEnumSuccess PromoteToRelay200ApplicationJSONResultEnum = "success"
	PromoteToRelay200ApplicationJSONResultEnumError   PromoteToRelay200ApplicationJSONResultEnum = "error"
)

func (e *PromoteToRelay200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = PromoteToRelay200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PromoteToRelay200ApplicationJSONResultEnum: %s", s)
	}
}

// PromoteToRelay200ApplicationJSON - Promote response
type PromoteToRelay200ApplicationJSON struct {
	// The id of the action
	Action PromoteToRelay200ApplicationJSONActionEnum `json:"action"`
	// Success or error message
	Data string `json:"data"`
	// Result of the request
	Result PromoteToRelay200ApplicationJSONResultEnum `json:"result"`
}

type PromoteToRelayResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Promote response
	PromoteToRelay200ApplicationJSONObject *PromoteToRelay200ApplicationJSON
}
