// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QueuedResourceStateStateEnum - State of the QueuedResource request.
type QueuedResourceStateStateEnum string

const (
	QueuedResourceStateStateEnumStateUnspecified QueuedResourceStateStateEnum = "STATE_UNSPECIFIED"
	QueuedResourceStateStateEnumCreating         QueuedResourceStateStateEnum = "CREATING"
	QueuedResourceStateStateEnumAccepted         QueuedResourceStateStateEnum = "ACCEPTED"
	QueuedResourceStateStateEnumProvisioning     QueuedResourceStateStateEnum = "PROVISIONING"
	QueuedResourceStateStateEnumFailed           QueuedResourceStateStateEnum = "FAILED"
	QueuedResourceStateStateEnumDeleting         QueuedResourceStateStateEnum = "DELETING"
	QueuedResourceStateStateEnumActive           QueuedResourceStateStateEnum = "ACTIVE"
	QueuedResourceStateStateEnumSuspending       QueuedResourceStateStateEnum = "SUSPENDING"
	QueuedResourceStateStateEnumSuspended        QueuedResourceStateStateEnum = "SUSPENDED"
)

func (e QueuedResourceStateStateEnum) ToPointer() *QueuedResourceStateStateEnum {
	return &e
}

func (e *QueuedResourceStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACCEPTED":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "FAILED":
		fallthrough
	case "DELETING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "SUSPENDING":
		fallthrough
	case "SUSPENDED":
		*e = QueuedResourceStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueuedResourceStateStateEnum: %v", v)
	}
}

// QueuedResourceState - QueuedResourceState defines the details of the QueuedResource request.
type QueuedResourceState struct {
	// Further data for the accepted state.
	AcceptedData map[string]interface{} `json:"acceptedData,omitempty"`
	// Further data for the active state.
	ActiveData map[string]interface{} `json:"activeData,omitempty"`
	// Further data for the creating state.
	CreatingData map[string]interface{} `json:"creatingData,omitempty"`
	// Further data for the deleting state.
	DeletingData map[string]interface{} `json:"deletingData,omitempty"`
	// Further data for the failed state.
	FailedData *FailedData `json:"failedData,omitempty"`
	// Further data for the provisioning state.
	ProvisioningData map[string]interface{} `json:"provisioningData,omitempty"`
	// State of the QueuedResource request.
	State *QueuedResourceStateStateEnum `json:"state,omitempty"`
	// Further data for the suspended state.
	SuspendedData map[string]interface{} `json:"suspendedData,omitempty"`
	// Further data for the suspending state.
	SuspendingData map[string]interface{} `json:"suspendingData,omitempty"`
}
