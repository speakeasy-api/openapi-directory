<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Web 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's WEB argument structure
     * 
     * Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsResponse
     */
	public function protocolWebGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolWebGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's WEB configuration
     * 
     * Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigResponse
     */
	public function protocolWebGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configWEB = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigWEB', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's WEB statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsResponse
     */
	public function protocolWebGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolWebGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the WEB statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatsHdrResponse
     */
	public function protocolWebGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/web/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolWebGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's WEB traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceResponse
     */
	public function protocolWebGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configWEB = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigWEB', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Add the agent's WEB port
     * 
     * Add port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddResponse
     */
	public function protocolWebPortAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/add/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebPortAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's WEB port
     * 
     * Check the port. 1 means existing, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsResponse
     */
	public function protocolWebPortExists(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/exists/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortExistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolWebPortExists200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Remove the agent's WEB port
     * 
     * Remove port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveResponse
     */
	public function protocolWebPortRemove(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/remove/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebPortRemove200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's WEB port attribute
     * 
     * Set port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetResponse
     */
	public function protocolWebPortSet(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/set/{port}/{protocol}/{version}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortSetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebPortSet200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Start the agent's WEB port
     * 
     * Start port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartResponse
     */
	public function protocolWebPortStart(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/start/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebPortStart200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Stop the agent's WEB port
     * 
     * Stop port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopResponse
     */
	public function protocolWebPortStop(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/port/stop/{port}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebPortStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebPortStop200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's WEB configuration
     * 
     * Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigResponse
     */
	public function protocolWebSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's WEB traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceResponse
     */
	public function protocolWebSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/web/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolWebSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolWebSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}