/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class ReportDefinitionReportDefinitionReportQueryGroupGroupCondition extends SpeakeasyBase {
  /**
   * The compare condition bases' value a
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ValueA" })
  atValueA?: string;

  /**
   * The compare condition bases' value b
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ValueB" })
  atValueB?: string;
}

export class ReportDefinitionReportDefinitionReportQueryGroupGroupFilter extends SpeakeasyBase {
  /**
   * The filter bases' is or
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@IsOr" })
  atIsOr?: boolean;

  /**
   * The filter bases' property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Property" })
  atProperty?: string;

  /**
   * The filter bases' value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Value" })
  atValue?: string;
}

export class ReportDefinitionReportDefinitionReportQueryGroupGroupOrder extends SpeakeasyBase {
  /**
   * The order by bases' property
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Property" })
  atProperty?: string;
}

/**
 * The output bases' output
 */
export enum ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum {
  Element = "Element",
  Attribute = "Attribute",
  Variable = "Variable",
  VariableSum = "VariableSum",
  VariableAppend = "VariableAppend",
  VariablePrepend = "VariablePrepend",
  ElementDatePart = "ElementDatePart",
  InnerText = "InnerText",
}

export class ReportDefinitionReportDefinitionReportQueryGroupGroupOutput extends SpeakeasyBase {
  /**
   * The output bases' max length
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@MaxLength" })
  atMaxLength?: string;

  /**
   * The output bases' output
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Output" })
  atOutput?: ReportDefinitionReportDefinitionReportQueryGroupGroupOutputAtOutputEnum;
}

export class ReportDefinitionReportDefinitionReportQueryGroupGroup extends SpeakeasyBase {
  /**
   * The entity groups' group name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@GroupName" })
  atGroupName?: string;

  /**
   * The entity groups' item name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@ItemName" })
  atItemName?: string;

  /**
   * The entity groups' loop expression
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@LoopExpression" })
  atLoopExpression?: string;

  /**
   * The entity groups' predicate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Predicate" })
  atPredicate?: string;

  /**
   * The entity groups' selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Selector" })
  atSelector?: string;

  /**
   * The entity groups' unique key variable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@UniqueKeyVariable" })
  atUniqueKeyVariable?: string;

  /**
   * The entity groups' conditions
   */
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryGroupGroupCondition,
  })
  @Expose({ name: "Condition" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroupGroupCondition)
  condition?: ReportDefinitionReportDefinitionReportQueryGroupGroupCondition[];

  /**
   * The entity groups' filters
   */
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryGroupGroupFilter,
  })
  @Expose({ name: "Filter" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroupGroupFilter)
  filter?: ReportDefinitionReportDefinitionReportQueryGroupGroupFilter[];

  /**
   * The entity groups' ordering
   */
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryGroupGroupOrder,
  })
  @Expose({ name: "Order" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroupGroupOrder)
  order?: ReportDefinitionReportDefinitionReportQueryGroupGroupOrder[];

  /**
   * The entity groups' outputs
   */
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryGroupGroupOutput,
  })
  @Expose({ name: "Output" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroupGroupOutput)
  output?: ReportDefinitionReportDefinitionReportQueryGroupGroupOutput[];
}

/**
 * The querys' groups
 */
export class ReportDefinitionReportDefinitionReportQueryGroup extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryGroupGroup,
  })
  @Expose({ name: "Group" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroupGroup)
  group?: ReportDefinitionReportDefinitionReportQueryGroupGroup[];
}

export class ReportDefinitionReportDefinitionReportQueryVariableVariable extends SpeakeasyBase {
  /**
   * The name value pairs' name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Name" })
  atName?: string;

  /**
   * The name value pairs' value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "@Value" })
  atValue?: string;
}

/**
 * The querys' variables
 */
export class ReportDefinitionReportDefinitionReportQueryVariable extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: ReportDefinitionReportDefinitionReportQueryVariableVariable,
  })
  @Expose({ name: "Variable" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryVariableVariable)
  variable?: ReportDefinitionReportDefinitionReportQueryVariableVariable[];
}

/**
 * The report definitions' report query
 */
export class ReportDefinitionReportDefinitionReportQuery extends SpeakeasyBase {
  /**
   * The querys' encoding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Encoding" })
  encoding?: string;

  /**
   * The querys' exclude null or empty elements
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ExcludeNullOrEmptyElements" })
  excludeNullOrEmptyElements?: boolean;

  /**
   * The querys' groups
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Groups" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryGroup)
  groups?: ReportDefinitionReportDefinitionReportQueryGroup;

  /**
   * The querys' root node name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RootNodeName" })
  rootNodeName?: string;

  /**
   * The querys' suppress metric attributes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SuppressMetricAttributes" })
  suppressMetricAttributes?: boolean;

  /**
   * The querys' variables
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Variables" })
  @Type(() => ReportDefinitionReportDefinitionReportQueryVariable)
  variables?: ReportDefinitionReportDefinitionReportQueryVariable;
}

export class ReportDefinitionReportDefinition extends SpeakeasyBase {
  /**
   * The report definitions' active
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Active" })
  active?: boolean;

  /**
   * The report definitions' readonly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Readonly" })
  readonly?: boolean;

  /**
   * The report definitions' report query
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReportQuery" })
  @Type(() => ReportDefinitionReportDefinitionReportQuery)
  reportQuery?: ReportDefinitionReportDefinitionReportQuery;

  /**
   * The report definitions' supported transforms
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupportedTransforms" })
  supportedTransforms?: string;

  /**
   * The report definitions' title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Title" })
  title?: string;

  /**
   * The report definitions' version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Version" })
  version?: string;
}

/**
 * The report definition object.
 */
export class ReportDefinition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ReportDefinition" })
  @Type(() => ReportDefinitionReportDefinition)
  reportDefinition?: ReportDefinitionReportDefinition;
}
