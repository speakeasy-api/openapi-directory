"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import activity as shared_activity
from ..shared import closeddays as shared_closeddays
from ..shared import journeychannelsettings as shared_journeychannelsettings
from ..shared import journeylimits as shared_journeylimits
from ..shared import journeyschedule as shared_journeyschedule
from ..shared import openhours as shared_openhours
from ..shared import quiettime as shared_quiettime
from ..shared import startcondition as shared_startcondition
from ..shared import state_enum as shared_state_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JourneyResponse:
    r"""Provides information about the status, configuration, and other settings for a journey."""
    
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationId') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    activities: Optional[dict[str, shared_activity.Activity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Activities'), 'exclude': lambda f: f is None }})  
    closed_days: Optional[shared_closeddays.ClosedDays] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClosedDays'), 'exclude': lambda f: f is None }})  
    creation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate'), 'exclude': lambda f: f is None }})  
    journey_channel_settings: Optional[shared_journeychannelsettings.JourneyChannelSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JourneyChannelSettings'), 'exclude': lambda f: f is None }})  
    last_modified_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedDate'), 'exclude': lambda f: f is None }})  
    limits: Optional[shared_journeylimits.JourneyLimits] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limits'), 'exclude': lambda f: f is None }})  
    local_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocalTime'), 'exclude': lambda f: f is None }})  
    open_hours: Optional[shared_openhours.OpenHours] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpenHours'), 'exclude': lambda f: f is None }})  
    quiet_time: Optional[shared_quiettime.QuietTime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuietTime'), 'exclude': lambda f: f is None }})  
    refresh_frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefreshFrequency'), 'exclude': lambda f: f is None }})  
    refresh_on_segment_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefreshOnSegmentUpdate'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_journeyschedule.JourneySchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    sending_schedule: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SendingSchedule'), 'exclude': lambda f: f is None }})  
    start_activity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartActivity'), 'exclude': lambda f: f is None }})  
    start_condition: Optional[shared_startcondition.StartCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartCondition'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_state_enum.StateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    wait_for_quiet_time: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WaitForQuietTime'), 'exclude': lambda f: f is None }})  
    