// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KkidAllowancePostSecurity struct {
	AuthKey shared.SchemeAuthKey `security:"scheme,type=apiKey,subtype=header"`
}

// KkidAllowancePostTransactionTypeEnum - Sort order:
//   - `Add` - Add Allowance
//   - `Subtract` - Subtract Allowance
type KkidAllowancePostTransactionTypeEnum string

const (
	KkidAllowancePostTransactionTypeEnumAdd      KkidAllowancePostTransactionTypeEnum = "Add"
	KkidAllowancePostTransactionTypeEnumSubtract KkidAllowancePostTransactionTypeEnum = "Subtract"
)

func (e *KkidAllowancePostTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Add":
		fallthrough
	case "Subtract":
		*e = KkidAllowancePostTransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidAllowancePostTransactionTypeEnum: %s", s)
	}
}

type KkidAllowancePostQueryParams struct {
	// amount you wish to Add/Subtract (subtract value should be a negative value)
	Amount float64 `queryParam:"style=form,explode=true,name=amount"`
	// Description (reason) of allowance transaction
	Description string `queryParam:"style=form,explode=true,name=description"`
	// userID of the kid
	KidUserID int64 `queryParam:"style=form,explode=true,name=kidUserId"`
	// Transaction Type (Add/Subtract)
	TransactionType KkidAllowancePostTransactionTypeEnum `queryParam:"style=form,explode=true,name=transactionType"`
}

type KkidAllowancePostRequest struct {
	QueryParams KkidAllowancePostQueryParams
	Security    KkidAllowancePostSecurity
}

type KkidAllowancePostResponse struct {
	// Method Not Allowed- API user does not have access to use this method
	FourHundredAndFive *shared.FourHundredAndFive
	// API Access Denied! Your API key is invalid, expired, or not supplied!
	FourHundredAndTwelve *shared.FourHundredAndTwelve
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
	// No Data Returned
	Nodata *shared.Nodata
	// search results matching criteria
	Success *shared.Success
}
