// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type HealthInformationNotificationNotificationNotifierTypeEnum string

const (
	HealthInformationNotificationNotificationNotifierTypeEnumHiu HealthInformationNotificationNotificationNotifierTypeEnum = "HIU"
	HealthInformationNotificationNotificationNotifierTypeEnumHip HealthInformationNotificationNotificationNotifierTypeEnum = "HIP"
)

func (e HealthInformationNotificationNotificationNotifierTypeEnum) ToPointer() *HealthInformationNotificationNotificationNotifierTypeEnum {
	return &e
}

func (e *HealthInformationNotificationNotificationNotifierTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIU":
		fallthrough
	case "HIP":
		*e = HealthInformationNotificationNotificationNotifierTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthInformationNotificationNotificationNotifierTypeEnum: %v", v)
	}
}

type HealthInformationNotificationNotificationNotifier struct {
	ID   *string                                                    `json:"id,omitempty"`
	Type *HealthInformationNotificationNotificationNotifierTypeEnum `json:"type,omitempty"`
}

type HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum string

const (
	HealthInformationNotificationNotificationStatusNotificationSessionStatusEnumTransferred HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum = "TRANSFERRED"
	HealthInformationNotificationNotificationStatusNotificationSessionStatusEnumFailed      HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum = "FAILED"
)

func (e HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum) ToPointer() *HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum {
	return &e
}

func (e *HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRANSFERRED":
		fallthrough
	case "FAILED":
		*e = HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum: %v", v)
	}
}

type HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum string

const (
	HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnumDelivered HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum = "DELIVERED"
	HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnumOk        HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum = "OK"
	HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnumErrored   HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum = "ERRORED"
)

func (e HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum) ToPointer() *HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum {
	return &e
}

func (e *HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DELIVERED":
		fallthrough
	case "OK":
		fallthrough
	case "ERRORED":
		*e = HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum: %v", v)
	}
}

type HealthInformationNotificationNotificationStatusNotificationStatusResponses struct {
	CareContextReference string                                                                                 `json:"careContextReference"`
	Description          *string                                                                                `json:"description,omitempty"`
	HiStatus             HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatusEnum `json:"hiStatus"`
}

type HealthInformationNotificationNotificationStatusNotification struct {
	HipID           string                                                                       `json:"hipId"`
	SessionStatus   HealthInformationNotificationNotificationStatusNotificationSessionStatusEnum `json:"sessionStatus"`
	StatusResponses []HealthInformationNotificationNotificationStatusNotificationStatusResponses `json:"statusResponses,omitempty"`
}

type HealthInformationNotificationNotification struct {
	ConsentID          string                                                      `json:"consentId"`
	DoneAt             time.Time                                                   `json:"doneAt"`
	Notifier           HealthInformationNotificationNotificationNotifier           `json:"notifier"`
	StatusNotification HealthInformationNotificationNotificationStatusNotification `json:"statusNotification"`
	TransactionID      string                                                      `json:"transactionId"`
}

type HealthInformationNotification struct {
	Notification HealthInformationNotificationNotification `json:"notification"`
	// a nonce, unique for each HTTP request.
	RequestID string `json:"requestId"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
