/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ErrorT } from "./error";
import { Expose, Type } from "class-transformer";

/**
 * A type that defines the response fields used by the <b>Keyword</b> method.
 */
export class KeywordResponse extends SpeakeasyBase {
  /**
   * The identifier of the ad group that the keyword was added to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adGroupId" })
  adGroupId?: string;

  /**
   * This container will be returned if there is an issue creating the corresponding keyword and/or adding that keyword to the corresponding ad group.
   */
  @SpeakeasyMetadata({ elemType: ErrorT })
  @Expose({ name: "errors" })
  @Type(() => ErrorT)
  errors?: ErrorT[];

  /**
   * The getKeyword URI for the keyword, which is used to retrieve the keyword. This URI will be returned for each successfully created keyword.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * A unique eBay-assigned ID for a keyword that is generated for an ad group. This keyword ID will be generated for each successfully created keyword.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keywordId" })
  keywordId?: string;

  /**
   * The text of the keyword.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keywordText" })
  keywordText?: string;

  /**
   * A field that defines the match type for the keyword.<br /><br /><b>Valid Values:</b><ul><li><code>BROAD</code></li><li><code>EXACT</code></li><li><code>PHRASE</code></li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/pls:MatchTypeEnum'>eBay API documentation</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matchType" })
  matchType?: string;

  /**
   * An HTTP status code is returned for each keyword to indicate the success or failure of adding that keyword to the ad group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: number;
}
