"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import automaticterminationmode_enum as shared_automaticterminationmode_enum
from ..shared import createlaunchprofileresponse as shared_createlaunchprofileresponse
from ..shared import sessionpersistencemode_enum as shared_sessionpersistencemode_enum
from ..shared import streamconfigurationsessionbackup as shared_streamconfigurationsessionbackup
from ..shared import streamconfigurationsessionstorage as shared_streamconfigurationsessionstorage
from ..shared import streamingclipboardmode_enum as shared_streamingclipboardmode_enum
from ..shared import streaminginstancetype_enum as shared_streaminginstancetype_enum
from ..shared import volumeconfiguration as shared_volumeconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateLaunchProfileRequestBodyStreamConfiguration:
    r"""Configuration for streaming workstations created using this launch profile."""
    
    automatic_termination_mode: Optional[shared_automaticterminationmode_enum.AutomaticTerminationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automaticTerminationMode'), 'exclude': lambda f: f is None }})  
    clipboard_mode: Optional[shared_streamingclipboardmode_enum.StreamingClipboardModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clipboardMode'), 'exclude': lambda f: f is None }})  
    ec2_instance_types: Optional[list[shared_streaminginstancetype_enum.StreamingInstanceTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceTypes'), 'exclude': lambda f: f is None }})  
    max_session_length_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSessionLengthInMinutes'), 'exclude': lambda f: f is None }})  
    max_stopped_session_length_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxStoppedSessionLengthInMinutes'), 'exclude': lambda f: f is None }})  
    session_backup: Optional[shared_streamconfigurationsessionbackup.StreamConfigurationSessionBackup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionBackup'), 'exclude': lambda f: f is None }})  
    session_persistence_mode: Optional[shared_sessionpersistencemode_enum.SessionPersistenceModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionPersistenceMode'), 'exclude': lambda f: f is None }})  
    session_storage: Optional[shared_streamconfigurationsessionstorage.StreamConfigurationSessionStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionStorage'), 'exclude': lambda f: f is None }})  
    streaming_image_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingImageIds'), 'exclude': lambda f: f is None }})  
    volume_configuration: Optional[shared_volumeconfiguration.VolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeConfiguration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateLaunchProfileRequestBody:
    
    ec2_subnet_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2SubnetIds') }})
    r"""Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types."""  
    launch_profile_protocol_versions: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchProfileProtocolVersions') }})
    r"""The version number of the protocol that is used by the launch profile. The only valid version is \\"2021-03-31\\"."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name for the launch profile."""  
    stream_configuration: CreateLaunchProfileRequestBodyStreamConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamConfiguration') }})
    r"""Configuration for streaming workstations created using this launch profile."""  
    studio_component_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('studioComponentIds') }})
    r"""Unique identifiers for a collection of studio components that can be used with this launch profile."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A human-readable description of the launch profile."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A collection of labels, in the form of key-value pairs, that apply to this resource."""  
    

@dataclasses.dataclass
class CreateLaunchProfileRequest:
    
    request_body: CreateLaunchProfileRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    studio_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'studioId', 'style': 'simple', 'explode': False }})
    r"""The studio ID."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_client_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Client-Token', 'style': 'simple', 'explode': False }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency."""  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateLaunchProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    create_launch_profile_response: Optional[shared_createlaunchprofileresponse.CreateLaunchProfileResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    