"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import filecachefailuredetails as shared_filecachefailuredetails
from ..shared import filecachelifecycle_enum as shared_filecachelifecycle_enum
from ..shared import filecachelustreconfiguration as shared_filecachelustreconfiguration
from ..shared import filecachetype_enum as shared_filecachetype_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileCacheCreating:
    r"""The response object for the Amazon File Cache resource being created in the <code>CreateFileCache</code> operation."""
    
    copy_tags_to_data_repository_associations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToDataRepositoryAssociations'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time."""  
    data_repository_association_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataRepositoryAssociationIds'), 'exclude': lambda f: f is None }})  
    dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DNSName'), 'exclude': lambda f: f is None }})  
    failure_details: Optional[shared_filecachefailuredetails.FileCacheFailureDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureDetails'), 'exclude': lambda f: f is None }})  
    file_cache_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileCacheId'), 'exclude': lambda f: f is None }})  
    file_cache_type: Optional[shared_filecachetype_enum.FileCacheTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileCacheType'), 'exclude': lambda f: f is None }})  
    file_cache_type_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileCacheTypeVersion'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    lifecycle: Optional[shared_filecachelifecycle_enum.FileCacheLifecycleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lifecycle'), 'exclude': lambda f: f is None }})  
    lustre_configuration: Optional[shared_filecachelustreconfiguration.FileCacheLustreConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LustreConfiguration'), 'exclude': lambda f: f is None }})  
    network_interface_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkInterfaceIds'), 'exclude': lambda f: f is None }})
    r"""A list of network interface IDs."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})
    r"""An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources."""  
    resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceARN'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>."""  
    storage_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageCapacity'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubnetIds'), 'exclude': lambda f: f is None }})
    r"""A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})
    r"""A list of <code>Tag</code> values, with a maximum of 50 elements."""  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})
    r"""The ID of your virtual private cloud (VPC). For more information, see <a href=\\"https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html\\">VPC and subnets</a> in the <i>Amazon VPC User Guide</i>."""  
    