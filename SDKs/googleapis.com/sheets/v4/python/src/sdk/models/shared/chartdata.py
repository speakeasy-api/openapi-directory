"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chartgrouprule as shared_chartgrouprule
from ..shared import chartsourcerange as shared_chartsourcerange
from ..shared import datasourcecolumnreference as shared_datasourcecolumnreference
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ChartDataAggregateTypeEnum(str, Enum):
    r"""The aggregation type for the series of a data source chart. Only supported for data source charts."""
    CHART_AGGREGATE_TYPE_UNSPECIFIED = 'CHART_AGGREGATE_TYPE_UNSPECIFIED'
    AVERAGE = 'AVERAGE'
    COUNT = 'COUNT'
    MAX = 'MAX'
    MEDIAN = 'MEDIAN'
    MIN = 'MIN'
    SUM = 'SUM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChartData:
    r"""The data included in a domain or series."""
    
    aggregate_type: Optional[ChartDataAggregateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregateType'), 'exclude': lambda f: f is None }})
    r"""The aggregation type for the series of a data source chart. Only supported for data source charts."""  
    column_reference: Optional[shared_datasourcecolumnreference.DataSourceColumnReference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnReference'), 'exclude': lambda f: f is None }})
    r"""An unique identifier that references a data source column."""  
    group_rule: Optional[shared_chartgrouprule.ChartGroupRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupRule'), 'exclude': lambda f: f is None }})
    r"""An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type."""  
    source_range: Optional[shared_chartsourcerange.ChartSourceRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceRange'), 'exclude': lambda f: f is None }})
    r"""Source ranges for a chart."""  
    