"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VideosEmbedPrivacy:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_privacy_domain(self, request: operations.AddVideoPrivacyDomainRequest, security: operations.AddVideoPrivacyDomainSecurity) -> operations.AddVideoPrivacyDomainResponse:
        r"""Permit a video to be embedded on a domain
        If domain privacy is enabled for this video, this method permits the video to be embedded on the specified domain.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoPrivacyDomainRequest, base_url, '/videos/{video_id}/privacy/domains/{domain}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoPrivacyDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_privacy_domain(self, request: operations.DeleteVideoPrivacyDomainRequest, security: operations.DeleteVideoPrivacyDomainSecurity) -> operations.DeleteVideoPrivacyDomainResponse:
        r"""Restrict a video from being embedded on a domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoPrivacyDomainRequest, base_url, '/videos/{video_id}/privacy/domains/{domain}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoPrivacyDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_video_privacy_domains(self, request: operations.GetVideoPrivacyDomainsRequest) -> operations.GetVideoPrivacyDomainsResponse:
        r"""Get all the domains on which a video can be embedded"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVideoPrivacyDomainsRequest, base_url, '/videos/{video_id}/privacy/domains', request)
        
        query_params = utils.get_query_params(operations.GetVideoPrivacyDomainsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVideoPrivacyDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.domain+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Domain]])
                res.domains = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.domain+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    