// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteClassifierXAmzTargetEnum
type DeleteClassifierXAmzTargetEnum string

const (
	DeleteClassifierXAmzTargetEnumAwsGlueDeleteClassifier DeleteClassifierXAmzTargetEnum = "AWSGlue.DeleteClassifier"
)

func (e *DeleteClassifierXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSGlue.DeleteClassifier":
		*e = DeleteClassifierXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteClassifierXAmzTargetEnum: %s", s)
	}
}

type DeleteClassifierRequest struct {
	DeleteClassifierRequest shared.DeleteClassifierRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              DeleteClassifierXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteClassifierResponse struct {
	ContentType string
	// Success
	DeleteClassifierResponse map[string]interface{}
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
