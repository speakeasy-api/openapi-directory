"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def oslogin_users_get_login_profile(self, request: operations.OsloginUsersGetLoginProfileRequest, security: operations.OsloginUsersGetLoginProfileSecurity) -> operations.OsloginUsersGetLoginProfileResponse:
        r"""Retrieves the profile information used for logging in to a virtual machine on Google Compute Engine."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersGetLoginProfileRequest, base_url, '/v1/{name}/loginProfile', request)
        
        query_params = utils.get_query_params(operations.OsloginUsersGetLoginProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersGetLoginProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LoginProfile])
                res.login_profile = out

        return res

    def oslogin_users_import_ssh_public_key(self, request: operations.OsloginUsersImportSSHPublicKeyRequest, security: operations.OsloginUsersImportSSHPublicKeySecurity) -> operations.OsloginUsersImportSSHPublicKeyResponse:
        r"""Adds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersImportSSHPublicKeyRequest, base_url, '/v1/{parent}:importSshPublicKey', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ssh_public_key_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsloginUsersImportSSHPublicKeyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersImportSSHPublicKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImportSSHPublicKeyResponse])
                res.import_ssh_public_key_response = out

        return res

    def oslogin_users_ssh_public_keys_create(self, request: operations.OsloginUsersSSHPublicKeysCreateRequest, security: operations.OsloginUsersSSHPublicKeysCreateSecurity) -> operations.OsloginUsersSSHPublicKeysCreateResponse:
        r"""Create an SSH public key"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersSSHPublicKeysCreateRequest, base_url, '/v1/{parent}/sshPublicKeys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ssh_public_key_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsloginUsersSSHPublicKeysCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersSSHPublicKeysCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSHPublicKey])
                res.ssh_public_key = out

        return res

    def oslogin_users_ssh_public_keys_delete(self, request: operations.OsloginUsersSSHPublicKeysDeleteRequest, security: operations.OsloginUsersSSHPublicKeysDeleteSecurity) -> operations.OsloginUsersSSHPublicKeysDeleteResponse:
        r"""Deletes an SSH public key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersSSHPublicKeysDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.OsloginUsersSSHPublicKeysDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersSSHPublicKeysDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def oslogin_users_ssh_public_keys_get(self, request: operations.OsloginUsersSSHPublicKeysGetRequest, security: operations.OsloginUsersSSHPublicKeysGetSecurity) -> operations.OsloginUsersSSHPublicKeysGetResponse:
        r"""Retrieves an SSH public key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersSSHPublicKeysGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.OsloginUsersSSHPublicKeysGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersSSHPublicKeysGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSHPublicKey])
                res.ssh_public_key = out

        return res

    def oslogin_users_ssh_public_keys_patch(self, request: operations.OsloginUsersSSHPublicKeysPatchRequest, security: operations.OsloginUsersSSHPublicKeysPatchSecurity) -> operations.OsloginUsersSSHPublicKeysPatchResponse:
        r"""Updates an SSH public key and returns the profile information. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.OsloginUsersSSHPublicKeysPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ssh_public_key_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.OsloginUsersSSHPublicKeysPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OsloginUsersSSHPublicKeysPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SSHPublicKey])
                res.ssh_public_key = out

        return res

    