"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_prediction as shared_tfl_api_presentation_entities_prediction
from enum import Enum
from typing import Optional

class LineArrivalsDirectionEnum(str, Enum):
    r"""Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all"""
    INBOUND = 'inbound'
    OUTBOUND = 'outbound'
    ALL = 'all'


@dataclasses.dataclass
class LineArrivalsRequest:
    
    ids: list[str] = dataclasses.field(metadata={'path_param': { 'field_name': 'ids', 'style': 'simple', 'explode': False }})
    r"""A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids."""  
    stop_point_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'stopPointId', 'style': 'simple', 'explode': False }})
    r"""Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)"""  
    destination_station_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'destinationStationId', 'style': 'form', 'explode': True }})
    r"""Optional. Id of destination stop"""  
    direction: Optional[LineArrivalsDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all"""  
    

@dataclasses.dataclass
class LineArrivalsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_predictions: Optional[list[shared_tfl_api_presentation_entities_prediction.TflAPIPresentationEntitiesPrediction]] = dataclasses.field(default=None)
    r"""OK"""  
    