"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import annotationtype_enum as shared_annotationtype_enum
from ..shared import schemavaluetype_enum as shared_schemavaluetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TsvStoreOptions:
    r"""File settings for a TSV store."""
    
    annotation_type: Optional[shared_annotationtype_enum.AnnotationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationType'), 'exclude': lambda f: f is None }})  
    format_to_header: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatToHeader'), 'exclude': lambda f: f is None }})  
    schema: Optional[list[dict[str, shared_schemavaluetype_enum.SchemaValueTypeEnum]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema'), 'exclude': lambda f: f is None }})  
    