/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetIceServerConfigRequestBody {
    /**
     * The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 
     */
    @JsonProperty("ChannelARN")
    public String channelARN;

    public GetIceServerConfigRequestBody withChannelARN(String channelARN) {
        this.channelARN = channelARN;
        return this;
    }
    
    /**
     * Unique identifier for the viewer. Must be unique within the signaling channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ClientId")
    public String clientId;

    public GetIceServerConfigRequestBody withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Specifies the desired service. Currently, &lt;code&gt;TURN&lt;/code&gt; is the only valid value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Service")
    public GetIceServerConfigRequestBodyServiceEnum service;

    public GetIceServerConfigRequestBody withService(GetIceServerConfigRequestBodyServiceEnum service) {
        this.service = service;
        return this;
    }
    
    /**
     * An optional user ID to be associated with the credentials.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Username")
    public String username;

    public GetIceServerConfigRequestBody withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public GetIceServerConfigRequestBody(@JsonProperty("ChannelARN") String channelARN) {
        this.channelARN = channelARN;
  }
}
