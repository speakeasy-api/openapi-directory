/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetSpacesSpaceIdFoldersIdAccountingsJournalRequest extends SpeakeasyBase {
  /**
   * accounting dates of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AccountingDate",
  })
  accountingDate?: string;

  /**
   * class of the document
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Class" })
  class?: string;

  /**
   * code of the document
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Code" })
  code?: string;

  /**
   * delivery dates of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DeliveryDate",
  })
  deliveryDate?: string;

  /**
   * numbers of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Number",
  })
  number?: number;

  /**
   * Name of the target folder of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TargetFolderName",
  })
  targetFolderName?: string;

  /**
   * workbook of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Workbook",
  })
  workbook?: string;

  /**
   * yearmonth of the document
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=YearMonth",
  })
  yearMonth?: string;

  /**
   * Id of the customer folder
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * Id of the space
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spaceId",
  })
  spaceId: string;
}

export class GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONTargetFolder extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;
}

export enum GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONWorkbookEnum {
  Customer = "customer",
  Provider = "provider",
  Bank = "bank",
  CashWoucher = "cashWoucher",
  Fiscal = "fiscal",
  Insurance = "insurance",
  Social = "social",
  Other = "other",
  Permanent = "permanent",
}

export class GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AccountingDate" })
  accountingDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AccountingDocumentId" })
  accountingDocumentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Class" })
  class?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "DeliveryDate" })
  deliveryDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Number" })
  number?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetFolder" })
  @Type(
    () =>
      GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONTargetFolder
  )
  targetFolder?: GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONTargetFolder;

  @SpeakeasyMetadata()
  @Expose({ name: "Workbook" })
  workbook?: GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONWorkbookEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "YearMonth" })
  yearMonth?: string;
}

export class GetSpacesSpaceIdFoldersIdAccountingsJournalResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * A list of accountings document (journal)
   */
  @SpeakeasyMetadata({
    elemType: GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON,
  })
  getSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONObjects?: GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON[];
}
