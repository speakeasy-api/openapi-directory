"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Email:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def email_send_email_statement(self, request: shared.EmailStatementDto) -> operations.EmailSendEmailStatementResponse:
        r"""Sends a Statement email.
        If \\"toAddress\\" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/email/sendEmailStatement'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmailSendEmailStatementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.email_send_email_statement_200_application_json_object = out

        return res

    def email_send_quote(self, request: shared.EmailQuoteDto) -> operations.EmailSendQuoteResponse:
        r"""Sends a Quote email.
        If \\"toAddress\\" is not empty then email will be sent to this address. Otherwise email will be sent to Statement Customer's address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/email/sendQuote'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmailSendQuoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.email_send_quote_200_application_json_object = out

        return res

    def email_send_sales_invoice(self, request: shared.SalesInvoiceEmailInfoDto) -> operations.EmailSendSalesInvoiceResponse:
        r"""Sends a Sales Invoice email.
        If \\"toAddress\\" is not empty then email will be sent to this address. Otherwise email will be sent to Sales Invoice Customer's address.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/email/sendSalesInvoice'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EmailSendSalesInvoiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.email_send_sales_invoice_200_application_json_object = out

        return res

    