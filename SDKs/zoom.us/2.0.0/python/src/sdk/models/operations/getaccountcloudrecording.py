"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAccountCloudRecordingSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetAccountCloudRecordingRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the account."""  
    from_: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""The start date in UTC for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    to: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month."""  
    
class GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum(str, Enum):
    r"""The recording file type. The value of this field could be one of the following:<br>
    * `MP4`: Video file of the recording.<br>
    * `M4A` Audio-only file of the recording.<br>
    * `TB`: Timestamp file of the recording in JSON format.<br> 
    * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> 
    * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
    * `CC`: File containing closed captions of the recording in VTT file format.<br>
    * `CSV`: File containing polling data in csv format.
    
    A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
    	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
    """
    MP4 = 'MP4'
    M4_A = 'M4A'
    CHAT = 'CHAT'
    TRANSCRIPT = 'TRANSCRIPT'
    CC = 'CC'
    CSV = 'CSV'
    TB = 'TB'

class GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum(str, Enum):
    r"""The recording type. The value of this field can be one of the following:<br>
    * `shared_screen_with_speaker_view(CC)`
    * `shared_screen_with_speaker_view`
    * `shared_screen_with_gallery_view`
    * `shared_screen`
    * `active_speaker`
    * `gallery_view`
    * `audio_only`
    * `audio_transcript`
    * `chat_file`
    * `host_video`
    * `closed_caption`
    * `poll`
    * `timeline`
    * `thumbnail`
    """
    SHARED_SCREEN_WITH_SPEAKER_VIEW_CC_ = 'shared_screen_with_speaker_view(CC)'
    SHARED_SCREEN_WITH_SPEAKER_VIEW = 'shared_screen_with_speaker_view'
    SHARED_SCREEN_WITH_GALLERY_VIEW = 'shared_screen_with_gallery_view'
    ACTIVE_SPEAKER = 'active_speaker'
    GALLERY_VIEW = 'gallery_view'
    SHARED_SCREEN = 'shared_screen'
    AUDIO_ONLY = 'audio_only'
    AUDIO_TRANSCRIPT = 'audio_transcript'
    CHAT_FILE = 'chat_file'
    POLL = 'poll'
    HOST_VIDEO = 'host_video'
    CLOSED_CAPTION = 'closed_caption'
    TIMELINE = 'timeline'
    THUMBNAIL = 'thumbnail'

class GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum(str, Enum):
    r"""The status of the recording, either `completed` or `processing`."""
    COMPLETED = 'completed'
    PROCESSING = 'processing'


@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles:
    
    download_url: Optional[str] = dataclasses.field(default=None)
    r"""The URL using which the recording can be downloaded"""  
    file_size: Optional[float] = dataclasses.field(default=None)
    r"""The size of the recording file in bytes."""  
    file_type: Optional[GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum] = dataclasses.field(default=None)
    r"""The recording file type. The value of this field could be one of the following:<br>
    * `MP4`: Video file of the recording.<br>
    * `M4A` Audio-only file of the recording.<br>
    * `TB`: Timestamp file of the recording in JSON format.<br> 
    * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> 
    * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
    * `CC`: File containing closed captions of the recording in VTT file format.<br>
    * `CSV`: File containing polling data in csv format.
    
    A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
    	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
    """  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Recording ID. Identifier for the recording."""  
    meeting_id: Optional[str] = dataclasses.field(default=None)
    r"""Universally unique identifier of the meeting instance that was being recorded."""  
    play_url: Optional[str] = dataclasses.field(default=None)
    r"""The URL using which recording can be played."""  
    recording_end: Optional[str] = dataclasses.field(default=None)
    r"""The date and time at which the recording ended."""  
    recording_start: Optional[str] = dataclasses.field(default=None)
    r"""The date and time at which the recording started."""  
    recording_type: Optional[GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum] = dataclasses.field(default=None)
    r"""The recording type. The value of this field can be one of the following:<br>
    * `shared_screen_with_speaker_view(CC)`
    * `shared_screen_with_speaker_view`
    * `shared_screen_with_gallery_view`
    * `shared_screen`
    * `active_speaker`
    * `gallery_view`
    * `audio_only`
    * `audio_transcript`
    * `chat_file`
    * `host_video`
    * `closed_caption`
    * `poll`
    * `timeline`
    * `thumbnail`
    """  
    status: Optional[GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum] = dataclasses.field(default=None)
    r"""The status of the recording, either `completed` or `processing`."""  
    

@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationXMLMeetings:
    
    duration: Optional[int] = dataclasses.field(default=None)
    r"""The scheduled duration of the meeting."""  
    host_id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the user who is set as the host of the meeting."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Meeting ID - Unique Identifier of a meeting, also known as Meeting Number."""  
    recording_count: Optional[int] = dataclasses.field(default=None)
    r"""The total number of recordings retrieved from the account."""  
    recording_files: Optional[list[GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles]] = dataclasses.field(default=None)
    r"""Recording files object"""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""The date and time at which the meeting started."""  
    topic: Optional[str] = dataclasses.field(default=None)
    r"""Meeting topic."""  
    total_size: Optional[int] = dataclasses.field(default=None)
    r"""The total size of the meeting in bytes."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Universally Unique Identifier of a meeting instance. Each meeting instance will have its own meeting UUID."""  
    

@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationXML:
    r"""**Response Error Code:** `200` <br>
    Only available for Paid account.
    
    **HTTP Status Code:** `200` <br>
    Recording(s) listed successfully.
    """
    
    from_: Optional[datetime] = dataclasses.field(default=None)
    r"""The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”."""  
    meetings: Optional[list[GetAccountCloudRecording200ApplicationXMLMeetings]] = dataclasses.field(default=None)
    r"""Meetings Object"""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    to: Optional[datetime] = dataclasses.field(default=None)
    r"""The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""Total number of records found for this request across all pages."""  
    
class GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum(str, Enum):
    r"""The recording file type. The value of this field could be one of the following:<br>
    * `MP4`: Video file of the recording.<br>
    * `M4A` Audio-only file of the recording.<br>
    * `TB`: Timestamp file of the recording in JSON format.<br> 
    * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> 
    * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
    * `CC`: File containing closed captions of the recording in VTT file format.<br>
    * `CSV`: File containing polling data in csv format.
    
    A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
    	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
    """
    MP4 = 'MP4'
    M4_A = 'M4A'
    CHAT = 'CHAT'
    TRANSCRIPT = 'TRANSCRIPT'
    CC = 'CC'
    CSV = 'CSV'
    TB = 'TB'

class GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum(str, Enum):
    r"""The recording type. The value of this field can be one of the following:<br>
    * `shared_screen_with_speaker_view(CC)`
    * `shared_screen_with_speaker_view`
    * `shared_screen_with_gallery_view`
    * `shared_screen`
    * `active_speaker`
    * `gallery_view`
    * `audio_only`
    * `audio_transcript`
    * `chat_file`
    * `host_video`
    * `closed_caption`
    * `poll`
    * `timeline`
    * `thumbnail`
    """
    SHARED_SCREEN_WITH_SPEAKER_VIEW_CC_ = 'shared_screen_with_speaker_view(CC)'
    SHARED_SCREEN_WITH_SPEAKER_VIEW = 'shared_screen_with_speaker_view'
    SHARED_SCREEN_WITH_GALLERY_VIEW = 'shared_screen_with_gallery_view'
    ACTIVE_SPEAKER = 'active_speaker'
    GALLERY_VIEW = 'gallery_view'
    SHARED_SCREEN = 'shared_screen'
    AUDIO_ONLY = 'audio_only'
    AUDIO_TRANSCRIPT = 'audio_transcript'
    CHAT_FILE = 'chat_file'
    POLL = 'poll'
    HOST_VIDEO = 'host_video'
    CLOSED_CAPTION = 'closed_caption'
    TIMELINE = 'timeline'
    THUMBNAIL = 'thumbnail'

class GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum(str, Enum):
    r"""The status of the recording, either `completed` or `processing`."""
    COMPLETED = 'completed'
    PROCESSING = 'processing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles:
    
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})
    r"""The URL using which the recording can be downloaded"""  
    file_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_size'), 'exclude': lambda f: f is None }})
    r"""The size of the recording file in bytes."""  
    file_type: Optional[GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_type'), 'exclude': lambda f: f is None }})
    r"""The recording file type. The value of this field could be one of the following:<br>
    * `MP4`: Video file of the recording.<br>
    * `M4A` Audio-only file of the recording.<br>
    * `TB`: Timestamp file of the recording in JSON format.<br> 
    * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> 
    * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
    * `CC`: File containing closed captions of the recording in VTT file format.<br>
    * `CSV`: File containing polling data in csv format.
    
    A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
    	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Recording ID. Identifier for the recording."""  
    meeting_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_id'), 'exclude': lambda f: f is None }})
    r"""Universally unique identifier of the meeting instance that was being recorded."""  
    play_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('play_url'), 'exclude': lambda f: f is None }})
    r"""The URL using which recording can be played."""  
    recording_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_end'), 'exclude': lambda f: f is None }})
    r"""The date and time at which the recording ended."""  
    recording_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_start'), 'exclude': lambda f: f is None }})
    r"""The date and time at which the recording started."""  
    recording_type: Optional[GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_type'), 'exclude': lambda f: f is None }})
    r"""The recording type. The value of this field can be one of the following:<br>
    * `shared_screen_with_speaker_view(CC)`
    * `shared_screen_with_speaker_view`
    * `shared_screen_with_gallery_view`
    * `shared_screen`
    * `active_speaker`
    * `gallery_view`
    * `audio_only`
    * `audio_transcript`
    * `chat_file`
    * `host_video`
    * `closed_caption`
    * `poll`
    * `timeline`
    * `thumbnail`
    """  
    status: Optional[GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the recording, either `completed` or `processing`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationJSONMeetings:
    
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The scheduled duration of the meeting."""  
    host_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host_id'), 'exclude': lambda f: f is None }})
    r"""User ID of the user who is set as the host of the meeting."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Meeting ID - Unique Identifier of a meeting, also known as Meeting Number."""  
    recording_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_count'), 'exclude': lambda f: f is None }})
    r"""The total number of recordings retrieved from the account."""  
    recording_files: Optional[list[GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_files'), 'exclude': lambda f: f is None }})
    r"""Recording files object"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time at which the meeting started."""  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic'), 'exclude': lambda f: f is None }})
    r"""Meeting topic."""  
    total_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_size'), 'exclude': lambda f: f is None }})
    r"""The total size of the meeting in bytes."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Universally Unique Identifier of a meeting instance. Each meeting instance will have its own meeting UUID."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAccountCloudRecording200ApplicationJSON:
    r"""**Response Error Code:** `200` <br>
    Only available for Paid account.
    
    **HTTP Status Code:** `200` <br>
    Recording(s) listed successfully.
    """
    
    from_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. For example, if you make the API request on June 30, 2020, without providing the “from” and “to” parameters, by default the value of 'from' field will be “2020-06-30” and the value of the 'to' field will be “2020-07-01”."""  
    meetings: Optional[list[GetAccountCloudRecording200ApplicationJSONMeetings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meetings'), 'exclude': lambda f: f is None }})
    r"""Meetings Object"""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    to: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date for the monthly range for which you would like to retrieve recordings. The maximum range can be a month."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total number of records found for this request across all pages."""  
    

@dataclasses.dataclass
class GetAccountCloudRecordingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_account_cloud_recording_200_application_json_object: Optional[GetAccountCloudRecording200ApplicationJSON] = dataclasses.field(default=None)
    r"""**Response Error Code:** `200` <br>
    Only available for Paid account.
    
    **HTTP Status Code:** `200` <br>
    Recording(s) listed successfully.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    