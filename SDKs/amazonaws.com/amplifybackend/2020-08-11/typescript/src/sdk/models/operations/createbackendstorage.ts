/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The authorization configuration for the storage S3 bucket.
 */
export class CreateBackendStorageRequestBodyResourceConfigPermissions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Authenticated" })
  authenticated: shared.AuthenticatedElementEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "UnAuthenticated" })
  unAuthenticated?: shared.UnAuthenticatedElementEnum[];
}

/**
 * The name of the storage service.
 */
export enum CreateBackendStorageRequestBodyResourceConfigServiceNameEnum {
  S3 = "S3",
}

/**
 * The resource configuration for creating backend storage.
 */
export class CreateBackendStorageRequestBodyResourceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "BucketName" })
  bucketName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Permissions" })
  @Type(() => CreateBackendStorageRequestBodyResourceConfigPermissions)
  permissions?: CreateBackendStorageRequestBodyResourceConfigPermissions;

  @SpeakeasyMetadata()
  @Expose({ name: "ServiceName" })
  serviceName?: CreateBackendStorageRequestBodyResourceConfigServiceNameEnum;
}

export class CreateBackendStorageRequestBody extends SpeakeasyBase {
  /**
   * The name of the backend environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backendEnvironmentName" })
  backendEnvironmentName: string;

  /**
   * The resource configuration for creating backend storage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceConfig" })
  @Type(() => CreateBackendStorageRequestBodyResourceConfig)
  resourceConfig: CreateBackendStorageRequestBodyResourceConfig;

  /**
   * The name of the storage resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourceName" })
  resourceName: string;
}

export class CreateBackendStorageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateBackendStorageRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The app ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=appId",
  })
  appId: string;
}

export class CreateBackendStorageResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createBackendStorageResponse?: shared.CreateBackendStorageResponse;

  /**
   * GatewayTimeoutException
   */
  @SpeakeasyMetadata()
  gatewayTimeoutException?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
