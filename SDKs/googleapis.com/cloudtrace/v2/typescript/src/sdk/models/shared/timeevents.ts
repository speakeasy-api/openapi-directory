/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TimeEvent } from "./timeevent";
import { Expose, Type } from "class-transformer";

/**
 * A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.
 */
export class TimeEvents extends SpeakeasyBase {
  /**
   * The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "droppedAnnotationsCount" })
  droppedAnnotationsCount?: number;

  /**
   * The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "droppedMessageEventsCount" })
  droppedMessageEventsCount?: number;

  /**
   * A collection of `TimeEvent`s.
   */
  @SpeakeasyMetadata({ elemType: TimeEvent })
  @Expose({ name: "timeEvent" })
  @Type(() => TimeEvent)
  timeEvent?: TimeEvent[];
}
