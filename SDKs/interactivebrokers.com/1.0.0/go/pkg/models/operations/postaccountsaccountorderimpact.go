// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostAccountsAccountOrderImpactRequestBodySideEnum - Buy = '1', Sell = '2'
type PostAccountsAccountOrderImpactRequestBodySideEnum string

const (
	PostAccountsAccountOrderImpactRequestBodySideEnumOne PostAccountsAccountOrderImpactRequestBodySideEnum = "1"
	PostAccountsAccountOrderImpactRequestBodySideEnumTwo PostAccountsAccountOrderImpactRequestBodySideEnum = "2"
)

func (e *PostAccountsAccountOrderImpactRequestBodySideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		*e = PostAccountsAccountOrderImpactRequestBodySideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAccountsAccountOrderImpactRequestBodySideEnum: %s", s)
	}
}

// PostAccountsAccountOrderImpactRequestBody - Order Parameters
type PostAccountsAccountOrderImpactRequestBody struct {
	// Required price to support Stop and Stop Limit orders
	AuxPrice *float64 `json:"Aux Price,omitempty"`
	// The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)
	ContractID *float64 `json:"ContractId,omitempty"`
	// The currency in which the FX pair trades (only for InstrumentType=CASH)
	Currency *string `json:"Currency,omitempty"`
	// The order ID assigned by the customer.
	CustomerOrderID *string `json:"CustomerOrderId,omitempty"`
	// The instrument type of the contract
	InstrumentType *string `json:"InstrumentType,omitempty"`
	// The exchange on which the trading product is listed (only for InstrumentType=STK)
	ListingExchange *string `json:"ListingExchange,omitempty"`
	// Market = '1'
	// Limit = '2'
	// Stop = '3'
	// StopLimit = '4'
	//
	OrderType *shared.OrderTypeEnum `json:"Order Type,omitempty"`
	// The order price
	Price *float64 `json:"Price,omitempty"`
	// The number of units in the order; contracts or shares
	Quantity *float64 `json:"Quantity,omitempty"`
	// Buy = '1', Sell = '2'
	Side *PostAccountsAccountOrderImpactRequestBodySideEnum `json:"Side,omitempty"`
	// The symbol that identifies the trading product
	Ticker *string `json:"Ticker,omitempty"`
	// Defines order's active lifetime.
	// Day = '0'
	// GTC (Good till Cancel) = '1'
	// IOC (Immediate or Cancel) = '3'
	// Open = '2'
	// Close = '7'
	//
	TimeInForce *shared.TimeInForceEnum `json:"Time in Force,omitempty"`
}

type PostAccountsAccountOrderImpactRequest struct {
	// Order Parameters
	RequestBody PostAccountsAccountOrderImpactRequestBody `request:"mediaType=application/json"`
	// Account Number
	Account string `pathParam:"style=simple,explode=false,name=account"`
}

// PostAccountsAccountOrderImpact200ApplicationJSON - Order impact info
type PostAccountsAccountOrderImpact200ApplicationJSON struct {
	Commission          *float64 `json:"Commission,omitempty"`
	CommissionsCurrency *string  `json:"CommissionsCurrency,omitempty"`
	EquityWithLoan      *float64 `json:"EquityWithLoan,omitempty"`
	InitMargin          *float64 `json:"InitMargin,omitempty"`
	InitMarginBefore    *float64 `json:"InitMarginBefore,omitempty"`
	MaintMargin         *float64 `json:"MaintMargin,omitempty"`
	MaintMarginBefore   *float64 `json:"MaintMarginBefore,omitempty"`
	MarginCurrency      *string  `json:"MarginCurrency,omitempty"`
	MaxCommissions      *float64 `json:"MaxCommissions,omitempty"`
	MinCommissions      *float64 `json:"MinCommissions,omitempty"`
}

type PostAccountsAccountOrderImpactResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Order impact info
	PostAccountsAccountOrderImpact200ApplicationJSONObject *PostAccountsAccountOrderImpact200ApplicationJSON
}
