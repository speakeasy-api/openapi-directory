"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bookingstatus_enum as shared_bookingstatus_enum
from ..shared import error400_ais as shared_error400_ais
from ..shared import error400_ng_ais as shared_error400_ng_ais
from ..shared import error401_ais as shared_error401_ais
from ..shared import error401_ng_ais as shared_error401_ng_ais
from ..shared import error403_ais as shared_error403_ais
from ..shared import error403_ng_ais as shared_error403_ng_ais
from ..shared import error404_ais as shared_error404_ais
from ..shared import error404_ng_ais as shared_error404_ng_ais
from ..shared import error405_ais as shared_error405_ais
from ..shared import error405_ng_ais as shared_error405_ng_ais
from ..shared import error406_ais as shared_error406_ais
from ..shared import error406_ng_ais as shared_error406_ng_ais
from ..shared import error409_ais as shared_error409_ais
from ..shared import error409_ng_ais as shared_error409_ng_ais
from ..shared import error429_ais as shared_error429_ais
from ..shared import error429_ng_ais as shared_error429_ng_ais
from ..shared import psu_http_method_enum as shared_psu_http_method_enum
from ..shared import transactionsresponse_200_json as shared_transactionsresponse_200_json
from datetime import date
from typing import Optional


@dataclasses.dataclass
class GetTransactionListSecurity:
    
    bearer_auth_o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetTransactionListRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'account-id', 'style': 'simple', 'explode': False }})
    r"""This identification is denoting the addressed (card) account.
    The account-id is retrieved by using a \"Read Account List\" or \"Read Card Account list\" call. 
    The account-id is the \"resourceId\" attribute of the account structure. 
    Its value is constant at least throughout the lifecycle of a given consent.
    """  
    booking_status: shared_bookingstatus_enum.BookingStatusEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'bookingStatus', 'style': 'form', 'explode': True }})
    r"""Permitted codes are
      * \"information\",
      * \"booked\",
      * \"pending\", and 
      * \"both\"
    \"booked\" shall be supported by the ASPSP.
    To support the \"pending\" and \"both\" feature is optional for the ASPSP,
    Error code if not supported in the online banking frontend
    """  
    consent_id: str = dataclasses.field(metadata={'header': { 'field_name': 'Consent-ID', 'style': 'simple', 'explode': False }})
    r"""This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation."""  
    x_request_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Request-ID', 'style': 'simple', 'explode': False }})
    r"""ID of the request, unique to the call, as determined by the initiating party."""  
    date_from: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateFrom', 'style': 'form', 'explode': True }})
    r"""Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required
    and if bookingStatus does not equal \"information\".
    
    For booked transactions, the relevant date is the booking date. 
    
    For pending transactions, the relevant date is the entry date, which may not be transparent 
    neither in this API nor other channels of the ASPSP.
    """  
    date_to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dateTo', 'style': 'form', 'explode': True }})
    r"""End date (inclusive the data dateTo) of the transaction list, default is \\"now\\" if not given.
    
    Might be ignored if a delta function is used.
    
    For booked transactions, the relevant date is the booking date.
    
    For pending transactions, the relevant date is the entry date, which may not be transparent
    neither in this API nor other channels of the ASPSP.
    """  
    delta_list: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deltaList', 'style': 'form', 'explode': True }})
    r"""This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report.
    This delta indicator might be rejected by the ASPSP if this function is not supported.
    Optional if supported by API provider
    """  
    digest: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Digest', 'style': 'simple', 'explode': False }})
    r"""Is contained if and only if the \\"Signature\\" element is contained in the header of the request."""  
    entry_reference_from: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entryReferenceFrom', 'style': 'form', 'explode': True }})
    r"""This data attribute is indicating that the AISP is in favour to get all transactions after
    the transaction with identification entryReferenceFrom alternatively to the above defined period.
    This is a implementation of a delta access.
    If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP
    if a delta report is supported.
    
    Optional if supported by API provider.
    """  
    psu_accept: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_charset: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Charset', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_encoding: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Encoding', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_accept_language: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Accept-Language', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available."""  
    psu_device_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Device-ID', 'style': 'simple', 'explode': False }})
    r"""UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
    UUID identifies either a device or a device dependant application installation.
    In case of an installation identification this ID needs to be unaltered until removal from device.
    """  
    psu_geo_location: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Geo-Location', 'style': 'simple', 'explode': False }})
    r"""The forwarded Geo Location of the corresponding http request between PSU and TPP if available."""  
    psu_http_method: Optional[shared_psu_http_method_enum.PSUHTTPMethodEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-Http-Method', 'style': 'simple', 'explode': False }})
    r"""HTTP method used at the PSU ? TPP interface, if available.
    Valid values are:
    * GET
    * POST
    * PUT
    * PATCH
    * DELETE
    """  
    psu_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Address', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Address header field consists of the corresponding HTTP request
    IP Address field between PSU and TPP.
    It shall be contained if and only if this request was actively initiated by the PSU.
    """  
    psu_ip_port: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-IP-Port', 'style': 'simple', 'explode': False }})
    r"""The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available."""  
    psu_user_agent: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'PSU-User-Agent', 'style': 'simple', 'explode': False }})
    r"""The forwarded Agent header field of the HTTP request between PSU and TPP, if available."""  
    signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Signature', 'style': 'simple', 'explode': False }})
    r"""A signature of the request by the TPP on application level. This might be mandated by ASPSP."""  
    tpp_signature_certificate: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'TPP-Signature-Certificate', 'style': 'simple', 'explode': False }})
    r"""The certificate used for signing the request, in base64 encoding.
    Must be contained if a signature is contained.
    """  
    with_balance: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'withBalance', 'style': 'form', 'explode': True }})
    r"""If contained, this function reads the list of accessible payment accounts including the booking balance,
    if granted by the PSU in the related consent and available by the ASPSP.
    This parameter might be ignored by the ASPSP.
    """  
    

@dataclasses.dataclass
class GetTransactionListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    error400_ais: Optional[shared_error400_ais.Error400AIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error400_ng_ais: Optional[shared_error400_ng_ais.Error400NGAIS] = dataclasses.field(default=None)
    r"""Bad Request"""  
    error401_ais: Optional[shared_error401_ais.Error401AIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error401_ng_ais: Optional[shared_error401_ng_ais.Error401NGAIS] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    error403_ais: Optional[shared_error403_ais.Error403AIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error403_ng_ais: Optional[shared_error403_ng_ais.Error403NGAIS] = dataclasses.field(default=None)
    r"""Forbidden"""  
    error404_ais: Optional[shared_error404_ais.Error404AIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error404_ng_ais: Optional[shared_error404_ng_ais.Error404NGAIS] = dataclasses.field(default=None)
    r"""Not found"""  
    error405_ais: Optional[shared_error405_ais.Error405AIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error405_ng_ais: Optional[shared_error405_ng_ais.Error405NGAIS] = dataclasses.field(default=None)
    r"""Method Not Allowed"""  
    error406_ais: Optional[shared_error406_ais.Error406AIS] = dataclasses.field(default=None)
    r"""Not Acceptable"""  
    error406_ng_ais: Optional[shared_error406_ng_ais.Error406NGAIS] = dataclasses.field(default=None)
    r"""Not Acceptable"""  
    error409_ais: Optional[shared_error409_ais.Error409AIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error409_ng_ais: Optional[shared_error409_ng_ais.Error409NGAIS] = dataclasses.field(default=None)
    r"""Conflict"""  
    error429_ais: Optional[shared_error429_ais.Error429AIS] = dataclasses.field(default=None)
    r"""Too Many Requests"""  
    error429_ng_ais: Optional[shared_error429_ng_ais.Error429NGAIS] = dataclasses.field(default=None)
    r"""Too Many Requests"""  
    get_transaction_list_200_text_plain_one_of: Optional[str] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    transactions_response_200_json: Optional[shared_transactionsresponse_200_json.TransactionsResponse200JSON] = dataclasses.field(default=None)
    r"""OK"""  
    