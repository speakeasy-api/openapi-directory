// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type TweetType string

const (
	TweetTypeCompact  TweetType = "compact"
	TweetTypeDefault  TweetType = "default"
	TweetTypeDetailed TweetType = "detailed"
)

type Tweet struct {
	CompactTweet  *CompactTweet
	DefaultTweet  *DefaultTweet
	DetailedTweet *DetailedTweet

	Type TweetType
}

func CreateTweetCompact(compact CompactTweet) Tweet {
	typ := TweetTypeCompact
	typStr := string(typ)
	compact.Format = typStr

	return Tweet{
		CompactTweet: &compact,
		Type:         typ,
	}
}

func CreateTweetDefault(defaultT DefaultTweet) Tweet {
	typ := TweetTypeDefault
	typStr := string(typ)
	defaultT.Format = typStr

	return Tweet{
		DefaultTweet: &defaultT,
		Type:         typ,
	}
}

func CreateTweetDetailed(detailed DetailedTweet) Tweet {
	typ := TweetTypeDetailed
	typStr := string(typ)
	detailed.Format = typStr

	return Tweet{
		DetailedTweet: &detailed,
		Type:          typ,
	}
}

func (u *Tweet) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Format string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Format {
	case "compact":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		compactTweet := new(CompactTweet)
		if err := d.Decode(&compactTweet); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CompactTweet = compactTweet
		u.Type = TweetTypeCompact
		return nil
	case "default":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		defaultTweet := new(DefaultTweet)
		if err := d.Decode(&defaultTweet); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DefaultTweet = defaultTweet
		u.Type = TweetTypeDefault
		return nil
	case "detailed":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		detailedTweet := new(DetailedTweet)
		if err := d.Decode(&detailedTweet); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DetailedTweet = detailedTweet
		u.Type = TweetTypeDetailed
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Tweet) MarshalJSON() ([]byte, error) {
	if u.CompactTweet != nil {
		return json.Marshal(u.CompactTweet)
	}

	if u.DefaultTweet != nil {
		return json.Marshal(u.DefaultTweet)
	}

	if u.DetailedTweet != nil {
		return json.Marshal(u.DetailedTweet)
	}

	return nil, nil
}
