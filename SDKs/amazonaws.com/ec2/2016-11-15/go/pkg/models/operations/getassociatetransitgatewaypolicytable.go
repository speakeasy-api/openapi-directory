// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssociateTransitGatewayPolicyTableActionEnum
type GETAssociateTransitGatewayPolicyTableActionEnum string

const (
	GETAssociateTransitGatewayPolicyTableActionEnumAssociateTransitGatewayPolicyTable GETAssociateTransitGatewayPolicyTableActionEnum = "AssociateTransitGatewayPolicyTable"
)

func (e GETAssociateTransitGatewayPolicyTableActionEnum) ToPointer() *GETAssociateTransitGatewayPolicyTableActionEnum {
	return &e
}

func (e *GETAssociateTransitGatewayPolicyTableActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AssociateTransitGatewayPolicyTable":
		*e = GETAssociateTransitGatewayPolicyTableActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateTransitGatewayPolicyTableActionEnum: %v", v)
	}
}

// GETAssociateTransitGatewayPolicyTableVersionEnum
type GETAssociateTransitGatewayPolicyTableVersionEnum string

const (
	GETAssociateTransitGatewayPolicyTableVersionEnumTwoThousandAndSixteen1115 GETAssociateTransitGatewayPolicyTableVersionEnum = "2016-11-15"
)

func (e GETAssociateTransitGatewayPolicyTableVersionEnum) ToPointer() *GETAssociateTransitGatewayPolicyTableVersionEnum {
	return &e
}

func (e *GETAssociateTransitGatewayPolicyTableVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETAssociateTransitGatewayPolicyTableVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateTransitGatewayPolicyTableVersionEnum: %v", v)
	}
}

type GETAssociateTransitGatewayPolicyTableRequest struct {
	Action GETAssociateTransitGatewayPolicyTableActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the transit gateway attachment to associate with the policy table.
	TransitGatewayAttachmentID string `queryParam:"style=form,explode=true,name=TransitGatewayAttachmentId"`
	// The ID of the transit gateway policy table to associate with the transit gateway attachment.
	TransitGatewayPolicyTableID string                                           `queryParam:"style=form,explode=true,name=TransitGatewayPolicyTableId"`
	Version                     GETAssociateTransitGatewayPolicyTableVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm               *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssociateTransitGatewayPolicyTableResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
