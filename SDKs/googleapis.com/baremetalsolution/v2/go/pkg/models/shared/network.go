// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NetworkStateEnum - The Network state.
type NetworkStateEnum string

const (
	NetworkStateEnumStateUnspecified NetworkStateEnum = "STATE_UNSPECIFIED"
	NetworkStateEnumProvisioning     NetworkStateEnum = "PROVISIONING"
	NetworkStateEnumProvisioned      NetworkStateEnum = "PROVISIONED"
	NetworkStateEnumDeprovisioning   NetworkStateEnum = "DEPROVISIONING"
	NetworkStateEnumUpdating         NetworkStateEnum = "UPDATING"
)

func (e NetworkStateEnum) ToPointer() *NetworkStateEnum {
	return &e
}

func (e *NetworkStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "PROVISIONED":
		fallthrough
	case "DEPROVISIONING":
		fallthrough
	case "UPDATING":
		*e = NetworkStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkStateEnum: %v", v)
	}
}

// NetworkTypeEnum - The type of this network.
type NetworkTypeEnum string

const (
	NetworkTypeEnumTypeUnspecified NetworkTypeEnum = "TYPE_UNSPECIFIED"
	NetworkTypeEnumClient          NetworkTypeEnum = "CLIENT"
	NetworkTypeEnumPrivate         NetworkTypeEnum = "PRIVATE"
)

func (e NetworkTypeEnum) ToPointer() *NetworkTypeEnum {
	return &e
}

func (e *NetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CLIENT":
		fallthrough
	case "PRIVATE":
		*e = NetworkTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkTypeEnum: %v", v)
	}
}

// Network - A Network.
type Network struct {
	// The cidr of the Network.
	Cidr *string `json:"cidr,omitempty"`
	// Output only. Gateway ip address.
	GatewayIP *string `json:"gatewayIp,omitempty"`
	// An identifier for the `Network`, generated by the backend.
	ID *string `json:"id,omitempty"`
	// IP address configured.
	IPAddress *string `json:"ipAddress,omitempty"`
	// Whether network uses standard frames or jumbo ones.
	JumboFramesEnabled *bool `json:"jumboFramesEnabled,omitempty"`
	// Labels as key value pairs.
	Labels map[string]string `json:"labels,omitempty"`
	// List of physical interfaces.
	MacAddress []string `json:"macAddress,omitempty"`
	// Input only. List of mount points to attach the network to.
	MountPoints []NetworkMountPoint `json:"mountPoints,omitempty"`
	// Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
	Name *string `json:"name,omitempty"`
	// Output only. Pod name.
	Pod *string `json:"pod,omitempty"`
	// List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
	Reservations []NetworkAddressReservation `json:"reservations,omitempty"`
	// IP range for reserved for services (e.g. NFS).
	ServicesCidr *string `json:"servicesCidr,omitempty"`
	// The Network state.
	State *NetworkStateEnum `json:"state,omitempty"`
	// The type of this network.
	Type *NetworkTypeEnum `json:"type,omitempty"`
	// The vlan id of the Network.
	VlanID *string `json:"vlanId,omitempty"`
	// A network VRF.
	Vrf *Vrf `json:"vrf,omitempty"`
}
