// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoChromaKey - Allows to define a color (or a range of colors) that will be converted to transparent
type VideoChromaKey struct {
	// Set the color for which alpha will be set to 0 (full transparency)
	Color string `json:"color"`
	// Makes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvas
	Tolerance *int64 `json:"tolerance,omitempty"`
}

// VideoCrop - Crops the element
type VideoCrop struct {
	// Sets the height of the croping
	Height int64 `json:"height"`
	// Sets the width of the croping
	Width int64 `json:"width"`
	// Sets the left point of croping
	X *int64 `json:"x,omitempty"`
	// Sets the top point of croping
	Y *int64 `json:"y,omitempty"`
}

// VideoPanEnum - Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
type VideoPanEnum string

const (
	VideoPanEnumLeft        VideoPanEnum = "left"
	VideoPanEnumTop         VideoPanEnum = "top"
	VideoPanEnumRight       VideoPanEnum = "right"
	VideoPanEnumBottom      VideoPanEnum = "bottom"
	VideoPanEnumTopLeft     VideoPanEnum = "top-left"
	VideoPanEnumTopRight    VideoPanEnum = "top-right"
	VideoPanEnumBottomLeft  VideoPanEnum = "bottom-left"
	VideoPanEnumBottomRight VideoPanEnum = "bottom-right"
)

func (e *VideoPanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left":
		fallthrough
	case "top":
		fallthrough
	case "right":
		fallthrough
	case "bottom":
		fallthrough
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "bottom-right":
		*e = VideoPanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoPanEnum: %s", s)
	}
}

// VideoPositionEnum - Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
type VideoPositionEnum string

const (
	VideoPositionEnumTopLeft      VideoPositionEnum = "top-left"
	VideoPositionEnumTopRight     VideoPositionEnum = "top-right"
	VideoPositionEnumBottomRight  VideoPositionEnum = "bottom-right"
	VideoPositionEnumBottomLeft   VideoPositionEnum = "bottom-left"
	VideoPositionEnumCenterCenter VideoPositionEnum = "center-center"
	VideoPositionEnumCustom       VideoPositionEnum = "custom"
)

func (e *VideoPositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "top-left":
		fallthrough
	case "top-right":
		fallthrough
	case "bottom-right":
		fallthrough
	case "bottom-left":
		fallthrough
	case "center-center":
		fallthrough
	case "custom":
		*e = VideoPositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoPositionEnum: %s", s)
	}
}

type VideoRotate struct {
	// Sets the angle of rotation
	Angle float64 `json:"angle"`
	// Sets the time it takes to rotate the provided angle. A zero value means no movement
	Speed *float64 `json:"speed,omitempty"`
}

type VideoScale struct {
	// Sets the height for scaling the element
	Height *int64 `json:"height,omitempty"`
	// Sets the width for scaling the element
	Width *int64 `json:"width,omitempty"`
}

type VideoTypeEnum string

const (
	VideoTypeEnumVideo VideoTypeEnum = "video"
)

func (e *VideoTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "video":
		*e = VideoTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoTypeEnum: %s", s)
	}
}

type Video struct {
	// Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
	Cache *bool `json:"cache,omitempty"`
	// Allows to define a color (or a range of colors) that will be converted to transparent
	ChromaKey *VideoChromaKey `json:"chroma-key,omitempty"`
	// Used for adding your comments
	Comment *string `json:"comment,omitempty"`
	// Crops the element
	Crop *VideoCrop `json:"crop,omitempty"`
	// Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
	Duration *float32 `json:"duration,omitempty"`
	// Element's time span added after the playback.
	ExtraTime *float32 `json:"extra-time,omitempty"`
	// Adds a fade in effect to the element. Value in seconds.
	FadeIn *float32 `json:"fade-in,omitempty"`
	// Adds a fade out effect to the element. Value in seconds.
	FadeOut *float32 `json:"fade-out,omitempty"`
	// Sets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.
	Loop *int64 `json:"loop,omitempty"`
	// Mutes the audio
	Muted *bool `json:"muted,omitempty"`
	// Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
	Pan *VideoPanEnum `json:"pan,omitempty"`
	// Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
	Position *VideoPositionEnum `json:"position,omitempty"`
	Rotate   *VideoRotate       `json:"rotate,omitempty"`
	Scale    *VideoScale        `json:"scale,omitempty"`
	// URL to the asset file. Videos can be in MP4, MKV, MOV but MP4 is recommended.
	Src *string `json:"src,omitempty"`
	// Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
	Start  *float32      `json:"start,omitempty"`
	Type   VideoTypeEnum `json:"type"`
	Volume *float64      `json:"volume,omitempty"`
	// Sets the horizontal position of the element in the scene. The value <code>0</code> is on the left side
	X *float64 `json:"x,omitempty"`
	// Sets the vertical position of the element in the scene. The value <code>0</code> is on the top side
	Y *float64 `json:"y,omitempty"`
	// Element's z-index. Use this property to reorganize the layering of the elements like in HTML
	ZIndex *float64 `json:"z-index,omitempty"`
	// Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the <code>pan</code> property to set the focus point of the zooming
	Zoom *int64 `json:"zoom,omitempty"`
}
