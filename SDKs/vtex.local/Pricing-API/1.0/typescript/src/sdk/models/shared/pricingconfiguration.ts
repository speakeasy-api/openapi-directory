/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Price Variation object.
 */
export class PricingConfigurationPriceVariation extends SpeakeasyBase {
  /**
   * Lower variation limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lowerLimit" })
  lowerLimit?: number;

  /**
   * Upper variation limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upperLimit" })
  upperLimit?: number;
}

export class PricingConfigurationTradePolicyConfigs extends SpeakeasyBase {
  /**
   * Trade Policy Minimum Markup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumMarkup" })
  minimumMarkup?: number;

  /**
   * Defines if the Price Rule should affect the list price too.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rulesShouldAffectListPrice" })
  rulesShouldAffectListPrice?: boolean;

  /**
   * Trade Policy ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tradePolicyId" })
  tradePolicyId?: string;
}

/**
 * OK
 */
export class PricingConfiguration extends SpeakeasyBase {
  /**
   * Defines if access to the Pricing APIs is blocked for external requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockAccount" })
  blockAccount?: boolean;

  /**
   * Array with all blocked routes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blockedRoutes" })
  blockedRoutes?: string[];

  /**
   * Account default markup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultMarkup" })
  defaultMarkup: number;

  /**
   * Defines if the account has migrated to Pricing V2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasMigrated" })
  hasMigrated: boolean;

  /**
   * Defines if optional base price is allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasOptionalBasePrice" })
  hasOptionalBasePrice?: boolean;

  /**
   * Deprecated. Use the `priceInheritance` field instead.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasPriceInheritance" })
  hasPriceInheritance?: boolean;

  /**
   * Pricing V2 migration status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "migrationStatus" })
  migrationStatus?: string;

  /**
   * Account minimum markup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumMarkups" })
  minimumMarkups: Record<string, number>;

  /**
   * Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceInheritance" })
  priceInheritance?: string;

  /**
   * Price Table Limit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceTableLimit" })
  priceTableLimit?: number;

  /**
   * The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceTableSelectionStrategy" })
  priceTableSelectionStrategy?: string;

  /**
   * Price Variation object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "priceVariation" })
  @Type(() => PricingConfigurationPriceVariation)
  priceVariation?: PricingConfigurationPriceVariation;

  /**
   * Overrides prices from sellers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sellersToOverride" })
  sellersToOverride?: any[];

  /**
   * Trade Policy Configurations array.
   */
  @SpeakeasyMetadata({ elemType: PricingConfigurationTradePolicyConfigs })
  @Expose({ name: "tradePolicyConfigs" })
  @Type(() => PricingConfigurationTradePolicyConfigs)
  tradePolicyConfigs?: PricingConfigurationTradePolicyConfigs[];
}
