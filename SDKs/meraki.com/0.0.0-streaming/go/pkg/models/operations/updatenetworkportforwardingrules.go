// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum - TCP or UDP
type UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum string

const (
	UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnumTCP UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum = "tcp"
	UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnumUDP UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum = "udp"
)

func (e UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum) ToPointer() *UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum {
	return &e
}

func (e *UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum: %v", v)
	}
}

// UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum - The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
type UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum string

const (
	UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnumBoth      UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum = "both"
	UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnumInternet1 UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum = "internet1"
	UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnumInternet2 UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum = "internet2"
)

func (e UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum) ToPointer() *UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum {
	return &e
}

func (e *UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "both":
		fallthrough
	case "internet1":
		fallthrough
	case "internet2":
		*e = UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum: %v", v)
	}
}

type UpdateNetworkPortForwardingRulesRequestBodyRules struct {
	// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
	AllowedIps []string `json:"allowedIps"`
	// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
	LanIP string `json:"lanIp"`
	// A port or port ranges that will receive the forwarded traffic from the WAN
	LocalPort string `json:"localPort"`
	// A descriptive name for the rule
	Name *string `json:"name,omitempty"`
	// TCP or UDP
	Protocol UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum `json:"protocol"`
	// A port or port ranges that will be forwarded to the host on the LAN
	PublicPort string `json:"publicPort"`
	// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
	Uplink *UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum `json:"uplink,omitempty"`
}

type UpdateNetworkPortForwardingRulesRequestBody struct {
	// An array of port forwarding params
	Rules []UpdateNetworkPortForwardingRulesRequestBodyRules `json:"rules"`
}

type UpdateNetworkPortForwardingRulesRequest struct {
	RequestBody UpdateNetworkPortForwardingRulesRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                      `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkPortForwardingRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkPortForwardingRules200ApplicationJSONObject map[string]interface{}
}
