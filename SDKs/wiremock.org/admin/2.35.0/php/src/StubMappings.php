<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class StubMappings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete all stub mappings
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsResponse
     */
	public function deleteAdminMappings(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete a stub mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdResponse
     */
	public function deleteAdminMappingsStubMappingId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/{stubMappingId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAdminMappingsStubMappingIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all stub mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsResponse
     */
	public function getAdminMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAdminMappings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAdminMappings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get stub mapping by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdResponse
     */
	public function getAdminMappingsStubMappingId(
        \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/{stubMappingId}', \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAdminMappingsStubMappingId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAdminMappingsStubMappingId200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new stub mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResponse
     */
	public function postAdminMappings(
        \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAdminMappings201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAdminMappings201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find stubs by matching on their metadata
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsFindByMetadataResponse
     */
	public function postAdminMappingsFindByMetadata(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsFindByMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/find-by-metadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsFindByMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAdminMappingsFindByMetadata200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsFindByMetadata200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Import stub mappings
     * 
     * Import given stub mappings to the backing store
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsImportResponse
     */
	public function postAdminMappingsImport(
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/import');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete stub mappings matching metadata
     * 
     * @param mixed $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsRemoveByMetadataResponse
     */
	public function postAdminMappingsRemoveByMetadata(
        mixed $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsRemoveByMetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/remove-by-metadata');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsRemoveByMetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reset stub mappings
     * 
     * Restores stub mappings to the defaults defined back in the backing store
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResetResponse
     */
	public function postAdminMappingsReset(
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/reset');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Persist stub mappings
     * 
     * Save all persistent stub mappings to the backing store
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsSaveResponse
     */
	public function postAdminMappingsSave(
    ): \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsSaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/save');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAdminMappingsSaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update a stub mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdResponse
     */
	public function putAdminMappingsStubMappingId(
        \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/__admin/mappings/{stubMappingId}', \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putAdminMappingsStubMappingId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PutAdminMappingsStubMappingId200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}