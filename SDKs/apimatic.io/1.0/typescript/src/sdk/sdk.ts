/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://apimatic.io/api/transform"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Transform API Descriptions from/to various formats
 *
 * @see {@link https://apimatic.io/transformer} - API Transformer Website
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Transform API Descriptions from/to various formats
   *
   * @remarks
   * Transform API Descriptions from/to various formats e.g., Swagger, API Blueprint, RAML, WADL, Google Discovery, I/O Docs.
   *
   * ### INPUTS
   * * API Blueprint
   * * Swagger 1.0 - 1.2
   * * Swagger 2.0 JSON
   * * Swagger 2.0 YAML
   * * WADL - W3C 2009
   * * Google Discovery
   * * RAML 0.8
   * * I/O Docs - Mashery
   * * HAR 1.2
   * * Postman Collection 1.0 - 2.0
   * * APIMATIC Format
   * * Mashape
   *
   * ### OUTPUTS
   * * API Blueprint
   * * Swagger 1.2
   * * Swagger 2.0 JSON
   * * Swagger 2.0 YAML
   * * WADL - W3C 2009
   * * RAML 0.8 - 1.0
   * * APIMATIC Format
   */
  convertAPI(
    req: operations.ConvertAPIRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ConvertAPIResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ConvertAPIRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/transform";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ConvertAPIResponse =
        new operations.ConvertAPIResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.convertAPI200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `application/x-yaml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
