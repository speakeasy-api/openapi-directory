/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { InputConfigurationContainer } from "./inputconfigurationcontainer";
import { OutputConfigurationContainer } from "./outputconfigurationcontainer";
import { SwitchConfigurationContainer } from "./switchconfigurationcontainer";
import { Expose, Type } from "class-transformer";

/**
 * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
 */
export enum SmartMeDeviceConfigurationContainerDnsUpdateStateEnum {
  NoUpdate = "NoUpdate",
  DnsUpdatePublicIp = "DnsUpdatePublicIp",
  DnsUpdateInternalIp = "DnsUpdateInternalIp",
}

/**
 * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
 */
export enum SmartMeDeviceConfigurationContainerUploadIntervalEnum {
  UploadInterval1s = "UploadInterval_1s",
  UploadInterval5s = "UploadInterval_5s",
  UploadInterval10s = "UploadInterval_10s",
  UploadInterval30s = "UploadInterval_30s",
  UploadInterval60s = "UploadInterval_60s",
  UploadInterval5min = "UploadInterval_5min",
  UploadInterval15min = "UploadInterval_15min",
  UploadInterval30min = "UploadInterval_30min",
  UploadInterval60min = "UploadInterval_60min",
  UploadInterval6h = "UploadInterval_6h",
  UploadInterval12h = "UploadInterval_12h",
  UploadInterval24h = "UploadInterval_24h",
}

/**
 * API Container class for the meter configuration
 */
export class SmartMeDeviceConfigurationContainer extends SpeakeasyBase {
  /**
   * The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
   */
  @SpeakeasyMetadata({ data: "form, name=DeviceEncryptionKey" })
  @Expose({ name: "DeviceEncryptionKey" })
  deviceEncryptionKey?: string;

  /**
   * PIN code to enter on a external meter (e.g. for the FNN meters)
   */
  @SpeakeasyMetadata({ data: "form, name=DevicePinCode" })
  @Expose({ name: "DevicePinCode" })
  devicePinCode?: string;

  /**
   * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
   */
  @SpeakeasyMetadata({ data: "form, name=DnsUpdateState" })
  @Expose({ name: "DnsUpdateState" })
  dnsUpdateState?: SmartMeDeviceConfigurationContainerDnsUpdateStateEnum;

  /**
   * Enables or disables Modbus TCP (if the meter supports it).
   */
  @SpeakeasyMetadata({ data: "form, name=EnableModbusTcp" })
  @Expose({ name: "EnableModbusTcp" })
  enableModbusTcp?: boolean;

  /**
   * The ID of the device
   */
  @SpeakeasyMetadata({ data: "form, name=Id" })
  @Expose({ name: "Id" })
  id?: string;

  /**
   * The configuration for the intput outputs
   */
  @SpeakeasyMetadata({
    data: "form, name=InputConfiguration;json=true",
    elemType: InputConfigurationContainer,
  })
  @Expose({ name: "InputConfiguration" })
  @Type(() => InputConfigurationContainer)
  inputConfiguration?: InputConfigurationContainer[];

  /**
   * The configuration for the external outputs
   */
  @SpeakeasyMetadata({
    data: "form, name=OutputConfiguration;json=true",
    elemType: OutputConfigurationContainer,
  })
  @Expose({ name: "OutputConfiguration" })
  @Type(() => OutputConfigurationContainer)
  outputConfiguration?: OutputConfigurationContainer[];

  /**
   * Shows the reactive energy values (if the meter supports it).
   */
  @SpeakeasyMetadata({ data: "form, name=ShowReactiveEnergy" })
  @Expose({ name: "ShowReactiveEnergy" })
  showReactiveEnergy?: boolean;

  /**
   * The configuration for the phase switches
   */
  @SpeakeasyMetadata({
    data: "form, name=SwitchConfiguration;json=true",
    elemType: SwitchConfigurationContainer,
  })
  @Expose({ name: "SwitchConfiguration" })
  @Type(() => SwitchConfigurationContainer)
  switchConfiguration?: SwitchConfigurationContainer[];

  /**
   * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
   */
  @SpeakeasyMetadata({ data: "form, name=UploadInterval" })
  @Expose({ name: "UploadInterval" })
  uploadInterval?: SmartMeDeviceConfigurationContainerUploadIntervalEnum;
}
