"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDescribeSSLPoliciesActionEnum(str, Enum):
    DESCRIBE_SSL_POLICIES = 'DescribeSSLPolicies'

class GETDescribeSSLPoliciesLoadBalancerTypeEnum(str, Enum):
    r"""The type of load balancer. The default lists the SSL policies for all load balancers."""
    APPLICATION = 'application'
    NETWORK = 'network'
    GATEWAY = 'gateway'

class GETDescribeSSLPoliciesVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FIFTEEN_12_01 = '2015-12-01'


@dataclasses.dataclass
class GETDescribeSSLPoliciesRequest:
    
    action: GETDescribeSSLPoliciesActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDescribeSSLPoliciesVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    load_balancer_type: Optional[GETDescribeSSLPoliciesLoadBalancerTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LoadBalancerType', 'style': 'form', 'explode': True }})
    r"""The type of load balancer. The default lists the SSL policies for all load balancers."""  
    marker: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Marker', 'style': 'form', 'explode': True }})
    r"""The marker for the next set of results. (You received this marker from a previous call.)"""  
    names: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Names', 'style': 'form', 'explode': True }})
    r"""The names of the policies."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return with this call."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDescribeSSLPoliciesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    