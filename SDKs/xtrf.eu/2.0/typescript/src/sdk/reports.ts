/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * To change the description use /examples/TagsDescriptions.json
 */
export class Reports {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Removes a report.
   *
   * @remarks
   * Removes a report.
   */
  delete11(
    req: operations.Delete11Request,
    config?: AxiosRequestConfig
  ): Promise<operations.Delete11Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Delete11Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/reports/{reportId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Delete11Response = new operations.Delete11Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Duplicates a report.
   *
   * @remarks
   * Duplicates a report.
   */
  duplicate1(
    req: operations.Duplicate1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.Duplicate1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Duplicate1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reports/{reportId}/duplicate",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Duplicate1Response =
        new operations.Duplicate1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Exports reports definition to XML.
   *
   * @remarks
   * Exports reports definition to XML.
   */
  exportToXML(
    req: shared.ExportRequestDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.ExportToXMLResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ExportRequestDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/export/xml";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ExportToXMLResponse =
        new operations.ExportToXMLResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.reportResultDTO = utils.objectToClass(
              httpRes?.data,
              shared.ReportResultDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates CSV content for a report.
   *
   * @remarks
   * Generates CSV content for a report.
   */
  generateCSV(
    req: operations.GenerateCSVRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GenerateCSVResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenerateCSVRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reports/{reportId}/result/csv",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenerateCSVResponse =
        new operations.GenerateCSVResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.reportResultDTO = utils.objectToClass(
              httpRes?.data,
              shared.ReportResultDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates printer friendly content for a report.
   *
   * @remarks
   * Generates printer friendly content for a report.
   */
  generatePrinterFriendly(
    req: operations.GeneratePrinterFriendlyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GeneratePrinterFriendlyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GeneratePrinterFriendlyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reports/{reportId}/result/printerFriendly",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GeneratePrinterFriendlyResponse =
        new operations.GeneratePrinterFriendlyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.reportResultDTO = utils.objectToClass(
              httpRes?.data,
              shared.ReportResultDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports reports definition from XML.
   *
   * @remarks
   * Imports a report definition from an XML using a file token. To obtain the token, you first need to upload a temporary XML file, as specified in the Files section. Note that the name of the imported report must be unique.
   */
  importFromXML(
    req: shared.ImportRequestDTO,
    config?: AxiosRequestConfig
  ): Promise<operations.ImportFromXMLResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ImportRequestDTO(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports/import/xml";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImportFromXMLResponse =
        new operations.ImportFromXMLResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.importResultDTO = utils.objectToClass(
              httpRes?.data,
              shared.ImportResultDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks report as preferred or not.
   *
   * @remarks
   * Marks report as preferred or not.
   */
  setPreferred(
    req: operations.SetPreferredRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetPreferredResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetPreferredRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/reports/{reportId}/preferred",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "preferredRequestDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetPreferredResponse =
        new operations.SetPreferredResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }
}
