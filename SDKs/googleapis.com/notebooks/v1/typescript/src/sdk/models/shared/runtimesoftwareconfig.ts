/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContainerImage } from "./containerimage";
import { Expose, Type } from "class-transformer";

/**
 * Behavior for the post startup script.
 */
export enum RuntimeSoftwareConfigPostStartupScriptBehaviorEnum {
  PostStartupScriptBehaviorUnspecified = "POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED",
  RunEveryStart = "RUN_EVERY_START",
  DownloadAndRunEveryStart = "DOWNLOAD_AND_RUN_EVERY_START",
}

/**
 * Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
 */
export class RuntimeSoftwareConfigInput extends SpeakeasyBase {
  /**
   * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customGpuDriverPath" })
  customGpuDriverPath?: string;

  /**
   * Bool indicating whether JupyterLab terminal will be available or not. Default: False
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disableTerminal" })
  disableTerminal?: boolean;

  /**
   * Verifies core internal services are running. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableHealthMonitoring" })
  enableHealthMonitoring?: boolean;

  /**
   * Runtime will automatically shutdown after idle_shutdown_time. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleShutdown" })
  idleShutdown?: boolean;

  /**
   * Time in minutes to wait before shutting down runtime. Default: 180 minutes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleShutdownTimeout" })
  idleShutdownTimeout?: number;

  /**
   * Install Nvidia Driver automatically. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "installGpuDriver" })
  installGpuDriver?: boolean;

  /**
   * Optional. Use a list of container images to use as Kernels in the notebook instance.
   */
  @SpeakeasyMetadata({ elemType: ContainerImage })
  @Expose({ name: "kernels" })
  @Type(() => ContainerImage)
  kernels?: ContainerImage[];

  /**
   * Bool indicating whether mixer client should be disabled. Default: False
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mixerDisabled" })
  mixerDisabled?: boolean;

  /**
   * Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notebookUpgradeSchedule" })
  notebookUpgradeSchedule?: string;

  /**
   * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postStartupScript" })
  postStartupScript?: string;

  /**
   * Behavior for the post startup script.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postStartupScriptBehavior" })
  postStartupScriptBehavior?: RuntimeSoftwareConfigPostStartupScriptBehaviorEnum;
}

/**
 * Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
 */
export class RuntimeSoftwareConfig extends SpeakeasyBase {
  /**
   * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customGpuDriverPath" })
  customGpuDriverPath?: string;

  /**
   * Bool indicating whether JupyterLab terminal will be available or not. Default: False
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disableTerminal" })
  disableTerminal?: boolean;

  /**
   * Verifies core internal services are running. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableHealthMonitoring" })
  enableHealthMonitoring?: boolean;

  /**
   * Runtime will automatically shutdown after idle_shutdown_time. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleShutdown" })
  idleShutdown?: boolean;

  /**
   * Time in minutes to wait before shutting down runtime. Default: 180 minutes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "idleShutdownTimeout" })
  idleShutdownTimeout?: number;

  /**
   * Install Nvidia Driver automatically. Default: True
   */
  @SpeakeasyMetadata()
  @Expose({ name: "installGpuDriver" })
  installGpuDriver?: boolean;

  /**
   * Optional. Use a list of container images to use as Kernels in the notebook instance.
   */
  @SpeakeasyMetadata({ elemType: ContainerImage })
  @Expose({ name: "kernels" })
  @Type(() => ContainerImage)
  kernels?: ContainerImage[];

  /**
   * Bool indicating whether mixer client should be disabled. Default: False
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mixerDisabled" })
  mixerDisabled?: boolean;

  /**
   * Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notebookUpgradeSchedule" })
  notebookUpgradeSchedule?: string;

  /**
   * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postStartupScript" })
  postStartupScript?: string;

  /**
   * Behavior for the post startup script.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postStartupScriptBehavior" })
  postStartupScriptBehavior?: RuntimeSoftwareConfigPostStartupScriptBehaviorEnum;

  /**
   * Output only. Bool indicating whether an newer image is available in an image family.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upgradeable" })
  upgradeable?: boolean;

  /**
   * Output only. version of boot image such as M100, from release label of the image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}
