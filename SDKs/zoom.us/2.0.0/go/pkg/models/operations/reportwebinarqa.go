// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ReportWebinarQASecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ReportWebinarQARequest struct {
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

type ReportWebinarQA200ApplicationXMLQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string
	// Asked question.
	Question *string
}

type ReportWebinarQA200ApplicationXMLQuestions struct {
	// Participant email.
	Email *string
	// Participant display name.<br>
	//
	// If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be "Anonymous Attendee".
	Name *string
	// Array of questions from user.
	QuestionDetails []ReportWebinarQA200ApplicationXMLQuestionsQuestionDetails
}

// ReportWebinarQA200ApplicationXML - **HTTP Status Code:** `200`<br>
// Webinar Q&A report returned.<br>
// This is only available for paid account:{accountId}.<br>
// A report cannot be generated for this account because this account has not subscribed to a webinar plan.
type ReportWebinarQA200ApplicationXML struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64
	// Array of webinar question objects.
	Questions []ReportWebinarQA200ApplicationXMLQuestions
	// Webinar start time.
	StartTime *time.Time
	// Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

type ReportWebinarQA200ApplicationJSONQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string `json:"answer,omitempty"`
	// Asked question.
	Question *string `json:"question,omitempty"`
}

type ReportWebinarQA200ApplicationJSONQuestions struct {
	// Participant email.
	Email *string `json:"email,omitempty"`
	// Participant display name.<br>
	//
	// If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be "Anonymous Attendee".
	Name *string `json:"name,omitempty"`
	// Array of questions from user.
	QuestionDetails []ReportWebinarQA200ApplicationJSONQuestionsQuestionDetails `json:"question_details,omitempty"`
}

// ReportWebinarQA200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Webinar Q&A report returned.<br>
// This is only available for paid account:{accountId}.<br>
// A report cannot be generated for this account because this account has not subscribed to a webinar plan.
type ReportWebinarQA200ApplicationJSON struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64 `json:"id,omitempty"`
	// Array of webinar question objects.
	Questions []ReportWebinarQA200ApplicationJSONQuestions `json:"questions,omitempty"`
	// Webinar start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type ReportWebinarQAResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Webinar Q&A report returned.<br>
	// This is only available for paid account:{accountId}.<br>
	// A report cannot be generated for this account because this account has not subscribed to a webinar plan.
	ReportWebinarQA200ApplicationJSONObject *ReportWebinarQA200ApplicationJSON
}
