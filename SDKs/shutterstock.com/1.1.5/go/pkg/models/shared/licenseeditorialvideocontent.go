// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LicenseEditorialVideoContentLicenseEnum - License agreement to use for licensing
type LicenseEditorialVideoContentLicenseEnum string

const (
	LicenseEditorialVideoContentLicenseEnumPremierEditorialVideoDigitalOnly             LicenseEditorialVideoContentLicenseEnum = "premier_editorial_video_digital_only"
	LicenseEditorialVideoContentLicenseEnumPremierEditorialVideoAllMedia                LicenseEditorialVideoContentLicenseEnum = "premier_editorial_video_all_media"
	LicenseEditorialVideoContentLicenseEnumPremierEditorialVideoAllMediaSingleTerritory LicenseEditorialVideoContentLicenseEnum = "premier_editorial_video_all_media_single_territory"
	LicenseEditorialVideoContentLicenseEnumPremierEditorialVideoComp                    LicenseEditorialVideoContentLicenseEnum = "premier_editorial_video_comp"
)

func (e *LicenseEditorialVideoContentLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "premier_editorial_video_digital_only":
		fallthrough
	case "premier_editorial_video_all_media":
		fallthrough
	case "premier_editorial_video_all_media_single_territory":
		fallthrough
	case "premier_editorial_video_comp":
		*e = LicenseEditorialVideoContentLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseEditorialVideoContentLicenseEnum: %s", s)
	}
}

// LicenseEditorialVideoContentSizeEnum - Asset size to download
type LicenseEditorialVideoContentSizeEnum string

const (
	LicenseEditorialVideoContentSizeEnumOriginal LicenseEditorialVideoContentSizeEnum = "original"
)

func (e *LicenseEditorialVideoContentSizeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "original":
		*e = LicenseEditorialVideoContentSizeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseEditorialVideoContentSizeEnum: %s", s)
	}
}

// LicenseEditorialVideoContent - Individual editorial video content to license
type LicenseEditorialVideoContent struct {
	// Editorial ID
	EditorialID string `json:"editorial_id"`
	// License agreement to use for licensing
	License LicenseEditorialVideoContentLicenseEnum `json:"license"`
	// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Asset size to download
	Size *LicenseEditorialVideoContentSizeEnum `json:"size,omitempty"`
}
