// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CountClosedWorkflowExecutionsXAmzTargetEnum
type CountClosedWorkflowExecutionsXAmzTargetEnum string

const (
	CountClosedWorkflowExecutionsXAmzTargetEnumSimpleWorkflowServiceCountClosedWorkflowExecutions CountClosedWorkflowExecutionsXAmzTargetEnum = "SimpleWorkflowService.CountClosedWorkflowExecutions"
)

func (e *CountClosedWorkflowExecutionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SimpleWorkflowService.CountClosedWorkflowExecutions":
		*e = CountClosedWorkflowExecutionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CountClosedWorkflowExecutionsXAmzTargetEnum: %s", s)
	}
}

type CountClosedWorkflowExecutionsHeaders struct {
	XAmzAlgorithm     *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CountClosedWorkflowExecutionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CountClosedWorkflowExecutionsRequest struct {
	Headers CountClosedWorkflowExecutionsHeaders
	Request shared.CountClosedWorkflowExecutionsInput `request:"mediaType=application/json"`
}

type CountClosedWorkflowExecutionsResponse struct {
	ContentType string
	// OperationNotPermittedFault
	OperationNotPermittedFault interface{}
	StatusCode                 int
	RawResponse                *http.Response
	// UnknownResourceFault
	UnknownResourceFault interface{}
	// Success
	WorkflowExecutionCount *shared.WorkflowExecutionCount
}
