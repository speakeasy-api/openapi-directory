/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class StorageBucketsInsertSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class StorageBucketsInsertSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class StorageBucketsInsertSecurityOption3 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class StorageBucketsInsertSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: StorageBucketsInsertSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: StorageBucketsInsertSecurityOption2;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option3?: StorageBucketsInsertSecurityOption3;
}

/**
 * Apply a predefined set of access controls to this bucket.
 */
export enum StorageBucketsInsertPredefinedACLEnum {
  AuthenticatedRead = "authenticatedRead",
  Private = "private",
  ProjectPrivate = "projectPrivate",
  PublicRead = "publicRead",
  PublicReadWrite = "publicReadWrite",
}

/**
 * Apply a predefined set of default object access controls to this bucket.
 */
export enum StorageBucketsInsertPredefinedDefaultObjectACLEnum {
  AuthenticatedRead = "authenticatedRead",
  BucketOwnerFullControl = "bucketOwnerFullControl",
  BucketOwnerRead = "bucketOwnerRead",
  Private = "private",
  ProjectPrivate = "projectPrivate",
  PublicRead = "publicRead",
}

/**
 * Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
 */
export enum StorageBucketsInsertProjectionEnum {
  Full = "full",
  NoAcl = "noAcl",
}

export class StorageBucketsInsertRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  bucket?: shared.Bucket;

  /**
   * Data format for the response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Apply a predefined set of access controls to this bucket.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=predefinedAcl",
  })
  predefinedAcl?: StorageBucketsInsertPredefinedACLEnum;

  /**
   * Apply a predefined set of default object access controls to this bucket.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=predefinedDefaultObjectAcl",
  })
  predefinedDefaultObjectAcl?: StorageBucketsInsertPredefinedDefaultObjectACLEnum;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * A valid API project identifier.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=project",
  })
  project: string;

  /**
   * Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projection",
  })
  projection?: StorageBucketsInsertProjectionEnum;

  /**
   * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * Upload protocol for media (e.g. "media", "multipart", "resumable").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Deprecated. Please use quotaUser instead.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userIp",
  })
  userIp?: string;

  /**
   * The project to be billed for this request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=userProject",
  })
  userProject?: string;
}

export class StorageBucketsInsertResponse extends SpeakeasyBase {
  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  bucket?: shared.Bucket;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
