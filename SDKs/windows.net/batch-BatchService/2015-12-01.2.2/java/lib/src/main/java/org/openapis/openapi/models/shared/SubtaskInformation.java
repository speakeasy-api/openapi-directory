/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SubtaskInformation - Information about an Azure Batch subtask.
 */
public class SubtaskInformation {
    /**
     * Gets or sets the time at which the subtask completed. This property is set only if the subtask is in the Completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public SubtaskInformation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Gets or sets the exit code of the subtask. This property is set only if the subtask is in the Completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitCode")
    public Integer exitCode;

    public SubtaskInformation withExitCode(Integer exitCode) {
        this.exitCode = exitCode;
        return this;
    }
    
    /**
     * Gets or sets the id of the subtask.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public SubtaskInformation withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Information about the compute node on which a task ran.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeInfo")
    public ComputeNodeInformation nodeInfo;

    public SubtaskInformation withNodeInfo(ComputeNodeInformation nodeInfo) {
        this.nodeInfo = nodeInfo;
        return this;
    }
    
    /**
     * Gets or sets the previous state of the subtask. This property is not set if the subtask is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousState")
    public SubtaskInformationPreviousStateEnum previousState;

    public SubtaskInformation withPreviousState(SubtaskInformationPreviousStateEnum previousState) {
        this.previousState = previousState;
        return this;
    }
    
    /**
     * Gets or sets the time at which the subtask entered its previous state. This property is not set if the subtask is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("previousStateTransitionTime")
    public OffsetDateTime previousStateTransitionTime;

    public SubtaskInformation withPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
        this.previousStateTransitionTime = previousStateTransitionTime;
        return this;
    }
    
    /**
     * Information about an error when scheduling a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingError")
    public TaskSchedulingError schedulingError;

    public SubtaskInformation withSchedulingError(TaskSchedulingError schedulingError) {
        this.schedulingError = schedulingError;
        return this;
    }
    
    /**
     * Gets or sets the time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public SubtaskInformation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Gets or sets the current state of the subtask.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public SubtaskInformationStateEnum state;

    public SubtaskInformation withState(SubtaskInformationStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Gets or sets the time at which the subtask entered its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stateTransitionTime")
    public OffsetDateTime stateTransitionTime;

    public SubtaskInformation withStateTransitionTime(OffsetDateTime stateTransitionTime) {
        this.stateTransitionTime = stateTransitionTime;
        return this;
    }
    
    public SubtaskInformation(){}
}
