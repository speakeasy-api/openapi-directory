/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  Indicates the connection mode and if it is public or private.
 */
export enum UpdateConnectorProfileRequestBodyConnectionModeEnum {
  Public = "Public",
  Private = "Private",
}

/**
 *  Defines the connector-specific configuration and credentials for the connector profile.
 */
export class UpdateConnectorProfileRequestBodyConnectorProfileConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileCredentials" })
  @Type(() => shared.ConnectorProfileCredentials)
  connectorProfileCredentials?: shared.ConnectorProfileCredentials;

  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileProperties" })
  @Type(() => shared.ConnectorProfileProperties)
  connectorProfileProperties?: shared.ConnectorProfileProperties;
}

export class UpdateConnectorProfileRequestBody extends SpeakeasyBase {
  /**
   *  Indicates the connection mode and if it is public or private.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectionMode" })
  connectionMode: UpdateConnectorProfileRequestBodyConnectionModeEnum;

  /**
   *  Defines the connector-specific configuration and credentials for the connector profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileConfig" })
  @Type(() => UpdateConnectorProfileRequestBodyConnectorProfileConfig)
  connectorProfileConfig: UpdateConnectorProfileRequestBodyConnectorProfileConfig;

  /**
   *  The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileName" })
  connectorProfileName: string;
}

export class UpdateConnectorProfileRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateConnectorProfileRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateConnectorProfileResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  /**
   * ConnectorAuthenticationException
   */
  @SpeakeasyMetadata()
  connectorAuthenticationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateConnectorProfileResponse?: shared.UpdateConnectorProfileResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
