"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ommeters:
    
    current_scaling_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentScalingFactor'), 'exclude': lambda f: f is None }})
    r"""Factor imposed on metered current by a transducer"""  
    load_profile_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadProfileType'), 'exclude': lambda f: f is None }})
    r"""Metering load profile type associated with the meter"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Basic address information for geo coding"""  
    manufacturer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturerId'), 'exclude': lambda f: f is None }})
    r"""DLMS manufacturerId"""  
    measurement_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementType'), 'exclude': lambda f: f is None }})
    r"""Physical quantity being measured by the meter"""  
    meta: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})
    r"""Statistical metadata for this household"""  
    meter_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meterId'), 'exclude': lambda f: f is None }})
    r"""identifier to be used in other methods like readings or activities."""  
    scaling_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scalingFactor'), 'exclude': lambda f: f is None }})
    r"""Factor imposed on metered current AND voltage by a transducer"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Device type of the meter"""  
    voltage_scaling_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltageScalingFactor'), 'exclude': lambda f: f is None }})
    r"""Factor imposed on metered voltage by a transducer"""  
    