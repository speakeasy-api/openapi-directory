"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def iamcredentials_projects_service_accounts_generate_access_token(self, request: operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest, security: operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenSecurity) -> operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse:
        r"""Generates an OAuth 2.0 access token for a service account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest, base_url, '/v1/{name}:generateAccessToken', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_access_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IamcredentialsProjectsServiceAccountsGenerateAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateAccessTokenResponse])
                res.generate_access_token_response = out

        return res

    def iamcredentials_projects_service_accounts_generate_id_token(self, request: operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenRequest, security: operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenSecurity) -> operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenResponse:
        r"""Generates an OpenID Connect ID token for a service account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenRequest, base_url, '/v1/{name}:generateIdToken', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_id_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IamcredentialsProjectsServiceAccountsGenerateIDTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateIDTokenResponse])
                res.generate_id_token_response = out

        return res

    def iamcredentials_projects_service_accounts_sign_blob(self, request: operations.IamcredentialsProjectsServiceAccountsSignBlobRequest, security: operations.IamcredentialsProjectsServiceAccountsSignBlobSecurity) -> operations.IamcredentialsProjectsServiceAccountsSignBlobResponse:
        r"""Signs a blob using a service account's system-managed private key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IamcredentialsProjectsServiceAccountsSignBlobRequest, base_url, '/v1/{name}:signBlob', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sign_blob_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IamcredentialsProjectsServiceAccountsSignBlobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IamcredentialsProjectsServiceAccountsSignBlobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SignBlobResponse])
                res.sign_blob_response = out

        return res

    def iamcredentials_projects_service_accounts_sign_jwt(self, request: operations.IamcredentialsProjectsServiceAccountsSignJwtRequest, security: operations.IamcredentialsProjectsServiceAccountsSignJwtSecurity) -> operations.IamcredentialsProjectsServiceAccountsSignJwtResponse:
        r"""Signs a JWT using a service account's system-managed private key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.IamcredentialsProjectsServiceAccountsSignJwtRequest, base_url, '/v1/{name}:signJwt', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sign_jwt_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IamcredentialsProjectsServiceAccountsSignJwtRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IamcredentialsProjectsServiceAccountsSignJwtResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SignJwtResponse])
                res.sign_jwt_response = out

        return res

    