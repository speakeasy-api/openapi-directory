"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import assetmodelcompositemodel as shared_assetmodelcompositemodel
from ..shared import assetmodelhierarchy as shared_assetmodelhierarchy
from ..shared import assetmodelproperty as shared_assetmodelproperty
from ..shared import assetmodelstatus as shared_assetmodelstatus
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeAssetModelResponse:
    r"""Success"""
    
    asset_model_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelArn') }})  
    asset_model_creation_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelCreationDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    asset_model_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelDescription') }})  
    asset_model_hierarchies: list[shared_assetmodelhierarchy.AssetModelHierarchy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelHierarchies') }})  
    asset_model_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelId') }})  
    asset_model_last_update_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelLastUpdateDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    asset_model_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelName') }})  
    asset_model_properties: list[shared_assetmodelproperty.AssetModelProperty] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelProperties') }})  
    asset_model_status: shared_assetmodelstatus.AssetModelStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelStatus') }})  
    asset_model_composite_models: Optional[list[shared_assetmodelcompositemodel.AssetModelCompositeModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetModelCompositeModels'), 'exclude': lambda f: f is None }})  
    