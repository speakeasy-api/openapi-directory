"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customroutingdestinationtrafficstate_enum as shared_customroutingdestinationtrafficstate_enum
from ..shared import ipaddresstype_enum as shared_ipaddresstype_enum
from ..shared import socketaddress as shared_socketaddress
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DestinationPortMapping:
    r"""The port mappings for a specified endpoint IP address (destination)."""
    
    accelerator_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorArn'), 'exclude': lambda f: f is None }})  
    accelerator_socket_addresses: Optional[list[shared_socketaddress.SocketAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceleratorSocketAddresses'), 'exclude': lambda f: f is None }})  
    destination_socket_address: Optional[shared_socketaddress.SocketAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationSocketAddress'), 'exclude': lambda f: f is None }})  
    destination_traffic_state: Optional[shared_customroutingdestinationtrafficstate_enum.CustomRoutingDestinationTrafficStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DestinationTrafficState'), 'exclude': lambda f: f is None }})  
    endpoint_group_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointGroupArn'), 'exclude': lambda f: f is None }})  
    endpoint_group_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointGroupRegion'), 'exclude': lambda f: f is None }})  
    endpoint_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointId'), 'exclude': lambda f: f is None }})  
    ip_address_type: Optional[shared_ipaddresstype_enum.IPAddressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpAddressType'), 'exclude': lambda f: f is None }})  
    