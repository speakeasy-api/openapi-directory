"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SaveMultipleReviewsRequest:
    
    approved: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved') }})
    r"""If the review was approved (`true`) or not (`false`)."""  
    product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId') }})
    r"""Product ID."""  
    rating: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rating') }})
    r"""Customer rating."""  
    reviewer_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reviewerName') }})
    r"""Reviewer name."""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""Review's text."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Review's title."""  
    verified_purchaser: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifiedPurchaser') }})
    r"""If the reviewer is a verified purchaser (`true`) or not (`false`)."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Review ID."""  
    