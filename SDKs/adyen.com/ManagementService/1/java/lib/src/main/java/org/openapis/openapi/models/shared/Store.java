/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Store - OK - the request has succeeded.
 */
public class Store {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public Links links;
    public Store withLinks(Links links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public StoreLocation address;
    public Store withAddress(StoreLocation address) {
        this.address = address;
        return this;
    }
    
    /**
     * The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.
     *  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessLineIds")
    public String[] businessLineIds;
    public Store withBusinessLineIds(String[] businessLineIds) {
        this.businessLineIds = businessLineIds;
        return this;
    }
    
    /**
     * The description of the store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Store withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * When using the Zip payment method: The location ID that Zip has assigned to your store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalReferenceId")
    public String externalReferenceId;
    public Store withExternalReferenceId(String externalReferenceId) {
        this.externalReferenceId = externalReferenceId;
        return this;
    }
    
    /**
     * The unique identifier of the store. This value is generated by Adyen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Store withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The unique identifier of the merchant account that the store belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantId")
    public String merchantId;
    public Store withMerchantId(String merchantId) {
        this.merchantId = merchantId;
        return this;
    }
    
    /**
     * The phone number of the store, including '+' and country code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    public String phoneNumber;
    public Store withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * A reference to recognize the store by. Also known as the store code.
     *  Allowed characters: Lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;
    public Store withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * The store name shown on the shopper's bank or credit card statement and on the shopper receipt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shopperStatement")
    public String shopperStatement;
    public Store withShopperStatement(String shopperStatement) {
        this.shopperStatement = shopperStatement;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("splitConfiguration")
    public StoreSplitConfiguration splitConfiguration;
    public Store withSplitConfiguration(StoreSplitConfiguration splitConfiguration) {
        this.splitConfiguration = splitConfiguration;
        return this;
    }
    
    /**
     * The status of the store. Possible values are:
     * 
     * - **active**. This value is assigned automatically when a store is created. 
     * - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible.
     * - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public StoreStatusEnum status;
    public Store withStatus(StoreStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
