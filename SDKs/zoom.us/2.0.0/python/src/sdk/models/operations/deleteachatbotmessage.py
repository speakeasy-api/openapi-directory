"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DeleteAChatbotMessageSecurity:
    
    client_credentials: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteAChatbotMessageApplicationJSON:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages)."""  
    robot_jid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robot_jid') }})
    r"""The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard."""  
    user_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_jid'), 'exclude': lambda f: f is None }})
    r"""The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel."""  
    

@dataclasses.dataclass
class DeleteAChatbotMessageRequest:
    
    message_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'message_id', 'style': 'simple', 'explode': False }})  
    request_body: Optional[DeleteAChatbotMessageApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class DeleteAChatbotMessage200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message deleted.
    """
    
    message_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the message that was deleted."""  
    robot_jid: Optional[str] = dataclasses.field(default=None)
    r"""The BotJID of the Chatbot app. It can be found in the Chat Subscription Section on the Features page of your App Dashboard"""  
    sent_time: Optional[str] = dataclasses.field(default=None)
    r"""The date and time at which the message was deleted."""  
    to_jid: Optional[str] = dataclasses.field(default=None)
    r"""The JID of the Channel or User to whom the message was sent."""  
    user_jid: Optional[str] = dataclasses.field(default=None)
    r"""The UserJID of the user on whose behalf the message was sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteAChatbotMessage200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message deleted.
    """
    
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the message that was deleted."""  
    robot_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robot_jid'), 'exclude': lambda f: f is None }})
    r"""The BotJID of the Chatbot app. It can be found in the Chat Subscription Section on the Features page of your App Dashboard"""  
    sent_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sent_time'), 'exclude': lambda f: f is None }})
    r"""The date and time at which the message was deleted."""  
    to_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to_jid'), 'exclude': lambda f: f is None }})
    r"""The JID of the Channel or User to whom the message was sent."""  
    user_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_jid'), 'exclude': lambda f: f is None }})
    r"""The UserJID of the user on whose behalf the message was sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel."""  
    

@dataclasses.dataclass
class DeleteAChatbotMessageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    delete_a_chatbot_message_200_application_json_object: Optional[DeleteAChatbotMessage200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**<br>
    Message deleted.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    