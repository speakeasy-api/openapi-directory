/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * UserResponse - Get User Details
 */
public class UserResponse {
    /**
     * The payor or payee company name or null if the user is not a payor or payee user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    public String companyName;

    public UserResponse withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * the email address of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public UserResponse withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The payorId or payeeId or null if the user is not a payor or payee user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityId")
    public String entityId;

    public UserResponse withEntityId(String entityId) {
        this.entityId = entityId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstName")
    public String firstName;

    public UserResponse withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * The id of the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public UserResponse withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    public String lastName;

    public UserResponse withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * If true the user is currently locked out and unable to log in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockedOut")
    public Boolean lockedOut;

    public UserResponse withLockedOut(Boolean lockedOut) {
        this.lockedOut = lockedOut;
        return this;
    }
    
    /**
     * A timestamp showing when the user was locked out
     * If null then the user is not currently locked out
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lockedOutTimestamp")
    public OffsetDateTime lockedOutTimestamp;

    public UserResponse withLockedOutTimestamp(OffsetDateTime lockedOutTimestamp) {
        this.lockedOutTimestamp = lockedOutTimestamp;
        return this;
    }
    
    /**
     * The status of the MFA device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfaStatus")
    public UserResponseMfaStatusEnum mfaStatus;

    public UserResponse withMfaStatus(UserResponseMfaStatusEnum mfaStatus) {
        this.mfaStatus = mfaStatus;
        return this;
    }
    
    /**
     * The type of the MFA device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfaType")
    public UserResponseMfaTypeEnum mfaType;

    public UserResponse withMfaType(UserResponseMfaTypeEnum mfaType) {
        this.mfaType = mfaType;
        return this;
    }
    
    /**
     * The main contact number for the user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryContactNumber")
    public String primaryContactNumber;

    public UserResponse withPrimaryContactNumber(String primaryContactNumber) {
        this.primaryContactNumber = primaryContactNumber;
        return this;
    }
    
    /**
     * The role(s) for the user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    public Role[] roles;

    public UserResponse withRoles(Role[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * The secondary contact number for the user
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondaryContactNumber")
    public String secondaryContactNumber;

    public UserResponse withSecondaryContactNumber(String secondaryContactNumber) {
        this.secondaryContactNumber = secondaryContactNumber;
        return this;
    }
    
    /**
     * The phone number of a device that the user can receive sms messages on
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smsNumber")
    public String smsNumber;

    public UserResponse withSmsNumber(String smsNumber) {
        this.smsNumber = smsNumber;
        return this;
    }
    
    /**
     * The status of the user
     * when the user has been invited but not yet enrolled they will have a PENDING status
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public UserResponseStatusEnum status;

    public UserResponse withStatus(UserResponseStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userType")
    public UserResponseUserTypeEnum userType;

    public UserResponse withUserType(UserResponseUserTypeEnum userType) {
        this.userType = userType;
        return this;
    }
    
    public UserResponse(){}
}
