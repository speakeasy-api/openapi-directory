<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Summary
 * 
 * The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of
 * Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.
 * The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards
 * in Europe and, aligned with the goals of the Euro Retail Payments Board,
 * enables European banking customers to benefit from innovative products and services ('Banking as a Service')
 * by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.
 * 
 * The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.
 * 
 * The possible Approaches are:
 *   * Redirect SCA Approach
 *   * *(Not recommended by obp.ch community) OAuth SCA Approach*
 *   * *(Not recommended by obp.ch community) Decoupled SCA Approach*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*
 * 
 *   Not every message defined in this API definition is necessary for all approaches.
 *   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional
 *   Therefore for a particular implementation of a compliant API it is only necessary to support
 *   a certain subset of the methods defined in this API definition.
 * 
 *   **Please have a look at the implementation guidelines if you are not sure
 *   which message has to be used for the approach you are going to use.**
 * 
 * ## Some General Remarks Related to this version of the OpenAPI Specification:
 * * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**
 *   It is not a replacement in any sense.
 *   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API.
 * * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**
 * * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**
 * * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]
 * 
 *     "If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored."
 * 
 *   The element "Accept" will not be defined in this file at any place.
 * 
 *   The elements "Content-Type" and "Authorization" are implicitly defined by the OpenApi tags "content" and "security".
 * 
 * * There are several predefined types which might occur in payment initiation messages,
 *   but are not used in the standard JSON messages in the Implementation Guidelines.
 *   Therefore they are not used in the corresponding messages in this file either.
 *   We added them for the convenience of the user.
 *   If there is a payment product, which needs these fields, one can easily use the predefined types.
 *   But the ASPSP need not to accept them in general.
 * 
 * * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)
 *   except they are mentioned in the Implementation Guidelines.**
 *   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.
 * 
 * ## General Remarks on Data Types
 * 
 * The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters
 * 
 * a b c d e f g h i j k l m n o p q r s t u v w x y z
 * 
 * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 * 
 * 0 1 2 3 4 5 6 7 8 9
 * 
 * / - ? : ( ) . , ' +
 * 
 * Space
 * 
 * https://github.com/openbankingproject-ch/obp-apis - Full Documentation of NextGen Access to Account Interoperability Framework
 * (General Introduction Paper, Operational Rules, Implementation Guidelines)
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://github.com/openbankingproject-ch/obp-apis
 */
class SDK
{
	public const SERVERS = [
        /** Open Banking Project Switzerland Developer Portal */
		'https://api.dev.openbankingproject.ch',
	];
  	
    /**
     * The Account Information Service (AIS) offers the following services:
     * 
     *   * Transaction reports for a given account or card account including balances if applicable
     *   * Balances of a given account or card account
     *   * A list of available accounts or card account
     *   * Account details of a given account or card account or of the list of all accessible accounts or card account  relative to a granted consent
     * 
     * 
     * @var AccountInformationServiceAIS $$accountInformationServiceAIS
     */
	public AccountInformationServiceAIS $accountInformationServiceAIS;
	
    /**
     * Processes on starting authorisations, update PSU identification or PSU authentication data and explicit 
     * 
     * authorisation of transactions by using SCA are very similar in PIS and AIS and signing baskets services. 
     * The API calls supporting these processes are described in the following independently from the service/endpoint. 
     * For reasons of clarity, the endpoints are defined always for the Payment Initiation Service, the payment cancellation, 
     * the Account Information Service (Consents), and Signing Baskets separately. 
     * These processes usually are used following a hyperlink of the ASPSP. 
     * 
     * 
     * @var CommonServices $$commonServices
     */
	public CommonServices $commonServices;
	
    /**
     * Confirmation of Funds Service (PIIS) returns a confirmation of funds request at the ASPSP.
     * 
     * 
     * 
     * @var ConfirmationOfFundsServicePIIS $$confirmationOfFundsServicePIIS
     */
	public ConfirmationOfFundsServicePIIS $confirmationOfFundsServicePIIS;
	
    /**
     * The component for Payment Initiation Service (PIS) offers the following services:
     * 
     *   * Initiation and update of a payment request
     *   * Status information of a payment
     * 
     * 
     * @var PaymentInitiationServicePIS $$paymentInitiationServicePIS
     */
	public PaymentInitiationServicePIS $paymentInitiationServicePIS;
	
    /**
     * Signing basket methods are used for authorising several transactions and resp. or consents with one SCA operation.
     * 
     * 
     * 
     * @var SigningBasketsServiceSBS $$signingBasketsServiceSBS
     */
	public SigningBasketsServiceSBS $signingBasketsServiceSBS;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->accountInformationServiceAIS = new AccountInformationServiceAIS(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->commonServices = new CommonServices(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->confirmationOfFundsServicePIIS = new ConfirmationOfFundsServicePIIS(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->paymentInitiationServicePIS = new PaymentInitiationServicePIS(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->signingBasketsServiceSBS = new SigningBasketsServiceSBS(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}