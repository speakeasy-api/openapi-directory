<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Finishes enrolling a second factor for the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse
     */
	public function identitytoolkitAccountsMfaEnrollmentFinalize(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/mfaEnrollment:finalize');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentFinalizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartResponse
     */
	public function identitytoolkitAccountsMfaEnrollmentStart(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/mfaEnrollment:start');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitV2StartMfaEnrollmentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitV2StartMfaEnrollmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Revokes one second factor from the enrolled second factors for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse
     */
	public function identitytoolkitAccountsMfaEnrollmentWithdraw(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/mfaEnrollment:withdraw');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitV2WithdrawMfaRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaEnrollmentWithdrawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitV2WithdrawMfaResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2WithdrawMfaResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies the MFA challenge and performs sign-in
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeResponse
     */
	public function identitytoolkitAccountsMfaSignInFinalize(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/mfaSignIn:finalize');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitV2FinalizeMfaSignInRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInFinalizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitV2FinalizeMfaSignInResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sends the MFA challenge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartResponse
     */
	public function identitytoolkitAccountsMfaSignInStart(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/mfaSignIn:start');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudIdentitytoolkitV2StartMfaSignInRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitAccountsMfaSignInStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudIdentitytoolkitV2StartMfaSignInResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudIdentitytoolkitV2StartMfaSignInResponse', 'json');
            }
        }

        return $response;
    }
}