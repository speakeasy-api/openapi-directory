/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PermissionType } from "./permissiontype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Base model for all types
 */
export class StoryCollaborator extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lead_id" })
  leadId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * A permission type that can be applied to story collaborator
   */
  @SpeakeasyMetadata()
  @Expose({ name: "permission_type" })
  @Type(() => PermissionType)
  permissionType?: PermissionType;

  @SpeakeasyMetadata()
  @Expose({ name: "permission_type_id" })
  permissionTypeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "story_id" })
  storyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
