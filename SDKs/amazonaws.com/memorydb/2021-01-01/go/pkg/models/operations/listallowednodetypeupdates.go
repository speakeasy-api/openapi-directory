// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAllowedNodeTypeUpdatesXAmzTargetEnum
type ListAllowedNodeTypeUpdatesXAmzTargetEnum string

const (
	ListAllowedNodeTypeUpdatesXAmzTargetEnumAmazonMemoryDbListAllowedNodeTypeUpdates ListAllowedNodeTypeUpdatesXAmzTargetEnum = "AmazonMemoryDB.ListAllowedNodeTypeUpdates"
)

func (e *ListAllowedNodeTypeUpdatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonMemoryDB.ListAllowedNodeTypeUpdates":
		*e = ListAllowedNodeTypeUpdatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAllowedNodeTypeUpdatesXAmzTargetEnum: %s", s)
	}
}

type ListAllowedNodeTypeUpdatesRequest struct {
	ListAllowedNodeTypeUpdatesRequest shared.ListAllowedNodeTypeUpdatesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                 *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                 *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                        ListAllowedNodeTypeUpdatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAllowedNodeTypeUpdatesResponse struct {
	// ClusterNotFoundFault
	ClusterNotFoundFault interface{}
	ContentType          string
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// Success
	ListAllowedNodeTypeUpdatesResponse *shared.ListAllowedNodeTypeUpdatesResponse
	StatusCode                         int
	RawResponse                        *http.Response
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
}
