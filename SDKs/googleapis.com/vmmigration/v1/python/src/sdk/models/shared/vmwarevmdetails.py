"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VmwareVMDetailsBootOptionEnum(str, Enum):
    r"""Output only. The VM Boot Option."""
    BOOT_OPTION_UNSPECIFIED = 'BOOT_OPTION_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'

class VmwareVMDetailsPowerStateEnum(str, Enum):
    r"""The power state of the VM at the moment list was taken."""
    POWER_STATE_UNSPECIFIED = 'POWER_STATE_UNSPECIFIED'
    ON = 'ON'
    OFF = 'OFF'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VmwareVMDetails:
    r"""VmwareVmDetails describes a VM in vCenter."""
    
    boot_option: Optional[VmwareVMDetailsBootOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootOption'), 'exclude': lambda f: f is None }})
    r"""Output only. The VM Boot Option."""  
    committed_storage_mb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committedStorageMb'), 'exclude': lambda f: f is None }})
    r"""The total size of the storage allocated to the VM in MB."""  
    cpu_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuCount'), 'exclude': lambda f: f is None }})
    r"""The number of cpus in the VM."""  
    datacenter_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenterDescription'), 'exclude': lambda f: f is None }})
    r"""The descriptive name of the vCenter's datacenter this VM is contained in."""  
    datacenter_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenterId'), 'exclude': lambda f: f is None }})
    r"""The id of the vCenter's datacenter this VM is contained in."""  
    disk_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskCount'), 'exclude': lambda f: f is None }})
    r"""The number of disks the VM has."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the VM. Note that this is not necessarily unique."""  
    guest_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestDescription'), 'exclude': lambda f: f is None }})
    r"""The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold."""  
    memory_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryMb'), 'exclude': lambda f: f is None }})
    r"""The size of the memory of the VM in MB."""  
    power_state: Optional[VmwareVMDetailsPowerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerState'), 'exclude': lambda f: f is None }})
    r"""The power state of the VM at the moment list was taken."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the VM in vCenter."""  
    vm_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmId'), 'exclude': lambda f: f is None }})
    r"""The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VmwareVMDetailsInput:
    r"""VmwareVmDetails describes a VM in vCenter."""
    
    committed_storage_mb: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committedStorageMb'), 'exclude': lambda f: f is None }})
    r"""The total size of the storage allocated to the VM in MB."""  
    cpu_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuCount'), 'exclude': lambda f: f is None }})
    r"""The number of cpus in the VM."""  
    datacenter_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenterDescription'), 'exclude': lambda f: f is None }})
    r"""The descriptive name of the vCenter's datacenter this VM is contained in."""  
    datacenter_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datacenterId'), 'exclude': lambda f: f is None }})
    r"""The id of the vCenter's datacenter this VM is contained in."""  
    disk_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskCount'), 'exclude': lambda f: f is None }})
    r"""The number of disks the VM has."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the VM. Note that this is not necessarily unique."""  
    guest_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guestDescription'), 'exclude': lambda f: f is None }})
    r"""The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold."""  
    memory_mb: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryMb'), 'exclude': lambda f: f is None }})
    r"""The size of the memory of the VM in MB."""  
    power_state: Optional[VmwareVMDetailsPowerStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('powerState'), 'exclude': lambda f: f is None }})
    r"""The power state of the VM at the moment list was taken."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the VM in vCenter."""  
    vm_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmId'), 'exclude': lambda f: f is None }})
    r"""The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM."""  
    