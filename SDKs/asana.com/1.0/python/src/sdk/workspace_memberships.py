"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class WorkspaceMemberships:
    r"""This object determines if a user is a member of a workspace."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_workspace_membership(self, request: operations.GetWorkspaceMembershipRequest) -> operations.GetWorkspaceMembershipResponse:
        r"""Get a workspace membership
        Returns the complete workspace record for a single workspace membership.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceMembershipRequest, base_url, '/workspace_memberships/{workspace_membership_gid}', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceMembershipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceMembershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWorkspaceMembership200ApplicationJSON])
                res.get_workspace_membership_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_workspace_memberships_for_user(self, request: operations.GetWorkspaceMembershipsForUserRequest) -> operations.GetWorkspaceMembershipsForUserResponse:
        r"""Get workspace memberships for a user
        Returns the compact workspace membership records for the user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceMembershipsForUserRequest, base_url, '/users/{user_gid}/workspace_memberships', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceMembershipsForUserRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceMembershipsForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWorkspaceMembershipsForUser200ApplicationJSON])
                res.get_workspace_memberships_for_user_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_workspace_memberships_for_workspace(self, request: operations.GetWorkspaceMembershipsForWorkspaceRequest) -> operations.GetWorkspaceMembershipsForWorkspaceResponse:
        r"""Get the workspace memberships for a workspace
        Returns the compact workspace membership records for the workspace.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspaceMembershipsForWorkspaceRequest, base_url, '/workspaces/{workspace_gid}/workspace_memberships', request)
        
        query_params = utils.get_query_params(operations.GetWorkspaceMembershipsForWorkspaceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspaceMembershipsForWorkspaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWorkspaceMembershipsForWorkspace200ApplicationJSON])
                res.get_workspace_memberships_for_workspace_200_application_json_object = out

        return res

    