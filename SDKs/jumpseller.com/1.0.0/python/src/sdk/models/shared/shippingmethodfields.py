"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import shippingservice as shared_shippingservice
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ShippingMethodFieldsTypeEnum(str, Enum):
    r"""Type of the Shipping Method"""
    FREE = 'free'
    TABLES = 'tables'
    CORREIOSBR = 'correiosbr'
    CORREOS_CHILE = 'correos_chile'
    CHILEXPRESS = 'chilexpress'
    FLAT = 'flat'
    UPS = 'ups'
    EXTERNAL = 'external'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShippingMethodFields:
    
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callback_url'), 'exclude': lambda f: f is None }})
    r"""URL that receives the shipping data and returns rates"""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""City/Municipality name of origin"""  
    fetch_services_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fetch_services_url'), 'exclude': lambda f: f is None }})
    r"""URL that returns available shipping services"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the Shipping Method"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the Shipping Method"""  
    postal: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postal'), 'exclude': lambda f: f is None }})
    r"""Postal/Zipcode of origin"""  
    services: Optional[list[shared_shippingservice.ShippingService]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State/Region code of origin"""  
    type: Optional[ShippingMethodFieldsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Shipping Method"""  
    