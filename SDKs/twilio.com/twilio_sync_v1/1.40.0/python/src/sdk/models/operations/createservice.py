"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sync_v1_service as shared_sync_v1_service
from typing import Optional

CREATE_SERVICE_SERVERS = [
	"https://sync.twilio.com",
]


@dataclasses.dataclass
class CreateServiceSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateServiceCreateServiceRequest:
    
    acl_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AclEnabled' }})
    r"""Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A string that you assign to describe the resource."""  
    reachability_debouncing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReachabilityDebouncingEnabled' }})
    r"""Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event."""  
    reachability_debouncing_window: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReachabilityDebouncingWindow' }})
    r"""The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the `webhook_url` is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the call to `webhook_url`."""  
    reachability_webhooks_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReachabilityWebhooksEnabled' }})
    r"""Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`."""  
    webhooks_from_rest_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WebhooksFromRestEnabled' }})
    r"""Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`."""  
    webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WebhookUrl' }})
    r"""The URL we should call when Sync objects are manipulated."""  
    

@dataclasses.dataclass
class CreateServiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sync_v1_service: Optional[shared_sync_v1_service.SyncV1Service] = dataclasses.field(default=None)
    r"""Created"""  
    