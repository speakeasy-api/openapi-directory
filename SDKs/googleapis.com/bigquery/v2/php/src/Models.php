<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Models 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the model specified by modelId from the dataset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteResponse
     */
	public function bigqueryModelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets the specified model resource by model ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetResponse
     */
	public function bigqueryModelsGet(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->model = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Model', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListResponse
     */
	public function bigqueryModelsList(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/models', \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patch specific fields in the specified model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchResponse
     */
	public function bigqueryModelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/datasets/{datasetId}/models/{modelId}', \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryModelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->model = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Model', 'json');
            }
        }

        return $response;
    }
}