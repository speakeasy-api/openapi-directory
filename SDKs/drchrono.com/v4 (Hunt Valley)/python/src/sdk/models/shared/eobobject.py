"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EOBObjectPaymentMethodEnum(str, Enum):
    r"""`\\"\\"` - Unknown, `\\"ACH\\"` - Automated Clearing House (ACH), `\\"BOPCCP\\"` - Cash Concentration/Disbursement plus Addenda (CCD+) (ACH), `\\"BOPCTX\\"` - Corporate Trade Exchange (CTX) (ACH), `\\"CHK\\"` - Check, `\\"FWT\\"` - Federal Reserve Funds/Wire Transfer - Nonrepetitive, `\\"VPAY\\"` - vPayment, `\\"NON\\"` - Non-Payment Data"""
    UNKNOWN = ''
    ACH = 'ACH'
    BOPCCP = 'BOPCCP'
    BOPCTX = 'BOPCTX'
    CHK = 'CHK'
    FWT = 'FWT'
    VPAY = 'VPAY'
    NON = 'NON'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EOBObject:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})  
    insurance_payer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_id') }})  
    insurance_payer_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_name') }})  
    insurance_payer_trace_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insurance_payer_trace_number') }})  
    check_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_date'), 'exclude': lambda f: f is None }})
    r"""Date of check. If missing, default to the date when the request is made"""  
    deposit_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit_date'), 'exclude': lambda f: f is None }})
    r"""Date when EOB gets deposited."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    payment_method: Optional[EOBObjectPaymentMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_method'), 'exclude': lambda f: f is None }})
    r"""`\\"\\"` - Unknown, `\\"ACH\\"` - Automated Clearing House (ACH), `\\"BOPCCP\\"` - Cash Concentration/Disbursement plus Addenda (CCD+) (ACH), `\\"BOPCTX\\"` - Corporate Trade Exchange (CTX) (ACH), `\\"CHK\\"` - Check, `\\"FWT\\"` - Federal Reserve Funds/Wire Transfer - Nonrepetitive, `\\"VPAY\\"` - vPayment, `\\"NON\\"` - Non-Payment Data"""  
    posted_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posted_date'), 'exclude': lambda f: f is None }})  
    scanned_eob: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scanned_eob'), 'exclude': lambda f: f is None }})  
    total_paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_paid'), 'exclude': lambda f: f is None }})
    r"""Total amount paid. If missing, default to 0.00"""  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    