"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Databases:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sql_databases_delete(self, request: operations.SQLDatabasesDeleteRequest, security: operations.SQLDatabasesDeleteSecurity) -> operations.SQLDatabasesDeleteResponse:
        r"""Deletes a database from a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesDeleteRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases/{database}', request)
        
        query_params = utils.get_query_params(operations.SQLDatabasesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_databases_get(self, request: operations.SQLDatabasesGetRequest, security: operations.SQLDatabasesGetSecurity) -> operations.SQLDatabasesGetResponse:
        r"""Retrieves a resource containing information about a database inside a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesGetRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases/{database}', request)
        
        query_params = utils.get_query_params(operations.SQLDatabasesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Database])
                res.database = out

        return res

    def sql_databases_insert(self, request: operations.SQLDatabasesInsertRequest, security: operations.SQLDatabasesInsertSecurity) -> operations.SQLDatabasesInsertResponse:
        r"""Inserts a resource containing information about a database inside a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesInsertRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "database", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLDatabasesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_databases_list(self, request: operations.SQLDatabasesListRequest, security: operations.SQLDatabasesListSecurity) -> operations.SQLDatabasesListResponse:
        r"""Lists databases in the specified Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesListRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases', request)
        
        query_params = utils.get_query_params(operations.SQLDatabasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatabasesListResponse])
                res.databases_list_response = out

        return res

    def sql_databases_patch(self, request: operations.SQLDatabasesPatchRequest, security: operations.SQLDatabasesPatchSecurity) -> operations.SQLDatabasesPatchResponse:
        r"""Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesPatchRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases/{database}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "database1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLDatabasesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def sql_databases_update(self, request: operations.SQLDatabasesUpdateRequest, security: operations.SQLDatabasesUpdateSecurity) -> operations.SQLDatabasesUpdateResponse:
        r"""Updates a resource containing information about a database inside a Cloud SQL instance."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SQLDatabasesUpdateRequest, base_url, '/v1/projects/{project}/instances/{instance}/databases/{database}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "database1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SQLDatabasesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SQLDatabasesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    