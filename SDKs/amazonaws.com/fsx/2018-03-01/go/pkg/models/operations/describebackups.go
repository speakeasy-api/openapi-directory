// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeBackupsXAmzTargetEnum
type DescribeBackupsXAmzTargetEnum string

const (
	DescribeBackupsXAmzTargetEnumAwsSimbaAPIServiceV20180301DescribeBackups DescribeBackupsXAmzTargetEnum = "AWSSimbaAPIService_v20180301.DescribeBackups"
)

func (e *DescribeBackupsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSSimbaAPIService_v20180301.DescribeBackups":
		*e = DescribeBackupsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeBackupsXAmzTargetEnum: %s", s)
	}
}

type DescribeBackupsRequest struct {
	DescribeBackupsRequest shared.DescribeBackupsRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                       `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeBackupsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeBackupsResponse struct {
	// BackupNotFound
	BackupNotFound interface{}
	// BadRequest
	BadRequest  interface{}
	ContentType string
	// Success
	DescribeBackupsResponse *shared.DescribeBackupsResponse
	// FileSystemNotFound
	FileSystemNotFound interface{}
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
	// VolumeNotFound
	VolumeNotFound interface{}
}
