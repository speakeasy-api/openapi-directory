"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Japanese:
    r"""JAPANESE special features"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def gender_japanese_name_full(self, request: operations.GenderJapaneseNameFullRequest, security: operations.GenderJapaneseNameFullSecurity) -> operations.GenderJapaneseNameFullResponse:
        r"""Infer the likely gender of a Japanese full name ex. 王晓明"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenderJapaneseNameFullRequest, base_url, '/api2/json/genderJapaneseNameFull/{japaneseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderJapaneseNameFullResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameGenderedOut])
                res.personal_name_gendered_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def gender_japanese_name_full_batch(self, request: shared.BatchPersonalNameIn, security: operations.GenderJapaneseNameFullBatchSecurity) -> operations.GenderJapaneseNameFullBatchResponse:
        r"""Infer the likely gender of up to 100 full names"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/genderJapaneseNameFullBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderJapaneseNameFullBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameGenderedOut])
                res.batch_personal_name_gendered_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def gender_japanese_name_pinyin(self, request: operations.GenderJapaneseNamePinyinRequest, security: operations.GenderJapaneseNamePinyinSecurity) -> operations.GenderJapaneseNamePinyinResponse:
        r"""Infer the likely gender of a Japanese name in LATIN (Pinyin)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GenderJapaneseNamePinyinRequest, base_url, '/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderJapaneseNamePinyinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FirstLastNameGenderedOut])
                res.first_last_name_gendered_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def gender_japanese_name_pinyin_batch(self, request: shared.BatchFirstLastNameIn, security: operations.GenderJapaneseNamePinyinBatchSecurity) -> operations.GenderJapaneseNamePinyinBatchResponse:
        r"""Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/genderJapaneseNameBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenderJapaneseNamePinyinBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchFirstLastNameGenderedOut])
                res.batch_first_last_name_gendered_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def japanese_name_gender_kanji_candidates_batch(self, request: shared.BatchFirstLastNameGenderIn, security: operations.JapaneseNameGenderKanjiCandidatesBatchSecurity) -> operations.JapaneseNameGenderKanjiCandidatesBatchResponse:
        r"""Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/japaneseNameGenderKanjiCandidatesBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameGenderKanjiCandidatesBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchCandidatesOut])
                res.batch_name_match_candidates_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def japanese_name_kanji_candidates(self, request: operations.JapaneseNameKanjiCandidatesRequest, security: operations.JapaneseNameKanjiCandidatesSecurity) -> operations.JapaneseNameKanjiCandidatesResponse:
        r"""Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JapaneseNameKanjiCandidatesRequest, base_url, '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameKanjiCandidatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchCandidatesOut])
                res.name_match_candidates_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def japanese_name_kanji_candidates_batch(self, request: shared.BatchFirstLastNameIn, security: operations.JapaneseNameKanjiCandidatesBatchSecurity) -> operations.JapaneseNameKanjiCandidatesBatchResponse:
        r"""Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/japaneseNameKanjiCandidatesBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameKanjiCandidatesBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchCandidatesOut])
                res.batch_name_match_candidates_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def japanese_name_kanji_candidates_1(self, request: operations.JapaneseNameKanjiCandidates1Request, security: operations.JapaneseNameKanjiCandidates1Security) -> operations.JapaneseNameKanjiCandidates1Response:
        r"""Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JapaneseNameKanjiCandidates1Request, base_url, '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{knownGender}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameKanjiCandidates1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchCandidatesOut])
                res.name_match_candidates_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def japanese_name_latin_candidates(self, request: operations.JapaneseNameLatinCandidatesRequest, security: operations.JapaneseNameLatinCandidatesSecurity) -> operations.JapaneseNameLatinCandidatesResponse:
        r"""Romanize japanese name, based on the name in Kanji."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JapaneseNameLatinCandidatesRequest, base_url, '/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameLatinCandidatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchCandidatesOut])
                res.name_match_candidates_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def japanese_name_latin_candidates_batch(self, request: shared.BatchFirstLastNameIn, security: operations.JapaneseNameLatinCandidatesBatchSecurity) -> operations.JapaneseNameLatinCandidatesBatchResponse:
        r"""Romanize japanese names, based on the name in KANJI"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/japaneseNameLatinCandidatesBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameLatinCandidatesBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchCandidatesOut])
                res.batch_name_match_candidates_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def japanese_name_match(self, request: operations.JapaneseNameMatchRequest, security: operations.JapaneseNameMatchSecurity) -> operations.JapaneseNameMatchResponse:
        r"""Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JapaneseNameMatchRequest, base_url, '/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameMatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NameMatchedOut])
                res.name_matched_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def japanese_name_match_batch(self, request: shared.BatchMatchPersonalFirstLastNameIn, security: operations.JapaneseNameMatchBatchSecurity) -> operations.JapaneseNameMatchBatchResponse:
        r"""Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/japaneseNameMatchBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameMatchBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchNameMatchedOut])
                res.batch_name_matched_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def japanese_name_match_feedback_loop(self, request: operations.JapaneseNameMatchFeedbackLoopRequest, security: operations.JapaneseNameMatchFeedbackLoopSecurity) -> operations.JapaneseNameMatchFeedbackLoopResponse:
        r"""[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JapaneseNameMatchFeedbackLoopRequest, base_url, '/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JapaneseNameMatchFeedbackLoopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FeedbackLoopOut])
                res.feedback_loop_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def parse_japanese_name(self, request: operations.ParseJapaneseNameRequest, security: operations.ParseJapaneseNameSecurity) -> operations.ParseJapaneseNameResponse:
        r"""Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ParseJapaneseNameRequest, base_url, '/api2/json/parseJapaneseName/{japaneseName}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParseJapaneseNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PersonalNameParsedOut])
                res.personal_name_parsed_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def parse_japanese_name_batch(self, request: shared.BatchPersonalNameIn, security: operations.ParseJapaneseNameBatchSecurity) -> operations.ParseJapaneseNameBatchResponse:
        r"""Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/parseJapaneseNameBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ParseJapaneseNameBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchPersonalNameParsedOut])
                res.batch_personal_name_parsed_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    