"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import bucketcountbyeffectivepermission as shared_bucketcountbyeffectivepermission
from ..shared import bucketcountbyencryptiontype as shared_bucketcountbyencryptiontype
from ..shared import bucketcountbysharedaccesstype as shared_bucketcountbysharedaccesstype
from ..shared import bucketcountpolicyallowsunencryptedobjectuploads as shared_bucketcountpolicyallowsunencryptedobjectuploads
from ..shared import bucketstatisticsbysensitivity as shared_bucketstatisticsbysensitivity
from ..shared import objectlevelstatistics as shared_objectlevelstatistics
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetBucketStatisticsResponse:
    r"""Success"""
    
    bucket_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCount'), 'exclude': lambda f: f is None }})  
    bucket_count_by_effective_permission: Optional[shared_bucketcountbyeffectivepermission.BucketCountByEffectivePermission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCountByEffectivePermission'), 'exclude': lambda f: f is None }})  
    bucket_count_by_encryption_type: Optional[shared_bucketcountbyencryptiontype.BucketCountByEncryptionType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCountByEncryptionType'), 'exclude': lambda f: f is None }})  
    bucket_count_by_object_encryption_requirement: Optional[shared_bucketcountpolicyallowsunencryptedobjectuploads.BucketCountPolicyAllowsUnencryptedObjectUploads] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCountByObjectEncryptionRequirement'), 'exclude': lambda f: f is None }})  
    bucket_count_by_shared_access_type: Optional[shared_bucketcountbysharedaccesstype.BucketCountBySharedAccessType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketCountBySharedAccessType'), 'exclude': lambda f: f is None }})  
    bucket_statistics_by_sensitivity: Optional[shared_bucketstatisticsbysensitivity.BucketStatisticsBySensitivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketStatisticsBySensitivity'), 'exclude': lambda f: f is None }})  
    classifiable_object_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classifiableObjectCount'), 'exclude': lambda f: f is None }})  
    classifiable_size_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classifiableSizeInBytes'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    object_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('objectCount'), 'exclude': lambda f: f is None }})  
    size_in_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeInBytes'), 'exclude': lambda f: f is None }})  
    size_in_bytes_compressed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeInBytesCompressed'), 'exclude': lambda f: f is None }})  
    unclassifiable_object_count: Optional[shared_objectlevelstatistics.ObjectLevelStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unclassifiableObjectCount'), 'exclude': lambda f: f is None }})  
    unclassifiable_object_size_in_bytes: Optional[shared_objectlevelstatistics.ObjectLevelStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unclassifiableObjectSizeInBytes'), 'exclude': lambda f: f is None }})  
    