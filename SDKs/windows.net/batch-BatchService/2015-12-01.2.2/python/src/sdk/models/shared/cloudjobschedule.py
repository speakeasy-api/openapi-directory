"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import jobscheduleexecutioninformation as shared_jobscheduleexecutioninformation
from ..shared import jobschedulestatistics as shared_jobschedulestatistics
from ..shared import jobspecification as shared_jobspecification
from ..shared import metadataitem as shared_metadataitem
from ..shared import schedule as shared_schedule
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CloudJobSchedulePreviousStateEnum(str, Enum):
    r"""Gets or sets the previous state of the job schedule."""
    ACTIVE = 'active'
    COMPLETED = 'completed'
    DISABLED = 'disabled'
    TERMINATING = 'terminating'
    DELETING = 'deleting'

class CloudJobScheduleStateEnum(str, Enum):
    r"""Gets or sets the current state of the job schedule."""
    ACTIVE = 'active'
    COMPLETED = 'completed'
    DISABLED = 'disabled'
    TERMINATING = 'terminating'
    DELETING = 'deleting'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudJobSchedule:
    r"""A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job."""
    
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the creation time of the job schedule."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the display name for the schedule."""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eTag'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the ETag of the job schedule."""  
    execution_info: Optional[shared_jobscheduleexecutioninformation.JobScheduleExecutionInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionInfo'), 'exclude': lambda f: f is None }})
    r"""Specifies how tasks should be run in a job associated with a job schedule."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a string that uniquely identifies the schedule within the account. A GUID is recommended."""  
    job_specification: Optional[shared_jobspecification.JobSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobSpecification'), 'exclude': lambda f: f is None }})
    r"""Specifies details of the jobs to be created on a schedule."""  
    last_modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the last modified time of the job schedule."""  
    metadata: Optional[list[shared_metadataitem.MetadataItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of name-value pairs associated with the schedule as metadata."""  
    previous_state: Optional[CloudJobSchedulePreviousStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousState'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the previous state of the job schedule."""  
    previous_state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousStateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the job schedule entered its previous state."""  
    schedule: Optional[shared_schedule.Schedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})
    r"""The schedule according to which jobs will be created"""  
    state: Optional[CloudJobScheduleStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the current state of the job schedule."""  
    state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the job schedule entered the current state."""  
    stats: Optional[shared_jobschedulestatistics.JobScheduleStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats'), 'exclude': lambda f: f is None }})
    r"""The lifetime resource usage statistics for a job schedule."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the URL of the job schedule."""  
    