// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListExperimentsPathParams struct {
	// The name or ARN of the project to return the experiment list from.
	Project string `pathParam:"style=simple,explode=false,name=project"`
}

// ListExperimentsStatusEnum - Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.
type ListExperimentsStatusEnum string

const (
	ListExperimentsStatusEnumCreated   ListExperimentsStatusEnum = "CREATED"
	ListExperimentsStatusEnumUpdating  ListExperimentsStatusEnum = "UPDATING"
	ListExperimentsStatusEnumRunning   ListExperimentsStatusEnum = "RUNNING"
	ListExperimentsStatusEnumCompleted ListExperimentsStatusEnum = "COMPLETED"
	ListExperimentsStatusEnumCancelled ListExperimentsStatusEnum = "CANCELLED"
)

func (e *ListExperimentsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CREATED":
		fallthrough
	case "UPDATING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "CANCELLED":
		*e = ListExperimentsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListExperimentsStatusEnum: %s", s)
	}
}

type ListExperimentsQueryParams struct {
	// The maximum number of results to include in the response.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to use when requesting the next set of results. You received this token from a previous <code>ListExperiments</code> operation.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.
	Status *ListExperimentsStatusEnum `queryParam:"style=form,explode=true,name=status"`
}

type ListExperimentsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListExperimentsRequest struct {
	PathParams  ListExperimentsPathParams
	QueryParams ListExperimentsQueryParams
	Headers     ListExperimentsHeaders
}

type ListExperimentsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	ListExperimentsResponse *shared.ListExperimentsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
