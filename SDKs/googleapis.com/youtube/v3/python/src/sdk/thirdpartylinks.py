"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ThirdPartyLinks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def youtube_third_party_links_delete(self, request: operations.YoutubeThirdPartyLinksDeleteRequest) -> operations.YoutubeThirdPartyLinksDeleteResponse:
        r"""Deletes a resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/thirdPartyLinks'
        
        query_params = utils.get_query_params(operations.YoutubeThirdPartyLinksDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeThirdPartyLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def youtube_third_party_links_insert(self, request: operations.YoutubeThirdPartyLinksInsertRequest) -> operations.YoutubeThirdPartyLinksInsertResponse:
        r"""Inserts a new resource into this collection."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/thirdPartyLinks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "third_party_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeThirdPartyLinksInsertRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeThirdPartyLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ThirdPartyLink])
                res.third_party_link = out

        return res

    def youtube_third_party_links_list(self, request: operations.YoutubeThirdPartyLinksListRequest) -> operations.YoutubeThirdPartyLinksListResponse:
        r"""Retrieves a list of resources, possibly filtered."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/thirdPartyLinks'
        
        query_params = utils.get_query_params(operations.YoutubeThirdPartyLinksListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeThirdPartyLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ThirdPartyLinkListResponse])
                res.third_party_link_list_response = out

        return res

    def youtube_third_party_links_update(self, request: operations.YoutubeThirdPartyLinksUpdateRequest) -> operations.YoutubeThirdPartyLinksUpdateResponse:
        r"""Updates an existing resource."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/youtube/v3/thirdPartyLinks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "third_party_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.YoutubeThirdPartyLinksUpdateRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.YoutubeThirdPartyLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ThirdPartyLink])
                res.third_party_link = out

        return res

    