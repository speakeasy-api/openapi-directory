// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListTasksStateEnum - A structure used to filter the list of tasks.
type ListTasksStateEnum string

const (
	ListTasksStateEnumInProgress ListTasksStateEnum = "IN_PROGRESS"
	ListTasksStateEnumCanceled   ListTasksStateEnum = "CANCELED"
	ListTasksStateEnumCompleted  ListTasksStateEnum = "COMPLETED"
)

func (e *ListTasksStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IN_PROGRESS":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETED":
		*e = ListTasksStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTasksStateEnum: %s", s)
	}
}

type ListTasksRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The maximum number of tasks per page.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// A pagination token to continue to the next page of tasks.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// A structure used to filter the list of tasks.
	State *ListTasksStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type ListTasksResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListTasksOutput *shared.ListTasksOutput
	StatusCode      int
	RawResponse     *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
