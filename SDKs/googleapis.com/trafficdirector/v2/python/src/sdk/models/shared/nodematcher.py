"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import stringmatcher as shared_stringmatcher
from ..shared import structmatcher as shared_structmatcher
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodeMatcher:
    r"""Specifies the way to match a Node. The match follows AND semantics."""
    
    node_id: Optional[shared_stringmatcher.StringMatcher] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeId'), 'exclude': lambda f: f is None }})
    r"""Specifies the way to match a string. [#next-free-field: 7]"""  
    node_metadatas: Optional[list[shared_structmatcher.StructMatcher]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeMetadatas'), 'exclude': lambda f: f is None }})
    r"""Specifies match criteria on the node metadata."""  
    