// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type DashboardMeetingDetailSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type DashboardMeetingDetailPathParams struct {
	// The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

// DashboardMeetingDetailTypeEnum - The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
type DashboardMeetingDetailTypeEnum string

const (
	DashboardMeetingDetailTypeEnumPast    DashboardMeetingDetailTypeEnum = "past"
	DashboardMeetingDetailTypeEnumPastOne DashboardMeetingDetailTypeEnum = "pastOne"
	DashboardMeetingDetailTypeEnumLive    DashboardMeetingDetailTypeEnum = "live"
)

func (e *DashboardMeetingDetailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "past":
		fallthrough
	case "pastOne":
		fallthrough
	case "live":
		*e = DashboardMeetingDetailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardMeetingDetailTypeEnum: %s", s)
	}
}

type DashboardMeetingDetailQueryParams struct {
	// The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings.
	Type *DashboardMeetingDetailTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DashboardMeetingDetailRequest struct {
	PathParams  DashboardMeetingDetailPathParams
	QueryParams DashboardMeetingDetailQueryParams
	Security    DashboardMeetingDetailSecurity
}

type DashboardMeetingDetailMeetingMetricsCustomKeys struct {
	// Custom key associated with the meetinh.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the meeting.
	Value *string `json:"value,omitempty"`
}

// DashboardMeetingDetailMeetingMetrics - Meeting metric details.
type DashboardMeetingDetailMeetingMetrics struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []DashboardMeetingDetailMeetingMetricsCustomKeys `json:"custom_keys,omitempty"`
	// Department of the host.
	Dept *string `json:"dept,omitempty"`
	// Meeting duration.
	Duration *string `json:"duration,omitempty"`
	// Email address of the host.
	Email *string `json:"email,omitempty"`
	// Meeting end time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Indicates whether or not [third party audio](https://support.zoom.us/hc/en-us/articles/202470795-3rd-Party-Audio-Conference) was used in the meeting.
	Has3rdPartyAudio *bool `json:"has_3rd_party_audio,omitempty"`
	// Indicates whether or not the PSTN was used in the meeting.
	HasPstn *bool `json:"has_pstn,omitempty"`
	// Indicates whether or not the recording feature was used in the meeting.
	HasRecording *bool `json:"has_recording,omitempty"`
	// Indicates whether or not screenshare feature was used in the meeting.
	HasScreenShare *bool `json:"has_screen_share,omitempty"`
	// Indicates whether or not someone joined the meeting using SIP.
	HasSip *bool `json:"has_sip,omitempty"`
	// Indicates whether or not video was used in the meeting.
	HasVideo *bool `json:"has_video,omitempty"`
	// Indicates whether or not VoIP was used in the meeting.
	HasVoip *bool `json:"has_voip,omitempty"`
	// Host display name.
	Host *string `json:"host,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// The number of Zoom Room participants in the meeting.
	InRoomParticipants *int64 `json:"in_room_participants,omitempty"`
	// Meeting participant count.
	Participants *int64 `json:"participants,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// License type of the user.
	UserType *string `json:"user_type,omitempty"`
	// Meeting UUID. Please double encode your UUID when using it for API calls if the UUID begins with a '/'or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type DashboardMeetingDetailResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// Meeting returned.<br>
	// Only available for paid accounts that have enabled the dashboard feature.
	MeetingMetrics *DashboardMeetingDetailMeetingMetrics
	StatusCode     int
	RawResponse    *http.Response
}
