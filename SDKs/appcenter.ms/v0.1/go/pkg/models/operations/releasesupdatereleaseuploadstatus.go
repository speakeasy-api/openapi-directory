// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesUpdateReleaseUploadStatusSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum - The new status of the release upload
type ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum string

const (
	ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnumUploadFinished ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum = "uploadFinished"
	ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnumUploadCanceled ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum = "uploadCanceled"
)

func (e ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum) ToPointer() *ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum {
	return &e
}

func (e *ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uploadFinished":
		fallthrough
	case "uploadCanceled":
		*e = ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum: %v", v)
	}
}

// ReleasesUpdateReleaseUploadStatusRequestBody - The release upload status information.
type ReleasesUpdateReleaseUploadStatusRequestBody struct {
	// The new status of the release upload
	UploadStatus ReleasesUpdateReleaseUploadStatusRequestBodyUploadStatusEnum `json:"upload_status"`
}

type ReleasesUpdateReleaseUploadStatusRequest struct {
	// The release upload status information.
	RequestBody ReleasesUpdateReleaseUploadStatusRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// A flag that indicates to extract release or not, true by default
	Extract *bool `queryParam:"style=form,explode=true,name=extract"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release upload
	UploadID string `pathParam:"style=simple,explode=false,name=upload_id"`
}

type ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum string

const (
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumBadRequest          ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumConflict            ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumNotFound            ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumInternalServerError ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumUnauthorized        ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum) ToPointer() *ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesUpdateReleaseUploadStatus404ApplicationJSON - Error codes:
// - `not_found` - The app or upload doesn't exist.
type ReleasesUpdateReleaseUploadStatus404ApplicationJSON struct {
	Code    ReleasesUpdateReleaseUploadStatus404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                      `json:"message"`
}

type ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum string

const (
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumBadRequest          ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumConflict            ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "Conflict"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumNotAcceptable       ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumNotFound            ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "NotFound"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumInternalServerError ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumUnauthorized        ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnumTooManyRequests     ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum) ToPointer() *ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum {
	return &e
}

func (e *ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum: %v", v)
	}
}

// ReleasesUpdateReleaseUploadStatus400ApplicationJSON - The request contained invalid properties.
type ReleasesUpdateReleaseUploadStatus400ApplicationJSON struct {
	Code    ReleasesUpdateReleaseUploadStatus400ApplicationJSONCodeEnum `json:"code"`
	Message string                                                      `json:"message"`
}

// ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum - The current upload status.
type ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum string

const (
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumUploadStarted      ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "uploadStarted"
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumUploadFinished     ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "uploadFinished"
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumUploadCanceled     ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "uploadCanceled"
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumReadyToBePublished ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "readyToBePublished"
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumMalwareDetected    ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "malwareDetected"
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnumError              ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum = "error"
)

func (e ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum) ToPointer() *ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum {
	return &e
}

func (e *ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uploadStarted":
		fallthrough
	case "uploadFinished":
		fallthrough
	case "uploadCanceled":
		fallthrough
	case "readyToBePublished":
		fallthrough
	case "malwareDetected":
		fallthrough
	case "error":
		*e = ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum: %v", v)
	}
}

// ReleasesUpdateReleaseUploadStatus200ApplicationJSON - Success
type ReleasesUpdateReleaseUploadStatus200ApplicationJSON struct {
	// The ID for the upload.
	ID string `json:"id"`
	// The current upload status.
	UploadStatus ReleasesUpdateReleaseUploadStatus200ApplicationJSONUploadStatusEnum `json:"upload_status"`
}

type ReleasesUpdateReleaseUploadStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesUpdateReleaseUploadStatus200ApplicationJSONObject *ReleasesUpdateReleaseUploadStatus200ApplicationJSON
	// The request contained invalid properties.
	ReleasesUpdateReleaseUploadStatus400ApplicationJSONObject *ReleasesUpdateReleaseUploadStatus400ApplicationJSON
	// Error codes:
	// - `not_found` - The app or upload doesn't exist.
	//
	ReleasesUpdateReleaseUploadStatus404ApplicationJSONObject *ReleasesUpdateReleaseUploadStatus404ApplicationJSON
}
