"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DisableServiceRequestCheckIfServiceHasUsageEnum(str, Enum):
    r"""Defines the behavior for checking service usage when disabling a service."""
    CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 'CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED'
    SKIP = 'SKIP'
    CHECK = 'CHECK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DisableServiceRequest:
    r"""Request message for the `DisableService` method."""
    
    check_if_service_has_usage: Optional[DisableServiceRequestCheckIfServiceHasUsageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkIfServiceHasUsage'), 'exclude': lambda f: f is None }})
    r"""Defines the behavior for checking service usage when disabling a service."""  
    disable_dependent_services: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableDependentServices'), 'exclude': lambda f: f is None }})
    r"""Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together."""  
    