/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskrouterV1Workspace - Created
 */
public class TaskrouterV1Workspace {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;
    public TaskrouterV1Workspace withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;
    public TaskrouterV1Workspace withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;
    public TaskrouterV1Workspace withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * The name of the default activity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_activity_name")
    public String defaultActivityName;
    public TaskrouterV1Workspace withDefaultActivityName(String defaultActivityName) {
        this.defaultActivityName = defaultActivityName;
        return this;
    }
    
    /**
     * The SID of the Activity that will be used when new Workers are created in the Workspace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_activity_sid")
    public String defaultActivitySid;
    public TaskrouterV1Workspace withDefaultActivitySid(String defaultActivitySid) {
        this.defaultActivitySid = defaultActivitySid;
        return this;
    }
    
    /**
     * The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_callback_url")
    public String eventCallbackUrl;
    public TaskrouterV1Workspace withEventCallbackUrl(String eventCallbackUrl) {
        this.eventCallbackUrl = eventCallbackUrl;
        return this;
    }
    
    /**
     * The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events_filter")
    public String eventsFilter;
    public TaskrouterV1Workspace withEventsFilter(String eventsFilter) {
        this.eventsFilter = eventsFilter;
        return this;
    }
    
    /**
     * The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendly_name")
    public String friendlyName;
    public TaskrouterV1Workspace withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * The URLs of related resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;
    public TaskrouterV1Workspace withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multi_task_enabled")
    public Boolean multiTaskEnabled;
    public TaskrouterV1Workspace withMultiTaskEnabled(Boolean multiTaskEnabled) {
        this.multiTaskEnabled = multiTaskEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prioritize_queue_order")
    public WorkspaceEnumQueueOrderEnum prioritizeQueueOrder;
    public TaskrouterV1Workspace withPrioritizeQueueOrder(WorkspaceEnumQueueOrderEnum prioritizeQueueOrder) {
        this.prioritizeQueueOrder = prioritizeQueueOrder;
        return this;
    }
    
    /**
     * The unique string that we created to identify the Workspace resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;
    public TaskrouterV1Workspace withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * The name of the timeout activity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout_activity_name")
    public String timeoutActivityName;
    public TaskrouterV1Workspace withTimeoutActivityName(String timeoutActivityName) {
        this.timeoutActivityName = timeoutActivityName;
        return this;
    }
    
    /**
     * The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout_activity_sid")
    public String timeoutActivitySid;
    public TaskrouterV1Workspace withTimeoutActivitySid(String timeoutActivitySid) {
        this.timeoutActivitySid = timeoutActivitySid;
        return this;
    }
    
    /**
     * The absolute URL of the Workspace resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public TaskrouterV1Workspace withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
