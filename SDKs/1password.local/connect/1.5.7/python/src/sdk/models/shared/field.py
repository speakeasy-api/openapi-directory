"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import generatorrecipe as shared_generatorrecipe
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FieldPurposeEnum(str, Enum):
    r"""Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types."""
    UNKNOWN = ''
    USERNAME = 'USERNAME'
    PASSWORD = 'PASSWORD'
    NOTES = 'NOTES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldSection:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    
class FieldTypeEnum(str, Enum):
    STRING = 'STRING'
    EMAIL = 'EMAIL'
    CONCEALED = 'CONCEALED'
    URL = 'URL'
    TOTP = 'TOTP'
    DATE = 'DATE'
    MONTH_YEAR = 'MONTH_YEAR'
    MENU = 'MENU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FieldInput:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: FieldTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    generate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generate'), 'exclude': lambda f: f is None }})
    r"""If value is not present then a new value should be generated for this field"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    purpose: Optional[FieldPurposeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose'), 'exclude': lambda f: f is None }})
    r"""Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types."""  
    recipe: Optional[shared_generatorrecipe.GeneratorRecipe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipe'), 'exclude': lambda f: f is None }})
    r"""The recipe is used in conjunction with the \\"generate\\" property to set the character set used to generate a new secure value"""  
    section: Optional[FieldSection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Field:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: FieldTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    entropy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entropy'), 'exclude': lambda f: f is None }})
    r"""For fields with a purpose of `PASSWORD` this is the entropy of the value"""  
    generate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generate'), 'exclude': lambda f: f is None }})
    r"""If value is not present then a new value should be generated for this field"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    purpose: Optional[FieldPurposeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose'), 'exclude': lambda f: f is None }})
    r"""Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types."""  
    recipe: Optional[shared_generatorrecipe.GeneratorRecipe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipe'), 'exclude': lambda f: f is None }})
    r"""The recipe is used in conjunction with the \\"generate\\" property to set the character set used to generate a new secure value"""  
    section: Optional[FieldSection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    