<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Clinical 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create patient allergy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateResponse
     */
	public function allergiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/allergies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllergiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllergiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientAllergy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientAllergy', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient allergies
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllergiesListResponse
     */
	public function allergiesList(
        \OpenAPI\OpenAPI\Models\Operations\AllergiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllergiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllergiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/allergies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllergiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllergiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allergiesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AllergiesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient allergy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateResponse
     */
	public function allergiesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/allergies/{id}', \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllergiesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient allergy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllergiesReadResponse
     */
	public function allergiesRead(
        \OpenAPI\OpenAPI\Models\Operations\AllergiesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllergiesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllergiesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/allergies/{id}', \OpenAPI\OpenAPI\Models\Operations\AllergiesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllergiesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllergiesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientAllergy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientAllergy', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient allergy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateResponse
     */
	public function allergiesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/allergies/{id}', \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllergiesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient amendments to a patient's clinical records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateResponse
     */
	public function amendmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientAmendment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientAmendment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing patient amendment, you can only interact with amendments created by your API application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteResponse
     */
	public function amendmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments/{id}', \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient amendments. You can only interact with amendments created by your API application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsListResponse
     */
	public function amendmentsList(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->amendmentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AmendmentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient amendment, you can only interact with amendments created by your API application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateResponse
     */
	public function amendmentsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments/{id}', \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient amendment, you can only interact with amendments created by your API application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadResponse
     */
	public function amendmentsRead(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments/{id}', \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientAmendment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientAmendment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient amendment, you can only interact with amendments created by your API application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateResponse
     */
	public function amendmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/amendments/{id}', \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AmendmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create appointment profiles for a doctor's calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateResponse
     */
	public function appointmentProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing appointment profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteResponse
     */
	public function appointmentProfilesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search appointment profiles for a doctor's calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListResponse
     */
	public function appointmentProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentProfilesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateResponse
     */
	public function appointmentProfilesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing appointment profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadResponse
     */
	public function appointmentProfilesRead(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateResponse
     */
	public function appointmentProfilesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentProfilesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create appointment templates for a doctor's calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateResponse
     */
	public function appointmentTemplatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteResponse
     */
	public function appointmentTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search appointment templates for a doctor's calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListResponse
     */
	public function appointmentTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateResponse
     */
	public function appointmentTemplatesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadResponse
     */
	public function appointmentTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppointmentTemplate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateResponse
     */
	public function appointmentTemplatesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointment_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentTemplatesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a new appointment or break on doctor's calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateResponse
     */
	public function appointmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Appointment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing appointment or break
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteResponse
     */
	public function appointmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search appointment or breaks.
     * <b>Note:</b> Either `since`, `date` or `date_range` parameter must be specified.
     *             
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsListResponse
     */
	public function appointmentsList(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointmentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AppointmentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment or break
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateResponse
     */
	public function appointmentsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing appointment or break
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadResponse
     */
	public function appointmentsRead(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appointment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Appointment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment or break
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateResponse
     */
	public function appointmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/appointments/{id}', \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppointmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search care plans
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CarePlansListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CarePlansListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CarePlansListResponse
     */
	public function carePlansList(
        \OpenAPI\OpenAPI\Models\Operations\CarePlansListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CarePlansListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CarePlansListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/care_plans');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CarePlansListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CarePlansListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->carePlansList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CarePlansList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing care plan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CarePlansReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CarePlansReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CarePlansReadResponse
     */
	public function carePlansRead(
        \OpenAPI\OpenAPI\Models\Operations\CarePlansReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CarePlansReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CarePlansReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/care_plans/{id}', \OpenAPI\OpenAPI\Models\Operations\CarePlansReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CarePlansReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CarePlansReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->carePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CarePlan', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * careTeamMembersList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListResponse
     */
	public function careTeamMembersList(
        \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/care_team_members');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->careTeamMembersList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CareTeamMembersList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * careTeamMembersRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadResponse
     */
	public function careTeamMembersRead(
        \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/care_team_members/{id}', \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CareTeamMembersReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->careTeamMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CareTeamMember', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a new billing note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateResponse
     */
	public function claimBillingNotesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/claim_billing_notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimBillingNotes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClaimBillingNotes', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search billing notes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListResponse
     */
	public function claimBillingNotesList(
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/claim_billing_notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimBillingNotesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing billing note
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadResponse
     */
	public function claimBillingNotesRead(
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/claim_billing_notes/{id}', \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClaimBillingNotesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->claimBillingNotes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClaimBillingNotes', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search clinical note field types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListResponse
     */
	public function clinicalNoteFieldTypesList(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_types');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clinicalNoteFieldTypesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing clinial note field type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadResponse
     */
	public function clinicalNoteFieldTypesRead(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_types/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldTypesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soapNoteLineItemFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoapNoteLineItemFieldType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create clinical note field value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateResponse
     */
	public function clinicalNoteFieldValuesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_values');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soapNoteLineItemFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoapNoteLineItemFieldValue', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search clinical note field values
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListResponse
     */
	public function clinicalNoteFieldValuesList(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_values');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clinicalNoteFieldValuesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing clinical note field value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateResponse
     */
	public function clinicalNoteFieldValuesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_values/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing clinical note field value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadResponse
     */
	public function clinicalNoteFieldValuesRead(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_values/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soapNoteLineItemFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoapNoteLineItemFieldValue', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing clinical note field value
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateResponse
     */
	public function clinicalNoteFieldValuesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_field_values/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteFieldValuesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search clinical note templates
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListResponse
     */
	public function clinicalNoteTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clinicalNoteTemplatesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing clinical note tempalte
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadResponse
     */
	public function clinicalNoteTemplatesRead(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_note_templates/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNoteTemplatesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->soapNoteCustomReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SoapNoteCustomReport', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * clinicalNotesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListResponse
     */
	public function clinicalNotesList(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clinicalNotesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ClinicalNotesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * clinicalNotesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadResponse
     */
	public function clinicalNotesRead(
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/clinical_notes/{id}', \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClinicalNotesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clinicalNote = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClinicalNote', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Assign (apply) a consent form to appointment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentResponse
     */
	public function consentFormsApplyToAppointment(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms/{id}/apply_to_appointment', \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsApplyToAppointmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a patient consent form
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateResponse
     */
	public function consentFormsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consentForm = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsentForm', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient consent forms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListResponse
     */
	public function consentFormsList(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consentFormsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ConsentFormsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient consent form
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateResponse
     */
	public function consentFormsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms/{id}', \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient consent form
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadResponse
     */
	public function consentFormsRead(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms/{id}', \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consentForm = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsentForm', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Unassign (unapply) a consent form from appointment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentResponse
     */
	public function consentFormsUnapplyFromAppointment(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms/{id}/unapply_from_appointment', \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUnapplyFromAppointmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient consent form
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateResponse
     */
	public function consentFormsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/consent_forms/{id}', \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConsentFormsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create custom appointment fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateResponse
     */
	public function customAppointmentFieldsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_appointment_fields');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customAppointmentFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomAppointmentFieldType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search custom appointment fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListResponse
     */
	public function customAppointmentFieldsList(
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_appointment_fields');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customAppointmentFieldsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing custom appointment field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateResponse
     */
	public function customAppointmentFieldsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_appointment_fields/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing custom appointment field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadResponse
     */
	public function customAppointmentFieldsRead(
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_appointment_fields/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customAppointmentFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomAppointmentFieldType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing custom appointment field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateResponse
     */
	public function customAppointmentFieldsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_appointment_fields/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomAppointmentFieldsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create custom demographics fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateResponse
     */
	public function customDemographicsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_demographics');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customPatientFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomPatientFieldType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search custom demographics fields
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListResponse
     */
	public function customDemographicsList(
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_demographics');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDemographicsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CustomDemographicsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing custom demographics field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateResponse
     */
	public function customDemographicsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_demographics/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing custom demographics field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadResponse
     */
	public function customDemographicsRead(
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_demographics/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customPatientFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomPatientFieldType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing custom demographics field
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateResponse
     */
	public function customDemographicsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_demographics/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomDemographicsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search custom vital types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListResponse
     */
	public function customVitalsList(
        \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_vitals');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomVitalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomVitalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customVitalsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CustomVitalsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing custom vital type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadResponse
     */
	public function customVitalsRead(
        \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/custom_vitals/{id}', \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CustomVitalsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customVitalType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomVitalType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateResponse
     */
	public function documentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scannedClinicalDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScannedClinicalDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteResponse
     */
	public function documentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsListResponse
     */
	public function documentsList(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->documentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DocumentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateResponse
     */
	public function documentsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsReadResponse
     */
	public function documentsRead(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DocumentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scannedClinicalDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScannedClinicalDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing appointment template
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateResponse
     */
	public function documentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/documents/{id}', \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DocumentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create EOB object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EobsCreateResponse
     */
	public function eobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\EobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/eobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eobObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EOBObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search EOB objects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EobsListResponse
     */
	public function eobsList(
        \OpenAPI\OpenAPI\Models\Operations\EobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/eobs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eobsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EobsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing EOB object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EobsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EobsReadResponse
     */
	public function eobsRead(
        \OpenAPI\OpenAPI\Models\Operations\EobsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EobsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EobsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/eobs/{id}', \OpenAPI\OpenAPI\Models\Operations\EobsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\EobsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EobsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eobObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EOBObject', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * feeSchedulesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListResponse
     */
	public function feeSchedulesList(
        \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/fee_schedules');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feeSchedulesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FeeSchedulesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * feeSchedulesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadResponse
     */
	public function feeSchedulesRead(
        \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/fee_schedules/{id}', \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FeeSchedulesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->doctorFeeSchedule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DoctorFeeSchedule', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search implantable devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListResponse
     */
	public function implantableDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/implantable_devices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->implantableDevicesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing implantable device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadResponse
     */
	public function implantableDevicesRead(
        \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/implantable_devices/{id}', \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImplantableDevicesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->implantableDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImplantableDevice', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * insurancesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsurancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InsurancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InsurancesListResponse
     */
	public function insurancesList(
        \OpenAPI\OpenAPI\Models\Operations\InsurancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InsurancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InsurancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/insurances');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InsurancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsurancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insurancesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\InsurancesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * insurancesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsurancesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\InsurancesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\InsurancesReadResponse
     */
	public function insurancesRead(
        \OpenAPI\OpenAPI\Models\Operations\InsurancesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\InsurancesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\InsurancesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/insurances/{id}', \OpenAPI\OpenAPI\Models\Operations\InsurancesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InsurancesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsurancesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insurance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Insurance', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create lab order documents. An example lab workflow is as following:
     * 
     * - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
     * 
     * - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
     * 
     * - Update `/api/lab_orders` status
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateResponse
     */
	public function labDocumentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrderDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabOrderDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing lab order document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteResponse
     */
	public function labDocumentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents/{id}', \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search lab order documents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListResponse
     */
	public function labDocumentsList(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labDocumentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LabDocumentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab order document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateResponse
     */
	public function labDocumentsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents/{id}', \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing lab order document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadResponse
     */
	public function labDocumentsRead(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents/{id}', \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrderDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabOrderDocument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab order document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateResponse
     */
	public function labDocumentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_documents/{id}', \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabDocumentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create lab orders. An example lab workflow is as following:
     * 
     * - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
     * 
     * - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
     * 
     * - Update `/api/lab_orders` status
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateResponse
     */
	public function labOrdersCreate(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing lab order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteResponse
     */
	public function labOrdersDelete(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders/{id}', \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search lab orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersListResponse
     */
	public function labOrdersList(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrdersList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LabOrdersList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateResponse
     */
	public function labOrdersPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders/{id}', \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing lab order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadResponse
     */
	public function labOrdersRead(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders/{id}', \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * labOrdersSummaryList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListResponse
     */
	public function labOrdersSummaryList(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders_summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrdersSummaryList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * labOrdersSummaryRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadResponse
     */
	public function labOrdersSummaryRead(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders_summary/{id}', \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersSummaryReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabOrder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab order
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateResponse
     */
	public function labOrdersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_orders/{id}', \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabOrdersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create lab results. An example lab workflow is as following:
     * 
     * - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
     * 
     * - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
     * 
     * - Update `/api/lab_orders` status
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateResponse
     */
	public function labResultsCreate(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing lab result
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteResponse
     */
	public function labResultsDelete(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search lab results
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsListResponse
     */
	public function labResultsList(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labResultsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LabResultsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab result
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateResponse
     */
	public function labResultsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing lab result
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsReadResponse
     */
	public function labResultsRead(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\LabResultsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab result
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateResponse
     */
	public function labResultsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabResultsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create lab tests. An example lab workflow is as following:
     * 
     * - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
     * 
     * - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
     * 
     * - Update `/api/lab_orders` status
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateResponse
     */
	public function labTestsCreate(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labTest = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabTest', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing lab test
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteResponse
     */
	public function labTestsDelete(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests/{id}', \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search lab tests
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsListResponse
     */
	public function labTestsList(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labTestsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\LabTestsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab test
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateResponse
     */
	public function labTestsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests/{id}', \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing lab test
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsReadResponse
     */
	public function labTestsRead(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests/{id}', \OpenAPI\OpenAPI\Models\Operations\LabTestsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labTest = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabTest', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing lab test
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateResponse
     */
	public function labTestsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/lab_tests/{id}', \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LabTestsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Append a message to the "pharmacy_note" section of the prescription, in a new paragraph
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteResponse
     */
	public function medicationsAppendToPharmacyNote(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications/{id}/append_to_pharmacy_note', \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsAppendToPharmacyNoteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient medications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateResponse
     */
	public function medicationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientDrug = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientDrug', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient medications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsListResponse
     */
	public function medicationsList(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->medicationsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\MedicationsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient medications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateResponse
     */
	public function medicationsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications/{id}', \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient medications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsReadResponse
     */
	public function medicationsRead(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications/{id}', \OpenAPI\OpenAPI\Models\Operations\MedicationsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientDrug = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientDrug', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient medications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateResponse
     */
	public function medicationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/medications/{id}', \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MedicationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient communication for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateResponse
     */
	public function patientCommunicationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_communications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientCommunication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientCommunication', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient communications for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListResponse
     */
	public function patientCommunicationsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_communications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientCommunicationsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient communication for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateResponse
     */
	public function patientCommunicationsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_communications/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient communication for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadResponse
     */
	public function patientCommunicationsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_communications/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientCommunication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientCommunication', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient communication for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateResponse
     */
	public function patientCommunicationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_communications/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientCommunicationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient flag types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateResponse
     */
	public function patientFlagTypesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_flag_types');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientFlagType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientFlagType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient flag types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListResponse
     */
	public function patientFlagTypesList(
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_flag_types');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientFlagTypesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient flag type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateResponse
     */
	public function patientFlagTypesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_flag_types/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient flag type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadResponse
     */
	public function patientFlagTypesRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_flag_types/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientFlagType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientFlagType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient flag type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateResponse
     */
	public function patientFlagTypesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_flag_types/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientFlagTypesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient intervention for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateResponse
     */
	public function patientInterventionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_interventions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientIntervention = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientIntervention', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient interventions for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListResponse
     */
	public function patientInterventionsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_interventions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientInterventionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientInterventionsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient intervention for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateResponse
     */
	public function patientInterventionsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_interventions/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient intervention for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadResponse
     */
	public function patientInterventionsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_interventions/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientIntervention = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientIntervention', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient intervention for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateResponse
     */
	public function patientInterventionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_interventions/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientInterventionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateResponse
     */
	public function patientLabResultsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientLabResultSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientLabResultSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteResponse
     */
	public function patientLabResultsDelete(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListResponse
     */
	public function patientLabResultsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientLabResultsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientLabResultsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateResponse
     */
	public function patientLabResultsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadResponse
     */
	public function patientLabResultsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientLabResultSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientLabResultSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientLabResultsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateResponse
     */
	public function patientLabResultsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_lab_results/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientLabResultsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientMessagesCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateResponse
     */
	public function patientMessagesCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_messages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientMessagesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientMessagesList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListResponse
     */
	public function patientMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_messages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientMessagesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientMessagesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientMessagesPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateResponse
     */
	public function patientMessagesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_messages/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientMessagesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientMessagesRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadResponse
     */
	public function patientMessagesRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_messages/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientMessagesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientMessagesUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateResponse
     */
	public function patientMessagesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_messages/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientMessagesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient physical exam for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateResponse
     */
	public function patientPhysicalExamsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_physical_exams');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientPhysicalExam = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientPhysicalExam', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient physical exams for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListResponse
     */
	public function patientPhysicalExamsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_physical_exams');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientPhysicalExamsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient physical exam for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateResponse
     */
	public function patientPhysicalExamsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_physical_exams/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient physical exam for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadResponse
     */
	public function patientPhysicalExamsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_physical_exams/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientPhysicalExam = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientPhysicalExam', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient physical exam for CQM
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateResponse
     */
	public function patientPhysicalExamsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_physical_exams/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientPhysicalExamsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientRiskAssessmentsCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateResponse
     */
	public function patientRiskAssessmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_risk_assessments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientRiskAssessment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientRiskAssessment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientRiskAssessmentsList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListResponse
     */
	public function patientRiskAssessmentsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_risk_assessments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientRiskAssessmentsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientRiskAssessmentsPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateResponse
     */
	public function patientRiskAssessmentsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_risk_assessments/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientRiskAssessmentsRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadResponse
     */
	public function patientRiskAssessmentsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_risk_assessments/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientRiskAssessment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientRiskAssessment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientRiskAssessmentsUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateResponse
     */
	public function patientRiskAssessmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_risk_assessments/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientRiskAssessmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient vaccine records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateResponse
     */
	public function patientVaccineRecordsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_vaccine_records');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientVaccineRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientVaccineRecord', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient vaccine records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListResponse
     */
	public function patientVaccineRecordsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_vaccine_records');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientVaccineRecordsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient vaccine records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateResponse
     */
	public function patientVaccineRecordsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_vaccine_records/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient vaccine records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadResponse
     */
	public function patientVaccineRecordsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_vaccine_records/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientVaccineRecord = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientVaccineRecord', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient vaccine records
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateResponse
     */
	public function patientVaccineRecordsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patient_vaccine_records/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientVaccineRecordsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve patient CCDA
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaResponse
     */
	public function patientsCcda(
        \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}/ccda', \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsCcdaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsCcdaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsCreateResponse
     */
	public function patientsCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteResponse
     */
	public function patientsDelete(
        \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsListResponse
     */
	public function patientsList(
        \OpenAPI\OpenAPI\Models\Operations\PatientsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Send new onpatient invite to patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateResponse
     */
	public function patientsOnpatientAccessCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}/onpatient_access', \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Revoke sent onpatient invites
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteResponse
     */
	public function patientsOnpatientAccessDelete(
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}/onpatient_access', \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search existing onpatient access invites
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadResponse
     */
	public function patientsOnpatientAccessRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}/onpatient_access', \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsOnpatientAccessReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateResponse
     */
	public function patientsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve patient QRDA1
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Response
     */
	public function patientsQrda1(
        \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}/qrda1', \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsQrda1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsReadResponse
     */
	public function patientsRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryCreate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateResponse
     */
	public function patientsSummaryCreate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryDelete
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteResponse
     */
	public function patientsSummaryDelete(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListResponse
     */
	public function patientsSummaryList(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientsSummaryList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatientsSummaryList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryPartialUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateResponse
     */
	public function patientsSummaryPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryRead
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadResponse
     */
	public function patientsSummaryRead(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patient = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Patient', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * patientsSummaryUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateResponse
     */
	public function patientsSummaryUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients_summary/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsSummaryUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateResponse
     */
	public function patientsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patients/{id}', \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatientsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatientsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search prescription messages
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListResponse
     */
	public function prescriptionMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/prescription_messages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->prescriptionMessagesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing prescription message
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadResponse
     */
	public function prescriptionMessagesRead(
        \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/prescription_messages/{id}', \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PrescriptionMessagesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->prescriptionMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PrescriptionMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create patient problems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateResponse
     */
	public function problemsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/problems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProblemsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProblemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientProblem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientProblem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search patient problems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProblemsListResponse
     */
	public function problemsList(
        \OpenAPI\OpenAPI\Models\Operations\ProblemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProblemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProblemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/problems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProblemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProblemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProblemsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient problems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateResponse
     */
	public function problemsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/problems/{id}', \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProblemsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing patient problems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProblemsReadResponse
     */
	public function problemsRead(
        \OpenAPI\OpenAPI\Models\Operations\ProblemsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProblemsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProblemsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/problems/{id}', \OpenAPI\OpenAPI\Models\Operations\ProblemsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProblemsReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProblemsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patientProblem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PatientProblem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing patient problems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateResponse
     */
	public function problemsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/problems/{id}', \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProblemsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create reminder profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateResponse
     */
	public function reminderProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reminderProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReminderProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing reminder profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteResponse
     */
	public function reminderProfilesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search reminder profiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListResponse
     */
	public function reminderProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reminderProfilesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReminderProfilesList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing reminder profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateResponse
     */
	public function reminderProfilesPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing reminder profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadResponse
     */
	public function reminderProfilesRead(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reminderProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReminderProfile', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing reminder profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateResponse
     */
	public function reminderProfilesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/reminder_profiles/{id}', \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReminderProfilesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create sub-vendors
     * 
     * - When you get orders, submit them via `/api/lab_orders`, such that doctors can see them in drchrono.
     * 
     * - When results come in, submit the result document PDF via `/api/lab_documents` and submit the results data via `/api/lab_results`
     * 
     * - Update `/api/lab_orders` status
     * 
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsCreateResponse
     */
	public function sublabsCreate(
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labVendorLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabVendorLocation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an existing sub vendor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteResponse
     */
	public function sublabsDelete(
        \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs/{id}', \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve or search sub vendors
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsListResponse
     */
	public function sublabsList(
        \OpenAPI\OpenAPI\Models\Operations\SublabsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SublabsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SublabsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sublabsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SublabsList200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing sub vendor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateResponse
     */
	public function sublabsPartialUpdate(
        \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs/{id}', \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve an existing sub vendor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsReadResponse
     */
	public function sublabsRead(
        \OpenAPI\OpenAPI\Models\Operations\SublabsReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SublabsReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs/{id}', \OpenAPI\OpenAPI\Models\Operations\SublabsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->labVendorLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LabVendorLocation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an existing sub vendor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateResponse
     */
	public function sublabsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/sublabs/{id}', \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SublabsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}