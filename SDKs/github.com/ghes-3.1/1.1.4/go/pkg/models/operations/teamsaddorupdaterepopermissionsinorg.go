// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum - The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
type TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum string

const (
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumPull     TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "pull"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumPush     TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "push"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumAdmin    TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "admin"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumMaintain TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "maintain"
	TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnumTriage   TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum = "triage"
)

func (e TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum) ToPointer() *TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum {
	return &e
}

func (e *TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		fallthrough
	case "maintain":
		fallthrough
	case "triage":
		*e = TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum: %v", v)
	}
}

type TeamsAddOrUpdateRepoPermissionsInOrgRequestBody struct {
	// The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
	Permission *TeamsAddOrUpdateRepoPermissionsInOrgRequestBodyPermissionEnum `json:"permission,omitempty"`
}

type TeamsAddOrUpdateRepoPermissionsInOrgRequest struct {
	RequestBody *TeamsAddOrUpdateRepoPermissionsInOrgRequestBody `request:"mediaType=application/json"`
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
	// The slug of the team name.
	TeamSlug string `pathParam:"style=simple,explode=false,name=team_slug"`
}

type TeamsAddOrUpdateRepoPermissionsInOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
