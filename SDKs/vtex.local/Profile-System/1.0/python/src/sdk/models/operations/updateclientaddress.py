"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateClientAddressRequestBody:
    
    administrative_area_level1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('administrativeAreaLevel1'), 'exclude': lambda f: f is None }})
    r"""Name of administrative area, such as the state or province."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCode'), 'exclude': lambda f: f is None }})
    r"""Two letter country code."""  
    country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryName'), 'exclude': lambda f: f is None }})
    r"""Name of the address country."""  
    locality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locality'), 'exclude': lambda f: f is None }})
    r"""Name of address locality, such as the city."""  
    locality_area_level1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localityAreaLevel1'), 'exclude': lambda f: f is None }})
    r"""Name of the address locality area, such as the neighborhood or district."""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Address postal code."""  
    route: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('route'), 'exclude': lambda f: f is None }})
    r"""Name of the address country."""  
    street_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streetNumber'), 'exclude': lambda f: f is None }})
    r"""Name of the address country."""  
    

@dataclasses.dataclass
class UpdateClientAddressRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    address_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'addressId', 'style': 'simple', 'explode': False }})
    r"""ID of a client's specific address as returned in the Create client address endpoint's response, in the `id` field."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    profile_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'profileId', 'style': 'simple', 'explode': False }})
    r"""ID of the client's profile as returned by the Create profile endpoint's response, in the `id` field. It can also be an `alternativeKey` according to your custom profile schema. In this case, this request should also send the `alternativeKey` parameter."""  
    alternative_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alternativeKey', 'style': 'form', 'explode': True }})
    r"""The `profileId` path parameter may be substituted by other profile fields in this request. When making this request, send the `alternativeKey` parameter with a value equal to the key of the field you wish to use as `profileId`.
    
    
    > Currently, there are two possible values for this parameter: `email` and `document`.
    """  
    request_body: Optional[UpdateClientAddressRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateClientAddressResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_client_address_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""OK"""  
    