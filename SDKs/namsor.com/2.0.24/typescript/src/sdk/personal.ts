/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Personal names (anthroponyms) : gender, country origin/ethnicity, diaspora, US 'race'/ethniciy
 */
export class Personal {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
   */
  corridor(
    req: operations.CorridorRequest,
    security: operations.CorridorSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CorridorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CorridorRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CorridorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CorridorResponse = new operations.CorridorResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.corridorOut = utils.objectToClass(
              httpRes?.data,
              shared.CorridorOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
   */
  corridorBatch(
    req: shared.BatchCorridorIn,
    security: operations.CorridorBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CorridorBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchCorridorIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api2/json/corridorBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CorridorBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CorridorBatchResponse =
        new operations.CorridorBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchCorridorOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchCorridorOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
   */
  country(
    req: operations.CountryRequest,
    security: operations.CountrySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CountryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CountryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/country/{personalNameFull}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CountrySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CountryResponse = new operations.CountryResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameGeoOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameGeoOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
   */
  countryBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.CountryBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CountryBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api2/json/countryBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CountryBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CountryBatchResponse =
        new operations.CountryBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameGeoOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameGeoOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
   */
  diaspora(
    req: operations.DiasporaRequest,
    security: operations.DiasporaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiasporaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DiasporaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DiasporaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiasporaResponse = new operations.DiasporaResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameDiasporaedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameDiasporaedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
   */
  diasporaBatch(
    req: shared.BatchFirstLastNameGeoIn,
    security: operations.DiasporaBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DiasporaBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api2/json/diasporaBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DiasporaBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DiasporaBatchResponse =
        new operations.DiasporaBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameDiasporaedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameDiasporaedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy.
   */
  gender(
    req: operations.GenderRequest,
    security: operations.GenderSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/gender/{firstName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderResponse = new operations.GenderResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 names, detecting automatically the cultural context.
   */
  genderBatch(
    req: shared.BatchFirstLastNameIn,
    security: operations.GenderBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api2/json/genderBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderBatchResponse =
        new operations.GenderBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a full name, ex. John H. Smith
   */
  genderFull(
    req: operations.GenderFullRequest,
    security: operations.GenderFullSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderFullResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderFullRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/genderFull/{fullName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderFullSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderFullResponse =
        new operations.GenderFullResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
   */
  genderFullBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.GenderFullBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderFullBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/genderFullBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderFullBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderFullBatchResponse =
        new operations.GenderFullBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a full name, given a local context (ISO2 country code).
   */
  genderFullGeo(
    req: operations.GenderFullGeoRequest,
    security: operations.GenderFullGeoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderFullGeoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderFullGeoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/genderFullGeo/{fullName}/{countryIso2}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderFullGeoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderFullGeoResponse =
        new operations.GenderFullGeoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
   */
  genderFullGeoBatch(
    req: shared.BatchPersonalNameGeoIn,
    security: operations.GenderFullGeoBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderFullGeoBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/genderFullGeoBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderFullGeoBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderFullGeoBatchResponse =
        new operations.GenderFullGeoBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a name, given a local context (ISO2 country code).
   */
  genderGeo(
    req: operations.GenderGeoRequest,
    security: operations.GenderGeoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderGeoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenderGeoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderGeoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderGeoResponse =
        new operations.GenderGeoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
   */
  genderGeoBatch(
    req: shared.BatchFirstLastNameGeoIn,
    security: operations.GenderGeoBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GenderGeoBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/genderGeoBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GenderGeoBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenderGeoBatchResponse =
        new operations.GenderGeoBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameGenderedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely gender of a name.
   */
  gender1(
    req: operations.Gender1Request,
    security: operations.Gender1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.Gender1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Gender1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/gender/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Gender1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Gender1Response = new operations.Gender1Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGenderedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGenderedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
   */
  origin(
    req: operations.OriginRequest,
    security: operations.OriginSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OriginResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OriginRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/origin/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OriginSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OriginResponse = new operations.OriginResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameOriginedOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameOriginedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
   */
  originBatch(
    req: shared.BatchFirstLastNameIn,
    security: operations.OriginBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OriginBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api2/json/originBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OriginBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OriginBatchResponse =
        new operations.OriginBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameOriginedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameOriginedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
   */
  parseName(
    req: operations.ParseNameRequest,
    security: operations.ParseNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ParseNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/parseName/{nameFull}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseNameSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseNameResponse =
        new operations.ParseNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameParsedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
   */
  parseNameBatch(
    req: shared.BatchPersonalNameIn,
    security: operations.ParseNameBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseNameBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/parseNameBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseNameBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseNameBatchResponse =
        new operations.ParseNameBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameParsedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
   */
  parseNameGeo(
    req: operations.ParseNameGeoRequest,
    security: operations.ParseNameGeoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseNameGeoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ParseNameGeoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/parseName/{nameFull}/{countryIso2}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseNameGeoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseNameGeoResponse =
        new operations.ParseNameGeoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameParsedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.
   */
  parseNameGeoBatch(
    req: shared.BatchPersonalNameGeoIn,
    security: operations.ParseNameGeoBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ParseNameGeoBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/parseNameGeoBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ParseNameGeoBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ParseNameGeoBatchResponse =
        new operations.ParseNameGeoBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameParsedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameParsedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
   */
  religionFull(
    req: operations.ReligionFullRequest,
    security: operations.ReligionFullSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReligionFullResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReligionFullRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReligionFullSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReligionFullResponse =
        new operations.ReligionFullResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameReligionedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameReligionedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
   */
  religionFullBatch(
    req: shared.BatchPersonalNameGeoSubdivisionIn,
    security: operations.ReligionFullBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReligionFullBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameGeoSubdivisionIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/religionFullBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReligionFullBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReligionFullBatchResponse =
        new operations.ReligionFullBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameReligionedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameReligionedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
   */
  subclassification(
    req: operations.SubclassificationRequest,
    security: operations.SubclassificationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubclassificationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubclassificationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubclassificationSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubclassificationResponse =
        new operations.SubclassificationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGeoSubclassificationOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGeoSubclassificationOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
   */
  subclassificationBatch(
    req: shared.BatchFirstLastNameGeoIn,
    security: operations.SubclassificationBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubclassificationBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/subclassificationBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubclassificationBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubclassificationBatchResponse =
        new operations.SubclassificationBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameGeoSubclassificationOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameGeoSubclassificationOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
   */
  usRaceEthnicity(
    req: operations.UsRaceEthnicityRequest,
    security: operations.UsRaceEthnicitySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UsRaceEthnicityResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UsRaceEthnicityRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/usRaceEthnicity/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsRaceEthnicitySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsRaceEthnicityResponse =
        new operations.UsRaceEthnicityResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameUSRaceEthnicityOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameUSRaceEthnicityOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
   */
  usRaceEthnicityBatch(
    req: shared.BatchFirstLastNameGeoIn,
    security: operations.UsRaceEthnicityBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UsRaceEthnicityBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/usRaceEthnicityBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsRaceEthnicityBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsRaceEthnicityBatchResponse =
        new operations.UsRaceEthnicityBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameUSRaceEthnicityOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameUSRaceEthnicityOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
   */
  usRaceEthnicityZip5(
    req: operations.UsRaceEthnicityZip5Request,
    security: operations.UsRaceEthnicityZip5Security,
    config?: AxiosRequestConfig
  ): Promise<operations.UsRaceEthnicityZip5Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UsRaceEthnicityZip5Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsRaceEthnicityZip5Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsRaceEthnicityZip5Response =
        new operations.UsRaceEthnicityZip5Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameUSRaceEthnicityOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameUSRaceEthnicityOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
   */
  usZipRaceEthnicityBatch(
    req: shared.BatchFirstLastNameGeoZippedIn,
    security: operations.UsZipRaceEthnicityBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UsZipRaceEthnicityBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoZippedIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/usZipRaceEthnicityBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsZipRaceEthnicityBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsZipRaceEthnicityBatchResponse =
        new operations.UsZipRaceEthnicityBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameUSRaceEthnicityOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameUSRaceEthnicityOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
