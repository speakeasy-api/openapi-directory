// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AutoMLAlgorithmEnum string

const (
	AutoMLAlgorithmEnumXgboost       AutoMLAlgorithmEnum = "xgboost"
	AutoMLAlgorithmEnumLinearLearner AutoMLAlgorithmEnum = "linear-learner"
	AutoMLAlgorithmEnumMlp           AutoMLAlgorithmEnum = "mlp"
	AutoMLAlgorithmEnumLightgbm      AutoMLAlgorithmEnum = "lightgbm"
	AutoMLAlgorithmEnumCatboost      AutoMLAlgorithmEnum = "catboost"
	AutoMLAlgorithmEnumRandomforest  AutoMLAlgorithmEnum = "randomforest"
	AutoMLAlgorithmEnumExtraTrees    AutoMLAlgorithmEnum = "extra-trees"
	AutoMLAlgorithmEnumNnTorch       AutoMLAlgorithmEnum = "nn-torch"
	AutoMLAlgorithmEnumFastai        AutoMLAlgorithmEnum = "fastai"
)

func (e AutoMLAlgorithmEnum) ToPointer() *AutoMLAlgorithmEnum {
	return &e
}

func (e *AutoMLAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xgboost":
		fallthrough
	case "linear-learner":
		fallthrough
	case "mlp":
		fallthrough
	case "lightgbm":
		fallthrough
	case "catboost":
		fallthrough
	case "randomforest":
		fallthrough
	case "extra-trees":
		fallthrough
	case "nn-torch":
		fallthrough
	case "fastai":
		*e = AutoMLAlgorithmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoMLAlgorithmEnum: %v", v)
	}
}
