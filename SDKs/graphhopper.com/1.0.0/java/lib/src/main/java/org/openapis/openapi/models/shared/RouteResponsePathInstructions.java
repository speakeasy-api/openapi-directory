/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class RouteResponsePathInstructions {
    /**
     * The distance for this instruction, in meters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance")
    public Double distance;
    public RouteResponsePathInstructions withDistance(Double distance) {
        this.distance = distance;
        return this;
    }
    
    /**
     * Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exit_number")
    public Integer exitNumber;
    public RouteResponsePathInstructions withExitNumber(Integer exitNumber) {
        this.exitNumber = exitNumber;
        return this;
    }
    
    /**
     * Two indices into `points`, referring to the beginning and the end of the segment of the route
     * this instruction refers to.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public Integer[] interval;
    public RouteResponsePathInstructions withInterval(Integer[] interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * A number which specifies the sign to show:
     * 
     * | sign | description  |
     * |---|---|
     * |-98| an U-turn without the knowledge if it is a right or left U-turn |
     * | -8| a left U-turn |
     * | -7| keep left |
     * | -6| **not yet used**: leave roundabout |
     * | -3| turn sharp left |
     * | -2| turn left |
     * | -1| turn slight left |
     * |  0| continue on street |
     * |  1| turn slight right |
     * |  2| turn right |
     * |  3| turn sharp right |
     * |  4| the finish instruction before the last point |
     * |  5| the instruction before a via point |
     * |  6| the instruction before entering a roundabout |
     * |  7| keep right |
     * |  8| a right U-turn |
     * |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sign")
    public Integer sign;
    public RouteResponsePathInstructions withSign(Integer sign) {
        this.sign = sign;
        return this;
    }
    
    /**
     * The name of the street to turn onto in order to follow the route.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_name")
    public String streetName;
    public RouteResponsePathInstructions withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     * A description what the user has to do in order to follow the route. The language depends on the locale parameter.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public RouteResponsePathInstructions withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * The duration for this instruction, in milliseconds.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public Integer time;
    public RouteResponsePathInstructions withTime(Integer time) {
        this.time = time;
        return this;
    }
    
    /**
     * Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 &lt; r &lt; 2*PI` for clockwise and
     * `-2*PI &lt; r &lt; 0` for counterclockwise turns.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("turn_angle")
    public Double turnAngle;
    public RouteResponsePathInstructions withTurnAngle(Double turnAngle) {
        this.turnAngle = turnAngle;
        return this;
    }
    
}
