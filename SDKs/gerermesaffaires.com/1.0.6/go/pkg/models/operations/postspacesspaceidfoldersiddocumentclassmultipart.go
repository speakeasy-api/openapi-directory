// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccounting struct {
	AccountedOn *string                                                                         `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                         `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

// PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormData1 - Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
type PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormData1 struct {
	Accounting *PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Author     *string                                                             `multipartForm:"name=Author"`
	Code       *string                                                             `multipartForm:"name=Code"`
	Comment    *string                                                             `multipartForm:"name=Comment"`
	Date       *string                                                             `multipartForm:"name=Date"`
	File       PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormDataFile        `multipartForm:"file"`
	Title      string                                                              `multipartForm:"name=Title"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartRequest struct {
	// Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDDocumentClassMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// class of the document
	DocumentClass string `pathParam:"style=simple,explode=false,name=documentClass"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDDocumentClassMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDDocumentClassMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDDocumentClassMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDDocumentClassMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDDocumentClassMultipart201ApplicationJSON
}
