/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthenticationFlowRepresentation } from "./authenticationflowrepresentation";
import { AuthenticatorConfigRepresentation } from "./authenticatorconfigrepresentation";
import { ClientRepresentation } from "./clientrepresentation";
import { ClientScopeRepresentation } from "./clientscoperepresentation";
import { GroupRepresentation } from "./grouprepresentation";
import { IdentityProviderMapperRepresentation } from "./identityprovidermapperrepresentation";
import { IdentityProviderRepresentation } from "./identityproviderrepresentation";
import { MultivaluedHashMap } from "./multivaluedhashmap";
import { ProtocolMapperRepresentation } from "./protocolmapperrepresentation";
import { RequiredActionProviderRepresentation } from "./requiredactionproviderrepresentation";
import { RolesRepresentation } from "./rolesrepresentation";
import { ScopeMappingRepresentation } from "./scopemappingrepresentation";
import { UserFederationMapperRepresentation } from "./userfederationmapperrepresentation";
import { UserFederationProviderRepresentation } from "./userfederationproviderrepresentation";
import { UserRepresentation } from "./userrepresentation";
import { Expose, Type } from "class-transformer";

/**
 * JSON representation of the realm
 */
export class RealmRepresentation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accessCodeLifespan" })
  accessCodeLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "accessCodeLifespanLogin" })
  accessCodeLifespanLogin?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "accessCodeLifespanUserAction" })
  accessCodeLifespanUserAction?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "accessTokenLifespan" })
  accessTokenLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "accessTokenLifespanForImplicitFlow" })
  accessTokenLifespanForImplicitFlow?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "accountTheme" })
  accountTheme?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "actionTokenGeneratedByAdminLifespan" })
  actionTokenGeneratedByAdminLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "actionTokenGeneratedByUserLifespan" })
  actionTokenGeneratedByUserLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "adminEventsDetailsEnabled" })
  adminEventsDetailsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "adminEventsEnabled" })
  adminEventsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "adminTheme" })
  adminTheme?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, any>;

  @SpeakeasyMetadata({ elemType: AuthenticationFlowRepresentation })
  @Expose({ name: "authenticationFlows" })
  @Type(() => AuthenticationFlowRepresentation)
  authenticationFlows?: AuthenticationFlowRepresentation[];

  @SpeakeasyMetadata({ elemType: AuthenticatorConfigRepresentation })
  @Expose({ name: "authenticatorConfig" })
  @Type(() => AuthenticatorConfigRepresentation)
  authenticatorConfig?: AuthenticatorConfigRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "browserFlow" })
  browserFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "browserSecurityHeaders" })
  browserSecurityHeaders?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "bruteForceProtected" })
  bruteForceProtected?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "clientAuthenticationFlow" })
  clientAuthenticationFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clientScopeMappings" })
  clientScopeMappings?: Record<string, any>;

  @SpeakeasyMetadata({ elemType: ClientScopeRepresentation })
  @Expose({ name: "clientScopes" })
  @Type(() => ClientScopeRepresentation)
  clientScopes?: ClientScopeRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "clientSessionIdleTimeout" })
  clientSessionIdleTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "clientSessionMaxLifespan" })
  clientSessionMaxLifespan?: number;

  @SpeakeasyMetadata({ elemType: ClientRepresentation })
  @Expose({ name: "clients" })
  @Type(() => ClientRepresentation)
  clients?: ClientRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "components" })
  @Type(() => MultivaluedHashMap)
  components?: MultivaluedHashMap;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultDefaultClientScopes" })
  defaultDefaultClientScopes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "defaultGroups" })
  defaultGroups?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "defaultLocale" })
  defaultLocale?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultOptionalClientScopes" })
  defaultOptionalClientScopes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "defaultRoles" })
  defaultRoles?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "defaultSignatureAlgorithm" })
  defaultSignatureAlgorithm?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "directGrantFlow" })
  directGrantFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "displayNameHtml" })
  displayNameHtml?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dockerAuthenticationFlow" })
  dockerAuthenticationFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "duplicateEmailsAllowed" })
  duplicateEmailsAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "editUsernameAllowed" })
  editUsernameAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "emailTheme" })
  emailTheme?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "enabledEventTypes" })
  enabledEventTypes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "eventsEnabled" })
  eventsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "eventsExpiration" })
  eventsExpiration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "eventsListeners" })
  eventsListeners?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "failureFactor" })
  failureFactor?: number;

  @SpeakeasyMetadata({ elemType: UserRepresentation })
  @Expose({ name: "federatedUsers" })
  @Type(() => UserRepresentation)
  federatedUsers?: UserRepresentation[];

  @SpeakeasyMetadata({ elemType: GroupRepresentation })
  @Expose({ name: "groups" })
  @Type(() => GroupRepresentation)
  groups?: GroupRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: IdentityProviderMapperRepresentation })
  @Expose({ name: "identityProviderMappers" })
  @Type(() => IdentityProviderMapperRepresentation)
  identityProviderMappers?: IdentityProviderMapperRepresentation[];

  @SpeakeasyMetadata({ elemType: IdentityProviderRepresentation })
  @Expose({ name: "identityProviders" })
  @Type(() => IdentityProviderRepresentation)
  identityProviders?: IdentityProviderRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "internationalizationEnabled" })
  internationalizationEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "keycloakVersion" })
  keycloakVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "loginTheme" })
  loginTheme?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "loginWithEmailAllowed" })
  loginWithEmailAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "maxDeltaTimeSeconds" })
  maxDeltaTimeSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "maxFailureWaitSeconds" })
  maxFailureWaitSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "minimumQuickLoginWaitSeconds" })
  minimumQuickLoginWaitSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "notBefore" })
  notBefore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offlineSessionIdleTimeout" })
  offlineSessionIdleTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offlineSessionMaxLifespan" })
  offlineSessionMaxLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "offlineSessionMaxLifespanEnabled" })
  offlineSessionMaxLifespanEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyAlgorithm" })
  otpPolicyAlgorithm?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyDigits" })
  otpPolicyDigits?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyInitialCounter" })
  otpPolicyInitialCounter?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyLookAheadWindow" })
  otpPolicyLookAheadWindow?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyPeriod" })
  otpPolicyPeriod?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "otpPolicyType" })
  otpPolicyType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "otpSupportedApplications" })
  otpSupportedApplications?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "passwordPolicy" })
  passwordPolicy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "permanentLockout" })
  permanentLockout?: boolean;

  @SpeakeasyMetadata({ elemType: ProtocolMapperRepresentation })
  @Expose({ name: "protocolMappers" })
  @Type(() => ProtocolMapperRepresentation)
  protocolMappers?: ProtocolMapperRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "quickLoginCheckMilliSeconds" })
  quickLoginCheckMilliSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "realm" })
  realm?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "refreshTokenMaxReuse" })
  refreshTokenMaxReuse?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "registrationAllowed" })
  registrationAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "registrationEmailAsUsername" })
  registrationEmailAsUsername?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "registrationFlow" })
  registrationFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "rememberMe" })
  rememberMe?: boolean;

  @SpeakeasyMetadata({ elemType: RequiredActionProviderRepresentation })
  @Expose({ name: "requiredActions" })
  @Type(() => RequiredActionProviderRepresentation)
  requiredActions?: RequiredActionProviderRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "resetCredentialsFlow" })
  resetCredentialsFlow?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resetPasswordAllowed" })
  resetPasswordAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "revokeRefreshToken" })
  revokeRefreshToken?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "roles" })
  @Type(() => RolesRepresentation)
  roles?: RolesRepresentation;

  @SpeakeasyMetadata({ elemType: ScopeMappingRepresentation })
  @Expose({ name: "scopeMappings" })
  @Type(() => ScopeMappingRepresentation)
  scopeMappings?: ScopeMappingRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "smtpServer" })
  smtpServer?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "sslRequired" })
  sslRequired?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ssoSessionIdleTimeout" })
  ssoSessionIdleTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssoSessionIdleTimeoutRememberMe" })
  ssoSessionIdleTimeoutRememberMe?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssoSessionMaxLifespan" })
  ssoSessionMaxLifespan?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ssoSessionMaxLifespanRememberMe" })
  ssoSessionMaxLifespanRememberMe?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "supportedLocales" })
  supportedLocales?: string[];

  @SpeakeasyMetadata({ elemType: UserFederationMapperRepresentation })
  @Expose({ name: "userFederationMappers" })
  @Type(() => UserFederationMapperRepresentation)
  userFederationMappers?: UserFederationMapperRepresentation[];

  @SpeakeasyMetadata({ elemType: UserFederationProviderRepresentation })
  @Expose({ name: "userFederationProviders" })
  @Type(() => UserFederationProviderRepresentation)
  userFederationProviders?: UserFederationProviderRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "userManagedAccessAllowed" })
  userManagedAccessAllowed?: boolean;

  @SpeakeasyMetadata({ elemType: UserRepresentation })
  @Expose({ name: "users" })
  @Type(() => UserRepresentation)
  users?: UserRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "verifyEmail" })
  verifyEmail?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "waitIncrementSeconds" })
  waitIncrementSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyAcceptableAaguids" })
  webAuthnPolicyAcceptableAaguids?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyAttestationConveyancePreference" })
  webAuthnPolicyAttestationConveyancePreference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyAuthenticatorAttachment" })
  webAuthnPolicyAuthenticatorAttachment?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyAvoidSameAuthenticatorRegister" })
  webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyCreateTimeout" })
  webAuthnPolicyCreateTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessAcceptableAaguids" })
  webAuthnPolicyPasswordlessAcceptableAaguids?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessAttestationConveyancePreference" })
  webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessAuthenticatorAttachment" })
  webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister" })
  webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessCreateTimeout" })
  webAuthnPolicyPasswordlessCreateTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessRequireResidentKey" })
  webAuthnPolicyPasswordlessRequireResidentKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessRpEntityName" })
  webAuthnPolicyPasswordlessRpEntityName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessRpId" })
  webAuthnPolicyPasswordlessRpId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessSignatureAlgorithms" })
  webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyPasswordlessUserVerificationRequirement" })
  webAuthnPolicyPasswordlessUserVerificationRequirement?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyRequireResidentKey" })
  webAuthnPolicyRequireResidentKey?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyRpEntityName" })
  webAuthnPolicyRpEntityName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyRpId" })
  webAuthnPolicyRpId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicySignatureAlgorithms" })
  webAuthnPolicySignatureAlgorithms?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "webAuthnPolicyUserVerificationRequirement" })
  webAuthnPolicyUserVerificationRequirement?: string;
}
