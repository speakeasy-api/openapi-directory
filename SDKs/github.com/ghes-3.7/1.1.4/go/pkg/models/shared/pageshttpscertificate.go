// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

type PagesHTTPSCertificateStateEnum string

const (
	PagesHTTPSCertificateStateEnumNew                  PagesHTTPSCertificateStateEnum = "new"
	PagesHTTPSCertificateStateEnumAuthorizationCreated PagesHTTPSCertificateStateEnum = "authorization_created"
	PagesHTTPSCertificateStateEnumAuthorizationPending PagesHTTPSCertificateStateEnum = "authorization_pending"
	PagesHTTPSCertificateStateEnumAuthorized           PagesHTTPSCertificateStateEnum = "authorized"
	PagesHTTPSCertificateStateEnumAuthorizationRevoked PagesHTTPSCertificateStateEnum = "authorization_revoked"
	PagesHTTPSCertificateStateEnumIssued               PagesHTTPSCertificateStateEnum = "issued"
	PagesHTTPSCertificateStateEnumUploaded             PagesHTTPSCertificateStateEnum = "uploaded"
	PagesHTTPSCertificateStateEnumApproved             PagesHTTPSCertificateStateEnum = "approved"
	PagesHTTPSCertificateStateEnumErrored              PagesHTTPSCertificateStateEnum = "errored"
	PagesHTTPSCertificateStateEnumBadAuthz             PagesHTTPSCertificateStateEnum = "bad_authz"
	PagesHTTPSCertificateStateEnumDestroyPending       PagesHTTPSCertificateStateEnum = "destroy_pending"
	PagesHTTPSCertificateStateEnumDNSChanged           PagesHTTPSCertificateStateEnum = "dns_changed"
)

func (e PagesHTTPSCertificateStateEnum) ToPointer() *PagesHTTPSCertificateStateEnum {
	return &e
}

func (e *PagesHTTPSCertificateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "authorization_created":
		fallthrough
	case "authorization_pending":
		fallthrough
	case "authorized":
		fallthrough
	case "authorization_revoked":
		fallthrough
	case "issued":
		fallthrough
	case "uploaded":
		fallthrough
	case "approved":
		fallthrough
	case "errored":
		fallthrough
	case "bad_authz":
		fallthrough
	case "destroy_pending":
		fallthrough
	case "dns_changed":
		*e = PagesHTTPSCertificateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PagesHTTPSCertificateStateEnum: %v", v)
	}
}

type PagesHTTPSCertificate struct {
	Description string `json:"description"`
	// Array of the domain set and its alternate name (if it is configured)
	Domains   []string                       `json:"domains"`
	ExpiresAt *types.Date                    `json:"expires_at,omitempty"`
	State     PagesHTTPSCertificateStateEnum `json:"state"`
}
