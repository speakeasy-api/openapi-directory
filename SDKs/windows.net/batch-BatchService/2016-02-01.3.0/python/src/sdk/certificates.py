"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Certificates:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def certificate_add(self, request: operations.CertificateAddRequest) -> operations.CertificateAddResponse:
        r"""Adds a certificate to the specified account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/certificates'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "certificate_add_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CertificateAddRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CertificateAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def certificate_cancel_deletion(self, request: operations.CertificateCancelDeletionRequest) -> operations.CertificateCancelDeletionResponse:
        r"""Cancels a failed deletion of a certificate from the specified account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CertificateCancelDeletionRequest, base_url, '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CertificateCancelDeletionRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CertificateCancelDeletionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def certificate_delete(self, request: operations.CertificateDeleteRequest) -> operations.CertificateDeleteResponse:
        r"""Deletes a certificate from the specified account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CertificateDeleteRequest, base_url, '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CertificateDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CertificateDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def certificate_get(self, request: operations.CertificateGetRequest) -> operations.CertificateGetResponse:
        r"""Gets information about the specified certificate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CertificateGetRequest, base_url, '/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CertificateGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CertificateGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Certificate])
                res.certificate = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def certificate_list(self, request: operations.CertificateListRequest) -> operations.CertificateListResponse:
        r"""Lists all of the certificates that have been added to the specified account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/certificates'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CertificateListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CertificateListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CertificateListResult])
                res.certificate_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    