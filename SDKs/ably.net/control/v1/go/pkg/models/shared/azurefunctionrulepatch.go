// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AzureFunctionRulePatchRuleTypeEnum string

const (
	AzureFunctionRulePatchRuleTypeEnumHTTPAzureFunction AzureFunctionRulePatchRuleTypeEnum = "http/azure-function"
)

func (e AzureFunctionRulePatchRuleTypeEnum) ToPointer() *AzureFunctionRulePatchRuleTypeEnum {
	return &e
}

func (e *AzureFunctionRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/azure-function":
		*e = AzureFunctionRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AzureFunctionRulePatchRuleTypeEnum: %v", v)
	}
}

type AzureFunctionRulePatchTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AzureFunctionRulePatchTarget struct {
	AzureAppID        *string                               `json:"azureAppId,omitempty"`
	AzureFunctionName *string                               `json:"azureFunctionName,omitempty"`
	Enveloped         *bool                                 `json:"enveloped,omitempty"`
	Format            *string                               `json:"format,omitempty"`
	Headers           []AzureFunctionRulePatchTargetHeaders `json:"headers,omitempty"`
	SigningKeyID      *string                               `json:"signingKeyId,omitempty"`
}

type AzureFunctionRulePatch struct {
	RequestMode *string                            `json:"requestMode,omitempty"`
	RuleType    AzureFunctionRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch                   `json:"source,omitempty"`
	Status      *string                            `json:"status,omitempty"`
	Target      *AzureFunctionRulePatchTarget      `json:"target,omitempty"`
}
