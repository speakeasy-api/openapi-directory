// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTSetLoadBalancerPoliciesOfListenerActionEnum
type POSTSetLoadBalancerPoliciesOfListenerActionEnum string

const (
	POSTSetLoadBalancerPoliciesOfListenerActionEnumSetLoadBalancerPoliciesOfListener POSTSetLoadBalancerPoliciesOfListenerActionEnum = "SetLoadBalancerPoliciesOfListener"
)

func (e *POSTSetLoadBalancerPoliciesOfListenerActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetLoadBalancerPoliciesOfListener":
		*e = POSTSetLoadBalancerPoliciesOfListenerActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSetLoadBalancerPoliciesOfListenerActionEnum: %s", s)
	}
}

// POSTSetLoadBalancerPoliciesOfListenerVersionEnum
type POSTSetLoadBalancerPoliciesOfListenerVersionEnum string

const (
	POSTSetLoadBalancerPoliciesOfListenerVersionEnumTwoThousandAndTwelve0601 POSTSetLoadBalancerPoliciesOfListenerVersionEnum = "2012-06-01"
)

func (e *POSTSetLoadBalancerPoliciesOfListenerVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-06-01":
		*e = POSTSetLoadBalancerPoliciesOfListenerVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTSetLoadBalancerPoliciesOfListenerVersionEnum: %s", s)
	}
}

type POSTSetLoadBalancerPoliciesOfListenerQueryParams struct {
	Action  POSTSetLoadBalancerPoliciesOfListenerActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTSetLoadBalancerPoliciesOfListenerVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTSetLoadBalancerPoliciesOfListenerHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTSetLoadBalancerPoliciesOfListenerRequest struct {
	QueryParams POSTSetLoadBalancerPoliciesOfListenerQueryParams
	Headers     POSTSetLoadBalancerPoliciesOfListenerHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTSetLoadBalancerPoliciesOfListenerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
