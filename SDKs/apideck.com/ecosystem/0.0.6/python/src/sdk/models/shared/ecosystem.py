"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import cardsettings as shared_cardsettings
from ..shared import ctasettings as shared_ctasettings
from ..shared import customsettings as shared_customsettings
from ..shared import integrationsettings as shared_integrationsettings
from ..shared import leadformsettings as shared_leadformsettings
from ..shared import listingsettings as shared_listingsettings
from ..shared import mastheadsettings as shared_mastheadsettings
from ..shared import metatagsettings as shared_metatagsettings
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class EcosystemMenuPositionEnum(str, Enum):
    TOP = 'TOP'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    HIDDEN = 'HIDDEN'

class EcosystemMenuStyleEnum(str, Enum):
    LIST = 'LIST'
    PILL = 'PILL'
    FILTER = 'FILTER'

class EcosystemNavigationMobileMenuTypeEnum(str, Enum):
    ICON = 'ICON'
    TEXT = 'TEXT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Ecosystem:
    
    is_published: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_published') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('about'), 'exclude': lambda f: f is None }})  
    alternatives_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternatives_background_color'), 'exclude': lambda f: f is None }})  
    alternatives_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternatives_color'), 'exclude': lambda f: f is None }})  
    attribution: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribution'), 'exclude': lambda f: f is None }})  
    body_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_background_color'), 'exclude': lambda f: f is None }})  
    body_button_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_button_background_color'), 'exclude': lambda f: f is None }})  
    body_button_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_button_color'), 'exclude': lambda f: f is None }})  
    body_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_color'), 'exclude': lambda f: f is None }})  
    body_link_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_link_color'), 'exclude': lambda f: f is None }})  
    card_settings: Optional[shared_cardsettings.CardSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_settings'), 'exclude': lambda f: f is None }})  
    categories_count_badge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories_count_badge'), 'exclude': lambda f: f is None }})  
    categories_show_max_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories_show_max_items'), 'exclude': lambda f: f is None }})  
    collections_count_badge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections_count_badge'), 'exclude': lambda f: f is None }})  
    collections_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections_title'), 'exclude': lambda f: f is None }})  
    create_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create_link'), 'exclude': lambda f: f is None }})  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    cta_settings: Optional[shared_ctasettings.CTASettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cta_settings'), 'exclude': lambda f: f is None }})  
    custom_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_domain'), 'exclude': lambda f: f is None }})  
    custom_settings: Optional[shared_customsettings.CustomSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_settings'), 'exclude': lambda f: f is None }})  
    detail_pages_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail_pages_enabled'), 'exclude': lambda f: f is None }})  
    footer_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('footer_background_color'), 'exclude': lambda f: f is None }})  
    footer_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('footer_color'), 'exclude': lambda f: f is None }})  
    google_site_verification_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('google_site_verification_id'), 'exclude': lambda f: f is None }})  
    hide_install_buttons: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_install_buttons'), 'exclude': lambda f: f is None }})  
    home_page_collection_category_cards: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_page_collection_category_cards'), 'exclude': lambda f: f is None }})  
    home_page_show_all_listings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_page_show_all_listings'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    installation_request_flow_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installation_request_flow_enabled'), 'exclude': lambda f: f is None }})  
    integration_settings: Optional[shared_integrationsettings.IntegrationSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integration_settings'), 'exclude': lambda f: f is None }})  
    lead_form_settings: Optional[shared_leadformsettings.LeadFormSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lead_form_settings'), 'exclude': lambda f: f is None }})  
    listing_settings: Optional[shared_listingsettings.ListingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listing_settings'), 'exclude': lambda f: f is None }})  
    masthead_settings: Optional[shared_mastheadsettings.MastheadSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('masthead_settings'), 'exclude': lambda f: f is None }})  
    menu_position: Optional[EcosystemMenuPositionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('menu_position'), 'exclude': lambda f: f is None }})  
    menu_style: Optional[EcosystemMenuStyleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('menu_style'), 'exclude': lambda f: f is None }})  
    meta_tag_settings: Optional[shared_metatagsettings.MetaTagSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta_tag_settings'), 'exclude': lambda f: f is None }})  
    navigation_background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigation_background_color'), 'exclude': lambda f: f is None }})  
    navigation_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigation_color'), 'exclude': lambda f: f is None }})  
    navigation_logo_post_fix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigation_logo_post_fix'), 'exclude': lambda f: f is None }})  
    navigation_mobile_menu_type: Optional[EcosystemNavigationMobileMenuTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigation_mobile_menu_type'), 'exclude': lambda f: f is None }})  
    navigation_sticky: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigation_sticky'), 'exclude': lambda f: f is None }})  
    primary_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_color'), 'exclude': lambda f: f is None }})  
    privacy_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy_link'), 'exclude': lambda f: f is None }})  
    request_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_link'), 'exclude': lambda f: f is None }})  
    shadow_page_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shadow_page_description'), 'exclude': lambda f: f is None }})  
    shadow_pages_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shadow_pages_enabled'), 'exclude': lambda f: f is None }})  
    show_attribution_badge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_attribution_badge'), 'exclude': lambda f: f is None }})  
    show_requested_listings: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_requested_listings'), 'exclude': lambda f: f is None }})  
    terms_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms_link'), 'exclude': lambda f: f is None }})  
    total_published_listings: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_published_listings'), 'exclude': lambda f: f is None }})  
    unify_application_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unify_application_id'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utm_campaign'), 'exclude': lambda f: f is None }})  
    website: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('website'), 'exclude': lambda f: f is None }})  
    zaps_menu_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zaps_menu_title'), 'exclude': lambda f: f is None }})  
    zaps_page_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zaps_page_enabled'), 'exclude': lambda f: f is None }})  
    