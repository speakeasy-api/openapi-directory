// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateTrafficMirrorFilterRuleActionEnum
type GETCreateTrafficMirrorFilterRuleActionEnum string

const (
	GETCreateTrafficMirrorFilterRuleActionEnumCreateTrafficMirrorFilterRule GETCreateTrafficMirrorFilterRuleActionEnum = "CreateTrafficMirrorFilterRule"
)

func (e GETCreateTrafficMirrorFilterRuleActionEnum) ToPointer() *GETCreateTrafficMirrorFilterRuleActionEnum {
	return &e
}

func (e *GETCreateTrafficMirrorFilterRuleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateTrafficMirrorFilterRule":
		*e = GETCreateTrafficMirrorFilterRuleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTrafficMirrorFilterRuleActionEnum: %v", v)
	}
}

// GETCreateTrafficMirrorFilterRuleDestinationPortRange - Information about the Traffic Mirror filter rule port range.
type GETCreateTrafficMirrorFilterRuleDestinationPortRange struct {
	FromPort *int64 `queryParam:"name=FromPort"`
	ToPort   *int64 `queryParam:"name=ToPort"`
}

// GETCreateTrafficMirrorFilterRuleRuleActionEnum - The action to take on the filtered traffic.
type GETCreateTrafficMirrorFilterRuleRuleActionEnum string

const (
	GETCreateTrafficMirrorFilterRuleRuleActionEnumAccept GETCreateTrafficMirrorFilterRuleRuleActionEnum = "accept"
	GETCreateTrafficMirrorFilterRuleRuleActionEnumReject GETCreateTrafficMirrorFilterRuleRuleActionEnum = "reject"
)

func (e GETCreateTrafficMirrorFilterRuleRuleActionEnum) ToPointer() *GETCreateTrafficMirrorFilterRuleRuleActionEnum {
	return &e
}

func (e *GETCreateTrafficMirrorFilterRuleRuleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "reject":
		*e = GETCreateTrafficMirrorFilterRuleRuleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTrafficMirrorFilterRuleRuleActionEnum: %v", v)
	}
}

// GETCreateTrafficMirrorFilterRuleSourcePortRange - Information about the Traffic Mirror filter rule port range.
type GETCreateTrafficMirrorFilterRuleSourcePortRange struct {
	FromPort *int64 `queryParam:"name=FromPort"`
	ToPort   *int64 `queryParam:"name=ToPort"`
}

// GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum - The type of traffic.
type GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum string

const (
	GETCreateTrafficMirrorFilterRuleTrafficDirectionEnumIngress GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum = "ingress"
	GETCreateTrafficMirrorFilterRuleTrafficDirectionEnumEgress  GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum = "egress"
)

func (e GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum) ToPointer() *GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum {
	return &e
}

func (e *GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingress":
		fallthrough
	case "egress":
		*e = GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum: %v", v)
	}
}

// GETCreateTrafficMirrorFilterRuleVersionEnum
type GETCreateTrafficMirrorFilterRuleVersionEnum string

const (
	GETCreateTrafficMirrorFilterRuleVersionEnumTwoThousandAndSixteen1115 GETCreateTrafficMirrorFilterRuleVersionEnum = "2016-11-15"
)

func (e GETCreateTrafficMirrorFilterRuleVersionEnum) ToPointer() *GETCreateTrafficMirrorFilterRuleVersionEnum {
	return &e
}

func (e *GETCreateTrafficMirrorFilterRuleVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETCreateTrafficMirrorFilterRuleVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateTrafficMirrorFilterRuleVersionEnum: %v", v)
	}
}

type GETCreateTrafficMirrorFilterRuleRequest struct {
	Action GETCreateTrafficMirrorFilterRuleActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
	ClientToken *string `queryParam:"style=form,explode=true,name=ClientToken"`
	// The description of the Traffic Mirror rule.
	Description *string `queryParam:"style=form,explode=true,name=Description"`
	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// The destination port range.
	DestinationPortRange *GETCreateTrafficMirrorFilterRuleDestinationPortRange `queryParam:"style=form,explode=true,name=DestinationPortRange"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p>
	Protocol *int64 `queryParam:"style=form,explode=true,name=Protocol"`
	// The action to take on the filtered traffic.
	RuleAction GETCreateTrafficMirrorFilterRuleRuleActionEnum `queryParam:"style=form,explode=true,name=RuleAction"`
	// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
	RuleNumber int64 `queryParam:"style=form,explode=true,name=RuleNumber"`
	// The source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock string `queryParam:"style=form,explode=true,name=SourceCidrBlock"`
	// The source port range.
	SourcePortRange *GETCreateTrafficMirrorFilterRuleSourcePortRange `queryParam:"style=form,explode=true,name=SourcePortRange"`
	// The type of traffic.
	TrafficDirection GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum `queryParam:"style=form,explode=true,name=TrafficDirection"`
	// The ID of the filter that this rule is associated with.
	TrafficMirrorFilterID string                                      `queryParam:"style=form,explode=true,name=TrafficMirrorFilterId"`
	Version               GETCreateTrafficMirrorFilterRuleVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateTrafficMirrorFilterRuleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
