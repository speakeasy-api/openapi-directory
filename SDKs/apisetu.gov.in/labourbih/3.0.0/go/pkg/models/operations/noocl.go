// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NooclSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type NooclRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token ID
	TokenNo string `json:"TokenNo"`
}

// NooclRequestBodyFormatEnum - The format of the certificate in response.
type NooclRequestBodyFormatEnum string

const (
	NooclRequestBodyFormatEnumPdf NooclRequestBodyFormatEnum = "pdf"
)

func (e *NooclRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = NooclRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NooclRequestBodyFormatEnum: %s", s)
	}
}

// NooclRequestBody - Request format
type NooclRequestBody struct {
	CertificateParameters *NooclRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NooclRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type NooclRequest struct {
	// Request format
	Request  *NooclRequestBody `request:"mediaType=application/json"`
	Security NooclSecurity
}

type Noocl504ApplicationJSONErrorEnum string

const (
	Noocl504ApplicationJSONErrorEnumGatewayTimeout Noocl504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Noocl504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Noocl504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl504ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl504ApplicationJSONErrorDescriptionEnum string

const (
	Noocl504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Noocl504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Noocl504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Noocl504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl504ApplicationJSON - Gateway timeout
type Noocl504ApplicationJSON struct {
	Error            *Noocl504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl503ApplicationJSONErrorEnum string

const (
	Noocl503ApplicationJSONErrorEnumServiceUnavailable Noocl503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Noocl503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Noocl503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl503ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl503ApplicationJSONErrorDescriptionEnum string

const (
	Noocl503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Noocl503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Noocl503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Noocl503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl503ApplicationJSON - Service unavailable
type Noocl503ApplicationJSON struct {
	Error            *Noocl503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl502ApplicationJSONErrorEnum string

const (
	Noocl502ApplicationJSONErrorEnumBadGatewy Noocl502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Noocl502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Noocl502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl502ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl502ApplicationJSONErrorDescriptionEnum string

const (
	Noocl502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Noocl502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Noocl502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Noocl502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl502ApplicationJSON - Bad gateway
type Noocl502ApplicationJSON struct {
	Error            *Noocl502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl500ApplicationJSONErrorEnum string

const (
	Noocl500ApplicationJSONErrorEnumInternalServerError Noocl500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Noocl500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Noocl500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl500ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl500ApplicationJSONErrorDescriptionEnum string

const (
	Noocl500ApplicationJSONErrorDescriptionEnumInternalServerError Noocl500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Noocl500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Noocl500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl500ApplicationJSON - Internal server error
type Noocl500ApplicationJSON struct {
	Error            *Noocl500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl404ApplicationJSONErrorEnum string

const (
	Noocl404ApplicationJSONErrorEnumRecordNotFound Noocl404ApplicationJSONErrorEnum = "record_not_found"
	Noocl404ApplicationJSONErrorEnumURLNotFound    Noocl404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Noocl404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Noocl404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl404ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl404ApplicationJSONErrorDescriptionEnum string

const (
	Noocl404ApplicationJSONErrorDescriptionEnumNoRecordFound               Noocl404ApplicationJSONErrorDescriptionEnum = "No record found"
	Noocl404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Noocl404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Noocl404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Noocl404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl404ApplicationJSON - No record found
type Noocl404ApplicationJSON struct {
	Error            *Noocl404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl401ApplicationJSONErrorEnum string

const (
	Noocl401ApplicationJSONErrorEnumInvalidAuthentication Noocl401ApplicationJSONErrorEnum = "invalid_authentication"
	Noocl401ApplicationJSONErrorEnumInvalidAuthorization  Noocl401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Noocl401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Noocl401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl401ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl401ApplicationJSONErrorDescriptionEnum string

const (
	Noocl401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Noocl401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Noocl401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Noocl401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Noocl401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Noocl401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl401ApplicationJSON - Unauthorized access
type Noocl401ApplicationJSON struct {
	Error            *Noocl401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Noocl400ApplicationJSONErrorEnum string

const (
	Noocl400ApplicationJSONErrorEnumMissingParameter Noocl400ApplicationJSONErrorEnum = "missing_parameter"
	Noocl400ApplicationJSONErrorEnumInvalidParameter Noocl400ApplicationJSONErrorEnum = "invalid_parameter"
	Noocl400ApplicationJSONErrorEnumInvalidFormat    Noocl400ApplicationJSONErrorEnum = "invalid_format"
	Noocl400ApplicationJSONErrorEnumInvalidTxnid     Noocl400ApplicationJSONErrorEnum = "invalid_txnid"
	Noocl400ApplicationJSONErrorEnumInvalidConsentid Noocl400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Noocl400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Noocl400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl400ApplicationJSONErrorEnum: %s", s)
	}
}

type Noocl400ApplicationJSONErrorDescriptionEnum string

const (
	Noocl400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Noocl400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Noocl400ApplicationJSONErrorDescriptionEnumBadRequest                              Noocl400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Noocl400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Noocl400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Noocl400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Noocl400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Noocl400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Noocl400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Noocl400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Noocl400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Noocl400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Noocl400ApplicationJSON - Bad request
type Noocl400ApplicationJSON struct {
	Error            *Noocl400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Noocl400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NooclResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Noocl400ApplicationJSONObject *Noocl400ApplicationJSON
	// Unauthorized access
	Noocl401ApplicationJSONObject *Noocl401ApplicationJSON
	// No record found
	Noocl404ApplicationJSONObject *Noocl404ApplicationJSON
	// Internal server error
	Noocl500ApplicationJSONObject *Noocl500ApplicationJSON
	// Bad gateway
	Noocl502ApplicationJSONObject *Noocl502ApplicationJSON
	// Service unavailable
	Noocl503ApplicationJSONObject *Noocl503ApplicationJSON
	// Gateway timeout
	Noocl504ApplicationJSONObject *Noocl504ApplicationJSON
}
