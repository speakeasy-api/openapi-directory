// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateSchemaXAmzTargetEnum
type CreateSchemaXAmzTargetEnum string

const (
	CreateSchemaXAmzTargetEnumAmazonPersonalizeCreateSchema CreateSchemaXAmzTargetEnum = "AmazonPersonalize.CreateSchema"
)

func (e CreateSchemaXAmzTargetEnum) ToPointer() *CreateSchemaXAmzTargetEnum {
	return &e
}

func (e *CreateSchemaXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonPersonalize.CreateSchema":
		*e = CreateSchemaXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSchemaXAmzTargetEnum: %v", v)
	}
}

type CreateSchemaRequest struct {
	CreateSchemaRequest shared.CreateSchemaRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          CreateSchemaXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateSchemaResponse struct {
	ContentType string
	// Success
	CreateSchemaResponse *shared.CreateSchemaResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
