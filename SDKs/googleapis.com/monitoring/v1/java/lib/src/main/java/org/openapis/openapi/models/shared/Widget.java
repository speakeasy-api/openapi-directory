/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Widget - Widget contains a single dashboard component and configuration of how to present the component in the dashboard.
 */
public class Widget {
    /**
     * A chart that displays alert policy data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertChart")
    public AlertChart alertChart;

    public Widget withAlertChart(AlertChart alertChart) {
        this.alertChart = alertChart;
        return this;
    }
    
    /**
     * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blank")
    public java.util.Map<String, Object> blank;

    public Widget withBlank(java.util.Map<String, Object> blank) {
        this.blank = blank;
        return this;
    }
    
    /**
     * A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collapsibleGroup")
    public CollapsibleGroup collapsibleGroup;

    public Widget withCollapsibleGroup(CollapsibleGroup collapsibleGroup) {
        this.collapsibleGroup = collapsibleGroup;
        return this;
    }
    
    /**
     * A widget that displays a list of incidents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incidentList")
    public IncidentList incidentList;

    public Widget withIncidentList(IncidentList incidentList) {
        this.incidentList = incidentList;
        return this;
    }
    
    /**
     * A widget that displays a stream of log.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logsPanel")
    public LogsPanel logsPanel;

    public Widget withLogsPanel(LogsPanel logsPanel) {
        this.logsPanel = logsPanel;
        return this;
    }
    
    /**
     * A widget showing the latest value of a metric, and how this value relates to one or more thresholds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scorecard")
    public Scorecard scorecard;

    public Widget withScorecard(Scorecard scorecard) {
        this.scorecard = scorecard;
        return this;
    }
    
    /**
     * A widget that displays textual content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public Text text;

    public Widget withText(Text text) {
        this.text = text;
        return this;
    }
    
    /**
     * A table that displays time series data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeSeriesTable")
    public TimeSeriesTable timeSeriesTable;

    public Widget withTimeSeriesTable(TimeSeriesTable timeSeriesTable) {
        this.timeSeriesTable = timeSeriesTable;
        return this;
    }
    
    /**
     * Optional. The title of the widget.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Widget withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * A chart that displays data on a 2D (X and Y axes) plane.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xyChart")
    public XyChart xyChart;

    public Widget withXyChart(XyChart xyChart) {
        this.xyChart = xyChart;
        return this;
    }
    
    public Widget(){}
}
