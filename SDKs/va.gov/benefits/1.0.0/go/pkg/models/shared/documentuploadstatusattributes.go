// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DocumentUploadStatusAttributesStatusEnum - Document upload status.
type DocumentUploadStatusAttributesStatusEnum string

const (
	DocumentUploadStatusAttributesStatusEnumPending    DocumentUploadStatusAttributesStatusEnum = "pending"
	DocumentUploadStatusAttributesStatusEnumUploaded   DocumentUploadStatusAttributesStatusEnum = "uploaded"
	DocumentUploadStatusAttributesStatusEnumReceived   DocumentUploadStatusAttributesStatusEnum = "received"
	DocumentUploadStatusAttributesStatusEnumProcessing DocumentUploadStatusAttributesStatusEnum = "processing"
	DocumentUploadStatusAttributesStatusEnumSuccess    DocumentUploadStatusAttributesStatusEnum = "success"
	DocumentUploadStatusAttributesStatusEnumVbms       DocumentUploadStatusAttributesStatusEnum = "vbms"
	DocumentUploadStatusAttributesStatusEnumError      DocumentUploadStatusAttributesStatusEnum = "error"
)

func (e DocumentUploadStatusAttributesStatusEnum) ToPointer() *DocumentUploadStatusAttributesStatusEnum {
	return &e
}

func (e *DocumentUploadStatusAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "uploaded":
		fallthrough
	case "received":
		fallthrough
	case "processing":
		fallthrough
	case "success":
		fallthrough
	case "vbms":
		fallthrough
	case "error":
		*e = DocumentUploadStatusAttributesStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentUploadStatusAttributesStatusEnum: %v", v)
	}
}

type DocumentUploadStatusAttributes struct {
	// Unambiguous status code. Only present if status = "error"
	//
	// * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
	// * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
	// * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
	// * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
	// * `DOC105` - Invalid or unknown id
	// * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
	// * `DOC107` - Empty payload.
	// * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
	// * `DOC201` - Upload server error.
	// * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
	//
	Code *string `json:"code,omitempty"`
	// Human readable error detail. Only present if status = "error"
	Detail *string `json:"detail,omitempty"`
	// The document upload identifier
	GUID string `json:"guid"`
	// Human readable error description. Only present if status = "error"
	Message *string `json:"message,omitempty"`
	// Document upload status.
	//
	Status DocumentUploadStatusAttributesStatusEnum `json:"status"`
	// The last time the submission was updated
	UpdatedAt   *time.Time           `json:"updated_at,omitempty"`
	UploadedPdf *PdfUploadAttributes `json:"uploaded_pdf,omitempty"`
}
