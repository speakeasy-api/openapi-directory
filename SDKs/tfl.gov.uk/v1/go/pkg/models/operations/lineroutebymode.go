// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LineRouteByModeServiceTypesEnum string

const (
	LineRouteByModeServiceTypesEnumRegular LineRouteByModeServiceTypesEnum = "Regular"
	LineRouteByModeServiceTypesEnumNight   LineRouteByModeServiceTypesEnum = "Night"
)

func (e LineRouteByModeServiceTypesEnum) ToPointer() *LineRouteByModeServiceTypesEnum {
	return &e
}

func (e *LineRouteByModeServiceTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Regular":
		fallthrough
	case "Night":
		*e = LineRouteByModeServiceTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineRouteByModeServiceTypesEnum: %v", v)
	}
}

type LineRouteByModeRequest struct {
	// A comma-separated list of modes e.g. tube,dlr
	Modes []string `pathParam:"style=simple,explode=false,name=modes"`
	// A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
	ServiceTypes []LineRouteByModeServiceTypesEnum `queryParam:"style=form,explode=true,name=serviceTypes"`
}

type LineRouteByModeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesLines []shared.TflAPIPresentationEntitiesLine
}
