"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import acknowledgeflow as shared_acknowledgeflow
from ..shared import alarmaction as shared_alarmaction
from ..shared import initializationconfiguration as shared_initializationconfiguration
from ..shared import notificationaction as shared_notificationaction
from ..shared import simplerule as shared_simplerule
from ..shared import updatealarmmodelresponse as shared_updatealarmmodelresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAlarmModelRequestBodyAlarmCapabilities:
    r"""Contains the configuration information of alarm state changes."""
    
    acknowledge_flow: Optional[shared_acknowledgeflow.AcknowledgeFlow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acknowledgeFlow'), 'exclude': lambda f: f is None }})  
    initialization_configuration: Optional[shared_initializationconfiguration.InitializationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initializationConfiguration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAlarmModelRequestBodyAlarmEventActions:
    r"""Contains information about one or more alarm actions."""
    
    alarm_actions: Optional[list[shared_alarmaction.AlarmAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmActions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAlarmModelRequestBodyAlarmNotification:
    r"""Contains information about one or more notification actions."""
    
    notification_actions: Optional[list[shared_notificationaction.NotificationAction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notificationActions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAlarmModelRequestBodyAlarmRule:
    r"""Defines when your alarm is invoked."""
    
    simple_rule: Optional[shared_simplerule.SimpleRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simpleRule'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAlarmModelRequestBody:
    
    alarm_rule: UpdateAlarmModelRequestBodyAlarmRule = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmRule') }})
    r"""Defines when your alarm is invoked."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>."""  
    alarm_capabilities: Optional[UpdateAlarmModelRequestBodyAlarmCapabilities] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmCapabilities'), 'exclude': lambda f: f is None }})
    r"""Contains the configuration information of alarm state changes."""  
    alarm_event_actions: Optional[UpdateAlarmModelRequestBodyAlarmEventActions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmEventActions'), 'exclude': lambda f: f is None }})
    r"""Contains information about one or more alarm actions."""  
    alarm_model_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmModelDescription'), 'exclude': lambda f: f is None }})
    r"""The description of the alarm model."""  
    alarm_notification: Optional[UpdateAlarmModelRequestBodyAlarmNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alarmNotification'), 'exclude': lambda f: f is None }})
    r"""Contains information about one or more notification actions."""  
    severity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""A non-negative integer that reflects the severity level of the alarm."""  
    

@dataclasses.dataclass
class UpdateAlarmModelRequest:
    
    alarm_model_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'alarmModelName', 'style': 'simple', 'explode': False }})
    r"""The name of the alarm model."""  
    request_body: UpdateAlarmModelRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateAlarmModelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_alarm_model_response: Optional[shared_updatealarmmodelresponse.UpdateAlarmModelResponse] = dataclasses.field(default=None)
    r"""Success"""  
    