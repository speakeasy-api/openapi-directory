/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Create and manage administrative resources
 */
export class Administrative {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve or search doctors within practice group
   */
  doctorsList(
    req: operations.DoctorsListRequest,
    security: operations.DoctorsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoctorsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoctorsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/doctors";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoctorsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoctorsListResponse =
        new operations.DoctorsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.doctorsList200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.DoctorsList200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an existing dcotor
   */
  doctorsRead(
    req: operations.DoctorsReadRequest,
    security: operations.DoctorsReadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DoctorsReadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DoctorsReadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/doctors/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DoctorsReadSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DoctorsReadResponse =
        new operations.DoctorsReadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.doctor = utils.objectToClass(httpRes?.data, shared.Doctor);
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve or search user groups
   */
  userGroupsList(
    req: operations.UserGroupsListRequest,
    security: operations.UserGroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UserGroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UserGroupsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/user_groups";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UserGroupsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserGroupsListResponse =
        new operations.UserGroupsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userGroupsList200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UserGroupsList200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an existing user group
   */
  userGroupsRead(
    req: operations.UserGroupsReadRequest,
    security: operations.UserGroupsReadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UserGroupsReadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UserGroupsReadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/user_groups/{id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UserGroupsReadSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserGroupsReadResponse =
        new operations.UserGroupsReadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userProfilesGroup = utils.objectToClass(
              httpRes?.data,
              shared.UserProfilesGroup
            );
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve or search users, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}`
   */
  usersList(
    req: operations.UsersListRequest,
    security: operations.UsersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UsersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UsersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/users";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsersListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsersListResponse =
        new operations.UsersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.usersList200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UsersList200ApplicationJSON
            );
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve an existing user, `/api/users/current` can be used to identify logged in user, it will redirect to `/api/users/{current_user_id}`
   */
  usersRead(
    req: operations.UsersReadRequest,
    security: operations.UsersReadSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UsersReadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UsersReadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/api/users/{id}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UsersReadSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UsersReadResponse =
        new operations.UsersReadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userProfile = utils.objectToClass(
              httpRes?.data,
              shared.UserProfile
            );
          }
          break;
        case [400, 401, 403, 404, 405, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
