"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Issuer:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_issuer_get(self, request: operations.WalletobjectsIssuerGetRequest, security: operations.WalletobjectsIssuerGetSecurity) -> operations.WalletobjectsIssuerGetResponse:
        r"""Returns the issuer with the given issuer ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsIssuerGetRequest, base_url, '/walletobjects/v1/issuer/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsIssuerGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsIssuerGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Issuer])
                res.issuer = out

        return res

    def walletobjects_issuer_insert(self, request: operations.WalletobjectsIssuerInsertRequest, security: operations.WalletobjectsIssuerInsertSecurity) -> operations.WalletobjectsIssuerInsertResponse:
        r"""Inserts an issuer with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/issuer'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "issuer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsIssuerInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsIssuerInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Issuer])
                res.issuer = out

        return res

    def walletobjects_issuer_list(self, request: operations.WalletobjectsIssuerListRequest, security: operations.WalletobjectsIssuerListSecurity) -> operations.WalletobjectsIssuerListResponse:
        r"""Returns a list of all issuers shared to the caller."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/issuer'
        
        query_params = utils.get_query_params(operations.WalletobjectsIssuerListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsIssuerListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IssuerListResponse])
                res.issuer_list_response = out

        return res

    def walletobjects_issuer_patch(self, request: operations.WalletobjectsIssuerPatchRequest, security: operations.WalletobjectsIssuerPatchSecurity) -> operations.WalletobjectsIssuerPatchResponse:
        r"""Updates the issuer referenced by the given issuer ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsIssuerPatchRequest, base_url, '/walletobjects/v1/issuer/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "issuer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsIssuerPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsIssuerPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Issuer])
                res.issuer = out

        return res

    def walletobjects_issuer_update(self, request: operations.WalletobjectsIssuerUpdateRequest, security: operations.WalletobjectsIssuerUpdateSecurity) -> operations.WalletobjectsIssuerUpdateResponse:
        r"""Updates the issuer referenced by the given issuer ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsIssuerUpdateRequest, base_url, '/walletobjects/v1/issuer/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "issuer", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsIssuerUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsIssuerUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Issuer])
                res.issuer = out

        return res

    