<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'/api',
	];
  	
    /**
     * Authentication
     * 
     * @var Auth $$auth
     */
	public Auth $auth;
	
    /**
     * Configuration
     * 
     * @var Config $$config
     */
	public Config $config;
	
    /**
     * File download without authentication headers
     * 
     * @var Downloads $$downloads
     */
	public Downloads $downloads;
	
    /**
     * System events log
     * 
     * @var Eventlog $$eventlog
     */
	public Eventlog $eventlog;
	
    /**
     * User groups
     * 
     * @var Groups $$groups
     */
	public Groups $groups;
	
    /**
     * Internal non-public APIs
     * 
     * @var Internal $$internal
     */
	public Internal $internal;
	
    /**
     * File system objects (rooms, folders, files)
     * 
     * @var Nodes $$nodes
     */
	public Nodes $nodes;
	
    /**
     * Provisioning
     * 
     * @var Provisioning $$provisioning
     */
	public Provisioning $provisioning;
	
    /**
     * Public API (upload / download shares, software information)
     * 
     * @var PublicT $$public
     */
	public PublicT $public;
	
    /**
     * Client resources
     * 
     * @var Resources $$resources
     */
	public Resources $resources;
	
    /**
     * Role user management
     * 
     * @var Roles $$roles
     */
	public Roles $roles;
	
    /**
     * Customer settings
     * 
     * @var Settings $$settings
     */
	public Settings $settings;
	
    /**
     * Upload and Download Shares
     * 
     * @var Shares $$shares
     */
	public Shares $shares;
	
    /**
     * System settings (authentication methods)
     * 
     * @var SystemAuthConfig $$systemAuthConfig
     */
	public SystemAuthConfig $systemAuthConfig;
	
    /**
     * System settings (policies)
     * 
     * @var SystemPoliciesConfig $$systemPoliciesConfig
     */
	public SystemPoliciesConfig $systemPoliciesConfig;
	
    /**
     * System settings (mail server, logging, branding, default values etc.)
     * 
     * @var SystemSettingsConfig $$systemSettingsConfig
     */
	public SystemSettingsConfig $systemSettingsConfig;
	
    /**
     * System settings (storage)
     * 
     * @var SystemStorageConfig $$systemStorageConfig
     */
	public SystemStorageConfig $systemStorageConfig;
	
    /**
     * File upload without authentication headers
     * 
     * @var Uploads $$uploads
     */
	public Uploads $uploads;
	
    /**
     * User operations
     * 
     * @var User $$user
     */
	public User $user;
	
    /**
     * User management
     * 
     * @var Users $$users
     */
	public Users $users;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->auth = new Auth(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->config = new Config(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->downloads = new Downloads(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->eventlog = new Eventlog(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->groups = new Groups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->internal = new Internal(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->nodes = new Nodes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->provisioning = new Provisioning(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->public = new PublicT(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->resources = new Resources(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->roles = new Roles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->settings = new Settings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->shares = new Shares(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->systemAuthConfig = new SystemAuthConfig(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->systemPoliciesConfig = new SystemPoliciesConfig(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->systemSettingsConfig = new SystemSettingsConfig(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->systemStorageConfig = new SystemStorageConfig(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->uploads = new Uploads(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->user = new User(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->users = new Users(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}