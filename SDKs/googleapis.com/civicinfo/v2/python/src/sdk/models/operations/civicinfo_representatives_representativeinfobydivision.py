"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import representativeinfodata as shared_representativeinfodata
from enum import Enum
from typing import Optional

class CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum(str, Enum):
    INTERNATIONAL = 'international'
    COUNTRY = 'country'
    ADMINISTRATIVE_AREA1 = 'administrativeArea1'
    REGIONAL = 'regional'
    ADMINISTRATIVE_AREA2 = 'administrativeArea2'
    LOCALITY = 'locality'
    SUB_LOCALITY1 = 'subLocality1'
    SUB_LOCALITY2 = 'subLocality2'
    SPECIAL = 'special'

class CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum(str, Enum):
    HEAD_OF_STATE = 'headOfState'
    HEAD_OF_GOVERNMENT = 'headOfGovernment'
    DEPUTY_HEAD_OF_GOVERNMENT = 'deputyHeadOfGovernment'
    GOVERNMENT_OFFICER = 'governmentOfficer'
    EXECUTIVE_COUNCIL = 'executiveCouncil'
    LEGISLATOR_UPPER_BODY = 'legislatorUpperBody'
    LEGISLATOR_LOWER_BODY = 'legislatorLowerBody'
    HIGHEST_COURT_JUDGE = 'highestCourtJudge'
    JUDGE = 'judge'
    SCHOOL_BOARD = 'schoolBoard'
    SPECIAL_PURPOSE_OFFICER = 'specialPurposeOfficer'
    OTHER_ROLE = 'otherRole'


@dataclasses.dataclass
class CivicinfoRepresentativesRepresentativeInfoByDivisionRequest:
    
    ocd_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ocdId', 'style': 'simple', 'explode': False }})
    r"""The Open Civic Data division identifier of the division to look up."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    levels: Optional[list[CivicinfoRepresentativesRepresentativeInfoByDivisionLevelsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'levels', 'style': 'form', 'explode': True }})
    r"""A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    recursive: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'recursive', 'style': 'form', 'explode': True }})
    r"""If true, information about all divisions contained in the division requested will be included as well. For example, if querying ocd-division/country:us/district:dc, this would also return all DC's wards and ANCs."""  
    roles: Optional[list[CivicinfoRepresentativesRepresentativeInfoByDivisionRolesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'roles', 'style': 'form', 'explode': True }})
    r"""A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class CivicinfoRepresentativesRepresentativeInfoByDivisionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    representative_info_data: Optional[shared_representativeinfodata.RepresentativeInfoData] = dataclasses.field(default=None)
    r"""Successful response"""  
    