"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Ports:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cycle_device_switch_ports(self, request: operations.CycleDeviceSwitchPortsRequest) -> operations.CycleDeviceSwitchPortsResponse:
        r"""Cycle a set of switch ports
        Cycle a set of switch ports
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CycleDeviceSwitchPortsRequest, base_url, '/devices/{serial}/switch/ports/cycle', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CycleDeviceSwitchPortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cycle_device_switch_ports_200_application_json_object = out

        return res

    def get_device_switch_port(self, request: operations.GetDeviceSwitchPortRequest) -> operations.GetDeviceSwitchPortResponse:
        r"""Return a switch port
        Return a switch port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortRequest, base_url, '/devices/{serial}/switch/ports/{portId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDeviceSwitchPort200ApplicationJSON])
                res.get_device_switch_port_200_application_json_object = out

        return res

    def get_device_switch_ports(self, request: operations.GetDeviceSwitchPortsRequest) -> operations.GetDeviceSwitchPortsResponse:
        r"""List the switch ports for a switch
        List the switch ports for a switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortsRequest, base_url, '/devices/{serial}/switch/ports', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetDeviceSwitchPorts200ApplicationJSON]])
                res.get_device_switch_ports_200_application_json_objects = out

        return res

    def get_device_switch_ports_statuses(self, request: operations.GetDeviceSwitchPortsStatusesRequest) -> operations.GetDeviceSwitchPortsStatusesResponse:
        r"""Return the status for all the ports of a switch
        Return the status for all the ports of a switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortsStatusesRequest, base_url, '/devices/{serial}/switch/ports/statuses', request)
        
        query_params = utils.get_query_params(operations.GetDeviceSwitchPortsStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortsStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetDeviceSwitchPortsStatuses200ApplicationJSON]])
                res.get_device_switch_ports_statuses_200_application_json_objects = out

        return res

    def get_device_switch_ports_statuses_packets(self, request: operations.GetDeviceSwitchPortsStatusesPacketsRequest) -> operations.GetDeviceSwitchPortsStatusesPacketsResponse:
        r"""Return the packet counters for all the ports of a switch
        Return the packet counters for all the ports of a switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortsStatusesPacketsRequest, base_url, '/devices/{serial}/switch/ports/statuses/packets', request)
        
        query_params = utils.get_query_params(operations.GetDeviceSwitchPortsStatusesPacketsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortsStatusesPacketsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_device_switch_ports_statuses_packets_200_application_json_objects = out

        return res

    def get_network_appliance_port(self, request: operations.GetNetworkAppliancePortRequest) -> operations.GetNetworkAppliancePortResponse:
        r"""Return per-port VLAN settings for a single MX port.
        Return per-port VLAN settings for a single MX port.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkAppliancePortRequest, base_url, '/networks/{networkId}/appliance/ports/{portId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkAppliancePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworkAppliancePort200ApplicationJSON])
                res.get_network_appliance_port_200_application_json_object = out

        return res

    def get_network_appliance_ports(self, request: operations.GetNetworkAppliancePortsRequest) -> operations.GetNetworkAppliancePortsResponse:
        r"""List per-port VLAN settings for all ports of a MX.
        List per-port VLAN settings for all ports of a MX.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkAppliancePortsRequest, base_url, '/networks/{networkId}/appliance/ports', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkAppliancePortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkAppliancePorts200ApplicationJSON]])
                res.get_network_appliance_ports_200_application_json_objects = out

        return res

    def get_organization_config_template_switch_profile_port(self, request: operations.GetOrganizationConfigTemplateSwitchProfilePortRequest) -> operations.GetOrganizationConfigTemplateSwitchProfilePortResponse:
        r"""Return a switch profile port
        Return a switch profile port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateSwitchProfilePortRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateSwitchProfilePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON])
                res.get_organization_config_template_switch_profile_port_200_application_json_object = out

        return res

    def get_organization_config_template_switch_profile_ports(self, request: operations.GetOrganizationConfigTemplateSwitchProfilePortsRequest) -> operations.GetOrganizationConfigTemplateSwitchProfilePortsResponse:
        r"""Return all the ports of a switch profile
        Return all the ports of a switch profile
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateSwitchProfilePortsRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateSwitchProfilePortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON]])
                res.get_organization_config_template_switch_profile_ports_200_application_json_objects = out

        return res

    def get_organization_switch_ports_by_switch(self, request: operations.GetOrganizationSwitchPortsBySwitchRequest) -> operations.GetOrganizationSwitchPortsBySwitchResponse:
        r"""List the switchports in an organization by switch
        List the switchports in an organization by switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationSwitchPortsBySwitchRequest, base_url, '/organizations/{organizationId}/switch/ports/bySwitch', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationSwitchPortsBySwitchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationSwitchPortsBySwitchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationSwitchPortsBySwitch200ApplicationJSON]])
                res.get_organization_switch_ports_by_switch_200_application_json_objects = out

        return res

    def update_device_switch_port(self, request: operations.UpdateDeviceSwitchPortRequest) -> operations.UpdateDeviceSwitchPortResponse:
        r"""Update a switch port
        Update a switch port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceSwitchPortRequest, base_url, '/devices/{serial}/switch/ports/{portId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceSwitchPortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateDeviceSwitchPort200ApplicationJSON])
                res.update_device_switch_port_200_application_json_object = out

        return res

    def update_network_appliance_port(self, request: operations.UpdateNetworkAppliancePortRequest) -> operations.UpdateNetworkAppliancePortResponse:
        r"""Update the per-port VLAN settings for a single MX port.
        Update the per-port VLAN settings for a single MX port.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkAppliancePortRequest, base_url, '/networks/{networkId}/appliance/ports/{portId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkAppliancePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkAppliancePort200ApplicationJSON])
                res.update_network_appliance_port_200_application_json_object = out

        return res

    def update_organization_config_template_switch_profile_port(self, request: operations.UpdateOrganizationConfigTemplateSwitchProfilePortRequest) -> operations.UpdateOrganizationConfigTemplateSwitchProfilePortResponse:
        r"""Update a switch profile port
        Update a switch profile port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationConfigTemplateSwitchProfilePortRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationConfigTemplateSwitchProfilePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON])
                res.update_organization_config_template_switch_profile_port_200_application_json_object = out

        return res

    