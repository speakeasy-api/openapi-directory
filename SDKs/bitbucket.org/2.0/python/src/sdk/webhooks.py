"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Webhooks:
    r"""Webhooks provide a way to configure Bitbucket Cloud to make requests to
    your server (or another external service) whenever certain events occur in
    Bitbucket Cloud.
    
    A webhook consists of:
    
    * A subject -- The resource that generates the events. Currently, this resource
    is the repository, user account, or team where you create the webhook.
    * One or more event -- The default event is a repository push, but you can
    select multiple events that can trigger the webhook.
    * A URL -- The endpoint where you want Bitbucket to send the event payloads
    when a matching event happens.
    
    There are two parts to getting a webhook to work: creating the webhook and
    triggering the webhook. After you create a webhook for an event, every time
    that event occurs, Bitbucket sends a payload request that describes the event
    to the specified URL. Thus, you can think of webhooks as a kind of
    notification system.
    
    Use webhooks to integrate applications with Bitbucket Cloud. The following
    use cases provides examples of when you would want to use webhooks:
    
    * Every time a user pushes commits in a repository, you may want to notify
    your CI server to start a build.
    * Every time a user pushes commits or creates a pull request, you may want to
    display a notification in your application.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_repositories_workspace_repo_slug_hooks_uid_(self, request: operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDRequest, security: operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDSecurity) -> operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDResponse:
        r"""Delete a webhook for a repository
        Deletes the specified webhook subscription from the given
        repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRepositoriesWorkspaceRepoSlugHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def delete_workspaces_workspace_hooks_uid_(self, request: operations.DeleteWorkspacesWorkspaceHooksUIDRequest, security: operations.DeleteWorkspacesWorkspaceHooksUIDSecurity) -> operations.DeleteWorkspacesWorkspaceHooksUIDResponse:
        r"""Delete a webhook for a workspace
        Deletes the specified webhook subscription from the given workspace.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWorkspacesWorkspaceHooksUIDRequest, base_url, '/workspaces/{workspace}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWorkspacesWorkspaceHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_hook_events(self) -> operations.GetHookEventsResponse:
        r"""Get a webhook resource
        Returns the webhook resource or subject types on which webhooks can
        be registered.
        
        Each resource/subject type contains an `events` link that returns the
        paginated list of specific events each individual subject type can
        emit.
        
        This endpoint is publicly accessible and does not require
        authentication or scopes.
        
        Example:
        
        ```
        $ curl https://api.bitbucket.org/2.0/hook_events
        
        {
            \"repository\": {
                \"links\": {
                    \"events\": {
                        \"href\": \"https://api.bitbucket.org/2.0/hook_events/repository\"
                    }
                }
            },
            \"workspace\": {
                \"links\": {
                    \"events\": {
                        \"href\": \"https://api.bitbucket.org/2.0/hook_events/workspace\"
                    }
                }
            }
        }
        ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hook_events'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHookEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SubjectTypes])
                res.subject_types = out

        return res

    def get_hook_events_subject_type_(self, request: operations.GetHookEventsSubjectTypeRequest, security: operations.GetHookEventsSubjectTypeSecurity) -> operations.GetHookEventsSubjectTypeResponse:
        r"""List subscribable webhook types
        Returns a paginated list of all valid webhook events for the
        specified entity.
        **The team and user webhooks are deprecated, and you should use workspace instead.
        For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).**
        
        This is public data that does not require any scopes or authentication.
        
        Example:
        
        NOTE: The following example is a truncated response object for the `workspace` `subject_type`.
        We return the same structure for the other `subject_type` objects.
        
        ```
        $ curl https://api.bitbucket.org/2.0/hook_events/workspace
        {
            \"page\": 1,
            \"pagelen\": 30,
            \"size\": 21,
            \"values\": [
                {
                    \"category\": \"Repository\",
                    \"description\": \"Whenever a repository push occurs\",
                    \"event\": \"repo:push\",
                    \"label\": \"Push\"
                },
                {
                    \"category\": \"Repository\",
                    \"description\": \"Whenever a repository fork occurs\",
                    \"event\": \"repo:fork\",
                    \"label\": \"Fork\"
                },
                {
                    \"category\": \"Repository\",
                    \"description\": \"Whenever a repository import occurs\",
                    \"event\": \"repo:imported\",
                    \"label\": \"Import\"
                },
                ...
                {
                    \"category\":\"Pull Request\",
                    \"label\":\"Approved\",
                    \"description\":\"When someone has approved a pull request\",
                    \"event\":\"pullrequest:approved\"
                },
            ]
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHookEventsSubjectTypeRequest, base_url, '/hook_events/{subject_type}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHookEventsSubjectTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedHookEvents])
                res.paginated_hook_events = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_hooks(self, request: operations.GetRepositoriesWorkspaceRepoSlugHooksRequest, security: operations.GetRepositoriesWorkspaceRepoSlugHooksSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugHooksResponse:
        r"""List webhooks for a repository
        Returns a paginated list of webhooks installed on this repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugHooksRequest, base_url, '/repositories/{workspace}/{repo_slug}/hooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugHooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedWebhookSubscriptions])
                res.paginated_webhook_subscriptions = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_repositories_workspace_repo_slug_hooks_uid_(self, request: operations.GetRepositoriesWorkspaceRepoSlugHooksUIDRequest, security: operations.GetRepositoriesWorkspaceRepoSlugHooksUIDSecurity) -> operations.GetRepositoriesWorkspaceRepoSlugHooksUIDResponse:
        r"""Get a webhook for a repository
        Returns the webhook with the specified id installed on the specified
        repository.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRepositoriesWorkspaceRepoSlugHooksUIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRepositoriesWorkspaceRepoSlugHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_workspaces_workspace_hooks(self, request: operations.GetWorkspacesWorkspaceHooksRequest, security: operations.GetWorkspacesWorkspaceHooksSecurity) -> operations.GetWorkspacesWorkspaceHooksResponse:
        r"""List webhooks for a workspace
        Returns a paginated list of webhooks installed on this workspace.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspacesWorkspaceHooksRequest, base_url, '/workspaces/{workspace}/hooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspacesWorkspaceHooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedWebhookSubscriptions])
                res.paginated_webhook_subscriptions = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_workspaces_workspace_hooks_uid_(self, request: operations.GetWorkspacesWorkspaceHooksUIDRequest, security: operations.GetWorkspacesWorkspaceHooksUIDSecurity) -> operations.GetWorkspacesWorkspaceHooksUIDResponse:
        r"""Get a webhook for a workspace
        Returns the webhook with the specified id installed on the given
        workspace.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWorkspacesWorkspaceHooksUIDRequest, base_url, '/workspaces/{workspace}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkspacesWorkspaceHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_repositories_workspace_repo_slug_hooks(self, request: operations.PostRepositoriesWorkspaceRepoSlugHooksRequest, security: operations.PostRepositoriesWorkspaceRepoSlugHooksSecurity) -> operations.PostRepositoriesWorkspaceRepoSlugHooksResponse:
        r"""Create a webhook for a repository
        Creates a new webhook on the specified repository.
        
        Example:
        
        ```
        $ curl -X POST -u credentials -H 'Content-Type: application/json'
          https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks
          -d '
            {
              \"description\": \"Webhook Description\",
              \"url\": \"https://example.com/\",
              \"active\": true,
              \"events\": [
                \"repo:push\",
                \"issue:created\",
                \"issue:updated\"
              ]
            }'
        ```
        
        Note that this call requires the webhook scope, as well as any scope
        that applies to the events that the webhook subscribes to. In the
        example above that means: `webhook`, `repository` and `issue`.
        
        Also note that the `url` must properly resolve and cannot be an
        internal, non-routed address.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRepositoriesWorkspaceRepoSlugHooksRequest, base_url, '/repositories/{workspace}/{repo_slug}/hooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRepositoriesWorkspaceRepoSlugHooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def post_workspaces_workspace_hooks(self, request: operations.PostWorkspacesWorkspaceHooksRequest, security: operations.PostWorkspacesWorkspaceHooksSecurity) -> operations.PostWorkspacesWorkspaceHooksResponse:
        r"""Create a webhook for a workspace
        Creates a new webhook on the specified workspace.
        
        Workspace webhooks are fired for events from all repositories contained
        by that workspace.
        
        Example:
        
        ```
        $ curl -X POST -u credentials -H 'Content-Type: application/json'
          https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks
          -d '
            {
              \"description\": \"Webhook Description\",
              \"url\": \"https://example.com/\",
              \"active\": true,
              \"events\": [
                \"repo:push\",
                \"issue:created\",
                \"issue:updated\"
              ]
            }'
        ```
        
        This call requires the webhook scope, as well as any scope
        that applies to the events that the webhook subscribes to. In the
        example above that means: `webhook`, `repository` and `issue`.
        
        The `url` must properly resolve and cannot be an internal, non-routed address.
        
        Only workspace owners can install webhooks on workspaces.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostWorkspacesWorkspaceHooksRequest, base_url, '/workspaces/{workspace}/hooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWorkspacesWorkspaceHooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_repositories_workspace_repo_slug_hooks_uid_(self, request: operations.PutRepositoriesWorkspaceRepoSlugHooksUIDRequest, security: operations.PutRepositoriesWorkspaceRepoSlugHooksUIDSecurity) -> operations.PutRepositoriesWorkspaceRepoSlugHooksUIDResponse:
        r"""Update a webhook for a repository
        Updates the specified webhook subscription.
        
        The following properties can be mutated:
        
        * `description`
        * `url`
        * `active`
        * `events`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRepositoriesWorkspaceRepoSlugHooksUIDRequest, base_url, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRepositoriesWorkspaceRepoSlugHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def put_workspaces_workspace_hooks_uid_(self, request: operations.PutWorkspacesWorkspaceHooksUIDRequest, security: operations.PutWorkspacesWorkspaceHooksUIDSecurity) -> operations.PutWorkspacesWorkspaceHooksUIDResponse:
        r"""Update a webhook for a workspace
        Updates the specified webhook subscription.
        
        The following properties can be mutated:
        
        * `description`
        * `url`
        * `active`
        * `events`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutWorkspacesWorkspaceHooksUIDRequest, base_url, '/workspaces/{workspace}/hooks/{uid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWorkspacesWorkspaceHooksUIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.webhook_subscription = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    