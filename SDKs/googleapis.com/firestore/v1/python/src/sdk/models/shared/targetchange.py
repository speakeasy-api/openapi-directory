"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TargetChangeTargetChangeTypeEnum(str, Enum):
    r"""The type of change that occurred."""
    NO_CHANGE = 'NO_CHANGE'
    ADD = 'ADD'
    REMOVE = 'REMOVE'
    CURRENT = 'CURRENT'
    RESET = 'RESET'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TargetChange:
    r"""Targets being watched have changed."""
    
    cause: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cause'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    read_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readTime'), 'exclude': lambda f: f is None }})
    r"""The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing."""  
    resume_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resumeToken'), 'exclude': lambda f: f is None }})
    r"""A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change."""  
    target_change_type: Optional[TargetChangeTargetChangeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetChangeType'), 'exclude': lambda f: f is None }})
    r"""The type of change that occurred."""  
    target_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetIds'), 'exclude': lambda f: f is None }})
    r"""The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined."""  
    