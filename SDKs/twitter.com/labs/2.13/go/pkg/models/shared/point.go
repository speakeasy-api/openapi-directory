// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PointTypeEnum string

const (
	PointTypeEnumPoint PointTypeEnum = "Point"
)

func (e *PointTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Point":
		*e = PointTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PointTypeEnum: %s", s)
	}
}

// Point - A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
type Point struct {
	// A [GeoJson Position](https://tools.ietf.org/html/rfc7946#section-3.1.1) in the format `[longitude,latitude]`.
	Coordinates []float64     `json:"coordinates"`
	Type        PointTypeEnum `json:"type"`
}
