// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

var TopUpAccountBalanceServerList = []string{
	"https://rest.nexmo.com",
}

type TopUpAccountBalanceRequest struct {
	// Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com)
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com)
	APISecret    string              `queryParam:"style=form,explode=true,name=api_secret"`
	TopupRequest shared.TopupRequest `request:"mediaType=application/x-www-form-urlencoded"`
}

type TopUpAccountBalance401ApplicationJSONType string

const (
	TopUpAccountBalance401ApplicationJSONTypeErrorAuthenticationFailed TopUpAccountBalance401ApplicationJSONType = "ErrorAuthenticationFailed"
	TopUpAccountBalance401ApplicationJSONTypeErrorAutoReloadNotEnabled TopUpAccountBalance401ApplicationJSONType = "ErrorAutoReloadNotEnabled"
)

type TopUpAccountBalance401ApplicationJSON struct {
	ErrorAuthenticationFailed *shared.ErrorAuthenticationFailed
	ErrorAutoReloadNotEnabled *shared.ErrorAutoReloadNotEnabled

	Type TopUpAccountBalance401ApplicationJSONType
}

func CreateTopUpAccountBalance401ApplicationJSONErrorAuthenticationFailed(errorAuthenticationFailed shared.ErrorAuthenticationFailed) TopUpAccountBalance401ApplicationJSON {
	typ := TopUpAccountBalance401ApplicationJSONTypeErrorAuthenticationFailed

	return TopUpAccountBalance401ApplicationJSON{
		ErrorAuthenticationFailed: &errorAuthenticationFailed,
		Type:                      typ,
	}
}

func CreateTopUpAccountBalance401ApplicationJSONErrorAutoReloadNotEnabled(errorAutoReloadNotEnabled shared.ErrorAutoReloadNotEnabled) TopUpAccountBalance401ApplicationJSON {
	typ := TopUpAccountBalance401ApplicationJSONTypeErrorAutoReloadNotEnabled

	return TopUpAccountBalance401ApplicationJSON{
		ErrorAutoReloadNotEnabled: &errorAutoReloadNotEnabled,
		Type:                      typ,
	}
}

func (u *TopUpAccountBalance401ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorAuthenticationFailed := new(shared.ErrorAuthenticationFailed)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorAuthenticationFailed); err == nil {
		u.ErrorAuthenticationFailed = errorAuthenticationFailed
		u.Type = TopUpAccountBalance401ApplicationJSONTypeErrorAuthenticationFailed
		return nil
	}

	errorAutoReloadNotEnabled := new(shared.ErrorAutoReloadNotEnabled)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorAutoReloadNotEnabled); err == nil {
		u.ErrorAutoReloadNotEnabled = errorAutoReloadNotEnabled
		u.Type = TopUpAccountBalance401ApplicationJSONTypeErrorAutoReloadNotEnabled
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TopUpAccountBalance401ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorAuthenticationFailed != nil {
		return json.Marshal(u.ErrorAuthenticationFailed)
	}

	if u.ErrorAutoReloadNotEnabled != nil {
		return json.Marshal(u.ErrorAutoReloadNotEnabled)
	}

	return nil, nil
}

type TopUpAccountBalanceResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	Success *shared.Success
	// Not Authorised
	TopUpAccountBalance401ApplicationJSONOneOf *TopUpAccountBalance401ApplicationJSON
}
