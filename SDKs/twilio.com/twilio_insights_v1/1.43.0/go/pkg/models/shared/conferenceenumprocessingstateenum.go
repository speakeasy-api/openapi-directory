// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConferenceEnumProcessingStateEnum string

const (
	ConferenceEnumProcessingStateEnumComplete   ConferenceEnumProcessingStateEnum = "complete"
	ConferenceEnumProcessingStateEnumInProgress ConferenceEnumProcessingStateEnum = "in_progress"
	ConferenceEnumProcessingStateEnumTimeout    ConferenceEnumProcessingStateEnum = "timeout"
)

func (e ConferenceEnumProcessingStateEnum) ToPointer() *ConferenceEnumProcessingStateEnum {
	return &e
}

func (e *ConferenceEnumProcessingStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "complete":
		fallthrough
	case "in_progress":
		fallthrough
	case "timeout":
		*e = ConferenceEnumProcessingStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceEnumProcessingStateEnum: %v", v)
	}
}
