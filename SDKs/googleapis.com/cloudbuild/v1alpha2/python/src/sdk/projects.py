"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudbuild_projects_locations_operations_cancel(self, request: operations.CloudbuildProjectsLocationsOperationsCancelRequest, security: operations.CloudbuildProjectsLocationsOperationsCancelSecurity) -> operations.CloudbuildProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsLocationsOperationsCancelRequest, base_url, '/v1alpha2/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudbuildProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def cloudbuild_projects_worker_pools_create(self, request: operations.CloudbuildProjectsWorkerPoolsCreateRequest, security: operations.CloudbuildProjectsWorkerPoolsCreateSecurity) -> operations.CloudbuildProjectsWorkerPoolsCreateResponse:
        r"""Creates a `WorkerPool` to run the builds, and returns the new worker pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsWorkerPoolsCreateRequest, base_url, '/v1alpha2/{parent}/workerPools', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "worker_pool_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudbuildProjectsWorkerPoolsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsWorkerPoolsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkerPool])
                res.worker_pool = out

        return res

    def cloudbuild_projects_worker_pools_delete(self, request: operations.CloudbuildProjectsWorkerPoolsDeleteRequest, security: operations.CloudbuildProjectsWorkerPoolsDeleteSecurity) -> operations.CloudbuildProjectsWorkerPoolsDeleteResponse:
        r"""Deletes a `WorkerPool`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsWorkerPoolsDeleteRequest, base_url, '/v1alpha2/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudbuildProjectsWorkerPoolsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsWorkerPoolsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def cloudbuild_projects_worker_pools_get(self, request: operations.CloudbuildProjectsWorkerPoolsGetRequest, security: operations.CloudbuildProjectsWorkerPoolsGetSecurity) -> operations.CloudbuildProjectsWorkerPoolsGetResponse:
        r"""Returns details of a `WorkerPool`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsWorkerPoolsGetRequest, base_url, '/v1alpha2/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudbuildProjectsWorkerPoolsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsWorkerPoolsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkerPool])
                res.worker_pool = out

        return res

    def cloudbuild_projects_worker_pools_list(self, request: operations.CloudbuildProjectsWorkerPoolsListRequest, security: operations.CloudbuildProjectsWorkerPoolsListSecurity) -> operations.CloudbuildProjectsWorkerPoolsListResponse:
        r"""Lists `WorkerPool`s by project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsWorkerPoolsListRequest, base_url, '/v1alpha2/{parent}/workerPools', request)
        
        query_params = utils.get_query_params(operations.CloudbuildProjectsWorkerPoolsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsWorkerPoolsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkerPoolsResponse])
                res.list_worker_pools_response = out

        return res

    def cloudbuild_projects_worker_pools_patch(self, request: operations.CloudbuildProjectsWorkerPoolsPatchRequest, security: operations.CloudbuildProjectsWorkerPoolsPatchSecurity) -> operations.CloudbuildProjectsWorkerPoolsPatchResponse:
        r"""Updates a `WorkerPool`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudbuildProjectsWorkerPoolsPatchRequest, base_url, '/v1alpha2/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "worker_pool_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudbuildProjectsWorkerPoolsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudbuildProjectsWorkerPoolsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WorkerPool])
                res.worker_pool = out

        return res

    