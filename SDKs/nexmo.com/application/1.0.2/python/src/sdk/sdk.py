"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.nexmo.com/v1/applications",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""<div class=\\"Vlt-callout Vlt-callout--critical\\"> <i></i> <div class=\\"Vlt-callout__content\\">
      <h4>Applications V1 is deprecated</h4>
      This version of the API has been deprecated. Please use <a href=\"/api/application.v2\">version 2</a> going forwards
    </div> </div>
    A Nexmo application contains the security and configuration information you need to connect to Nexmo endpoints and easily use our products.
    https://developer.nexmo.com/api/developer/application
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_application(self, request: operations.CreateApplicationRequestBody) -> operations.CreateApplicationResponse:
        r"""Create Application
        You use a `POST` request to create a new application.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationCreated])
                res.application_created = out

        return res

    def delete_application(self, request: operations.DeleteApplicationRequest) -> operations.DeleteApplicationResponse:
        r"""Destroy Application
        You use a `DELETE` request to delete a single application.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteApplicationRequest, base_url, '/{app_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def retrieve_application(self, request: operations.RetrieveApplicationRequest) -> operations.RetrieveApplicationResponse:
        r"""Retrieve Application
        You use a `GET` request to retrieve details about a single application.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveApplicationRequest, base_url, '/{app_id}', request)
        
        query_params = utils.get_query_params(operations.RetrieveApplicationRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Application])
                res.application = out

        return res

    def retrieve_applications(self, request: operations.RetrieveApplicationsRequest) -> operations.RetrieveApplicationsResponse:
        r"""Retrieve all Applications
        You use a `GET` request to retrieve details of all applications associated with your account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        query_params = utils.get_query_params(operations.RetrieveApplicationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveApplicationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Applications])
                res.applications = out

        return res

    def update_application(self, request: operations.UpdateApplicationRequest) -> operations.UpdateApplicationResponse:
        r"""Update Application
        You use a `PUT` request to update an existing application.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateApplicationRequest, base_url, '/{app_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Application])
                res.application = out

        return res

    