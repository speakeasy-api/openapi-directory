// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// PostAdminMappingsRequestBodyRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminMappingsRequestBodyRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminMappingsRequestBodyRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminMappingsRequestBodyRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum string

const (
	PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnumUniform PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// PostAdminMappingsRequestBodyResponseDelayDistributionUniform - Uniformly distributed random response delay.
type PostAdminMappingsRequestBodyResponseDelayDistributionUniform struct {
	Lower *int64                                                                `json:"lower,omitempty"`
	Type  *PostAdminMappingsRequestBodyResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                `json:"upper,omitempty"`
}

type PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum string

const (
	PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnumLognormal PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal struct {
	Median *int64                                                                  `json:"median,omitempty"`
	Sigma  *float64                                                                `json:"sigma,omitempty"`
	Type   *PostAdminMappingsRequestBodyResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminMappingsRequestBodyResponseDelayDistributionType string

const (
	PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionLogNormal PostAdminMappingsRequestBodyResponseDelayDistributionType = "post_/__admin/mappings_requestBody_response_delayDistribution_Log normal"
	PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionUniform   PostAdminMappingsRequestBodyResponseDelayDistributionType = "post_/__admin/mappings_requestBody_response_delayDistribution_Uniform"
)

type PostAdminMappingsRequestBodyResponseDelayDistribution struct {
	PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal *PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal
	PostAdminMappingsRequestBodyResponseDelayDistributionUniform   *PostAdminMappingsRequestBodyResponseDelayDistributionUniform

	Type PostAdminMappingsRequestBodyResponseDelayDistributionType
}

func CreatePostAdminMappingsRequestBodyResponseDelayDistributionPostAdminMappingsRequestBodyResponseDelayDistributionLogNormal(postAdminMappingsRequestBodyResponseDelayDistributionLogNormal PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal) PostAdminMappingsRequestBodyResponseDelayDistribution {
	typ := PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionLogNormal

	return PostAdminMappingsRequestBodyResponseDelayDistribution{
		PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal: &postAdminMappingsRequestBodyResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreatePostAdminMappingsRequestBodyResponseDelayDistributionPostAdminMappingsRequestBodyResponseDelayDistributionUniform(postAdminMappingsRequestBodyResponseDelayDistributionUniform PostAdminMappingsRequestBodyResponseDelayDistributionUniform) PostAdminMappingsRequestBodyResponseDelayDistribution {
	typ := PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionUniform

	return PostAdminMappingsRequestBodyResponseDelayDistribution{
		PostAdminMappingsRequestBodyResponseDelayDistributionUniform: &postAdminMappingsRequestBodyResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *PostAdminMappingsRequestBodyResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappingsRequestBodyResponseDelayDistributionLogNormal := new(PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsRequestBodyResponseDelayDistributionLogNormal); err == nil {
		u.PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal = postAdminMappingsRequestBodyResponseDelayDistributionLogNormal
		u.Type = PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionLogNormal
		return nil
	}

	postAdminMappingsRequestBodyResponseDelayDistributionUniform := new(PostAdminMappingsRequestBodyResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsRequestBodyResponseDelayDistributionUniform); err == nil {
		u.PostAdminMappingsRequestBodyResponseDelayDistributionUniform = postAdminMappingsRequestBodyResponseDelayDistributionUniform
		u.Type = PostAdminMappingsRequestBodyResponseDelayDistributionTypePostAdminMappingsRequestBodyResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappingsRequestBodyResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.PostAdminMappingsRequestBodyResponseDelayDistributionLogNormal)
	}

	if u.PostAdminMappingsRequestBodyResponseDelayDistributionUniform != nil {
		return json.Marshal(u.PostAdminMappingsRequestBodyResponseDelayDistributionUniform)
	}

	return nil, nil
}

// PostAdminMappingsRequestBodyResponseFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappingsRequestBodyResponseFaultEnum string

const (
	PostAdminMappingsRequestBodyResponseFaultEnumConnectionResetByPeer  PostAdminMappingsRequestBodyResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappingsRequestBodyResponseFaultEnumEmptyResponse          PostAdminMappingsRequestBodyResponseFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappingsRequestBodyResponseFaultEnumMalformedResponseChunk PostAdminMappingsRequestBodyResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappingsRequestBodyResponseFaultEnumRandomDataThenClose    PostAdminMappingsRequestBodyResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappingsRequestBodyResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappingsRequestBodyResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseFaultEnum: %s", s)
	}
}

type PostAdminMappingsRequestBodyResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *PostAdminMappingsRequestBodyResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappingsRequestBodyResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

type PostAdminMappingsRequestBody struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                               `json:"priority,omitempty"`
	Request  *PostAdminMappingsRequestBodyRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                               `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminMappingsRequestBodyResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

// PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminMappings201ApplicationJSONRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

type PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum string

const (
	PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnumUniform PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum = "uniform"
)

func (e *PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum: %s", s)
	}
}

// PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform - Uniformly distributed random response delay.
type PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform struct {
	Lower *int64                                                                       `json:"lower,omitempty"`
	Type  *PostAdminMappings201ApplicationJSONResponseDelayDistributionUniformTypeEnum `json:"type,omitempty"`
	Upper *int64                                                                       `json:"upper,omitempty"`
}

type PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum string

const (
	PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnumLognormal PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum: %s", s)
	}
}

// PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal - Log normal randomly distributed response delay.
type PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal struct {
	Median *int64                                                                         `json:"median,omitempty"`
	Sigma  *float64                                                                       `json:"sigma,omitempty"`
	Type   *PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminMappings201ApplicationJSONResponseDelayDistributionType string

const (
	PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal PostAdminMappings201ApplicationJSONResponseDelayDistributionType = "post_/__admin/mappings_201ApplicationJSON_response_delayDistribution_Log normal"
	PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionUniform   PostAdminMappings201ApplicationJSONResponseDelayDistributionType = "post_/__admin/mappings_201ApplicationJSON_response_delayDistribution_Uniform"
)

type PostAdminMappings201ApplicationJSONResponseDelayDistribution struct {
	PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal *PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal
	PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform   *PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform

	Type PostAdminMappings201ApplicationJSONResponseDelayDistributionType
}

func CreatePostAdminMappings201ApplicationJSONResponseDelayDistributionPostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal(postAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal) PostAdminMappings201ApplicationJSONResponseDelayDistribution {
	typ := PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal

	return PostAdminMappings201ApplicationJSONResponseDelayDistribution{
		PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal: &postAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal,
		Type: typ,
	}
}

func CreatePostAdminMappings201ApplicationJSONResponseDelayDistributionPostAdminMappings201ApplicationJSONResponseDelayDistributionUniform(postAdminMappings201ApplicationJSONResponseDelayDistributionUniform PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform) PostAdminMappings201ApplicationJSONResponseDelayDistribution {
	typ := PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionUniform

	return PostAdminMappings201ApplicationJSONResponseDelayDistribution{
		PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform: &postAdminMappings201ApplicationJSONResponseDelayDistributionUniform,
		Type: typ,
	}
}

func (u *PostAdminMappings201ApplicationJSONResponseDelayDistribution) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal := new(PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal); err == nil {
		u.PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal = postAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal
		u.Type = PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal
		return nil
	}

	postAdminMappings201ApplicationJSONResponseDelayDistributionUniform := new(PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappings201ApplicationJSONResponseDelayDistributionUniform); err == nil {
		u.PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform = postAdminMappings201ApplicationJSONResponseDelayDistributionUniform
		u.Type = PostAdminMappings201ApplicationJSONResponseDelayDistributionTypePostAdminMappings201ApplicationJSONResponseDelayDistributionUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappings201ApplicationJSONResponseDelayDistribution) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal != nil {
		return json.Marshal(u.PostAdminMappings201ApplicationJSONResponseDelayDistributionLogNormal)
	}

	if u.PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform != nil {
		return json.Marshal(u.PostAdminMappings201ApplicationJSONResponseDelayDistributionUniform)
	}

	return nil, nil
}

// PostAdminMappings201ApplicationJSONResponseFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappings201ApplicationJSONResponseFaultEnum string

const (
	PostAdminMappings201ApplicationJSONResponseFaultEnumConnectionResetByPeer  PostAdminMappings201ApplicationJSONResponseFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappings201ApplicationJSONResponseFaultEnumEmptyResponse          PostAdminMappings201ApplicationJSONResponseFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappings201ApplicationJSONResponseFaultEnumMalformedResponseChunk PostAdminMappings201ApplicationJSONResponseFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappings201ApplicationJSONResponseFaultEnumRandomDataThenClose    PostAdminMappings201ApplicationJSONResponseFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappings201ApplicationJSONResponseFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappings201ApplicationJSONResponseFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseFaultEnum: %s", s)
	}
}

type PostAdminMappings201ApplicationJSONResponse struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The delay distribution. Valid property configuration is either median/sigma/type or lower/type/upper.
	DelayDistribution *PostAdminMappings201ApplicationJSONResponseDelayDistribution `json:"delayDistribution,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappings201ApplicationJSONResponseFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string `json:"transformers,omitempty"`
}

// PostAdminMappings201ApplicationJSON - The stub mapping
type PostAdminMappings201ApplicationJSON struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                      `json:"priority,omitempty"`
	Request  *PostAdminMappings201ApplicationJSONRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                      `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminMappings201ApplicationJSONResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PostAdminMappingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The stub mapping
	PostAdminMappings201ApplicationJSONObject *PostAdminMappings201ApplicationJSON
}
