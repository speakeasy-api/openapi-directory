// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePullThroughCacheRuleXAmzTargetEnum
type CreatePullThroughCacheRuleXAmzTargetEnum string

const (
	CreatePullThroughCacheRuleXAmzTargetEnumAmazonEc2ContainerRegistryV20150921CreatePullThroughCacheRule CreatePullThroughCacheRuleXAmzTargetEnum = "AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule"
)

func (e *CreatePullThroughCacheRuleXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerRegistry_V20150921.CreatePullThroughCacheRule":
		*e = CreatePullThroughCacheRuleXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePullThroughCacheRuleXAmzTargetEnum: %s", s)
	}
}

type CreatePullThroughCacheRuleHeaders struct {
	XAmzAlgorithm     *string                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreatePullThroughCacheRuleXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePullThroughCacheRuleRequest struct {
	Headers CreatePullThroughCacheRuleHeaders
	Request shared.CreatePullThroughCacheRuleRequest `request:"mediaType=application/json"`
}

type CreatePullThroughCacheRuleResponse struct {
	ContentType string
	// Success
	CreatePullThroughCacheRuleResponse *shared.CreatePullThroughCacheRuleResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// PullThroughCacheRuleAlreadyExistsException
	PullThroughCacheRuleAlreadyExistsException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// UnsupportedUpstreamRegistryException
	UnsupportedUpstreamRegistryException interface{}
	// ValidationException
	ValidationException interface{}
}
