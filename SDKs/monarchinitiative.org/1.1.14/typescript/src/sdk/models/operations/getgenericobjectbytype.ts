/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

/**
 * bioentity type
 */
export enum GetGenericObjectByTypeTypeEnum {
  Gene = "gene",
  Variant = "variant",
  Genotype = "genotype",
  Phenotype = "phenotype",
  Disease = "disease",
  Goterm = "goterm",
  Pathway = "pathway",
  Anatomy = "anatomy",
  Substance = "substance",
  Individual = "individual",
  Publication = "publication",
  Model = "model",
  Case = "case",
}

export class GetGenericObjectByTypeRequest extends SpeakeasyBase {
  /**
   * Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direct",
  })
  direct?: boolean;

  /**
   * Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=distinct_counts",
  })
  distinctCounts?: boolean;

  /**
   * Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=evidence",
  })
  evidence?: string;

  /**
   * If true, excludes associations that involve IEAs (ECO:0000501)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=exclude_automatic_assertions",
  })
  excludeAutomaticAssertions?: boolean;

  /**
   * Enable faceting
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=facet" })
  facet?: boolean;

  /**
   * Fields to facet on
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=facet_fields",
  })
  facetFields?: string[];

  /**
   * If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fetch_objects",
  })
  fetchObjects?: boolean;

  /**
   * Get association counts
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=get_association_counts",
  })
  getAssociationCounts?: boolean;

  /**
   * id, e.g. NCBIGene:84570
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * number of rows
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=rows" })
  rows?: number;

  /**
   * Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=slim" })
  slim?: string[];

  /**
   * beginning row
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=start" })
  start?: number;

  /**
   * bioentity type
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=type",
  })
  type: GetGenericObjectByTypeTypeEnum;

  /**
   * If true, excludes evidence objects in response
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=unselect_evidence",
  })
  unselectEvidence?: boolean;

  /**
   * If true, returns results in compact associations format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=use_compact_associations",
  })
  useCompactAssociations?: boolean;
}

export class GetGenericObjectByTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
