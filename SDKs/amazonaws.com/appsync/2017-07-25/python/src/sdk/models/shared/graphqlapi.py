"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalauthenticationprovider as shared_additionalauthenticationprovider
from ..shared import authenticationtype_enum as shared_authenticationtype_enum
from ..shared import lambdaauthorizerconfig as shared_lambdaauthorizerconfig
from ..shared import logconfig as shared_logconfig
from ..shared import openidconnectconfig as shared_openidconnectconfig
from ..shared import userpoolconfig as shared_userpoolconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GraphqlAPI:
    r"""Describes a GraphQL API."""
    
    additional_authentication_providers: Optional[list[shared_additionalauthenticationprovider.AdditionalAuthenticationProvider]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalAuthenticationProviders'), 'exclude': lambda f: f is None }})  
    api_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiId'), 'exclude': lambda f: f is None }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arn'), 'exclude': lambda f: f is None }})  
    authentication_type: Optional[shared_authenticationtype_enum.AuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationType'), 'exclude': lambda f: f is None }})  
    lambda_authorizer_config: Optional[shared_lambdaauthorizerconfig.LambdaAuthorizerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaAuthorizerConfig'), 'exclude': lambda f: f is None }})  
    log_config: Optional[shared_logconfig.LogConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logConfig'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    open_id_connect_config: Optional[shared_openidconnectconfig.OpenIDConnectConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openIDConnectConfig'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    uris: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uris'), 'exclude': lambda f: f is None }})  
    user_pool_config: Optional[shared_userpoolconfig.UserPoolConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userPoolConfig'), 'exclude': lambda f: f is None }})  
    waf_web_acl_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wafWebAclArn'), 'exclude': lambda f: f is None }})  
    xray_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xrayEnabled'), 'exclude': lambda f: f is None }})  
    