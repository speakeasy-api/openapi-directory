<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Acl 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an access control rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteResponse
     */
	public function calendarAclDelete(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns an access control rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetResponse
     */
	public function calendarAclGet(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aclRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AclRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an access control rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertResponse
     */
	public function calendarAclInsert(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl', \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "aclRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aclRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AclRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the rules in the access control list for the calendar.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclListResponse
     */
	public function calendarAclList(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl', \OpenAPI\OpenAPI\Models\Operations\CalendarAclListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->acl = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Acl', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an access control rule. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchResponse
     */
	public function calendarAclPatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "aclRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aclRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AclRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an access control rule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateResponse
     */
	public function calendarAclUpdate(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl/{ruleId}', \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "aclRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aclRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AclRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watch for changes to ACL resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchResponse
     */
	public function calendarAclWatch(
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/calendars/{calendarId}/acl/watch', \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CalendarAclWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}