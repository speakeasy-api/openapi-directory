"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class FileUploadSecurity:
    
    api_key_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    o_auth: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class FileUploadRequestBodyFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'file' }})  
    

@dataclasses.dataclass
class FileUploadRequestBody:
    
    doc_metadata: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'doc_metadata' }})
    r"""A JSON string of any additional metadata you want attached to the file."""  
    file: Optional[FileUploadRequestBodyFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""The file to be indexed into Vectara."""  
    

@dataclasses.dataclass
class FileUploadRequest:
    
    c: int = dataclasses.field(metadata={'query_param': { 'field_name': 'c', 'style': 'form', 'explode': True }})
    r"""Customer ID"""  
    o: int = dataclasses.field(metadata={'query_param': { 'field_name': 'o', 'style': 'form', 'explode': True }})
    r"""Corpus ID"""  
    d: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'd', 'style': 'form', 'explode': True }})
    r"""If true, the server returns the extracted document that was indexed"""  
    request_body: Optional[FileUploadRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileUpload400ApplicationJSON:
    r"""An invalid request was sent.  e.g. one or more parameters was missing, or the corpus does not exist."""
    
    http_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpCode'), 'exclude': lambda f: f is None }})
    r"""Returned HTTP code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileUpload200ApplicationJSONResponseQuotaConsumed:
    
    num_chars: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numChars'), 'exclude': lambda f: f is None }})
    r"""The number of characters Vectara indexed from the file uploaded."""  
    num_metadata_chars: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numMetadataChars'), 'exclude': lambda f: f is None }})
    r"""The number of metadata characters Vectara indexed from the file uploaded."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileUpload200ApplicationJSONResponse:
    
    quota_consumed: Optional[FileUpload200ApplicationJSONResponseQuotaConsumed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaConsumed'), 'exclude': lambda f: f is None }})  
    status: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileUpload200ApplicationJSON:
    r"""A successful response"""
    
    response: Optional[FileUpload200ApplicationJSONResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class FileUploadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    file_upload_200_application_json_object: Optional[FileUpload200ApplicationJSON] = dataclasses.field(default=None)
    r"""A successful response"""  
    file_upload_400_application_json_object: Optional[FileUpload400ApplicationJSON] = dataclasses.field(default=None)
    r"""An invalid request was sent.  e.g. one or more parameters was missing, or the corpus does not exist."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    