"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import describeconnectorprofilesresponse as shared_describeconnectorprofilesresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class DescribeConnectorProfilesRequestBodyConnectorTypeEnum(str, Enum):
    r"""The type of connector, such as Salesforce, Amplitude, and so on."""
    SALESFORCE = 'Salesforce'
    SINGULAR = 'Singular'
    SLACK = 'Slack'
    REDSHIFT = 'Redshift'
    S3 = 'S3'
    MARKETO = 'Marketo'
    GOOGLEANALYTICS = 'Googleanalytics'
    ZENDESK = 'Zendesk'
    SERVICENOW = 'Servicenow'
    DATADOG = 'Datadog'
    TRENDMICRO = 'Trendmicro'
    SNOWFLAKE = 'Snowflake'
    DYNATRACE = 'Dynatrace'
    INFORNEXUS = 'Infornexus'
    AMPLITUDE = 'Amplitude'
    VEEVA = 'Veeva'
    EVENT_BRIDGE = 'EventBridge'
    LOOKOUT_METRICS = 'LookoutMetrics'
    UPSOLVER = 'Upsolver'
    HONEYCODE = 'Honeycode'
    CUSTOMER_PROFILES = 'CustomerProfiles'
    SAPO_DATA = 'SAPOData'
    CUSTOM_CONNECTOR = 'CustomConnector'
    PARDOT = 'Pardot'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeConnectorProfilesRequestBody:
    
    connector_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorLabel'), 'exclude': lambda f: f is None }})
    r"""The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/."""  
    connector_profile_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileNames'), 'exclude': lambda f: f is None }})
    r"""The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account."""  
    connector_type: Optional[DescribeConnectorProfilesRequestBodyConnectorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorType'), 'exclude': lambda f: f is None }})
    r"""The type of connector, such as Salesforce, Amplitude, and so on."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations)."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""The pagination token for the next page of data."""  
    

@dataclasses.dataclass
class DescribeConnectorProfilesRequest:
    
    request_body: DescribeConnectorProfilesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeConnectorProfilesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_connector_profiles_response: Optional[shared_describeconnectorprofilesresponse.DescribeConnectorProfilesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    