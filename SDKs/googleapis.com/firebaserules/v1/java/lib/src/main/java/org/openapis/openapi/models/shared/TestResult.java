/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestResult - Test result message containing the state of the test as well as a description and source position for test failures.
 */
public class TestResult {
    /**
     * Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: "resource"]```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debugMessages")
    public String[] debugMessages;
    public TestResult withDebugMessages(String[] debugMessages) {
        this.debugMessages = debugMessages;
        return this;
    }
    
    /**
     * Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorPosition")
    public SourcePosition errorPosition;
    public TestResult withErrorPosition(SourcePosition errorPosition) {
        this.errorPosition = errorPosition;
        return this;
    }
    
    /**
     * The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the "visited_expressions" field above. Literal expressions are omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expressionReports")
    public ExpressionReport[] expressionReports;
    public TestResult withExpressionReports(ExpressionReport[] expressionReports) {
        this.expressionReports = expressionReports;
        return this;
    }
    
    /**
     * The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functionCalls")
    public FunctionCall[] functionCalls;
    public TestResult withFunctionCalls(FunctionCall[] functionCalls) {
        this.functionCalls = functionCalls;
        return this;
    }
    
    /**
     * State of the test.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public TestResultStateEnum state;
    public TestResult withState(TestResultStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visitedExpressions")
    public VisitedExpression[] visitedExpressions;
    public TestResult withVisitedExpressions(VisitedExpression[] visitedExpressions) {
        this.visitedExpressions = visitedExpressions;
        return this;
    }
    
}
