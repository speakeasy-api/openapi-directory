// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesIDProfessionalVehiclesSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum string

const (
	PostSpacesIDProfessionalVehiclesRequestBodyLevelEnumConfidential PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum = "confidential"
	PostSpacesIDProfessionalVehiclesRequestBodyLevelEnumRegular      PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum = "regular"
	PostSpacesIDProfessionalVehiclesRequestBodyLevelEnumPublic       PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum = "public"
)

func (e *PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum: %s", s)
	}
}

// PostSpacesIDProfessionalVehiclesRequestBody - Professional vehicle to add
type PostSpacesIDProfessionalVehiclesRequestBody struct {
	About              *string                                               `json:"About,omitempty"`
	Brand              *string                                               `json:"Brand,omitempty"`
	Comment            *string                                               `json:"Comment,omitempty"`
	CompanyTax         *bool                                                 `json:"CompanyTax,omitempty"`
	DateIn             *string                                               `json:"DateIn,omitempty"`
	DateOut            *string                                               `json:"DateOut,omitempty"`
	Designation        string                                                `json:"Designation"`
	Home               *bool                                                 `json:"Home,omitempty"`
	Keywords           []string                                              `json:"Keywords,omitempty"`
	Level              *PostSpacesIDProfessionalVehiclesRequestBodyLevelEnum `json:"Level,omitempty"`
	Model              *string                                               `json:"Model,omitempty"`
	RegistrationDate   *string                                               `json:"RegistrationDate,omitempty"`
	RegistrationNumber *string                                               `json:"RegistrationNumber,omitempty"`
	Type               *string                                               `json:"Type,omitempty"`
	Value              *float64                                              `json:"Value,omitempty"`
}

type PostSpacesIDProfessionalVehiclesRequest struct {
	// Professional vehicle to add
	RequestBody PostSpacesIDProfessionalVehiclesRequestBody `request:"mediaType=application/json"`
	// Id of the space
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

// PostSpacesIDProfessionalVehicles201ApplicationJSON - Id of the professional vehicle created
type PostSpacesIDProfessionalVehicles201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesIDProfessionalVehiclesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of the professional vehicle created
	PostSpacesIDProfessionalVehicles201ApplicationJSONObject *PostSpacesIDProfessionalVehicles201ApplicationJSON
}
