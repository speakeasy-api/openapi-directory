// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LvcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type LvcerRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// LvcerRequestBodyFormatEnum - The format of the certificate in response.
type LvcerRequestBodyFormatEnum string

const (
	LvcerRequestBodyFormatEnumPdf LvcerRequestBodyFormatEnum = "pdf"
)

func (e *LvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LvcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LvcerRequestBodyFormatEnum: %s", s)
	}
}

// LvcerRequestBody - Request format
type LvcerRequestBody struct {
	CertificateParameters *LvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Lvcer504ApplicationJSONErrorEnum string

const (
	Lvcer504ApplicationJSONErrorEnumGatewayTimeout Lvcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Lvcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Lvcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer504ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lvcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Lvcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Lvcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer504ApplicationJSON - Gateway timeout
type Lvcer504ApplicationJSON struct {
	Error            *Lvcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer503ApplicationJSONErrorEnum string

const (
	Lvcer503ApplicationJSONErrorEnumServiceUnavailable Lvcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Lvcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Lvcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer503ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lvcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Lvcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Lvcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer503ApplicationJSON - Service unavailable
type Lvcer503ApplicationJSON struct {
	Error            *Lvcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer502ApplicationJSONErrorEnum string

const (
	Lvcer502ApplicationJSONErrorEnumBadGatewy Lvcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Lvcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Lvcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer502ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lvcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Lvcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Lvcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer502ApplicationJSON - Bad gateway
type Lvcer502ApplicationJSON struct {
	Error            *Lvcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer500ApplicationJSONErrorEnum string

const (
	Lvcer500ApplicationJSONErrorEnumInternalServerError Lvcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Lvcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Lvcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer500ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer500ApplicationJSONErrorDescriptionEnumInternalServerError Lvcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Lvcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Lvcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer500ApplicationJSON - Internal server error
type Lvcer500ApplicationJSON struct {
	Error            *Lvcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer404ApplicationJSONErrorEnum string

const (
	Lvcer404ApplicationJSONErrorEnumRecordNotFound Lvcer404ApplicationJSONErrorEnum = "record_not_found"
	Lvcer404ApplicationJSONErrorEnumURLNotFound    Lvcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Lvcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lvcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer404ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lvcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lvcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lvcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Lvcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lvcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer404ApplicationJSON - No record found
type Lvcer404ApplicationJSON struct {
	Error            *Lvcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer401ApplicationJSONErrorEnum string

const (
	Lvcer401ApplicationJSONErrorEnumInvalidAuthentication Lvcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Lvcer401ApplicationJSONErrorEnumInvalidAuthorization  Lvcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Lvcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lvcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer401ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lvcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lvcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lvcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Lvcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lvcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer401ApplicationJSON - Unauthorized access
type Lvcer401ApplicationJSON struct {
	Error            *Lvcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lvcer400ApplicationJSONErrorEnum string

const (
	Lvcer400ApplicationJSONErrorEnumMissingParameter Lvcer400ApplicationJSONErrorEnum = "missing_parameter"
	Lvcer400ApplicationJSONErrorEnumInvalidParameter Lvcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Lvcer400ApplicationJSONErrorEnumInvalidFormat    Lvcer400ApplicationJSONErrorEnum = "invalid_format"
	Lvcer400ApplicationJSONErrorEnumInvalidTxnid     Lvcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Lvcer400ApplicationJSONErrorEnumInvalidConsentid Lvcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Lvcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lvcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Lvcer400ApplicationJSONErrorDescriptionEnum string

const (
	Lvcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lvcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lvcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Lvcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lvcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lvcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lvcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lvcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lvcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lvcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Lvcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lvcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lvcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lvcer400ApplicationJSON - Bad request
type Lvcer400ApplicationJSON struct {
	Error            *Lvcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lvcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LvcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lvcer400ApplicationJSONObject *Lvcer400ApplicationJSON
	// Unauthorized access
	Lvcer401ApplicationJSONObject *Lvcer401ApplicationJSON
	// No record found
	Lvcer404ApplicationJSONObject *Lvcer404ApplicationJSON
	// Internal server error
	Lvcer500ApplicationJSONObject *Lvcer500ApplicationJSON
	// Bad gateway
	Lvcer502ApplicationJSONObject *Lvcer502ApplicationJSON
	// Service unavailable
	Lvcer503ApplicationJSONObject *Lvcer503ApplicationJSON
	// Gateway timeout
	Lvcer504ApplicationJSONObject *Lvcer504ApplicationJSON
}
