/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OracleDataGuardGroupUpdate - Properties to use for the update of an Oracle Data Guard group object.
 */
public class OracleDataGuardGroupUpdate {
    /**
     * Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostLogRetentionHours")
    public Integer hostLogRetentionHours;

    public OracleDataGuardGroupUpdate withHostLogRetentionHours(Integer hostLogRetentionHours) {
        this.hostLogRetentionHours = hostLogRetentionHours;
        return this;
    }
    
    /**
     * Path where the NFS share is mounted on the host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostMount")
    public String hostMount;

    public OracleDataGuardGroupUpdate withHostMount(String hostMount) {
        this.hostMount = hostMount;
        return this;
    }
    
    /**
     * Specifies an interval in minutes. This interval is the period between successive log backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupFrequencyInMinutes")
    public Integer logBackupFrequencyInMinutes;

    public OracleDataGuardGroupUpdate withLogBackupFrequencyInMinutes(Integer logBackupFrequencyInMinutes) {
        this.logBackupFrequencyInMinutes = logBackupFrequencyInMinutes;
        return this;
    }
    
    /**
     * Specifies an interval in hours. Log backups are retained for the duration of the interval.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logRetentionHours")
    public Integer logRetentionHours;

    public OracleDataGuardGroupUpdate withLogRetentionHours(Integer logRetentionHours) {
        this.logRetentionHours = logRetentionHours;
        return this;
    }
    
    /**
     * Number of channels used to backup the Oracle database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numChannels")
    public Integer numChannels;

    public OracleDataGuardGroupUpdate withNumChannels(Integer numChannels) {
        this.numChannels = numChannels;
        return this;
    }
    
    /**
     * Ordered list of database unique names to use for backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredDGMemberUniqueNames")
    public String[] preferredDGMemberUniqueNames;

    public OracleDataGuardGroupUpdate withPreferredDGMemberUniqueNames(String[] preferredDGMemberUniqueNames) {
        this.preferredDGMemberUniqueNames = preferredDGMemberUniqueNames;
        return this;
    }
    
    /**
     * Value that indicates whether to backup from the PRIMARY member only, or from any available member.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldBackupFromPrimaryOnly")
    public Boolean shouldBackupFromPrimaryOnly;

    public OracleDataGuardGroupUpdate withShouldBackupFromPrimaryOnly(Boolean shouldBackupFromPrimaryOnly) {
        this.shouldBackupFromPrimaryOnly = shouldBackupFromPrimaryOnly;
        return this;
    }
    
    public OracleDataGuardGroupUpdate(){}
}
