/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SiteEntity - Show site settings
 */
public class SiteEntity {
    /**
     * Id of the currently selected custom SFTP Host Key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_sftp_host_key_id")
    public Integer activeSftpHostKeyId;

    public SiteEntity withActiveSftpHostKeyId(Integer activeSftpHostKeyId) {
        this.activeSftpHostKeyId = activeSftpHostKeyId;
        return this;
    }
    
    /**
     * User ID for the main site administrator
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin_user_id")
    public Integer adminUserId;

    public SiteEntity withAdminUserId(Integer adminUserId) {
        this.adminUserId = adminUserId;
        return this;
    }
    
    /**
     * Are manual Bundle names allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_bundle_names")
    public Boolean allowBundleNames;

    public SiteEntity withAllowBundleNames(Boolean allowBundleNames) {
        this.allowBundleNames = allowBundleNames;
        return this;
    }
    
    /**
     * Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_bypass_for_ftp_sftp_dav")
    public Boolean allowed2faMethodBypassForFtpSftpDav;

    public SiteEntity withAllowed2faMethodBypassForFtpSftpDav(Boolean allowed2faMethodBypassForFtpSftpDav) {
        this.allowed2faMethodBypassForFtpSftpDav = allowed2faMethodBypassForFtpSftpDav;
        return this;
    }
    
    /**
     * Is SMS two factor authentication allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_sms")
    public Boolean allowed2faMethodSms;

    public SiteEntity withAllowed2faMethodSms(Boolean allowed2faMethodSms) {
        this.allowed2faMethodSms = allowed2faMethodSms;
        return this;
    }
    
    /**
     * Is TOTP two factor authentication allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_totp")
    public Boolean allowed2faMethodTotp;

    public SiteEntity withAllowed2faMethodTotp(Boolean allowed2faMethodTotp) {
        this.allowed2faMethodTotp = allowed2faMethodTotp;
        return this;
    }
    
    /**
     * Is U2F two factor authentication allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_u2f")
    public Boolean allowed2faMethodU2f;

    public SiteEntity withAllowed2faMethodU2f(Boolean allowed2faMethodU2f) {
        this.allowed2faMethodU2f = allowed2faMethodU2f;
        return this;
    }
    
    /**
     * Is WebAuthn two factor authentication allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_webauthn")
    public Boolean allowed2faMethodWebauthn;

    public SiteEntity withAllowed2faMethodWebauthn(Boolean allowed2faMethodWebauthn) {
        this.allowed2faMethodWebauthn = allowed2faMethodWebauthn;
        return this;
    }
    
    /**
     * Is yubikey two factor authentication allowed?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_2fa_method_yubi")
    public Boolean allowed2faMethodYubi;

    public SiteEntity withAllowed2faMethodYubi(Boolean allowed2faMethodYubi) {
        this.allowed2faMethodYubi = allowed2faMethodYubi;
        return this;
    }
    
    /**
     * Comma seperated list of allowed Country codes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_countries")
    public String allowedCountries;

    public SiteEntity withAllowedCountries(String allowedCountries) {
        this.allowedCountries = allowedCountries;
        return this;
    }
    
    /**
     * List of allowed IP addresses
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_ips")
    public String allowedIps;

    public SiteEntity withAllowedIps(String allowedIps) {
        this.allowedIps = allowedIps;
        return this;
    }
    
    /**
     * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ask_about_overwrites")
    public Boolean askAboutOverwrites;

    public SiteEntity withAskAboutOverwrites(Boolean askAboutOverwrites) {
        this.askAboutOverwrites = askAboutOverwrites;
        return this;
    }
    
    /**
     * Do Bundle owners receive activity notifications?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_activity_notifications")
    public SiteEntityBundleActivityNotificationsEnum bundleActivityNotifications;

    public SiteEntity withBundleActivityNotifications(SiteEntityBundleActivityNotificationsEnum bundleActivityNotifications) {
        this.bundleActivityNotifications = bundleActivityNotifications;
        return this;
    }
    
    /**
     * Site-wide Bundle expiration in days
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_expiration")
    public Integer bundleExpiration;

    public SiteEntity withBundleExpiration(Integer bundleExpiration) {
        this.bundleExpiration = bundleExpiration;
        return this;
    }
    
    /**
     * Do Bundles require password protection?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_password_required")
    public Boolean bundlePasswordRequired;

    public SiteEntity withBundlePasswordRequired(Boolean bundlePasswordRequired) {
        this.bundlePasswordRequired = bundlePasswordRequired;
        return this;
    }
    
    /**
     * Do Bundle owners receive registration notification?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_registration_notifications")
    public SiteEntityBundleRegistrationNotificationsEnum bundleRegistrationNotifications;

    public SiteEntity withBundleRegistrationNotifications(SiteEntityBundleRegistrationNotificationsEnum bundleRegistrationNotifications) {
        this.bundleRegistrationNotifications = bundleRegistrationNotifications;
        return this;
    }
    
    /**
     * Do Bundles require recipients for sharing?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_require_share_recipient")
    public Boolean bundleRequireShareRecipient;

    public SiteEntity withBundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
        this.bundleRequireShareRecipient = bundleRequireShareRecipient;
        return this;
    }
    
    /**
     * Do Bundle uploaders receive upload confirmation notifications?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_upload_receipt_notifications")
    public SiteEntityBundleUploadReceiptNotificationsEnum bundleUploadReceiptNotifications;

    public SiteEntity withBundleUploadReceiptNotifications(SiteEntityBundleUploadReceiptNotificationsEnum bundleUploadReceiptNotifications) {
        this.bundleUploadReceiptNotifications = bundleUploadReceiptNotifications;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_watermark_attachment")
    public ImageEntity bundleWatermarkAttachment;

    public SiteEntity withBundleWatermarkAttachment(ImageEntity bundleWatermarkAttachment) {
        this.bundleWatermarkAttachment = bundleWatermarkAttachment;
        return this;
    }
    
    /**
     * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundle_watermark_value")
    public java.util.Map<String, Object> bundleWatermarkValue;

    public SiteEntity withBundleWatermarkValue(java.util.Map<String, Object> bundleWatermarkValue) {
        this.bundleWatermarkValue = bundleWatermarkValue;
        return this;
    }
    
    /**
     * Page link and button color
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color2_left")
    public String color2Left;

    public SiteEntity withColor2Left(String color2Left) {
        this.color2Left = color2Left;
        return this;
    }
    
    /**
     * Top bar link color
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color2_link")
    public String color2Link;

    public SiteEntity withColor2Link(String color2Link) {
        this.color2Link = color2Link;
        return this;
    }
    
    /**
     * Page link and button color
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color2_text")
    public String color2Text;

    public SiteEntity withColor2Text(String color2Text) {
        this.color2Text = color2Text;
        return this;
    }
    
    /**
     * Top bar background color
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color2_top")
    public String color2Top;

    public SiteEntity withColor2Top(String color2Top) {
        this.color2Top = color2Top;
        return this;
    }
    
    /**
     * Top bar text color
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color2_top_text")
    public String color2TopText;

    public SiteEntity withColor2TopText(String color2TopText) {
        this.color2TopText = color2TopText;
        return this;
    }
    
    /**
     * Site main contact name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_name")
    public String contactName;

    public SiteEntity withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }
    
    /**
     * Time this site was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public SiteEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Preferred currency
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public SiteEntity withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Is this site using a custom namespace for users?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_namespace")
    public Boolean customNamespace;

    public SiteEntity withCustomNamespace(Boolean customNamespace) {
        this.customNamespace = customNamespace;
        return this;
    }
    
    /**
     * Number of days to keep deleted files
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("days_to_retain_backups")
    public Integer daysToRetainBackups;

    public SiteEntity withDaysToRetainBackups(Integer daysToRetainBackups) {
        this.daysToRetainBackups = daysToRetainBackups;
        return this;
    }
    
    /**
     * Site default time zone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_time_zone")
    public String defaultTimeZone;

    public SiteEntity withDefaultTimeZone(String defaultTimeZone) {
        this.defaultTimeZone = defaultTimeZone;
        return this;
    }
    
    /**
     * Is the desktop app enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("desktop_app")
    public Boolean desktopApp;

    public SiteEntity withDesktopApp(Boolean desktopApp) {
        this.desktopApp = desktopApp;
        return this;
    }
    
    /**
     * Is desktop app session IP pinning enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("desktop_app_session_ip_pinning")
    public Boolean desktopAppSessionIpPinning;

    public SiteEntity withDesktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
        this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
        return this;
    }
    
    /**
     * Desktop app session lifetime (in hours)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("desktop_app_session_lifetime")
    public Integer desktopAppSessionLifetime;

    public SiteEntity withDesktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
        this.desktopAppSessionLifetime = desktopAppSessionLifetime;
        return this;
    }
    
    /**
     * If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_files_certificate_generation")
    public Boolean disableFilesCertificateGeneration;

    public SiteEntity withDisableFilesCertificateGeneration(Boolean disableFilesCertificateGeneration) {
        this.disableFilesCertificateGeneration = disableFilesCertificateGeneration;
        return this;
    }
    
    /**
     * Are notifications disabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_notifications")
    public Boolean disableNotifications;

    public SiteEntity withDisableNotifications(Boolean disableNotifications) {
        this.disableNotifications = disableNotifications;
        return this;
    }
    
    /**
     * Is password reset disabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_password_reset")
    public Boolean disablePasswordReset;

    public SiteEntity withDisablePasswordReset(Boolean disablePasswordReset) {
        this.disablePasswordReset = disablePasswordReset;
        return this;
    }
    
    /**
     * If greater than zero, users will unable to login if they do not show activity within this number of days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disable_users_from_inactivity_period_days")
    public Integer disableUsersFromInactivityPeriodDays;

    public SiteEntity withDisableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
        this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
        return this;
    }
    
    /**
     * Comma seperated list of disallowed Country codes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disallowed_countries")
    public String disallowedCountries;

    public SiteEntity withDisallowedCountries(String disallowedCountries) {
        this.disallowedCountries = disallowedCountries;
        return this;
    }
    
    /**
     * Custom domain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;

    public SiteEntity withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_hsts_header")
    public Boolean domainHstsHeader;

    public SiteEntity withDomainHstsHeader(Boolean domainHstsHeader) {
        this.domainHstsHeader = domainHstsHeader;
        return this;
    }
    
    /**
     * Letsencrypt chain to use when registering SSL Certificate for domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_letsencrypt_chain")
    public SiteEntityDomainLetsencryptChainEnum domainLetsencryptChain;

    public SiteEntity withDomainLetsencryptChain(SiteEntityDomainLetsencryptChainEnum domainLetsencryptChain) {
        this.domainLetsencryptChain = domainLetsencryptChain;
        return this;
    }
    
    /**
     * Main email for this site
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public SiteEntity withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder_permissions_groups_only")
    public Boolean folderPermissionsGroupsOnly;

    public SiteEntity withFolderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
        this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
        return this;
    }
    
    /**
     * Is FTP enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ftp_enabled")
    public Boolean ftpEnabled;

    public SiteEntity withFtpEnabled(Boolean ftpEnabled) {
        this.ftpEnabled = ftpEnabled;
        return this;
    }
    
    /**
     * Is there a signed HIPAA BAA between Files.com and this site?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hipaa")
    public Boolean hipaa;

    public SiteEntity withHipaa(Boolean hipaa) {
        this.hipaa = hipaa;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon128")
    public ImageEntity icon128;

    public SiteEntity withIcon128(ImageEntity icon128) {
        this.icon128 = icon128;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon16")
    public ImageEntity icon16;

    public SiteEntity withIcon16(ImageEntity icon16) {
        this.icon16 = icon16;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon32")
    public ImageEntity icon32;

    public SiteEntity withIcon32(ImageEntity icon32) {
        this.icon32 = icon32;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon48")
    public ImageEntity icon48;

    public SiteEntity withIcon48(ImageEntity icon48) {
        this.icon48 = icon48;
        return this;
    }
    
    /**
     * Can files be modified?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("immutable_files_set_at")
    public OffsetDateTime immutableFilesSetAt;

    public SiteEntity withImmutableFilesSetAt(OffsetDateTime immutableFilesSetAt) {
        this.immutableFilesSetAt = immutableFilesSetAt;
        return this;
    }
    
    /**
     * Include password in emails to new users?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_password_in_welcome_email")
    public Boolean includePasswordInWelcomeEmail;

    public SiteEntity withIncludePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
        this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
        return this;
    }
    
    /**
     * Site default language
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;

    public SiteEntity withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * Base DN for looking up users in LDAP server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_base_dn")
    public String ldapBaseDn;

    public SiteEntity withLdapBaseDn(String ldapBaseDn) {
        this.ldapBaseDn = ldapBaseDn;
        return this;
    }
    
    /**
     * Domain name that will be appended to usernames
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_domain")
    public String ldapDomain;

    public SiteEntity withLdapDomain(String ldapDomain) {
        this.ldapDomain = ldapDomain;
        return this;
    }
    
    /**
     * Main LDAP setting: is LDAP enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_enabled")
    public Boolean ldapEnabled;

    public SiteEntity withLdapEnabled(Boolean ldapEnabled) {
        this.ldapEnabled = ldapEnabled;
        return this;
    }
    
    /**
     * Should we sync groups from LDAP server?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_group_action")
    public String ldapGroupAction;

    public SiteEntity withLdapGroupAction(String ldapGroupAction) {
        this.ldapGroupAction = ldapGroupAction;
        return this;
    }
    
    /**
     * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_group_exclusion")
    public String ldapGroupExclusion;

    public SiteEntity withLdapGroupExclusion(String ldapGroupExclusion) {
        this.ldapGroupExclusion = ldapGroupExclusion;
        return this;
    }
    
    /**
     * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_group_inclusion")
    public String ldapGroupInclusion;

    public SiteEntity withLdapGroupInclusion(String ldapGroupInclusion) {
        this.ldapGroupInclusion = ldapGroupInclusion;
        return this;
    }
    
    /**
     * LDAP host
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_host")
    public String ldapHost;

    public SiteEntity withLdapHost(String ldapHost) {
        this.ldapHost = ldapHost;
        return this;
    }
    
    /**
     * LDAP backup host
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_host_2")
    public String ldapHost2;

    public SiteEntity withLdapHost2(String ldapHost2) {
        this.ldapHost2 = ldapHost2;
        return this;
    }
    
    /**
     * LDAP backup host
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_host_3")
    public String ldapHost3;

    public SiteEntity withLdapHost3(String ldapHost3) {
        this.ldapHost3 = ldapHost3;
        return this;
    }
    
    /**
     * LDAP port
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_port")
    public Integer ldapPort;

    public SiteEntity withLdapPort(Integer ldapPort) {
        this.ldapPort = ldapPort;
        return this;
    }
    
    /**
     * Use secure LDAP?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_secure")
    public Boolean ldapSecure;

    public SiteEntity withLdapSecure(Boolean ldapSecure) {
        this.ldapSecure = ldapSecure;
        return this;
    }
    
    /**
     * LDAP type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_type")
    public String ldapType;

    public SiteEntity withLdapType(String ldapType) {
        this.ldapType = ldapType;
        return this;
    }
    
    /**
     * Should we sync users from LDAP server?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_user_action")
    public String ldapUserAction;

    public SiteEntity withLdapUserAction(String ldapUserAction) {
        this.ldapUserAction = ldapUserAction;
        return this;
    }
    
    /**
     * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_user_include_groups")
    public String ldapUserIncludeGroups;

    public SiteEntity withLdapUserIncludeGroups(String ldapUserIncludeGroups) {
        this.ldapUserIncludeGroups = ldapUserIncludeGroups;
        return this;
    }
    
    /**
     * Username for signing in to LDAP server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_username")
    public String ldapUsername;

    public SiteEntity withLdapUsername(String ldapUsername) {
        this.ldapUsername = ldapUsername;
        return this;
    }
    
    /**
     * LDAP username field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ldap_username_field")
    public String ldapUsernameField;

    public SiteEntity withLdapUsernameField(String ldapUsernameField) {
        this.ldapUsernameField = ldapUsernameField;
        return this;
    }
    
    /**
     * Login help text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login_help_text")
    public String loginHelpText;

    public SiteEntity withLoginHelpText(String loginHelpText) {
        this.loginHelpText = loginHelpText;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    public ImageEntity logo;

    public SiteEntity withLogo(ImageEntity logo) {
        this.logo = logo;
        return this;
    }
    
    /**
     * Number of prior passwords to disallow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_prior_passwords")
    public Integer maxPriorPasswords;

    public SiteEntity withMaxPriorPasswords(Integer maxPriorPasswords) {
        this.maxPriorPasswords = maxPriorPasswords;
        return this;
    }
    
    /**
     * Is the mobile app enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobile_app")
    public Boolean mobileApp;

    public SiteEntity withMobileApp(Boolean mobileApp) {
        this.mobileApp = mobileApp;
        return this;
    }
    
    /**
     * Is mobile app session IP pinning enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobile_app_session_ip_pinning")
    public Boolean mobileAppSessionIpPinning;

    public SiteEntity withMobileAppSessionIpPinning(Boolean mobileAppSessionIpPinning) {
        this.mobileAppSessionIpPinning = mobileAppSessionIpPinning;
        return this;
    }
    
    /**
     * Mobile app session lifetime (in hours)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobile_app_session_lifetime")
    public Integer mobileAppSessionLifetime;

    public SiteEntity withMobileAppSessionLifetime(Integer mobileAppSessionLifetime) {
        this.mobileAppSessionLifetime = mobileAppSessionLifetime;
        return this;
    }
    
    /**
     * A message to show users when they connect via FTP or SFTP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("motd_text")
    public String motdText;

    public SiteEntity withMotdText(String motdText) {
        this.motdText = motdText;
        return this;
    }
    
    /**
     * Show message to users connecting via FTP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("motd_use_for_ftp")
    public Boolean motdUseForFtp;

    public SiteEntity withMotdUseForFtp(Boolean motdUseForFtp) {
        this.motdUseForFtp = motdUseForFtp;
        return this;
    }
    
    /**
     * Show message to users connecting via SFTP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("motd_use_for_sftp")
    public Boolean motdUseForSftp;

    public SiteEntity withMotdUseForSftp(Boolean motdUseForSftp) {
        this.motdUseForSftp = motdUseForSftp;
        return this;
    }
    
    /**
     * Site name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public SiteEntity withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Next billing amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_billing_amount")
    public Double nextBillingAmount;

    public SiteEntity withNextBillingAmount(Double nextBillingAmount) {
        this.nextBillingAmount = nextBillingAmount;
        return this;
    }
    
    /**
     * Next billing date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next_billing_date")
    public String nextBillingDate;

    public SiteEntity withNextBillingDate(String nextBillingDate) {
        this.nextBillingDate = nextBillingDate;
        return this;
    }
    
    /**
     * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("non_sso_groups_allowed")
    public Boolean nonSsoGroupsAllowed;

    public SiteEntity withNonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
        this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
        return this;
    }
    
    /**
     * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("non_sso_users_allowed")
    public Boolean nonSsoUsersAllowed;

    public SiteEntity withNonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
        this.nonSsoUsersAllowed = nonSsoUsersAllowed;
        return this;
    }
    
    /**
     * Allow users to use Office for the web?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office_integration_available")
    public Boolean officeIntegrationAvailable;

    public SiteEntity withOfficeIntegrationAvailable(Boolean officeIntegrationAvailable) {
        this.officeIntegrationAvailable = officeIntegrationAvailable;
        return this;
    }
    
    /**
     * Office integration application used to edit and view the MS Office documents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office_integration_type")
    public SiteEntityOfficeIntegrationTypeEnum officeIntegrationType;

    public SiteEntity withOfficeIntegrationType(SiteEntityOfficeIntegrationTypeEnum officeIntegrationType) {
        this.officeIntegrationType = officeIntegrationType;
        return this;
    }
    
    /**
     * Link to scheduling a meeting with our Sales team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oncehub_link")
    public String oncehubLink;

    public SiteEntity withOncehubLink(String oncehubLink) {
        this.oncehubLink = oncehubLink;
        return this;
    }
    
    /**
     * Use servers in the USA only?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opt_out_global")
    public Boolean optOutGlobal;

    public SiteEntity withOptOutGlobal(Boolean optOutGlobal) {
        this.optOutGlobal = optOutGlobal;
        return this;
    }
    
    /**
     * Is this site's billing overdue?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overdue")
    public Boolean overdue;

    public SiteEntity withOverdue(Boolean overdue) {
        this.overdue = overdue;
        return this;
    }
    
    /**
     * Shortest password length for users
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_min_length")
    public Integer passwordMinLength;

    public SiteEntity withPasswordMinLength(Integer passwordMinLength) {
        this.passwordMinLength = passwordMinLength;
        return this;
    }
    
    /**
     * Require a letter in passwords?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_require_letter")
    public Boolean passwordRequireLetter;

    public SiteEntity withPasswordRequireLetter(Boolean passwordRequireLetter) {
        this.passwordRequireLetter = passwordRequireLetter;
        return this;
    }
    
    /**
     * Require lower and upper case letters in passwords?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_require_mixed")
    public Boolean passwordRequireMixed;

    public SiteEntity withPasswordRequireMixed(Boolean passwordRequireMixed) {
        this.passwordRequireMixed = passwordRequireMixed;
        return this;
    }
    
    /**
     * Require a number in passwords?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_require_number")
    public Boolean passwordRequireNumber;

    public SiteEntity withPasswordRequireNumber(Boolean passwordRequireNumber) {
        this.passwordRequireNumber = passwordRequireNumber;
        return this;
    }
    
    /**
     * Require special characters in password?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_require_special")
    public Boolean passwordRequireSpecial;

    public SiteEntity withPasswordRequireSpecial(Boolean passwordRequireSpecial) {
        this.passwordRequireSpecial = passwordRequireSpecial;
        return this;
    }
    
    /**
     * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_require_unbreached")
    public Boolean passwordRequireUnbreached;

    public SiteEntity withPasswordRequireUnbreached(Boolean passwordRequireUnbreached) {
        this.passwordRequireUnbreached = passwordRequireUnbreached;
        return this;
    }
    
    /**
     * Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_requirements_apply_to_bundles")
    public Boolean passwordRequirementsApplyToBundles;

    public SiteEntity withPasswordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
        this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
        return this;
    }
    
    /**
     * Number of days password is valid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_validity_days")
    public Integer passwordValidityDays;

    public SiteEntity withPasswordValidityDays(Integer passwordValidityDays) {
        this.passwordValidityDays = passwordValidityDays;
        return this;
    }
    
    /**
     * Site phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public String phone;

    public SiteEntity withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin_all_remote_servers_to_site_region")
    public Boolean pinAllRemoteServersToSiteRegion;

    public SiteEntity withPinAllRemoteServersToSiteRegion(Boolean pinAllRemoteServersToSiteRegion) {
        this.pinAllRemoteServersToSiteRegion = pinAllRemoteServersToSiteRegion;
        return this;
    }
    
    /**
     * Reply-to email for this site
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_to_email")
    public String replyToEmail;

    public SiteEntity withReplyToEmail(String replyToEmail) {
        this.replyToEmail = replyToEmail;
        return this;
    }
    
    /**
     * Require two-factor authentication for all users?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_2fa")
    public Boolean require2fa;

    public SiteEntity withRequire2fa(Boolean require2fa) {
        this.require2fa = require2fa;
        return this;
    }
    
    /**
     * If set, requirement for two-factor authentication has been scheduled to end on this date-time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("require_2fa_stop_time")
    public OffsetDateTime require2faStopTime;

    public SiteEntity withRequire2faStopTime(OffsetDateTime require2faStopTime) {
        this.require2faStopTime = require2faStopTime;
        return this;
    }
    
    /**
     * What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("require_2fa_user_type")
    public SiteEntityRequire2faUserTypeEnum require2faUserType;

    public SiteEntity withRequire2faUserType(SiteEntityRequire2faUserTypeEnum require2faUserType) {
        this.require2faUserType = require2faUserType;
        return this;
    }
    
    /**
     * Create user session (log in)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session")
    public SessionEntity session;

    public SiteEntity withSession(SessionEntity session) {
        this.session = session;
        return this;
    }
    
    /**
     * Session expiry in hours
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session_expiry")
    public Double sessionExpiry;

    public SiteEntity withSessionExpiry(Double sessionExpiry) {
        this.sessionExpiry = sessionExpiry;
        return this;
    }
    
    /**
     * Session expiry in minutes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session_expiry_minutes")
    public Integer sessionExpiryMinutes;

    public SiteEntity withSessionExpiryMinutes(Integer sessionExpiryMinutes) {
        this.sessionExpiryMinutes = sessionExpiryMinutes;
        return this;
    }
    
    /**
     * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("session_pinned_by_ip")
    public Boolean sessionPinnedByIp;

    public SiteEntity withSessionPinnedByIp(Boolean sessionPinnedByIp) {
        this.sessionPinnedByIp = sessionPinnedByIp;
        return this;
    }
    
    /**
     * Is SFTP enabled?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sftp_enabled")
    public Boolean sftpEnabled;

    public SiteEntity withSftpEnabled(Boolean sftpEnabled) {
        this.sftpEnabled = sftpEnabled;
        return this;
    }
    
    /**
     * Sftp Host Key Type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sftp_host_key_type")
    public SiteEntitySftpHostKeyTypeEnum sftpHostKeyType;

    public SiteEntity withSftpHostKeyType(SiteEntitySftpHostKeyTypeEnum sftpHostKeyType) {
        this.sftpHostKeyType = sftpHostKeyType;
        return this;
    }
    
    /**
     * Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -&gt; True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sftp_insecure_ciphers")
    public Boolean sftpInsecureCiphers;

    public SiteEntity withSftpInsecureCiphers(Boolean sftpInsecureCiphers) {
        this.sftpInsecureCiphers = sftpInsecureCiphers;
        return this;
    }
    
    /**
     * Use user FTP roots also for SFTP?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sftp_user_root_enabled")
    public Boolean sftpUserRootEnabled;

    public SiteEntity withSftpUserRootEnabled(Boolean sftpUserRootEnabled) {
        this.sftpUserRootEnabled = sftpUserRootEnabled;
        return this;
    }
    
    /**
     * Allow bundle creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharing_enabled")
    public Boolean sharingEnabled;

    public SiteEntity withSharingEnabled(Boolean sharingEnabled) {
        this.sharingEnabled = sharingEnabled;
        return this;
    }
    
    /**
     * Show request access link for users without access?  Currently unused.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_request_access_link")
    public Boolean showRequestAccessLink;

    public SiteEntity withShowRequestAccessLink(Boolean showRequestAccessLink) {
        this.showRequestAccessLink = showRequestAccessLink;
        return this;
    }
    
    /**
     * Custom site footer text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("site_footer")
    public String siteFooter;

    public SiteEntity withSiteFooter(String siteFooter) {
        this.siteFooter = siteFooter;
        return this;
    }
    
    /**
     * Custom site header text
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("site_header")
    public String siteHeader;

    public SiteEntity withSiteHeader(String siteHeader) {
        this.siteHeader = siteHeader;
        return this;
    }
    
    /**
     * SMTP server hostname or IP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smtp_address")
    public String smtpAddress;

    public SiteEntity withSmtpAddress(String smtpAddress) {
        this.smtpAddress = smtpAddress;
        return this;
    }
    
    /**
     * SMTP server authentication type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smtp_authentication")
    public String smtpAuthentication;

    public SiteEntity withSmtpAuthentication(String smtpAuthentication) {
        this.smtpAuthentication = smtpAuthentication;
        return this;
    }
    
    /**
     * From address to use when mailing through custom SMTP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smtp_from")
    public String smtpFrom;

    public SiteEntity withSmtpFrom(String smtpFrom) {
        this.smtpFrom = smtpFrom;
        return this;
    }
    
    /**
     * SMTP server port
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smtp_port")
    public Integer smtpPort;

    public SiteEntity withSmtpPort(Integer smtpPort) {
        this.smtpPort = smtpPort;
        return this;
    }
    
    /**
     * SMTP server username
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smtp_username")
    public String smtpUsername;

    public SiteEntity withSmtpUsername(String smtpUsername) {
        this.smtpUsername = smtpUsername;
        return this;
    }
    
    /**
     * Is SSL required?  Disabling this is insecure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl_required")
    public Boolean sslRequired;

    public SiteEntity withSslRequired(Boolean sslRequired) {
        this.sslRequired = sslRequired;
        return this;
    }
    
    /**
     * Site subdomain
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subdomain")
    public String subdomain;

    public SiteEntity withSubdomain(String subdomain) {
        this.subdomain = subdomain;
        return this;
    }
    
    /**
     * If switching plans, when does the new plan take effect?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("switch_to_plan_date")
    public OffsetDateTime switchToPlanDate;

    public SiteEntity withSwitchToPlanDate(OffsetDateTime switchToPlanDate) {
        this.switchToPlanDate = switchToPlanDate;
        return this;
    }
    
    /**
     * Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tls_disabled")
    public Boolean tlsDisabled;

    public SiteEntity withTlsDisabled(Boolean tlsDisabled) {
        this.tlsDisabled = tlsDisabled;
        return this;
    }
    
    /**
     * Number of days left in trial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trial_days_left")
    public Integer trialDaysLeft;

    public SiteEntity withTrialDaysLeft(Integer trialDaysLeft) {
        this.trialDaysLeft = trialDaysLeft;
        return this;
    }
    
    /**
     * When does this Site trial expire?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("trial_until")
    public OffsetDateTime trialUntil;

    public SiteEntity withTrialUntil(OffsetDateTime trialUntil) {
        this.trialUntil = trialUntil;
        return this;
    }
    
    /**
     * Last time this Site was updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public SiteEntity withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploads_via_email_authentication")
    public Boolean uploadsViaEmailAuthentication;

    public SiteEntity withUploadsViaEmailAuthentication(Boolean uploadsViaEmailAuthentication) {
        this.uploadsViaEmailAuthentication = uploadsViaEmailAuthentication;
        return this;
    }
    
    /**
     * Allow uploaders to set `provided_modified_at` for uploaded files?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_provided_modified_at")
    public Boolean useProvidedModifiedAt;

    public SiteEntity withUseProvidedModifiedAt(Boolean useProvidedModifiedAt) {
        this.useProvidedModifiedAt = useProvidedModifiedAt;
        return this;
    }
    
    /**
     * Create User
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public UserEntity user;

    public SiteEntity withUser(UserEntity user) {
        this.user = user;
        return this;
    }
    
    /**
     * Will users be locked out after incorrect login attempts?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_lockout")
    public Boolean userLockout;

    public SiteEntity withUserLockout(Boolean userLockout) {
        this.userLockout = userLockout;
        return this;
    }
    
    /**
     * How many hours to lock user out for failed password?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_lockout_lock_period")
    public Integer userLockoutLockPeriod;

    public SiteEntity withUserLockoutLockPeriod(Integer userLockoutLockPeriod) {
        this.userLockoutLockPeriod = userLockoutLockPeriod;
        return this;
    }
    
    /**
     * Number of login tries within `user_lockout_within` hours before users are locked out
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_lockout_tries")
    public Integer userLockoutTries;

    public SiteEntity withUserLockoutTries(Integer userLockoutTries) {
        this.userLockoutTries = userLockoutTries;
        return this;
    }
    
    /**
     * Number of hours for user lockout window
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_lockout_within")
    public Integer userLockoutWithin;

    public SiteEntity withUserLockoutWithin(Integer userLockoutWithin) {
        this.userLockoutWithin = userLockoutWithin;
        return this;
    }
    
    /**
     * Enable User Requests feature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_requests_enabled")
    public Boolean userRequestsEnabled;

    public SiteEntity withUserRequestsEnabled(Boolean userRequestsEnabled) {
        this.userRequestsEnabled = userRequestsEnabled;
        return this;
    }
    
    /**
     * Send email to site admins when a user request is received?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_requests_notify_admins")
    public Boolean userRequestsNotifyAdmins;

    public SiteEntity withUserRequestsNotifyAdmins(Boolean userRequestsNotifyAdmins) {
        this.userRequestsNotifyAdmins = userRequestsNotifyAdmins;
        return this;
    }
    
    /**
     * Custom text send in user welcome email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcome_custom_text")
    public String welcomeCustomText;

    public SiteEntity withWelcomeCustomText(String welcomeCustomText) {
        this.welcomeCustomText = welcomeCustomText;
        return this;
    }
    
    /**
     * Include this email in welcome emails if enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcome_email_cc")
    public String welcomeEmailCc;

    public SiteEntity withWelcomeEmailCc(String welcomeEmailCc) {
        this.welcomeEmailCc = welcomeEmailCc;
        return this;
    }
    
    /**
     * Will the welcome email be sent to new users?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcome_email_enabled")
    public Boolean welcomeEmailEnabled;

    public SiteEntity withWelcomeEmailEnabled(Boolean welcomeEmailEnabled) {
        this.welcomeEmailEnabled = welcomeEmailEnabled;
        return this;
    }
    
    /**
     * Include this email subject in welcome emails if enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcome_email_subject")
    public String welcomeEmailSubject;

    public SiteEntity withWelcomeEmailSubject(String welcomeEmailSubject) {
        this.welcomeEmailSubject = welcomeEmailSubject;
        return this;
    }
    
    /**
     * Does the welcome screen appear?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("welcome_screen")
    public SiteEntityWelcomeScreenEnum welcomeScreen;

    public SiteEntity withWelcomeScreen(SiteEntityWelcomeScreenEnum welcomeScreen) {
        this.welcomeScreen = welcomeScreen;
        return this;
    }
    
    /**
     * Does FTP user Windows emulation mode?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("windows_mode_ftp")
    public Boolean windowsModeFtp;

    public SiteEntity withWindowsModeFtp(Boolean windowsModeFtp) {
        this.windowsModeFtp = windowsModeFtp;
        return this;
    }
    
    public SiteEntity(){}
}
