"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class IndexService:
    r"""Indexing operations, such as creating and deleting documents"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete(self, request: operations.DeleteRequest, security: operations.DeleteSecurity) -> operations.DeleteResponse:
        r"""Delete"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/delete-doc'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "vectara_delete_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.vectara_delete_document_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglerpcStatus])
                res.googlerpc_status = out

        return res

    def file_upload(self, request: operations.FileUploadRequest, security: operations.FileUploadSecurity) -> operations.FileUploadResponse:
        r"""File Upload"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/upload'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FileUploadRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FileUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FileUpload200ApplicationJSON])
                res.file_upload_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FileUpload400ApplicationJSON])
                res.file_upload_400_application_json_object = out
        elif http_res.status_code in [401, 403, 409, 507]:
            pass

        return res

    def index(self, request: operations.IndexRequest, security: operations.IndexSecurity) -> operations.IndexResponse:
        r"""Index"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/index'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "vectara_index_document_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IndexResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VectaraIndexDocumentResponse])
                res.vectara_index_document_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglerpcStatus])
                res.googlerpc_status = out

        return res

    