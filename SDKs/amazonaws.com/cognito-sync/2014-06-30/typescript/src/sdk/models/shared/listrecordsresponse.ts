/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecordT } from "./record";
import { Expose, Type } from "class-transformer";

/**
 * Returned for a successful ListRecordsRequest.
 */
export class ListRecordsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Count" })
  count?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "DatasetDeletedAfterRequestedSyncCount" })
  datasetDeletedAfterRequestedSyncCount?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DatasetExists" })
  datasetExists?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DatasetSyncCount" })
  datasetSyncCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedBy" })
  lastModifiedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MergedDatasetNames" })
  mergedDatasetNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: RecordT })
  @Expose({ name: "Records" })
  @Type(() => RecordT)
  records?: RecordT[];

  @SpeakeasyMetadata()
  @Expose({ name: "SyncSessionToken" })
  syncSessionToken?: string;
}
