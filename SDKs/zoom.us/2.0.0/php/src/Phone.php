<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Phone 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Unassign phone number
     * 
     * Unassign [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6) of a Zoom phone user. <br>
     * 
     * After assigning a phone number, you can remove it if you don't want it to be assigned to anyone.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 3. User must have been previously assigned a Zoom Phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberResponse
     */
	public function unassignPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/phone_numbers/{phoneNumberId}', \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnassignPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unassignPhoneNumber204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get account's call logs
     * 
     * Retrieve [call logs](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-Call-Logs) for an account. 
     * 
     * **Scopes**: `phone:read:admin`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>
     * **Prerequisite:**<br>
     * 1. Business or Enterprise account<br>
     * 2. A Zoom Phone license<br>
     * 3. Account Owner and a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) with Zoom Phone Management<br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsResponse
     */
	public function accountCallLogs(
        \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_logs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AccountCallLogsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AccountCallLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountCallLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AccountCallLogs200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add BYOC phone numbers
     * 
     * Use this API to add BYOC phone numbers(provided to you by your carrier) to Zoom.
     * 
     * **Scope:** `phone:write:admin` or `phone:write` or `phone:master`
     * 
     * **Prerequisites:**<br>
     * * The account must hold a business or enterprise plan and Zoom Phone license.
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddBYOCNumberApplicationJSON $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddBYOCNumberResponse
     */
	public function addBYOCNumber(
        \OpenAPI\OpenAPI\Models\Operations\AddBYOCNumberApplicationJSON $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddBYOCNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/byoc_numbers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddBYOCNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addBYOCNumber201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddBYOCNumber201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Add a setting template
     * 
     * This API lets you create a Zoom Phone setting template for an account. Template type includes **User**, **Auto Receptionist**, or **Call Queue**. Settings include profile, policy and user settings. After creating a phone template, the settings defined via this request will become the default settings for an account.
     * <br><br>
     * **Scope**: 
     * * `phone:write:admin` `phone:write`
     * 
     * 
     * **Prerequisites**:
     * 1. Business or enterprise Zoom account
     * 2. A Zoom Phone license
     * 
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * <br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddSettingTemplateApplicationJSON $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddSettingTemplateResponse
     */
	public function addSettingTemplate(
        \OpenAPI\OpenAPI\Models\Operations\AddSettingTemplateApplicationJSON $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddSettingTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/setting_templates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddSettingTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addSettingTemplate201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddSettingTemplate201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Set up shared access
     * 
     * Phone users can access [shared voicemail inboxes](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) in the Zoom desktop client, web portal, or provisioned desk phone. Use this API to define the voicemail access permissions of a user.
     * 
     * To view these settings in the Zoom web portal, navigate to **Admin >Phone System Management> Users & Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail & Call Recordings**.<br>
     * 
     * **Scope**:`phone:write:admin`<br>
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * **Prerequisites**: <br>
     * Business or Enterprise Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddUserSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddUserSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddUserSettingResponse
     */
	public function addUserSetting(
        \OpenAPI\OpenAPI\Models\Operations\AddUserSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddUserSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddUserSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/settings/{settingType}', \OpenAPI\OpenAPI\Models\Operations\AddUserSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddUserSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addUserSetting201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddUserSetting201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addUserSetting400ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Assign calling plan to a user
     * 
     * Assign [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanResponse
     */
	public function assignCallingPlan(
        \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/calling_plans', \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignCallingPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignCallingPlan200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Assign phone number to user
     * 
     * Assign a [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers) to a user who has already enabled Zoom Phone. 
     * 
     * **Scopes**: `phone:write` `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberResponse
     */
	public function assignPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/phone_numbers', \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignPhoneNumber200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AssignPhoneNumber200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Change main company number
     * 
     * The [main company number](https://support.zoom.us/hc/en-us/articles/360028553691) can be used by external callers to reach your phone users (by dialing the main company number and the user's extension). It can also be used by phone users in your account as their caller ID while making calls.<br><br> Use this API to [change the main company number](https://support.zoom.us/hc/en-us/articles/360028553691#h_82414c34-9df2-428a-85a4-efcf7f9e0d72) of an account.<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Account owner or admin permissions<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberResponse
     */
	public function changeMainCompanyNumber(
        \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/company_number');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeMainCompanyNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->changeMainCompanyNumber204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a user's call log
     * 
     * Delete a user's [call log](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-and-identifying-logs).
     * 
     * **Scopes:** `phone:write`, `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * **Prerequisites:** 
     * 1. User must belong to a Business or an Enterprise account.
     * 2. User must hold a Zoom Phone license.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogResponse
     */
	public function deleteCallLog(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/call_logs/{callLogId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCallLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCallLog204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove shared access
     * 
     * Remove the shared voicemail access settings that were previously assigned to a user. 
     * 
     * To view these settings in your Zoom web portal, navigate to **Admin >Phone System Management> Users & Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail & Call Recordings**.<br>
     * 
     * **Scope**: `phone:write:admin`<br><br>
     * **Prerequisites**:<br>
     * * Business or enterprise Account<br>
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingResponse
     */
	public function deleteUserSetting(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/settings/{settingType}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteUserSetting204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a voicemail
     * 
     * Delete a [voicemail message](https://support.zoom.us/hc/en-us/articles/360021400211-Managing-voicemail-messages) from a Zoom account.
     * 
     * **Scope:** `phone:write:admin` or `phone:write`
     * 
     * 
     * **Prerequisite**:
     * * The account must have activted Zoom Phone license.
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailResponse
     */
	public function deleteVoicemail(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/voice_mails/{voicemailId}', \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVoicemailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteVoicemail204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get phone number details
     * 
     * A Zoom account owner or admin can purchase phone numbers and assign them to Zoom phone users. Use this API to get details on a specific Phone number in a Zoom account.<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher plan with Zoom phone license<br>
     * **Scope:** `phone:read:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsResponse
     */
	public function getPhoneNumberDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/numbers/{numberId}', \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPhoneNumberDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetPhoneNumberDetails200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get call recordings
     * 
     * List [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091-Accessing-and-sharing-call-recordings) of an account.<br>
     * 
     * **Scopes:**<br>
     * * `phone:read:admin` `phone:write:admin`
     * 
     * **Prerequisties:** <br>
     * * Pro or higher account with Zoom Phone license.
     * * Account owner or admin privileges.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsResponse
     */
	public function getPhoneRecordings(
        \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/recordings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPhoneRecordings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetPhoneRecordings200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPhoneRecordings400ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get setting template details
     * 
     * This API lets you retrieve a specific account phone template previously created. <br>
     * 
     * **Scope**: <br>
     * * `phone:write:admin` or `phone:write`
     * 
     * **Prerequisites**: <br>
     * 1. Business or Enterprise Account
     * 2. A Zoom Phone license
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateResponse
     */
	public function getSettingTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/setting_templates/{templateId}', \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSettingTemplate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetSettingTemplate200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSettingTemplate404ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List phone numbers
     * 
     * A Zoom account owner or admin can purchase phone numbers and assign them to Zoom phone users. Use this API to list all Zoom Phone numbers in a Zoom account. You can filter the response based on your needs by using query parameters.
     * 
     * **Prerequisites:**<br>
     * * Pro or higher plan with Zoom phone license<br>
     * **Scope:** `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersResponse
     */
	public function listAccountPhoneNumbers(
        \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/numbers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountPhoneNumbers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAccountPhoneNumbers200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List BYOC SIP trunks
     * 
     * List [BYOC SIP trunks](https://zoom.us/docs/doc/Zoom-Bring%20Your%20Own%20Carrier.pdf) that are assigned to an account. 
     * 
     * **Scopes**:<br>
     * * `phone:write:admin` or `phone:master`<br>
     * 
     * **Prerequisites**:<br>
     * * Business or Enterprise Account
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkResponse
     */
	public function listBYOCSIPTrunk(
        \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/sip_trunk/trunks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBYOCSIPTrunk200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListBYOCSIPTrunk200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List calling plans
     * 
     * List all Zoom Phone [calling plans](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) that are enabled for a Zoom account.<br><br>
     * **Prerequisites:**<br>
     * * Pro or a higher account with Zoom phone license. <br>
     * **Scope:** `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallingPlansResponse
     */
	public function listCallingPlans(
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallingPlansResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/calling_plans');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallingPlansResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallingPlans200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallingPlans200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List phone users
     * 
     * List all the users on an account who have been assigned Zoom Phone licenses.<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher plan with Zoom phone license<br>
     * **Scope:** `phone:read:admin`<br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersResponse
     */
	public function listPhoneUsers(
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPhoneUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPhoneUsers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListPhoneUsers200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List setting templates
     * 
     * This API lets you retrieve a list of all the phone template settings previously created. 
     * <br>
     * **Scope**:<br>
     * * `phone:read:admin` or `phone:read`
     * <br>**Prerequisites**: <br>
     * 1. Business or enterprise Account
     * 2. A Zoom Phone license
     * 
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesResponse
     */
	public function listSettingTemplates(
        \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/setting_templates');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSettingTemplatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSettingTemplates200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSettingTemplates200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get user's profile
     * 
     * Retrieve a user's [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) profile.
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * **Prerequisites** :
     * 1. Business or Enterprise account 
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneUserResponse
     */
	public function phoneUser(
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\PhoneUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneUser200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PhoneUser200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get user's call logs
     * 
     * Retrieve a [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) user's call logs.
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsResponse
     */
	public function phoneUserCallLogs(
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/call_logs', \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneUserCallLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PhoneUserCallLogs200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get user's recordings
     * 
     * Retrieve a user's zoom [phone recordings](https://support.zoom.us/hc/en-us/articles/360021336671-Viewing-Call-History-and-Recordings).
     * **Scopes:** `phone:read`, `phone:read:admin`<br>
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsResponse
     */
	public function phoneUserRecordings(
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/recordings', \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneUserRecordings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PhoneUserRecordings200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get user's settings
     * 
     * Retrieve a user's zoom phone profile [settings](https://support.zoom.us/hc/en-us/articles/360021325712-Configuring-Settings).
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsResponse
     */
	public function phoneUserSettings(
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/settings', \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneUserSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneUserSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PhoneUserSettings200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get user's voicemails
     * 
     * Retrieve a user's Zoom Phone voicemails. 
     * 
     * **Scopes:** `phone:read`, `phone:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`<br>
     * **Prerequisite:**
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsResponse
     */
	public function phoneUserVoiceMails(
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/voice_mails', \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phoneUserVoiceMails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PhoneUserVoiceMails200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Assign SIP trunks
     * 
     * Using this API, a [master account](https://marketplace.zoom.us/docs/api-reference/master-account-apis) owner can assign SIP trunk(s) to a sub account.<br>
     * 
     * **Scope**:<br>
     * * `phone:master` <br>
     * 
     * **Prerequisites**:<br>
     * * Business or enterprise Account.<br>
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkResponse
     */
	public function postPhoneSIPTrunk(
        \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/phone/sip_trunk/trunks', \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postPhoneSIPTrunk201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostPhoneSIPTrunk201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Set up a Zoom Phone account
     * 
     * After assigning a Zoom phone license to an account, an admin or account owner can proceed with the [initial Zoom phone set up](https://support.zoom.us/hc/en-us/articles/360001297663-Getting-started-with-Zoom-Phone-admin-#h_5ae26a3a-290c-4a8d-b3b0-6384ed267b13) using this API.
     * 
     * **Scope**:<br>
     * * `phone:write:admin` `phone:write`
     * 
     * **Prerequisites**: <br>
     * * Pro or a higher paid account with master account option enabled.
     * 
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetUpAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetUpAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetUpAccountResponse
     */
	public function setUpAccount(
        \OpenAPI\OpenAPI\Models\Operations\SetUpAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetUpAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetUpAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/phone/setup', \OpenAPI\OpenAPI\Models\Operations\SetUpAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetUpAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Unassign user's calling plan
     * 
     * Unassign a [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) that was previously assigned to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051) user.
     * 
     * **Scopes**: `phone:write` `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanResponse
     */
	public function unassignCallingPlan(
        \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/calling_plans/{type}', \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnassignCallingPlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unassignCallingPlan204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update phone number details
     * 
     * Update phone number details.
     * 
     * **Scopes:**
     * * `phone:write` `phone:write:admin`
     * * `phone:master`
     * 
     * **Prerequisite:**
     * * Paid account
     * 
     * **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsResponse
     */
	public function updatePhoneNumberDetails(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/numbers/{numberId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneNumberDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePhoneNumberDetails204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update SIP trunk details
     * 
     * Update details of a SIP trunk that is assigned to a sub account.<br>
     * 
     * **Scope**:<br>
     * * `phone:master` <br>
     * 
     * **Prerequisites**:<br>
     * Business or Enterprise Account.<br>
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkResponse
     */
	public function updatePhoneSIPTrunk(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/phone/sip_trunk/trunks/{sipTrunkId}', \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSIPTrunkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePhoneSIPTrunk204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update BYOC settings
     * 
     * Only [master account owners](https://marketplace.zoom.us/docs/api-reference/master-account-apis) can use this API to enable BYOC(Bring your own carrier) option for a sub account.<br>
     * 
     * **Scope**:<br>
     * * `phone:master` <br>
     * 
     * **Prerequisites**: <br>
     * * Business or enterprise Account.<br>
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsResponse
     */
	public function updatePhoneSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/phone/settings', \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePhoneSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updatePhoneSettings204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update a setting template
     * 
     * Use this API to update or modify profile settings for the phone template. Template type includes **User**, **Auto Receptionist**, or **Call Queue**. After you've modified a template, click **User Settings** to set up settings for Call Handling, Desk Phone, and Others. <br>
     * 
     * **Scope**:<br>
     * * `phone:write:admin` or `phone:write`
     * 
     * **Prerequisites**: <br>
     * 1. Business or Enterprise Account
     * 2. A Zoom Phone license
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateResponse
     */
	public function updateSettingTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/setting_templates/{templateId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSettingTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateSettingTemplate204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update user's profile
     * 
     * Update a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user's profile.
     * 
     * **Scopes:** `phone:write` `phone:write:admin`  <br>
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * **Prerequisite:** 
     * 1. Business or Enterprise account
     * 2. A Zoom Phone license
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse
     */
	public function updateUserProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateUserProfile204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 300 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Update shared access
     * 
     * Phone users can access [shared voicemail inboxes](https://support.zoom.us/hc/en-us/articles/360033863991-Sharing-and-controlling-access-to-a-voicemail-inbox) in the Zoom desktop client, web portal, or provisioned desk phone. Use this API to update the voicemail access permissions of a user.
     * 
     * To view these settings in the Zoom web portal, navigate to **Admin >Phone System Management> Users & Rooms**. Click the **Users** tab and select **User Settings**. Scroll down to **Voicemail & Call Recordings**.<br>
     * 
     * **Scope**: <br>`phone:write:admin`<br>
     * <br>**[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`<br>
     * 
     * 
     * 
     * **Prerequisites**:<br>
     * Business or Enterprise Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingResponse
     */
	public function updateUserSetting(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/users/{userId}/settings/{settingType}', \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUserSettingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateUserSetting204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateUserSetting400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}