// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetMssqlHierarchyChildrenObjectTypeEnum string

const (
	GetMssqlHierarchyChildrenObjectTypeEnumHost                   GetMssqlHierarchyChildrenObjectTypeEnum = "Host"
	GetMssqlHierarchyChildrenObjectTypeEnumMssqlInstance          GetMssqlHierarchyChildrenObjectTypeEnum = "MssqlInstance"
	GetMssqlHierarchyChildrenObjectTypeEnumMssqlDatabase          GetMssqlHierarchyChildrenObjectTypeEnum = "MssqlDatabase"
	GetMssqlHierarchyChildrenObjectTypeEnumWindowsCluster         GetMssqlHierarchyChildrenObjectTypeEnum = "WindowsCluster"
	GetMssqlHierarchyChildrenObjectTypeEnumMssqlAvailabilityGroup GetMssqlHierarchyChildrenObjectTypeEnum = "MssqlAvailabilityGroup"
)

func (e GetMssqlHierarchyChildrenObjectTypeEnum) ToPointer() *GetMssqlHierarchyChildrenObjectTypeEnum {
	return &e
}

func (e *GetMssqlHierarchyChildrenObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Host":
		fallthrough
	case "MssqlInstance":
		fallthrough
	case "MssqlDatabase":
		fallthrough
	case "WindowsCluster":
		fallthrough
	case "MssqlAvailabilityGroup":
		*e = GetMssqlHierarchyChildrenObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMssqlHierarchyChildrenObjectTypeEnum: %v", v)
	}
}

// GetMssqlHierarchyChildrenSLAAssignmentEnum - Filter by SLA assignment type.
type GetMssqlHierarchyChildrenSLAAssignmentEnum string

const (
	GetMssqlHierarchyChildrenSLAAssignmentEnumDerived    GetMssqlHierarchyChildrenSLAAssignmentEnum = "Derived"
	GetMssqlHierarchyChildrenSLAAssignmentEnumDirect     GetMssqlHierarchyChildrenSLAAssignmentEnum = "Direct"
	GetMssqlHierarchyChildrenSLAAssignmentEnumUnassigned GetMssqlHierarchyChildrenSLAAssignmentEnum = "Unassigned"
)

func (e GetMssqlHierarchyChildrenSLAAssignmentEnum) ToPointer() *GetMssqlHierarchyChildrenSLAAssignmentEnum {
	return &e
}

func (e *GetMssqlHierarchyChildrenSLAAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Derived":
		fallthrough
	case "Direct":
		fallthrough
	case "Unassigned":
		*e = GetMssqlHierarchyChildrenSLAAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMssqlHierarchyChildrenSLAAssignmentEnum: %v", v)
	}
}

// GetMssqlHierarchyChildrenSnappableStatusEnum - Determines whether SQL Server instances are fetched with additional privilege checks.
type GetMssqlHierarchyChildrenSnappableStatusEnum string

const (
	GetMssqlHierarchyChildrenSnappableStatusEnumProtectable GetMssqlHierarchyChildrenSnappableStatusEnum = "Protectable"
)

func (e GetMssqlHierarchyChildrenSnappableStatusEnum) ToPointer() *GetMssqlHierarchyChildrenSnappableStatusEnum {
	return &e
}

func (e *GetMssqlHierarchyChildrenSnappableStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Protectable":
		*e = GetMssqlHierarchyChildrenSnappableStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMssqlHierarchyChildrenSnappableStatusEnum: %v", v)
	}
}

// GetMssqlHierarchyChildrenSortByEnum - Attribute to sort the results on.
type GetMssqlHierarchyChildrenSortByEnum string

const (
	GetMssqlHierarchyChildrenSortByEnumName                         GetMssqlHierarchyChildrenSortByEnum = "name"
	GetMssqlHierarchyChildrenSortByEnumDescendantCountMssqlInstance GetMssqlHierarchyChildrenSortByEnum = "descendantCount.MssqlInstance"
	GetMssqlHierarchyChildrenSortByEnumDescendantCountMssqlDatabase GetMssqlHierarchyChildrenSortByEnum = "descendantCount.MssqlDatabase"
	GetMssqlHierarchyChildrenSortByEnumLogBackupRetentionHours      GetMssqlHierarchyChildrenSortByEnum = "logBackupRetentionHours"
	GetMssqlHierarchyChildrenSortByEnumCopyOnly                     GetMssqlHierarchyChildrenSortByEnum = "copyOnly"
	GetMssqlHierarchyChildrenSortByEnumEffectiveSLADomainName       GetMssqlHierarchyChildrenSortByEnum = "effectiveSlaDomainName"
)

func (e GetMssqlHierarchyChildrenSortByEnum) ToPointer() *GetMssqlHierarchyChildrenSortByEnum {
	return &e
}

func (e *GetMssqlHierarchyChildrenSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "descendantCount.MssqlInstance":
		fallthrough
	case "descendantCount.MssqlDatabase":
		fallthrough
	case "logBackupRetentionHours":
		fallthrough
	case "copyOnly":
		fallthrough
	case "effectiveSlaDomainName":
		*e = GetMssqlHierarchyChildrenSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMssqlHierarchyChildrenSortByEnum: %v", v)
	}
}

// GetMssqlHierarchyChildrenSortOrderEnum - Sort order, either ascending or descending.
type GetMssqlHierarchyChildrenSortOrderEnum string

const (
	GetMssqlHierarchyChildrenSortOrderEnumAsc  GetMssqlHierarchyChildrenSortOrderEnum = "asc"
	GetMssqlHierarchyChildrenSortOrderEnumDesc GetMssqlHierarchyChildrenSortOrderEnum = "desc"
)

func (e GetMssqlHierarchyChildrenSortOrderEnum) ToPointer() *GetMssqlHierarchyChildrenSortOrderEnum {
	return &e
}

func (e *GetMssqlHierarchyChildrenSortOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetMssqlHierarchyChildrenSortOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMssqlHierarchyChildrenSortOrderEnum: %v", v)
	}
}

type GetMssqlHierarchyChildrenRequest struct {
	// Filter by the ID of the effective SLA Domain.
	EffectiveSLADomainID *string `queryParam:"style=form,explode=true,name=effective_sla_domain_id"`
	// Boolean that filters top-level nodes with the Host or WindowsCluster object type by whether or not the nodes have children MssqlInstance nodes. When this value is 'true,' the filter shows only nodes with children MssqlInstance nodes. When this value is 'false,' the filter shows only nodes without children MssqlInstance nodes.
	HasInstances *bool `queryParam:"style=form,explode=true,name=has_instances"`
	// ID of the parent SQL Server hierarchy object. To get top-level nodes, use **root** as the ID.
	//
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Filter by the value of the `isClustered` field for nodes with object type MssqlDatabase or MssqlInstance.
	IsClustered *bool `queryParam:"style=form,explode=true,name=is_clustered"`
	// Filter database by the value of the `isLiveMount` field for nodes with object type MssqlDatabase.
	IsLiveMount *bool `queryParam:"style=form,explode=true,name=is_live_mount"`
	// Filter by the value of the `isLogShippingSecondary` field for nodes with object type MssqlDatabase.
	IsLogShippingSecondary *bool `queryParam:"style=form,explode=true,name=is_log_shipping_secondary"`
	// Filter by the value of the `isRelic` field for nodes with object type MssqlDatabase.
	IsRelic *bool `queryParam:"style=form,explode=true,name=is_relic"`
	// Limit the number of matches returned.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Filter children by provided name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Filter by a comma-separated list of node object types.
	//
	ObjectType []GetMssqlHierarchyChildrenObjectTypeEnum `queryParam:"style=form,explode=false,name=object_type"`
	// An integer that specifies the number of initial matches to ignore.
	//
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter by primary cluster ID, or **local**.
	PrimaryClusterID *string `queryParam:"style=form,explode=true,name=primary_cluster_id"`
	// Filter by SLA assignment type.
	SLAAssignment *GetMssqlHierarchyChildrenSLAAssignmentEnum `queryParam:"style=form,explode=true,name=sla_assignment"`
	// Determines whether SQL Server instances are fetched with additional privilege checks.
	SnappableStatus *GetMssqlHierarchyChildrenSnappableStatusEnum `queryParam:"style=form,explode=true,name=snappable_status"`
	// Attribute to sort the results on.
	SortBy *GetMssqlHierarchyChildrenSortByEnum `queryParam:"style=form,explode=true,name=sort_by"`
	// Sort order, either ascending or descending.
	SortOrder *GetMssqlHierarchyChildrenSortOrderEnum `queryParam:"style=form,explode=true,name=sort_order"`
}

type GetMssqlHierarchyChildrenResponse struct {
	ContentType string
	// Summary list of children objects.
	MssqlHierarchyObjectSummaryListResponse *shared.MssqlHierarchyObjectSummaryListResponse
	StatusCode                              int
	RawResponse                             *http.Response
}
