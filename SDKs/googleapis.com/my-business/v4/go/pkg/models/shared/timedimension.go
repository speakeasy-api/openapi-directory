// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TimeDimensionDayOfWeekEnum - The day of the week ("MONDAY" to "SUNDAY") this value corresponds to. Set for BREAKDOWN_DAY_OF_WEEK option.
type TimeDimensionDayOfWeekEnum string

const (
	TimeDimensionDayOfWeekEnumDayOfWeekUnspecified TimeDimensionDayOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	TimeDimensionDayOfWeekEnumMonday               TimeDimensionDayOfWeekEnum = "MONDAY"
	TimeDimensionDayOfWeekEnumTuesday              TimeDimensionDayOfWeekEnum = "TUESDAY"
	TimeDimensionDayOfWeekEnumWednesday            TimeDimensionDayOfWeekEnum = "WEDNESDAY"
	TimeDimensionDayOfWeekEnumThursday             TimeDimensionDayOfWeekEnum = "THURSDAY"
	TimeDimensionDayOfWeekEnumFriday               TimeDimensionDayOfWeekEnum = "FRIDAY"
	TimeDimensionDayOfWeekEnumSaturday             TimeDimensionDayOfWeekEnum = "SATURDAY"
	TimeDimensionDayOfWeekEnumSunday               TimeDimensionDayOfWeekEnum = "SUNDAY"
)

func (e TimeDimensionDayOfWeekEnum) ToPointer() *TimeDimensionDayOfWeekEnum {
	return &e
}

func (e *TimeDimensionDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = TimeDimensionDayOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeDimensionDayOfWeekEnum: %v", v)
	}
}

// TimeDimension - The dimension for which data is divided over.
type TimeDimension struct {
	// The day of the week ("MONDAY" to "SUNDAY") this value corresponds to. Set for BREAKDOWN_DAY_OF_WEEK option.
	DayOfWeek *TimeDimensionDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	TimeOfDay *TimeOfDay `json:"timeOfDay,omitempty"`
	// A range of time. Data will be pulled over the range as a half-open inverval (that is, [start_time, end_time)).
	TimeRange *TimeRange `json:"timeRange,omitempty"`
}
