<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel an Order
     * 
     * Request an order is canceled to prevent shipment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdResponse
     */
	public function deleteOrdersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOrdersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneordersPostResponses201ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneordersPostResponses201ContentApplication1jsonSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneordersGetResponses404ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneordersGetResponses404ContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of Orders
     * 
     * Retrieve many orders at once
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrdersResponse
     */
	public function getOrders(
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrdersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderResponseOneOfV2 = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorStandardV2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrdersErrorStandardV2', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Order Details
     * 
     * For the fastest results use the FDC provided `id` however you can use your `merchantOrderId` as the `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse
     */
	public function getOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/{id}', \OpenAPI\OpenAPI\Models\Operations\GetOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneordersGetResponses200ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * New Order
     * 
     * Error Notes&#58;
     * * When `409 Conflict` is a 'Duplicate Order' the `context` will include the FDC `id`, see samples.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOrdersOrderRequestV2 $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostOrdersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostOrdersResponse
     */
	public function postOrders(
        \OpenAPI\OpenAPI\Models\Operations\PostOrdersOrderRequestV2 $request,
        \OpenAPI\OpenAPI\Models\Operations\PostOrdersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostOrdersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostOrdersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->orderResponseV2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostOrdersOrderResponseV2', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneordersGetResponses404ContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OneordersGetResponses404ContentApplication1jsonSchema', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorStandardWithContextV2 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostOrdersErrorStandardWithContextV2', 'json');
            }
        }

        return $response;
    }
}