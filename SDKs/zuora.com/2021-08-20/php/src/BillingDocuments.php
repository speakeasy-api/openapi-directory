<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BillingDocuments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve a job of hard deleting billing document files
     * 
     * Retrieves information about an asynchronous job of permanently deleting all billing document PDF files for specific accounts.
     * 
     * **Note**: This operation can be used only if you have the Billing user permission "Hard Delete Billing Document Files" enabled. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobResponse
     */
	public function getBillingDocumentFilesDeletionJob(
        \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/billing-documents/files/deletion-jobs/{jobId}', \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentFilesDeletionJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBillingDocumentFilesDeletionJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETBillingDocumentFilesDeletionJobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List billing documents for an account
     * 
     * Retrieves the information about all billing documents associated with a specified account. The billing documents contain invoices, credit memos, and debit memos. 
     * 
     * To retrieve information about credit memos and debit memos, you must have the Invoice Settlement feature enabled. 
     * 
     * You can use query parameters to restrict the data returned in the response.
     * 
     * Examples:
     * - /billing-documents?accountId=4028905f5e4feb38015e50af9aa002d1&sort=+documentDate
     * - /billing-documents?accountId=4028905f5e4feb38015e50af9aa002d1&status=Posted
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsResponse
     */
	public function getBillingDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/billing-documents');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETBillingDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->billingDocumentQueryResponseElementType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BillingDocumentQueryResponseElementType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a job to hard delete billing document files
     * 
     * Creates an asynchronous job to permanently delete all billing document PDF files for specific accounts. 
     * 
     * After the deletion job is completed, all billing document PDF files are permanently deleted. To retrieve the status of a deletion job, call [Retrieve a job of hard deleting billing document files](https://www.zuora.com/developer/api-reference/#operation/GET_BillingDocumentFilesDeletionJob).
     * 
     * **Note**: This operation can be used only if you have the Billing user permission "Hard Delete Billing Document Files" enabled. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTBillingDocumentFilesDeletionJobRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTBillingDocumentFilesDeletionJobResponse
     */
	public function postBillingDocumentFilesDeletionJob(
        \OpenAPI\OpenAPI\Models\Operations\POSTBillingDocumentFilesDeletionJobRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTBillingDocumentFilesDeletionJobResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/billing-documents/files/deletion-jobs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postBillingDocumentFilesDeletionJobRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTBillingDocumentFilesDeletionJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postBillingDocumentFilesDeletionJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTBillingDocumentFilesDeletionJobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate billing documents by account ID
     * 
     * Generates draft or posted billing documents for a specified account. You can also generate billing documents for specified subscriptions of a specified account. The billing documents contain invoices and credit memos. To generate credit memos, you must have the Invoice Settlement feature enabled.
     * 
     * **Note**: You cannot generate billing documents for cancelled or suspended subscriptions.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsResponse
     */
	public function postGenerateBillingDocuments(
        \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts/{id}/billing-documents/generate', \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postGenerateBillingDocumentType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTGenerateBillingDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateBillingDocumentResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateBillingDocumentResponseType', 'json');
            }
        }

        return $response;
    }
}