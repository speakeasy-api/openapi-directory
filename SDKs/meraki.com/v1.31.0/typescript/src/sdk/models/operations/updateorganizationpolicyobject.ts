/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateOrganizationPolicyObjectRequestBody extends SpeakeasyBase {
  /**
   * CIDR Value of a policy object (e.g. 10.11.12.1/24")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * Fully qualified domain name of policy object (e.g. "example.com")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fqdn" })
  fqdn?: string;

  /**
   * The IDs of policy object groups the policy object belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupIds" })
  groupIds?: number[];

  /**
   * IP Address of a policy object (e.g. "1.2.3.4")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  /**
   * Mask of a policy object (e.g. "255.255.0.0")
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mask" })
  mask?: string;

  /**
   * Name of a policy object, unique within the organization (alphanumeric, space, dash, or underscore characters only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateOrganizationPolicyObjectRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateOrganizationPolicyObjectRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=policyObjectId",
  })
  policyObjectId: string;
}

export class UpdateOrganizationPolicyObjectResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateOrganizationPolicyObject200ApplicationJSONObject?: Record<string, any>;
}
