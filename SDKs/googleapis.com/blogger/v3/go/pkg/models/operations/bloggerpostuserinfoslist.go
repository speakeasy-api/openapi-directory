// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BloggerPostUserInfosListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BloggerPostUserInfosListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type BloggerPostUserInfosListSecurity struct {
	Option1 *BloggerPostUserInfosListSecurityOption1 `security:"option"`
	Option2 *BloggerPostUserInfosListSecurityOption2 `security:"option"`
}

// BloggerPostUserInfosListOrderByEnum
type BloggerPostUserInfosListOrderByEnum string

const (
	BloggerPostUserInfosListOrderByEnumOrderByUnspecified BloggerPostUserInfosListOrderByEnum = "ORDER_BY_UNSPECIFIED"
	BloggerPostUserInfosListOrderByEnumPublished          BloggerPostUserInfosListOrderByEnum = "PUBLISHED"
	BloggerPostUserInfosListOrderByEnumUpdated            BloggerPostUserInfosListOrderByEnum = "UPDATED"
)

func (e BloggerPostUserInfosListOrderByEnum) ToPointer() *BloggerPostUserInfosListOrderByEnum {
	return &e
}

func (e *BloggerPostUserInfosListOrderByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER_BY_UNSPECIFIED":
		fallthrough
	case "PUBLISHED":
		fallthrough
	case "UPDATED":
		*e = BloggerPostUserInfosListOrderByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BloggerPostUserInfosListOrderByEnum: %v", v)
	}
}

type BloggerPostUserInfosListStatusEnum string

const (
	BloggerPostUserInfosListStatusEnumLive        BloggerPostUserInfosListStatusEnum = "LIVE"
	BloggerPostUserInfosListStatusEnumDraft       BloggerPostUserInfosListStatusEnum = "DRAFT"
	BloggerPostUserInfosListStatusEnumScheduled   BloggerPostUserInfosListStatusEnum = "SCHEDULED"
	BloggerPostUserInfosListStatusEnumSoftTrashed BloggerPostUserInfosListStatusEnum = "SOFT_TRASHED"
)

func (e BloggerPostUserInfosListStatusEnum) ToPointer() *BloggerPostUserInfosListStatusEnum {
	return &e
}

func (e *BloggerPostUserInfosListStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIVE":
		fallthrough
	case "DRAFT":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "SOFT_TRASHED":
		*e = BloggerPostUserInfosListStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BloggerPostUserInfosListStatusEnum: %v", v)
	}
}

// BloggerPostUserInfosListViewEnum
type BloggerPostUserInfosListViewEnum string

const (
	BloggerPostUserInfosListViewEnumViewTypeUnspecified BloggerPostUserInfosListViewEnum = "VIEW_TYPE_UNSPECIFIED"
	BloggerPostUserInfosListViewEnumReader              BloggerPostUserInfosListViewEnum = "READER"
	BloggerPostUserInfosListViewEnumAuthor              BloggerPostUserInfosListViewEnum = "AUTHOR"
	BloggerPostUserInfosListViewEnumAdmin               BloggerPostUserInfosListViewEnum = "ADMIN"
)

func (e BloggerPostUserInfosListViewEnum) ToPointer() *BloggerPostUserInfosListViewEnum {
	return &e
}

func (e *BloggerPostUserInfosListViewEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "READER":
		fallthrough
	case "AUTHOR":
		fallthrough
	case "ADMIN":
		*e = BloggerPostUserInfosListViewEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BloggerPostUserInfosListViewEnum: %v", v)
	}
}

type BloggerPostUserInfosListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt    *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	BlogID string          `pathParam:"style=simple,explode=false,name=blogId"`
	// JSONP
	Callback    *string `queryParam:"style=form,explode=true,name=callback"`
	EndDate     *string `queryParam:"style=form,explode=true,name=endDate"`
	FetchBodies *bool   `queryParam:"style=form,explode=true,name=fetchBodies"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key        *string `queryParam:"style=form,explode=true,name=key"`
	Labels     *string `queryParam:"style=form,explode=true,name=labels"`
	MaxResults *int64  `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string                              `queryParam:"style=form,explode=true,name=oauth_token"`
	OrderBy    *BloggerPostUserInfosListOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	PageToken  *string                              `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string                              `queryParam:"style=form,explode=true,name=quotaUser"`
	StartDate *string                              `queryParam:"style=form,explode=true,name=startDate"`
	Status    []BloggerPostUserInfosListStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string                           `queryParam:"style=form,explode=true,name=upload_protocol"`
	UserID         string                            `pathParam:"style=simple,explode=false,name=userId"`
	View           *BloggerPostUserInfosListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type BloggerPostUserInfosListResponse struct {
	ContentType string
	// Successful response
	PostUserInfosList *shared.PostUserInfosList
	StatusCode        int
	RawResponse       *http.Response
}
