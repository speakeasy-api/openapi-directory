"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import jsonpathmatcher as shared_jsonpathmatcher
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ContentMatcherMatcherEnum(str, Enum):
    r"""The type of content matcher that will be applied to the server output, compared to the content string when the check is run."""
    CONTENT_MATCHER_OPTION_UNSPECIFIED = 'CONTENT_MATCHER_OPTION_UNSPECIFIED'
    CONTAINS_STRING = 'CONTAINS_STRING'
    NOT_CONTAINS_STRING = 'NOT_CONTAINS_STRING'
    MATCHES_REGEX = 'MATCHES_REGEX'
    NOT_MATCHES_REGEX = 'NOT_MATCHES_REGEX'
    MATCHES_JSON_PATH = 'MATCHES_JSON_PATH'
    NOT_MATCHES_JSON_PATH = 'NOT_MATCHES_JSON_PATH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContentMatcher:
    r"""Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching."""
    
    content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content'), 'exclude': lambda f: f is None }})
    r"""String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed."""  
    json_path_matcher: Optional[shared_jsonpathmatcher.JSONPathMatcher] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonPathMatcher'), 'exclude': lambda f: f is None }})
    r"""Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH."""  
    matcher: Optional[ContentMatcherMatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matcher'), 'exclude': lambda f: f is None }})
    r"""The type of content matcher that will be applied to the server output, compared to the content string when the check is run."""  
    