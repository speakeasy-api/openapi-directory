"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetPagesbyContentTypeRequest:
    
    builder_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'builderId', 'style': 'simple', 'explode': False }})
    r"""Builder ID specified in the settings of the CMS app."""  
    content_type: str = dataclasses.field(metadata={'path_param': { 'field_name': 'content-type', 'style': 'simple', 'explode': False }})
    r"""Content Type identifier defined in the FastStore project."""  
    filters_field: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filters[{field}]', 'style': 'form', 'explode': True }})
    r"""Filter results by a property of the page (e.g., `filters[status]`) or by a nested custom field of the `parameters` object (e.g., `filters[parameters.collection.sort]`).
    *Replace {field} with the desired property.*
    """  
    release_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'releaseId', 'style': 'form', 'explode': True }})
    r"""Release ID presented in the URL path of a CMS preview."""  
    version_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'versionId', 'style': 'form', 'explode': True }})
    r"""Version ID presented in the URL path of a CMS preview."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPagesbyContentType200ApplicationJSONDataSections:
    r"""Object with data about a specific section."""
    
    data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Custom field values of the Section. Varies depending on the Section schema defined in the FastStore project."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Section ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Section name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPagesbyContentType200ApplicationJSONData:
    r"""Object with data from a specific page."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Document ID presented in the URL path of a CMS preview."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the page created via the CMS interface."""  
    parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""Object with the configuration values of a `configurationSchemaSets` tab. Varies depending on the Content Type schema defined in the FastStore project."""  
    sections: Optional[list[GetPagesbyContentType200ApplicationJSONDataSections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sections'), 'exclude': lambda f: f is None }})
    r"""Sections that compose the page."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of the page."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Name of the Content Type defined in the FastStore project."""  
    version_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionId'), 'exclude': lambda f: f is None }})
    r"""Version ID."""  
    version_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versionStatus'), 'exclude': lambda f: f is None }})
    r"""Version status."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPagesbyContentType200ApplicationJSON:
    r"""OK"""
    
    data: Optional[list[GetPagesbyContentType200ApplicationJSONData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Array with data from all pages of the given Content Type."""  
    has_next_page: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasNextPage'), 'exclude': lambda f: f is None }})
    r"""Indicates if there are more items to fetch."""  
    total_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalItems'), 'exclude': lambda f: f is None }})
    r"""Total number of results."""  
    

@dataclasses.dataclass
class GetPagesbyContentTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_pagesby_content_type_200_application_json_object: Optional[GetPagesbyContentType200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    