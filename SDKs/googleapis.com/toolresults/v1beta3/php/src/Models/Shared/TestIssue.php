<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TestIssue - An issue detected occurring during a test execution.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TestIssue
{
    /**
     * Category of issue. Required.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestIssueCategoryEnum $category
     */
	#[\JMS\Serializer\Annotation\SerializedName('category')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestIssueCategoryEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestIssueCategoryEnum $category = null;
    
    /**
     * A brief human-readable message describing the issue. Required.
     * 
     * @var ?string $errorMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('errorMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $errorMessage = null;
    
    /**
     * Severity of issue. Required.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestIssueSeverityEnum $severity
     */
	#[\JMS\Serializer\Annotation\SerializedName('severity')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestIssueSeverityEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestIssueSeverityEnum $severity = null;
    
    /**
     * A stacktrace.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StackTrace $stackTrace
     */
	#[\JMS\Serializer\Annotation\SerializedName('stackTrace')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StackTrace')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StackTrace $stackTrace = null;
    
    /**
     * Type of issue. Required.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TestIssueTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TestIssueTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TestIssueTypeEnum $type = null;
    
    /**
     *  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Any $warning
     */
	#[\JMS\Serializer\Annotation\SerializedName('warning')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Any')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Any $warning = null;
    
	public function __construct()
	{
		$this->category = null;
		$this->errorMessage = null;
		$this->severity = null;
		$this->stackTrace = null;
		$this->type = null;
		$this->warning = null;
	}
}
