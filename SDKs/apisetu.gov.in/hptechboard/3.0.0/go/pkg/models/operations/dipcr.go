// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DipcrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DipcrRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll Number
	RollNo string `json:"RollNo"`
}

// DipcrRequestBodyFormatEnum - The format of the certificate in response.
type DipcrRequestBodyFormatEnum string

const (
	DipcrRequestBodyFormatEnumPdf DipcrRequestBodyFormatEnum = "pdf"
)

func (e DipcrRequestBodyFormatEnum) ToPointer() *DipcrRequestBodyFormatEnum {
	return &e
}

func (e *DipcrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = DipcrRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DipcrRequestBodyFormatEnum: %v", v)
	}
}

// DipcrRequestBody - Request format
type DipcrRequestBody struct {
	CertificateParameters *DipcrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DipcrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dipcr504ApplicationJSONErrorEnum string

const (
	Dipcr504ApplicationJSONErrorEnumGatewayTimeout Dipcr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Dipcr504ApplicationJSONErrorEnum) ToPointer() *Dipcr504ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Dipcr504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr504ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr504ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dipcr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Dipcr504ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Dipcr504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr504ApplicationJSON - Gateway timeout
type Dipcr504ApplicationJSON struct {
	Error            *Dipcr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr503ApplicationJSONErrorEnum string

const (
	Dipcr503ApplicationJSONErrorEnumServiceUnavailable Dipcr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Dipcr503ApplicationJSONErrorEnum) ToPointer() *Dipcr503ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Dipcr503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr503ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr503ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dipcr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Dipcr503ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Dipcr503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr503ApplicationJSON - Service unavailable
type Dipcr503ApplicationJSON struct {
	Error            *Dipcr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr502ApplicationJSONErrorEnum string

const (
	Dipcr502ApplicationJSONErrorEnumBadGatewy Dipcr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Dipcr502ApplicationJSONErrorEnum) ToPointer() *Dipcr502ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Dipcr502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr502ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr502ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dipcr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Dipcr502ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Dipcr502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr502ApplicationJSON - Bad gateway
type Dipcr502ApplicationJSON struct {
	Error            *Dipcr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr500ApplicationJSONErrorEnum string

const (
	Dipcr500ApplicationJSONErrorEnumInternalServerError Dipcr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Dipcr500ApplicationJSONErrorEnum) ToPointer() *Dipcr500ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Dipcr500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr500ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr500ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr500ApplicationJSONErrorDescriptionEnumInternalServerError Dipcr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Dipcr500ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Dipcr500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr500ApplicationJSON - Internal server error
type Dipcr500ApplicationJSON struct {
	Error            *Dipcr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr404ApplicationJSONErrorEnum string

const (
	Dipcr404ApplicationJSONErrorEnumRecordNotFound Dipcr404ApplicationJSONErrorEnum = "record_not_found"
	Dipcr404ApplicationJSONErrorEnumURLNotFound    Dipcr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Dipcr404ApplicationJSONErrorEnum) ToPointer() *Dipcr404ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dipcr404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr404ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr404ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dipcr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dipcr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dipcr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Dipcr404ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dipcr404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr404ApplicationJSON - No record found
type Dipcr404ApplicationJSON struct {
	Error            *Dipcr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr401ApplicationJSONErrorEnum string

const (
	Dipcr401ApplicationJSONErrorEnumInvalidAuthentication Dipcr401ApplicationJSONErrorEnum = "invalid_authentication"
	Dipcr401ApplicationJSONErrorEnumInvalidAuthorization  Dipcr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Dipcr401ApplicationJSONErrorEnum) ToPointer() *Dipcr401ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dipcr401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr401ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr401ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dipcr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dipcr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dipcr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Dipcr401ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dipcr401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr401ApplicationJSON - Unauthorized access
type Dipcr401ApplicationJSON struct {
	Error            *Dipcr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dipcr400ApplicationJSONErrorEnum string

const (
	Dipcr400ApplicationJSONErrorEnumMissingParameter Dipcr400ApplicationJSONErrorEnum = "missing_parameter"
	Dipcr400ApplicationJSONErrorEnumInvalidParameter Dipcr400ApplicationJSONErrorEnum = "invalid_parameter"
	Dipcr400ApplicationJSONErrorEnumInvalidFormat    Dipcr400ApplicationJSONErrorEnum = "invalid_format"
	Dipcr400ApplicationJSONErrorEnumInvalidTxnid     Dipcr400ApplicationJSONErrorEnum = "invalid_txnid"
	Dipcr400ApplicationJSONErrorEnumInvalidConsentid Dipcr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Dipcr400ApplicationJSONErrorEnum) ToPointer() *Dipcr400ApplicationJSONErrorEnum {
	return &e
}

func (e *Dipcr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dipcr400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr400ApplicationJSONErrorEnum: %v", v)
	}
}

type Dipcr400ApplicationJSONErrorDescriptionEnum string

const (
	Dipcr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dipcr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dipcr400ApplicationJSONErrorDescriptionEnumBadRequest                              Dipcr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dipcr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dipcr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dipcr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dipcr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dipcr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dipcr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Dipcr400ApplicationJSONErrorDescriptionEnum) ToPointer() *Dipcr400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Dipcr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dipcr400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Dipcr400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Dipcr400ApplicationJSON - Bad request
type Dipcr400ApplicationJSON struct {
	Error            *Dipcr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dipcr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DipcrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dipcr400ApplicationJSONObject *Dipcr400ApplicationJSON
	// Unauthorized access
	Dipcr401ApplicationJSONObject *Dipcr401ApplicationJSON
	// No record found
	Dipcr404ApplicationJSONObject *Dipcr404ApplicationJSON
	// Internal server error
	Dipcr500ApplicationJSONObject *Dipcr500ApplicationJSON
	// Bad gateway
	Dipcr502ApplicationJSONObject *Dipcr502ApplicationJSON
	// Service unavailable
	Dipcr503ApplicationJSONObject *Dipcr503ApplicationJSON
	// Gateway timeout
	Dipcr504ApplicationJSONObject *Dipcr504ApplicationJSON
}
