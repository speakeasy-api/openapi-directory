/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Rate - Information on the price of the room, other components of the room (such as breakfast, lunch or a welcome drink) and the cancellation policies that apply.
 */
public class Rate {
    @JsonProperty("cancellationPolicies")
    public CancellationPolicy[] cancellationPolicies;
    public Rate withCancellationPolicies(CancellationPolicy[] cancellationPolicies) {
        this.cancellationPolicies = cancellationPolicies;
        return this;
    }
    
    @JsonProperty("components")
    public RateComponent[] components;
    public Rate withComponents(RateComponent[] components) {
        this.components = components;
        return this;
    }
    
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("end")
    public LocalDate end;
    public Rate withEnd(LocalDate end) {
        this.end = end;
        return this;
    }
    
    /**
     * Essential information on an agreement with a hotel.
     */
    @JsonProperty("hotelAgreement")
    public HotelAgreementStub hotelAgreement;
    public Rate withHotelAgreement(HotelAgreementStub hotelAgreement) {
        this.hotelAgreement = hotelAgreement;
        return this;
    }
    
    /**
     * Maximum number of adults included in the rate.
     */
    @JsonProperty("maxOccupancy")
    public Long maxOccupancy;
    public Rate withMaxOccupancy(Long maxOccupancy) {
        this.maxOccupancy = maxOccupancy;
        return this;
    }
    
    @JsonProperty("rateId")
    public String rateId;
    public Rate withRateId(String rateId) {
        this.rateId = rateId;
        return this;
    }
    
    /**
     * The rate plan ID that is attached to this rate. Each rate plan ID can specify a unique combination of a cancellation policy and a meal plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratePlanId")
    public Long ratePlanId;
    public Rate withRatePlanId(Long ratePlanId) {
        this.ratePlanId = ratePlanId;
        return this;
    }
    
    /**
     * The public retail rate you should quote and charge your guest. You're not allowed to quote or charge an amount lower than this if your website or app is publicly accessible.
     */
    @JsonProperty("retailRate")
    public RateRetailRate retailRate;
    public Rate withRetailRate(RateRetailRate retailRate) {
        this.retailRate = retailRate;
        return this;
    }
    
    /**
     * Amount of rooms which can be sold for this occupancy level and room type at this rate price.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomsSellable")
    public Double roomsSellable;
    public Rate withRoomsSellable(Double roomsSellable) {
        this.roomsSellable = roomsSellable;
        return this;
    }
    
    /**
     * The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.
     */
    @JsonProperty("sellerCommissionPercentage")
    public Float sellerCommissionPercentage;
    public Rate withSellerCommissionPercentage(Float sellerCommissionPercentage) {
        this.sellerCommissionPercentage = sellerCommissionPercentage;
        return this;
    }
    
    /**
     * This is the amount payable to the hotel, which Impala will collect from you on the hotel's behalf. The Impala fee will be requested in addition to this, and also documented in a VAT invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sellerToImpalaPayment")
    public Money sellerToImpalaPayment;
    public Rate withSellerToImpalaPayment(Money sellerToImpalaPayment) {
        this.sellerToImpalaPayment = sellerToImpalaPayment;
        return this;
    }
    
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start")
    public LocalDate start;
    public Rate withStart(LocalDate start) {
        this.start = start;
        return this;
    }
    
}
