/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CorsPolicy } from "./corspolicy";
import { Duration } from "./duration";
import { HttpFaultInjection } from "./httpfaultinjection";
import { HttpRetryPolicy } from "./httpretrypolicy";
import { RequestMirrorPolicy } from "./requestmirrorpolicy";
import { UrlRewrite } from "./urlrewrite";
import { WeightedBackendService } from "./weightedbackendservice";
import { Expose, Type } from "class-transformer";

export class HttpRouteAction extends SpeakeasyBase {
  /**
   * The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "corsPolicy" })
  @Type(() => CorsPolicy)
  corsPolicy?: CorsPolicy;

  /**
   * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "faultInjectionPolicy" })
  @Type(() => HttpFaultInjection)
  faultInjectionPolicy?: HttpFaultInjection;

  /**
   * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxStreamDuration" })
  @Type(() => Duration)
  maxStreamDuration?: Duration;

  /**
   * A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer doesn't wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestMirrorPolicy" })
  @Type(() => RequestMirrorPolicy)
  requestMirrorPolicy?: RequestMirrorPolicy;

  /**
   * The retry policy associates with HttpRouteRule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retryPolicy" })
  @Type(() => HttpRetryPolicy)
  retryPolicy?: HttpRetryPolicy;

  /**
   * A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeout" })
  @Type(() => Duration)
  timeout?: Duration;

  /**
   * The spec for modifying the path before sending the request to the matched backend service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlRewrite" })
  @Type(() => UrlRewrite)
  urlRewrite?: UrlRewrite;

  /**
   * A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
   */
  @SpeakeasyMetadata({ elemType: WeightedBackendService })
  @Expose({ name: "weightedBackendServices" })
  @Type(() => WeightedBackendService)
  weightedBackendServices?: WeightedBackendService[];
}
