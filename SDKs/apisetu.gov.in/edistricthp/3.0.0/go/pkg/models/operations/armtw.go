// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ArmtwSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type ArmtwRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// ArmtwRequestBodyFormatEnum - The format of the certificate in response.
type ArmtwRequestBodyFormatEnum string

const (
	ArmtwRequestBodyFormatEnumPdf ArmtwRequestBodyFormatEnum = "pdf"
)

func (e *ArmtwRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ArmtwRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArmtwRequestBodyFormatEnum: %s", s)
	}
}

// ArmtwRequestBody - Request format
type ArmtwRequestBody struct {
	CertificateParameters *ArmtwRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ArmtwRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type ArmtwRequest struct {
	// Request format
	Request  *ArmtwRequestBody `request:"mediaType=application/json"`
	Security ArmtwSecurity
}

type Armtw504ApplicationJSONErrorEnum string

const (
	Armtw504ApplicationJSONErrorEnumGatewayTimeout Armtw504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Armtw504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Armtw504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw504ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw504ApplicationJSONErrorDescriptionEnum string

const (
	Armtw504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Armtw504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Armtw504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Armtw504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw504ApplicationJSON - Gateway timeout
type Armtw504ApplicationJSON struct {
	Error            *Armtw504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw503ApplicationJSONErrorEnum string

const (
	Armtw503ApplicationJSONErrorEnumServiceUnavailable Armtw503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Armtw503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Armtw503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw503ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw503ApplicationJSONErrorDescriptionEnum string

const (
	Armtw503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Armtw503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Armtw503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Armtw503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw503ApplicationJSON - Service unavailable
type Armtw503ApplicationJSON struct {
	Error            *Armtw503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw502ApplicationJSONErrorEnum string

const (
	Armtw502ApplicationJSONErrorEnumBadGatewy Armtw502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Armtw502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Armtw502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw502ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw502ApplicationJSONErrorDescriptionEnum string

const (
	Armtw502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Armtw502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Armtw502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Armtw502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw502ApplicationJSON - Bad gateway
type Armtw502ApplicationJSON struct {
	Error            *Armtw502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw500ApplicationJSONErrorEnum string

const (
	Armtw500ApplicationJSONErrorEnumInternalServerError Armtw500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Armtw500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Armtw500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw500ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw500ApplicationJSONErrorDescriptionEnum string

const (
	Armtw500ApplicationJSONErrorDescriptionEnumInternalServerError Armtw500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Armtw500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Armtw500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw500ApplicationJSON - Internal server error
type Armtw500ApplicationJSON struct {
	Error            *Armtw500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw404ApplicationJSONErrorEnum string

const (
	Armtw404ApplicationJSONErrorEnumRecordNotFound Armtw404ApplicationJSONErrorEnum = "record_not_found"
	Armtw404ApplicationJSONErrorEnumURLNotFound    Armtw404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Armtw404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Armtw404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw404ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw404ApplicationJSONErrorDescriptionEnum string

const (
	Armtw404ApplicationJSONErrorDescriptionEnumNoRecordFound               Armtw404ApplicationJSONErrorDescriptionEnum = "No record found"
	Armtw404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Armtw404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Armtw404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Armtw404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw404ApplicationJSON - No record found
type Armtw404ApplicationJSON struct {
	Error            *Armtw404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw401ApplicationJSONErrorEnum string

const (
	Armtw401ApplicationJSONErrorEnumInvalidAuthentication Armtw401ApplicationJSONErrorEnum = "invalid_authentication"
	Armtw401ApplicationJSONErrorEnumInvalidAuthorization  Armtw401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Armtw401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Armtw401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw401ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw401ApplicationJSONErrorDescriptionEnum string

const (
	Armtw401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Armtw401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Armtw401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Armtw401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Armtw401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Armtw401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw401ApplicationJSON - Unauthorized access
type Armtw401ApplicationJSON struct {
	Error            *Armtw401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Armtw400ApplicationJSONErrorEnum string

const (
	Armtw400ApplicationJSONErrorEnumMissingParameter Armtw400ApplicationJSONErrorEnum = "missing_parameter"
	Armtw400ApplicationJSONErrorEnumInvalidParameter Armtw400ApplicationJSONErrorEnum = "invalid_parameter"
	Armtw400ApplicationJSONErrorEnumInvalidFormat    Armtw400ApplicationJSONErrorEnum = "invalid_format"
	Armtw400ApplicationJSONErrorEnumInvalidTxnid     Armtw400ApplicationJSONErrorEnum = "invalid_txnid"
	Armtw400ApplicationJSONErrorEnumInvalidConsentid Armtw400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Armtw400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Armtw400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw400ApplicationJSONErrorEnum: %s", s)
	}
}

type Armtw400ApplicationJSONErrorDescriptionEnum string

const (
	Armtw400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Armtw400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Armtw400ApplicationJSONErrorDescriptionEnumBadRequest                              Armtw400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Armtw400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Armtw400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Armtw400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Armtw400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Armtw400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Armtw400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Armtw400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Armtw400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Armtw400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Armtw400ApplicationJSON - Bad request
type Armtw400ApplicationJSON struct {
	Error            *Armtw400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Armtw400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ArmtwResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Armtw400ApplicationJSONObject *Armtw400ApplicationJSON
	// Unauthorized access
	Armtw401ApplicationJSONObject *Armtw401ApplicationJSON
	// No record found
	Armtw404ApplicationJSONObject *Armtw404ApplicationJSON
	// Internal server error
	Armtw500ApplicationJSONObject *Armtw500ApplicationJSON
	// Bad gateway
	Armtw502ApplicationJSONObject *Armtw502ApplicationJSON
	// Service unavailable
	Armtw503ApplicationJSONObject *Armtw503ApplicationJSON
	// Gateway timeout
	Armtw504ApplicationJSONObject *Armtw504ApplicationJSON
}
