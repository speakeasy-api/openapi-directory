/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Permissions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a permission from a file or shared drive.
   */
  drivePermissionsDelete(
    req: operations.DrivePermissionsDeleteRequest,
    security: operations.DrivePermissionsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions/{permissionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsDeleteResponse =
        new operations.DrivePermissionsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a permission by ID.
   */
  drivePermissionsGet(
    req: operations.DrivePermissionsGetRequest,
    security: operations.DrivePermissionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions/{permissionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsGetResponse =
        new operations.DrivePermissionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permission = utils.objectToClass(
              httpRes?.data,
              shared.Permission
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the permission ID for an email address.
   */
  drivePermissionsGetIdForEmail(
    req: operations.DrivePermissionsGetIdForEmailRequest,
    security: operations.DrivePermissionsGetIdForEmailSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsGetIdForEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsGetIdForEmailRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/permissionIds/{email}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsGetIdForEmailSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsGetIdForEmailResponse =
        new operations.DrivePermissionsGetIdForEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permissionId = utils.objectToClass(
              httpRes?.data,
              shared.PermissionId
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a permission for a file or shared drive.
   */
  drivePermissionsInsert(
    req: operations.DrivePermissionsInsertRequest,
    security: operations.DrivePermissionsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "permissionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsInsertResponse =
        new operations.DrivePermissionsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permission = utils.objectToClass(
              httpRes?.data,
              shared.Permission
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists a file's or shared drive's permissions.
   */
  drivePermissionsList(
    req: operations.DrivePermissionsListRequest,
    security: operations.DrivePermissionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsListResponse =
        new operations.DrivePermissionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permissionList = utils.objectToClass(
              httpRes?.data,
              shared.PermissionList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a permission using patch semantics.
   */
  drivePermissionsPatch(
    req: operations.DrivePermissionsPatchRequest,
    security: operations.DrivePermissionsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions/{permissionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "permissionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsPatchResponse =
        new operations.DrivePermissionsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permission = utils.objectToClass(
              httpRes?.data,
              shared.Permission
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a permission.
   */
  drivePermissionsUpdate(
    req: operations.DrivePermissionsUpdateRequest,
    security: operations.DrivePermissionsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DrivePermissionsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DrivePermissionsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/files/{fileId}/permissions/{permissionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "permissionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DrivePermissionsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DrivePermissionsUpdateResponse =
        new operations.DrivePermissionsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permission = utils.objectToClass(
              httpRes?.data,
              shared.Permission
            );
          }
          break;
      }

      return res;
    });
  }
}
