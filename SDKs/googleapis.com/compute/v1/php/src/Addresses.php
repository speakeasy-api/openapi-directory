<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Addresses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of addresses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListResponse
     */
	public function computeAddressesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/addresses', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified address resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteResponse
     */
	public function computeAddressesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/addresses/{address}', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified address resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetResponse
     */
	public function computeAddressesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/addresses/{address}', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->address = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Address', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an address resource in the specified project by using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertResponse
     */
	public function computeAddressesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/addresses', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "address", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of addresses contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListResponse
     */
	public function computeAddressesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/addresses', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsResponse
     */
	public function computeAddressesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/addresses/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeAddressesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}