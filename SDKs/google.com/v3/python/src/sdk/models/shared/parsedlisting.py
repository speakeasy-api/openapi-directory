"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dataissuedetail as shared_dataissuedetail
from ..shared import image as shared_image
from ..shared import latlng as shared_latlng
from ..shared import localizedtext as shared_localizedtext
from ..shared import review as shared_review
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParsedListing:
    r"""A parsed listing"""
    
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""If not empty, it indicates that this listing belongs to a brand of the feed."""  
    category: Optional[list[shared_localizedtext.LocalizedText]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The partner provided category (accommodation type) of the property."""  
    data_issue_detail: Optional[list[shared_dataissuedetail.DataIssueDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataIssueDetail'), 'exclude': lambda f: f is None }})
    r"""Data issues about this listing"""  
    description: Optional[list[shared_localizedtext.LocalizedText]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the property."""  
    image: Optional[list[shared_image.Image]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Images associated with this listing, localized."""  
    imprecision_radius_meters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imprecisionRadiusMeters'), 'exclude': lambda f: f is None }})
    r"""Represents the accuracy of the location. The listing can be anywhere within the defined circular area."""  
    is_served: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isServed'), 'exclude': lambda f: f is None }})
    r"""Whether the listing can be served based on non image data alone."""  
    listing_name: Optional[list[shared_localizedtext.LocalizedText]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listingName'), 'exclude': lambda f: f is None }})
    r"""List of localized names."""  
    location: Optional[shared_latlng.LatLng] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."""  
    partner_list_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerListId'), 'exclude': lambda f: f is None }})
    r"""The list id on partner lec feed, provided by partner."""  
    region_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionCode'), 'exclude': lambda f: f is None }})
    r"""The country code where the listing is located."""  
    review: Optional[list[shared_review.Review]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review'), 'exclude': lambda f: f is None }})
    r"""Reviews associated with this listing. Each review proto has a single language attached to it."""  
    unit_attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitAttributes'), 'exclude': lambda f: f is None }})
    r"""VR List attribute."""  
    