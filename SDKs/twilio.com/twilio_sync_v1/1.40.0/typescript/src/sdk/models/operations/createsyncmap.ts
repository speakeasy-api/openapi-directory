/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateSyncMapServerList = ["https://sync.twilio.com"] as const;

export class CreateSyncMapSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateSyncMapCreateSyncMapRequest extends SpeakeasyBase {
  /**
   * How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Sync Map expires (time-to-live) and is deleted.
   */
  @SpeakeasyMetadata({ data: "form, name=CollectionTtl" })
  collectionTtl?: number;

  /**
   * An alias for `collection_ttl`. If both parameters are provided, this value is ignored.
   */
  @SpeakeasyMetadata({ data: "form, name=Ttl" })
  ttl?: number;

  /**
   * An application-defined string that uniquely identifies the resource. It can be used as an alternative to the `sid` in the URL path to address the resource.
   */
  @SpeakeasyMetadata({ data: "form, name=UniqueName" })
  uniqueName?: string;
}

export class CreateSyncMapRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateSyncMapCreateSyncMapRequest;

  /**
   * The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Sync Map in.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;
}

export class CreateSyncMapResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  syncV1ServiceSyncMap?: shared.SyncV1ServiceSyncMap;
}
