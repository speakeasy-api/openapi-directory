/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * Meeting200ApplicationXMLSettings - Meeting settings.
 */
public class Meeting200ApplicationXMLSettings {
    /**
     * Allow attendees to join the meeting from multiple devices. This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     */
    
    public Boolean allowMultipleDevices;
    public Meeting200ApplicationXMLSettings withAllowMultipleDevices(Boolean allowMultipleDevices) {
        this.allowMultipleDevices = allowMultipleDevices;
        return this;
    }
    
    /**
     * Alternative host's emails or IDs: multiple values are separated by a semicolon.
     */
    
    public String alternativeHosts;
    public Meeting200ApplicationXMLSettings withAlternativeHosts(String alternativeHosts) {
        this.alternativeHosts = alternativeHosts;
        return this;
    }
    
    /**
     * Flag to determine whether to send email notifications to alternative hosts, default value is true.
     */
    
    public Boolean alternativeHostsEmailNotification;
    public Meeting200ApplicationXMLSettings withAlternativeHostsEmailNotification(Boolean alternativeHostsEmailNotification) {
        this.alternativeHostsEmailNotification = alternativeHostsEmailNotification;
        return this;
    }
    
    /**
     * Enable registration and set approval for the registration. Note that this feature requires the host to be of **Licensed** user type. **Registration cannot be enabled for a basic user.** &lt;br&gt;&lt;br&gt;
     * 
     * `0` - Automatically approve.&lt;br&gt;`1` - Manually approve.&lt;br&gt;`2` - No registration required.
     */
    
    public Meeting200ApplicationXMLSettingsApprovalTypeEnum approvalType;
    public Meeting200ApplicationXMLSettings withApprovalType(Meeting200ApplicationXMLSettingsApprovalTypeEnum approvalType) {
        this.approvalType = approvalType;
        return this;
    }
    
    /**
     * Approve or block users from specific regions/countries from joining this meeting. 
     * 
     */
    
    public Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions;
    public Meeting200ApplicationXMLSettings withApprovedOrDeniedCountriesOrRegions(Meeting200ApplicationXMLSettingsApprovedOrDeniedCountriesOrRegions approvedOrDeniedCountriesOrRegions) {
        this.approvedOrDeniedCountriesOrRegions = approvedOrDeniedCountriesOrRegions;
        return this;
    }
    
    /**
     * Determine how participants can join the audio portion of the meeting.&lt;br&gt;`both` - Both Telephony and VoIP.&lt;br&gt;`telephony` - Telephony only.&lt;br&gt;`voip` - VoIP only.
     */
    
    public Meeting200ApplicationXMLSettingsAudioEnum audio;
    public Meeting200ApplicationXMLSettings withAudio(Meeting200ApplicationXMLSettingsAudioEnum audio) {
        this.audio = audio;
        return this;
    }
    
    /**
     * If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     */
    
    public String authenticationDomains;
    public Meeting200ApplicationXMLSettings withAuthenticationDomains(String authenticationDomains) {
        this.authenticationDomains = authenticationDomains;
        return this;
    }
    
    /**
     * The participants added here will receive unique meeting invite links and bypass authentication.
     */
    
    public Meeting200ApplicationXMLSettingsAuthenticationException[] authenticationException;
    public Meeting200ApplicationXMLSettings withAuthenticationException(Meeting200ApplicationXMLSettingsAuthenticationException[] authenticationException) {
        this.authenticationException = authenticationException;
        return this;
    }
    
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     */
    
    public String authenticationName;
    public Meeting200ApplicationXMLSettings withAuthenticationName(String authenticationName) {
        this.authenticationName = authenticationName;
        return this;
    }
    
    /**
     * Meeting authentication option id.
     */
    
    public String authenticationOption;
    public Meeting200ApplicationXMLSettings withAuthenticationOption(String authenticationOption) {
        this.authenticationOption = authenticationOption;
        return this;
    }
    
    /**
     * Automatic recording:&lt;br&gt;`local` - Record on local.&lt;br&gt;`cloud` -  Record on cloud.&lt;br&gt;`none` - Disabled.
     */
    
    public Meeting200ApplicationXMLSettingsAutoRecordingEnum autoRecording;
    public Meeting200ApplicationXMLSettings withAutoRecording(Meeting200ApplicationXMLSettingsAutoRecordingEnum autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Setting to [pre-assign breakout rooms](https://support.zoom.us/hc/en-us/articles/360032752671-Pre-assigning-participants-to-breakout-rooms#h_36f71353-4190-48a2-b999-ca129861c1f4).
     */
    
    public Meeting200ApplicationXMLSettingsBreakoutRoom breakoutRoom;
    public Meeting200ApplicationXMLSettings withBreakoutRoom(Meeting200ApplicationXMLSettingsBreakoutRoom breakoutRoom) {
        this.breakoutRoom = breakoutRoom;
        return this;
    }
    
    /**
     * Close registration after event date
     */
    
    public Boolean closeRegistration;
    public Meeting200ApplicationXMLSettings withCloseRegistration(Boolean closeRegistration) {
        this.closeRegistration = closeRegistration;
        return this;
    }
    
    /**
     * Host meeting in China.
     */
    
    public Boolean cnMeeting;
    public Meeting200ApplicationXMLSettings withCnMeeting(Boolean cnMeeting) {
        this.cnMeeting = cnMeeting;
        return this;
    }
    
    /**
     * Contact email for registration
     */
    
    public String contactEmail;
    public Meeting200ApplicationXMLSettings withContactEmail(String contactEmail) {
        this.contactEmail = contactEmail;
        return this;
    }
    
    /**
     * Contact name for registration
     */
    
    public String contactName;
    public Meeting200ApplicationXMLSettings withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }
    
    /**
     * Custom keys and values assigned to the meeting.
     */
    
    public Meeting200ApplicationXMLSettingsCustomKeys[] customKeys;
    public Meeting200ApplicationXMLSettings withCustomKeys(Meeting200ApplicationXMLSettingsCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. &lt;br&gt;&lt;br&gt;The value of this field can be one of the following:&lt;br&gt;
     * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. &lt;br&gt;
     * 
     * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
     */
    
    public Meeting200ApplicationXMLSettingsEncryptionTypeEnum encryptionType;
    public Meeting200ApplicationXMLSettings withEncryptionType(Meeting200ApplicationXMLSettingsEncryptionTypeEnum encryptionType) {
        this.encryptionType = encryptionType;
        return this;
    }
    
    /**
     * Only signed in users can join this meeting.
     * 
     * **This field is deprecated and will not be supported in the future.**  &lt;br&gt;&lt;br&gt;As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     */
    
    public Boolean enforceLogin;
    public Meeting200ApplicationXMLSettings withEnforceLogin(Boolean enforceLogin) {
        this.enforceLogin = enforceLogin;
        return this;
    }
    
    /**
     * Only signed in users with specified domains can join meetings.
     * 
     * **This field is deprecated and will not be supported in the future.**  &lt;br&gt;&lt;br&gt;As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the meeting.
     */
    
    public String enforceLoginDomains;
    public Meeting200ApplicationXMLSettings withEnforceLoginDomains(String enforceLoginDomains) {
        this.enforceLoginDomains = enforceLoginDomains;
        return this;
    }
    
    /**
     * List of global dial-in countries
     */
    
    public String[] globalDialInCountries;
    public Meeting200ApplicationXMLSettings withGlobalDialInCountries(String[] globalDialInCountries) {
        this.globalDialInCountries = globalDialInCountries;
        return this;
    }
    
    /**
     * Global Dial-in Countries/Regions
     */
    
    public Meeting200ApplicationXMLSettingsGlobalDialInNumbers[] globalDialInNumbers;
    public Meeting200ApplicationXMLSettings withGlobalDialInNumbers(Meeting200ApplicationXMLSettingsGlobalDialInNumbers[] globalDialInNumbers) {
        this.globalDialInNumbers = globalDialInNumbers;
        return this;
    }
    
    /**
     * Start video when the host joins the meeting.
     */
    
    public Boolean hostVideo;
    public Meeting200ApplicationXMLSettings withHostVideo(Boolean hostVideo) {
        this.hostVideo = hostVideo;
        return this;
    }
    
    /**
     * Host meeting in India.
     */
    
    public Boolean inMeeting;
    public Meeting200ApplicationXMLSettings withInMeeting(Boolean inMeeting) {
        this.inMeeting = inMeeting;
        return this;
    }
    
    /**
     * If the value of "join_before_host" field is set to true, this field can be used to indicate time limits within which a participant may join a meeting before a host. The value of this field can be one of the following:
     * 
     * *  `0`: Allow participant to join anytime.
     * *  `5`: Allow participant to join 5 minutes before meeting start time.
     *  * `10`: Allow participant to join 10 minutes before meeting start time.
     */
    
    public Meeting200ApplicationXMLSettingsJbhTimeEnum jbhTime;
    public Meeting200ApplicationXMLSettings withJbhTime(Meeting200ApplicationXMLSettingsJbhTimeEnum jbhTime) {
        this.jbhTime = jbhTime;
        return this;
    }
    
    /**
     * Allow participants to join the meeting before the host starts the meeting. Only used for scheduled or recurring meetings.
     */
    
    public Boolean joinBeforeHost;
    public Meeting200ApplicationXMLSettings withJoinBeforeHost(Boolean joinBeforeHost) {
        this.joinBeforeHost = joinBeforeHost;
        return this;
    }
    
    
    public Meeting200ApplicationXMLSettingsLanguageInterpretation languageInterpretation;
    public Meeting200ApplicationXMLSettings withLanguageInterpretation(Meeting200ApplicationXMLSettingsLanguageInterpretation languageInterpretation) {
        this.languageInterpretation = languageInterpretation;
        return this;
    }
    
    /**
     * `true`- Only authenticated users can join meetings.
     */
    
    public Boolean meetingAuthentication;
    public Meeting200ApplicationXMLSettings withMeetingAuthentication(Boolean meetingAuthentication) {
        this.meetingAuthentication = meetingAuthentication;
        return this;
    }
    
    /**
     * Mute participants upon entry.
     */
    
    public Boolean muteUponEntry;
    public Meeting200ApplicationXMLSettings withMuteUponEntry(Boolean muteUponEntry) {
        this.muteUponEntry = muteUponEntry;
        return this;
    }
    
    /**
     * Start video when participants join the meeting.
     */
    
    public Boolean participantVideo;
    public Meeting200ApplicationXMLSettings withParticipantVideo(Boolean participantVideo) {
        this.participantVideo = participantVideo;
        return this;
    }
    
    /**
     * Send confirmation email to registrants upon successful registration.
     */
    
    public Boolean registrantsConfirmationEmail;
    public Meeting200ApplicationXMLSettings withRegistrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
        this.registrantsConfirmationEmail = registrantsConfirmationEmail;
        return this;
    }
    
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     */
    
    public Boolean registrantsEmailNotification;
    public Meeting200ApplicationXMLSettings withRegistrantsEmailNotification(Boolean registrantsEmailNotification) {
        this.registrantsEmailNotification = registrantsEmailNotification;
        return this;
    }
    
    /**
     * Registration type. Used for recurring meeting with fixed time only. &lt;br&gt;`1` Attendees register once and can attend any of the occurrences.&lt;br&gt;`2` Attendees need to register for each occurrence to attend.&lt;br&gt;`3` Attendees register once and can choose one or more occurrences to attend.
     */
    
    public Meeting200ApplicationXMLSettingsRegistrationTypeEnum registrationType;
    public Meeting200ApplicationXMLSettings withRegistrationType(Meeting200ApplicationXMLSettingsRegistrationTypeEnum registrationType) {
        this.registrationType = registrationType;
        return this;
    }
    
    /**
     * Show social share buttons on the meeting registration page.
     * This setting only works for meetings that require [registration](https://support.zoom.us/hc/en-us/articles/211579443-Setting-up-registration-for-a-meeting).
     */
    
    public Boolean showShareButton;
    public Meeting200ApplicationXMLSettings withShowShareButton(Boolean showShareButton) {
        this.showShareButton = showShareButton;
        return this;
    }
    
    /**
     * Use a personal meeting ID. Only used for scheduled meetings and recurring meetings with no fixed time.
     */
    
    public Boolean usePmi;
    public Meeting200ApplicationXMLSettings withUsePmi(Boolean usePmi) {
        this.usePmi = usePmi;
        return this;
    }
    
    /**
     * Enable waiting room
     */
    
    public Boolean waitingRoom;
    public Meeting200ApplicationXMLSettings withWaitingRoom(Boolean waitingRoom) {
        this.waitingRoom = waitingRoom;
        return this;
    }
    
    /**
     * Add watermark when viewing a shared screen.
     */
    
    public Boolean watermark;
    public Meeting200ApplicationXMLSettings withWatermark(Boolean watermark) {
        this.watermark = watermark;
        return this;
    }
    
}
