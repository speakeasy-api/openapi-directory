/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountHolderDetails } from "./accountholderdetails";
import { AccountHolderStatus } from "./accountholderstatus";
import { ErrorFieldType } from "./errorfieldtype";
import { FieldType } from "./fieldtype";
import { KYCVerificationResult } from "./kycverificationresult";
import { Expose, Type } from "class-transformer";

/**
 * The legal entity of the account holder.
 */
export enum UpdateAccountHolderResponseLegalEntityEnum {
  Business = "Business",
  Individual = "Individual",
  NonProfit = "NonProfit",
}

/**
 * OK - the request has succeeded.
 */
export class UpdateAccountHolderResponse extends SpeakeasyBase {
  /**
   * The code of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountHolderCode" })
  accountHolderCode?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "accountHolderDetails" })
  @Type(() => AccountHolderDetails)
  accountHolderDetails?: AccountHolderDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "accountHolderStatus" })
  @Type(() => AccountHolderStatus)
  accountHolderStatus?: AccountHolderStatus;

  /**
   * The description of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
   */
  @SpeakeasyMetadata({ elemType: ErrorFieldType })
  @Expose({ name: "invalidFields" })
  @Type(() => ErrorFieldType)
  invalidFields?: ErrorFieldType[];

  /**
   * The legal entity of the account holder.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legalEntity" })
  legalEntity?: UpdateAccountHolderResponseLegalEntityEnum;

  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pspReference" })
  pspReference?: string;

  /**
   * The result code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultCode" })
  resultCode?: string;

  /**
   * Indicates whether the request is processed asynchronously. Depending on the request's platform settings, the following scenarios may be applied:
   *
   * @remarks
   * * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received.
   * * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "submittedAsync" })
  submittedAsync?: boolean;

  /**
   * A list of the fields updated through the request.
   */
  @SpeakeasyMetadata({ elemType: FieldType })
  @Expose({ name: "updatedFields" })
  @Type(() => FieldType)
  updatedFields?: FieldType[];

  @SpeakeasyMetadata()
  @Expose({ name: "verification" })
  @Type(() => KYCVerificationResult)
  verification?: KYCVerificationResult;
}
