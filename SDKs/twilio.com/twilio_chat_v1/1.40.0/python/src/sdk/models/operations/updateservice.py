"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import chat_v1_service as shared_chat_v1_service
from enum import Enum
from typing import Optional

UPDATE_SERVICE_SERVERS = [
	"https://chat.twilio.com",
]


@dataclasses.dataclass
class UpdateServiceSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateServiceUpdateServiceRequestWebhookMethodEnum(str, Enum):
    r"""The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelAddMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_add.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelAddedMethodEnum(str, Enum):
    r"""The URL of the webhook to call in response to the `on_channel_added` event`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_destroy.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdateMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_update.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdatedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_updated.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMemberAddMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_member_add.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMemberAddedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_channel_updated.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMemberRemoveMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_member_remove.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMemberRemovedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_member_removed.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageRemoveMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_message_remove.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageRemovedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_message_removed.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageSendMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_message_send.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageSentMethodEnum(str, Enum):
    r"""The URL of the webhook to call in response to the `on_message_sent` event`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdateMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_message_update.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdatedMethodEnum(str, Enum):
    r"""The HTTP method to use when calling the `webhooks.on_message_updated.url`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateServiceUpdateServiceRequest:
    
    consumption_report_interval: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConsumptionReportInterval' }})
    r"""DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints."""  
    default_channel_creator_role_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DefaultChannelCreatorRoleSid' }})
    r"""The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details."""  
    default_channel_role_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DefaultChannelRoleSid' }})
    r"""The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details."""  
    default_service_role_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DefaultServiceRoleSid' }})
    r"""The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you create to describe the resource. It can be up to 64 characters long."""  
    limits_channel_members: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Limits.ChannelMembers' }})
    r"""The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000."""  
    limits_user_channels: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Limits.UserChannels' }})
    r"""The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000."""  
    notifications_added_to_channel_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.AddedToChannel.Enabled' }})
    r"""Whether to send a notification when a member is added to a channel. Can be: `true` or `false` and the default is `false`."""  
    notifications_added_to_channel_template: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.AddedToChannel.Template' }})
    r"""The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`."""  
    notifications_invited_to_channel_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.InvitedToChannel.Enabled' }})
    r"""Whether to send a notification when a user is invited to a channel. Can be: `true` or `false` and the default is `false`."""  
    notifications_invited_to_channel_template: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.InvitedToChannel.Template' }})
    r"""The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`."""  
    notifications_new_message_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.NewMessage.Enabled' }})
    r"""Whether to send a notification when a new message is added to a channel. Can be: `true` or `false` and the default is `false`."""  
    notifications_new_message_template: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.NewMessage.Template' }})
    r"""The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`."""  
    notifications_removed_from_channel_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.RemovedFromChannel.Enabled' }})
    r"""Whether to send a notification to a user when they are removed from a channel. Can be: `true` or `false` and the default is `false`."""  
    notifications_removed_from_channel_template: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Notifications.RemovedFromChannel.Template' }})
    r"""The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`."""  
    post_webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PostWebhookUrl' }})
    r"""The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details."""  
    pre_webhook_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PreWebhookUrl' }})
    r"""The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details."""  
    reachability_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReachabilityEnabled' }})
    r"""Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`."""  
    read_status_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ReadStatusEnabled' }})
    r"""Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`."""  
    typing_indicator_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TypingIndicatorTimeout' }})
    r"""How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds."""  
    webhook_filters: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WebhookFilters' }})
    r"""The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details."""  
    webhook_method: Optional[UpdateServiceUpdateServiceRequestWebhookMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WebhookMethod' }})
    r"""The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details."""  
    webhooks_on_channel_add_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelAddMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelAdd.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_add.url`."""  
    webhooks_on_channel_add_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelAdd.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_add` event using the `webhooks.on_channel_add.method` HTTP method."""  
    webhooks_on_channel_added_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelAddedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelAdded.Method' }})
    r"""The URL of the webhook to call in response to the `on_channel_added` event`."""  
    webhooks_on_channel_added_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelAdded.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_added.method` HTTP method."""  
    webhooks_on_channel_destroy_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelDestroy.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_destroy.url`."""  
    webhooks_on_channel_destroy_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelDestroy.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_destroy` event using the `webhooks.on_channel_destroy.method` HTTP method."""  
    webhooks_on_channel_destroyed_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelDestroyedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelDestroyed.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_destroyed.url`."""  
    webhooks_on_channel_destroyed_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelDestroyed.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_added` event using the `webhooks.on_channel_destroyed.method` HTTP method."""  
    webhooks_on_channel_update_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdateMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelUpdate.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_update.url`."""  
    webhooks_on_channel_update_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelUpdate.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_update` event using the `webhooks.on_channel_update.method` HTTP method."""  
    webhooks_on_channel_updated_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnChannelUpdatedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelUpdated.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_updated.url`."""  
    webhooks_on_channel_updated_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnChannelUpdated.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method."""  
    webhooks_on_member_add_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMemberAddMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberAdd.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_member_add.url`."""  
    webhooks_on_member_add_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberAdd.Url' }})
    r"""The URL of the webhook to call in response to the `on_member_add` event using the `webhooks.on_member_add.method` HTTP method."""  
    webhooks_on_member_added_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMemberAddedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberAdded.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_channel_updated.url`."""  
    webhooks_on_member_added_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberAdded.Url' }})
    r"""The URL of the webhook to call in response to the `on_channel_updated` event using the `webhooks.on_channel_updated.method` HTTP method."""  
    webhooks_on_member_remove_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMemberRemoveMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberRemove.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_member_remove.url`."""  
    webhooks_on_member_remove_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberRemove.Url' }})
    r"""The URL of the webhook to call in response to the `on_member_remove` event using the `webhooks.on_member_remove.method` HTTP method."""  
    webhooks_on_member_removed_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMemberRemovedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberRemoved.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_member_removed.url`."""  
    webhooks_on_member_removed_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMemberRemoved.Url' }})
    r"""The URL of the webhook to call in response to the `on_member_removed` event using the `webhooks.on_member_removed.method` HTTP method."""  
    webhooks_on_message_remove_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageRemoveMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageRemove.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_message_remove.url`."""  
    webhooks_on_message_remove_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageRemove.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_remove` event using the `webhooks.on_message_remove.method` HTTP method."""  
    webhooks_on_message_removed_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageRemovedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageRemoved.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_message_removed.url`."""  
    webhooks_on_message_removed_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageRemoved.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_removed` event using the `webhooks.on_message_removed.method` HTTP method."""  
    webhooks_on_message_send_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageSendMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageSend.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_message_send.url`."""  
    webhooks_on_message_send_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageSend.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_send` event using the `webhooks.on_message_send.method` HTTP method."""  
    webhooks_on_message_sent_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageSentMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageSent.Method' }})
    r"""The URL of the webhook to call in response to the `on_message_sent` event`."""  
    webhooks_on_message_sent_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageSent.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_sent` event using the `webhooks.on_message_sent.method` HTTP method."""  
    webhooks_on_message_update_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdateMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageUpdate.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_message_update.url`."""  
    webhooks_on_message_update_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageUpdate.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_update` event using the `webhooks.on_message_update.method` HTTP method."""  
    webhooks_on_message_updated_method: Optional[UpdateServiceUpdateServiceRequestWebhooksOnMessageUpdatedMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageUpdated.Method' }})
    r"""The HTTP method to use when calling the `webhooks.on_message_updated.url`."""  
    webhooks_on_message_updated_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Webhooks.OnMessageUpdated.Url' }})
    r"""The URL of the webhook to call in response to the `on_message_updated` event using the `webhooks.on_message_updated.method` HTTP method."""  
    

@dataclasses.dataclass
class UpdateServiceRequest:
    
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The Twilio-provided string that uniquely identifies the Service resource to update."""  
    request_body: Optional[UpdateServiceUpdateServiceRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateServiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    chat_v1_service: Optional[shared_chat_v1_service.ChatV1Service] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    