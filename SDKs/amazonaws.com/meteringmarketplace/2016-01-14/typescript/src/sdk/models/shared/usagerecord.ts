/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UsageAllocation } from "./usageallocation";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>A <code>UsageRecord</code> indicates a quantity of usage for a given product, customer, dimension and time.</p> <p>Multiple requests with the same <code>UsageRecords</code> as input will be de-duplicated to prevent double charges.</p>
 */
export class UsageRecord extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CustomerIdentifier" })
  customerIdentifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Dimension" })
  dimension: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Quantity" })
  quantity?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;

  @SpeakeasyMetadata({ elemType: UsageAllocation })
  @Expose({ name: "UsageAllocations" })
  @Type(() => UsageAllocation)
  usageAllocations?: UsageAllocation[];
}
