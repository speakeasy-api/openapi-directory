// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ImportTableXAmzTargetEnum
type ImportTableXAmzTargetEnum string

const (
	ImportTableXAmzTargetEnumDynamoDb20120810ImportTable ImportTableXAmzTargetEnum = "DynamoDB_20120810.ImportTable"
)

func (e *ImportTableXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DynamoDB_20120810.ImportTable":
		*e = ImportTableXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportTableXAmzTargetEnum: %s", s)
	}
}

type ImportTableHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ImportTableXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ImportTableRequest struct {
	Headers ImportTableHeaders
	Request shared.ImportTableInput `request:"mediaType=application/json"`
}

type ImportTableResponse struct {
	ContentType string
	// ImportConflictException
	ImportConflictException interface{}
	// Success
	ImportTableOutput *shared.ImportTableOutput
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
