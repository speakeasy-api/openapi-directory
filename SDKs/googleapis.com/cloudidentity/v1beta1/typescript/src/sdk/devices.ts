/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Devices {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
   */
  cloudidentityDevicesCreate(
    req: operations.CloudidentityDevicesCreateRequest,
    security: operations.CloudidentityDevicesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1/devices";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createDeviceRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesCreateResponse =
        new operations.CloudidentityDevicesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Approves device to access user data.
   */
  cloudidentityDevicesDeviceUsersApprove(
    req: operations.CloudidentityDevicesDeviceUsersApproveRequest,
    security: operations.CloudidentityDevicesDeviceUsersApproveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersApproveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersApproveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:approve",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "approveDeviceUserRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesDeviceUsersApproveSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersApproveResponse =
        new operations.CloudidentityDevicesDeviceUsersApproveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Blocks device from accessing user data
   */
  cloudidentityDevicesDeviceUsersBlock(
    req: operations.CloudidentityDevicesDeviceUsersBlockRequest,
    security: operations.CloudidentityDevicesDeviceUsersBlockSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersBlockResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersBlockRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:block",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "blockDeviceUserRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesDeviceUsersBlockSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersBlockResponse =
        new operations.CloudidentityDevicesDeviceUsersBlockResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
   */
  cloudidentityDevicesDeviceUsersCancelWipe(
    req: operations.CloudidentityDevicesDeviceUsersCancelWipeRequest,
    security: operations.CloudidentityDevicesDeviceUsersCancelWipeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersCancelWipeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersCancelWipeRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:cancelWipe",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "cancelWipeDeviceUserRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityDevicesDeviceUsersCancelWipeSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersCancelWipeResponse =
        new operations.CloudidentityDevicesDeviceUsersCancelWipeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists/Searches DeviceUsers.
   */
  cloudidentityDevicesDeviceUsersList(
    req: operations.CloudidentityDevicesDeviceUsersListRequest,
    security: operations.CloudidentityDevicesDeviceUsersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/deviceUsers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesDeviceUsersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersListResponse =
        new operations.CloudidentityDevicesDeviceUsersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDeviceUsersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDeviceUsersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.
   */
  cloudidentityDevicesDeviceUsersLookup(
    req: operations.CloudidentityDevicesDeviceUsersLookupRequest,
    security: operations.CloudidentityDevicesDeviceUsersLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}:lookup",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesDeviceUsersLookupSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersLookupResponse =
        new operations.CloudidentityDevicesDeviceUsersLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupSelfDeviceUsersResponse = utils.objectToClass(
              httpRes?.data,
              shared.LookupSelfDeviceUsersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Wipes the user's account on a device.
   */
  cloudidentityDevicesDeviceUsersWipe(
    req: operations.CloudidentityDevicesDeviceUsersWipeRequest,
    security: operations.CloudidentityDevicesDeviceUsersWipeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesDeviceUsersWipeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesDeviceUsersWipeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}:wipe", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "wipeDeviceUserRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesDeviceUsersWipeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesDeviceUsersWipeResponse =
        new operations.CloudidentityDevicesDeviceUsersWipeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists/Searches devices.
   */
  cloudidentityDevicesList(
    req: operations.CloudidentityDevicesListRequest,
    security: operations.CloudidentityDevicesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityDevicesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityDevicesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1/devices";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityDevicesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityDevicesListResponse =
        new operations.CloudidentityDevicesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDevicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDevicesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
