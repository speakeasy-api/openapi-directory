"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import url as shared_url
from ..shared import urls as shared_urls
from ..shared import videosizedetails as shared_videosizedetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoAssets:
    r"""Video asset information"""
    
    fourk: Optional[shared_videosizedetails.VideoSizeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('4k'), 'exclude': lambda f: f is None }})
    r"""Video asset information"""  
    hd: Optional[shared_videosizedetails.VideoSizeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hd'), 'exclude': lambda f: f is None }})
    r"""Video asset information"""  
    preview_jpg: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preview_jpg'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    preview_mp4: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preview_mp4'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    preview_webm: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preview_webm'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    sd: Optional[shared_videosizedetails.VideoSizeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sd'), 'exclude': lambda f: f is None }})
    r"""Video asset information"""  
    thumb_jpg: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb_jpg'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    thumb_jpgs: Optional[shared_urls.Urls] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb_jpgs'), 'exclude': lambda f: f is None }})
    r"""List of URLs"""  
    thumb_mp4: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb_mp4'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    thumb_webm: Optional[shared_url.URL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumb_webm'), 'exclude': lambda f: f is None }})
    r"""URL object"""  
    web: Optional[shared_videosizedetails.VideoSizeDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web'), 'exclude': lambda f: f is None }})
    r"""Video asset information"""  
    