/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Interconnect - Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the Google Cloud network and your on-premises network. For more information, read the Dedicated Interconnect Overview.
 */
public class Interconnect {
    /**
     * Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adminEnabled")
    public Boolean adminEnabled;
    public Interconnect withAdminEnabled(Boolean adminEnabled) {
        this.adminEnabled = adminEnabled;
        return this;
    }
    
    /**
     * [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("circuitInfos")
    public InterconnectCircuitInfo[] circuitInfos;
    public Interconnect withCircuitInfos(InterconnectCircuitInfo[] circuitInfos) {
        this.circuitInfos = circuitInfos;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;
    public Interconnect withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerName")
    public String customerName;
    public Interconnect withCustomerName(String customerName) {
        this.customerName = customerName;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Interconnect withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] A list of outages expected for this Interconnect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedOutages")
    public InterconnectOutageNotification[] expectedOutages;
    public Interconnect withExpectedOutages(InterconnectOutageNotification[] expectedOutages) {
        this.expectedOutages = expectedOutages;
        return this;
    }
    
    /**
     * [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleIpAddress")
    public String googleIpAddress;
    public Interconnect withGoogleIpAddress(String googleIpAddress) {
        this.googleIpAddress = googleIpAddress;
        return this;
    }
    
    /**
     * [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleReferenceId")
    public String googleReferenceId;
    public Interconnect withGoogleReferenceId(String googleReferenceId) {
        this.googleReferenceId = googleReferenceId;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Interconnect withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interconnectAttachments")
    public String[] interconnectAttachments;
    public Interconnect withInterconnectAttachments(String[] interconnectAttachments) {
        this.interconnectAttachments = interconnectAttachments;
        return this;
    }
    
    /**
     * Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interconnectType")
    public InterconnectInterconnectTypeEnum interconnectType;
    public Interconnect withInterconnectType(InterconnectInterconnectTypeEnum interconnectType) {
        this.interconnectType = interconnectType;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#interconnect for interconnects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Interconnect withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labelFingerprint")
    public String labelFingerprint;
    public Interconnect withLabelFingerprint(String labelFingerprint) {
        this.labelFingerprint = labelFingerprint;
        return this;
    }
    
    /**
     * Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Interconnect withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkType")
    public InterconnectLinkTypeEnum linkType;
    public Interconnect withLinkType(InterconnectLinkTypeEnum linkType) {
        this.linkType = linkType;
        return this;
    }
    
    /**
     * URL of the InterconnectLocation object that represents where this connection is to be provisioned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Interconnect withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Interconnect withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nocContactEmail")
    public String nocContactEmail;
    public Interconnect withNocContactEmail(String nocContactEmail) {
        this.nocContactEmail = nocContactEmail;
        return this;
    }
    
    /**
     * [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationalStatus")
    public InterconnectOperationalStatusEnum operationalStatus;
    public Interconnect withOperationalStatus(InterconnectOperationalStatusEnum operationalStatus) {
        this.operationalStatus = operationalStatus;
        return this;
    }
    
    /**
     * [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peerIpAddress")
    public String peerIpAddress;
    public Interconnect withPeerIpAddress(String peerIpAddress) {
        this.peerIpAddress = peerIpAddress;
        return this;
    }
    
    /**
     * [Output Only] Number of links actually provisioned in this interconnect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisionedLinkCount")
    public Integer provisionedLinkCount;
    public Interconnect withProvisionedLinkCount(Integer provisionedLinkCount) {
        this.provisionedLinkCount = provisionedLinkCount;
        return this;
    }
    
    /**
     * Target number of physical links in the link bundle, as requested by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedLinkCount")
    public Integer requestedLinkCount;
    public Interconnect withRequestedLinkCount(Integer requestedLinkCount) {
        this.requestedLinkCount = requestedLinkCount;
        return this;
    }
    
    /**
     * [Output Only] Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("satisfiesPzs")
    public Boolean satisfiesPzs;
    public Interconnect withSatisfiesPzs(Boolean satisfiesPzs) {
        this.satisfiesPzs = satisfiesPzs;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Interconnect withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InterconnectStateEnum state;
    public Interconnect withState(InterconnectStateEnum state) {
        this.state = state;
        return this;
    }
    
}
