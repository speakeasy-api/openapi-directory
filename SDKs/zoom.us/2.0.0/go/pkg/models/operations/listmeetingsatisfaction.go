// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/types"
)

type ListMeetingSatisfactionSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListMeetingSatisfactionRequest struct {
	// The start date for the query in “yyyy-mm-dd” format.
	From *types.Date `queryParam:"style=form,explode=true,name=from"`
	// The end date for the query in “yyyy-mm-dd” format.
	To *types.Date `queryParam:"style=form,explode=true,name=to"`
}

type ListMeetingSatisfaction200ApplicationXMLClientSatisfaction struct {
	// Date of the report.
	Date *types.Date
	// The total number of "thumbs up" received for this meeting.
	GoodCount *int64
	// The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).
	NoneCount *int64
	// The total number of "thumbs down" received for this meeting.
	NotGoodCount *int64
	// Satisfaction Percentage.
	// The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
	SatisfactionPercent *int64
}

// ListMeetingSatisfaction200ApplicationXML - **HTTP Status Code:** `200`<br>
// Client satisfaction data returned.
type ListMeetingSatisfaction200ApplicationXML struct {
	ClientSatisfaction []ListMeetingSatisfaction200ApplicationXMLClientSatisfaction
	// Start date for this report in 'yyyy-mm-dd' format.
	From *types.Date
	// End date for this report in 'yyyy-mm-dd' format.
	To *types.Date
	// The total number of records available across all pages.
	TotalRecords *int64
}

type ListMeetingSatisfaction200ApplicationJSONClientSatisfaction struct {
	// Date of the report.
	Date *types.Date `json:"date,omitempty"`
	// The total number of "thumbs up" received for this meeting.
	GoodCount *int64 `json:"good_count,omitempty"`
	// The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down).
	NoneCount *int64 `json:"none_count,omitempty"`
	// The total number of "thumbs down" received for this meeting.
	NotGoodCount *int64 `json:"not_good_count,omitempty"`
	// Satisfaction Percentage.
	// The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
	SatisfactionPercent *int64 `json:"satisfaction_percent,omitempty"`
}

// ListMeetingSatisfaction200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Client satisfaction data returned.
type ListMeetingSatisfaction200ApplicationJSON struct {
	ClientSatisfaction []ListMeetingSatisfaction200ApplicationJSONClientSatisfaction `json:"client_satisfaction,omitempty"`
	// Start date for this report in 'yyyy-mm-dd' format.
	From *types.Date `json:"from,omitempty"`
	// End date for this report in 'yyyy-mm-dd' format.
	To *types.Date `json:"to,omitempty"`
	// The total number of records available across all pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ListMeetingSatisfactionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Client satisfaction data returned.
	ListMeetingSatisfaction200ApplicationJSONObject *ListMeetingSatisfaction200ApplicationJSON
}
