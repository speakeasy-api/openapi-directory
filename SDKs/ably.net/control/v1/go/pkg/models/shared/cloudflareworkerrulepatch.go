// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CloudflareWorkerRulePatchRuleTypeEnum string

const (
	CloudflareWorkerRulePatchRuleTypeEnumHTTPCloudflareWorker CloudflareWorkerRulePatchRuleTypeEnum = "http/cloudflare-worker"
)

func (e CloudflareWorkerRulePatchRuleTypeEnum) ToPointer() *CloudflareWorkerRulePatchRuleTypeEnum {
	return &e
}

func (e *CloudflareWorkerRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/cloudflare-worker":
		*e = CloudflareWorkerRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudflareWorkerRulePatchRuleTypeEnum: %v", v)
	}
}

type CloudflareWorkerRulePatchTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type CloudflareWorkerRulePatchTarget struct {
	Headers      []CloudflareWorkerRulePatchTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                                  `json:"signingKeyId,omitempty"`
	URL          *string                                  `json:"url,omitempty"`
}

type CloudflareWorkerRulePatch struct {
	RequestMode *string                               `json:"requestMode,omitempty"`
	RuleType    CloudflareWorkerRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch                      `json:"source,omitempty"`
	Status      *string                               `json:"status,omitempty"`
	Target      *CloudflareWorkerRulePatchTarget      `json:"target,omitempty"`
}
