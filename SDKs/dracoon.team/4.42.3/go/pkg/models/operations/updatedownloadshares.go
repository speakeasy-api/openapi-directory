// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateDownloadSharesRequest struct {
	UpdateDownloadSharesBulkRequest shared.UpdateDownloadSharesBulkRequest `request:"mediaType=application/json"`
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
}

type UpdateDownloadShares400WildcardType string

const (
	UpdateDownloadShares400WildcardTypeErrorResponse                   UpdateDownloadShares400WildcardType = "ErrorResponse"
	UpdateDownloadShares400WildcardTypePasswordPolicyViolationResponse UpdateDownloadShares400WildcardType = "PasswordPolicyViolationResponse"
)

type UpdateDownloadShares400Wildcard struct {
	ErrorResponse                   *shared.ErrorResponse
	PasswordPolicyViolationResponse *shared.PasswordPolicyViolationResponse

	Type UpdateDownloadShares400WildcardType
}

func CreateUpdateDownloadShares400WildcardErrorResponse(errorResponse shared.ErrorResponse) UpdateDownloadShares400Wildcard {
	typ := UpdateDownloadShares400WildcardTypeErrorResponse

	return UpdateDownloadShares400Wildcard{
		ErrorResponse: &errorResponse,
		Type:          typ,
	}
}

func CreateUpdateDownloadShares400WildcardPasswordPolicyViolationResponse(passwordPolicyViolationResponse shared.PasswordPolicyViolationResponse) UpdateDownloadShares400Wildcard {
	typ := UpdateDownloadShares400WildcardTypePasswordPolicyViolationResponse

	return UpdateDownloadShares400Wildcard{
		PasswordPolicyViolationResponse: &passwordPolicyViolationResponse,
		Type:                            typ,
	}
}

func (u *UpdateDownloadShares400Wildcard) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorResponse := new(shared.ErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorResponse); err == nil {
		u.ErrorResponse = errorResponse
		u.Type = UpdateDownloadShares400WildcardTypeErrorResponse
		return nil
	}

	passwordPolicyViolationResponse := new(shared.PasswordPolicyViolationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordPolicyViolationResponse); err == nil {
		u.PasswordPolicyViolationResponse = passwordPolicyViolationResponse
		u.Type = UpdateDownloadShares400WildcardTypePasswordPolicyViolationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UpdateDownloadShares400Wildcard) MarshalJSON() ([]byte, error) {
	if u.ErrorResponse != nil {
		return json.Marshal(u.ErrorResponse)
	}

	if u.PasswordPolicyViolationResponse != nil {
		return json.Marshal(u.PasswordPolicyViolationResponse)
	}

	return nil, nil
}

type UpdateDownloadSharesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
