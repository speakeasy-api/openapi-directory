// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ViasNameGenderEnum - The gender.
// >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
type ViasNameGenderEnum string

const (
	ViasNameGenderEnumMale    ViasNameGenderEnum = "MALE"
	ViasNameGenderEnumFemale  ViasNameGenderEnum = "FEMALE"
	ViasNameGenderEnumUnknown ViasNameGenderEnum = "UNKNOWN"
)

func (e ViasNameGenderEnum) ToPointer() *ViasNameGenderEnum {
	return &e
}

func (e *ViasNameGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MALE":
		fallthrough
	case "FEMALE":
		fallthrough
	case "UNKNOWN":
		*e = ViasNameGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ViasNameGenderEnum: %v", v)
	}
}

type ViasName struct {
	// The first name.
	FirstName *string `json:"firstName,omitempty"`
	// The gender.
	// >The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
	Gender *ViasNameGenderEnum `json:"gender,omitempty"`
	// The name's infix, if applicable.
	// >A maximum length of twenty (20) characters is imposed.
	Infix *string `json:"infix,omitempty"`
	// The last name.
	LastName *string `json:"lastName,omitempty"`
}
