// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StandardSQLDataTypeTypeKindEnum - Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
type StandardSQLDataTypeTypeKindEnum string

const (
	StandardSQLDataTypeTypeKindEnumTypeKindUnspecified StandardSQLDataTypeTypeKindEnum = "TYPE_KIND_UNSPECIFIED"
	StandardSQLDataTypeTypeKindEnumInt64               StandardSQLDataTypeTypeKindEnum = "INT64"
	StandardSQLDataTypeTypeKindEnumBool                StandardSQLDataTypeTypeKindEnum = "BOOL"
	StandardSQLDataTypeTypeKindEnumFloat64             StandardSQLDataTypeTypeKindEnum = "FLOAT64"
	StandardSQLDataTypeTypeKindEnumString              StandardSQLDataTypeTypeKindEnum = "STRING"
	StandardSQLDataTypeTypeKindEnumBytes               StandardSQLDataTypeTypeKindEnum = "BYTES"
	StandardSQLDataTypeTypeKindEnumTimestamp           StandardSQLDataTypeTypeKindEnum = "TIMESTAMP"
	StandardSQLDataTypeTypeKindEnumDate                StandardSQLDataTypeTypeKindEnum = "DATE"
	StandardSQLDataTypeTypeKindEnumTime                StandardSQLDataTypeTypeKindEnum = "TIME"
	StandardSQLDataTypeTypeKindEnumDatetime            StandardSQLDataTypeTypeKindEnum = "DATETIME"
	StandardSQLDataTypeTypeKindEnumInterval            StandardSQLDataTypeTypeKindEnum = "INTERVAL"
	StandardSQLDataTypeTypeKindEnumGeography           StandardSQLDataTypeTypeKindEnum = "GEOGRAPHY"
	StandardSQLDataTypeTypeKindEnumNumeric             StandardSQLDataTypeTypeKindEnum = "NUMERIC"
	StandardSQLDataTypeTypeKindEnumBignumeric          StandardSQLDataTypeTypeKindEnum = "BIGNUMERIC"
	StandardSQLDataTypeTypeKindEnumJSON                StandardSQLDataTypeTypeKindEnum = "JSON"
	StandardSQLDataTypeTypeKindEnumArray               StandardSQLDataTypeTypeKindEnum = "ARRAY"
	StandardSQLDataTypeTypeKindEnumStruct              StandardSQLDataTypeTypeKindEnum = "STRUCT"
)

func (e *StandardSQLDataTypeTypeKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_KIND_UNSPECIFIED":
		fallthrough
	case "INT64":
		fallthrough
	case "BOOL":
		fallthrough
	case "FLOAT64":
		fallthrough
	case "STRING":
		fallthrough
	case "BYTES":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "DATE":
		fallthrough
	case "TIME":
		fallthrough
	case "DATETIME":
		fallthrough
	case "INTERVAL":
		fallthrough
	case "GEOGRAPHY":
		fallthrough
	case "NUMERIC":
		fallthrough
	case "BIGNUMERIC":
		fallthrough
	case "JSON":
		fallthrough
	case "ARRAY":
		fallthrough
	case "STRUCT":
		*e = StandardSQLDataTypeTypeKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StandardSQLDataTypeTypeKindEnum: %s", s)
	}
}

// StandardSQLDataType - The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSQLDataType struct {
	// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
	ArrayElementType *StandardSQLDataType   `json:"arrayElementType,omitempty"`
	StructType       *StandardSQLStructType `json:"structType,omitempty"`
	// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind *StandardSQLDataTypeTypeKindEnum `json:"typeKind,omitempty"`
}
