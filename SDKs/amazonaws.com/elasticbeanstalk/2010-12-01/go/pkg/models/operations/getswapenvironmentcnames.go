// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSwapEnvironmentCNAMEsActionEnum
type GETSwapEnvironmentCNAMEsActionEnum string

const (
	GETSwapEnvironmentCNAMEsActionEnumSwapEnvironmentCnamEs GETSwapEnvironmentCNAMEsActionEnum = "SwapEnvironmentCNAMEs"
)

func (e GETSwapEnvironmentCNAMEsActionEnum) ToPointer() *GETSwapEnvironmentCNAMEsActionEnum {
	return &e
}

func (e *GETSwapEnvironmentCNAMEsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SwapEnvironmentCNAMEs":
		*e = GETSwapEnvironmentCNAMEsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSwapEnvironmentCNAMEsActionEnum: %v", v)
	}
}

// GETSwapEnvironmentCNAMEsVersionEnum
type GETSwapEnvironmentCNAMEsVersionEnum string

const (
	GETSwapEnvironmentCNAMEsVersionEnumTwoThousandAndTen1201 GETSwapEnvironmentCNAMEsVersionEnum = "2010-12-01"
)

func (e GETSwapEnvironmentCNAMEsVersionEnum) ToPointer() *GETSwapEnvironmentCNAMEsVersionEnum {
	return &e
}

func (e *GETSwapEnvironmentCNAMEsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-12-01":
		*e = GETSwapEnvironmentCNAMEsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSwapEnvironmentCNAMEsVersionEnum: %v", v)
	}
}

type GETSwapEnvironmentCNAMEsRequest struct {
	Action GETSwapEnvironmentCNAMEsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The ID of the destination environment.</p> <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p>
	DestinationEnvironmentID *string `queryParam:"style=form,explode=true,name=DestinationEnvironmentId"`
	// <p>The name of the destination environment.</p> <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p>
	DestinationEnvironmentName *string `queryParam:"style=form,explode=true,name=DestinationEnvironmentName"`
	// <p>The ID of the source environment.</p> <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p>
	SourceEnvironmentID *string `queryParam:"style=form,explode=true,name=SourceEnvironmentId"`
	// <p>The name of the source environment.</p> <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p>
	SourceEnvironmentName *string                             `queryParam:"style=form,explode=true,name=SourceEnvironmentName"`
	Version               GETSwapEnvironmentCNAMEsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSwapEnvironmentCNAMEsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
