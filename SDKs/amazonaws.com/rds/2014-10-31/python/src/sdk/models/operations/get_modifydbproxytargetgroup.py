"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyDBProxyTargetGroupActionEnum(str, Enum):
    MODIFY_DB_PROXY_TARGET_GROUP = 'ModifyDBProxyTargetGroup'


@dataclasses.dataclass
class GETModifyDBProxyTargetGroupConnectionPoolConfig:
    r"""Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>."""
    
    connection_borrow_timeout: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConnectionBorrowTimeout' }})  
    init_query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'InitQuery' }})  
    max_connections_percent: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxConnectionsPercent' }})  
    max_idle_connections_percent: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxIdleConnectionsPercent' }})  
    session_pinning_filters: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SessionPinningFilters' }})  
    
class GETModifyDBProxyTargetGroupVersionEnum(str, Enum):
    TWO_THOUSAND_AND_FOURTEEN_10_31 = '2014-10-31'


@dataclasses.dataclass
class GETModifyDBProxyTargetGroupRequest:
    
    action: GETModifyDBProxyTargetGroupActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    db_proxy_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DBProxyName', 'style': 'form', 'explode': True }})
    r"""The name of the proxy."""  
    target_group_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'TargetGroupName', 'style': 'form', 'explode': True }})
    r"""The name of the target group to modify."""  
    version: GETModifyDBProxyTargetGroupVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    connection_pool_config: Optional[GETModifyDBProxyTargetGroupConnectionPoolConfig] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConnectionPoolConfig', 'style': 'form', 'explode': True }})
    r"""The settings that determine the size and behavior of the connection pool for the target group."""  
    new_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NewName', 'style': 'form', 'explode': True }})
    r"""The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyDBProxyTargetGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    