// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExecutionStateEnum string

const (
	ExecutionStateEnumQueued     ExecutionStateEnum = "QUEUED"
	ExecutionStateEnumInProgress ExecutionStateEnum = "IN_PROGRESS"
	ExecutionStateEnumCanceled   ExecutionStateEnum = "CANCELED"
	ExecutionStateEnumFailed     ExecutionStateEnum = "FAILED"
	ExecutionStateEnumSucceeded  ExecutionStateEnum = "SUCCEEDED"
	ExecutionStateEnumRejected   ExecutionStateEnum = "REJECTED"
	ExecutionStateEnumTimedOut   ExecutionStateEnum = "TIMED_OUT"
)

func (e *ExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "QUEUED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "CANCELED":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "TIMED_OUT":
		*e = ExecutionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionStateEnum: %s", s)
	}
}
