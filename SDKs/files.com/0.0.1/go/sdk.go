// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"//app.files.com/api/rest/v1",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

type SDK struct {
	// ActionNotificationExportResults - Operations about action_notification_export_results
	ActionNotificationExportResults *actionNotificationExportResults
	// ActionNotificationExports - Operations about action_notification_exports
	ActionNotificationExports *actionNotificationExports
	// ActionWebhookFailures - Operations about action_webhook_failures
	ActionWebhookFailures *actionWebhookFailures
	// APIKey - Operations about api_keys
	APIKey *apiKey
	// APIKeys - Operations about api_keys
	APIKeys *apiKeys
	// Apps - Operations about apps
	Apps *apps
	// As2IncomingMessages - Operations about as2_incoming_messages
	As2IncomingMessages *as2IncomingMessages
	// As2OutgoingMessages - Operations about as2_outgoing_messages
	As2OutgoingMessages *as2OutgoingMessages
	// As2Partners - Operations about as2_partners
	As2Partners *as2Partners
	// As2Stations - Operations about as2_stations
	As2Stations *as2Stations
	// AutomationRuns - Operations about automation_runs
	AutomationRuns *automationRuns
	// Automations - Operations about automations
	Automations *automations
	// BandwidthSnapshots - Operations about bandwidth_snapshots
	BandwidthSnapshots *bandwidthSnapshots
	// Behaviors - Operations about behaviors
	Behaviors *behaviors
	// BundleDownloads - Operations about bundle_downloads
	BundleDownloads *bundleDownloads
	// BundleNotifications - Operations about bundle_notifications
	BundleNotifications *bundleNotifications
	// BundleRecipients - Operations about bundle_recipients
	BundleRecipients *bundleRecipients
	// BundleRegistrations - Operations about bundle_registrations
	BundleRegistrations *bundleRegistrations
	// Bundles - Operations about bundles
	Bundles *bundles
	// Clickwraps - Operations about clickwraps
	Clickwraps *clickwraps
	// DNSRecords - Operations about dns_records
	DNSRecords *dnsRecords
	// ExternalEvents - Operations about external_events
	ExternalEvents *externalEvents
	// FileActions - Operations about file_actions
	FileActions *fileActions
	// FileCommentReactions - Operations about file_comment_reactions
	FileCommentReactions *fileCommentReactions
	// FileComments - Operations about file_comments
	FileComments *fileComments
	// FileMigrations - Operations about file_migrations
	FileMigrations *fileMigrations
	// Files - Operations about files
	Files *files
	// Folders - Operations about folders
	Folders *folders
	// FormFieldSets - Operations about form_field_sets
	FormFieldSets *formFieldSets
	// GroupUsers - Operations about group_users
	GroupUsers *groupUsers
	// Groups - Operations about groups
	Groups *groups
	// History - Operations about histories
	History *history
	// HistoryExportResults - Operations about history_export_results
	HistoryExportResults *historyExportResults
	// HistoryExports - Operations about history_exports
	HistoryExports *historyExports
	// InboxRecipients - Operations about inbox_recipients
	InboxRecipients *inboxRecipients
	// InboxRegistrations - Operations about inbox_registrations
	InboxRegistrations *inboxRegistrations
	// InboxUploads - Operations about inbox_uploads
	InboxUploads *inboxUploads
	// Invoices - Operations about invoices
	Invoices *invoices
	// IPAddresses - Operations about ip_addresses
	IPAddresses *ipAddresses
	// Locks - Operations about locks
	Locks *locks
	// MessageCommentReactions - Operations about message_comment_reactions
	MessageCommentReactions *messageCommentReactions
	// MessageComments - Operations about message_comments
	MessageComments *messageComments
	// MessageReactions - Operations about message_reactions
	MessageReactions *messageReactions
	// Messages - Operations about messages
	Messages *messages
	// Notifications - Operations about notifications
	Notifications *notifications
	// Payments - Operations about payments
	Payments *payments
	// Permissions - Operations about permissions
	Permissions *permissions
	// Priorities - Operations about priorities
	Priorities *priorities
	// Projects - Operations about projects
	Projects *projects
	// PublicKeys - Operations about public_keys
	PublicKeys *publicKeys
	// RemoteBandwidthSnapshots - Operations about remote_bandwidth_snapshots
	RemoteBandwidthSnapshots *remoteBandwidthSnapshots
	// RemoteServers - Operations about remote_servers
	RemoteServers *remoteServers
	// Requests - Operations about requests
	Requests *requests
	// Sessions - Operations about sessions
	Sessions *sessions
	// SettingsChanges - Operations about settings_changes
	SettingsChanges *settingsChanges
	// SftpHostKeys - Operations about sftp_host_keys
	SftpHostKeys *sftpHostKeys
	// Site - Operations about sites
	Site *site
	// SsoStrategies - Operations about sso_strategies
	SsoStrategies *ssoStrategies
	// Styles - Operations about styles
	Styles *styles
	// UsageDailySnapshots - Operations about usage_daily_snapshots
	UsageDailySnapshots *usageDailySnapshots
	// UsageSnapshots - Operations about usage_snapshots
	UsageSnapshots *usageSnapshots
	// User - Operations about users
	User *user
	// UserCipherUses - Operations about user_cipher_uses
	UserCipherUses *userCipherUses
	// UserRequests - Operations about user_requests
	UserRequests *userRequests
	// Users - Operations about users
	Users *users
	// WebhookTests - Operations about webhook_tests
	WebhookTests *webhookTests

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.ActionNotificationExportResults = newActionNotificationExportResults(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ActionNotificationExports = newActionNotificationExports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ActionWebhookFailures = newActionWebhookFailures(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.APIKey = newAPIKey(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.APIKeys = newAPIKeys(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Apps = newApps(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.As2IncomingMessages = newAs2IncomingMessages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.As2OutgoingMessages = newAs2OutgoingMessages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.As2Partners = newAs2Partners(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.As2Stations = newAs2Stations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AutomationRuns = newAutomationRuns(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Automations = newAutomations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BandwidthSnapshots = newBandwidthSnapshots(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Behaviors = newBehaviors(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BundleDownloads = newBundleDownloads(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BundleNotifications = newBundleNotifications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BundleRecipients = newBundleRecipients(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.BundleRegistrations = newBundleRegistrations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Bundles = newBundles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Clickwraps = newClickwraps(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.DNSRecords = newDNSRecords(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ExternalEvents = newExternalEvents(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FileActions = newFileActions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FileCommentReactions = newFileCommentReactions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FileComments = newFileComments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FileMigrations = newFileMigrations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Files = newFiles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Folders = newFolders(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FormFieldSets = newFormFieldSets(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.GroupUsers = newGroupUsers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Groups = newGroups(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.History = newHistory(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HistoryExportResults = newHistoryExportResults(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HistoryExports = newHistoryExports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InboxRecipients = newInboxRecipients(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InboxRegistrations = newInboxRegistrations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.InboxUploads = newInboxUploads(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Invoices = newInvoices(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IPAddresses = newIPAddresses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Locks = newLocks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MessageCommentReactions = newMessageCommentReactions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MessageComments = newMessageComments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.MessageReactions = newMessageReactions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Messages = newMessages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Notifications = newNotifications(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Payments = newPayments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Permissions = newPermissions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Priorities = newPriorities(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Projects = newProjects(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PublicKeys = newPublicKeys(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RemoteBandwidthSnapshots = newRemoteBandwidthSnapshots(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RemoteServers = newRemoteServers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Requests = newRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Sessions = newSessions(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.SettingsChanges = newSettingsChanges(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.SftpHostKeys = newSftpHostKeys(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Site = newSite(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.SsoStrategies = newSsoStrategies(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Styles = newStyles(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UsageDailySnapshots = newUsageDailySnapshots(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UsageSnapshots = newUsageSnapshots(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.User = newUser(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UserCipherUses = newUserCipherUses(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.UserRequests = newUserRequests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Users = newUsers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WebhookTests = newWebhookTests(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
