// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ChatSpacesMessagesCreateSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ChatSpacesMessagesCreateSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ChatSpacesMessagesCreateSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type ChatSpacesMessagesCreateSecurity struct {
	Option1 *ChatSpacesMessagesCreateSecurityOption1 `security:"option"`
	Option2 *ChatSpacesMessagesCreateSecurityOption2 `security:"option"`
	Option3 *ChatSpacesMessagesCreateSecurityOption3 `security:"option"`
}

type ChatSpacesMessagesCreatePathParams struct {
	// Required. The resource name of the space in which to create a message. Format: spaces/{space}
	Parent string `pathParam:"style=simple,explode=false,name=parent"`
}

// ChatSpacesMessagesCreateMessageReplyOptionEnum - Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.
type ChatSpacesMessagesCreateMessageReplyOptionEnum string

const (
	ChatSpacesMessagesCreateMessageReplyOptionEnumMessageReplyOptionUnspecified   ChatSpacesMessagesCreateMessageReplyOptionEnum = "MESSAGE_REPLY_OPTION_UNSPECIFIED"
	ChatSpacesMessagesCreateMessageReplyOptionEnumReplyMessageFallbackToNewThread ChatSpacesMessagesCreateMessageReplyOptionEnum = "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"
	ChatSpacesMessagesCreateMessageReplyOptionEnumReplyMessageOrFail              ChatSpacesMessagesCreateMessageReplyOptionEnum = "REPLY_MESSAGE_OR_FAIL"
)

func (e *ChatSpacesMessagesCreateMessageReplyOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MESSAGE_REPLY_OPTION_UNSPECIFIED":
		fallthrough
	case "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD":
		fallthrough
	case "REPLY_MESSAGE_OR_FAIL":
		*e = ChatSpacesMessagesCreateMessageReplyOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatSpacesMessagesCreateMessageReplyOptionEnum: %s", s)
	}
}

type ChatSpacesMessagesCreateQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Optional. A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
	MessageID *string `queryParam:"style=form,explode=true,name=messageId"`
	// Optional. Specifies whether a message starts a thread or replies to one. Only supported in named spaces.
	MessageReplyOption *ChatSpacesMessagesCreateMessageReplyOptionEnum `queryParam:"style=form,explode=true,name=messageReplyOption"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Optional. A unique request ID for this message. Specifying an existing request ID returns the message created with that ID instead of creating a new message.
	RequestID *string `queryParam:"style=form,explode=true,name=requestId"`
	// Optional. Deprecated: Use thread.thread_key instead. Opaque thread identifier. To start or add to a thread, create a message and specify a `threadKey` or the thread.name. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
	ThreadKey *string `queryParam:"style=form,explode=true,name=threadKey"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
}

type ChatSpacesMessagesCreateRequest struct {
	PathParams  ChatSpacesMessagesCreatePathParams
	QueryParams ChatSpacesMessagesCreateQueryParams
	Request     *shared.MessageInput `request:"mediaType=application/json"`
	Security    ChatSpacesMessagesCreateSecurity
}

type ChatSpacesMessagesCreateResponse struct {
	ContentType string
	// Successful response
	Message     *shared.Message
	StatusCode  int
	RawResponse *http.Response
}
