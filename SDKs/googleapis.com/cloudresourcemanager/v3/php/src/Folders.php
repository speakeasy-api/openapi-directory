<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Folders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a folder in the resource hierarchy. Returns an `Operation` which can be used to track the progress of the folder creation workflow. Upon success, the `Operation.response` field will be populated with the created Folder. In order to succeed, the addition of this new folder must not violate the folder naming, height, or fanout constraints. + The folder's `display_name` must be distinct from all other folders that share its parent. + The addition of the folder must not cause the active folder hierarchy to exceed a height of 10. Note, the full active + deleted folder hierarchy is allowed to reach a height of 20; this provides additional headroom when moving folders that contain deleted folders. + The addition of the folder must not cause the total number of folders under its parent to exceed 300. If the operation fails due to a folder constraint violation, some errors may be returned by the `CreateFolder` request, with status code `FAILED_PRECONDITION` and an error description. Other folder constraint violations will be communicated in the `Operation`, with the specific `PreconditionFailure` returned in the details list in the `Operation.error` field. The caller must have `resourcemanager.folders.create` permission on the identified parent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateResponse
     */
	public function cloudresourcemanagerFoldersCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/folders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "folderInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the folders that are direct descendants of supplied parent resource. `list()` provides a strongly consistent view of the folders underneath the specified parent resource. `list()` returns folders sorted based upon the (ascending) lexical ordering of their display_name. The caller must have `resourcemanager.folders.list` permission on the identified parent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListResponse
     */
	public function cloudresourcemanagerFoldersList(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/folders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFoldersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFoldersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for folders that match specific filter criteria. `search()` provides an eventually consistent view of the folders a user has access to which meet the specified filter criteria. This will only return folders on which the caller has the permission `resourcemanager.folders.get`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchResponse
     */
	public function cloudresourcemanagerFoldersSearch(
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/folders:search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudresourcemanagerFoldersSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchFoldersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchFoldersResponse', 'json');
            }
        }

        return $response;
    }
}