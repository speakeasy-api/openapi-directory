// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CompareFacesXAmzTargetEnum
type CompareFacesXAmzTargetEnum string

const (
	CompareFacesXAmzTargetEnumRekognitionServiceCompareFaces CompareFacesXAmzTargetEnum = "RekognitionService.CompareFaces"
)

func (e *CompareFacesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RekognitionService.CompareFaces":
		*e = CompareFacesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CompareFacesXAmzTargetEnum: %s", s)
	}
}

type CompareFacesRequest struct {
	CompareFacesRequest shared.CompareFacesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          CompareFacesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CompareFacesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	CompareFacesResponse *shared.CompareFacesResponse
	ContentType          string
	// ImageTooLargeException
	ImageTooLargeException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidImageFormatException
	InvalidImageFormatException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
