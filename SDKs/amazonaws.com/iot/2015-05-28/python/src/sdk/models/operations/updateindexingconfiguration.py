"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import devicedefenderindexingmode_enum as shared_devicedefenderindexingmode_enum
from ..shared import field as shared_field
from ..shared import indexingfilter as shared_indexingfilter
from ..shared import namedshadowindexingmode_enum as shared_namedshadowindexingmode_enum
from ..shared import thingconnectivityindexingmode_enum as shared_thingconnectivityindexingmode_enum
from ..shared import thinggroupindexingmode_enum as shared_thinggroupindexingmode_enum
from ..shared import thingindexingmode_enum as shared_thingindexingmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIndexingConfigurationRequestBodyThingGroupIndexingConfiguration:
    r"""Thing group indexing configuration."""
    
    custom_fields: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})  
    managed_fields: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedFields'), 'exclude': lambda f: f is None }})  
    thing_group_indexing_mode: Optional[shared_thinggroupindexingmode_enum.ThingGroupIndexingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingGroupIndexingMode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIndexingConfigurationRequestBodyThingIndexingConfiguration:
    r"""The thing indexing configuration. For more information, see <a href=\\"https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html\\">Managing Thing Indexing</a>."""
    
    custom_fields: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})  
    device_defender_indexing_mode: Optional[shared_devicedefenderindexingmode_enum.DeviceDefenderIndexingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceDefenderIndexingMode'), 'exclude': lambda f: f is None }})  
    filter: Optional[shared_indexingfilter.IndexingFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filter'), 'exclude': lambda f: f is None }})  
    managed_fields: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedFields'), 'exclude': lambda f: f is None }})  
    named_shadow_indexing_mode: Optional[shared_namedshadowindexingmode_enum.NamedShadowIndexingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namedShadowIndexingMode'), 'exclude': lambda f: f is None }})  
    thing_connectivity_indexing_mode: Optional[shared_thingconnectivityindexingmode_enum.ThingConnectivityIndexingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingConnectivityIndexingMode'), 'exclude': lambda f: f is None }})  
    thing_indexing_mode: Optional[shared_thingindexingmode_enum.ThingIndexingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingIndexingMode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIndexingConfigurationRequestBody:
    
    thing_group_indexing_configuration: Optional[UpdateIndexingConfigurationRequestBodyThingGroupIndexingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingGroupIndexingConfiguration'), 'exclude': lambda f: f is None }})
    r"""Thing group indexing configuration."""  
    thing_indexing_configuration: Optional[UpdateIndexingConfigurationRequestBodyThingIndexingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thingIndexingConfiguration'), 'exclude': lambda f: f is None }})
    r"""The thing indexing configuration. For more information, see <a href=\\"https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html\\">Managing Thing Indexing</a>."""  
    

@dataclasses.dataclass
class UpdateIndexingConfigurationRequest:
    
    request_body: UpdateIndexingConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateIndexingConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    update_indexing_configuration_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    