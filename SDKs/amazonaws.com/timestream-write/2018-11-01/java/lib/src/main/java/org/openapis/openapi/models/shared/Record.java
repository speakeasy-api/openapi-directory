/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Record - &lt;p&gt;Represents a time-series data point being written into Timestream. Each record contains an array of dimensions. Dimensions represent the metadata attributes of a time-series data point, such as the instance name or Availability Zone of an EC2 instance. A record also contains the measure name, which is the name of the measure being collected (for example, the CPU utilization of an EC2 instance). Additionally, a record contains the measure value and the value type, which is the data type of the measure value. Also, the record contains the timestamp of when the measure was collected and the timestamp unit, which represents the granularity of the timestamp. &lt;/p&gt; &lt;p&gt; Records have a &lt;code&gt;Version&lt;/code&gt; field, which is a 64-bit &lt;code&gt;long&lt;/code&gt; that you can use for updating data points. Writes of a duplicate record with the same dimension, timestamp, and measure name but different measure value will only succeed if the &lt;code&gt;Version&lt;/code&gt; attribute of the record in the write request is higher than that of the existing record. Timestream defaults to a &lt;code&gt;Version&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; for records without the &lt;code&gt;Version&lt;/code&gt; field. &lt;/p&gt;
 */
public class Record {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Dimensions")
    public Dimension[] dimensions;

    public Record withDimensions(Dimension[] dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeasureName")
    public String measureName;

    public Record withMeasureName(String measureName) {
        this.measureName = measureName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeasureValue")
    public String measureValue;

    public Record withMeasureValue(String measureValue) {
        this.measureValue = measureValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeasureValueType")
    public MeasureValueTypeEnum measureValueType;

    public Record withMeasureValueType(MeasureValueTypeEnum measureValueType) {
        this.measureValueType = measureValueType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MeasureValues")
    public MeasureValue[] measureValues;

    public Record withMeasureValues(MeasureValue[] measureValues) {
        this.measureValues = measureValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Time")
    public String time;

    public Record withTime(String time) {
        this.time = time;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TimeUnit")
    public TimeUnitEnum timeUnit;

    public Record withTimeUnit(TimeUnitEnum timeUnit) {
        this.timeUnit = timeUnit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Version")
    public Long version;

    public Record withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    public Record(){}
}
