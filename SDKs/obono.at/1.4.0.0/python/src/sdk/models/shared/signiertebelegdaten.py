"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import posten as shared_posten
from ..shared import rabatt as shared_rabatt
from ..shared import zahlung as shared_zahlung
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SignierteBelegdatenUnternehmenIDTypEnum(str, Enum):
    STEUERNUMMER = 'steuernummer'
    UID = 'uid'
    GLN = 'gln'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SignierteBelegdaten:
    r"""The complete `Beleg` that has been signed by the \\"Signaturerstellungseinheit\\" and stored in the \\"Datenerfassungsprotokoll\\"."""
    
    beleg_datum_uhrzeit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beleg-Datum-Uhrzeit'), 'exclude': lambda f: f is None }})  
    belegnummer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Belegnummer'), 'exclude': lambda f: f is None }})  
    betrag_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Brutto'), 'exclude': lambda f: f is None }})  
    betrag_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Netto'), 'exclude': lambda f: f is None }})  
    betrag_satz_besonders_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Besonders-Brutto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_besonders_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Besonders-Netto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_ermaessigt_1_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Ermaessigt-1-Brutto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_ermaessigt_1_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Ermaessigt-1-Netto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_ermaessigt_2_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Ermaessigt-2-Brutto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_ermaessigt_2_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Ermaessigt-2-Netto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_normal_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Normal-Brutto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_normal_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Normal-Netto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_null_brutto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Null-Brutto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    betrag_satz_null_netto: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Betrag-Satz-Null-Netto'), 'exclude': lambda f: f is None }})
    r"""The total amount in cents"""  
    externer_beleg_belegkreis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Externer-Beleg-Belegkreis'), 'exclude': lambda f: f is None }})  
    externer_beleg_bezeichnung: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Externer-Beleg-Bezeichnung'), 'exclude': lambda f: f is None }})  
    externer_beleg_referenz: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Externer-Beleg-Referenz'), 'exclude': lambda f: f is None }})  
    kassen_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Kassen-ID'), 'exclude': lambda f: f is None }})  
    kunde: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Kunde'), 'exclude': lambda f: f is None }})  
    notizen: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notizen'), 'exclude': lambda f: f is None }})  
    posten: Optional[list[shared_posten.Posten]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Posten'), 'exclude': lambda f: f is None }})  
    rabatte: Optional[list[shared_rabatt.Rabatt]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rabatte'), 'exclude': lambda f: f is None }})  
    storno: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Storno'), 'exclude': lambda f: f is None }})
    r"""Storno?"""  
    storno_beleg_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Storno-Beleg-UUID'), 'exclude': lambda f: f is None }})
    r"""The `Beleg-UUID` property of the `Beleg` to be cancelled"""  
    storno_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Storno-Text'), 'exclude': lambda f: f is None }})  
    training: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Training'), 'exclude': lambda f: f is None }})
    r"""Training?"""  
    unternehmen_adresse1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Adresse1'), 'exclude': lambda f: f is None }})  
    unternehmen_adresse2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Adresse2'), 'exclude': lambda f: f is None }})  
    unternehmen_fusszeile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Fusszeile'), 'exclude': lambda f: f is None }})  
    unternehmen_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-ID'), 'exclude': lambda f: f is None }})  
    unternehmen_id_typ: Optional[SignierteBelegdatenUnternehmenIDTypEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-ID-Typ'), 'exclude': lambda f: f is None }})  
    unternehmen_kopfzeile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Kopfzeile'), 'exclude': lambda f: f is None }})  
    unternehmen_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Name'), 'exclude': lambda f: f is None }})  
    unternehmen_ort: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-Ort'), 'exclude': lambda f: f is None }})  
    unternehmen_plz: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unternehmen-PLZ'), 'exclude': lambda f: f is None }})  
    zahlungen: Optional[list[shared_zahlung.Zahlung]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zahlungen'), 'exclude': lambda f: f is None }})  
    zertifikat_seriennummer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zertifikat-Seriennummer'), 'exclude': lambda f: f is None }})  
    