/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class HeadlessChrome {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Convert raw HTML to PDF
   *
   * @remarks
   * Convert HTML to a PDF using Headless Chrome on AWS Lambda.
   * ### Authorize via Header of Request
   * **Authorization: YOUR-API-KEY**
   */
  chromeFromHtmlPost(
    req: shared.ChromeHtmlToPdfRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromeFromHtmlPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ChromeHtmlToPdfRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/chrome/html";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromeFromHtmlPostResponse =
        new operations.ChromeFromHtmlPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseSuccess = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseSuccess
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseFailure = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseFailure
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Convert URL to PDF
   *
   * @remarks
   * Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.
   * ### Authorize via Query String Parameter
   * **apikey=YOUR-API-KEY**
   * ### Example
   * ``` https://v2018.api2pdf.com/chrome/url?url={UrlToConvert}&apikey={YourApiKey} ```
   */
  chromeFromUrlGET(
    req: operations.ChromeFromUrlGETRequest,
    security: operations.ChromeFromUrlGETSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromeFromUrlGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChromeFromUrlGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/chrome/url";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ChromeFromUrlGETSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromeFromUrlGETResponse =
        new operations.ChromeFromUrlGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseSuccess = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseSuccess
            );
          }
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.chromeFromUrlGET200ApplicationPdfBinaryString = out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseFailure = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseFailure
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Convert URL to PDF
   *
   * @remarks
   * Convert a URL or Web Page to PDF using Headless Chrome on AWS Lambda..
   * ### Authorize via Header of Request
   * **Authorization: YOUR-API-KEY**
   */
  chromeFromUrlPost(
    req: shared.ChromeUrlToPdfRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ChromeFromUrlPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ChromeUrlToPdfRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/chrome/url";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChromeFromUrlPostResponse =
        new operations.ChromeFromUrlPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseSuccess = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseSuccess
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiResponseFailure = utils.objectToClass(
              httpRes?.data,
              shared.ApiResponseFailure
            );
          }
          break;
      }

      return res;
    });
  }
}
