/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Currencies {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get historical prices for requested currency pairs
   *
   * @remarks
   * Historical OHLC data for the specified period and interval size
   *
   * The combination of the interval parameter and start and end dates can result in results
   * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
   */
  currenciesHistoryGET(
    req: operations.CurrenciesHistoryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesHistoryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesHistoryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Currencies/history";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesHistoryGETResponse =
        new operations.CurrenciesHistoryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.intervalCollectionResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.intervalCollectionResponses = utils.objectToClass(
              httpRes?.data,
              shared.IntervalCollectionResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get latest mid rate for requested currency pairs
   *
   * @remarks
   * Current Mid Rate
   */
  currenciesRateGET(
    req: operations.CurrenciesRateGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesRateGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesRateGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/v1/Currencies/rate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesRateGETResponse =
        new operations.CurrenciesRateGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.rateResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.rateResponses = utils.objectToClass(
              httpRes?.data,
              shared.RateResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get latest Summary for requested currency pairs
   *
   * @remarks
   * Current and daily summary information combined into a single quote
   */
  currenciesSummaryGET(
    req: operations.CurrenciesSummaryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesSummaryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesSummaryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Currencies/summary";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesSummaryGETResponse =
        new operations.CurrenciesSummaryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.summaryResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.summaryResponses = utils.objectToClass(
              httpRes?.data,
              shared.SummaryResponse,
              resFieldDepth
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of currency pairs supported by the history endpoint
   *
   * @remarks
   * Only the currency pairs in the direction noted can be used with the history endpoint.
   * For example: USD/CAD is not the same as CAD/USD
   */
  currenciesSupportedCurrenciesHistoryGET(
    req: operations.CurrenciesSupportedCurrenciesHistoryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesSupportedCurrenciesHistoryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesSupportedCurrenciesHistoryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Currencies/history/supported";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesSupportedCurrenciesHistoryGETResponse =
        new operations.CurrenciesSupportedCurrenciesHistoryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.currenciesSupportedCurrenciesHistoryGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of currencies supported by the rate endpoint
   *
   * @remarks
   * Any of the currencies in this list can be paired with any other currency in this list when supplied to the Rate endpoint.
   * For example: USD/CAD,CAD/USD,USD/EUR,EUR/CAD
   */
  currenciesSupportedCurrenciesRateGET(
    req: operations.CurrenciesSupportedCurrenciesRateGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesSupportedCurrenciesRateGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesSupportedCurrenciesRateGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Currencies/rate/supported";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesSupportedCurrenciesRateGETResponse =
        new operations.CurrenciesSupportedCurrenciesRateGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.currenciesSupportedCurrenciesRateGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get list of currency pairs supported by the Summary endpoint
   *
   * @remarks
   * Only the currency pairs in the direction noted can be used with the Summary endpoint.
   * For example: USD/CAD is not the same as CAD/USD
   */
  currenciesSupportedCurrenciesSummaryGET(
    req: operations.CurrenciesSupportedCurrenciesSummaryGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CurrenciesSupportedCurrenciesSummaryGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CurrenciesSupportedCurrenciesSummaryGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/Currencies/summary/supported";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CurrenciesSupportedCurrenciesSummaryGETResponse =
        new operations.CurrenciesSupportedCurrenciesSummaryGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.currenciesSupportedCurrenciesSummaryGET200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
