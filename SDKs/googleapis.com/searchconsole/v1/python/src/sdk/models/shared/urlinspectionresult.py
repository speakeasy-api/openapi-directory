"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ampinspectionresult as shared_ampinspectionresult
from ..shared import indexstatusinspectionresult as shared_indexstatusinspectionresult
from ..shared import mobileusabilityinspectionresult as shared_mobileusabilityinspectionresult
from ..shared import richresultsinspectionresult as shared_richresultsinspectionresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class URLInspectionResult:
    r"""URL inspection result, including all inspection results."""
    
    amp_result: Optional[shared_ampinspectionresult.AmpInspectionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ampResult'), 'exclude': lambda f: f is None }})
    r"""AMP inspection result of the live page or the current information from Google's index, depending on whether you requested a live inspection or not."""  
    index_status_result: Optional[shared_indexstatusinspectionresult.IndexStatusInspectionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indexStatusResult'), 'exclude': lambda f: f is None }})
    r"""Results of index status inspection for either the live page or the version in Google's index, depending on whether you requested a live inspection or not. For more information, see the [Index coverage report documentation](https://support.google.com/webmasters/answer/7440203)."""  
    inspection_result_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectionResultLink'), 'exclude': lambda f: f is None }})
    r"""Link to Search Console URL inspection."""  
    mobile_usability_result: Optional[shared_mobileusabilityinspectionresult.MobileUsabilityInspectionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mobileUsabilityResult'), 'exclude': lambda f: f is None }})
    r"""Mobile-usability inspection results."""  
    rich_results_result: Optional[shared_richresultsinspectionresult.RichResultsInspectionResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('richResultsResult'), 'exclude': lambda f: f is None }})
    r"""Rich-Results inspection result, including any rich results found at this URL."""  
    