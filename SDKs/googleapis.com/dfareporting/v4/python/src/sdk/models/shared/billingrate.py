"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import billingratetieredrate as shared_billingratetieredrate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BillingRateTypeEnum(str, Enum):
    r"""Type of this billing rate."""
    AD_SERVING = 'AD_SERVING'
    CLICKS = 'CLICKS'
    MINIMUM_SERVICE = 'MINIMUM_SERVICE'
    PATH_TO_CONVERSION = 'PATH_TO_CONVERSION'
    RICH_MEDIA_INPAGE = 'RICH_MEDIA_INPAGE'
    RICH_MEDIA_EXPANDING = 'RICH_MEDIA_EXPANDING'
    RICH_MEDIA_FLOATING = 'RICH_MEDIA_FLOATING'
    RICH_MEDIA_VIDEO = 'RICH_MEDIA_VIDEO'
    RICH_MEDIA_TEASER = 'RICH_MEDIA_TEASER'
    RICH_MEDIA_VPAID = 'RICH_MEDIA_VPAID'
    INSTREAM_VIDEO = 'INSTREAM_VIDEO'
    PIXEL = 'PIXEL'
    TRACKING = 'TRACKING'
    TRAFFICKING_FEATURE = 'TRAFFICKING_FEATURE'
    CUSTOM_REPORTS = 'CUSTOM_REPORTS'
    EXPOSURE_TO_CONVERSION = 'EXPOSURE_TO_CONVERSION'
    DATA_TRANSFER = 'DATA_TRANSFER'
    DATA_TRANSFER_SETUP = 'DATA_TRANSFER_SETUP'
    STARTUP = 'STARTUP'
    STATEMENT_OF_WORK = 'STATEMENT_OF_WORK'
    PROVIDED_LIST = 'PROVIDED_LIST'
    PROVIDED_LIST_SETUP = 'PROVIDED_LIST_SETUP'
    ENHANCED_FORMATS = 'ENHANCED_FORMATS'
    TRACKING_AD_IMPRESSIONS = 'TRACKING_AD_IMPRESSIONS'
    TRACKING_AD_CLICKS = 'TRACKING_AD_CLICKS'
    NIELSEN_DIGITAL_AD_RATINGS_FEE = 'NIELSEN_DIGITAL_AD_RATINGS_FEE'
    INSTREAM_VIDEO_REDIRECT = 'INSTREAM_VIDEO_REDIRECT'
    INSTREAM_VIDEO_VPAID = 'INSTREAM_VIDEO_VPAID'
    DISPLAY_AD_SERVING = 'DISPLAY_AD_SERVING'
    VIDEO_AD_SERVING = 'VIDEO_AD_SERVING'
    AUDIO_AD_SERVING = 'AUDIO_AD_SERVING'
    ADVANCED_DISPLAY_AD_SERVING = 'ADVANCED_DISPLAY_AD_SERVING'

class BillingRateUnitOfMeasureEnum(str, Enum):
    r"""Unit of measure for this billing rate."""
    CPM = 'CPM'
    CPC = 'CPC'
    EA = 'EA'
    P2_C = 'P2C'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillingRate:
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""Billing currency code in ISO 4217 format."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'exclude': lambda f: f is None }})
    r"""End date of this billing rate."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of this billing rate."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of this billing rate. This must be less than 256 characters long."""  
    rate_in_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateInMicros'), 'exclude': lambda f: f is None }})
    r"""Flat rate in micros of this billing rate. This cannot co-exist with tiered rate."""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'exclude': lambda f: f is None }})
    r"""Start date of this billing rate."""  
    tiered_rates: Optional[list[shared_billingratetieredrate.BillingRateTieredRate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tieredRates'), 'exclude': lambda f: f is None }})
    r"""Tiered rate of this billing rate. This cannot co-exist with flat rate."""  
    type: Optional[BillingRateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of this billing rate."""  
    unit_of_measure: Optional[BillingRateUnitOfMeasureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""Unit of measure for this billing rate."""  
    