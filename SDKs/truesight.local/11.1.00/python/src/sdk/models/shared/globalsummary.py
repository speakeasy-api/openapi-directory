"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from typing import Optional


@dataclasses.dataclass
class GlobalSummary:
    r"""Successful operation"""
    
    co2_emission: Optional[float] = dataclasses.field(default=None)
    r"""The CO<sub>2</sub> emissions for all devices. This value can be updated by users with sufficient permissions."""  
    co2_emission_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the CO<sub>2</sub> emission is being expressed."""  
    editable: Optional[bool] = dataclasses.field(default=None)
    r"""If <em>true</em>, indicates that you do not have sufficient rights to update the global settings. However, you may still have sufficient rights to update a specific group's setting."""  
    energy_cost: Optional[float] = dataclasses.field(default=None)
    r"""The electricity rate for all devices. This value can be updated by users with sufficient permissions."""  
    energy_cost_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the electricity rate is being expressed."""  
    group_name_filter: Optional[str] = dataclasses.field(default=None)
    r"""Regular expression used to filter the groups for which the power consumption will be reported."""  
    heating_margin: Optional[float] = dataclasses.field(default=None)
    r"""The lowest heating margin among the heating margins of all the devices.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_coverage: Optional[float] = dataclasses.field(default=None)
    r"""The percentage of devices whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_device_name: Optional[str] = dataclasses.field(default=None)
    r"""The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_device_url: Optional[str] = dataclasses.field(default=None)
    r"""The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the heating margin is being expressed."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The ID of the global summary (this ID will always be \\"global\\")."""  
    total_power_consumption: Optional[float] = dataclasses.field(default=None)
    r"""The total power consumption of all the devices."""  
    total_power_consumption_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the total power consumption is being expressed."""  
    update_timestamp: Optional[int] = dataclasses.field(default=None)
    r"""The data collection time (as an Epoch time, in seconds)."""  
    