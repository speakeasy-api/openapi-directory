/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://api.nytimes.com/svc/news/v3",
  "https://api.nytimes.com/svc/news/v3",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * With the Times Newswire API, you can get links and metadata for Times articles and blog posts as soon as they are published on NYTimes.com. The Times Newswire API provides an up-to-the-minute stream of published items.
 *
 * @see {@link http://developer.nytimes.com/}
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  getContentJson(
    req: operations.GetContentJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContentJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContentJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/content.json";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContentJsonResponse =
        new operations.GetContentJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContentJSON200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetContentJson200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  getContentSourceSectionJson(
    req: operations.GetContentSourceSectionJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContentSourceSectionJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContentSourceSectionJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/content/{source}/{section}.json",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContentSourceSectionJsonResponse =
        new operations.GetContentSourceSectionJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContentSourceSectionJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetContentSourceSectionJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  getContentSourceSectionTimePeriodJson(
    req: operations.GetContentSourceSectionTimePeriodJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetContentSourceSectionTimePeriodJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetContentSourceSectionTimePeriodJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/content/{source}/{section}/{time-period}.json",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetContentSourceSectionTimePeriodJsonResponse =
        new operations.GetContentSourceSectionTimePeriodJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getContentSourceSectionTimePeriodJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetContentSourceSectionTimePeriodJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
