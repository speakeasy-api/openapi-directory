"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Match:
    r"""Calls that return match, or match-specific information."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_event_match_timeseries(self, request: operations.GetEventMatchTimeseriesRequest, security: operations.GetEventMatchTimeseriesSecurity) -> operations.GetEventMatchTimeseriesResponse:
        r"""Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
        *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
        *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventMatchTimeseriesRequest, base_url, '/event/{event_key}/matches/timeseries', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventMatchTimeseriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_event_match_timeseries_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_matches(self, request: operations.GetEventMatchesRequest, security: operations.GetEventMatchesSecurity) -> operations.GetEventMatchesResponse:
        r"""Gets a list of matches for the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventMatchesRequest, base_url, '/event/{event_key}/matches', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventMatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_matches_keys(self, request: operations.GetEventMatchesKeysRequest, security: operations.GetEventMatchesKeysSecurity) -> operations.GetEventMatchesKeysResponse:
        r"""Gets a list of match keys for the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventMatchesKeysRequest, base_url, '/event/{event_key}/matches/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventMatchesKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_event_matches_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_event_matches_simple(self, request: operations.GetEventMatchesSimpleRequest, security: operations.GetEventMatchesSimpleSecurity) -> operations.GetEventMatchesSimpleResponse:
        r"""Gets a short-form list of matches for the given event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventMatchesSimpleRequest, base_url, '/event/{event_key}/matches/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventMatchesSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MatchSimple]])
                res.match_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_match(self, request: operations.GetMatchRequest, security: operations.GetMatchSecurity) -> operations.GetMatchResponse:
        r"""Gets a `Match` object for the given match key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMatchRequest, base_url, '/match/{match_key}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Match])
                res.match = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_match_simple(self, request: operations.GetMatchSimpleRequest, security: operations.GetMatchSimpleSecurity) -> operations.GetMatchSimpleResponse:
        r"""Gets a short-form `Match` object for the given match key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMatchSimpleRequest, base_url, '/match/{match_key}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMatchSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MatchSimple])
                res.match_simple = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_match_timeseries(self, request: operations.GetMatchTimeseriesRequest, security: operations.GetMatchTimeseriesSecurity) -> operations.GetMatchTimeseriesResponse:
        r"""Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
        *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
        *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMatchTimeseriesRequest, base_url, '/match/{match_key}/timeseries', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMatchTimeseriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_match_timeseries_200_application_json_objects = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_match_zebra(self, request: operations.GetMatchZebraRequest, security: operations.GetMatchZebraSecurity) -> operations.GetMatchZebraResponse:
        r"""Gets Zebra MotionWorks data for a Match for the given match key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMatchZebraRequest, base_url, '/match/{match_key}/zebra_motionworks', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMatchZebraResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Zebra])
                res.zebra = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches(self, request: operations.GetTeamEventMatchesRequest, security: operations.GetTeamEventMatchesSecurity) -> operations.GetTeamEventMatchesResponse:
        r"""Gets a list of matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesRequest, base_url, '/team/{team_key}/event/{event_key}/matches', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches_keys(self, request: operations.GetTeamEventMatchesKeysRequest, security: operations.GetTeamEventMatchesKeysSecurity) -> operations.GetTeamEventMatchesKeysResponse:
        r"""Gets a list of match keys for matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesKeysRequest, base_url, '/team/{team_key}/event/{event_key}/matches/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_event_matches_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_event_matches_simple(self, request: operations.GetTeamEventMatchesSimpleRequest, security: operations.GetTeamEventMatchesSimpleSecurity) -> operations.GetTeamEventMatchesSimpleResponse:
        r"""Gets a short-form list of matches for the given team and event."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamEventMatchesSimpleRequest, base_url, '/team/{team_key}/event/{event_key}/matches/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamEventMatchesSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year(self, request: operations.GetTeamMatchesByYearRequest, security: operations.GetTeamMatchesByYearSecurity) -> operations.GetTeamMatchesByYearResponse:
        r"""Gets a list of matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearRequest, base_url, '/team/{team_key}/matches/{year}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Match]])
                res.matches = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year_keys(self, request: operations.GetTeamMatchesByYearKeysRequest, security: operations.GetTeamMatchesByYearKeysSecurity) -> operations.GetTeamMatchesByYearKeysResponse:
        r"""Gets a list of match keys for matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearKeysRequest, base_url, '/team/{team_key}/matches/{year}/keys', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_team_matches_by_year_keys_200_application_json_strings = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    def get_team_matches_by_year_simple(self, request: operations.GetTeamMatchesByYearSimpleRequest, security: operations.GetTeamMatchesByYearSimpleSecurity) -> operations.GetTeamMatchesByYearSimpleResponse:
        r"""Gets a short-form list of matches for the given team and year."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMatchesByYearSimpleRequest, base_url, '/team/{team_key}/matches/{year}/simple', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMatchesByYearSimpleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MatchSimple]])
                res.match_simples = out
        elif http_res.status_code in [304, 401]:
            pass

        return res

    