<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ClassT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate the class
     * 
     * Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateClassResponse
     */
	public function activateClass(
        \OpenAPI\OpenAPI\Models\Operations\ActivateClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ActivateClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/activate', \OpenAPI\OpenAPI\Models\Operations\ActivateClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a user to the class
     * 
     * This method can be used by a teacher of the class to enroll another Flat user into the class.
     * 
     * Only users that are part of your Organization can be enrolled in a class of this same Organization.
     * 
     * When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddClassUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddClassUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddClassUserResponse
     */
	public function addClassUser(
        \OpenAPI\OpenAPI\Models\Operations\AddClassUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddClassUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddClassUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/users/{user}', \OpenAPI\OpenAPI\Models\Operations\AddClassUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddClassUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archive the assignment
     * 
     * Archive the assignment
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentResponse
     */
	public function archiveAssignment(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/archive', \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Assignment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archive the class
     * 
     * Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveClassResponse
     */
	public function archiveClass(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArchiveClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/archive', \OpenAPI\OpenAPI\Models\Operations\ArchiveClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copy an assignment
     * 
     * Copy an assignment to a specified class.
     * 
     * If the original assignment has a due date in the past, this new assingment will be created without a due date.
     * 
     * If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentResponse
     */
	public function copyAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/copy', \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentCopy", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CopyAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Assignment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assignment creation
     * 
     * Use this method as a teacher to create and post a new assignment to a class.
     * 
     * If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentResponse
     */
	public function createAssignment(
        \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments', \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentCreation", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Assignment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new class
     * 
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.
     * 
     * When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.
     * 
     * If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.
     * 
     * You can add users to this class using `PUT /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ClassCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateClassResponse
     */
	public function createClass(
        \OpenAPI\OpenAPI\Models\Shared\ClassCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create or edit a submission
     * 
     * Use this method as a student to create, update and submit a submission related to an assignment.
     * Students can only set `attachments` and `submit`.
     * Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionResponse
     */
	public function createSubmission(
        \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions', \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentSubmissionUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSubmissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a user from the class
     * 
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.
     * 
     * Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserResponse
     */
	public function deleteClassUser(
        \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/users/{user}', \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteClassUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a submission
     * 
     * Use this method as a teacher to delete a submission and allow student to start over the assignment
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionResponse
     */
	public function deleteSubmission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}', \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a feedback comment to a submission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentResponse
     */
	public function deleteSubmissionComment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}', \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSubmissionCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a submission
     * 
     * Use this method as a teacher to update the different submission and give feedback.
     * Teachers can only set `return`, `draftGrade` and `grade`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditSubmissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditSubmissionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditSubmissionResponse
     */
	public function editSubmission(
        \OpenAPI\OpenAPI\Models\Operations\EditSubmissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditSubmissionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditSubmissionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}', \OpenAPI\OpenAPI\Models\Operations\EditSubmissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentSubmissionUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditSubmissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Join a class
     * 
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.
     * 
     * Flat will automatically add the user to the corresponding class group based on this role in the organization.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnrollClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnrollClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnrollClassResponse
     */
	public function enrollClass(
        \OpenAPI\OpenAPI\Models\Operations\EnrollClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnrollClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnrollClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/enroll/{enrollmentCode}', \OpenAPI\OpenAPI\Models\Operations\EnrollClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnrollClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CSV Grades exports
     * 
     * Export list of submissions grades to a CSV file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvResponse
     */
	public function exportSubmissionsReviewsAsCsv(
        \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/csv', \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsCsvResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->exportSubmissionsReviewsAsCsv200TextCsvBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Excel Grades exports
     * 
     * Export list of submissions grades to an Excel file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelResponse
     */
	public function exportSubmissionsReviewsAsExcel(
        \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/excel', \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSubmissionsReviewsAsExcelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
                $response->exportSubmissionsReviewsAsExcel200ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheetBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fork a score
     * 
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.
     * 
     * When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ForkScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse
     */
	public function forkScore(
        \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ForkScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/fork', \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreFork", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the details of a single class
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetClassResponse
     */
	public function getClass(
        \OpenAPI\OpenAPI\Models\Operations\GetClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}', \OpenAPI\OpenAPI\Models\Operations\GetClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List submissions related to the score
     * 
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse
     */
	public function getScoreSubmissions(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/submissions', \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a student submission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubmissionResponse
     */
	public function getSubmission(
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubmissionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}', \OpenAPI\OpenAPI\Models\Operations\GetSubmissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubmissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the feedback comments of a submission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsResponse
     */
	public function getSubmissionComments(
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments', \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubmissionCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissionComments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmissionComment>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the history of the submission
     * 
     * For teachers only. Returns a detailed history of the submission. This currently includes state and grade histories.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryResponse
     */
	public function getSubmissionHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}/history', \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubmissionHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissionHistories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmissionHistory>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the students' submissions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsResponse
     */
	public function getSubmissions(
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions', \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubmissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assignments listing
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsResponse
     */
	public function listAssignments(
        \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments', \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAssignmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Assignment>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the submissions for a student
     * 
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsResponse
     */
	public function listClassStudentSubmissions(
        \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/students/{user}/submissions', \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListClassStudentSubmissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the classes available for the current user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClassesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListClassesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListClassesResponse
     */
	public function listClasses(
        \OpenAPI\OpenAPI\Models\Operations\ListClassesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListClassesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListClassesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListClassesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListClassesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClassDetails>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a feedback comment to a submission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentResponse
     */
	public function postSubmissionComment(
        \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments', \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentSubmissionCommentCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSubmissionCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissionComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignmentSubmissionComment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unarchive the assignment.
     * 
     * Mark the assignment as `active`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentResponse
     */
	public function unarchiveAssignment(
        \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/archive', \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnarchiveAssignmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Assignment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unarchive the class
     * 
     * Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassResponse
     */
	public function unarchiveClass(
        \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/archive', \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnarchiveClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the class
     * 
     * Update the meta information of the class
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClassRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClassSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClassResponse
     */
	public function updateClass(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClassRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateClassSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClassResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}', \OpenAPI\OpenAPI\Models\Operations\UpdateClassRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "classUpdate", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClassResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->classDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClassDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a feedback comment to a submission
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentResponse
     */
	public function updateSubmissionComment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/classes/{class}/assignments/{assignment}/submissions/{submission}/comments/{comment}', \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "assignmentSubmissionCommentCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubmissionCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissionComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AssignmentSubmissionComment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
}