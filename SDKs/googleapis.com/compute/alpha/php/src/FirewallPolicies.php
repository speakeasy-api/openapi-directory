<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FirewallPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts an association for the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationResponse
     */
	public function computeFirewallPoliciesAddAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/addAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyAssociation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a rule into a firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleResponse
     */
	public function computeFirewallPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copies rules to the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesResponse
     */
	public function computeFirewallPoliciesCloneRules(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/cloneRules', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesCloneRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteResponse
     */
	public function computeFirewallPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetResponse
     */
	public function computeFirewallPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an association with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationResponse
     */
	public function computeFirewallPoliciesGetAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/getAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyAssociation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyAssociation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyResponse
     */
	public function computeFirewallPoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleResponse
     */
	public function computeFirewallPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertResponse
     */
	public function computeFirewallPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the policies that have been configured for the specified folder or organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListResponse
     */
	public function computeFirewallPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists associations of a specified target, i.e., organization or folder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsResponse
     */
	public function computeFirewallPoliciesListAssociations(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/listAssociations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesListAssociationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPoliciesListAssociationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPoliciesListAssociationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveResponse
     */
	public function computeFirewallPoliciesMove(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/move', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchResponse
     */
	public function computeFirewallPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleResponse
     */
	public function computeFirewallPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an association for the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationResponse
     */
	public function computeFirewallPoliciesRemoveAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/removeAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleResponse
     */
	public function computeFirewallPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{firewallPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyResponse
     */
	public function computeFirewallPoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalOrganizationSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsResponse
     */
	public function computeFirewallPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/locations/global/firewallPolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeFirewallPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}