"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class RepositoryConfigurationsListSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class RepositoryConfigurationsListRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    include_inactive: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeInactive', 'style': 'form', 'explode': True }})
    r"""Include inactive configurations if none are active"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoryConfigurationsListDefaultApplicationJSON:
    r"""Bad Request"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class RepositoryConfigurationsList200ApplicationJSONStateEnum(str, Enum):
    r"""State of the configuration"""
    UNAUTHORIZED = 'unauthorized'
    INACTIVE = 'inactive'
    ACTIVE = 'active'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RepositoryConfigurationsList200ApplicationJSON:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Repository configuration identifier"""  
    repo_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo_url') }})
    r"""The repository's git url, must be a HTTPS URL"""  
    state: RepositoryConfigurationsList200ApplicationJSONStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State of the configuration"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of repository"""  
    external_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_user_id'), 'exclude': lambda f: f is None }})
    r"""The external user id from the repository provider. Required for GitLab.com repositories"""  
    installation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('installation_id'), 'exclude': lambda f: f is None }})
    r"""The GitHub App Installation id. Required for repositories connected from GitHub App"""  
    repo_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repo_id'), 'exclude': lambda f: f is None }})
    r"""The repository id from the repository provider. Required for repositories connected from GitHub App and GitLab.com"""  
    service_connection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_connection_id'), 'exclude': lambda f: f is None }})
    r"""The id of the service connection (private). Required for GitLab self-hosted repositories"""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""Email of the user who linked the repository"""  
    

@dataclasses.dataclass
class RepositoryConfigurationsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_configurations_list_200_application_json_anies: Optional[list[RepositoryConfigurationsList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""List of repository configurations"""  
    repository_configurations_list_default_application_json_object: Optional[RepositoryConfigurationsListDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    