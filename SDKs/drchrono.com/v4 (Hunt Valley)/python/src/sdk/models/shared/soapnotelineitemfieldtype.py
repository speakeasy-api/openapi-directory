"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoapNoteLineItemFieldType:
    r"""OK"""
    
    allowed_values: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_values'), 'exclude': lambda f: f is None }})
    r"""Value options the field type relies on if applicable, otherwise it will be an empty array"""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Indicates that the field has been soft-deleted by the doctor and will not be used in future notes"""  
    clinical_note_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clinical_note_template'), 'exclude': lambda f: f is None }})
    r"""ID of the `/api/clinical_note_templates` object that the field belongs to"""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comment"""  
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_type'), 'exclude': lambda f: f is None }})
    r"""One of `\\"\\"`, `\\"Checkbox\\"`, `\\"NullCheckbox\\"`, `\\"String\\"`, `\\"TwoStrings\\"`, `\\"FreeDraw\\"`, `\\"Photo\\"`, `\\"Header\\"`, `\\"Subheader\\"`"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Indicates that a note should not be locked unless a value is provided for this field"""  
    