// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DataPointsGetSortDirectionEnum - Direction of sort "asc" or "desc"
type DataPointsGetSortDirectionEnum string

const (
	DataPointsGetSortDirectionEnumAsc  DataPointsGetSortDirectionEnum = "asc"
	DataPointsGetSortDirectionEnumDesc DataPointsGetSortDirectionEnum = "desc"
)

func (e DataPointsGetSortDirectionEnum) ToPointer() *DataPointsGetSortDirectionEnum {
	return &e
}

func (e *DataPointsGetSortDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = DataPointsGetSortDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetSortDirectionEnum: %v", v)
	}
}

// DataPointsGetStatusEnum - Status of the datapoint
type DataPointsGetStatusEnum string

const (
	DataPointsGetStatusEnumDeleted DataPointsGetStatusEnum = "deleted"
	DataPointsGetStatusEnumActive  DataPointsGetStatusEnum = "active"
	DataPointsGetStatusEnumPaused  DataPointsGetStatusEnum = "paused"
	DataPointsGetStatusEnumSpam    DataPointsGetStatusEnum = "spam"
)

func (e DataPointsGetStatusEnum) ToPointer() *DataPointsGetStatusEnum {
	return &e
}

func (e *DataPointsGetStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deleted":
		fallthrough
	case "active":
		fallthrough
	case "paused":
		fallthrough
	case "spam":
		*e = DataPointsGetStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetStatusEnum: %v", v)
	}
}

// DataPointsGetTypeEnum - Type of the datapoint ("tp"/"tl")
type DataPointsGetTypeEnum string

const (
	DataPointsGetTypeEnumTp DataPointsGetTypeEnum = "tp"
	DataPointsGetTypeEnumTl DataPointsGetTypeEnum = "tl"
)

func (e DataPointsGetTypeEnum) ToPointer() *DataPointsGetTypeEnum {
	return &e
}

func (e *DataPointsGetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tp":
		fallthrough
	case "tl":
		*e = DataPointsGetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetTypeEnum: %v", v)
	}
}

type DataPointsGetRequest struct {
	// Exclude datapoints created before this date (YYYYMMDD)
	CreatedAfter *string `queryParam:"style=form,explode=true,name=createdAfter"`
	// Exclude datapoints created after this date (YYYYMMDD)
	CreatedBefore *string `queryParam:"style=form,explode=true,name=createdBefore"`
	// Maximum elements to retrieve. Default to 20 if not specified.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Where to start when retrieving elements. Default is 0 if not specified.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// Filter fields by favourite status
	OnlyFavorites *bool `queryParam:"style=form,explode=true,name=onlyFavorites"`
	// Field to sort by
	SortBy *string `queryParam:"style=form,explode=true,name=sortBy"`
	// Direction of sort "asc" or "desc"
	SortDirection *DataPointsGetSortDirectionEnum `queryParam:"style=form,explode=true,name=sortDirection"`
	// Status of the datapoint
	Status *DataPointsGetStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// A comma separated list of tags you want to filter with.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// Filter fields by this pattern
	TextSearch *string `queryParam:"style=form,explode=true,name=textSearch"`
	// Type of the datapoint ("tp"/"tl")
	Type *DataPointsGetTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DataPointsGetResponse struct {
	APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64 *shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64
	ContentType                                                          string
	StatusCode                                                           int
	RawResponse                                                          *http.Response
}
