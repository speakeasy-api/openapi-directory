"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import gymdto as shared_gymdto
from ..shared import packageitemdto as shared_packageitemdto
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PackageDTO:
    r"""The PackageDTO Class.
    Contains relevant fields of Package DTO by masking actual Package entity's fields in application.
    """
    
    package_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageName') }})  
    package_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageType') }})
    r"""Package type can be either fixed visit or unlimited."""  
    registration_fee: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationFee') }})
    r"""Registartion fee for the package at a gym.
                 read only
    """  
    service_fee: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceFee') }})
    r"""total Service charge of the package for entire period."""  
    addon_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addonFee'), 'exclude': lambda f: f is None }})
    r"""sum of addon fees.
    incoming values for this filed will ignore.
    """  
    add_ons: Optional[list[shared_packageitemdto.PackageItemDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addOns'), 'exclude': lambda f: f is None }})
    r"""Extra articles list added to the given package."""  
    apply_for_all_gyms: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applyForAllGyms'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate wheather package is available in all the gyms."""  
    available_gyms: Optional[list[shared_gymdto.GymDTO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availableGyms'), 'exclude': lambda f: f is None }})
    r"""Gyms list where this package is available."""  
    binding_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bindingPeriod'), 'exclude': lambda f: f is None }})
    r"""Range of period a member is bound to the contract if he/she choose this package."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Package created DateTime."""  
    created_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdUser'), 'exclude': lambda f: f is None }})
    r"""Package created user."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Common descriptions about package.If there are more instructions
                 can be stored as comma separated values.
    """  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of the package.After that package is not valid for use."""  
    expire_in_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireInMonths'), 'exclude': lambda f: f is None }})
    r"""No of months the fixed package is valid for sale"""  
    features: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""What are the facilities, features available for package.ex:- wifi,
    ACm etc.Can be stored as comma seperated values.
    """  
    free_months: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeMonths'), 'exclude': lambda f: f is None }})
    r"""No of months gym member can come without payments."""  
    instructions_to_gym_users: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructionsToGymUsers'), 'exclude': lambda f: f is None }})
    r"""Instruction to the gym members relevant to the package.
                 If there are more instructions can be stored as comma seperated values.
    """  
    instructions_to_web_users: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructionsToWebUsers'), 'exclude': lambda f: f is None }})
    r"""Instruction to the MRM members relevant to the package.
                 If there are more instructions can be stored as comma seperated values.
    """  
    is_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isActive'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate this package is still active or not."""  
    is_atg: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAtg'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate ATG transaction from bank is applicable or not."""  
    is_auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAutoRenew'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate the contract will auto renew after expiration
                 if this package would be chosen.
    """  
    is_first_month_free: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFirstMonthFree'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate if the first month charges is free."""  
    is_registration_fee: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRegistrationFee'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate this package has registration fee or not."""  
    is_rest_amount: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRestAmount'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate rest amount is applicable or not."""  
    is_shown_in_mobile: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isShownInMobile'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate package is visible in Mobile App or not."""  
    is_sponsor_package: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSponsorPackage'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate package can be sponsored or not by other party."""  
    maximum_give_away_rest_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumGiveAwayRestAmount'), 'exclude': lambda f: f is None }})
    r"""If a member join the gym middle of a month via this package,
                 what is the maximum amount of price can be neglected from payment from the member.
    """  
    member_can_add_add_ons: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberCanAddAddOns'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate member can add extra addons he wish if he choose this package."""  
    member_can_leave_within_free_period: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberCanLeaveWithinFreePeriod'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate if member can leave from contract within
                 free period if he/she choose this package.
    """  
    member_can_remove_add_ons: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberCanRemoveAddOns'), 'exclude': lambda f: f is None }})
    r"""Boolean value to indicate member can remove already added addons if he choose this package."""  
    modified_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Package last modified DateTime."""  
    modified_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedUser'), 'exclude': lambda f: f is None }})
    r"""Package last modified user."""  
    monthly_fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthlyFee'), 'exclude': lambda f: f is None }})
    r"""Monthly installment fee if package is not fixed visit.
    addition of the servicefee and addon fees divided by binding period.
                 read only
    """  
    next_package_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPackageNumber'), 'exclude': lambda f: f is None }})
    r"""Next Package the contract continue after the binding period of this package."""  
    number_of_installments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfInstallments'), 'exclude': lambda f: f is None }})
    r"""Maximum Number of installment a member can divide the package price/cost to pay."""  
    number_of_visits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfVisits'), 'exclude': lambda f: f is None }})
    r"""If package is fixed visit type, then how many visits are available for this package."""  
    package_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageId'), 'exclude': lambda f: f is None }})  
    package_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageNumber'), 'exclude': lambda f: f is None }})  
    per_visit_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perVisitPrice'), 'exclude': lambda f: f is None }})
    r"""Cost/Price of the single visit to gym."""  
    shown_in_web: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shownInWeb'), 'exclude': lambda f: f is None }})
    r"""Boolean value to show this package in MRM system or not."""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date of the package."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Comma separated string values in case of need of maintain some labels kind of
                 stuff relevant to the package.
    """  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPrice'), 'exclude': lambda f: f is None }})
    r"""total price for the package including Addon fees, service fee and registration fee.
    incoming values for this field will ignore.
    """  
    