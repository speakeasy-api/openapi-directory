/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class StartPipelineReprocessingRequestBody {
    /**
     * Specifies one or more sets of channel messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelMessages")
    public StartPipelineReprocessingRequestBodyChannelMessages channelMessages;

    public StartPipelineReprocessingRequestBody withChannelMessages(StartPipelineReprocessingRequestBodyChannelMessages channelMessages) {
        this.channelMessages = channelMessages;
        return this;
    }
    
    /**
     * &lt;p&gt;The end time (exclusive) of raw message data that is reprocessed.&lt;/p&gt; &lt;p&gt;If you specify a value for the &lt;code&gt;endTime&lt;/code&gt; parameter, you must not use the &lt;code&gt;channelMessages&lt;/code&gt; object.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public StartPipelineReprocessingRequestBody withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * &lt;p&gt;The start time (inclusive) of raw message data that is reprocessed.&lt;/p&gt; &lt;p&gt;If you specify a value for the &lt;code&gt;startTime&lt;/code&gt; parameter, you must not use the &lt;code&gt;channelMessages&lt;/code&gt; object.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public StartPipelineReprocessingRequestBody withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    public StartPipelineReprocessingRequestBody(){}
}
