/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TrustInput - Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain.
 */
public class TrustInput {
    /**
     * The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectiveAuthentication")
    public Boolean selectiveAuthentication;
    public TrustInput withSelectiveAuthentication(Boolean selectiveAuthentication) {
        this.selectiveAuthentication = selectiveAuthentication;
        return this;
    }
    
    /**
     * The target DNS server IP addresses which can resolve the remote domain involved in the trust.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDnsIpAddresses")
    public String[] targetDnsIpAddresses;
    public TrustInput withTargetDnsIpAddresses(String[] targetDnsIpAddresses) {
        this.targetDnsIpAddresses = targetDnsIpAddresses;
        return this;
    }
    
    /**
     * The fully qualified target domain name which will be in trust with the current domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetDomainName")
    public String targetDomainName;
    public TrustInput withTargetDomainName(String targetDomainName) {
        this.targetDomainName = targetDomainName;
        return this;
    }
    
    /**
     * The trust direction, which decides if the current domain is trusted, trusting, or both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustDirection")
    public TrustTrustDirectionEnum trustDirection;
    public TrustInput withTrustDirection(TrustTrustDirectionEnum trustDirection) {
        this.trustDirection = trustDirection;
        return this;
    }
    
    /**
     * Input only. The trust secret used for the handshake with the target domain. It will not be stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustHandshakeSecret")
    public String trustHandshakeSecret;
    public TrustInput withTrustHandshakeSecret(String trustHandshakeSecret) {
        this.trustHandshakeSecret = trustHandshakeSecret;
        return this;
    }
    
    /**
     * The type of trust represented by the trust resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustType")
    public TrustTrustTypeEnum trustType;
    public TrustInput withTrustType(TrustTrustTypeEnum trustType) {
        this.trustType = trustType;
        return this;
    }
    
}
