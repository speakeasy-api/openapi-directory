// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePlayerSessionXAmzTargetEnum
type CreatePlayerSessionXAmzTargetEnum string

const (
	CreatePlayerSessionXAmzTargetEnumGameLiftCreatePlayerSession CreatePlayerSessionXAmzTargetEnum = "GameLift.CreatePlayerSession"
)

func (e CreatePlayerSessionXAmzTargetEnum) ToPointer() *CreatePlayerSessionXAmzTargetEnum {
	return &e
}

func (e *CreatePlayerSessionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.CreatePlayerSession":
		*e = CreatePlayerSessionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePlayerSessionXAmzTargetEnum: %v", v)
	}
}

type CreatePlayerSessionRequest struct {
	CreatePlayerSessionInput shared.CreatePlayerSessionInput   `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreatePlayerSessionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePlayerSessionResponse struct {
	ContentType string
	// Success
	CreatePlayerSessionOutput *shared.CreatePlayerSessionOutput
	// GameSessionFullException
	GameSessionFullException interface{}
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidGameSessionStatusException
	InvalidGameSessionStatusException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// TerminalRoutingStrategyException
	TerminalRoutingStrategyException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
