"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import feedtype_enum as shared_feedtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicationFeedReporting:
    r"""Publication feed reporting"""
    
    feed_type: shared_feedtype_enum.FeedTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feedType') }})
    r"""The Feed Type"""  
    processing_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingStatus') }})
    r"""The processing status"""  
    start_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The feed publication start time (UTC timezone)"""  
    completed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed'), 'exclude': lambda f: f is None }})
    r"""Indicates if the publication is completed or not"""  
    end_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The feed publication end time (UTC timezone)"""  
    error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""The error message"""  
    exported_products: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportedProducts'), 'exclude': lambda f: f is None }})
    r"""The product count downloaded from BeezUP Export"""  
    failed_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failedItems'), 'exclude': lambda f: f is None }})
    r"""The item count (products or offers) the marketplace flagged as failed"""  
    html_report_generation_error_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlReportGenerationErrorMessage'), 'exclude': lambda f: f is None }})
    r"""The error message if the Html Report generation failed"""  
    html_report_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htmlReportUrl'), 'exclude': lambda f: f is None }})
    r"""The Url for the Html Report generated"""  
    published_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishedItems'), 'exclude': lambda f: f is None }})
    r"""The item count (products or offers) the marketplace flagged as successful"""  
    published_items_with_warning: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishedItemsWithWarning'), 'exclude': lambda f: f is None }})
    r"""The item count (products or offers) the marketplace flagged as successful with warnings"""  
    transmitted_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmittedItems'), 'exclude': lambda f: f is None }})
    r"""The item count (products or offers) sent to the marketplace"""  
    