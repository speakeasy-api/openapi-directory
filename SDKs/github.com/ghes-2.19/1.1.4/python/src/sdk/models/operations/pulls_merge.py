"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import pull_request_merge_result as shared_pull_request_merge_result
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PullsMergeRequestBodyMergeMethodEnum(str, Enum):
    r"""Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`."""
    MERGE = 'merge'
    SQUASH = 'squash'
    REBASE = 'rebase'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullsMergeRequestBody:
    
    commit_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_message'), 'exclude': lambda f: f is None }})
    r"""Extra detail to append to automatic commit message."""  
    commit_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_title'), 'exclude': lambda f: f is None }})
    r"""Title for the automatic commit message."""  
    merge_method: Optional[PullsMergeRequestBodyMergeMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_method'), 'exclude': lambda f: f is None }})
    r"""Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`."""  
    sha: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha'), 'exclude': lambda f: f is None }})
    r"""SHA that pull request head must match to allow merge."""  
    

@dataclasses.dataclass
class PullsMergeRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    pull_number: int = dataclasses.field(metadata={'path_param': { 'field_name': 'pull_number', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: Optional[PullsMergeRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullsMerge409ApplicationJSON:
    r"""Conflict if sha was provided and pull request head did not match"""
    
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PullsMerge405ApplicationJSON:
    r"""Method Not Allowed if merge cannot be performed"""
    
    documentation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentation_url'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PullsMergeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    pull_request_merge_result: Optional[shared_pull_request_merge_result.PullRequestMergeResult] = dataclasses.field(default=None)
    r"""if merge was successful"""  
    pulls_merge_405_application_json_object: Optional[PullsMerge405ApplicationJSON] = dataclasses.field(default=None)
    r"""Method Not Allowed if merge cannot be performed"""  
    pulls_merge_409_application_json_object: Optional[PullsMerge409ApplicationJSON] = dataclasses.field(default=None)
    r"""Conflict if sha was provided and pull request head did not match"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    