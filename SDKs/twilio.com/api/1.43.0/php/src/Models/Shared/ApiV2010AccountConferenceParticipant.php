<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ApiV2010AccountConferenceParticipant - Created
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ApiV2010AccountConferenceParticipant
{
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.
     * 
     * @var ?string $accountSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountSid = null;
    
    /**
     * The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.
     * 
     * @var ?string $callSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('call_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $callSid = null;
    
    /**
     * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     * 
     * @var ?string $callSidToCoach
     */
	#[\JMS\Serializer\Annotation\SerializedName('call_sid_to_coach')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $callSidToCoach = null;
    
    /**
     * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     * 
     * @var ?bool $coaching
     */
	#[\JMS\Serializer\Annotation\SerializedName('coaching')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $coaching = null;
    
    /**
     * The SID of the conference the participant is in.
     * 
     * @var ?string $conferenceSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('conference_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $conferenceSid = null;
    
    /**
     * The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
     * 
     * @var ?string $dateCreated
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_created')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dateCreated = null;
    
    /**
     * The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
     * 
     * @var ?string $dateUpdated
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_updated')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dateUpdated = null;
    
    /**
     * Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves.
     * 
     * @var ?bool $endConferenceOnExit
     */
	#[\JMS\Serializer\Annotation\SerializedName('end_conference_on_exit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $endConferenceOnExit = null;
    
    /**
     * Whether the participant is on hold. Can be `true` or `false`.
     * 
     * @var ?bool $hold
     */
	#[\JMS\Serializer\Annotation\SerializedName('hold')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hold = null;
    
    /**
     * The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.
     * 
     * @var ?string $label
     */
	#[\JMS\Serializer\Annotation\SerializedName('label')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $label = null;
    
    /**
     * Whether the participant is muted. Can be `true` or `false`.
     * 
     * @var ?bool $muted
     */
	#[\JMS\Serializer\Annotation\SerializedName('muted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $muted = null;
    
    /**
     * Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * 
     * @var ?bool $startConferenceOnEnter
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_conference_on_enter')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $startConferenceOnEnter = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ParticipantEnumStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ParticipantEnumStatusEnum $status = null;
    
    /**
     * The URI of the resource, relative to `https://api.twilio.com`.
     * 
     * @var ?string $uri
     */
	#[\JMS\Serializer\Annotation\SerializedName('uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uri = null;
    
	public function __construct()
	{
		$this->accountSid = null;
		$this->callSid = null;
		$this->callSidToCoach = null;
		$this->coaching = null;
		$this->conferenceSid = null;
		$this->dateCreated = null;
		$this->dateUpdated = null;
		$this->endConferenceOnExit = null;
		$this->hold = null;
		$this->label = null;
		$this->muted = null;
		$this->startConferenceOnEnter = null;
		$this->status = null;
		$this->uri = null;
	}
}
