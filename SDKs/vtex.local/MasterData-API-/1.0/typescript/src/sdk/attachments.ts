/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The `attachments` API allows you to upload and download files.
 *
 * @remarks
 *
 * In case of images, the `content-type` header is filled with` image/jpg`.
 */
export class Attachments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve attachment
   *
   * @remarks
   * Use this API to retrieve a file.
   *
   * Be sure to include the file extension in the name. Like in this example:
   * ```
   * /dataentities/CL/documents/123/file/attachments/image.png
   * ```
   */
  retrieveattachment(
    req: operations.RetrieveattachmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveattachmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveattachmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}/documents/{id}/{field}/attachments/{file-name}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveattachmentResponse =
        new operations.RetrieveattachmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Save attachment
   * 
   * @remarks
   * This API allows you to save a file in a field of type `File`.
   * 
   * 
When using in javascript, you must add the header `content-type` with value `multipart/form-data;`
   * 
   * 
You can upload more than one file. Just add a new field in the `form-data` with type `File`.
   */
  saveattachment(
    req: operations.SaveattachmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveattachmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveattachmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/dataentities/{acronym}/documents/{id}/{field}/attachments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveattachmentResponse =
        new operations.SaveattachmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
