"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAccountCloudRecordingResponse = exports.GetAccountCloudRecording200ApplicationJSON = exports.GetAccountCloudRecording200ApplicationJSONMeetings = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = exports.GetAccountCloudRecording200ApplicationXML = exports.GetAccountCloudRecording200ApplicationXMLMeetings = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = exports.GetAccountCloudRecordingRequest = exports.GetAccountCloudRecordingSecurity = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetAccountCloudRecordingSecurity = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecordingSecurity, _super);
    function GetAccountCloudRecordingSecurity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "security, scheme=true;type=oauth2;name=Authorization",
        }),
        __metadata("design:type", String)
    ], GetAccountCloudRecordingSecurity.prototype, "oAuth", void 0);
    return GetAccountCloudRecordingSecurity;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecordingSecurity = GetAccountCloudRecordingSecurity;
var GetAccountCloudRecordingRequest = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecordingRequest, _super);
    function GetAccountCloudRecordingRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=accountId",
        }),
        __metadata("design:type", String)
    ], GetAccountCloudRecordingRequest.prototype, "accountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=from;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
        }),
        __metadata("design:type", Date)
    ], GetAccountCloudRecordingRequest.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=next_page_token",
        }),
        __metadata("design:type", String)
    ], GetAccountCloudRecordingRequest.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=page_size",
        }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecordingRequest.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=to;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
        }),
        __metadata("design:type", Date)
    ], GetAccountCloudRecordingRequest.prototype, "to", void 0);
    return GetAccountCloudRecordingRequest;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecordingRequest = GetAccountCloudRecordingRequest;
/**
 * The recording file type. The value of this field could be one of the following:<br>
 *
 * @remarks
 * * `MP4`: Video file of the recording.<br>
 * * `M4A` Audio-only file of the recording.<br>
 * * `TB`: Timestamp file of the recording in JSON format.<br>
 * * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
 * * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
 * * `CC`: File containing closed captions of the recording in VTT file format.<br>
 * * `CSV`: File containing polling data in csv format.
 *
 * A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
 * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
 */
var GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum;
(function (GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum) {
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Mp4"] = "MP4";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["M4A"] = "M4A";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Chat"] = "CHAT";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Transcript"] = "TRANSCRIPT";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Cc"] = "CC";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Csv"] = "CSV";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum["Tb"] = "TB";
})(GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum || (exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesFileTypeEnum = {}));
/**
 * The recording type. The value of this field can be one of the following:<br>
 *
 * @remarks
 * * `shared_screen_with_speaker_view(CC)`
 * * `shared_screen_with_speaker_view`
 * * `shared_screen_with_gallery_view`
 * * `shared_screen`
 * * `active_speaker`
 * * `gallery_view`
 * * `audio_only`
 * * `audio_transcript`
 * * `chat_file`
 * * `host_video`
 * * `closed_caption`
 * * `poll`
 * * `timeline`
 * * `thumbnail`
 *
 */
var GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum;
(function (GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum) {
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithSpeakerViewCC"] = "shared_screen_with_speaker_view(CC)";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithSpeakerView"] = "shared_screen_with_speaker_view";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithGalleryView"] = "shared_screen_with_gallery_view";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["ActiveSpeaker"] = "active_speaker";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["GalleryView"] = "gallery_view";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["SharedScreen"] = "shared_screen";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["AudioOnly"] = "audio_only";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["AudioTranscript"] = "audio_transcript";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["ChatFile"] = "chat_file";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["Poll"] = "poll";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["HostVideo"] = "host_video";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["ClosedCaption"] = "closed_caption";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["Timeline"] = "timeline";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum["Thumbnail"] = "thumbnail";
})(GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum || (exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesRecordingTypeEnum = {}));
/**
 * The status of the recording, either `completed` or `processing`.
 */
var GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum;
(function (GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum) {
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum["Completed"] = "completed";
    GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum["Processing"] = "processing";
})(GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum = exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum || (exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFilesStatusEnum = {}));
var GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles, _super);
    function GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "downloadUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "fileSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "fileType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "meetingId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "playUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "recordingEnd", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "recordingStart", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "recordingType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles.prototype, "status", void 0);
    return GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles = GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles;
var GetAccountCloudRecording200ApplicationXMLMeetings = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationXMLMeetings, _super);
    function GetAccountCloudRecording200ApplicationXMLMeetings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "hostId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "recordingCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetAccountCloudRecording200ApplicationXMLMeetingsRecordingFiles,
        }),
        __metadata("design:type", Array)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "recordingFiles", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "topic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "totalSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXMLMeetings.prototype, "uuid", void 0);
    return GetAccountCloudRecording200ApplicationXMLMeetings;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationXMLMeetings = GetAccountCloudRecording200ApplicationXMLMeetings;
/**
 * **Response Error Code:** `200` <br>
 *
 * @remarks
 * Only available for Paid account.
 *
 * **HTTP Status Code:** `200` <br>
 * Recording(s) listed successfully.
 *
 *
 */
var GetAccountCloudRecording200ApplicationXML = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationXML, _super);
    function GetAccountCloudRecording200ApplicationXML() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetAccountCloudRecording200ApplicationXMLMeetings,
        }),
        __metadata("design:type", Array)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "meetings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "to", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationXML.prototype, "totalRecords", void 0);
    return GetAccountCloudRecording200ApplicationXML;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationXML = GetAccountCloudRecording200ApplicationXML;
/**
 * The recording file type. The value of this field could be one of the following:<br>
 *
 * @remarks
 * * `MP4`: Video file of the recording.<br>
 * * `M4A` Audio-only file of the recording.<br>
 * * `TB`: Timestamp file of the recording in JSON format.<br>
 * * `TRANSCRIPT`: Transcription file of the recording in VTT format.<br>
 * * `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>
 * * `CC`: File containing closed captions of the recording in VTT file format.<br>
 * * `CSV`: File containing polling data in csv format.
 *
 * A recording file object with file type of either `CC` or `TB` **does not have** the following properties:<br>
 * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
 */
var GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum;
(function (GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum) {
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Mp4"] = "MP4";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["M4A"] = "M4A";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Chat"] = "CHAT";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Transcript"] = "TRANSCRIPT";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Cc"] = "CC";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Csv"] = "CSV";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum["Tb"] = "TB";
})(GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum || (exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesFileTypeEnum = {}));
/**
 * The recording type. The value of this field can be one of the following:<br>
 *
 * @remarks
 * * `shared_screen_with_speaker_view(CC)`
 * * `shared_screen_with_speaker_view`
 * * `shared_screen_with_gallery_view`
 * * `shared_screen`
 * * `active_speaker`
 * * `gallery_view`
 * * `audio_only`
 * * `audio_transcript`
 * * `chat_file`
 * * `host_video`
 * * `closed_caption`
 * * `poll`
 * * `timeline`
 * * `thumbnail`
 *
 */
var GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum;
(function (GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum) {
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithSpeakerViewCC"] = "shared_screen_with_speaker_view(CC)";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithSpeakerView"] = "shared_screen_with_speaker_view";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["SharedScreenWithGalleryView"] = "shared_screen_with_gallery_view";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["ActiveSpeaker"] = "active_speaker";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["GalleryView"] = "gallery_view";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["SharedScreen"] = "shared_screen";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["AudioOnly"] = "audio_only";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["AudioTranscript"] = "audio_transcript";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["ChatFile"] = "chat_file";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["Poll"] = "poll";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["HostVideo"] = "host_video";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["ClosedCaption"] = "closed_caption";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["Timeline"] = "timeline";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum["Thumbnail"] = "thumbnail";
})(GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum || (exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesRecordingTypeEnum = {}));
/**
 * The status of the recording, either `completed` or `processing`.
 */
var GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum;
(function (GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum) {
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum["Completed"] = "completed";
    GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum["Processing"] = "processing";
})(GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum = exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum || (exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFilesStatusEnum = {}));
var GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles, _super);
    function GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "download_url" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "downloadUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "file_size" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "fileSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "file_type" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "fileType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "meeting_id" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "meetingId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "play_url" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "playUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recording_end" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "recordingEnd", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recording_start" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "recordingStart", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recording_type" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "recordingType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles.prototype, "status", void 0);
    return GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles = GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles;
var GetAccountCloudRecording200ApplicationJSONMeetings = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationJSONMeetings, _super);
    function GetAccountCloudRecording200ApplicationJSONMeetings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host_id" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "hostId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recording_count" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "recordingCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles,
        }),
        (0, class_transformer_1.Expose)({ name: "recording_files" }),
        (0, class_transformer_1.Type)(function () { return GetAccountCloudRecording200ApplicationJSONMeetingsRecordingFiles; }),
        __metadata("design:type", Array)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "recordingFiles", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start_time" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "topic" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "topic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "total_size" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "totalSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uuid" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSONMeetings.prototype, "uuid", void 0);
    return GetAccountCloudRecording200ApplicationJSONMeetings;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationJSONMeetings = GetAccountCloudRecording200ApplicationJSONMeetings;
/**
 * **Response Error Code:** `200` <br>
 *
 * @remarks
 * Only available for Paid account.
 *
 * **HTTP Status Code:** `200` <br>
 * Recording(s) listed successfully.
 *
 *
 */
var GetAccountCloudRecording200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecording200ApplicationJSON, _super);
    function GetAccountCloudRecording200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "from" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "from", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: GetAccountCloudRecording200ApplicationJSONMeetings,
        }),
        (0, class_transformer_1.Expose)({ name: "meetings" }),
        (0, class_transformer_1.Type)(function () { return GetAccountCloudRecording200ApplicationJSONMeetings; }),
        __metadata("design:type", Array)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "meetings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "next_page_token" }),
        __metadata("design:type", String)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "page_size" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "to" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "to", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "total_records" }),
        __metadata("design:type", Number)
    ], GetAccountCloudRecording200ApplicationJSON.prototype, "totalRecords", void 0);
    return GetAccountCloudRecording200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecording200ApplicationJSON = GetAccountCloudRecording200ApplicationJSON;
var GetAccountCloudRecordingResponse = /** @class */ (function (_super) {
    __extends(GetAccountCloudRecordingResponse, _super);
    function GetAccountCloudRecordingResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], GetAccountCloudRecordingResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetAccountCloudRecordingResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetAccountCloudRecordingResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetAccountCloudRecordingResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetAccountCloudRecording200ApplicationJSON)
    ], GetAccountCloudRecordingResponse.prototype, "getAccountCloudRecording200ApplicationJSONObject", void 0);
    return GetAccountCloudRecordingResponse;
}(utils_1.SpeakeasyBase));
exports.GetAccountCloudRecordingResponse = GetAccountCloudRecordingResponse;
