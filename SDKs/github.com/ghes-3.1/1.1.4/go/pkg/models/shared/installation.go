// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// InstallationRepositorySelectionEnum - Describe whether all repositories have been selected or there's a selection involved
type InstallationRepositorySelectionEnum string

const (
	InstallationRepositorySelectionEnumAll      InstallationRepositorySelectionEnum = "all"
	InstallationRepositorySelectionEnumSelected InstallationRepositorySelectionEnum = "selected"
)

func (e *InstallationRepositorySelectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "selected":
		*e = InstallationRepositorySelectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InstallationRepositorySelectionEnum: %s", s)
	}
}

// Installation - Installation
type Installation struct {
	AccessTokensURL        string      `json:"access_tokens_url"`
	Account                interface{} `json:"account"`
	AppID                  int64       `json:"app_id"`
	AppSlug                string      `json:"app_slug"`
	ContactEmail           *string     `json:"contact_email,omitempty"`
	CreatedAt              time.Time   `json:"created_at"`
	Events                 []string    `json:"events"`
	HasMultipleSingleFiles *bool       `json:"has_multiple_single_files,omitempty"`
	HTMLURL                string      `json:"html_url"`
	// The ID of the installation.
	ID int64 `json:"id"`
	// The permissions granted to the user-to-server access token.
	Permissions     AppPermissions `json:"permissions"`
	RepositoriesURL string         `json:"repositories_url"`
	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection InstallationRepositorySelectionEnum `json:"repository_selection"`
	SingleFileName      string                              `json:"single_file_name"`
	SingleFilePaths     []string                            `json:"single_file_paths,omitempty"`
	SuspendedAt         time.Time                           `json:"suspended_at"`
	// Simple User
	SuspendedBy NullableSimpleUser `json:"suspended_by"`
	// The ID of the user or organization this token is being scoped to.
	TargetID   int64     `json:"target_id"`
	TargetType string    `json:"target_type"`
	UpdatedAt  time.Time `json:"updated_at"`
}
