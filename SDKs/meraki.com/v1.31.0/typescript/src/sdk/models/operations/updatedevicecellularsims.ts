/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * SIM Failover settings.
 */
export class UpdateDeviceCellularSimsRequestBodySimFailover extends SpeakeasyBase {
  /**
   * Failover to secondary SIM (optional)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * APN auth type.
 */
export enum UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum {
  Chap = "chap",
  None = "none",
  Pap = "pap",
}

/**
 * APN authentication configurations.
 */
export class UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication extends SpeakeasyBase {
  /**
   * APN password, if type is set (if APN password is not supplied, the password is left unchanged).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  /**
   * APN auth type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: UpdateDeviceCellularSimsRequestBodySimsApnsAuthenticationTypeEnum;

  /**
   * APN username, if type is set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;
}

export class UpdateDeviceCellularSimsRequestBodySimsApns extends SpeakeasyBase {
  /**
   * IP versions to support (permitted values include 'ipv4', 'ipv6').
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowedIpTypes" })
  allowedIpTypes: string[];

  /**
   * APN authentication configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication" })
  @Type(() => UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication)
  authentication?: UpdateDeviceCellularSimsRequestBodySimsApnsAuthentication;

  /**
   * APN name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * SIM slot being configured. Must be 'sim1' on single-sim devices.
 */
export enum UpdateDeviceCellularSimsRequestBodySimsSlotEnum {
  Sim1 = "sim1",
  Sim2 = "sim2",
}

export class UpdateDeviceCellularSimsRequestBodySims extends SpeakeasyBase {
  /**
   * APN configurations. If empty, the default APN will be used.
   */
  @SpeakeasyMetadata({ elemType: UpdateDeviceCellularSimsRequestBodySimsApns })
  @Expose({ name: "apns" })
  @Type(() => UpdateDeviceCellularSimsRequestBodySimsApns)
  apns?: UpdateDeviceCellularSimsRequestBodySimsApns[];

  /**
   * If true, this SIM is used for boot. Must be true on single-sim devices.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isPrimary" })
  isPrimary?: boolean;

  /**
   * SIM slot being configured. Must be 'sim1' on single-sim devices.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slot" })
  slot?: UpdateDeviceCellularSimsRequestBodySimsSlotEnum;
}

export class UpdateDeviceCellularSimsRequestBody extends SpeakeasyBase {
  /**
   * SIM Failover settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "simFailover" })
  @Type(() => UpdateDeviceCellularSimsRequestBodySimFailover)
  simFailover?: UpdateDeviceCellularSimsRequestBodySimFailover;

  /**
   * List of SIMs. If a SIM was previously configured and not specified in this request, it will remain unchanged.
   */
  @SpeakeasyMetadata({ elemType: UpdateDeviceCellularSimsRequestBodySims })
  @Expose({ name: "sims" })
  @Type(() => UpdateDeviceCellularSimsRequestBodySims)
  sims?: UpdateDeviceCellularSimsRequestBodySims[];
}

export class UpdateDeviceCellularSimsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateDeviceCellularSimsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=serial",
  })
  serial: string;
}

export class UpdateDeviceCellularSimsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateDeviceCellularSims200ApplicationJSONObject?: Record<string, any>;
}
