/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * ErgoPay payment portal
 */
export class PaymentPortal {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new payment request. Will return request id to check for transaction state and ergopay url to show the user as QR code
   */
  addPaymentRequest(
    req: shared.CreatePaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddPaymentRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreatePaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/payment/addrequest";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddPaymentRequestResponse =
        new operations.AddPaymentRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.addPaymentRequest400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.addPaymentRequest401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.addPaymentRequest404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.addPaymentRequest409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the state of a payment request. Please note that payment requests are purged after some time, so persist the state at your side when needed
   */
  getPaymentState(
    req: operations.GetPaymentStateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentStateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentStateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/payment/state/{requestId}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentStateResponse =
        new operations.GetPaymentStateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getPaymentState400WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getPaymentState401WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getPaymentState404WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.getPaymentState409WildcardString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
