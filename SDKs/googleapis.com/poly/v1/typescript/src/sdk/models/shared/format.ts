/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { File } from "./file";
import { FormatComplexity } from "./formatcomplexity";
import { Expose, Type } from "class-transformer";

/**
 * The same asset can be represented in different formats, for example, a [WaveFront .obj](//en.wikipedia.org/wiki/Wavefront_.obj_file) file with its corresponding .mtl file or a [Khronos glTF](//www.khronos.org/gltf) file with its corresponding .glb binary data. A format refers to a specific representation of an asset and contains all information needed to retrieve and describe this representation.
 */
export class Format extends SpeakeasyBase {
  /**
   * Information on the complexity of this Format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formatComplexity" })
  @Type(() => FormatComplexity)
  formatComplexity?: FormatComplexity;

  /**
   * A short string that identifies the format type of this representation. Possible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formatType" })
  formatType?: string;

  /**
   * A list of dependencies of the root element. May include, but is not limited to, materials, textures, and shader programs.
   */
  @SpeakeasyMetadata({ elemType: File })
  @Expose({ name: "resources" })
  @Type(() => File)
  resources?: File[];

  /**
   * Represents a file in Poly, which can be a root, resource, or thumbnail file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "root" })
  @Type(() => File)
  root?: File;
}
