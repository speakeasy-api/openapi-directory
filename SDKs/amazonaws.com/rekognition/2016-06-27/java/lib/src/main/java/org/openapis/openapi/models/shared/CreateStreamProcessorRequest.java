/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateStreamProcessorRequest {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataSharingPreference")
    public StreamProcessorDataSharingPreference dataSharingPreference;
    public CreateStreamProcessorRequest withDataSharingPreference(StreamProcessorDataSharingPreference dataSharingPreference) {
        this.dataSharingPreference = dataSharingPreference;
        return this;
    }
    
    @JsonProperty("Input")
    public StreamProcessorInput input;
    public CreateStreamProcessorRequest withInput(StreamProcessorInput input) {
        this.input = input;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KmsKeyId")
    public String kmsKeyId;
    public CreateStreamProcessorRequest withKmsKeyId(String kmsKeyId) {
        this.kmsKeyId = kmsKeyId;
        return this;
    }
    
    @JsonProperty("Name")
    public String name;
    public CreateStreamProcessorRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * &lt;p&gt;The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation.&lt;/p&gt; &lt;p&gt;Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4.&lt;/p&gt; &lt;p&gt;Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotificationChannel")
    public StreamProcessorNotificationChannel notificationChannel;
    public CreateStreamProcessorRequest withNotificationChannel(StreamProcessorNotificationChannel notificationChannel) {
        this.notificationChannel = notificationChannel;
        return this;
    }
    
    @JsonProperty("Output")
    public StreamProcessorOutput output;
    public CreateStreamProcessorRequest withOutput(StreamProcessorOutput output) {
        this.output = output;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegionsOfInterest")
    public RegionOfInterest[] regionsOfInterest;
    public CreateStreamProcessorRequest withRegionsOfInterest(RegionOfInterest[] regionsOfInterest) {
        this.regionsOfInterest = regionsOfInterest;
        return this;
    }
    
    @JsonProperty("RoleArn")
    public String roleArn;
    public CreateStreamProcessorRequest withRoleArn(String roleArn) {
        this.roleArn = roleArn;
        return this;
    }
    
    @JsonProperty("Settings")
    public StreamProcessorSettings settings;
    public CreateStreamProcessorRequest withSettings(StreamProcessorSettings settings) {
        this.settings = settings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tags")
    public java.util.Map<String, String> tags;
    public CreateStreamProcessorRequest withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
}
