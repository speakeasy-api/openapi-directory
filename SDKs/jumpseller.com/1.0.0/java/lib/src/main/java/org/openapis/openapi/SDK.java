/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Endpoint Structure
 * 
 * All URLs are in the format: 
 * 
 * ```text
 * https://api.jumpseller.com/v1/path.json?login=XXXXXX&amp;authtoken=storetoken  
 * ```
 * 
 * The path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Version
 * 
 * The current version of the API is **v1**.  
 * If we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Authentication
 * 
 * The API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.
 * 
 * ![Store Login](/images/support/api/apilogin.png)
 * 
 * The auth token is a **32 characters** string.
 * 
 * If you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Curl Examples
 * 
 * To request all the products at your store, you would append the products index path to the base url to create an URL with the format:  
 * 
 * ```text
 * https://api.jumpseller.com/v1/products.json?login=XXXXXX&amp;authtoken=XXXXX
 * ```
 * 
 * In curl, you can invoque that URL with:  
 * 
 * ```text
 * curl -X GET "https://api.jumpseller.com/v1/products.json?login=XXXXXX&amp;authtoken=XXXXX"
 * ```
 * 
 * To create a product, you will include the JSON data and specify the MIME Type:  
 * 
 * ```text
 * curl -X POST -d '{ "product" : {"name": "My new Product!", "price": 100} }' "https://api.jumpseller.com/v1/products.json?login=XXXXXX&amp;authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 * 
 * and to update the product identified with 123:  
 * 
 * ```text
 * curl -X PUT -d '{ "product" : {"name": "My updated Product!", "price": 99} }' "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&amp;authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 * 
 * or delete it:  
 * 
 * ```text
 * curl -X DELETE "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&amp;authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # PHP Examples
 * 
 * Create a new Product (POST method)
 * 
 * ```php
 * $url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&amp;authtoken=XXXXX;
 * $ch = curl_init($url);
 * curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
 * curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
 * 
 * curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST"); //post method
 * curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "product" : {"name": "My updated Product!", "price": 99} }');
 * 
 * $result = curl_exec($ch);
 * print_r($result);
 * curl_close($ch);
 * ```
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Plain JSON only. No XML.
 * 
 * * We only support JSON for data serialization.
 * * Our node format has no root element.  
 * * We use snake_case to describe attribute keys (like "created_at").  
 * * All empty value are replaced with **null** strings.
 * * All API URLs end in .json to indicate that they accept and return JSON.
 * * POST and PUT methods require you to explicitly state the MIME type of your request's body content as **"application/json"**.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Rate Limit
 * You can perform a maximum of:
 * 
 * + 240 (two hundred forty) requests per minute and
 * + 8 (eight) requests per second 
 * 
 * If you exceed this limit, you'll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.  
 * 
 * The rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.
 * 
 * This limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:
 * 
 * ```ruby
 * tries = 0; max_tries = 3;
 * begin
 *   HTTParty.send(method, uri) # perform an API call.
 *   sleep 0.5
 *   tries += 1
 * rescue
 *   unless tries &gt;= max_tries
 *     sleep 1.0 # wait the necessary time before retrying the call again.
 *     retry
 *   end
 * end
 * ```
 * 
 * Finally, you can review the Response Headers of each request:
 * 
 * ```text
 * Jumpseller-PerMinuteRateLimit-Limit: 60  
 * Jumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval  
 * Jumpseller-PerSecondRateLimit-Limit: 2  
 * Jumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval
 * ``` 
 * 
 * to better model your application requests intervals.
 * 
 * In the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # Pagination
 * 
 * By default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&amp;limit=100`.
 * If the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&amp;page=2`, `&amp;page=3` and so on.
 * 
 * ```text
 * https://api.jumpseller.com/v1/products.json?login=XXXXXX&amp;authtoken=XXXXX&amp;page=3&amp;limit=100
 * ```
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * 
 * # More
 * * [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;
 * * [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;
 * * [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.
 * &lt;br/&gt;&lt;br/&gt;
 * ***
 * &lt;br/&gt;&lt;br/&gt;
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.jumpseller.com/v1",
	};
  	
    public Apps apps;
    public Categories categories;
    public CheckoutCustomFields checkoutCustomFields;
    public Countries countries;
    public CustomFieldSelectOptions customFieldSelectOptions;
    public CustomFields customFields;
    public CustomerAdditionalFields customerAdditionalFields;
    public CustomerCategories customerCategories;
    public Customers customers;
    public Fulfillments fulfillments;
    public Hooks hooks;
    public Orders orders;
    public Pages pages;
    public Partners partners;
    public PaymentMethods paymentMethods;
    public ProductAttachments productAttachments;
    public ProductCustomFields productCustomFields;
    public ProductDigitalProducts productDigitalProducts;
    public ProductImages productImages;
    public ProductOptionValues productOptionValues;
    public ProductOptions productOptions;
    public ProductVariants productVariants;
    public Products products;
    public Promotions promotions;
    public Regions regions;
    public ShippingMethods shippingMethods;
    public Stores stores;
    public Taxes taxes;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.apps = new Apps(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.categories = new Categories(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.checkoutCustomFields = new CheckoutCustomFields(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.countries = new Countries(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.customFieldSelectOptions = new CustomFieldSelectOptions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.customFields = new CustomFields(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.customerAdditionalFields = new CustomerAdditionalFields(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.customerCategories = new CustomerCategories(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.customers = new Customers(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.fulfillments = new Fulfillments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.hooks = new Hooks(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.orders = new Orders(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.pages = new Pages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.partners = new Partners(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.paymentMethods = new PaymentMethods(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productAttachments = new ProductAttachments(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productCustomFields = new ProductCustomFields(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productDigitalProducts = new ProductDigitalProducts(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productImages = new ProductImages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productOptionValues = new ProductOptionValues(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productOptions = new ProductOptions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productVariants = new ProductVariants(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.products = new Products(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.promotions = new Promotions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.regions = new Regions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.shippingMethods = new ShippingMethods(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.stores = new Stores(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.taxes = new Taxes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}