/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



public class DestinyDefinitionsRecordsDestinyRecordDefinition {
    
    public DestinyDefinitionsRecordsDestinyRecordCompletionBlock completionInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withCompletionInfo(DestinyDefinitionsRecordsDestinyRecordCompletionBlock completionInfo) {
        this.completionInfo = completionInfo;
        return this;
    }
    
    /**
     * Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
     */
    
    public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
        this.displayProperties = displayProperties;
        return this;
    }
    
    /**
     * If this record has an expiration after which it cannot be earned, this is some information about that expiration.
     */
    
    public DestinyDefinitionsRecordsDestinyRecordExpirationBlock expirationInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withExpirationInfo(DestinyDefinitionsRecordsDestinyRecordExpirationBlock expirationInfo) {
        this.expirationInfo = expirationInfo;
        return this;
    }
    
    
    public Boolean forTitleGilding;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withForTitleGilding(Boolean forTitleGilding) {
        this.forTitleGilding = forTitleGilding;
        return this;
    }
    
    /**
     * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
     * When entities refer to each other in Destiny content, it is this hash that they are referring to.
     */
    
    public Long hash;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withHash(Long hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * The index of the entity as it was found in the investment tables.
     */
    
    public Integer index;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withIndex(Integer index) {
        this.index = index;
        return this;
    }
    
    /**
     * Some records have multiple 'interval' objectives, and the record may be claimed at each completed interval
     */
    
    public DestinyDefinitionsRecordsDestinyRecordDefinitionIntervalInfo intervalInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withIntervalInfo(DestinyDefinitionsRecordsDestinyRecordDefinitionIntervalInfo intervalInfo) {
        this.intervalInfo = intervalInfo;
        return this;
    }
    
    
    public Long loreHash;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withLoreHash(Long loreHash) {
        this.loreHash = loreHash;
        return this;
    }
    
    
    public Long[] objectiveHashes;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withObjectiveHashes(Long[] objectiveHashes) {
        this.objectiveHashes = objectiveHashes;
        return this;
    }
    
    /**
     * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
     */
    
    public Long[] parentNodeHashes;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withParentNodeHashes(Long[] parentNodeHashes) {
        this.parentNodeHashes = parentNodeHashes;
        return this;
    }
    
    
    public DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withPresentationInfo(DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo) {
        this.presentationInfo = presentationInfo;
        return this;
    }
    
    
    public Integer presentationNodeType;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withPresentationNodeType(Integer presentationNodeType) {
        this.presentationNodeType = presentationNodeType;
        return this;
    }
    
    
    public Integer recordValueStyle;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withRecordValueStyle(Integer recordValueStyle) {
        this.recordValueStyle = recordValueStyle;
        return this;
    }
    
    /**
     * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
     */
    
    public Boolean redacted;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withRedacted(Boolean redacted) {
        this.redacted = redacted;
        return this;
    }
    
    /**
     * Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.
     */
    
    public DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock requirements;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withRequirements(DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock requirements) {
        this.requirements = requirements;
        return this;
    }
    
    /**
     * If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.
     *  However, note that some records intentionally have "hidden" rewards. These will not be returned in this list.
     */
    
    public DestinyDestinyItemQuantity[] rewardItems;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withRewardItems(DestinyDestinyItemQuantity[] rewardItems) {
        this.rewardItems = rewardItems;
        return this;
    }
    
    /**
     * Indicates whether this Record's state is determined on a per-character or on an account-wide basis.
     */
    
    public Integer scope;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withScope(Integer scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * A hint to show a large icon for a reward
     */
    
    public Boolean shouldShowLargeIcons;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withShouldShowLargeIcons(Boolean shouldShowLargeIcons) {
        this.shouldShowLargeIcons = shouldShowLargeIcons;
        return this;
    }
    
    
    public DestinyDefinitionsRecordsSchemaRecordStateBlock stateInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withStateInfo(DestinyDefinitionsRecordsSchemaRecordStateBlock stateInfo) {
        this.stateInfo = stateInfo;
        return this;
    }
    
    
    public DestinyDefinitionsRecordsDestinyRecordTitleBlock titleInfo;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withTitleInfo(DestinyDefinitionsRecordsDestinyRecordTitleBlock titleInfo) {
        this.titleInfo = titleInfo;
        return this;
    }
    
    
    public Long[] traitHashes;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withTraitHashes(Long[] traitHashes) {
        this.traitHashes = traitHashes;
        return this;
    }
    
    
    public String[] traitIds;
    public DestinyDefinitionsRecordsDestinyRecordDefinition withTraitIds(String[] traitIds) {
        this.traitIds = traitIds;
        return this;
    }
    
}
