/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HIUSubscriptionEventContent } from "./hiusubscriptioneventcontent";
import { SubscriptionCategoryEnum } from "./subscriptioncategoryenum";
import { Expose, Transform, Type } from "class-transformer";

export class HIUSubscriptionNotificationEvent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: SubscriptionCategoryEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  @Type(() => HIUSubscriptionEventContent)
  content: HIUSubscriptionEventContent;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "published" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  published: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionId" })
  subscriptionId: string;
}

export class HIUSubscriptionNotification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  @Type(() => HIUSubscriptionNotificationEvent)
  event: HIUSubscriptionNotificationEvent;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
