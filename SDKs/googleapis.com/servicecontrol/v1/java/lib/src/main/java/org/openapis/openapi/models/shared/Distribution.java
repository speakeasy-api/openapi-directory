/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Distribution - Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
 */
public class Distribution {
    /**
     * The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketCounts")
    public String[] bucketCounts;

    public Distribution withBucketCounts(String[] bucketCounts) {
        this.bucketCounts = bucketCounts;
        return this;
    }
    
    /**
     * The total number of samples in the distribution. Must be &gt;= 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    public String count;

    public Distribution withCount(String count) {
        this.count = count;
        return this;
    }
    
    /**
     * Example points. Must be in increasing order of `value` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemplars")
    public Exemplar[] exemplars;

    public Distribution withExemplars(Exemplar[] exemplars) {
        this.exemplars = exemplars;
        return this;
    }
    
    /**
     * Describing buckets with arbitrary user-provided width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicitBuckets")
    public ExplicitBuckets explicitBuckets;

    public Distribution withExplicitBuckets(ExplicitBuckets explicitBuckets) {
        this.explicitBuckets = explicitBuckets;
        return this;
    }
    
    /**
     * Describing buckets with exponentially growing width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exponentialBuckets")
    public ExponentialBuckets exponentialBuckets;

    public Distribution withExponentialBuckets(ExponentialBuckets exponentialBuckets) {
        this.exponentialBuckets = exponentialBuckets;
        return this;
    }
    
    /**
     * Describing buckets with constant width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linearBuckets")
    public LinearBuckets linearBuckets;

    public Distribution withLinearBuckets(LinearBuckets linearBuckets) {
        this.linearBuckets = linearBuckets;
        return this;
    }
    
    /**
     * The maximum of the population of values. Ignored if `count` is zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximum")
    public Double maximum;

    public Distribution withMaximum(Double maximum) {
        this.maximum = maximum;
        return this;
    }
    
    /**
     * The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mean")
    public Double mean;

    public Distribution withMean(Double mean) {
        this.mean = mean;
        return this;
    }
    
    /**
     * The minimum of the population of values. Ignored if `count` is zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum")
    public Double minimum;

    public Distribution withMinimum(Double minimum) {
        this.minimum = minimum;
        return this;
    }
    
    /**
     * The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sumOfSquaredDeviation")
    public Double sumOfSquaredDeviation;

    public Distribution withSumOfSquaredDeviation(Double sumOfSquaredDeviation) {
        this.sumOfSquaredDeviation = sumOfSquaredDeviation;
        return this;
    }
    
    public Distribution(){}
}
