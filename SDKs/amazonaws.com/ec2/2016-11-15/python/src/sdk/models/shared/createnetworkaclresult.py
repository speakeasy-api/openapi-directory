"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class CreateNetworkACLResultNetworkACLAssociations:
    r"""Describes an association between a network ACL and a subnet."""
    
    network_acl_association_id: Optional[str] = dataclasses.field(default=None)  
    network_acl_id: Optional[str] = dataclasses.field(default=None)  
    subnet_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLResultNetworkACLEntriesIcmpTypeCode:
    r"""ICMP protocol: The ICMP type and code."""
    
    code: Optional[int] = dataclasses.field(default=None)  
    type: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLResultNetworkACLEntriesPortRange:
    r"""TCP or UDP protocols: The range of ports the rule applies to."""
    
    from_: Optional[int] = dataclasses.field(default=None)  
    to: Optional[int] = dataclasses.field(default=None)  
    
class CreateNetworkACLResultNetworkACLEntriesRuleActionEnum(str, Enum):
    r"""Indicates whether to allow or deny the traffic that matches the rule."""
    ALLOW = 'allow'
    DENY = 'deny'


@dataclasses.dataclass
class CreateNetworkACLResultNetworkACLEntries:
    r"""Describes an entry in a network ACL."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None)  
    egress: Optional[bool] = dataclasses.field(default=None)  
    icmp_type_code: Optional[CreateNetworkACLResultNetworkACLEntriesIcmpTypeCode] = dataclasses.field(default=None)  
    ipv6_cidr_block: Optional[str] = dataclasses.field(default=None)  
    port_range: Optional[CreateNetworkACLResultNetworkACLEntriesPortRange] = dataclasses.field(default=None)  
    protocol: Optional[str] = dataclasses.field(default=None)  
    rule_action: Optional[CreateNetworkACLResultNetworkACLEntriesRuleActionEnum] = dataclasses.field(default=None)  
    rule_number: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLResultNetworkACLTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLResultNetworkACL:
    r"""Information about the network ACL."""
    
    associations: Optional[list[CreateNetworkACLResultNetworkACLAssociations]] = dataclasses.field(default=None)  
    entries: Optional[list[CreateNetworkACLResultNetworkACLEntries]] = dataclasses.field(default=None)  
    is_default: Optional[bool] = dataclasses.field(default=None)  
    network_acl_id: Optional[str] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    tags: Optional[list[CreateNetworkACLResultNetworkACLTags]] = dataclasses.field(default=None)  
    vpc_id: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateNetworkACLResult:
    r"""Success"""
    
    network_acl: Optional[CreateNetworkACLResultNetworkACL] = dataclasses.field(default=None)  
    