// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAuthorizeSnapshotAccessActionEnum
type GETAuthorizeSnapshotAccessActionEnum string

const (
	GETAuthorizeSnapshotAccessActionEnumAuthorizeSnapshotAccess GETAuthorizeSnapshotAccessActionEnum = "AuthorizeSnapshotAccess"
)

func (e GETAuthorizeSnapshotAccessActionEnum) ToPointer() *GETAuthorizeSnapshotAccessActionEnum {
	return &e
}

func (e *GETAuthorizeSnapshotAccessActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AuthorizeSnapshotAccess":
		*e = GETAuthorizeSnapshotAccessActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeSnapshotAccessActionEnum: %v", v)
	}
}

// GETAuthorizeSnapshotAccessVersionEnum
type GETAuthorizeSnapshotAccessVersionEnum string

const (
	GETAuthorizeSnapshotAccessVersionEnumTwoThousandAndTwelve1201 GETAuthorizeSnapshotAccessVersionEnum = "2012-12-01"
)

func (e GETAuthorizeSnapshotAccessVersionEnum) ToPointer() *GETAuthorizeSnapshotAccessVersionEnum {
	return &e
}

func (e *GETAuthorizeSnapshotAccessVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2012-12-01":
		*e = GETAuthorizeSnapshotAccessVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeSnapshotAccessVersionEnum: %v", v)
	}
}

type GETAuthorizeSnapshotAccessRequest struct {
	// <p>The identifier of the Amazon Web Services account authorized to restore the specified snapshot.</p> <p>To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.</p>
	AccountWithRestoreAccess string                               `queryParam:"style=form,explode=true,name=AccountWithRestoreAccess"`
	Action                   GETAuthorizeSnapshotAccessActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The Amazon Resource Name (ARN) of the snapshot to authorize access to.
	SnapshotArn *string `queryParam:"style=form,explode=true,name=SnapshotArn"`
	// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user or role has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
	SnapshotClusterIdentifier *string `queryParam:"style=form,explode=true,name=SnapshotClusterIdentifier"`
	// The identifier of the snapshot the account is authorized to restore.
	SnapshotIdentifier *string                               `queryParam:"style=form,explode=true,name=SnapshotIdentifier"`
	Version            GETAuthorizeSnapshotAccessVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm      *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAuthorizeSnapshotAccessResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
