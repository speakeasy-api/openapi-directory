"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UploadContentTypeEnum(str, Enum):
    r"""Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)"""
    IMAGE_VND_CLIMATE_THERMAL_GEOTIFF = 'image/vnd.climate.thermal.geotiff'
    IMAGE_VND_CLIMATE_NDVI_GEOTIFF = 'image/vnd.climate.ndvi.geotiff'
    IMAGE_VND_CLIMATE_RGB_GEOTIFF = 'image/vnd.climate.rgb.geotiff'
    IMAGE_VND_CLIMATE_RGB_NIR_GEOTIFF = 'image/vnd.climate.rgb-nir.geotiff'
    IMAGE_VND_CLIMATE_RGB_CIR_GEOTIFF = 'image/vnd.climate.rgb-cir.geotiff'
    IMAGE_VND_CLIMATE_WATERSTRESS_GEOTIFF = 'image/vnd.climate.waterstress.geotiff'
    IMAGE_VND_CLIMATE_ELEVATION_GEOTIFF = 'image/vnd.climate.elevation.geotiff'
    IMAGE_VND_CLIMATE_RAW_GEOTIFF = 'image/vnd.climate.raw.geotiff'
    APPLICATION_VND_CLIMATE_FIELD_GEOJSON = 'application/vnd.climate.field.geojson'
    APPLICATION_VND_CLIMATE_RX_PLANTING_SHP = 'application/vnd.climate.rx.planting.shp'
    APPLICATION_VND_CLIMATE_PRESCRIPTION_ZONES_SHP = 'application/vnd.climate.prescription.zones.shp'
    APPLICATION_VND_CLIMATE_MODUS_XML = 'application/vnd.climate.modus.xml'
    APPLICATION_VND_CLIMATE_STAND_COUNT_GEOJSON = 'application/vnd.climate.stand-count.geojson'
    APPLICATION_VND_CLIMATE_WEED_COUNT_GEOJSON = 'application/vnd.climate.weed-count.geojson'
    APPLICATION_VND_CLIMATE_AS_APPLIED_ZIP = 'application/vnd.climate.as-applied.zip'
    APPLICATION_VND_CLIMATE_AS_PLANTED_ZIP = 'application/vnd.climate.as-planted.zip'
    APPLICATION_VND_CLIMATE_AS_HARVESTED_ZIP = 'application/vnd.climate.as-harvested.zip'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Upload:
    r"""Client request to upload data for a user."""
    
    content_type: UploadContentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentType') }})
    r"""Content type representing data being uploaded (e.g. image/vnd.climate.rgb.geotiff)"""  
    length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})
    r"""Content size in bytes"""  
    md5: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5') }})
    r"""Base64 encoded md5 hash of the content"""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    