/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CompanyInfo - In the Codat system, company information includes standard commercial details about 
 * a linked company, such as their address, phone number, and company registration.
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=companyInfo) for this data type.
 * 
 */
public class CompanyInfo {
    /**
     * The available and current cash balances for the company's accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountBalances")
    public AccountBalance[] accountBalances;

    public CompanyInfo withAccountBalances(AccountBalance[] accountBalances) {
        this.accountBalances = accountBalances;
        return this;
    }
    
    /**
     * Addresses associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    public Address[] addresses;

    public CompanyInfo withAddresses(Address[] addresses) {
        this.addresses = addresses;
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseCurrency")
    public String baseCurrency;

    public CompanyInfo withBaseCurrency(String baseCurrency) {
        this.baseCurrency = baseCurrency;
        return this;
    }
    
    /**
     * Identifier or reference for the company in the commerce platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercePlatformRef")
    public String commercePlatformRef;

    public CompanyInfo withCommercePlatformRef(String commercePlatformRef) {
        this.commercePlatformRef = commercePlatformRef;
        return this;
    }
    
    /**
     * The full legal name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyLegalName")
    public String companyLegalName;

    public CompanyInfo withCompanyLegalName(String companyLegalName) {
        this.companyLegalName = companyLegalName;
        return this;
    }
    
    /**
     * The name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    public String companyName;

    public CompanyInfo withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    public String createdDate;

    public CompanyInfo withCreatedDate(String createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    public String modifiedDate;

    public CompanyInfo withModifiedDate(String modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * Phone numbers associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    public PhoneNumber[] phoneNumbers;

    public CompanyInfo withPhoneNumbers(PhoneNumber[] phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    /**
     * The registration number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    public String registrationNumber;

    public CompanyInfo withRegistrationNumber(String registrationNumber) {
        this.registrationNumber = registrationNumber;
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    public String sourceModifiedDate;

    public CompanyInfo withSourceModifiedDate(String sourceModifiedDate) {
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }
    
    /**
     * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceUrls")
    public java.util.Map<String, String> sourceUrls;

    public CompanyInfo withSourceUrls(java.util.Map<String, String> sourceUrls) {
        this.sourceUrls = sourceUrls;
        return this;
    }
    
    /**
     * Weblinks associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webLinks")
    public CompanyInfoWeblink[] webLinks;

    public CompanyInfo withWebLinks(CompanyInfoWeblink[] webLinks) {
        this.webLinks = webLinks;
        return this;
    }
    
    public CompanyInfo(){}
}
