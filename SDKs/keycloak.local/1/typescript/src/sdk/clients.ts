/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Clients {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the client
   */
  deleteRealmClientsId(
    req: operations.DeleteRealmClientsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmClientsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdResponse =
        new operations.DeleteRealmClientsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  deleteRealmClientsIdDefaultClientScopesClientScopeId(
    req: operations.DeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse =
        new operations.DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Unregister a cluster node from the client
   */
  deleteRealmClientsIdNodesNode(
    req: operations.DeleteRealmClientsIdNodesNodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdNodesNodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmClientsIdNodesNodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/nodes/{node}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdNodesNodeResponse =
        new operations.DeleteRealmClientsIdNodesNodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  deleteRealmClientsIdOptionalClientScopesClientScopeId(
    req: operations.DeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse =
        new operations.DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get clients belonging to the realm   Returns a list of clients belonging to the realm
   */
  getRealmClients(
    req: operations.GetRealmClientsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/clients", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsResponse =
        new operations.GetRealmClientsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clientRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ClientRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get representation of the client
   */
  getRealmClientsId(
    req: operations.GetRealmClientsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdResponse =
        new operations.GetRealmClientsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.ClientRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the client secret
   */
  getRealmClientsIdClientSecret(
    req: operations.GetRealmClientsIdClientSecretRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdClientSecretResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdClientSecretRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/client-secret",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdClientSecretResponse =
        new operations.GetRealmClientsIdClientSecretResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credentialRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.CredentialRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get default client scopes.
   */
  getRealmClientsIdDefaultClientScopes(
    req: operations.GetRealmClientsIdDefaultClientScopesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdDefaultClientScopesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdDefaultClientScopesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/default-client-scopes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdDefaultClientScopesResponse =
        new operations.GetRealmClientsIdDefaultClientScopesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientScopeRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clientScopeRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ClientScopeRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create JSON with payload of example access token
   */
  getRealmClientsIdEvaluateScopesGenerateExampleAccessToken(
    req: operations.GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse =
        new operations.GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessToken = utils.objectToClass(
              httpRes?.data,
              shared.AccessToken
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
   */
  getRealmClientsIdEvaluateScopesProtocolMappers(
    req: operations.GetRealmClientsIdEvaluateScopesProtocolMappersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdEvaluateScopesProtocolMappersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdEvaluateScopesProtocolMappersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdEvaluateScopesProtocolMappersResponse =
        new operations.GetRealmClientsIdEvaluateScopesProtocolMappersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientScopeEvaluateResourceProtocolMapperEvaluationRepresentations =
              [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clientScopeEvaluateResourceProtocolMapperEvaluationRepresentations =
              utils.objectToClass(
                httpRes?.data,
                shared.ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
   */
  getRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted(
    req: operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse =
        new operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
   */
  getRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted(
    req: operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse =
        new operations.GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.roleRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.roleRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.RoleRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  getRealmClientsIdInstallationProvidersProviderId(
    req: operations.GetRealmClientsIdInstallationProvidersProviderIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdInstallationProvidersProviderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdInstallationProvidersProviderIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/installation/providers/{providerId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdInstallationProvidersProviderIdResponse =
        new operations.GetRealmClientsIdInstallationProvidersProviderIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether client Authorization permissions have been initialized or not and a reference
   */
  getRealmClientsIdManagementPermissions(
    req: operations.GetRealmClientsIdManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdManagementPermissionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/management/permissions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdManagementPermissionsResponse =
        new operations.GetRealmClientsIdManagementPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get application offline session count   Returns a number of offline user sessions associated with this client   {      "count": number  }
   */
  getRealmClientsIdOfflineSessionCount(
    req: operations.GetRealmClientsIdOfflineSessionCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdOfflineSessionCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdOfflineSessionCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/offline-session-count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdOfflineSessionCountResponse =
        new operations.GetRealmClientsIdOfflineSessionCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmClientsIdOfflineSessionCount2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get offline sessions for client   Returns a list of offline user sessions associated with this client
   */
  getRealmClientsIdOfflineSessions(
    req: operations.GetRealmClientsIdOfflineSessionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdOfflineSessionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdOfflineSessionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/offline-sessions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdOfflineSessionsResponse =
        new operations.GetRealmClientsIdOfflineSessionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSessionRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userSessionRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.UserSessionRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get optional client scopes.
   */
  getRealmClientsIdOptionalClientScopes(
    req: operations.GetRealmClientsIdOptionalClientScopesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdOptionalClientScopesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdOptionalClientScopesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/optional-client-scopes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdOptionalClientScopesResponse =
        new operations.GetRealmClientsIdOptionalClientScopesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientScopeRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clientScopeRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ClientScopeRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a user dedicated to the service account
   */
  getRealmClientsIdServiceAccountUser(
    req: operations.GetRealmClientsIdServiceAccountUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdServiceAccountUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdServiceAccountUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/service-account-user",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdServiceAccountUserResponse =
        new operations.GetRealmClientsIdServiceAccountUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.UserRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get application session count   Returns a number of user sessions associated with this client   {      "count": number  }
   */
  getRealmClientsIdSessionCount(
    req: operations.GetRealmClientsIdSessionCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdSessionCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdSessionCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/session-count",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdSessionCountResponse =
        new operations.GetRealmClientsIdSessionCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmClientsIdSessionCount2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.
   */
  getRealmClientsIdTestNodesAvailable(
    req: operations.GetRealmClientsIdTestNodesAvailableRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdTestNodesAvailableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdTestNodesAvailableRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/test-nodes-available",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdTestNodesAvailableResponse =
        new operations.GetRealmClientsIdTestNodesAvailableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalRequestResult = utils.objectToClass(
              httpRes?.data,
              shared.GlobalRequestResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get user sessions for client   Returns a list of user sessions associated with this client
   */
  getRealmClientsIdUserSessions(
    req: operations.GetRealmClientsIdUserSessionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdUserSessionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdUserSessionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/user-sessions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdUserSessionsResponse =
        new operations.GetRealmClientsIdUserSessionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userSessionRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.userSessionRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.UserSessionRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new client   Client’s client_id must be unique!
   */
  postRealmClients(
    req: operations.PostRealmClientsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{realm}/clients", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "clientRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsResponse =
        new operations.PostRealmClientsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Generate a new secret for the client
   */
  postRealmClientsIdClientSecret(
    req: operations.PostRealmClientsIdClientSecretRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdClientSecretResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdClientSecretRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/client-secret",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdClientSecretResponse =
        new operations.PostRealmClientsIdClientSecretResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.credentialRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.CredentialRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
   */
  postRealmClientsIdNodes(
    req: operations.PostRealmClientsIdNodesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdNodesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdNodesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/nodes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdNodesResponse =
        new operations.PostRealmClientsIdNodesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
   */
  postRealmClientsIdPushRevocation(
    req: operations.PostRealmClientsIdPushRevocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdPushRevocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdPushRevocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/push-revocation",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdPushRevocationResponse =
        new operations.PostRealmClientsIdPushRevocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.globalRequestResult = utils.objectToClass(
              httpRes?.data,
              shared.GlobalRequestResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate a new registration access token for the client
   */
  postRealmClientsIdRegistrationAccessToken(
    req: operations.PostRealmClientsIdRegistrationAccessTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdRegistrationAccessTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdRegistrationAccessTokenRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/registration-access-token",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdRegistrationAccessTokenResponse =
        new operations.PostRealmClientsIdRegistrationAccessTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.ClientRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the client
   */
  putRealmClientsId(
    req: operations.PutRealmClientsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmClientsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "clientRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientsIdResponse =
        new operations.PutRealmClientsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  putRealmClientsIdDefaultClientScopesClientScopeId(
    req: operations.PutRealmClientsIdDefaultClientScopesClientScopeIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientsIdDefaultClientScopesClientScopeIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmClientsIdDefaultClientScopesClientScopeIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientsIdDefaultClientScopesClientScopeIdResponse =
        new operations.PutRealmClientsIdDefaultClientScopesClientScopeIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether client Authorization permissions have been initialized or not and a reference
   */
  putRealmClientsIdManagementPermissions(
    req: operations.PutRealmClientsIdManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientsIdManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmClientsIdManagementPermissionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/management/permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "managementPermissionReference",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientsIdManagementPermissionsResponse =
        new operations.PutRealmClientsIdManagementPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }

  putRealmClientsIdOptionalClientScopesClientScopeId(
    req: operations.PutRealmClientsIdOptionalClientScopesClientScopeIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientsIdOptionalClientScopesClientScopeIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmClientsIdOptionalClientScopesClientScopeIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientsIdOptionalClientScopesClientScopeIdResponse =
        new operations.PutRealmClientsIdOptionalClientScopesClientScopeIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
