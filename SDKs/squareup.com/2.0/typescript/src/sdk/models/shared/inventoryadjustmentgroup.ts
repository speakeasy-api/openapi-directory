/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export class InventoryAdjustmentGroup extends SpeakeasyBase {
  /**
   * Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
   *
   * @remarks
   * there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
   * Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from_state" })
  fromState?: string;

  /**
   * A unique ID generated by Square for the
   *
   * @remarks
   * `InventoryAdjustmentGroup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The inventory adjustment of the composed variation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "root_adjustment_id" })
  rootAdjustmentId?: string;

  /**
   * Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
   *
   * @remarks
   * the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.
   * Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_state" })
  toState?: string;
}
