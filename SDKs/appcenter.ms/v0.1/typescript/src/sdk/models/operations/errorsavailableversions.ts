/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ErrorsAvailableVersionsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * Controls whether or not to include a count of all the items across all pages.
 */
export enum ErrorsAvailableVersionsDollarInlinecountEnum {
  Allpages = "allpages",
  None = "none",
}

/**
 * Type of error (handled vs unhandled), including All
 */
export enum ErrorsAvailableVersionsErrorTypeEnum {
  All = "all",
  UnhandledError = "unhandledError",
  HandledError = "handledError",
}

export class ErrorsAvailableVersionsRequest extends SpeakeasyBase {
  /**
   * A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$filter",
  })
  dollarFilter?: string;

  /**
   * Controls whether or not to include a count of all the items across all pages.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$inlinecount",
  })
  dollarInlinecount?: ErrorsAvailableVersionsDollarInlinecountEnum;

  /**
   * The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=$skip" })
  dollarSkip?: number;

  /**
   * The maximum number of results to return. (0 will fetch all results till the max number.)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=$top" })
  dollarTop?: number;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * Last date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=end;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  end?: Date;

  /**
   * Type of error (handled vs unhandled), including All
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=errorType",
  })
  errorType?: ErrorsAvailableVersionsErrorTypeEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * Start date time in data in ISO 8601 date time format
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=start;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  start: Date;
}

export enum ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class ErrorsAvailableVersionsDefaultApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error code with reason.
 */
export class ErrorsAvailableVersionsDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorsAvailableVersionsDefaultApplicationJSONError)
  error: ErrorsAvailableVersionsDefaultApplicationJSONError;
}

/**
 * A list of available versions in the time range.
 */
export class ErrorsAvailableVersions200ApplicationJSON extends SpeakeasyBase {
  /**
   * The full number of versions across all pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_count" })
  totalCount?: number;

  /**
   * List of available versions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "versions" })
  versions?: string[];
}

export class ErrorsAvailableVersionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A list of available versions in the time range.
   */
  @SpeakeasyMetadata()
  errorsAvailableVersions200ApplicationJSONObject?: ErrorsAvailableVersions200ApplicationJSON;

  /**
   * Error code with reason.
   */
  @SpeakeasyMetadata()
  errorsAvailableVersionsDefaultApplicationJSONObject?: ErrorsAvailableVersionsDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
