"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import exportjobresource as shared_exportjobresource
from ..shared import jobstatus_enum as shared_jobstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExportJobResponse:
    r"""Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console."""
    
    application_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationId') }})  
    creation_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationDate') }})  
    definition: shared_exportjobresource.ExportJobResource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Definition') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    job_status: shared_jobstatus_enum.JobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobStatus') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    completed_pieces: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletedPieces'), 'exclude': lambda f: f is None }})  
    completion_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompletionDate'), 'exclude': lambda f: f is None }})  
    failed_pieces: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailedPieces'), 'exclude': lambda f: f is None }})  
    failures: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Failures'), 'exclude': lambda f: f is None }})  
    total_failures: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalFailures'), 'exclude': lambda f: f is None }})  
    total_pieces: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalPieces'), 'exclude': lambda f: f is None }})  
    total_processed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalProcessed'), 'exclude': lambda f: f is None }})  
    