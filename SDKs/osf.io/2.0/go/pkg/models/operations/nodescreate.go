// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// NodesCreateNodeAttributesCategoryEnum - The category of the node, as selected by project contributors.
type NodesCreateNodeAttributesCategoryEnum string

const (
	NodesCreateNodeAttributesCategoryEnumAnalysis           NodesCreateNodeAttributesCategoryEnum = "analysis"
	NodesCreateNodeAttributesCategoryEnumCommunication      NodesCreateNodeAttributesCategoryEnum = "communication"
	NodesCreateNodeAttributesCategoryEnumData               NodesCreateNodeAttributesCategoryEnum = "data"
	NodesCreateNodeAttributesCategoryEnumHypothesis         NodesCreateNodeAttributesCategoryEnum = "hypothesis"
	NodesCreateNodeAttributesCategoryEnumInstrumentation    NodesCreateNodeAttributesCategoryEnum = "instrumentation"
	NodesCreateNodeAttributesCategoryEnumMethodsAndMeasures NodesCreateNodeAttributesCategoryEnum = "methods and measures"
	NodesCreateNodeAttributesCategoryEnumProcedure          NodesCreateNodeAttributesCategoryEnum = "procedure"
	NodesCreateNodeAttributesCategoryEnumProject            NodesCreateNodeAttributesCategoryEnum = "project"
	NodesCreateNodeAttributesCategoryEnumSoftware           NodesCreateNodeAttributesCategoryEnum = "software"
	NodesCreateNodeAttributesCategoryEnumOther              NodesCreateNodeAttributesCategoryEnum = "other"
)

func (e *NodesCreateNodeAttributesCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "analysis":
		fallthrough
	case "communication":
		fallthrough
	case "data":
		fallthrough
	case "hypothesis":
		fallthrough
	case "instrumentation":
		fallthrough
	case "methods and measures":
		fallthrough
	case "procedure":
		fallthrough
	case "project":
		fallthrough
	case "software":
		fallthrough
	case "other":
		*e = NodesCreateNodeAttributesCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodesCreateNodeAttributesCategoryEnum: %s", s)
	}
}

// NodesCreateNodeAttributesInput - The properties of the node entity.
type NodesCreateNodeAttributesInput struct {
	// The category of the node, as selected by project contributors.
	Category NodesCreateNodeAttributesCategoryEnum `json:"category"`
	// The description of the node.
	Description *string `json:"description,omitempty"`
	// A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types).
	NodeLicense *string `json:"node_license,omitempty"`
	// Whether or not the node is publicly visible. This field is only editable by project administrators.
	Public *bool `json:"public,omitempty"`
	// A list of strings that describe this node, as entered by project contributors.
	Tags []string `json:"tags,omitempty"`
	// The unique ID of the node from which this node was templated, if this node was created from a template.
	TemplateFrom *string `json:"template_from,omitempty"`
	// The title of the node.
	Title string `json:"title"`
}

type NodesCreateNodeInput struct {
	// The properties of the node entity.
	Attributes NodesCreateNodeAttributesInput `json:"attributes"`
	// The type identifier of the node entity (`nodes`).
	Type string `json:"type"`
}

type NodesCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
