"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PayInstruction:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_pay_instruction(self, request: operations.DeletePayInstructionRequest) -> operations.DeletePayInstructionResponse:
        r"""Deletes a pay instruction
        Delete the specified pay instruction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_all_pay_instruction_tags(self, request: operations.GetAllPayInstructionTagsRequest) -> operations.GetAllPayInstructionTagsResponse:
        r"""Get all pay instruction tags
        Gets all the pay instruction tags
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllPayInstructionTagsRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllPayInstructionTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_instruction_from_employee(self, request: operations.GetPayInstructionFromEmployeeRequest) -> operations.GetPayInstructionFromEmployeeResponse:
        r"""Gets the specified pay instruction from the employee
        Returns the specified pay instruction from employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayInstructionFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayInstructionFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayInstruction])
                res.pay_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_instructions_from_employee(self, request: operations.GetPayInstructionsFromEmployeeRequest) -> operations.GetPayInstructionsFromEmployeeResponse:
        r"""Gets the pay instructions from the specified employee
        Get links to all pay instructions for the specified employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayInstructionsFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayInstructionsFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_pay_instructions_with_tag(self, request: operations.GetPayInstructionsWithTagRequest) -> operations.GetPayInstructionsWithTagResponse:
        r"""Get pay instructions with tag
        Gets the pay instructions with the tag
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayInstructionsWithTagRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayInstructionsWithTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def patch_pay_instruction(self, request: operations.PatchPayInstructionRequest) -> operations.PatchPayInstructionResponse:
        r"""Sparse Update of a Pay Instruction
        Patches the specified pay instruction with the supplied values
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchPayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "pay_instruction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchPayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayInstruction])
                res.pay_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_pay_instruction(self, request: operations.PostPayInstructionRequest) -> operations.PostPayInstructionResponse:
        r"""Creates a new Pay Instruction
        Creates a new pay instruction object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostPayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "pay_instruction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostPayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_pay_instruction(self, request: operations.PutPayInstructionRequest) -> operations.PutPayInstructionResponse:
        r"""Update a Pay Instruction
        Updates the existing specified pay instruction object
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPayInstructionRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "pay_instruction", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPayInstructionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayInstruction])
                res.pay_instruction = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    