// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EntityTypeEnum - Type of the entity.
type EntityTypeEnum string

const (
	EntityTypeEnumAirport  EntityTypeEnum = "airport"
	EntityTypeEnumBus      EntityTypeEnum = "bus"
	EntityTypeEnumCity     EntityTypeEnum = "city"
	EntityTypeEnumCountry  EntityTypeEnum = "country"
	EntityTypeEnumStreet   EntityTypeEnum = "street"
	EntityTypeEnumTourism  EntityTypeEnum = "tourism"
	EntityTypeEnumTownhall EntityTypeEnum = "townhall"
	EntityTypeEnumTrain    EntityTypeEnum = "train"
)

func (e EntityTypeEnum) ToPointer() *EntityTypeEnum {
	return &e
}

func (e *EntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "airport":
		fallthrough
	case "bus":
		fallthrough
	case "city":
		fallthrough
	case "country":
		fallthrough
	case "street":
		fallthrough
	case "tourism":
		fallthrough
	case "townhall":
		fallthrough
	case "train":
		*e = EntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTypeEnum: %v", v)
	}
}

type Entity struct {
	// Administrative name (region).
	Administrative *string `json:"administrative,omitempty"`
	// City name.
	City *string `json:"city,omitempty"`
	// Country name.
	Country *string `json:"country,omitempty"`
	// [Two-letter ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	Countrycode *string `json:"countrycode,omitempty"`
	// County name (department).
	County *string `json:"county,omitempty"`
	// Name of the current entity with highlighted matched words.
	Highlight *string `json:"highlight,omitempty"`
	// Latitude.
	Lat *float64 `json:"lat,omitempty"`
	// Longitude.
	Lng *float64 `json:"lng,omitempty"`
	// Name of the current entity.
	Name *string `json:"name,omitempty"`
	// Population number of the entity city.
	Population *int64 `json:"population,omitempty"`
	// Type of the entity.
	Type *EntityTypeEnum `json:"type,omitempty"`
	// Postcodes associated with the entity.
	Zipcode []string `json:"zipcode,omitempty"`
}
