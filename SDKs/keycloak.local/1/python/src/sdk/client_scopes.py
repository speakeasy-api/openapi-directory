"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientScopes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_client_scopes_id_(self, request: operations.DeleteRealmClientScopesIDRequest) -> operations.DeleteRealmClientScopesIDResponse:
        r"""Delete the client scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmClientScopesIDRequest, base_url, '/{realm}/client-scopes/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmClientScopesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_client_scopes(self, request: operations.GetRealmClientScopesRequest) -> operations.GetRealmClientScopesResponse:
        r"""Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesRequest, base_url, '/{realm}/client-scopes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ClientScopeRepresentation]])
                res.client_scope_representations = out

        return res

    def get_realm_client_scopes_id_(self, request: operations.GetRealmClientScopesIDRequest) -> operations.GetRealmClientScopesIDResponse:
        r"""Get representation of the client scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmClientScopesIDRequest, base_url, '/{realm}/client-scopes/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmClientScopesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientScopeRepresentation])
                res.client_scope_representation = out

        return res

    def post_realm_client_scopes(self, request: operations.PostRealmClientScopesRequest) -> operations.PostRealmClientScopesResponse:
        r"""Create a new client scope   Client Scopeâ€™s name must be unique!"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmClientScopesRequest, base_url, '/{realm}/client-scopes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_scope_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmClientScopesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_client_scopes_id_(self, request: operations.PutRealmClientScopesIDRequest) -> operations.PutRealmClientScopesIDResponse:
        r"""Update the client scope"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmClientScopesIDRequest, base_url, '/{realm}/client-scopes/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_scope_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmClientScopesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    