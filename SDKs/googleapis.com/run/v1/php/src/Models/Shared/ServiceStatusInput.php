<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ServiceStatusInput - The current state of the Service. Output only.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ServiceStatusInput
{
    /**
     * Information for connecting over HTTP(s).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Addressable $address
     */
	#[\JMS\Serializer\Annotation\SerializedName('address')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Addressable')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Addressable $address = null;
    
    /**
     * Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV1Condition> $conditions
     */
	#[\JMS\Serializer\Annotation\SerializedName('conditions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV1Condition>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $conditions = null;
    
    /**
     * Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
     * 
     * @var ?string $latestCreatedRevisionName
     */
	#[\JMS\Serializer\Annotation\SerializedName('latestCreatedRevisionName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $latestCreatedRevisionName = null;
    
    /**
     * Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
     * 
     * @var ?string $latestReadyRevisionName
     */
	#[\JMS\Serializer\Annotation\SerializedName('latestReadyRevisionName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $latestReadyRevisionName = null;
    
    /**
     * Returns the generation last fully processed by the system. This will only match metadata.generation when reconciliation is complete. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
     * 
     * @var ?int $observedGeneration
     */
	#[\JMS\Serializer\Annotation\SerializedName('observedGeneration')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $observedGeneration = null;
    
    /**
     * Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\TrafficTargetInput> $traffic
     */
	#[\JMS\Serializer\Annotation\SerializedName('traffic')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\TrafficTargetInput>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $traffic = null;
    
    /**
     * URL that will distribute traffic over the provided traffic targets. It generally has the form https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
	public function __construct()
	{
		$this->address = null;
		$this->conditions = null;
		$this->latestCreatedRevisionName = null;
		$this->latestReadyRevisionName = null;
		$this->observedGeneration = null;
		$this->traffic = null;
		$this->url = null;
	}
}
