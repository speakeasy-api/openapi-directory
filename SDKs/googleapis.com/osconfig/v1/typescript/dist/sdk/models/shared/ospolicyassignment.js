"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OSPolicyAssignmentInput = exports.OSPolicyAssignment = exports.OSPolicyAssignmentRolloutStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
var ospolicy_1 = require("./ospolicy");
var ospolicyassignmentinstancefilter_1 = require("./ospolicyassignmentinstancefilter");
var ospolicyassignmentrollout_1 = require("./ospolicyassignmentrollout");
var class_transformer_1 = require("class-transformer");
/**
 * Output only. OS policy assignment rollout state
 */
var OSPolicyAssignmentRolloutStateEnum;
(function (OSPolicyAssignmentRolloutStateEnum) {
    OSPolicyAssignmentRolloutStateEnum["RolloutStateUnspecified"] = "ROLLOUT_STATE_UNSPECIFIED";
    OSPolicyAssignmentRolloutStateEnum["InProgress"] = "IN_PROGRESS";
    OSPolicyAssignmentRolloutStateEnum["Cancelling"] = "CANCELLING";
    OSPolicyAssignmentRolloutStateEnum["Cancelled"] = "CANCELLED";
    OSPolicyAssignmentRolloutStateEnum["Succeeded"] = "SUCCEEDED";
})(OSPolicyAssignmentRolloutStateEnum = exports.OSPolicyAssignmentRolloutStateEnum || (exports.OSPolicyAssignmentRolloutStateEnum = {}));
/**
 * OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information about the OS policy resource definitions and examples, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 */
var OSPolicyAssignment = /** @class */ (function (_super) {
    __extends(OSPolicyAssignment, _super);
    function OSPolicyAssignment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baseline" }),
        __metadata("design:type", Boolean)
    ], OSPolicyAssignment.prototype, "baseline", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "deleted" }),
        __metadata("design:type", Boolean)
    ], OSPolicyAssignment.prototype, "deleted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "etag" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "etag", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceFilter" }),
        (0, class_transformer_1.Type)(function () { return ospolicyassignmentinstancefilter_1.OSPolicyAssignmentInstanceFilter; }),
        __metadata("design:type", ospolicyassignmentinstancefilter_1.OSPolicyAssignmentInstanceFilter)
    ], OSPolicyAssignment.prototype, "instanceFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ospolicy_1.OSPolicy }),
        (0, class_transformer_1.Expose)({ name: "osPolicies" }),
        (0, class_transformer_1.Type)(function () { return ospolicy_1.OSPolicy; }),
        __metadata("design:type", Array)
    ], OSPolicyAssignment.prototype, "osPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reconciling" }),
        __metadata("design:type", Boolean)
    ], OSPolicyAssignment.prototype, "reconciling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revisionCreateTime" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "revisionCreateTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "revisionId" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "revisionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rollout" }),
        (0, class_transformer_1.Type)(function () { return ospolicyassignmentrollout_1.OSPolicyAssignmentRollout; }),
        __metadata("design:type", ospolicyassignmentrollout_1.OSPolicyAssignmentRollout)
    ], OSPolicyAssignment.prototype, "rollout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rolloutState" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "rolloutState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "uid" }),
        __metadata("design:type", String)
    ], OSPolicyAssignment.prototype, "uid", void 0);
    return OSPolicyAssignment;
}(utils_1.SpeakeasyBase));
exports.OSPolicyAssignment = OSPolicyAssignment;
/**
 * OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information about the OS policy resource definitions and examples, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
 */
var OSPolicyAssignmentInput = /** @class */ (function (_super) {
    __extends(OSPolicyAssignmentInput, _super);
    function OSPolicyAssignmentInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], OSPolicyAssignmentInput.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "etag" }),
        __metadata("design:type", String)
    ], OSPolicyAssignmentInput.prototype, "etag", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceFilter" }),
        (0, class_transformer_1.Type)(function () { return ospolicyassignmentinstancefilter_1.OSPolicyAssignmentInstanceFilter; }),
        __metadata("design:type", ospolicyassignmentinstancefilter_1.OSPolicyAssignmentInstanceFilter)
    ], OSPolicyAssignmentInput.prototype, "instanceFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], OSPolicyAssignmentInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ospolicy_1.OSPolicy }),
        (0, class_transformer_1.Expose)({ name: "osPolicies" }),
        (0, class_transformer_1.Type)(function () { return ospolicy_1.OSPolicy; }),
        __metadata("design:type", Array)
    ], OSPolicyAssignmentInput.prototype, "osPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rollout" }),
        (0, class_transformer_1.Type)(function () { return ospolicyassignmentrollout_1.OSPolicyAssignmentRollout; }),
        __metadata("design:type", ospolicyassignmentrollout_1.OSPolicyAssignmentRollout)
    ], OSPolicyAssignmentInput.prototype, "rollout", void 0);
    return OSPolicyAssignmentInput;
}(utils_1.SpeakeasyBase));
exports.OSPolicyAssignmentInput = OSPolicyAssignmentInput;
