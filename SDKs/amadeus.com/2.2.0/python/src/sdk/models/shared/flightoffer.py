"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import baggageallowance as shared_baggageallowance
from ..shared import extended_price as shared_extended_price
from ..shared import flightoffersource_enum as shared_flightoffersource_enum
from ..shared import price as shared_price
from ..shared import pricingoptionsfaretype_enum as shared_pricingoptionsfaretype_enum
from ..shared import segment as shared_segment
from ..shared import servicename_enum as shared_servicename_enum
from ..shared import slicediceindicator_enum as shared_slicediceindicator_enum
from ..shared import travelclass_enum as shared_travelclass_enum
from ..shared import travelerpricingfareoption_enum as shared_travelerpricingfareoption_enum
from ..shared import travelertype_enum as shared_travelertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferItineraries:
    
    segments: list[shared_segment.Segment] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segments') }})  
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferPricingOptions:
    
    fare_type: Optional[list[shared_pricingoptionsfaretype_enum.PricingOptionsFareTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fareType'), 'exclude': lambda f: f is None }})
    r"""type of fare of the flight-offer"""  
    included_checked_bags_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedCheckedBagsOnly'), 'exclude': lambda f: f is None }})
    r"""If true, returns the flight-offers with included checked bags only"""  
    no_penalty_fare: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noPenaltyFare'), 'exclude': lambda f: f is None }})
    r"""If true, returns the flight-offers with no penalty fares only"""  
    no_restriction_fare: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noRestrictionFare'), 'exclude': lambda f: f is None }})
    r"""If true, returns the flight-offers with no restriction fares only"""  
    refundable_fare: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refundableFare'), 'exclude': lambda f: f is None }})
    r"""If true, returns the flight-offers with refundable fares only"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferTravelerPricingFareDetailsBySegmentAdditionalServicesRequest:
    
    chargeable_checked_bags: Optional[shared_baggageallowance.BaggageAllowance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeableCheckedBags'), 'exclude': lambda f: f is None }})
    r"""baggageAllowance"""  
    chargeable_seat_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeableSeatNumber'), 'exclude': lambda f: f is None }})
    r"""seat number"""  
    other_services: Optional[list[shared_servicename_enum.ServiceNameEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherServices'), 'exclude': lambda f: f is None }})
    r"""Other services to add"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferTravelerPricingFareDetailsBySegmentAllotmentDetails:
    
    tour_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourName'), 'exclude': lambda f: f is None }})  
    tour_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourReference'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferTravelerPricingFareDetailsBySegment:
    r"""Fare details of the segment"""
    
    segment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentId') }})
    r"""Id of the segment"""  
    additional_services: Optional[FlightOfferTravelerPricingFareDetailsBySegmentAdditionalServicesRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalServices'), 'exclude': lambda f: f is None }})  
    allotment_details: Optional[FlightOfferTravelerPricingFareDetailsBySegmentAllotmentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allotmentDetails'), 'exclude': lambda f: f is None }})  
    branded_fare: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandedFare'), 'exclude': lambda f: f is None }})
    r"""The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled"""  
    cabin: Optional[shared_travelclass_enum.TravelClassEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cabin'), 'exclude': lambda f: f is None }})
    r"""quality of service offered in the cabin where the seat is located in this flight. Economy, premium economy, business or first class"""  
    class_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('class'), 'exclude': lambda f: f is None }})
    r"""The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)"""  
    fare_basis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fareBasis'), 'exclude': lambda f: f is None }})
    r"""Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements."""  
    included_checked_bags: Optional[shared_baggageallowance.BaggageAllowance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedCheckedBags'), 'exclude': lambda f: f is None }})
    r"""baggageAllowance"""  
    is_allotment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAllotment'), 'exclude': lambda f: f is None }})
    r"""True if the corresponding booking class is in an allotment"""  
    slice_dice_indicator: Optional[shared_slicediceindicator_enum.SliceDiceIndicatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sliceDiceIndicator'), 'exclude': lambda f: f is None }})
    r"""slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOfferTravelerPricing:
    
    fare_details_by_segment: list[FlightOfferTravelerPricingFareDetailsBySegment] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fareDetailsBySegment') }})  
    fare_option: shared_travelerpricingfareoption_enum.TravelerPricingFareOptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fareOption') }})
    r"""option specifying a group of fares, which may be valid under certain conditons
    Can be used to specify special fare discount for a passenger
    """  
    traveler_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelerId') }})
    r"""Id of the traveler"""  
    traveler_type: shared_travelertype_enum.TravelerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelerType') }})
    r"""traveler type
    age restrictions : CHILD < 12y, HELD_INFANT < 2y, SEATED_INFANT < 2y, SENIOR >=60y
    """  
    associated_adult_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedAdultId'), 'exclude': lambda f: f is None }})
    r"""if type=\\"HELD_INFANT\\", corresponds to the adult traveler's id who will share the seat"""  
    price: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlightOffer:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Id of the flight offer"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""the resource name"""  
    disable_pricing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disablePricing'), 'exclude': lambda f: f is None }})
    r"""BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source \\"GDS\\" """  
    instant_ticketing_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instantTicketingRequired'), 'exclude': lambda f: f is None }})
    r"""If true, inform that a ticketing will be required at booking step."""  
    itineraries: Optional[list[FlightOfferItineraries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itineraries'), 'exclude': lambda f: f is None }})  
    last_ticketing_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTicketingDate'), 'exclude': lambda f: f is None }})
    r"""If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07"""  
    non_homogeneous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonHomogeneous'), 'exclude': lambda f: f is None }})
    r"""If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)"""  
    number_of_bookable_seats: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfBookableSeats'), 'exclude': lambda f: f is None }})
    r"""Number of seats bookable in a single request. Can not be higher than 9."""  
    one_way: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneWay'), 'exclude': lambda f: f is None }})
    r"""If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey."""  
    payment_card_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentCardRequired'), 'exclude': lambda f: f is None }})
    r"""If true, a payment card is mandatory to book this flight offer"""  
    price: Optional[shared_extended_price.ExtendedPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""price information"""  
    pricing_options: Optional[FlightOfferPricingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingOptions'), 'exclude': lambda f: f is None }})  
    source: Optional[shared_flightoffersource_enum.FlightOfferSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""source of the flight offer"""  
    traveler_pricings: Optional[list[FlightOfferTravelerPricing]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelerPricings'), 'exclude': lambda f: f is None }})
    r"""Fare information for each traveler/segment"""  
    validating_airline_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validatingAirlineCodes'), 'exclude': lambda f: f is None }})
    r"""This option ensures that the system will only consider these airlines."""  
    