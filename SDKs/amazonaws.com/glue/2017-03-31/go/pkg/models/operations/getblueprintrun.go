// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetBlueprintRunXAmzTargetEnum
type GetBlueprintRunXAmzTargetEnum string

const (
	GetBlueprintRunXAmzTargetEnumAwsGlueGetBlueprintRun GetBlueprintRunXAmzTargetEnum = "AWSGlue.GetBlueprintRun"
)

func (e *GetBlueprintRunXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSGlue.GetBlueprintRun":
		*e = GetBlueprintRunXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBlueprintRunXAmzTargetEnum: %s", s)
	}
}

type GetBlueprintRunRequest struct {
	GetBlueprintRunRequest shared.GetBlueprintRunRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             GetBlueprintRunXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetBlueprintRunResponse struct {
	ContentType string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetBlueprintRunResponse *shared.GetBlueprintRunResponse
	// InternalServiceException
	InternalServiceException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
