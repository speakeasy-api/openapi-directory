"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Oauth:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def authorize(self, request: operations.AuthorizeRequest) -> operations.AuthorizeResponse:
        r"""Authorize applications
        This endpoint returns a redirect URI (in the 'Location' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/oauth/authorize'
        
        query_params = utils.get_query_params(operations.AuthorizeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthorizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 302:
            if utils.match_content_type(content_type, 'text/html'):
                res.authorize_response = http_res.content
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def create_access_token_form(self, request: operations.CreateAccessTokenApplicationXWwwFormUrlencoded) -> operations.CreateAccessTokenFormResponse:
        r"""Get access tokens
        This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/oauth/access_token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccessTokenFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OauthAccessTokenResponse])
                res.oauth_access_token_response = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def create_access_token_json(self, request: operations.CreateAccessTokenApplicationJSON) -> operations.CreateAccessTokenJSONResponse:
        r"""Get access tokens
        This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/oauth/access_token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccessTokenJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OauthAccessTokenResponse])
                res.oauth_access_token_response = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    