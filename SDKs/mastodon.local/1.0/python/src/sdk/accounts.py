"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Accounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_api_v1_accounts_relationships(self, request: operations.GetAPIV1AccountsRelationshipsRequest, security: operations.GetAPIV1AccountsRelationshipsSecurity) -> operations.GetAPIV1AccountsRelationshipsResponse:
        r"""Sets a private note on a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/accounts/relationships'
        
        query_params = utils.get_query_params(operations.GetAPIV1AccountsRelationshipsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Relationship]])
                res.relationships = out
        elif http_res.status_code in [401, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v1_accounts_search(self, request: operations.GetAPIV1AccountsSearchRequest, security: operations.GetAPIV1AccountsSearchSecurity) -> operations.GetAPIV1AccountsSearchResponse:
        r"""Search for matching accounts by username or display name."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/accounts/search'
        
        query_params = utils.get_query_params(operations.GetAPIV1AccountsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Account]])
                res.accounts = out
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v1_accounts_verify_credentials(self) -> operations.GetAPIV1AccountsVerifyCredentialsResponse:
        r"""Test to make sure that the user token works."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/accounts/verify_credentials'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsVerifyCredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v1_accounts_id_(self, request: operations.GetAPIV1AccountsIDRequest, security: operations.GetAPIV1AccountsIDSecurity) -> operations.GetAPIV1AccountsIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDRequest, base_url, '/api/v1/accounts/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def get_api_v1_accounts_id_featured_tags(self, request: operations.GetAPIV1AccountsIDFeaturedTagsRequest, security: operations.GetAPIV1AccountsIDFeaturedTagsSecurity) -> operations.GetAPIV1AccountsIDFeaturedTagsResponse:
        r"""Tags featured by this account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDFeaturedTagsRequest, base_url, '/api/v1/accounts/{id}/featured_tags', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDFeaturedTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FeaturedTag]])
                res.featured_tags = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_api_v1_accounts_id_followers(self, request: operations.GetAPIV1AccountsIDFollowersRequest, security: operations.GetAPIV1AccountsIDFollowersSecurity) -> operations.GetAPIV1AccountsIDFollowersResponse:
        r"""Accounts which follow the given account, if network is not hidden by the account owner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDFollowersRequest, base_url, '/api/v1/accounts/{id}/followers', request)
        
        query_params = utils.get_query_params(operations.GetAPIV1AccountsIDFollowersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDFollowersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Account]])
                res.accounts = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def get_api_v1_accounts_id_following(self, request: operations.GetAPIV1AccountsIDFollowingRequest, security: operations.GetAPIV1AccountsIDFollowingSecurity) -> operations.GetAPIV1AccountsIDFollowingResponse:
        r"""Accounts which the given account is following, if network is not hidden by the account owner."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDFollowingRequest, base_url, '/api/v1/accounts/{id}/following', request)
        
        query_params = utils.get_query_params(operations.GetAPIV1AccountsIDFollowingRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDFollowingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Account]])
                res.accounts = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def get_api_v1_accounts_id_identity_proofs(self, request: operations.GetAPIV1AccountsIDIdentityProofsRequest, security: operations.GetAPIV1AccountsIDIdentityProofsSecurity) -> operations.GetAPIV1AccountsIDIdentityProofsResponse:
        r"""Array of IdentityProof"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDIdentityProofsRequest, base_url, '/api/v1/accounts/{id}/identity_proofs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDIdentityProofsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.IdentityProof]])
                res.identity_proofs = out
        elif http_res.status_code in [404, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def get_api_v1_accounts_id_lists(self, request: operations.GetAPIV1AccountsIDListsRequest, security: operations.GetAPIV1AccountsIDListsSecurity) -> operations.GetAPIV1AccountsIDListsResponse:
        r"""User lists that you have added this account to."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDListsRequest, base_url, '/api/v1/accounts/{id}/lists', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDListsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.List]])
                res.lists = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def get_api_v1_accounts_id_statuses(self, request: operations.GetAPIV1AccountsIDStatusesRequest, security: operations.GetAPIV1AccountsIDStatusesSecurity) -> operations.GetAPIV1AccountsIDStatusesResponse:
        r"""Statuses posted to the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAPIV1AccountsIDStatusesRequest, base_url, '/api/v1/accounts/{id}/statuses', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAPIV1AccountsIDStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Status]])
                res.statuses = out
        elif http_res.status_code in [401, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 410:
            pass

        return res

    def patch_api_v1_accounts_update_credentials(self, request: bytes, security: operations.PatchAPIV1AccountsUpdateCredentialsSecurity) -> operations.PatchAPIV1AccountsUpdateCredentialsResponse:
        r"""Update the user's display and preferences."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/accounts/update_credentials'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchAPIV1AccountsUpdateCredentialsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Account])
                res.account = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts(self, request: bytes, security: operations.PostAPIV1AccountsSecurity) -> operations.PostAPIV1AccountsResponse:
        r"""Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_v1_accounts_id_block(self, request: operations.PostAPIV1AccountsIDBlockRequest, security: operations.PostAPIV1AccountsIDBlockSecurity) -> operations.PostAPIV1AccountsIDBlockResponse:
        r"""Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDBlockRequest, base_url, '/api/v1/accounts/{id}/block', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDBlockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_follow(self, request: operations.PostAPIV1AccountsIDFollowRequest, security: operations.PostAPIV1AccountsIDFollowSecurity) -> operations.PostAPIV1AccountsIDFollowResponse:
        r"""Follow the given account. Can also be used to update whether to show reblogs or enable notifications."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDFollowRequest, base_url, '/api/v1/accounts/{id}/follow', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDFollowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_mute(self, request: operations.PostAPIV1AccountsIDMuteRequest, security: operations.PostAPIV1AccountsIDMuteSecurity) -> operations.PostAPIV1AccountsIDMuteResponse:
        r"""Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDMuteRequest, base_url, '/api/v1/accounts/{id}/mute', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDMuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_note(self, request: operations.PostAPIV1AccountsIDNoteRequest, security: operations.PostAPIV1AccountsIDNoteSecurity) -> operations.PostAPIV1AccountsIDNoteResponse:
        r"""Sets a private note on a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDNoteRequest, base_url, '/api/v1/accounts/{id}/note', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDNoteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 422:
            pass

        return res

    def post_api_v1_accounts_id_pin(self, request: operations.PostAPIV1AccountsIDPinRequest, security: operations.PostAPIV1AccountsIDPinSecurity) -> operations.PostAPIV1AccountsIDPinResponse:
        r"""Add the given account to the user's featured profiles. (Featured profiles are currently shown on the user's own public profile.)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDPinRequest, base_url, '/api/v1/accounts/{id}/pin', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDPinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code in [401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_unblock(self, request: operations.PostAPIV1AccountsIDUnblockRequest, security: operations.PostAPIV1AccountsIDUnblockSecurity) -> operations.PostAPIV1AccountsIDUnblockResponse:
        r"""Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDUnblockRequest, base_url, '/api/v1/accounts/{id}/unblock', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDUnblockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_unfollow(self, request: operations.PostAPIV1AccountsIDUnfollowRequest, security: operations.PostAPIV1AccountsIDUnfollowSecurity) -> operations.PostAPIV1AccountsIDUnfollowResponse:
        r"""Unfollow the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDUnfollowRequest, base_url, '/api/v1/accounts/{id}/unfollow', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDUnfollowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_unmute(self, request: operations.PostAPIV1AccountsIDUnmuteRequest, security: operations.PostAPIV1AccountsIDUnmuteSecurity) -> operations.PostAPIV1AccountsIDUnmuteResponse:
        r"""Unmute the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDUnmuteRequest, base_url, '/api/v1/accounts/{id}/unmute', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDUnmuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_api_v1_accounts_id_unpin(self, request: operations.PostAPIV1AccountsIDUnpinRequest, security: operations.PostAPIV1AccountsIDUnpinSecurity) -> operations.PostAPIV1AccountsIDUnpinResponse:
        r"""Remove the given account from the user's featured profiles."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAPIV1AccountsIDUnpinRequest, base_url, '/api/v1/accounts/{id}/unpin', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIV1AccountsIDUnpinResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Relationship])
                res.relationship = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code == 422:
            pass

        return res

    