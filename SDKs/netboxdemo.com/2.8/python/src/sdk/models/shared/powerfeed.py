"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nestedpowerpanel as shared_nestedpowerpanel
from ..shared import nestedrack as shared_nestedrack
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class PowerFeedPhaseLabelEnum(str, Enum):
    SINGLE_PHASE = 'Single phase'
    THREE_PHASE = 'Three-phase'

class PowerFeedPhaseValueEnum(str, Enum):
    SINGLE_PHASE = 'single-phase'
    THREE_PHASE = 'three-phase'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerFeedPhase:
    
    label: PowerFeedPhaseLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: PowerFeedPhaseValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class PowerFeedStatusLabelEnum(str, Enum):
    OFFLINE = 'Offline'
    ACTIVE = 'Active'
    PLANNED = 'Planned'
    FAILED = 'Failed'

class PowerFeedStatusValueEnum(str, Enum):
    OFFLINE = 'offline'
    ACTIVE = 'active'
    PLANNED = 'planned'
    FAILED = 'failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerFeedStatus:
    
    label: PowerFeedStatusLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: PowerFeedStatusValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class PowerFeedSupplyLabelEnum(str, Enum):
    AC = 'AC'
    DC = 'DC'

class PowerFeedSupplyValueEnum(str, Enum):
    AC = 'ac'
    DC = 'dc'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerFeedSupply:
    
    label: PowerFeedSupplyLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: PowerFeedSupplyValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class PowerFeedTypeLabelEnum(str, Enum):
    PRIMARY = 'Primary'
    REDUNDANT = 'Redundant'

class PowerFeedTypeValueEnum(str, Enum):
    PRIMARY = 'primary'
    REDUNDANT = 'redundant'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerFeedType:
    
    label: PowerFeedTypeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: PowerFeedTypeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerFeed:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    power_panel: shared_nestedpowerpanel.NestedPowerPanel = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power_panel') }})  
    amperage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amperage'), 'exclude': lambda f: f is None }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    created: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_updated: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    max_utilization: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_utilization'), 'exclude': lambda f: f is None }})
    r"""Maximum permissible draw (percentage)"""  
    phase: Optional[PowerFeedPhase] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phase'), 'exclude': lambda f: f is None }})  
    rack: Optional[shared_nestedrack.NestedRack] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rack'), 'exclude': lambda f: f is None }})  
    status: Optional[PowerFeedStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    supply: Optional[PowerFeedSupply] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supply'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[PowerFeedType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    voltage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltage'), 'exclude': lambda f: f is None }})  
    