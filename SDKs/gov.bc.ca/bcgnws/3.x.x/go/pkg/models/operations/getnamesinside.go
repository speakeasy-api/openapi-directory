// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesInsideEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesInsideEmbedEnum int64

const (
	GetNamesInsideEmbedEnumZero GetNamesInsideEmbedEnum = 0
	GetNamesInsideEmbedEnumOne  GetNamesInsideEmbedEnum = 1
)

func (e GetNamesInsideEmbedEnum) ToPointer() *GetNamesInsideEmbedEnum {
	return &e
}

func (e *GetNamesInsideEmbedEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesInsideEmbedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesInsideEmbedEnum: %v", v)
	}
}

// GetNamesInsideOutputFormatEnum - The format of the output.
type GetNamesInsideOutputFormatEnum string

const (
	GetNamesInsideOutputFormatEnumJSON GetNamesInsideOutputFormatEnum = "json"
	GetNamesInsideOutputFormatEnumXML  GetNamesInsideOutputFormatEnum = "xml"
	GetNamesInsideOutputFormatEnumKml  GetNamesInsideOutputFormatEnum = "kml"
	GetNamesInsideOutputFormatEnumCsv  GetNamesInsideOutputFormatEnum = "csv"
)

func (e GetNamesInsideOutputFormatEnum) ToPointer() *GetNamesInsideOutputFormatEnum {
	return &e
}

func (e *GetNamesInsideOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesInsideOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesInsideOutputFormatEnum: %v", v)
	}
}

// GetNamesInsideOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesInsideOutputSrsEnum int64

const (
	GetNamesInsideOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesInsideOutputSrsEnum = 4326
	GetNamesInsideOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesInsideOutputSrsEnum = 4269
	GetNamesInsideOutputSrsEnumThreeThousandAndFive                   GetNamesInsideOutputSrsEnum = 3005
	GetNamesInsideOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesInsideOutputSrsEnum = 3857
	GetNamesInsideOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesInsideOutputSrsEnum = 26907
	GetNamesInsideOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesInsideOutputSrsEnum = 26908
	GetNamesInsideOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesInsideOutputSrsEnum = 26909
	GetNamesInsideOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesInsideOutputSrsEnum = 26910
	GetNamesInsideOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesInsideOutputSrsEnum = 26911
)

func (e GetNamesInsideOutputSrsEnum) ToPointer() *GetNamesInsideOutputSrsEnum {
	return &e
}

func (e *GetNamesInsideOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 3857:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetNamesInsideOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesInsideOutputSrsEnum: %v", v)
	}
}

// GetNamesInsideOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesInsideOutputStyleEnum string

const (
	GetNamesInsideOutputStyleEnumSummary GetNamesInsideOutputStyleEnum = "summary"
	GetNamesInsideOutputStyleEnumDetail  GetNamesInsideOutputStyleEnum = "detail"
)

func (e GetNamesInsideOutputStyleEnum) ToPointer() *GetNamesInsideOutputStyleEnum {
	return &e
}

func (e *GetNamesInsideOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesInsideOutputStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesInsideOutputStyleEnum: %v", v)
	}
}

// GetNamesInsideSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesInsideSortByEnum string

const (
	GetNamesInsideSortByEnumName         GetNamesInsideSortByEnum = "name"
	GetNamesInsideSortByEnumFeatureType  GetNamesInsideSortByEnum = "featureType"
	GetNamesInsideSortByEnumDecisionDate GetNamesInsideSortByEnum = "decisionDate"
)

func (e GetNamesInsideSortByEnum) ToPointer() *GetNamesInsideSortByEnum {
	return &e
}

func (e *GetNamesInsideSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesInsideSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesInsideSortByEnum: %v", v)
	}
}

type GetNamesInsideRequest struct {
	// A geographic bounding box defining the search area.  Must be specified as a string of the form 'minLongitude,minLatitude,maxLongitude,maxLatitude' (WGS84). e.g. -119,49,-118,50
	Bbox string `queryParam:"style=form,explode=true,name=bbox"`
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesInsideEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// The format of the output.
	OutputFormat GetNamesInsideOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesInsideOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesInsideOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesInsideSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type GetNamesInsideResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
