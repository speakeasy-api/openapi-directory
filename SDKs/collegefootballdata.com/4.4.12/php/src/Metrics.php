<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Metrics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Team Predicated Points Added (PPA/EPA) by game
     * 
     * Predicted Points Added (PPA) by game
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGamePPARequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGamePPAResponse
     */
	public function getGamePPA(
        \OpenAPI\OpenAPI\Models\Operations\GetGamePPARequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGamePPAResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ppa/games');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGamePPARequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGamePPAResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamePPAS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GamePPA>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     * 
     * Predicted Points Added (PPA) by player game
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPARequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPAResponse
     */
	public function getPlayerGamePPA(
        \OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPARequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPAResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ppa/players/games');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPARequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPlayerGamePPAResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGamePPAS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGamePPA>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     * 
     * Predicted Points Added (PPA) by player season
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPARequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPAResponse
     */
	public function getPlayerSeasonPPA(
        \OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPARequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPAResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ppa/players/season');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPARequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPlayerSeasonPPAResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonPPAS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonPPA>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Predicted Points (i.e. Expected Points or EP)
     * 
     * Predicted Points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsResponse
     */
	public function getPredictedPoints(
        \OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ppa/predicted');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPredictedPointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->predictedPoints = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PredictedPoints>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Pregame win probability data
     * 
     * Pregame win probabilities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesResponse
     */
	public function getPregameWinProbabilities(
        \OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/wp/pregame');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPregameWinProbabilitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pregameWPS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PregameWP>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Predicted Points Added (PPA/EPA) data by team
     * 
     * Predicted Points Added (PPA)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamPPARequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamPPAResponse
     */
	public function getTeamPPA(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamPPARequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamPPAResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ppa/teams');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTeamPPARequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamPPAResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamPPAS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamPPA>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Win probability chart data
     * 
     * Win probability data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataResponse
     */
	public function getWinProbabilityData(
        \OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/metrics/wp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWinProbabilityDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playWPS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayWP>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}