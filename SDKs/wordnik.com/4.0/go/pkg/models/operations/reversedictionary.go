// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ReverseDictionaryExcludeSourceDictionariesEnum - Exclude these comma-delimited source dictionaries
type ReverseDictionaryExcludeSourceDictionariesEnum string

const (
	ReverseDictionaryExcludeSourceDictionariesEnumAhd        ReverseDictionaryExcludeSourceDictionariesEnum = "ahd"
	ReverseDictionaryExcludeSourceDictionariesEnumCentury    ReverseDictionaryExcludeSourceDictionariesEnum = "century"
	ReverseDictionaryExcludeSourceDictionariesEnumCmu        ReverseDictionaryExcludeSourceDictionariesEnum = "cmu"
	ReverseDictionaryExcludeSourceDictionariesEnumMacmillan  ReverseDictionaryExcludeSourceDictionariesEnum = "macmillan"
	ReverseDictionaryExcludeSourceDictionariesEnumWiktionary ReverseDictionaryExcludeSourceDictionariesEnum = "wiktionary"
	ReverseDictionaryExcludeSourceDictionariesEnumWebster    ReverseDictionaryExcludeSourceDictionariesEnum = "webster"
	ReverseDictionaryExcludeSourceDictionariesEnumWordnet    ReverseDictionaryExcludeSourceDictionariesEnum = "wordnet"
)

func (e *ReverseDictionaryExcludeSourceDictionariesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ahd":
		fallthrough
	case "century":
		fallthrough
	case "cmu":
		fallthrough
	case "macmillan":
		fallthrough
	case "wiktionary":
		fallthrough
	case "webster":
		fallthrough
	case "wordnet":
		*e = ReverseDictionaryExcludeSourceDictionariesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReverseDictionaryExcludeSourceDictionariesEnum: %s", s)
	}
}

// ReverseDictionaryIncludeSourceDictionariesEnum - Only include these comma-delimited source dictionaries
type ReverseDictionaryIncludeSourceDictionariesEnum string

const (
	ReverseDictionaryIncludeSourceDictionariesEnumAhd        ReverseDictionaryIncludeSourceDictionariesEnum = "ahd"
	ReverseDictionaryIncludeSourceDictionariesEnumCentury    ReverseDictionaryIncludeSourceDictionariesEnum = "century"
	ReverseDictionaryIncludeSourceDictionariesEnumCmu        ReverseDictionaryIncludeSourceDictionariesEnum = "cmu"
	ReverseDictionaryIncludeSourceDictionariesEnumMacmillan  ReverseDictionaryIncludeSourceDictionariesEnum = "macmillan"
	ReverseDictionaryIncludeSourceDictionariesEnumWiktionary ReverseDictionaryIncludeSourceDictionariesEnum = "wiktionary"
	ReverseDictionaryIncludeSourceDictionariesEnumWebster    ReverseDictionaryIncludeSourceDictionariesEnum = "webster"
	ReverseDictionaryIncludeSourceDictionariesEnumWordnet    ReverseDictionaryIncludeSourceDictionariesEnum = "wordnet"
)

func (e *ReverseDictionaryIncludeSourceDictionariesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ahd":
		fallthrough
	case "century":
		fallthrough
	case "cmu":
		fallthrough
	case "macmillan":
		fallthrough
	case "wiktionary":
		fallthrough
	case "webster":
		fallthrough
	case "wordnet":
		*e = ReverseDictionaryIncludeSourceDictionariesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReverseDictionaryIncludeSourceDictionariesEnum: %s", s)
	}
}

// ReverseDictionaryIncludeTagsEnum - Return a closed set of XML tags in response
type ReverseDictionaryIncludeTagsEnum string

const (
	ReverseDictionaryIncludeTagsEnumFalse ReverseDictionaryIncludeTagsEnum = "false"
	ReverseDictionaryIncludeTagsEnumTrue  ReverseDictionaryIncludeTagsEnum = "true"
)

func (e *ReverseDictionaryIncludeTagsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = ReverseDictionaryIncludeTagsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReverseDictionaryIncludeTagsEnum: %s", s)
	}
}

// ReverseDictionarySortByEnum - Attribute to sort by
type ReverseDictionarySortByEnum string

const (
	ReverseDictionarySortByEnumAlpha ReverseDictionarySortByEnum = "alpha"
	ReverseDictionarySortByEnumCount ReverseDictionarySortByEnum = "count"
)

func (e *ReverseDictionarySortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alpha":
		fallthrough
	case "count":
		*e = ReverseDictionarySortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReverseDictionarySortByEnum: %s", s)
	}
}

// ReverseDictionarySortOrderEnum - Sort direction
type ReverseDictionarySortOrderEnum string

const (
	ReverseDictionarySortOrderEnumAsc  ReverseDictionarySortOrderEnum = "asc"
	ReverseDictionarySortOrderEnumDesc ReverseDictionarySortOrderEnum = "desc"
)

func (e *ReverseDictionarySortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = ReverseDictionarySortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReverseDictionarySortOrderEnum: %s", s)
	}
}

type ReverseDictionaryQueryParams struct {
	// Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
	ExcludePartOfSpeech *string `queryParam:"style=form,explode=true,name=excludePartOfSpeech"`
	// Exclude these comma-delimited source dictionaries
	ExcludeSourceDictionaries *ReverseDictionaryExcludeSourceDictionariesEnum `queryParam:"style=form,explode=true,name=excludeSourceDictionaries"`
	// Expand terms
	ExpandTerms *string `queryParam:"style=form,explode=true,name=expandTerms"`
	// Restricts words and finds closest sense
	FindSenseForWord *string `queryParam:"style=form,explode=true,name=findSenseForWord"`
	// Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
	IncludePartOfSpeech *string `queryParam:"style=form,explode=true,name=includePartOfSpeech"`
	// Only include these comma-delimited source dictionaries
	IncludeSourceDictionaries *ReverseDictionaryIncludeSourceDictionariesEnum `queryParam:"style=form,explode=true,name=includeSourceDictionaries"`
	// Return a closed set of XML tags in response
	IncludeTags *ReverseDictionaryIncludeTagsEnum `queryParam:"style=form,explode=true,name=includeTags"`
	// Maximum number of results to return
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Maximum corpus frequency for terms
	MaxCorpusCount *int `queryParam:"style=form,explode=true,name=maxCorpusCount"`
	// Maximum word length
	MaxLength *int `queryParam:"style=form,explode=true,name=maxLength"`
	// Minimum corpus frequency for terms
	MinCorpusCount *int `queryParam:"style=form,explode=true,name=minCorpusCount"`
	// Minimum word length
	MinLength *int `queryParam:"style=form,explode=true,name=minLength"`
	// Search term
	Query string `queryParam:"style=form,explode=true,name=query"`
	// Results to skip
	Skip *string `queryParam:"style=form,explode=true,name=skip"`
	// Attribute to sort by
	SortBy *ReverseDictionarySortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// Sort direction
	SortOrder *ReverseDictionarySortOrderEnum `queryParam:"style=form,explode=true,name=sortOrder"`
}

type ReverseDictionaryRequest struct {
	QueryParams ReverseDictionaryQueryParams
}

type ReverseDictionaryResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
