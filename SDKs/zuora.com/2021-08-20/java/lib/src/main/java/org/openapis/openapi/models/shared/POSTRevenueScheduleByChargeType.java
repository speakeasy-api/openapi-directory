/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * POSTRevenueScheduleByChargeType - Container for custom fields of a Revenue Schedule object.
 * 
 */
public class POSTRevenueScheduleByChargeType {
    /**
     * The revenue schedule amount, which is the sum of all revenue items. This field cannot be null and must be formatted based on the currency, such as `JPY 30` or `USD 30.15`. Test out the currency to ensure you are using the proper formatting otherwise, the response will fail and this error message is returned: `Allocation amount with wrong decimal places.`
     * 
     */
    @JsonProperty("amount")
    public String amount;
    public POSTRevenueScheduleByChargeType withAmount(String amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The accounting code for deferred revenue, such as Monthly Recurring Liability. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deferredRevenueAccountingCode")
    public String deferredRevenueAccountingCode;
    public POSTRevenueScheduleByChargeType withDeferredRevenueAccountingCode(String deferredRevenueAccountingCode) {
        this.deferredRevenueAccountingCode = deferredRevenueAccountingCode;
        return this;
    }
    
    /**
     * The type of the deferred revenue accounting code, such as Deferred Revenue. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deferredRevenueAccountingCodeType")
    public String deferredRevenueAccountingCodeType;
    public POSTRevenueScheduleByChargeType withDeferredRevenueAccountingCodeType(String deferredRevenueAccountingCodeType) {
        this.deferredRevenueAccountingCodeType = deferredRevenueAccountingCodeType;
        return this;
    }
    
    /**
     * Additional information about this record.
     * 
     * Character Limit: 2,000
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public POSTRevenueScheduleByChargeType withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * When overriding accounting codes from a charge, `recognizedRevenueAccountingCode` and `deferredRevenue AccountingCode` must be in the request body and can have the empty value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overrideChargeAccountingCodes")
    public POSTRevenueScheduleByChargeTypeOverrideChargeAccountingCodesEnum overrideChargeAccountingCodes;
    public POSTRevenueScheduleByChargeType withOverrideChargeAccountingCodes(POSTRevenueScheduleByChargeTypeOverrideChargeAccountingCodesEnum overrideChargeAccountingCodes) {
        this.overrideChargeAccountingCodes = overrideChargeAccountingCodes;
        return this;
    }
    
    /**
     * The accounting code for recognized revenue, such as Monthly Recurring Charges or Overage Charges. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, the value is ignored.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recognizedRevenueAccountingCode")
    public String recognizedRevenueAccountingCode;
    public POSTRevenueScheduleByChargeType withRecognizedRevenueAccountingCode(String recognizedRevenueAccountingCode) {
        this.recognizedRevenueAccountingCode = recognizedRevenueAccountingCode;
        return this;
    }
    
    /**
     * The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount. Required only when `overrideChargeAccountingCodes` is `true`. Otherwise, this value is ignored.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recognizedRevenueAccountingCodeType")
    public String recognizedRevenueAccountingCodeType;
    public POSTRevenueScheduleByChargeType withRecognizedRevenueAccountingCodeType(String recognizedRevenueAccountingCodeType) {
        this.recognizedRevenueAccountingCodeType = recognizedRevenueAccountingCodeType;
        return this;
    }
    
    /**
     * Reference ID is used only in the custom unlimited rule to create a revenue schedule. In this scenario, the revenue schedule is not linked to an invoice item or invoice item adjustment.
     * 
     * Character Limit: 100
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceId")
    public String referenceId;
    public POSTRevenueScheduleByChargeType withReferenceId(String referenceId) {
        this.referenceId = referenceId;
        return this;
    }
    
    /**
     * An array of revenue distributions. Represents how you want to distribute revenue for this revenue schedule. You can distribute revenue into a maximum of 250 accounting periods with one revenue schedule.
     * 
     * The sum of the newAmount fields must be equal to the amount field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenueDistributions")
    public POSTDistributionItemType[] revenueDistributions;
    public POSTRevenueScheduleByChargeType withRevenueDistributions(POSTDistributionItemType[] revenueDistributions) {
        this.revenueDistributions = revenueDistributions;
        return this;
    }
    
    /**
     * Represents a change to a revenue schedule, such as posting an invoice or distributing revenue.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenueEvent")
    public POSTRevenueScheduleByChargeTypeRevenueEvent revenueEvent;
    public POSTRevenueScheduleByChargeType withRevenueEvent(POSTRevenueScheduleByChargeTypeRevenueEvent revenueEvent) {
        this.revenueEvent = revenueEvent;
        return this;
    }
    
    /**
     * The effective date of the revenue schedule. For example, the revenue schedule date for bookings-based revenue recognition is typically set to the order date or contract date.
     * 
     * The date cannot be in a closed accounting period. The date must be in `yyyy-mm-dd` format.
     * 
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("revenueScheduleDate")
    public LocalDate revenueScheduleDate;
    public POSTRevenueScheduleByChargeType withRevenueScheduleDate(LocalDate revenueScheduleDate) {
        this.revenueScheduleDate = revenueScheduleDate;
        return this;
    }
    
}
