"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CounterMetadataKindEnum(str, Enum):
    r"""Counter aggregation kind."""
    INVALID = 'INVALID'
    SUM = 'SUM'
    MAX = 'MAX'
    MIN = 'MIN'
    MEAN = 'MEAN'
    OR = 'OR'
    AND = 'AND'
    SET = 'SET'
    DISTRIBUTION = 'DISTRIBUTION'
    LATEST_VALUE = 'LATEST_VALUE'

class CounterMetadataStandardUnitsEnum(str, Enum):
    r"""System defined Units, see above enum."""
    BYTES = 'BYTES'
    BYTES_PER_SEC = 'BYTES_PER_SEC'
    MILLISECONDS = 'MILLISECONDS'
    MICROSECONDS = 'MICROSECONDS'
    NANOSECONDS = 'NANOSECONDS'
    TIMESTAMP_MSEC = 'TIMESTAMP_MSEC'
    TIMESTAMP_USEC = 'TIMESTAMP_USEC'
    TIMESTAMP_NSEC = 'TIMESTAMP_NSEC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CounterMetadata:
    r"""CounterMetadata includes all static non-name non-value counter attributes."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Human-readable description of the counter semantics."""  
    kind: Optional[CounterMetadataKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Counter aggregation kind."""  
    other_units: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherUnits'), 'exclude': lambda f: f is None }})
    r"""A string referring to the unit type."""  
    standard_units: Optional[CounterMetadataStandardUnitsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standardUnits'), 'exclude': lambda f: f is None }})
    r"""System defined Units, see above enum."""  
    