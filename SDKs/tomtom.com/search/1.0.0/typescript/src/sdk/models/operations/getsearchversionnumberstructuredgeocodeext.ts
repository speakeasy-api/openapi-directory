/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetSearchVersionNumberStructuredGeocodeExtRequest extends SpeakeasyBase {
  /**
   * 2 or 3 letter country code (e.g.: FR, ES).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countryCode",
  })
  countryCode: string;

  /**
   * The county for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countrySecondarySubdivision",
  })
  countrySecondarySubdivision?: string;

  /**
   * The state or province for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countrySubdivision",
  })
  countrySubdivision?: string;

  /**
   * The named area for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=countryTertiarySubdivision",
  })
  countryTertiarySubdivision?: string;

  /**
   * The cross street name for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=crossStreet",
  })
  crossStreet?: string;

  /**
   * Expected response format.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=ext" })
  ext: shared.ExtEnum;

  /**
   * Indexes for which extended postal codes should be included in the results. Available indexes are:
   *
   * @remarks
   *   - <b>Addr</b> = Address ranges
   *   - <b>Geo</b> = Geographies
   *   - <b>PAD</b> = Point Addresses
   *   - <b>POI</b> = Points of Interest
   *   - <b>Str</b> = Streets
   *   - <b>XStr</b> = Cross Streets (intersections)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=extendedPostalCodesFor",
  })
  extendedPostalCodesFor?: string;

  /**
   * Language in which search results should be returned. Should be one of <a href="/search-api/search-api-documentation/supported-languages">supported IETF language tags</a>, case insensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language",
  })
  language?: string;

  /**
   * Maximum number of search results that will be returned.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * The municipality (city/town) for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=municipality",
  })
  municipality?: string;

  /**
   * The municipality subdivision (sub/super city) for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=municipalitySubdivision",
  })
  municipalitySubdivision?: string;

  /**
   * Starting offset of the returned results within the full result set.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ofs" })
  ofs?: number;

  /**
   * The zip code or postal code for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=postalCode",
  })
  postalCode?: string;

  /**
   * The street name for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=streetName",
  })
  streetName?: string;

  /**
   * The street number for the structured address.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=streetNumber",
  })
  streetNumber?: string;

  /**
   * Service version number. The current value is 2.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=versionNumber",
  })
  versionNumber: shared.VersionNumberEnum;
}

export class GetSearchVersionNumberStructuredGeocodeExtResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
