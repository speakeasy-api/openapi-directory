// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchIssuesAndPullRequestsSortEnum - Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.3/rest/reference/search#ranking-search-results)
type SearchIssuesAndPullRequestsSortEnum string

const (
	SearchIssuesAndPullRequestsSortEnumComments              SearchIssuesAndPullRequestsSortEnum = "comments"
	SearchIssuesAndPullRequestsSortEnumReactions             SearchIssuesAndPullRequestsSortEnum = "reactions"
	SearchIssuesAndPullRequestsSortEnumReactionsPlus1        SearchIssuesAndPullRequestsSortEnum = "reactions-+1"
	SearchIssuesAndPullRequestsSortEnumReactions1            SearchIssuesAndPullRequestsSortEnum = "reactions--1"
	SearchIssuesAndPullRequestsSortEnumReactionsSmile        SearchIssuesAndPullRequestsSortEnum = "reactions-smile"
	SearchIssuesAndPullRequestsSortEnumReactionsThinkingFace SearchIssuesAndPullRequestsSortEnum = "reactions-thinking_face"
	SearchIssuesAndPullRequestsSortEnumReactionsHeart        SearchIssuesAndPullRequestsSortEnum = "reactions-heart"
	SearchIssuesAndPullRequestsSortEnumReactionsTada         SearchIssuesAndPullRequestsSortEnum = "reactions-tada"
	SearchIssuesAndPullRequestsSortEnumInteractions          SearchIssuesAndPullRequestsSortEnum = "interactions"
	SearchIssuesAndPullRequestsSortEnumCreated               SearchIssuesAndPullRequestsSortEnum = "created"
	SearchIssuesAndPullRequestsSortEnumUpdated               SearchIssuesAndPullRequestsSortEnum = "updated"
)

func (e *SearchIssuesAndPullRequestsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "comments":
		fallthrough
	case "reactions":
		fallthrough
	case "reactions-+1":
		fallthrough
	case "reactions--1":
		fallthrough
	case "reactions-smile":
		fallthrough
	case "reactions-thinking_face":
		fallthrough
	case "reactions-heart":
		fallthrough
	case "reactions-tada":
		fallthrough
	case "interactions":
		fallthrough
	case "created":
		fallthrough
	case "updated":
		*e = SearchIssuesAndPullRequestsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchIssuesAndPullRequestsSortEnum: %s", s)
	}
}

type SearchIssuesAndPullRequestsQueryParams struct {
	// Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
	Order *shared.OrderEnum `queryParam:"style=form,explode=true,name=order"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.3/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/enterprise-server@3.3/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
	Q string `queryParam:"style=form,explode=true,name=q"`
	// Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.3/rest/reference/search#ranking-search-results)
	Sort *SearchIssuesAndPullRequestsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type SearchIssuesAndPullRequestsRequest struct {
	QueryParams SearchIssuesAndPullRequestsQueryParams
}

// SearchIssuesAndPullRequests503ApplicationJSON - Service unavailable
type SearchIssuesAndPullRequests503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

// SearchIssuesAndPullRequests200ApplicationJSON - Response
type SearchIssuesAndPullRequests200ApplicationJSON struct {
	IncompleteResults bool                           `json:"incomplete_results"`
	Items             []shared.IssueSearchResultItem `json:"items"`
	TotalCount        int64                          `json:"total_count"`
}

type SearchIssuesAndPullRequestsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	SearchIssuesAndPullRequests200ApplicationJSONObject *SearchIssuesAndPullRequests200ApplicationJSON
	// Service unavailable
	SearchIssuesAndPullRequests503ApplicationJSONObject *SearchIssuesAndPullRequests503ApplicationJSON
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
