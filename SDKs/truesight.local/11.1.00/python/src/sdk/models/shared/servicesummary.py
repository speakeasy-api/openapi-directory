"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import devicesummary as shared_devicesummary
from typing import Optional


@dataclasses.dataclass
class ServiceSummary:
    r"""Successful operation"""
    
    cost_unit: Optional[str] = dataclasses.field(default=None)
    r"""The currency in which all energy cost values are being expressed."""  
    device_summaries: Optional[list[shared_devicesummary.DeviceSummary]] = dataclasses.field(default=None)
    r"""The list of devices attached to the service.<br><u>Note</u>: when using the <b>Services</b> service, this list is always empty. It is populated only when using the <b>Service Details</b> service."""  
    emitted_co2_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which all CO<sub>2</sub> emission values are being expressed."""  
    energy_consumption_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which all energy consumption values are being expressed."""  
    heating_margin: Optional[float] = dataclasses.field(default=None)
    r"""The lowest heating margin among the heating margins of the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_coverage: Optional[float] = dataclasses.field(default=None)
    r"""The percentage of devices attached to the service, whose heating margin could be found.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_device_name: Optional[str] = dataclasses.field(default=None)
    r"""The name of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_device_url: Optional[str] = dataclasses.field(default=None)
    r"""The link to the details of the device having the lowest heating margin.<br><u>Note</u>:This field will only be present if a value could be found."""  
    heating_margin_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the heating margin of the service is being expressed."""  
    history_parent_id_key: Optional[str] = dataclasses.field(default=None)
    r"""The name of the key used to identify the service in the history table."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The ID of the service."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""The name of the service."""  
    number_of_devices: Optional[int] = dataclasses.field(default=None)
    r"""The number of devices attached to the service."""  
    one_day_confidence: Optional[float] = dataclasses.field(default=None)
    r"""The confidence score (percentage) for the daily energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are."""  
    one_day_cost: Optional[float] = dataclasses.field(default=None)
    r"""The daily cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_day_emitted_co2: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one day.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_day_energy_consumption: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of energy consumed by the devices attached to the service during one day."""  
    one_month_confidence: Optional[float] = dataclasses.field(default=None)
    r"""The confidence score (percentage) for the monthly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are."""  
    one_month_cost: Optional[float] = dataclasses.field(default=None)
    r"""The monthly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_month_emitted_co2: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of CO<sub>2</sub> emitted by the devices attached to the service during one month.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_month_energy_consumption: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of energy consumed by the devices attached to the service during one month."""  
    one_year_confidence: Optional[float] = dataclasses.field(default=None)
    r"""The confidence score (percentage) for the yearly energy consumption, energy cost and CO<sub>2</sub> emission values.<br>The lower the confidence score, the more extrapolated the values are."""  
    one_year_cost: Optional[float] = dataclasses.field(default=None)
    r"""The yearly cost of the energy consumed by the devices attached to the service.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_year_emitted_co2: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of CO<sub>2</sub> emitted by the devices attached to the service in one year.<br><u>Note</u>:This field will only be present if a value could be computed."""  
    one_year_energy_consumption: Optional[float] = dataclasses.field(default=None)
    r"""The quantity of energy consumed by the devices attached to the service during one year."""  
    provider_id: Optional[str] = dataclasses.field(default=None)
    r"""The ID of the server providing the service."""  
    total_power_consumption: Optional[float] = dataclasses.field(default=None)
    r"""The total power consumption of the devices attached to the service."""  
    total_power_consumption_unit: Optional[str] = dataclasses.field(default=None)
    r"""The unit in which the total power consumption of the devices attached to the service is being expressed."""  
    update_timestamp: Optional[int] = dataclasses.field(default=None)
    r"""The data collection time (as an Epoch time, in seconds)."""  
    url: Optional[str] = dataclasses.field(default=None)
    r"""The link to the service details."""  
    