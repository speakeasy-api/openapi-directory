"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import siteentity as shared_siteentity
from typing import Any, Optional


@dataclasses.dataclass
class PatchSiteRequestBodyBundleWatermarkAttachmentFile:
    
    bundle_watermark_attachment_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'bundle_watermark_attachment_file' }})  
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    

@dataclasses.dataclass
class PatchSiteRequestBodyIcon128File:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    icon128_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'icon128_file' }})  
    

@dataclasses.dataclass
class PatchSiteRequestBodyIcon16File:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    icon16_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'icon16_file' }})  
    

@dataclasses.dataclass
class PatchSiteRequestBodyIcon32File:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    icon32_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'icon32_file' }})  
    

@dataclasses.dataclass
class PatchSiteRequestBodyIcon48File:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    icon48_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'icon48_file' }})  
    

@dataclasses.dataclass
class PatchSiteRequestBodyLogoFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    logo_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'logo_file' }})  
    

@dataclasses.dataclass
class PatchSiteRequestBody:
    
    active_sftp_host_key_id: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'active_sftp_host_key_id' }})
    r"""Id of the currently selected custom SFTP Host Key"""  
    allow_bundle_names: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allow_bundle_names' }})
    r"""Are manual Bundle names allowed?"""  
    allowed_2fa_method_bypass_for_ftp_sftp_dav: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_bypass_for_ftp_sftp_dav' }})
    r"""Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?"""  
    allowed_2fa_method_sms: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_sms' }})
    r"""Is SMS two factor authentication allowed?"""  
    allowed_2fa_method_totp: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_totp' }})
    r"""Is TOTP two factor authentication allowed?"""  
    allowed_2fa_method_u2f: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_u2f' }})
    r"""Is U2F two factor authentication allowed?"""  
    allowed_2fa_method_webauthn: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_webauthn' }})
    r"""Is WebAuthn two factor authentication allowed?"""  
    allowed_2fa_method_yubi: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_2fa_method_yubi' }})
    r"""Is yubikey two factor authentication allowed?"""  
    allowed_countries: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_countries' }})
    r"""Comma seperated list of allowed Country codes"""  
    allowed_ips: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_ips' }})
    r"""List of allowed IP addresses"""  
    ask_about_overwrites: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ask_about_overwrites' }})
    r"""If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface."""  
    bundle_activity_notifications: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_activity_notifications' }})
    r"""Do Bundle owners receive activity notifications?"""  
    bundle_expiration: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_expiration' }})
    r"""Site-wide Bundle expiration in days"""  
    bundle_password_required: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_password_required' }})
    r"""Do Bundles require password protection?"""  
    bundle_registration_notifications: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_registration_notifications' }})
    r"""Do Bundle owners receive registration notification?"""  
    bundle_require_share_recipient: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_require_share_recipient' }})
    r"""Do Bundles require recipients for sharing?"""  
    bundle_upload_receipt_notifications: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_upload_receipt_notifications' }})
    r"""Do Bundle uploaders receive upload confirmation notifications?"""  
    bundle_watermark_attachment_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_watermark_attachment_delete' }})
    r"""If true, will delete the file stored in bundle_watermark_attachment"""  
    bundle_watermark_attachment_file: Optional[PatchSiteRequestBodyBundleWatermarkAttachmentFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    bundle_watermark_value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bundle_watermark_value', 'json': True }})
    r"""Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value"""  
    color2_left: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'color2_left' }})
    r"""Page link and button color"""  
    color2_link: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'color2_link' }})
    r"""Top bar link color"""  
    color2_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'color2_text' }})
    r"""Page link and button color"""  
    color2_top: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'color2_top' }})
    r"""Top bar background color"""  
    color2_top_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'color2_top_text' }})
    r"""Top bar text color"""  
    custom_namespace: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'custom_namespace' }})
    r"""Is this site using a custom namespace for users?"""  
    days_to_retain_backups: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'days_to_retain_backups' }})
    r"""Number of days to keep deleted files"""  
    default_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'default_time_zone' }})
    r"""Site default time zone"""  
    desktop_app: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'desktop_app' }})
    r"""Is the desktop app enabled?"""  
    desktop_app_session_ip_pinning: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'desktop_app_session_ip_pinning' }})
    r"""Is desktop app session IP pinning enabled?"""  
    desktop_app_session_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'desktop_app_session_lifetime' }})
    r"""Desktop app session lifetime (in hours)"""  
    disable_2fa_with_delay: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disable_2fa_with_delay' }})
    r"""If set to true, we will begin the process of disabling 2FA on this site."""  
    disable_files_certificate_generation: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disable_files_certificate_generation' }})
    r"""If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain."""  
    disable_password_reset: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disable_password_reset' }})
    r"""Is password reset disabled?"""  
    disable_users_from_inactivity_period_days: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disable_users_from_inactivity_period_days' }})
    r"""If greater than zero, users will unable to login if they do not show activity within this number of days."""  
    disallowed_countries: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disallowed_countries' }})
    r"""Comma seperated list of disallowed Country codes"""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'domain' }})
    r"""Custom domain"""  
    domain_hsts_header: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'domain_hsts_header' }})
    r"""Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?"""  
    domain_letsencrypt_chain: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'domain_letsencrypt_chain' }})
    r"""Letsencrypt chain to use when registering SSL Certificate for domain."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'email' }})
    r"""Main email for this site"""  
    folder_permissions_groups_only: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'folder_permissions_groups_only' }})
    r"""If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user."""  
    ftp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ftp_enabled' }})
    r"""Is FTP enabled?"""  
    icon128_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'icon128_delete' }})
    r"""If true, will delete the file stored in icon128"""  
    icon128_file: Optional[PatchSiteRequestBodyIcon128File] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    icon16_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'icon16_delete' }})
    r"""If true, will delete the file stored in icon16"""  
    icon16_file: Optional[PatchSiteRequestBodyIcon16File] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    icon32_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'icon32_delete' }})
    r"""If true, will delete the file stored in icon32"""  
    icon32_file: Optional[PatchSiteRequestBodyIcon32File] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    icon48_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'icon48_delete' }})
    r"""If true, will delete the file stored in icon48"""  
    icon48_file: Optional[PatchSiteRequestBodyIcon48File] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    immutable_files: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'immutable_files' }})
    r"""Are files protected from modification?"""  
    include_password_in_welcome_email: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'include_password_in_welcome_email' }})
    r"""Include password in emails to new users?"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'language' }})
    r"""Site default language"""  
    ldap_base_dn: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_base_dn' }})
    r"""Base DN for looking up users in LDAP server"""  
    ldap_domain: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_domain' }})
    r"""Domain name that will be appended to usernames"""  
    ldap_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_enabled' }})
    r"""Main LDAP setting: is LDAP enabled?"""  
    ldap_group_action: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_group_action' }})
    r"""Should we sync groups from LDAP server?"""  
    ldap_group_exclusion: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_group_exclusion' }})
    r"""Comma or newline separated list of group names (with optional wildcards) to exclude when syncing."""  
    ldap_group_inclusion: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_group_inclusion' }})
    r"""Comma or newline separated list of group names (with optional wildcards) to include when syncing."""  
    ldap_host: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_host' }})
    r"""LDAP host"""  
    ldap_host_2: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_host_2' }})
    r"""LDAP backup host"""  
    ldap_host_3: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_host_3' }})
    r"""LDAP backup host"""  
    ldap_password_change: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_password_change' }})
    r"""New LDAP password."""  
    ldap_password_change_confirmation: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_password_change_confirmation' }})
    r"""Confirm new LDAP password."""  
    ldap_port: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_port' }})
    r"""LDAP port"""  
    ldap_secure: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_secure' }})
    r"""Use secure LDAP?"""  
    ldap_type: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_type' }})
    r"""LDAP type"""  
    ldap_user_action: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_user_action' }})
    r"""Should we sync users from LDAP server?"""  
    ldap_user_include_groups: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_user_include_groups' }})
    r"""Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced."""  
    ldap_username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_username' }})
    r"""Username for signing in to LDAP server."""  
    ldap_username_field: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ldap_username_field' }})
    r"""LDAP username field"""  
    login_help_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'login_help_text' }})
    r"""Login help text"""  
    logo_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'logo_delete' }})
    r"""If true, will delete the file stored in logo"""  
    logo_file: Optional[PatchSiteRequestBodyLogoFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})  
    max_prior_passwords: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'max_prior_passwords' }})
    r"""Number of prior passwords to disallow"""  
    mobile_app: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'mobile_app' }})
    r"""Is the mobile app enabled?"""  
    mobile_app_session_ip_pinning: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'mobile_app_session_ip_pinning' }})
    r"""Is mobile app session IP pinning enabled?"""  
    mobile_app_session_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'mobile_app_session_lifetime' }})
    r"""Mobile app session lifetime (in hours)"""  
    motd_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'motd_text' }})
    r"""A message to show users when they connect via FTP or SFTP."""  
    motd_use_for_ftp: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'motd_use_for_ftp' }})
    r"""Show message to users connecting via FTP"""  
    motd_use_for_sftp: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'motd_use_for_sftp' }})
    r"""Show message to users connecting via SFTP"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""Site name"""  
    non_sso_groups_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'non_sso_groups_allowed' }})
    r"""If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider."""  
    non_sso_users_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'non_sso_users_allowed' }})
    r"""If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider."""  
    office_integration_available: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'office_integration_available' }})
    r"""Allow users to use Office for the web?"""  
    office_integration_type: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'office_integration_type' }})
    r"""Office integration application used to edit and view the MS Office documents"""  
    opt_out_global: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'opt_out_global' }})
    r"""Use servers in the USA only?"""  
    overage_notify: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'overage_notify' }})
    r"""Notify site email of overages?"""  
    password_min_length: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_min_length' }})
    r"""Shortest password length for users"""  
    password_require_letter: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_require_letter' }})
    r"""Require a letter in passwords?"""  
    password_require_mixed: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_require_mixed' }})
    r"""Require lower and upper case letters in passwords?"""  
    password_require_number: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_require_number' }})
    r"""Require a number in passwords?"""  
    password_require_special: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_require_special' }})
    r"""Require special characters in password?"""  
    password_require_unbreached: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_require_unbreached' }})
    r"""Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)"""  
    password_requirements_apply_to_bundles: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_requirements_apply_to_bundles' }})
    r"""Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?"""  
    password_validity_days: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_validity_days' }})
    r"""Number of days password is valid"""  
    pin_all_remote_servers_to_site_region: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'pin_all_remote_servers_to_site_region' }})
    r"""If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings."""  
    reply_to_email: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'reply_to_email' }})
    r"""Reply-to email for this site"""  
    require_2fa: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'require_2fa' }})
    r"""Require two-factor authentication for all users?"""  
    require_2fa_user_type: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'require_2fa_user_type' }})
    r"""What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?"""  
    session_expiry: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'session_expiry' }})
    r"""Session expiry in hours"""  
    session_expiry_minutes: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'session_expiry_minutes' }})
    r"""Session expiry in minutes"""  
    session_pinned_by_ip: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'session_pinned_by_ip' }})
    r"""Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)"""  
    sftp_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sftp_enabled' }})
    r"""Is SFTP enabled?"""  
    sftp_host_key_type: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sftp_host_key_type' }})
    r"""Sftp Host Key Type"""  
    sftp_insecure_ciphers: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sftp_insecure_ciphers' }})
    r"""Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure."""  
    sftp_user_root_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sftp_user_root_enabled' }})
    r"""Use user FTP roots also for SFTP?"""  
    sharing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sharing_enabled' }})
    r"""Allow bundle creation"""  
    show_request_access_link: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'show_request_access_link' }})
    r"""Show request access link for users without access?  Currently unused."""  
    site_footer: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'site_footer' }})
    r"""Custom site footer text"""  
    site_header: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'site_header' }})
    r"""Custom site header text"""  
    smtp_address: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_address' }})
    r"""SMTP server hostname or IP"""  
    smtp_authentication: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_authentication' }})
    r"""SMTP server authentication type"""  
    smtp_from: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_from' }})
    r"""From address to use when mailing through custom SMTP"""  
    smtp_password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_password' }})
    r"""Password for SMTP server."""  
    smtp_port: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_port' }})
    r"""SMTP server port"""  
    smtp_username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'smtp_username' }})
    r"""SMTP server username"""  
    ssl_required: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ssl_required' }})
    r"""Is SSL required?  Disabling this is insecure."""  
    subdomain: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'subdomain' }})
    r"""Site subdomain"""  
    tls_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'tls_disabled' }})
    r"""Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure."""  
    uploads_via_email_authentication: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'uploads_via_email_authentication' }})
    r"""Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?"""  
    use_provided_modified_at: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'use_provided_modified_at' }})
    r"""Allow uploaders to set `provided_modified_at` for uploaded files?"""  
    user_lockout: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_lockout' }})
    r"""Will users be locked out after incorrect login attempts?"""  
    user_lockout_lock_period: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_lockout_lock_period' }})
    r"""How many hours to lock user out for failed password?"""  
    user_lockout_tries: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_lockout_tries' }})
    r"""Number of login tries within `user_lockout_within` hours before users are locked out"""  
    user_lockout_within: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_lockout_within' }})
    r"""Number of hours for user lockout window"""  
    user_requests_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_requests_enabled' }})
    r"""Enable User Requests feature"""  
    user_requests_notify_admins: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_requests_notify_admins' }})
    r"""Send email to site admins when a user request is received?"""  
    welcome_custom_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'welcome_custom_text' }})
    r"""Custom text send in user welcome email"""  
    welcome_email_cc: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'welcome_email_cc' }})
    r"""Include this email in welcome emails if enabled"""  
    welcome_email_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'welcome_email_enabled' }})
    r"""Will the welcome email be sent to new users?"""  
    welcome_email_subject: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'welcome_email_subject' }})
    r"""Include this email subject in welcome emails if enabled"""  
    welcome_screen: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'welcome_screen' }})
    r"""Does the welcome screen appear?"""  
    windows_mode_ftp: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'windows_mode_ftp' }})
    r"""Does FTP user Windows emulation mode?"""  
    

@dataclasses.dataclass
class PatchSiteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    site_entity: Optional[shared_siteentity.SiteEntity] = dataclasses.field(default=None)
    r"""The Site object."""  
    