// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// RestMethodMediaUploadProtocolsResumable - Supports the Resumable Media Upload protocol.
type RestMethodMediaUploadProtocolsResumable struct {
	// True if this endpoint supports uploading multipart media.
	Multipart *bool `json:"multipart,omitempty"`
	// The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
	Path *string `json:"path,omitempty"`
}

// RestMethodMediaUploadProtocolsSimple - Supports uploading as a single HTTP request.
type RestMethodMediaUploadProtocolsSimple struct {
	// True if this endpoint supports upload multipart media.
	Multipart *bool `json:"multipart,omitempty"`
	// The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.
	Path *string `json:"path,omitempty"`
}

// RestMethodMediaUploadProtocols - Supported upload protocols.
type RestMethodMediaUploadProtocols struct {
	// Supports the Resumable Media Upload protocol.
	Resumable *RestMethodMediaUploadProtocolsResumable `json:"resumable,omitempty"`
	// Supports uploading as a single HTTP request.
	Simple *RestMethodMediaUploadProtocolsSimple `json:"simple,omitempty"`
}

// RestMethodMediaUpload - Media upload parameters.
type RestMethodMediaUpload struct {
	// MIME Media Ranges for acceptable media uploads to this method.
	Accept []string `json:"accept,omitempty"`
	// Maximum size of a media upload, such as "1MB", "2GB" or "3TB".
	MaxSize *string `json:"maxSize,omitempty"`
	// Supported upload protocols.
	Protocols *RestMethodMediaUploadProtocols `json:"protocols,omitempty"`
}

// RestMethodRequest - The schema for the request.
type RestMethodRequest struct {
	// Schema ID for the request schema.
	DollarRef *string `json:"$ref,omitempty"`
	// parameter name.
	ParameterName *string `json:"parameterName,omitempty"`
}

// RestMethodResponse - The schema for the response.
type RestMethodResponse struct {
	// Schema ID for the response schema.
	DollarRef *string `json:"$ref,omitempty"`
}

type RestMethod struct {
	// Description of this method.
	Description *string `json:"description,omitempty"`
	// Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
	EtagRequired *bool `json:"etagRequired,omitempty"`
	// The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
	FlatPath *string `json:"flatPath,omitempty"`
	// HTTP method used by this method.
	HTTPMethod *string `json:"httpMethod,omitempty"`
	// A unique ID for this method. This property can be used to match methods between different versions of Discovery.
	ID *string `json:"id,omitempty"`
	// Media upload parameters.
	MediaUpload *RestMethodMediaUpload `json:"mediaUpload,omitempty"`
	// Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first.
	ParameterOrder []string `json:"parameterOrder,omitempty"`
	// Details for all parameters in this method.
	Parameters map[string]JSONSchema `json:"parameters,omitempty"`
	// The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
	Path *string `json:"path,omitempty"`
	// The schema for the request.
	Request *RestMethodRequest `json:"request,omitempty"`
	// The schema for the response.
	Response *RestMethodResponse `json:"response,omitempty"`
	// OAuth 2.0 scopes applicable to this method.
	Scopes []string `json:"scopes,omitempty"`
	// Whether this method supports media downloads.
	SupportsMediaDownload *bool `json:"supportsMediaDownload,omitempty"`
	// Whether this method supports media uploads.
	SupportsMediaUpload *bool `json:"supportsMediaUpload,omitempty"`
	// Whether this method supports subscriptions.
	SupportsSubscription *bool `json:"supportsSubscription,omitempty"`
	// Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download.
	UseMediaDownloadService *bool `json:"useMediaDownloadService,omitempty"`
}
