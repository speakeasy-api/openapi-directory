/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ProxyGetImport {
    /**
     *  The user ID of the person who created the import.
     * 
     * **Character limit**: 32
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetImport withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the import was created.
     * 
     * **Character limit**: 29
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetImport withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetImport withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     *  The type of item imported.
     * 
     * **Character limit**: 7
     * 
     * **Values**: Usage 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImportType")
    public String importType;
    public ProxyGetImport withImportType(String importType) {
        this.importType = importType;
        return this;
    }
    
    /**
     * The number of records successfully imported.
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ImportedCount")
    public Integer importedCount;
    public ProxyGetImport withImportedCount(Integer importedCount) {
        this.importedCount = importedCount;
        return this;
    }
    
    /**
     *  A check to validate the import file's integrity.
     * 
     * **Character limit:** 32
     * 
     * **System-generated:** no
     * 
     * **Values**: a string of 32 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Md5")
    public String md5;
    public ProxyGetImport withMd5(String md5) {
        this.md5 = md5;
        return this;
    }
    
    /**
     *  A descriptive name for the import.
     * 
     * **Character limit:** 100
     * 
     * **Values:** one of the following:
     * 
     * - a string of 100 characters or fewer
     * - if NULL default is: `import &lt;ImportType_value&gt;`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ProxyGetImport withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  The URL for your import file, which contains your records for upload. When you upload the file, Zuora assigns it to this address.
     * 
     * **Values:** automatic dynamically-generated URL 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OriginalResourceUrl")
    public String originalResourceUrl;
    public ProxyGetImport withOriginalResourceUrl(String originalResourceUrl) {
        this.originalResourceUrl = originalResourceUrl;
        return this;
    }
    
    /**
     *  The URL for the import result file, which is a zipped CSV file.
     * 
     * **Values**: automatic dynamically-generated URL 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResultResourceUrl")
    public String resultResourceUrl;
    public ProxyGetImport withResultResourceUrl(String resultResourceUrl) {
        this.resultResourceUrl = resultResourceUrl;
        return this;
    }
    
    /**
     * The status of the import process.
     * 
     * **Values**: automatically generated using one of the following values:
     * 
     * - Pending
     * - Processing
     * - Completed
     * - Failed
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyGetImport withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     *  The reason for the system-generated status. Use this information if the import fails.
     * 
     * **Character limit**: 2000
     * 
     * **Values**: automatically generated error message 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StatusReason")
    public String statusReason;
    public ProxyGetImport withStatusReason(String statusReason) {
        this.statusReason = statusReason;
        return this;
    }
    
    /**
     *  The number of records in the import file.
     * 
     * **Character limit**:
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TotalCount")
    public Integer totalCount;
    public ProxyGetImport withTotalCount(Integer totalCount) {
        this.totalCount = totalCount;
        return this;
    }
    
    /**
     *  The ID of the user who last updated the import.
     * 
     * **Character limit**: 32
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetImport withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the import was last updated.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetImport withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
