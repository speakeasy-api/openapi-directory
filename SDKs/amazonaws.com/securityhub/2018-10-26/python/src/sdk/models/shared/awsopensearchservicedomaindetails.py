"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsopensearchservicedomainadvancedsecurityoptionsdetails as shared_awsopensearchservicedomainadvancedsecurityoptionsdetails
from ..shared import awsopensearchservicedomainclusterconfigdetails as shared_awsopensearchservicedomainclusterconfigdetails
from ..shared import awsopensearchservicedomaindomainendpointoptionsdetails as shared_awsopensearchservicedomaindomainendpointoptionsdetails
from ..shared import awsopensearchservicedomainencryptionatrestoptionsdetails as shared_awsopensearchservicedomainencryptionatrestoptionsdetails
from ..shared import awsopensearchservicedomainlogpublishingoptionsdetails as shared_awsopensearchservicedomainlogpublishingoptionsdetails
from ..shared import awsopensearchservicedomainnodetonodeencryptionoptionsdetails as shared_awsopensearchservicedomainnodetonodeencryptionoptionsdetails
from ..shared import awsopensearchservicedomainservicesoftwareoptionsdetails as shared_awsopensearchservicedomainservicesoftwareoptionsdetails
from ..shared import awsopensearchservicedomainvpcoptionsdetails as shared_awsopensearchservicedomainvpcoptionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsOpenSearchServiceDomainDetails:
    r"""Information about an Amazon OpenSearch Service domain."""
    
    access_policies: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessPolicies'), 'exclude': lambda f: f is None }})  
    advanced_security_options: Optional[shared_awsopensearchservicedomainadvancedsecurityoptionsdetails.AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdvancedSecurityOptions'), 'exclude': lambda f: f is None }})  
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn'), 'exclude': lambda f: f is None }})  
    cluster_config: Optional[shared_awsopensearchservicedomainclusterconfigdetails.AwsOpenSearchServiceDomainClusterConfigDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterConfig'), 'exclude': lambda f: f is None }})  
    domain_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainEndpoint'), 'exclude': lambda f: f is None }})  
    domain_endpoint_options: Optional[shared_awsopensearchservicedomaindomainendpointoptionsdetails.AwsOpenSearchServiceDomainDomainEndpointOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainEndpointOptions'), 'exclude': lambda f: f is None }})  
    domain_endpoints: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainEndpoints'), 'exclude': lambda f: f is None }})  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainName'), 'exclude': lambda f: f is None }})  
    encryption_at_rest_options: Optional[shared_awsopensearchservicedomainencryptionatrestoptionsdetails.AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionAtRestOptions'), 'exclude': lambda f: f is None }})  
    engine_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineVersion'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    log_publishing_options: Optional[shared_awsopensearchservicedomainlogpublishingoptionsdetails.AwsOpenSearchServiceDomainLogPublishingOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogPublishingOptions'), 'exclude': lambda f: f is None }})  
    node_to_node_encryption_options: Optional[shared_awsopensearchservicedomainnodetonodeencryptionoptionsdetails.AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NodeToNodeEncryptionOptions'), 'exclude': lambda f: f is None }})  
    service_software_options: Optional[shared_awsopensearchservicedomainservicesoftwareoptionsdetails.AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceSoftwareOptions'), 'exclude': lambda f: f is None }})  
    vpc_options: Optional[shared_awsopensearchservicedomainvpcoptionsdetails.AwsOpenSearchServiceDomainVpcOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcOptions'), 'exclude': lambda f: f is None }})  
    