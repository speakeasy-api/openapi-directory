"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getreservationcoveragerequest as shared_getreservationcoveragerequest
from ..shared import getreservationcoverageresponse as shared_getreservationcoverageresponse
from enum import Enum
from typing import Any, Optional

class GetReservationCoverageXAmzTargetEnum(str, Enum):
    AWS_INSIGHTS_INDEX_SERVICE_GET_RESERVATION_COVERAGE = 'AWSInsightsIndexService.GetReservationCoverage'


@dataclasses.dataclass
class GetReservationCoverageRequest:
    
    get_reservation_coverage_request: shared_getreservationcoveragerequest.GetReservationCoverageRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetReservationCoverageXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetReservationCoverageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    data_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DataUnavailableException"""  
    get_reservation_coverage_response: Optional[shared_getreservationcoverageresponse.GetReservationCoverageResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_next_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidNextTokenException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    