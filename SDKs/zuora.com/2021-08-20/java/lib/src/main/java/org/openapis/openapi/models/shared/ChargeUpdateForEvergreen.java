/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ChargeUpdateForEvergreen - The JSON object containing the information for a charge update in the 'UpdateProduct' type order action.
 */
public class ChargeUpdateForEvergreen {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public BillingUpdate billing;
    public ChargeUpdateForEvergreen withBilling(BillingUpdate billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * Read only. Identifies the charge to be updated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeNumber")
    public String chargeNumber;
    public ChargeUpdateForEvergreen withChargeNumber(String chargeNumber) {
        this.chargeNumber = chargeNumber;
        return this;
    }
    
    /**
     * Container for custom fields of a Rate Plan Charge object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public ChargeUpdateForEvergreen withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ChargeUpdateForEvergreen withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Specifies when a charge becomes active.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveDate")
    public TriggerParams effectiveDate;
    public ChargeUpdateForEvergreen withEffectiveDate(TriggerParams effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing")
    public PricingUpdateForEvergreen pricing;
    public ChargeUpdateForEvergreen withPricing(PricingUpdateForEvergreen pricing) {
        this.pricing = pricing;
        return this;
    }
    
    /**
     * A unique string to represent the rate plan charge in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, you would assign a unique token to the product rate plan when added and use that token in future order actions.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueToken")
    public String uniqueToken;
    public ChargeUpdateForEvergreen withUniqueToken(String uniqueToken) {
        this.uniqueToken = uniqueToken;
        return this;
    }
    
}
