"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Documents:
    r"""The APIs within this group are used to save documents and query them by id.
    
    If the document has the id attribute or has fields that have been set to indexes with unique values, VTEX Master Data will attempt to identify the document. If the document is found a change will be made. If it is not found, an inclusion will be made. ** This scenario does not apply to the API with the POST verb**.
    
    Otherwise, a new document will always be created.
    
    You can use the query string `_where` to apply an update only if the document is compliant with the clause.
    
    In addition with this feature you can use the schema parameter `_schema` as a query string to apply the update only if the document is compliant with the schema. If the document is not compliant, the body of the response will have an array with each error, where the field ```Message``` indicates the type of the error.
    
    ### Response status code
    
    1. Status Code 201: Document created successfully
    2. Status Code 200: Document changed successfully
    3. Status Code 304: There were no changes to the document
    4. Status Code 400: Invalid information in JSON
    5. Status Code 403: Unauthorized access
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def createnewdocument(self, request: operations.CreatenewdocumentRequest) -> operations.CreatenewdocumentResponse:
        r"""Create new document
        This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.
        
        > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.
        
        ## Example use cases
        
        ### Client profile
        
        In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:
        
        POST
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
        ```
        
        Request body
        ```json
        {
            \"email\": \"clark.kent@examplemail.com\",
            \"firstName\": \"Clark\",
            \"lastName\": \"Kent\",
            \"phone\": \"+12025550195\",
            \"documentType\": \"CPF\",
            \"document\": \"12345678900\"
            \"isCorporate\": false,
            \"isNewsletterOptIn\": false,
            \"localeDefault\": \"en-US\"
         }
        ```
        
        ### Client address
        
        For a new address, the data entity is `AD` and the request would look like this:
        
        POST
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
        ```
        
        Request body
        ```json
        {
            \"addressName\": \"My House\",
            \"addressType\": \"residential\",
            \"city\": \"Metropolis\",
            \"complement\": \"\",
            \"country\": \"USA\",
            \"postalCode\": \"11375\",
            \"receiverName\": \"Clark Kent\",
            \"reference\": null,
            \"state\": \"MP\",
            \"street\": \"Baker Street\",
            \"neighborhood\": \"Upper east side\",
            \"number\": \"21\",
            \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatenewdocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreatenewdocumentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatenewdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentResponse])
                res.document_response = out

        return res

    def createorupdatepartialdocument(self, request: operations.CreateorupdatepartialdocumentRequest) -> operations.CreateorupdatepartialdocumentResponse:
        r"""Create partial document
        This request allows you to partially update a document corresponding to a given data entity.
        
        > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
        
        ## Example use cases
        
        ### Client profile
        
        In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
        
        PATCH
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
        ```
        
        Request body
        ```json
        {
            \"phone\": \"+12025550195\",
            \"isNewsletterOptIn\": false
         }
        ```
        
        ### Client address
        
        In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
        
        PATCH
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
        ```
        
        Request body
        ```json
        {
            \"receiverName\": \"Lois Lane\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateorupdatepartialdocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateorupdatepartialdocumentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateorupdatepartialdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentResponse])
                res.document_response = out

        return res

    def deletedocument(self, request: operations.DeletedocumentRequest) -> operations.DeletedocumentResponse:
        r"""Delete document
        It allows to delete a document.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletedocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletedocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getdocument(self, request: operations.GetdocumentRequest) -> operations.GetdocumentResponse:
        r"""Get document
        Gets document by ID.
        
        
        > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetdocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UsingFieldsAll])
                res.using_fields_all = out

        return res

    def updateentiredocument(self, request: operations.UpdateentiredocumentRequest) -> operations.UpdateentiredocumentResponse:
        r"""Update entire document
        Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.
        
        > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
        
        ## Example use cases
        
        ### Client profile
        
        In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:
        
        PUT
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
        ```
        
        Request body
        ```json
        {
            \"email\": \"clark.kent@examplemail.com\",
            \"firstName\": \"Clark\",
            \"lastName\": \"Kent\",
            \"phone\": \"+12025550195\",
            \"documentType\": \"CPF\",
            \"document\": \"12345678900\"
            \"isCorporate\": false,
            \"isNewsletterOptIn\": false,
            \"localeDefault\": \"en-US\"
         }
        ```
        
        ### Client address
        
        To update an address, the data entity is `AD` and the request would look like this:
        
        PUT
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
        ```
        
        Request body
        ```json
        {
            \"addressName\": \"My House\",
            \"addressType\": \"residential\",
            \"city\": \"Metropolis\",
            \"complement\": \"\",
            \"country\": \"USA\",
            \"postalCode\": \"11375\",
            \"receiverName\": \"Clark Kent\",
            \"reference\": null,
            \"state\": \"MP\",
            \"street\": \"Baker Street\",
            \"neighborhood\": \"Upper east side\",
            \"number\": \"21\",
            \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateentiredocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdateentiredocumentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateentiredocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentResponse])
                res.document_response = out

        return res

    def updatepartialdocument(self, request: operations.UpdatepartialdocumentRequest) -> operations.UpdatepartialdocumentResponse:
        r"""Update partial document
        This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.
        
        > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
        
        ## Example use cases
        
        ### Client profile
        
        In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
        
        PATCH
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
        ```
        
        Request body
        ```json
        {
            \"phone\": \"+12025550195\",
            \"isNewsletterOptIn\": false
         }
        ```
        
        ### Client address
        
        In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
        
        PATCH
        ```
        https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
        ```
        
        Request body
        ```json
        {
            \"receiverName\": \"Lois Lane\"
        }
        ```
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatepartialdocumentRequest, base_url, '/api/dataentities/{dataEntityName}/documents/{id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.UpdatepartialdocumentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatepartialdocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentResponse])
                res.document_response = out

        return res

    