// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UsageCapExceededProblemPeriodEnum string

const (
	UsageCapExceededProblemPeriodEnumDaily   UsageCapExceededProblemPeriodEnum = "Daily"
	UsageCapExceededProblemPeriodEnumMonthly UsageCapExceededProblemPeriodEnum = "Monthly"
)

func (e *UsageCapExceededProblemPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Daily":
		fallthrough
	case "Monthly":
		*e = UsageCapExceededProblemPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageCapExceededProblemPeriodEnum: %s", s)
	}
}

type UsageCapExceededProblemScopeEnum string

const (
	UsageCapExceededProblemScopeEnumAccount UsageCapExceededProblemScopeEnum = "Account"
	UsageCapExceededProblemScopeEnumProduct UsageCapExceededProblemScopeEnum = "Product"
)

func (e *UsageCapExceededProblemScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Account":
		fallthrough
	case "Product":
		*e = UsageCapExceededProblemScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageCapExceededProblemScopeEnum: %s", s)
	}
}

// UsageCapExceededProblem - A problem that indicates that a usage cap has been exceeded.
type UsageCapExceededProblem struct {
	Detail string                             `json:"detail"`
	Period *UsageCapExceededProblemPeriodEnum `json:"period,omitempty"`
	Scope  *UsageCapExceededProblemScopeEnum  `json:"scope,omitempty"`
	Title  string                             `json:"title"`
	Type   string                             `json:"type"`
}
