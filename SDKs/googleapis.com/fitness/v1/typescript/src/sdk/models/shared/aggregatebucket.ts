/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Dataset } from "./dataset";
import { Session } from "./session";
import { Expose, Type } from "class-transformer";

/**
 * The type of a bucket signifies how the data aggregation is performed in the bucket.
 */
export enum AggregateBucketTypeEnum {
  Unknown = "unknown",
  Time = "time",
  Session = "session",
  ActivityType = "activityType",
  ActivitySegment = "activitySegment",
}

export class AggregateBucket extends SpeakeasyBase {
  /**
   * Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activity" })
  activity?: number;

  /**
   * There will be one dataset per AggregateBy in the request.
   */
  @SpeakeasyMetadata({ elemType: Dataset })
  @Expose({ name: "dataset" })
  @Type(() => Dataset)
  dataset?: Dataset[];

  /**
   * The end time for the aggregated data, in milliseconds since epoch, inclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTimeMillis" })
  endTimeMillis?: string;

  /**
   * Sessions contain metadata, such as a user-friendly name and time interval information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "session" })
  @Type(() => Session)
  session?: Session;

  /**
   * The start time for the aggregated data, in milliseconds since epoch, inclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTimeMillis" })
  startTimeMillis?: string;

  /**
   * The type of a bucket signifies how the data aggregation is performed in the bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: AggregateBucketTypeEnum;
}
