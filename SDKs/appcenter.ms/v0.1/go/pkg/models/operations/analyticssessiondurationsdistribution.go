// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type AnalyticsSessionDurationsDistributionSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsSessionDurationsDistributionRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// Last date time in data in ISO 8601 date time format.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// Start date time in data in ISO 8601 date time format.
	Start time.Time `queryParam:"style=form,explode=true,name=start"`
	// To select specific application versions
	Versions []string `queryParam:"style=pipeDelimited,explode=true,name=versions"`
}

// AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsSessionDurationsDistributionDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsSessionDurationsDistributionDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsSessionDurationsDistributionDefaultApplicationJSON - Error
type AnalyticsSessionDurationsDistributionDefaultApplicationJSON struct {
	Error *AnalyticsSessionDurationsDistributionDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsSessionDurationsDistribution200ApplicationJSONDistribution struct {
	// The bucket name.
	Bucket *string `json:"bucket,omitempty"`
	// The count of sessions in current bucket.
	Count *int64 `json:"count,omitempty"`
}

// AnalyticsSessionDurationsDistribution200ApplicationJSON - List of  session durations for requested time range.
type AnalyticsSessionDurationsDistribution200ApplicationJSON struct {
	// The average session duration for current time range.
	AverageDuration *string `json:"average_duration,omitempty"`
	// The count of sessions in these buckets.
	Distribution []AnalyticsSessionDurationsDistribution200ApplicationJSONDistribution `json:"distribution,omitempty"`
	// The previous average session duration for previous time range.
	PreviousAverageDuration *string `json:"previous_average_duration,omitempty"`
}

type AnalyticsSessionDurationsDistributionResponse struct {
	// List of  session durations for requested time range.
	AnalyticsSessionDurationsDistribution200ApplicationJSONObject *AnalyticsSessionDurationsDistribution200ApplicationJSON
	// Error code with reason.
	AnalyticsSessionDurationsDistributionDefaultApplicationJSONObject *AnalyticsSessionDurationsDistributionDefaultApplicationJSON
	ContentType                                                       string
	StatusCode                                                        int
	RawResponse                                                       *http.Response
}
