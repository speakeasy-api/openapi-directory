/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ViewsFromUnit - Views available from the guest unit itself.
 */
public class ViewsFromUnit {
    /**
     * Beach view. A guestroom that features a window through which guests can see the beach.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachView")
    public Boolean beachView;

    public ViewsFromUnit withBeachView(Boolean beachView) {
        this.beachView = beachView;
        return this;
    }
    
    /**
     * Beach view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachViewException")
    public ViewsFromUnitBeachViewExceptionEnum beachViewException;

    public ViewsFromUnit withBeachViewException(ViewsFromUnitBeachViewExceptionEnum beachViewException) {
        this.beachViewException = beachViewException;
        return this;
    }
    
    /**
     * City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cityView")
    public Boolean cityView;

    public ViewsFromUnit withCityView(Boolean cityView) {
        this.cityView = cityView;
        return this;
    }
    
    /**
     * City view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cityViewException")
    public ViewsFromUnitCityViewExceptionEnum cityViewException;

    public ViewsFromUnit withCityViewException(ViewsFromUnitCityViewExceptionEnum cityViewException) {
        this.cityViewException = cityViewException;
        return this;
    }
    
    /**
     * Garden view. A guestroom that features a window through which guests can see a garden.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gardenView")
    public Boolean gardenView;

    public ViewsFromUnit withGardenView(Boolean gardenView) {
        this.gardenView = gardenView;
        return this;
    }
    
    /**
     * Garden view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gardenViewException")
    public ViewsFromUnitGardenViewExceptionEnum gardenViewException;

    public ViewsFromUnit withGardenViewException(ViewsFromUnitGardenViewExceptionEnum gardenViewException) {
        this.gardenViewException = gardenViewException;
        return this;
    }
    
    /**
     * Lake view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lakeView")
    public Boolean lakeView;

    public ViewsFromUnit withLakeView(Boolean lakeView) {
        this.lakeView = lakeView;
        return this;
    }
    
    /**
     * Lake view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lakeViewException")
    public ViewsFromUnitLakeViewExceptionEnum lakeViewException;

    public ViewsFromUnit withLakeViewException(ViewsFromUnitLakeViewExceptionEnum lakeViewException) {
        this.lakeViewException = lakeViewException;
        return this;
    }
    
    /**
     * Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("landmarkView")
    public Boolean landmarkView;

    public ViewsFromUnit withLandmarkView(Boolean landmarkView) {
        this.landmarkView = landmarkView;
        return this;
    }
    
    /**
     * Landmark view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("landmarkViewException")
    public ViewsFromUnitLandmarkViewExceptionEnum landmarkViewException;

    public ViewsFromUnit withLandmarkViewException(ViewsFromUnitLandmarkViewExceptionEnum landmarkViewException) {
        this.landmarkViewException = landmarkViewException;
        return this;
    }
    
    /**
     * Ocean view. A guestroom that features a window through which guests can see the ocean.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oceanView")
    public Boolean oceanView;

    public ViewsFromUnit withOceanView(Boolean oceanView) {
        this.oceanView = oceanView;
        return this;
    }
    
    /**
     * Ocean view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oceanViewException")
    public ViewsFromUnitOceanViewExceptionEnum oceanViewException;

    public ViewsFromUnit withOceanViewException(ViewsFromUnitOceanViewExceptionEnum oceanViewException) {
        this.oceanViewException = oceanViewException;
        return this;
    }
    
    /**
     * Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolView")
    public Boolean poolView;

    public ViewsFromUnit withPoolView(Boolean poolView) {
        this.poolView = poolView;
        return this;
    }
    
    /**
     * Pool view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolViewException")
    public ViewsFromUnitPoolViewExceptionEnum poolViewException;

    public ViewsFromUnit withPoolViewException(ViewsFromUnitPoolViewExceptionEnum poolViewException) {
        this.poolViewException = poolViewException;
        return this;
    }
    
    /**
     * Valley view. A guestroom that features a window through which guests can see over a valley.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valleyView")
    public Boolean valleyView;

    public ViewsFromUnit withValleyView(Boolean valleyView) {
        this.valleyView = valleyView;
        return this;
    }
    
    /**
     * Valley view exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valleyViewException")
    public ViewsFromUnitValleyViewExceptionEnum valleyViewException;

    public ViewsFromUnit withValleyViewException(ViewsFromUnitValleyViewExceptionEnum valleyViewException) {
        this.valleyViewException = valleyViewException;
        return this;
    }
    
    public ViewsFromUnit(){}
}
