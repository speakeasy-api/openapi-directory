<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class WirelessHealth 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Aggregated connectivity info for a given client on this network
     * 
     * Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsResponse
     */
	public function getNetworkClientConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given client on this network
     * 
     * Aggregated latency info for a given client on this network. Clients are identified by their MAC.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsResponse
     */
	public function getNetworkClientLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/{clientId}/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * Aggregated connectivity info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsResponse
     */
	public function getNetworkClientsConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by clients
     * 
     * Aggregated latency info for this network, grouped by clients
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsResponse
     */
	public function getNetworkClientsLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/clients/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkClientsLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkClientsLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network
     * 
     * Aggregated connectivity info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsResponse
     */
	public function getNetworkConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for a given AP on this network
     * 
     * Aggregated connectivity info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsResponse
     */
	public function getNetworkDeviceConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDeviceConnectionStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for a given AP on this network
     * 
     * Aggregated latency info for a given AP on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsResponse
     */
	public function getNetworkDeviceLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/{serial}/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDeviceLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDeviceLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated connectivity info for this network, grouped by node
     * 
     * Aggregated connectivity info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsResponse
     */
	public function getNetworkDevicesConnectionStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/connectionStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesConnectionStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevicesConnectionStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network, grouped by node
     * 
     * Aggregated latency info for this network, grouped by node
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsResponse
     */
	public function getNetworkDevicesLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/devices/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkDevicesLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkDevicesLatencyStats200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of all failed client connection events on this network in a given time range
     * 
     * List of all failed client connection events on this network in a given time range
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsResponse
     */
	public function getNetworkFailedConnections(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/failedConnections', \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkFailedConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkFailedConnections200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Aggregated latency info for this network
     * 
     * Aggregated latency info for this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsResponse
     */
	public function getNetworkLatencyStats(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/latencyStats', \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkLatencyStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkLatencyStats200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}