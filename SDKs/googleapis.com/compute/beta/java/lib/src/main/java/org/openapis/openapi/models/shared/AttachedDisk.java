/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AttachedDisk - An instance-attached disk resource.
 */
public class AttachedDisk {
    /**
     * [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("architecture")
    public AttachedDiskArchitectureEnum architecture;
    public AttachedDisk withArchitecture(AttachedDiskArchitectureEnum architecture) {
        this.architecture = architecture;
        return this;
    }
    
    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoDelete")
    public Boolean autoDelete;
    public AttachedDisk withAutoDelete(Boolean autoDelete) {
        this.autoDelete = autoDelete;
        return this;
    }
    
    /**
     * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boot")
    public Boolean boot;
    public AttachedDisk withBoot(Boolean boot) {
        this.boot = boot;
        return this;
    }
    
    /**
     * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceName")
    public String deviceName;
    public AttachedDisk withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskEncryptionKey")
    public CustomerEncryptionKey diskEncryptionKey;
    public AttachedDisk withDiskEncryptionKey(CustomerEncryptionKey diskEncryptionKey) {
        this.diskEncryptionKey = diskEncryptionKey;
        return this;
    }
    
    /**
     * The size of the disk in GB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeGb")
    public String diskSizeGb;
    public AttachedDisk withDiskSizeGb(String diskSizeGb) {
        this.diskSizeGb = diskSizeGb;
        return this;
    }
    
    /**
     * [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceAttach")
    public Boolean forceAttach;
    public AttachedDisk withForceAttach(Boolean forceAttach) {
        this.forceAttach = forceAttach;
        return this;
    }
    
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestOsFeatures")
    public GuestOsFeature[] guestOsFeatures;
    public AttachedDisk withGuestOsFeatures(GuestOsFeature[] guestOsFeatures) {
        this.guestOsFeatures = guestOsFeatures;
        return this;
    }
    
    /**
     * [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    public Integer index;
    public AttachedDisk withIndex(Integer index) {
        this.index = index;
        return this;
    }
    
    /**
     * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initializeParams")
    public AttachedDiskInitializeParams initializeParams;
    public AttachedDisk withInitializeParams(AttachedDiskInitializeParams initializeParams) {
        this.initializeParams = initializeParams;
        return this;
    }
    
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interface")
    public AttachedDiskInterfaceEnum interface_;
    public AttachedDisk withInterface(AttachedDiskInterfaceEnum interface_) {
        this.interface_ = interface_;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public AttachedDisk withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * [Output Only] Any valid publicly visible licenses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenses")
    public String[] licenses;
    public AttachedDisk withLicenses(String[] licenses) {
        this.licenses = licenses;
        return this;
    }
    
    /**
     * [Output Only] Whether to indicate the attached disk is locked. The locked disk is not allowed to be detached from the instance, or to be used as the source of the snapshot creation, and the image creation. The instance with at least one locked attached disk is not allow to be used as source of machine image creation, instant snapshot creation, and not allowed to be deleted with --keep-disk parameter set to true for locked disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    public Boolean locked;
    public AttachedDisk withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public AttachedDiskModeEnum mode;
    public AttachedDisk withMode(AttachedDiskModeEnum mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * Initial State for shielded instance, these are public keys which are safe to store in public
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shieldedInstanceInitialState")
    public InitialStateConfig shieldedInstanceInitialState;
    public AttachedDisk withShieldedInstanceInitialState(InitialStateConfig shieldedInstanceInitialState) {
        this.shieldedInstanceInitialState = shieldedInstanceInitialState;
        return this;
    }
    
    /**
     * Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;
    public AttachedDisk withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public AttachedDiskTypeEnum type;
    public AttachedDisk withType(AttachedDiskTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * [Output Only] A list of user provided licenses. It represents a list of URLs to the license resource. Unlike regular licenses, user provided licenses can be modified after the disk is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userLicenses")
    public String[] userLicenses;
    public AttachedDisk withUserLicenses(String[] userLicenses) {
        this.userLicenses = userLicenses;
        return this;
    }
    
}
