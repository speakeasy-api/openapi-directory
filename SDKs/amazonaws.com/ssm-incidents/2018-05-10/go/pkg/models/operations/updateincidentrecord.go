// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateIncidentRecordHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateIncidentRecordRequestBodyChatChannel - The Chatbot chat channel used for collaboration during an incident.
type UpdateIncidentRecordRequestBodyChatChannel struct {
	ChatbotSns []string               `json:"chatbotSns,omitempty"`
	Empty      map[string]interface{} `json:"empty,omitempty"`
}

// UpdateIncidentRecordRequestBodyStatusEnum - The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.
type UpdateIncidentRecordRequestBodyStatusEnum string

const (
	UpdateIncidentRecordRequestBodyStatusEnumOpen     UpdateIncidentRecordRequestBodyStatusEnum = "OPEN"
	UpdateIncidentRecordRequestBodyStatusEnumResolved UpdateIncidentRecordRequestBodyStatusEnum = "RESOLVED"
)

func (e *UpdateIncidentRecordRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OPEN":
		fallthrough
	case "RESOLVED":
		*e = UpdateIncidentRecordRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateIncidentRecordRequestBodyStatusEnum: %s", s)
	}
}

type UpdateIncidentRecordRequestBody struct {
	// The Amazon Resource Name (ARN) of the incident record you are updating.
	Arn string `json:"arn"`
	// The Chatbot chat channel used for collaboration during an incident.
	ChatChannel *UpdateIncidentRecordRequestBodyChatChannel `json:"chatChannel,omitempty"`
	// A token that ensures that a client calls the operation only once with the specified details.
	ClientToken *string `json:"clientToken,omitempty"`
	// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>
	Impact *int64 `json:"impact,omitempty"`
	// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p> <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
	NotificationTargets []shared.NotificationTargetItem `json:"notificationTargets,omitempty"`
	// The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.
	Status *UpdateIncidentRecordRequestBodyStatusEnum `json:"status,omitempty"`
	// A longer description of what occurred during the incident.
	Summary *string `json:"summary,omitempty"`
	// A brief description of the incident.
	Title *string `json:"title,omitempty"`
}

type UpdateIncidentRecordRequest struct {
	Headers UpdateIncidentRecordHeaders
	Request UpdateIncidentRecordRequestBody `request:"mediaType=application/json"`
}

type UpdateIncidentRecordResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateIncidentRecordOutput map[string]interface{}
	// ValidationException
	ValidationException interface{}
}
