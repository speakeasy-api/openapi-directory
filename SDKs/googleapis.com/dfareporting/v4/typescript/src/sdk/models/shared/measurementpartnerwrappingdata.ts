/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Placement wrapping status.
 */
export enum MeasurementPartnerWrappingDataLinkStatusEnum {
  MeasurementPartnerUnlinked = "MEASUREMENT_PARTNER_UNLINKED",
  MeasurementPartnerLinked = "MEASUREMENT_PARTNER_LINKED",
  MeasurementPartnerLinkPending = "MEASUREMENT_PARTNER_LINK_PENDING",
  MeasurementPartnerLinkFailure = "MEASUREMENT_PARTNER_LINK_FAILURE",
  MeasurementPartnerLinkOptOut = "MEASUREMENT_PARTNER_LINK_OPT_OUT",
  MeasurementPartnerLinkOptOutPending = "MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING",
  MeasurementPartnerLinkWrappingPending = "MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING",
  MeasurementPartnerModeChangePending = "MEASUREMENT_PARTNER_MODE_CHANGE_PENDING",
}

/**
 * Measurement partner used for wrapping the placement.
 */
export enum MeasurementPartnerWrappingDataMeasurementPartnerEnum {
  None = "NONE",
  IntegralAdScience = "INTEGRAL_AD_SCIENCE",
  DoubleVerify = "DOUBLE_VERIFY",
}

/**
 * Measurement mode for the wrapped placement.
 */
export enum MeasurementPartnerWrappingDataTagWrappingModeEnum {
  None = "NONE",
  Blocking = "BLOCKING",
  Monitoring = "MONITORING",
  MonitoringReadOnly = "MONITORING_READ_ONLY",
  VideoPixelMonitoring = "VIDEO_PIXEL_MONITORING",
  Tracking = "TRACKING",
  VpaidMonitoring = "VPAID_MONITORING",
  VpaidBlocking = "VPAID_BLOCKING",
  NonVpaidMonitoring = "NON_VPAID_MONITORING",
  VpaidOnlyMonitoring = "VPAID_ONLY_MONITORING",
  VpaidOnlyBlocking = "VPAID_ONLY_BLOCKING",
  VpaidOnlyFiltering = "VPAID_ONLY_FILTERING",
  VpaidFiltering = "VPAID_FILTERING",
  NonVpaidFiltering = "NON_VPAID_FILTERING",
}

/**
 * Placement tag wrapping
 */
export class MeasurementPartnerWrappingData extends SpeakeasyBase {
  /**
   * Placement wrapping status.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "linkStatus" })
  linkStatus?: MeasurementPartnerWrappingDataLinkStatusEnum;

  /**
   * Measurement partner used for wrapping the placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "measurementPartner" })
  measurementPartner?: MeasurementPartnerWrappingDataMeasurementPartnerEnum;

  /**
   * Measurement mode for the wrapped placement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tagWrappingMode" })
  tagWrappingMode?: MeasurementPartnerWrappingDataTagWrappingModeEnum;

  /**
   * Tag provided by the measurement partner during wrapping.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wrappedTag" })
  wrappedTag?: string;
}
