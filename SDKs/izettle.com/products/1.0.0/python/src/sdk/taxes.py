"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Taxes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_tax_rates(self, request: shared.TaxRatesCreateRequest, security: operations.CreateTaxRatesSecurity) -> operations.CreateTaxRatesResponse:
        r"""Create new tax rates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/taxes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaxRatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxRatesResponse])
                res.tax_rates_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code == 403:
            pass

        return res

    def delete_tax_rate(self, request: operations.DeleteTaxRateRequest, security: operations.DeleteTaxRateSecurity) -> operations.DeleteTaxRateResponse:
        r"""Delete a single tax rate"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTaxRateRequest, base_url, '/v1/taxes/{taxRateUuid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaxRateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_product_count_for_all_taxes(self) -> operations.GetProductCountForAllTaxesResponse:
        r"""Get all tax rates and a count of products associated with each"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/taxes/count'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductCountForAllTaxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxRateProductCountResponse])
                res.tax_rate_product_count_response = out
        elif http_res.status_code == 403:
            pass

        return res

    def get_tax_rate(self, request: operations.GetTaxRateRequest, security: operations.GetTaxRateSecurity) -> operations.GetTaxRateResponse:
        r"""Get a single tax rate"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaxRateRequest, base_url, '/v1/taxes/{taxRateUuid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaxRateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxRate])
                res.tax_rate = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_tax_rates(self) -> operations.GetTaxRatesResponse:
        r"""Get all available tax rates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/taxes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaxRatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TaxRatesResponse]])
                res.tax_rates_responses = out
        elif http_res.status_code == 403:
            pass

        return res

    def get_tax_settings(self) -> operations.GetTaxSettingsResponse:
        r"""Get the organization tax settings"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/taxes/settings'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaxSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxSettingsResponse])
                res.tax_settings_response = out
        elif http_res.status_code == 403:
            pass

        return res

    def set_taxation_mode(self, request: shared.TaxSettingsUpdateRequest, security: operations.SetTaxationModeSecurity) -> operations.SetTaxationModeResponse:
        r"""Update the organization tax settings"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/taxes/settings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetTaxationModeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxSettingsResponse])
                res.tax_settings_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code == 403:
            pass

        return res

    def update_tax_rate(self, request: operations.UpdateTaxRateRequest, security: operations.UpdateTaxRateSecurity) -> operations.UpdateTaxRateResponse:
        r"""Update a single tax rate"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTaxRateRequest, base_url, '/v1/taxes/{taxRateUuid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tax_rate_update_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaxRateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaxRate])
                res.tax_rate = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    