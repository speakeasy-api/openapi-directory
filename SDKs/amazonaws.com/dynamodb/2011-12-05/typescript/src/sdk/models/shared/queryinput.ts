/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { Condition } from "./condition";
import { Key } from "./key";
import { Expose, Type } from "class-transformer";

export class QueryInput extends SpeakeasyBase {
  /**
   * List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AttributesToGet" })
  attributesToGet?: string[];

  /**
   * If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConsistentRead" })
  consistentRead?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Count" })
  count?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ExclusiveStartKey" })
  @Type(() => Key)
  exclusiveStartKey?: Key;

  @SpeakeasyMetadata()
  @Expose({ name: "HashKeyValue" })
  @Type(() => AttributeValue)
  hashKeyValue: AttributeValue;

  @SpeakeasyMetadata()
  @Expose({ name: "Limit" })
  limit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "RangeKeyCondition" })
  @Type(() => Condition)
  rangeKeyCondition?: Condition;

  @SpeakeasyMetadata()
  @Expose({ name: "ScanIndexForward" })
  scanIndexForward?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName: string;
}
