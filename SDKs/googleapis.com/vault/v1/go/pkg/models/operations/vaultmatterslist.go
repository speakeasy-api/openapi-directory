// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VaultMattersListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type VaultMattersListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type VaultMattersListSecurity struct {
	Option1 *VaultMattersListSecurityOption1 `security:"option"`
	Option2 *VaultMattersListSecurityOption2 `security:"option"`
}

// VaultMattersListStateEnum - If set, lists only matters with the specified state. The default lists matters of all states.
type VaultMattersListStateEnum string

const (
	VaultMattersListStateEnumStateUnspecified VaultMattersListStateEnum = "STATE_UNSPECIFIED"
	VaultMattersListStateEnumOpen             VaultMattersListStateEnum = "OPEN"
	VaultMattersListStateEnumClosed           VaultMattersListStateEnum = "CLOSED"
	VaultMattersListStateEnumDeleted          VaultMattersListStateEnum = "DELETED"
)

func (e *VaultMattersListStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "OPEN":
		fallthrough
	case "CLOSED":
		fallthrough
	case "DELETED":
		*e = VaultMattersListStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VaultMattersListStateEnum: %s", s)
	}
}

// VaultMattersListViewEnum - Specifies how much information about the matter to return in response.
type VaultMattersListViewEnum string

const (
	VaultMattersListViewEnumViewUnspecified VaultMattersListViewEnum = "VIEW_UNSPECIFIED"
	VaultMattersListViewEnumBasic           VaultMattersListViewEnum = "BASIC"
	VaultMattersListViewEnumFull            VaultMattersListViewEnum = "FULL"
)

func (e *VaultMattersListViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_UNSPECIFIED":
		fallthrough
	case "BASIC":
		fallthrough
	case "FULL":
		*e = VaultMattersListViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VaultMattersListViewEnum: %s", s)
	}
}

type VaultMattersListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// The number of matters to return in the response. Default and maximum are 100.
	PageSize *int64 `queryParam:"style=form,explode=true,name=pageSize"`
	// The pagination token as returned in the response.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// If set, lists only matters with the specified state. The default lists matters of all states.
	State *VaultMattersListStateEnum `queryParam:"style=form,explode=true,name=state"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Specifies how much information about the matter to return in response.
	View *VaultMattersListViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type VaultMattersListResponse struct {
	ContentType string
	// Successful response
	ListMattersResponse *shared.ListMattersResponse
	StatusCode          int
	RawResponse         *http.Response
}
