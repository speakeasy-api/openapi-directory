/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Overview
 * The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the
 * [JSON API](http://jsonapi.org/format/1.0/) specification.
 * 
 * In addition to this documentation, we also provide an
 * [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) "yaml" file describing the API:
 * [Fitbit Plus API Specification](swagger.yaml).
 * 
 * # Authentication
 * Authentication for the Fitbit Plus API is based on the
 * [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant
 * types of **client_credentials** and **refresh_token**.
 * 
 * See [POST /oauth/token](#operation/createToken) for details on the request and response formats.
 * &lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;
 * 
 * ## Building Integrations
 * We will provide customers with unique client credentials for each application/integration they build, allowing us
 * to enforce appropriate access controls and monitor API usage.
 * The client credentials will be scoped to the organization, and allow full access to all patients and related data
 * within that organization.
 * 
 * These credentials are appropriate for creating an integration that does one of the following:
 *  - background reporting/analysis
 *  - synchronizing data with another system (such as an EMR)
 * 
 * The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing
 * application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to
 * that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a
 * federated identity provider. You would need to have a separate means of verifying a user's identity. We do not
 * currently support the required password-based oauth flow to make this possible.
 * 
 * # Paging
 * The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.
 * 
 * #### Skip-based paging
 * 
 * Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.
 * 
 * If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&amp;page[size]=50&amp;page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&amp;page[size]=50&amp;page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.
 * 
 * #### Cursor-based paging
 * Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.
 * 
 * Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&amp;page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&amp;page[limit]=50&amp;page[after]=&lt;cursor&gt;`.
 * 
 * We encourage the use of cursor-based paging for performance reasons.
 * 
 * In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.
 * 
 * It is not valid to mix the two strategies.
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.twinehealth.com/pub",
	};
  	
    /**
     * An action is an actionable item in a patient's plan.
     */
    public Action action;
    /**
     * A bundle is a collection of actions (an action plan) in a patient's plan summary.
     */
    public Bundle bundle;
    /**
     * A calendar event represents an event involving or relevant to a patient which will or has occurred on a specific date or during a specific period of time.
     */
    public CalendarEvent calendarEvent;
    /**
     * A calendar event response indicates the attendee's response to a calendar event.  Only `POST` for creation is allowed as the responses are updated into the corresponding calendar events.
     */
    public CalendarEventResponse calendarEventResponse;
    /**
     * A coach is a person that supports a patient
     */
    public Coach coach;
    /**
     * Email history represents a single email that was sent using Fitbit Plus.
     */
    public EmailHistory emailHistory;
    /**
     * A group is a cohort of patients within an organization. The creation of groups allows for the segmentation of dashboards and analytics. For example, a group might correspond to the patients in a particular practice or the employees of a particular employer.
     */
    public Group group;
    /**
     * A health profile contains a set of health questions and answers for a patient.
     */
    public HealthProfile healthProfile;
    /**
     * A health profile answer is the answer to a question for a patient.
     */
    public HealthProfileAnswer healthProfileAnswer;
    /**
     * A health profile question contains a health question and the corresponding answer for a patient.
     */
    public HealthProfileQuestion healthProfileQuestion;
    /**
     * A health question definition specifies a health question and the corresponding answer choices.
     */
    public HealthQuestionDefinition healthQuestionDefinition;
    /**
     * A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
     */
    public Metric metric;
    /**
     * Authentication operations
     */
    public Oauth oauth;
    /**
     * An organization is a Fitbit Plus customer. No data is accessible across organizations.
     */
    public Organization organization;
    /**
     * A patient is the core user of Fitbit Plus.
     */
    public Patient patient;
    /**
     * A plan is the set of actions and associated goals for a patient.
     */
    public Plan plan;
    /**
     * A patient health result is a quantitative result for a patient.
     */
    public Result result;
    /**
     * A reward allocates a portion of the budget from the reward program activation for achieving a particular goal and sets a target date.
     */
    public Reward reward;
    /**
     * A reward earning specifies the portion of a reward that was earned and at what date.
     */
    public RewardEarning rewardEarning;
    /**
     * A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date.
     */
    public RewardEarningFulfillment rewardEarningFulfillment;
    /**
     * A reward program provides the details for a rewards program for a group. Different rewards programs can be created for different periods of time specified by the start_at and end_at dates. A reward program can activated for a patient any time between these dates. An activated reward program for a patient is called a reward program activation.
     */
    public RewardProgram rewardProgram;
    /**
     * A reward program activation is the activation of a reward program for a specific patient.
     */
    public RewardProgramActivation rewardProgramActivation;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.action = new Action(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bundle = new Bundle(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.calendarEvent = new CalendarEvent(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.calendarEventResponse = new CalendarEventResponse(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.coach = new Coach(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.emailHistory = new EmailHistory(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.group = new Group(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.healthProfile = new HealthProfile(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.healthProfileAnswer = new HealthProfileAnswer(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.healthProfileQuestion = new HealthProfileQuestion(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.healthQuestionDefinition = new HealthQuestionDefinition(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.metric = new Metric(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.oauth = new Oauth(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.organization = new Organization(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.patient = new Patient(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.plan = new Plan(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.result = new Result(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.reward = new Reward(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.rewardEarning = new RewardEarning(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.rewardEarningFulfillment = new RewardEarningFulfillment(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.rewardProgram = new RewardProgram(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.rewardProgramActivation = new RewardProgramActivation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}