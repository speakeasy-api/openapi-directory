"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Authentication:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def authorize(self, request: operations.AuthorizeRequest) -> operations.AuthorizeResponse:
        r"""Authenticate a user
        Start a session with Authentiq Connect to authenticate a user.
        
        ```
        GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789
        ```
        
        This endpoint also supports the POST method.
        http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint - OIDC Authorization Endpoint
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/authorize'
        
        query_params = utils.get_query_params(operations.AuthorizeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AuthorizeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def token(self, request: operations.TokenRequest) -> operations.TokenResponse:
        r"""Obtain an ID Token
        Exchange en authorization code for an ID Token or Access Token.
        
        This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`.
        http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint - OIDC Token Endpoint
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/token'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Token])
                res.token = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Token])
                res.token = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        elif http_res.status_code in [400, 401]:
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out

        return res

    def user_info(self) -> operations.UserInfoResponse:
        r"""Retrieve a user profile
        Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint.
        http://openid.net/specs/openid-connect-core-1_0.html#UserInfo - OIDC UserInfo Endpoint
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/userinfo'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UserInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserInfo])
                res.user_info = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserInfo])
                res.user_info = out
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-www-form-urlencoded'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OAuth2Error])
                res.o_auth2_error = out

        return res

    