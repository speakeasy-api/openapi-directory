/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Player information and data
 */
export class Players {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Player stats by season
   *
   * @remarks
   * Season player stats
   */
  getPlayerSeasonStats(
    req: operations.GetPlayerSeasonStatsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayerSeasonStatsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayerSeasonStatsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/stats/player/season";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayerSeasonStatsResponse =
        new operations.GetPlayerSeasonStatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSeasonStats = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSeasonStats = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSeasonStat,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Player usage metrics broken down by season
   *
   * @remarks
   * Player usage metrics by season
   */
  getPlayerUsage(
    req: operations.GetPlayerUsageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlayerUsageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlayerUsageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/player/usage";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlayerUsageResponse =
        new operations.GetPlayerUsageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerUsages = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerUsages = utils.objectToClass(
              httpRes?.data,
              shared.PlayerUsage,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Team returning production metrics
   *
   * @remarks
   * Returning production metrics
   */
  getReturningProduction(
    req: operations.GetReturningProductionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetReturningProductionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetReturningProductionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/player/returning";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetReturningProductionResponse =
        new operations.GetReturningProductionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returningProductions = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.returningProductions = utils.objectToClass(
              httpRes?.data,
              shared.ReturningProduction,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Transfer portal by season
   *
   * @remarks
   * Transfer portal by season
   */
  getTransferPortal(
    req: operations.GetTransferPortalRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTransferPortalResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTransferPortalRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/player/portal";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTransferPortalResponse =
        new operations.GetTransferPortalResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.portalPlayers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.portalPlayers = utils.objectToClass(
              httpRes?.data,
              shared.PortalPlayer,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Search for player information
   *
   * @remarks
   * Search for players
   */
  playerSearch(
    req: operations.PlayerSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PlayerSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PlayerSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/player/search";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PlayerSearchResponse =
        new operations.PlayerSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playerSearchResults = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.playerSearchResults = utils.objectToClass(
              httpRes?.data,
              shared.PlayerSearchResult,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
