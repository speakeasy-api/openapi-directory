/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VolumeVolumeInfo - General volume information.
 */
public class VolumeVolumeInfo {
    /**
     * Whether anonymous logging should be allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowAnonLogging")
    public Boolean allowAnonLogging;
    public VolumeVolumeInfo withAllowAnonLogging(Boolean allowAnonLogging) {
        this.allowAnonLogging = allowAnonLogging;
        return this;
    }
    
    /**
     * The names of the authors and/or editors for this volume. (In LITE projection)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authors")
    public String[] authors;
    public VolumeVolumeInfo withAuthors(String[] authors) {
        this.authors = authors;
        return this;
    }
    
    /**
     * The mean review rating for this volume. (min = 1.0, max = 5.0)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("averageRating")
    public Double averageRating;
    public VolumeVolumeInfo withAverageRating(Double averageRating) {
        this.averageRating = averageRating;
        return this;
    }
    
    /**
     * Canonical URL for a volume. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonicalVolumeLink")
    public String canonicalVolumeLink;
    public VolumeVolumeInfo withCanonicalVolumeLink(String canonicalVolumeLink) {
        this.canonicalVolumeLink = canonicalVolumeLink;
        return this;
    }
    
    /**
     * A list of subject categories, such as "Fiction", "Suspense", etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public String[] categories;
    public VolumeVolumeInfo withCategories(String[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Whether the volume has comics content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comicsContent")
    public Boolean comicsContent;
    public VolumeVolumeInfo withComicsContent(Boolean comicsContent) {
        this.comicsContent = comicsContent;
        return this;
    }
    
    /**
     * An identifier for the version of the volume content (text &amp; images). (In LITE projection)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentVersion")
    public String contentVersion;
    public VolumeVolumeInfo withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }
    
    /**
     * A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as b, i, and br tags. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public VolumeVolumeInfo withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Physical dimensions of this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    public VolumeVolumeInfoDimensions dimensions;
    public VolumeVolumeInfo withDimensions(VolumeVolumeInfoDimensions dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * A list of image links for all the sizes that are available. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageLinks")
    public VolumeVolumeInfoImageLinks imageLinks;
    public VolumeVolumeInfo withImageLinks(VolumeVolumeInfoImageLinks imageLinks) {
        this.imageLinks = imageLinks;
        return this;
    }
    
    /**
     * Industry standard identifiers for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industryIdentifiers")
    public VolumeVolumeInfoIndustryIdentifiers[] industryIdentifiers;
    public VolumeVolumeInfo withIndustryIdentifiers(VolumeVolumeInfoIndustryIdentifiers[] industryIdentifiers) {
        this.industryIdentifiers = industryIdentifiers;
        return this;
    }
    
    /**
     * URL to view information about this volume on the Google Books site. (In LITE projection)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoLink")
    public String infoLink;
    public VolumeVolumeInfo withInfoLink(String infoLink) {
        this.infoLink = infoLink;
        return this;
    }
    
    /**
     * Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as 'fr', 'en', etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public VolumeVolumeInfo withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    /**
     * The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mainCategory")
    public String mainCategory;
    public VolumeVolumeInfo withMainCategory(String mainCategory) {
        this.mainCategory = mainCategory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maturityRating")
    public String maturityRating;
    public VolumeVolumeInfo withMaturityRating(String maturityRating) {
        this.maturityRating = maturityRating;
        return this;
    }
    
    /**
     * Total number of pages as per publisher metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageCount")
    public Integer pageCount;
    public VolumeVolumeInfo withPageCount(Integer pageCount) {
        this.pageCount = pageCount;
        return this;
    }
    
    /**
     * A top-level summary of the panelization info in this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panelizationSummary")
    public VolumeVolumeInfoPanelizationSummary panelizationSummary;
    public VolumeVolumeInfo withPanelizationSummary(VolumeVolumeInfoPanelizationSummary panelizationSummary) {
        this.panelizationSummary = panelizationSummary;
        return this;
    }
    
    /**
     * URL to preview this volume on the Google Books site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previewLink")
    public String previewLink;
    public VolumeVolumeInfo withPreviewLink(String previewLink) {
        this.previewLink = previewLink;
        return this;
    }
    
    /**
     * Type of publication of this volume. Possible values are BOOK or MAGAZINE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("printType")
    public String printType;
    public VolumeVolumeInfo withPrintType(String printType) {
        this.printType = printType;
        return this;
    }
    
    /**
     * Total number of printed pages in generated pdf representation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("printedPageCount")
    public Integer printedPageCount;
    public VolumeVolumeInfo withPrintedPageCount(Integer printedPageCount) {
        this.printedPageCount = printedPageCount;
        return this;
    }
    
    /**
     * Date of publication. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publishedDate")
    public String publishedDate;
    public VolumeVolumeInfo withPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
        return this;
    }
    
    /**
     * Publisher of this volume. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisher")
    public String publisher;
    public VolumeVolumeInfo withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }
    
    /**
     * The number of review ratings for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingsCount")
    public Integer ratingsCount;
    public VolumeVolumeInfo withRatingsCount(Integer ratingsCount) {
        this.ratingsCount = ratingsCount;
        return this;
    }
    
    /**
     * The reading modes available for this volume.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readingModes")
    public VolumeVolumeInfoReadingModes readingModes;
    public VolumeVolumeInfo withReadingModes(VolumeVolumeInfoReadingModes readingModes) {
        this.readingModes = readingModes;
        return this;
    }
    
    /**
     * Total number of sample pages as per publisher metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplePageCount")
    public Integer samplePageCount;
    public VolumeVolumeInfo withSamplePageCount(Integer samplePageCount) {
        this.samplePageCount = samplePageCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seriesInfo")
    public Volumeseriesinfo seriesInfo;
    public VolumeVolumeInfo withSeriesInfo(Volumeseriesinfo seriesInfo) {
        this.seriesInfo = seriesInfo;
        return this;
    }
    
    /**
     * Volume subtitle. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitle")
    public String subtitle;
    public VolumeVolumeInfo withSubtitle(String subtitle) {
        this.subtitle = subtitle;
        return this;
    }
    
    /**
     * Volume title. (In LITE projection.)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public VolumeVolumeInfo withTitle(String title) {
        this.title = title;
        return this;
    }
    
}
