"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotoattributes as shared_enterprisecrmeventbusprotoattributes
from ..shared import enterprisecrmeventbusprotonodeidentifier as shared_enterprisecrmeventbusprotonodeidentifier
from ..shared import enterprisecrmfrontendseventbusprotoparametervaluetype as shared_enterprisecrmfrontendseventbusprotoparametervaluetype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataTypeEnum(str, Enum):
    r"""The data type of the parameter."""
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    SERIALIZED_OBJECT_VALUE = 'SERIALIZED_OBJECT_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    PROTO_ARRAY = 'PROTO_ARRAY'
    PROTO_ENUM = 'PROTO_ENUM'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    PROTO_ENUM_ARRAY = 'PROTO_ENUM_ARRAY'
    BYTES = 'BYTES'
    BYTES_ARRAY = 'BYTES_ARRAY'
    NON_SERIALIZABLE_OBJECT = 'NON_SERIALIZABLE_OBJECT'
    JSON_VALUE = 'JSON_VALUE'

class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutTypeEnum(str, Enum):
    r"""Specifies the input/output type for the parameter."""
    IN_OUT_TYPE_UNSPECIFIED = 'IN_OUT_TYPE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    IN_OUT = 'IN_OUT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry:
    
    attributes: Optional[shared_enterprisecrmeventbusprotoattributes.EnterpriseCrmEventbusProtoAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Attributes are additional options that can be associated with each event property. For more information, see"""  
    children: Optional[list[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})
    r"""Child parameters nested within this parameter. This field only applies to protobuf parameters"""  
    data_type: Optional[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""The data type of the parameter."""  
    default_value: Optional[shared_enterprisecrmfrontendseventbusprotoparametervaluetype.EnterpriseCrmFrontendsEventbusProtoParameterValueType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})
    r"""To support various types of parameter values. Next available id: 14"""  
    in_out_type: Optional[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inOutType'), 'exclude': lambda f: f is None }})
    r"""Specifies the input/output type for the parameter."""  
    is_transient: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isTransient'), 'exclude': lambda f: f is None }})
    r"""Whether this parameter is a transient parameter."""  
    json_schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonSchema'), 'exclude': lambda f: f is None }})
    r"""This schema will be used to validate runtime JSON-typed values of this parameter."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is \\"foo.bar.myName\\", then the name would be \\"myName\\"."""  
    produced_by: Optional[shared_enterprisecrmeventbusprotonodeidentifier.EnterpriseCrmEventbusProtoNodeIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producedBy'), 'exclude': lambda f: f is None }})
    r"""Represents a node identifier (type + id). Next highest id: 3"""  
    producer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('producer'), 'exclude': lambda f: f is None }})  
    proto_def_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protoDefName'), 'exclude': lambda f: f is None }})
    r"""The name of the protobuf type if the parameter has a protobuf data type."""  
    proto_def_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protoDefPath'), 'exclude': lambda f: f is None }})
    r"""If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be \\"enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry\\"."""  
    