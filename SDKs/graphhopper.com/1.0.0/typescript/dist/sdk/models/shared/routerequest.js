"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteRequest = exports.RouteRequestVehicleEnum = exports.RouteRequestCurbsidesEnum = exports.RouteRequestAlgorithmEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Rather than looking for the shortest or fastest path, this lets you solve two different problems related to routing:
 *
 * @remarks
 * With `round_trip`, the route will get you back to where you started. This is meant for fun (think of
 * a bike trip), so we will add some randomness. This requires `ch.disable=true`.
 * With `alternative_route`, we give you not one but several routes that are close to optimal, but
 * not too similar to each other. You can control both of these features with additional parameters, see below.
 *
 */
var RouteRequestAlgorithmEnum;
(function (RouteRequestAlgorithmEnum) {
    RouteRequestAlgorithmEnum["RoundTrip"] = "round_trip";
    RouteRequestAlgorithmEnum["AlternativeRoute"] = "alternative_route";
})(RouteRequestAlgorithmEnum = exports.RouteRequestAlgorithmEnum || (exports.RouteRequestAlgorithmEnum = {}));
var RouteRequestCurbsidesEnum;
(function (RouteRequestCurbsidesEnum) {
    RouteRequestCurbsidesEnum["Any"] = "any";
    RouteRequestCurbsidesEnum["Right"] = "right";
    RouteRequestCurbsidesEnum["Left"] = "left";
})(RouteRequestCurbsidesEnum = exports.RouteRequestCurbsidesEnum || (exports.RouteRequestCurbsidesEnum = {}));
/**
 * The vehicle profile for which the route should be calculated. Other vehicles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) for the details.
 */
var RouteRequestVehicleEnum;
(function (RouteRequestVehicleEnum) {
    RouteRequestVehicleEnum["Car"] = "car";
    RouteRequestVehicleEnum["Bike"] = "bike";
    RouteRequestVehicleEnum["Foot"] = "foot";
    RouteRequestVehicleEnum["Hike"] = "hike";
    RouteRequestVehicleEnum["Mtb"] = "mtb";
    RouteRequestVehicleEnum["Racingbike"] = "racingbike";
    RouteRequestVehicleEnum["Scooter"] = "scooter";
    RouteRequestVehicleEnum["Truck"] = "truck";
    RouteRequestVehicleEnum["SmallTruck"] = "small_truck";
})(RouteRequestVehicleEnum = exports.RouteRequestVehicleEnum || (exports.RouteRequestVehicleEnum = {}));
var RouteRequest = /** @class */ (function (_super) {
    __extends(RouteRequest, _super);
    function RouteRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "algorithm" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "algorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alternative_route.max_paths" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "alternativeRouteMaxPaths", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alternative_route.max_share_factor" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "alternativeRouteMaxShareFactor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "alternative_route.max_weight_factor" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "alternativeRouteMaxWeightFactor", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "avoid" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "avoid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "block_area" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "blockArea", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "calc_points" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "calcPoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ch.disable" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "chDisable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "curbsides" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "curbsides", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "debug" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "debug", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "details" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "details", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "elevation" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "elevation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "heading_penalty" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "headingPenalty", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "headings" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "headings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instructions" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "instructions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "locale" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "locale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "optimize" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "optimize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pass_through" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "passThrough", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "point_hints" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "pointHints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "points" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "points", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "points_encoded" }),
        __metadata("design:type", Boolean)
    ], RouteRequest.prototype, "pointsEncoded", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "round_trip.distance" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "roundTripDistance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "round_trip.seed" }),
        __metadata("design:type", Number)
    ], RouteRequest.prototype, "roundTripSeed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "snap_preventions" }),
        __metadata("design:type", Array)
    ], RouteRequest.prototype, "snapPreventions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vehicle" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "vehicle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "weighting" }),
        __metadata("design:type", String)
    ], RouteRequest.prototype, "weighting", void 0);
    return RouteRequest;
}(utils_1.SpeakeasyBase));
exports.RouteRequest = RouteRequest;
