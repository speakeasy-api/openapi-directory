"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountInput = exports.Account = exports.AccountVettedStateEnum = exports.AccountVerificationStateEnum = exports.AccountTypeEnum = exports.AccountRoleEnum = exports.AccountPermissionLevelEnum = void 0;
var utils_1 = require("../../../internal/utils");
var organizationinfo_1 = require("./organizationinfo");
var class_transformer_1 = require("class-transformer");
/**
 * Output only. Specifies the permission level the user has for this account.
 */
var AccountPermissionLevelEnum;
(function (AccountPermissionLevelEnum) {
    AccountPermissionLevelEnum["PermissionLevelUnspecified"] = "PERMISSION_LEVEL_UNSPECIFIED";
    AccountPermissionLevelEnum["OwnerLevel"] = "OWNER_LEVEL";
    AccountPermissionLevelEnum["MemberLevel"] = "MEMBER_LEVEL";
})(AccountPermissionLevelEnum = exports.AccountPermissionLevelEnum || (exports.AccountPermissionLevelEnum = {}));
/**
 * Output only. Specifies the AccountRole of this account.
 */
var AccountRoleEnum;
(function (AccountRoleEnum) {
    AccountRoleEnum["AccountRoleUnspecified"] = "ACCOUNT_ROLE_UNSPECIFIED";
    AccountRoleEnum["PrimaryOwner"] = "PRIMARY_OWNER";
    AccountRoleEnum["Owner"] = "OWNER";
    AccountRoleEnum["Manager"] = "MANAGER";
    AccountRoleEnum["SiteManager"] = "SITE_MANAGER";
})(AccountRoleEnum = exports.AccountRoleEnum || (exports.AccountRoleEnum = {}));
/**
 * Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
 */
var AccountTypeEnum;
(function (AccountTypeEnum) {
    AccountTypeEnum["AccountTypeUnspecified"] = "ACCOUNT_TYPE_UNSPECIFIED";
    AccountTypeEnum["Personal"] = "PERSONAL";
    AccountTypeEnum["LocationGroup"] = "LOCATION_GROUP";
    AccountTypeEnum["UserGroup"] = "USER_GROUP";
    AccountTypeEnum["Organization"] = "ORGANIZATION";
})(AccountTypeEnum = exports.AccountTypeEnum || (exports.AccountTypeEnum = {}));
/**
 * Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
 */
var AccountVerificationStateEnum;
(function (AccountVerificationStateEnum) {
    AccountVerificationStateEnum["VerificationStateUnspecified"] = "VERIFICATION_STATE_UNSPECIFIED";
    AccountVerificationStateEnum["Verified"] = "VERIFIED";
    AccountVerificationStateEnum["Unverified"] = "UNVERIFIED";
    AccountVerificationStateEnum["VerificationRequested"] = "VERIFICATION_REQUESTED";
})(AccountVerificationStateEnum = exports.AccountVerificationStateEnum || (exports.AccountVerificationStateEnum = {}));
/**
 * Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
 */
var AccountVettedStateEnum;
(function (AccountVettedStateEnum) {
    AccountVettedStateEnum["VettedStateUnspecified"] = "VETTED_STATE_UNSPECIFIED";
    AccountVettedStateEnum["NotVetted"] = "NOT_VETTED";
    AccountVettedStateEnum["Vetted"] = "VETTED";
    AccountVettedStateEnum["Invalid"] = "INVALID";
})(AccountVettedStateEnum = exports.AccountVettedStateEnum || (exports.AccountVettedStateEnum = {}));
/**
 * An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
 */
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountName" }),
        __metadata("design:type", String)
    ], Account.prototype, "accountName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountNumber" }),
        __metadata("design:type", String)
    ], Account.prototype, "accountNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Account.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organizationInfo" }),
        (0, class_transformer_1.Type)(function () { return organizationinfo_1.OrganizationInfo; }),
        __metadata("design:type", organizationinfo_1.OrganizationInfo)
    ], Account.prototype, "organizationInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "permissionLevel" }),
        __metadata("design:type", String)
    ], Account.prototype, "permissionLevel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "primaryOwner" }),
        __metadata("design:type", String)
    ], Account.prototype, "primaryOwner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "role" }),
        __metadata("design:type", String)
    ], Account.prototype, "role", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Account.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "verificationState" }),
        __metadata("design:type", String)
    ], Account.prototype, "verificationState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vettedState" }),
        __metadata("design:type", String)
    ], Account.prototype, "vettedState", void 0);
    return Account;
}(utils_1.SpeakeasyBase));
exports.Account = Account;
/**
 * An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
 */
var AccountInput = /** @class */ (function (_super) {
    __extends(AccountInput, _super);
    function AccountInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountName" }),
        __metadata("design:type", String)
    ], AccountInput.prototype, "accountName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AccountInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "organizationInfo" }),
        (0, class_transformer_1.Type)(function () { return organizationinfo_1.OrganizationInfoInput; }),
        __metadata("design:type", organizationinfo_1.OrganizationInfoInput)
    ], AccountInput.prototype, "organizationInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "primaryOwner" }),
        __metadata("design:type", String)
    ], AccountInput.prototype, "primaryOwner", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], AccountInput.prototype, "type", void 0);
    return AccountInput;
}(utils_1.SpeakeasyBase));
exports.AccountInput = AccountInput;
