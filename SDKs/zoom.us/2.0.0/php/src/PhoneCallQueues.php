<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PhoneCallQueues 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add members to a call queue
     * 
     * Add phone users and/or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) as members to a specific Call Queue.<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueResponse
     */
	public function addMembersToCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/members', \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddMembersToCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addMembersToCallQueue201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Assign numbers to a call queue
     * 
     * After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueResponse
     */
	public function assignPhoneToCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/phone_numbers', \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AssignPhoneToCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignPhoneToCallQueue204ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Change call queue manager
     * 
     * A call queue manager has the privileges to maanage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.<br><br> Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c).
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerResponse
     */
	public function changeCallQueueManager(
        \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/manager', \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeCallQueueManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->changeCallQueueManager204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a call queue
     * 
     * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to [create a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413).<br> You can add phone users or common area phones to call queues.
     * 
     * **Prerequisites:**<br>
     * * Pro, Business, or Education account
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueResponse
     */
	public function createCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCallQueue201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateCallQueue201ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a call queue
     * 
     * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to delete a Call Queue.<br> 
     * **Prerequisites:**<br>
     * * Pro, Business, or Education account
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueResponse
     */
	public function deleteACallQueue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}', \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteACallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteACallQueue204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get call queue details
     * 
     * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to get information on a specific Call Queue.<br><br> 
     * **Prerequisites:**<br>
     * * Pro, Business, or Education account
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:read:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetACallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetACallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetACallQueueResponse
     */
	public function getACallQueue(
        \OpenAPI\OpenAPI\Models\Operations\GetACallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetACallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetACallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}', \OpenAPI\OpenAPI\Models\Operations\GetACallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetACallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getACallQueue200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetACallQueue200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get call queue recordings
     * 
     * Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.<br><br>
     * **Prerequisites:**<br>
     * * Pro or higher account with Zoom Phone license.
     * * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues. <br> **Scope:** `phone:read:admin`<br> **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsResponse
     */
	public function getCallQueueRecordings(
        \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/recordings', \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getCallQueueRecordings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCallQueueRecordings200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List call queues
     * 
     * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to list Call queues.<br><br>
     * **Prerequisites:**<br>
     * * Pro, Business, or Education account
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:read:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesResponse
     */
	public function listCallQueues(
        \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallQueuesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallQueuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallQueues200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallQueues200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unassign a phone number
     * 
     * After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br><br>
     * **Prerequisites:**
     * * Pro or higher account palan
     * * Account owner or admin permissions
     * * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueResponse
     */
	public function unAssignPhoneNumCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/phone_numbers/{phoneNumberId}', \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnAssignPhoneNumCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unAssignPhoneNumCallQueue204ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Unassign all phone numbers
     * 
     * Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).<br> If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead. <br>
     * **Prerequisites:**
     * * Pro or higher account palan
     * * Account owner or admin permissions
     * * Zoom Phone license <br> **Scopes:** `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueResponse
     */
	public function unassignAPhoneNumCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/phone_numbers', \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnassignAPhoneNumCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unassignAPhoneNumCallQueue204ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Unassign all members
     * 
     * Use this API to remove all members from a Call Queue who were previously assigned to that Call Queue. The members could be phone users or [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersResponse
     */
	public function unassignAllMembers(
        \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/members', \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnassignAllMembersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unassignAllMembers204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Unassign a member
     * 
     * Use this API to remove a member from a Call Queue who was previously added to that Call Queue. The member could be a phone user or a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones). A member who is a Call Queue Manager cannot be unassigned from the Call Queue using this API. 
     * **Prerequisites:**<br>
     * * Pro or higher account plan.
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueResponse
     */
	public function unassignMemberFromCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}/members/{memberId}', \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnassignMemberFromCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unassignMemberFromCallQueue204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update call queue details
     * 
     * Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.<br> Use this API to update information of a specific Call Queue.<br> 
     * **Prerequisites:**<br>
     * * Pro, Business, or Education account
     * * Account owner or admin permissions
     * * Zoom Phone license<br>
     * **Scopes:** `phone:write:admin`<br> 
     * 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueResponse
     */
	public function updateCallQueue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/phone/call_queues/{callQueueId}', \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCallQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCallQueue204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}