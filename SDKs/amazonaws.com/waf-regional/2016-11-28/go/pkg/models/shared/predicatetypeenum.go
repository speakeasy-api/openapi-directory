// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PredicateTypeEnum string

const (
	PredicateTypeEnumIPMatch           PredicateTypeEnum = "IPMatch"
	PredicateTypeEnumByteMatch         PredicateTypeEnum = "ByteMatch"
	PredicateTypeEnumSQLInjectionMatch PredicateTypeEnum = "SqlInjectionMatch"
	PredicateTypeEnumGeoMatch          PredicateTypeEnum = "GeoMatch"
	PredicateTypeEnumSizeConstraint    PredicateTypeEnum = "SizeConstraint"
	PredicateTypeEnumXSSMatch          PredicateTypeEnum = "XssMatch"
	PredicateTypeEnumRegexMatch        PredicateTypeEnum = "RegexMatch"
)

func (e PredicateTypeEnum) ToPointer() *PredicateTypeEnum {
	return &e
}

func (e *PredicateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IPMatch":
		fallthrough
	case "ByteMatch":
		fallthrough
	case "SqlInjectionMatch":
		fallthrough
	case "GeoMatch":
		fallthrough
	case "SizeConstraint":
		fallthrough
	case "XssMatch":
		fallthrough
	case "RegexMatch":
		*e = PredicateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PredicateTypeEnum: %v", v)
	}
}
