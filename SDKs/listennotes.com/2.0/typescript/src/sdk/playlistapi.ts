/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints to fetch Listen Later playlists data
 */
export class PlaylistAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Fetch a playlist's info and items (i.e., episodes or podcasts).
   *
   * @remarks
   * A playlist can be an episode list (i.e., all items are episodes) or a podcast list (i.e., all items are podcasts),
   * which is essentially the same as those created via listennotes.com/listen/.
   * This endpoint fetches a list of items (i.e., episodes or podcasts) in the playlist.
   * You can use the **last_pub_date_ms** parameter to do pagination and fetch more items.
   * A playlist can be **public** (discoverable on ListenNotes.com),
   * **unlisted** (accessible to anyone who knows the playlist id),
   * or **private** (accessible to its owner).
   * You can fetch all playlists created by you, and **public** / **unlisted** playlists created by others.
   *
   */
  getPlaylistById(
    req: operations.GetPlaylistByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlaylistByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlaylistByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/playlists/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlaylistByIdResponse =
        new operations.GetPlaylistByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playlistResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlaylistResponse
            );
          }
          break;
        case httpRes?.status == 401 ||
          httpRes?.status == 404 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a list of your playlists.
   *
   * @remarks
   * This endpoint returns same data as listennotes.com/listen under your account.
   * You can use the **page** parameter to do pagination and fetch more playlists.
   *
   */
  getPlaylists(
    req: operations.GetPlaylistsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPlaylistsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPlaylistsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/playlists";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPlaylistsResponse =
        new operations.GetPlaylistsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.playlistsResponse = utils.objectToClass(
              httpRes?.data,
              shared.PlaylistsResponse
            );
          }
          break;
        case httpRes?.status == 401 ||
          httpRes?.status == 429 ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          break;
      }

      return res;
    });
  }
}
