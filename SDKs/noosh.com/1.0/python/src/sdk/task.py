"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Task:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def task_priority_list(self, request: operations.TaskPriorityListRequest) -> operations.TaskPriorityListResponse:
        r"""Get default task priority list
        Get default task priority list
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskPriorityListRequest, base_url, '/v1/workgroups/{workgroup_id}/defaultTaskPriority', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskPriorityListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskPriorityListVO])
                res.task_priority_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskPriorityListVO])
                res.task_priority_list_vo = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_custom_task_types_of_wg(self, request: operations.GetCustomTaskTypesOfWgRequest) -> operations.GetCustomTaskTypesOfWgResponse:
        r"""Get custom task types of workgroup level
        Get custom task types of workgroup level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomTaskTypesOfWgRequest, base_url, '/v1/workgroups/{workgroup_id}/customTaskTypes', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomTaskTypesOfWgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTypeListVO])
                res.task_type_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTypeListVO])
                res.task_type_list_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_default_task_status_list(self, request: operations.GetDefaultTaskStatusListRequest) -> operations.GetDefaultTaskStatusListResponse:
        r"""Get default task status list
        Get default task status list
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDefaultTaskStatusListRequest, base_url, '/v1/workgroups/{workgroup_id}/defaultTaskStatus', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDefaultTaskStatusListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskStatusListVO])
                res.task_status_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskStatusListVO])
                res.task_status_list_vo = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_task_list_of_project(self, request: operations.GetTaskListOfProjectRequest) -> operations.GetTaskListOfProjectResponse:
        r"""Get task list of project level
        Get task list of project level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskListOfProjectRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskListOfProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskListVO])
                res.task_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskListVO])
                res.task_list_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_task_list_of_workgroup(self, request: operations.GetTaskListOfWorkgroupRequest) -> operations.GetTaskListOfWorkgroupResponse:
        r"""Get task list of workgroup level
        Get task list of workgroup level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskListOfWorkgroupRequest, base_url, '/v1/workgroups/{workgroup_id}/tasks', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskListOfWorkgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskWorkgroupLevelListVO])
                res.task_workgroup_level_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskWorkgroupLevelListVO])
                res.task_workgroup_level_list_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_task_of_project(self, request: operations.GetTaskOfProjectRequest) -> operations.GetTaskOfProjectResponse:
        r"""Get a sepcific task of project level
        Get a sepcific task of project level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskOfProjectRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks/{task_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskOfProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskExpandVO])
                res.task_expand_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskExpandVO])
                res.task_expand_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_task_of_workgroup(self, request: operations.GetTaskOfWorkgroupRequest) -> operations.GetTaskOfWorkgroupResponse:
        r"""Get a sepcific task of workgroup level
        Get a sepcific task of workgroup level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskOfWorkgroupRequest, base_url, '/v1/workgroups/{workgroup_id}/tasks/{task_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskOfWorkgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskExpandWorkgroupLevelVO])
                res.task_expand_workgroup_level_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskExpandWorkgroupLevelVO])
                res.task_expand_workgroup_level_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_task_types_of_workgroup(self, request: operations.GetTaskTypesOfWorkgroupRequest) -> operations.GetTaskTypesOfWorkgroupResponse:
        r"""Get task types of workgroup level
        Get task types of workgroup level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskTypesOfWorkgroupRequest, base_url, '/v1/workgroups/{workgroup_id}/taskTypes', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskTypesOfWorkgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTypeListVO])
                res.task_type_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskTypeListVO])
                res.task_type_list_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def get_wg_task_status_list_of_workgroup(self, request: operations.GetWgTaskStatusListOfWorkgroupRequest) -> operations.GetWgTaskStatusListOfWorkgroupResponse:
        r"""Get custom task status of workgroup level
        Get custom task status of workgroup level
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWgTaskStatusListOfWorkgroupRequest, base_url, '/v1/workgroups/{workgroup_id}/customTaskStatus', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWgTaskStatusListOfWorkgroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WgTaskStatusListVO])
                res.wg_task_status_list_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.WgTaskStatusListVO])
                res.wg_task_status_list_vo = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def post_task_for_project_json(self, request: operations.PostTaskForProjectJSONRequest) -> operations.PostTaskForProjectJSONResponse:
        r"""Create a new task
        Create a new task
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTaskForProjectJSONRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_persist_vo", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTaskForProjectJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCreatedVO])
                res.task_created_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCreatedVO])
                res.task_created_vo = out
        elif http_res.status_code in [422, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    def post_task_for_project_raw(self, request: operations.PostTaskForProjectRawRequest) -> operations.PostTaskForProjectRawResponse:
        r"""Create a new task
        Create a new task
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostTaskForProjectRawRequest, base_url, '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostTaskForProjectRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCreatedVO])
                res.task_created_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskCreatedVO])
                res.task_created_vo = out
        elif http_res.status_code in [422, 500]:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/x-yaml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out
            if utils.match_content_type(content_type, 'application/x-json-smile'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPStatusVO])
                res.http_status_vo = out

        return res

    