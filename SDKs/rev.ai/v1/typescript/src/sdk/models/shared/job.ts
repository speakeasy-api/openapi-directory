/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions
 */
export enum JobFailureEnum {
  InternalProcessing = "internal_processing",
  DownloadFailure = "download_failure",
  DurationExceeded = "duration_exceeded",
  DurationTooShort = "duration_too_short",
  InvalidMedia = "invalid_media",
  EmptyMedia = "empty_media",
  Transcription = "transcription",
  InsufficientBalance = "insufficient_balance",
  InvoicingLimitExceeded = "invoicing_limit_exceeded",
}

export enum JobLanguageEnum {
  En = "en",
  Ar = "ar",
  Bg = "bg",
  Ca = "ca",
  Cmn = "cmn",
  Cs = "cs",
  Da = "da",
  De = "de",
  El = "el",
  Es = "es",
  Fi = "fi",
  Fr = "fr",
  Hi = "hi",
  Hr = "hr",
  Hu = "hu",
  It = "it",
  Ja = "ja",
  Ko = "ko",
  Lt = "lt",
  Lv = "lv",
  Ms = "ms",
  Nl = "nl",
  No = "no",
  Pl = "pl",
  Pt = "pt",
  Ro = "ro",
  Ru = "ru",
  Sk = "sk",
  Sl = "sl",
  Sv = "sv",
  Tr = "tr",
}

/**
 * Current status of the job
 */
export enum JobStatusEnum {
  InProgress = "in_progress",
  Transcribed = "transcribed",
  Failed = "failed",
}

/**
 * Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs
 */
export enum JobTypeEnum {
  Async = "async",
}

/**
 * Rev.ai Transcription Job
 *
 * @remarks
 * ***
 * Note: properties are not displayed in the returned object if they are null
 *
 */
export class Job extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "callback_url" })
  callbackUrl?: string;

  /**
   * The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed_on" })
  completedOn?: string;

  /**
   * The date and time the job was created in ISO-8601 UTC form
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_on" })
  createdOn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_vocabulary_id" })
  customVocabularyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "delete_after_seconds" })
  deleteAfterSeconds?: number;

  /**
   * Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration_seconds" })
  durationSeconds?: number;

  /**
   * Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failure" })
  failure?: JobFailureEnum;

  /**
   * Human-readable reason why the job failed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failure_detail" })
  failureDetail?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "filter_profanity" })
  filterProfanity?: boolean;

  /**
   * Id of the job
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: JobLanguageEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "media_url" })
  mediaUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: string;

  /**
   * Name of the file provided. Present when the file name is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "remove_disfluencies" })
  removeDisfluencies?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "skip_diarization" })
  skipDiarization?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "skip_punctuation" })
  skipPunctuation?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "speaker_channels_count" })
  speakerChannelsCount?: number;

  /**
   * Current status of the job
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: JobStatusEnum;

  /**
   * Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: JobTypeEnum;
}
