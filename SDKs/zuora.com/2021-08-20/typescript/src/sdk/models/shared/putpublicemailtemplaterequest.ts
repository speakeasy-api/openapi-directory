/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Email cc type.
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
export enum PUTPublicEmailTemplateRequestCcEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * The endcode type of the email body.
 */
export enum PUTPublicEmailTemplateRequestEncodingTypeEnum {
  Utf8 = "UTF8",
  ShiftJIS = "Shift_JIS",
  Iso2022Jp = "ISO_2022_JP",
  EucJp = "EUC_JP",
  XSjis0213 = "X_SJIS_0213",
}

/**
 * The type of fromEmail.
 */
export enum PUTPublicEmailTemplateRequestFromEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * The type of the reply email.
 */
export enum PUTPublicEmailTemplateRequestReplyToEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * Email receive type.
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
export enum PUTPublicEmailTemplateRequestToEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * The request body to update an email template.
 */
export class PUTPublicEmailTemplateRequest extends SpeakeasyBase {
  /**
   * The status of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * Email bcc address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bccEmailAddress" })
  bccEmailAddress?: string;

  /**
   * Email cc address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailAddress" })
  ccEmailAddress?: string;

  /**
   * Email cc type.
   *
   * @remarks
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailType" })
  ccEmailType?: PUTPublicEmailTemplateRequestCcEmailTypeEnum;

  /**
   * The description of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The email body. You can add merge fields in the email object using angle brackets.
   *
   * @remarks
   * User can also embed html tags if 'isHtml' is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailBody" })
  emailBody?: string;

  /**
   * The email subject. You can add merge fields in the email subject using angle brackets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailSubject" })
  emailSubject?: string;

  /**
   * The endcode type of the email body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encodingType" })
  encodingType?: PUTPublicEmailTemplateRequestEncodingTypeEnum;

  /**
   * If fromEmailType is SpecificEmail, this field is required
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailAddress" })
  fromEmailAddress?: string;

  /**
   * The type of fromEmail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailType" })
  fromEmailType?: PUTPublicEmailTemplateRequestFromEmailTypeEnum;

  /**
   * The name of email sender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromName" })
  fromName?: string;

  /**
   * Specifies whether the style of email body is HTML.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isHtml" })
  isHtml?: boolean;

  /**
   * The name of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * If replyToEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailAddress" })
  replyToEmailAddress?: string;

  /**
   * The type of the reply email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailType" })
  replyToEmailType?: PUTPublicEmailTemplateRequestReplyToEmailTypeEnum;

  /**
   * If toEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailAddress" })
  toEmailAddress?: string;

  /**
   * Email receive type.
   *
   * @remarks
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailType" })
  toEmailType?: PUTPublicEmailTemplateRequestToEmailTypeEnum;
}
