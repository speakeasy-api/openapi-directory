// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions - <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note> <p>The VPC peering connection options.</p>
type GETModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool `queryParam:"name=AllowDnsResolutionFromRemoteVpc"`
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool `queryParam:"name=AllowEgressFromLocalClassicLinkToRemoteVpc"`
	AllowEgressFromLocalVpcToRemoteClassicLink *bool `queryParam:"name=AllowEgressFromLocalVpcToRemoteClassicLink"`
}

// GETModifyVpcPeeringConnectionOptionsActionEnum
type GETModifyVpcPeeringConnectionOptionsActionEnum string

const (
	GETModifyVpcPeeringConnectionOptionsActionEnumModifyVpcPeeringConnectionOptions GETModifyVpcPeeringConnectionOptionsActionEnum = "ModifyVpcPeeringConnectionOptions"
)

func (e GETModifyVpcPeeringConnectionOptionsActionEnum) ToPointer() *GETModifyVpcPeeringConnectionOptionsActionEnum {
	return &e
}

func (e *GETModifyVpcPeeringConnectionOptionsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ModifyVpcPeeringConnectionOptions":
		*e = GETModifyVpcPeeringConnectionOptionsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpcPeeringConnectionOptionsActionEnum: %v", v)
	}
}

// GETModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions - <note> <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </note> <p>The VPC peering connection options.</p>
type GETModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions struct {
	AllowDNSResolutionFromRemoteVpc            *bool `queryParam:"name=AllowDnsResolutionFromRemoteVpc"`
	AllowEgressFromLocalClassicLinkToRemoteVpc *bool `queryParam:"name=AllowEgressFromLocalClassicLinkToRemoteVpc"`
	AllowEgressFromLocalVpcToRemoteClassicLink *bool `queryParam:"name=AllowEgressFromLocalVpcToRemoteClassicLink"`
}

// GETModifyVpcPeeringConnectionOptionsVersionEnum
type GETModifyVpcPeeringConnectionOptionsVersionEnum string

const (
	GETModifyVpcPeeringConnectionOptionsVersionEnumTwoThousandAndSixteen1115 GETModifyVpcPeeringConnectionOptionsVersionEnum = "2016-11-15"
)

func (e GETModifyVpcPeeringConnectionOptionsVersionEnum) ToPointer() *GETModifyVpcPeeringConnectionOptionsVersionEnum {
	return &e
}

func (e *GETModifyVpcPeeringConnectionOptionsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETModifyVpcPeeringConnectionOptionsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyVpcPeeringConnectionOptionsVersionEnum: %v", v)
	}
}

type GETModifyVpcPeeringConnectionOptionsRequest struct {
	// The VPC peering connection options for the accepter VPC.
	AccepterPeeringConnectionOptions *GETModifyVpcPeeringConnectionOptionsAccepterPeeringConnectionOptions `queryParam:"style=form,explode=true,name=AccepterPeeringConnectionOptions"`
	Action                           GETModifyVpcPeeringConnectionOptionsActionEnum                        `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The VPC peering connection options for the requester VPC.
	RequesterPeeringConnectionOptions *GETModifyVpcPeeringConnectionOptionsRequesterPeeringConnectionOptions `queryParam:"style=form,explode=true,name=RequesterPeeringConnectionOptions"`
	Version                           GETModifyVpcPeeringConnectionOptionsVersionEnum                        `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC peering connection.
	VpcPeeringConnectionID string  `queryParam:"style=form,explode=true,name=VpcPeeringConnectionId"`
	XAmzAlgorithm          *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyVpcPeeringConnectionOptionsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
