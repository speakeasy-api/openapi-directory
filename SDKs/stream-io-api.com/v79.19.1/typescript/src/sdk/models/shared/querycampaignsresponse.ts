/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Campaign } from "./campaign";
import { Segment } from "./segment";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Successful response
 */
export class QueryCampaignsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Campaign })
  @Expose({ name: "campaigns" })
  @Type(() => Campaign)
  campaigns: Campaign[];

  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  channels: Record<string, Record<string, any>>;

  /**
   * Duration of the request in human-readable format
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration: string;

  @SpeakeasyMetadata({ elemType: Segment })
  @Expose({ name: "segments" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Segment> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Segment);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  segments: Record<string, Segment>;

  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users: Record<string, Record<string, any>>;
}
