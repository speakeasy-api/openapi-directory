"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SubRoutes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_displayed_attributes(self) -> operations.GetDisplayedAttributesResponse:
        r"""Get displayed attributes
        Get displayed attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/displayed-attributes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDisplayedAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_distinct_attribute(self) -> operations.GetDistinctAttributeResponse:
        r"""Get distinct attribute
        Get distinct attribute
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/distinct-attribute'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistinctAttributeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_faceting(self) -> operations.GetFacetingResponse:
        r"""Get faceting
        Get faceting
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/faceting'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFacetingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_filterable_attributes(self) -> operations.GetFilterableAttributesResponse:
        r"""Get filterable attributes
        Get filterable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/filterable-attributes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilterableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_pagination(self) -> operations.GetPaginationResponse:
        r"""Get pagination
        Get pagination
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/pagination'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaginationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ranking_rules(self) -> operations.GetRankingRulesResponse:
        r"""Get ranking rules
        Get ranking rules
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/ranking-rules'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRankingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_searchable_attributes(self) -> operations.GetSearchableAttributesResponse:
        r"""Get searchable attributes
        Get searchable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/searchable-attributes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSearchableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_sortable_attributes(self) -> operations.GetSortableAttributesResponse:
        r"""Get sortable attributes
        Get sortable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/sortable-attributes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSortableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_stop_words(self, request: list[str]) -> operations.GetStopWordsResponse:
        r"""Get stop-words
        Get stop-words
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/stop-words'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStopWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_synonyms(self) -> operations.GetSynonymsResponse:
        r"""Get synonyms
        Get synonyms
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/synonyms'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSynonymsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_typo_tolerance(self) -> operations.GetTypoToleranceResponse:
        r"""Get typo-tolerance
        Get typo-tolerance
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/typo-tolerance'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTypoToleranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_displayed_attributes(self) -> operations.ResetDisplayedAttributesResponse:
        r"""Reset displayed attributes
        Reset displayed attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/displayed-attributes'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetDisplayedAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_distinct_attribute(self) -> operations.ResetDistinctAttributeResponse:
        r"""Reset distinct attribute
        Reset distinct attribute
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/distinct-attribute'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetDistinctAttributeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_faceting(self) -> operations.ResetFacetingResponse:
        r"""Reset faceting
        Reset faceting
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/faceting'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetFacetingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_filterable_attributes(self) -> operations.ResetFilterableAttributesResponse:
        r"""Reset filterable attributes
        Reset filterable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/filterable-attributes'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetFilterableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_pagination(self) -> operations.ResetPaginationResponse:
        r"""Reset pagination
        Reset pagination
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/pagination'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetPaginationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_ranking_rules(self) -> operations.ResetRankingRulesResponse:
        r"""Reset ranking rules
        Reset ranking rules
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/ranking-rules'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetRankingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_searchable_attributes(self) -> operations.ResetSearchableAttributesResponse:
        r"""Reset searchable attributes
        Reset searchable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/searchable-attributes'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetSearchableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_sortable_attributes(self) -> operations.ResetSortableAttributesResponse:
        r"""Reset sortable attributes
        Reset sortable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/sortable-attributes'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetSortableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_stop_words(self) -> operations.ResetStopWordsResponse:
        r"""Reset stop-words
        Reset stop-words
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/stop-words'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetStopWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_synonyms(self, request: bytes) -> operations.ResetSynonymsResponse:
        r"""Reset synonyms
        Reset synonyms
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/synonyms'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetSynonymsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reset_typo_tolerance(self) -> operations.ResetTypoToleranceResponse:
        r"""Reset typo-tolerance
        Reset typo-tolerance
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/typo-tolerance'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetTypoToleranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_displayed_attributes(self, request: list[str]) -> operations.UpdateDisplayedAttributesResponse:
        r"""Update displayed attributes
        Update displayed attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/displayed-attributes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDisplayedAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_distinct_attribute(self, request: bytes) -> operations.UpdateDistinctAttributeResponse:
        r"""Update distinct attribute
        Update distinct attribute
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/distinct-attribute'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDistinctAttributeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_faceting(self, request: operations.UpdateFacetingRequestBody) -> operations.UpdateFacetingResponse:
        r"""Update faceting
        Update faceting
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/faceting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFacetingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_filterable_attributes(self, request: list[str]) -> operations.UpdateFilterableAttributesResponse:
        r"""Update filterable attributes
        Update filterable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/filterable-attributes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFilterableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_pagination(self, request: operations.UpdatePaginationRequestBody) -> operations.UpdatePaginationResponse:
        r"""Update pagination
        Update pagination
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/pagination'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePaginationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_ranking_rules(self, request: list[str]) -> operations.UpdateRankingRulesResponse:
        r"""Update ranking rules
        Update ranking rules
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/ranking-rules'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateRankingRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_searchable_attributes(self, request: list[str]) -> operations.UpdateSearchableAttributesResponse:
        r"""Update searchable attributes
        Update searchable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/searchable-attributes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSearchableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_sortable_attributes(self, request: list[str]) -> operations.UpdateSortableAttributesResponse:
        r"""Update sortable attributes
        Update sortable attributes
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/sortable-attributes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSortableAttributesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_stop_words(self, request: list[str]) -> operations.UpdateStopWordsResponse:
        r"""Update stop-words
        Update stop-words
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/stop-words'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateStopWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_synonyms(self, request: operations.UpdateSynonymsRequestBody) -> operations.UpdateSynonymsResponse:
        r"""Update synonyms
        Update synonyms
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/synonyms'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSynonymsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_typo_tolerance(self, request: operations.UpdateTypoToleranceRequestBody) -> operations.UpdateTypoToleranceResponse:
        r"""Update typo-tolerance
        Update typo-tolerance
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/indexes/books/settings/typo-tolerance'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTypoToleranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    