// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetDiscoveryV2SuggestIncludeFuzzyEnum - yes, to include fuzzy matches in the search. This has performance impact.
type GetDiscoveryV2SuggestIncludeFuzzyEnum string

const (
	GetDiscoveryV2SuggestIncludeFuzzyEnumYes GetDiscoveryV2SuggestIncludeFuzzyEnum = "yes"
	GetDiscoveryV2SuggestIncludeFuzzyEnumNo  GetDiscoveryV2SuggestIncludeFuzzyEnum = " no"
)

func (e *GetDiscoveryV2SuggestIncludeFuzzyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2SuggestIncludeFuzzyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestIncludeFuzzyEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestIncludeLicensedContentEnum - Yes if you want to display licensed content
type GetDiscoveryV2SuggestIncludeLicensedContentEnum string

const (
	GetDiscoveryV2SuggestIncludeLicensedContentEnumYes GetDiscoveryV2SuggestIncludeLicensedContentEnum = "yes"
	GetDiscoveryV2SuggestIncludeLicensedContentEnumNo  GetDiscoveryV2SuggestIncludeLicensedContentEnum = " no"
)

func (e *GetDiscoveryV2SuggestIncludeLicensedContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2SuggestIncludeLicensedContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestIncludeLicensedContentEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestIncludeSpellcheckEnum - yes, to include spell check suggestions in the response.
type GetDiscoveryV2SuggestIncludeSpellcheckEnum string

const (
	GetDiscoveryV2SuggestIncludeSpellcheckEnumYes GetDiscoveryV2SuggestIncludeSpellcheckEnum = "yes"
	GetDiscoveryV2SuggestIncludeSpellcheckEnumNo  GetDiscoveryV2SuggestIncludeSpellcheckEnum = " no"
)

func (e *GetDiscoveryV2SuggestIncludeSpellcheckEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		*e = GetDiscoveryV2SuggestIncludeSpellcheckEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestIncludeSpellcheckEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestIncludeTbaEnum - True, to include events with date to be announce (TBA)
type GetDiscoveryV2SuggestIncludeTbaEnum string

const (
	GetDiscoveryV2SuggestIncludeTbaEnumYes  GetDiscoveryV2SuggestIncludeTbaEnum = "yes"
	GetDiscoveryV2SuggestIncludeTbaEnumNo   GetDiscoveryV2SuggestIncludeTbaEnum = " no"
	GetDiscoveryV2SuggestIncludeTbaEnumOnly GetDiscoveryV2SuggestIncludeTbaEnum = " only"
)

func (e *GetDiscoveryV2SuggestIncludeTbaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2SuggestIncludeTbaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestIncludeTbaEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestIncludeTbdEnum - True, to include event with a date to be defined (TBD)
type GetDiscoveryV2SuggestIncludeTbdEnum string

const (
	GetDiscoveryV2SuggestIncludeTbdEnumYes  GetDiscoveryV2SuggestIncludeTbdEnum = "yes"
	GetDiscoveryV2SuggestIncludeTbdEnumNo   GetDiscoveryV2SuggestIncludeTbdEnum = " no"
	GetDiscoveryV2SuggestIncludeTbdEnumOnly GetDiscoveryV2SuggestIncludeTbdEnum = " only"
)

func (e *GetDiscoveryV2SuggestIncludeTbdEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "yes":
		fallthrough
	case " no":
		fallthrough
	case " only":
		*e = GetDiscoveryV2SuggestIncludeTbdEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestIncludeTbdEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestSourceEnum - Filter entities by its source name
type GetDiscoveryV2SuggestSourceEnum string

const (
	GetDiscoveryV2SuggestSourceEnumTicketmaster GetDiscoveryV2SuggestSourceEnum = "ticketmaster"
	GetDiscoveryV2SuggestSourceEnumUniverse     GetDiscoveryV2SuggestSourceEnum = " universe"
	GetDiscoveryV2SuggestSourceEnumFrontgate    GetDiscoveryV2SuggestSourceEnum = " frontgate"
	GetDiscoveryV2SuggestSourceEnumTmr          GetDiscoveryV2SuggestSourceEnum = " tmr"
)

func (e *GetDiscoveryV2SuggestSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ticketmaster":
		fallthrough
	case " universe":
		fallthrough
	case " frontgate":
		fallthrough
	case " tmr":
		*e = GetDiscoveryV2SuggestSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestSourceEnum: %s", s)
	}
}

// GetDiscoveryV2SuggestUnitEnum - Unit of the radius
type GetDiscoveryV2SuggestUnitEnum string

const (
	GetDiscoveryV2SuggestUnitEnumMiles GetDiscoveryV2SuggestUnitEnum = "miles"
	GetDiscoveryV2SuggestUnitEnumKm    GetDiscoveryV2SuggestUnitEnum = "km"
)

func (e *GetDiscoveryV2SuggestUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "miles":
		fallthrough
	case "km":
		*e = GetDiscoveryV2SuggestUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDiscoveryV2SuggestUnitEnum: %s", s)
	}
}

type GetDiscoveryV2SuggestQueryParams struct {
	// Filter events to clientName
	ClientVisibility *string `queryParam:"style=form,explode=true,name=clientVisibility"`
	// Filter suggestions by country code
	CountryCode *string `queryParam:"style=form,explode=true,name=countryCode"`
	// filter events by geoHash
	GeoPoint *string `queryParam:"style=form,explode=true,name=geoPoint"`
	// yes, to include fuzzy matches in the search. This has performance impact.
	IncludeFuzzy *GetDiscoveryV2SuggestIncludeFuzzyEnum `queryParam:"style=form,explode=true,name=includeFuzzy"`
	// Yes if you want to display licensed content
	IncludeLicensedContent *GetDiscoveryV2SuggestIncludeLicensedContentEnum `queryParam:"style=form,explode=true,name=includeLicensedContent"`
	// yes, to include spell check suggestions in the response.
	IncludeSpellcheck *GetDiscoveryV2SuggestIncludeSpellcheckEnum `queryParam:"style=form,explode=true,name=includeSpellcheck"`
	// True, to include events with date to be announce (TBA)
	IncludeTBA *GetDiscoveryV2SuggestIncludeTbaEnum `queryParam:"style=form,explode=true,name=includeTBA"`
	// True, to include event with a date to be defined (TBD)
	IncludeTBD *GetDiscoveryV2SuggestIncludeTbdEnum `queryParam:"style=form,explode=true,name=includeTBD"`
	// Keyword to search on
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
	Latlong *string `queryParam:"style=form,explode=true,name=latlong"`
	// The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Radius of the area in which we want to search for events.
	Radius *string `queryParam:"style=form,explode=true,name=radius"`
	// Filter suggestions by segment id
	SegmentID *string `queryParam:"style=form,explode=true,name=segmentId"`
	// Size of every entity returned in the response
	Size *string `queryParam:"style=form,explode=true,name=size"`
	// Filter entities by its source name
	Source *GetDiscoveryV2SuggestSourceEnum `queryParam:"style=form,explode=true,name=source"`
	// Unit of the radius
	Unit *GetDiscoveryV2SuggestUnitEnum `queryParam:"style=form,explode=true,name=unit"`
}

type GetDiscoveryV2SuggestRequest struct {
	QueryParams GetDiscoveryV2SuggestQueryParams
}

type GetDiscoveryV2SuggestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// successful operation
	GetDiscoveryV2Suggest200ApplicationHalPlusJSONString *string
	// successful operation
	GetDiscoveryV2Suggest200ApplicationJSONString *string
}
