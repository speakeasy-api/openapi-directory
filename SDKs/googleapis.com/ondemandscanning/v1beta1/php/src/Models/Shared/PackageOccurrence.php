<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PackageOccurrence - Details on how a particular software package was installed on a system.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PackageOccurrence
{
    /**
     * Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PackageOccurrenceArchitectureEnum $architecture
     */
	#[\JMS\Serializer\Annotation\SerializedName('architecture')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PackageOccurrenceArchitectureEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PackageOccurrenceArchitectureEnum $architecture = null;
    
    /**
     * Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
     * 
     * @var ?string $cpeUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('cpeUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cpeUri = null;
    
    /**
     * License information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\License $license
     */
	#[\JMS\Serializer\Annotation\SerializedName('license')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\License')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?License $license = null;
    
    /**
     * All of the places within the filesystem versions of this package have been found.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Location> $location
     */
	#[\JMS\Serializer\Annotation\SerializedName('location')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Location>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $location = null;
    
    /**
     * Required. Output only. The name of the installed package.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
     * 
     * @var ?string $packageType
     */
	#[\JMS\Serializer\Annotation\SerializedName('packageType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $packageType = null;
    
    /**
     * Version contains structured information about the version of a package.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Version $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Version')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Version $version = null;
    
	public function __construct()
	{
		$this->architecture = null;
		$this->cpeUri = null;
		$this->license = null;
		$this->location = null;
		$this->name = null;
		$this->packageType = null;
		$this->version = null;
	}
}
