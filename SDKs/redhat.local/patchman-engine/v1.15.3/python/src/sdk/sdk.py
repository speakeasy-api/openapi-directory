"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "http://redhat.local",
    "/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""API of the Patch application on [cloud.redhat.com](cloud.redhat.com)
    
    Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def latest_package(self, request: operations.LatestPackageRequest, security: operations.LatestPackageSecurity) -> operations.LatestPackageResponse:
        r"""Show me metadata of selected package
        Show me metadata of selected package
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.LatestPackageRequest, base_url, '/api/patch/v1/packages/{package_name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LatestPackageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersPackageDetailResponse])
                res.controllers_package_detail_response = out

        return res

    def deletesystem(self, request: operations.DeletesystemRequest, security: operations.DeletesystemSecurity) -> operations.DeletesystemResponse:
        r"""Delete system by inventory id
        Delete system by inventory id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletesystemRequest, base_url, '/api/patch/v1/systems/{inventory_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletesystemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def detail_advisory(self, request: operations.DetailAdvisoryRequest, security: operations.DetailAdvisorySecurity) -> operations.DetailAdvisoryResponse:
        r"""Show me details an advisory by given advisory name
        Show me details an advisory by given advisory name
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DetailAdvisoryRequest, base_url, '/api/patch/v1/advisories/{advisory_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DetailAdvisoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersAdvisoryDetailResponse])
                res.controllers_advisory_detail_response = out

        return res

    def detail_system(self, request: operations.DetailSystemRequest, security: operations.DetailSystemSecurity) -> operations.DetailSystemResponse:
        r"""Show me details about a system by given inventory id
        Show me details about a system by given inventory id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DetailSystemRequest, base_url, '/api/patch/v1/systems/{inventory_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DetailSystemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersSystemDetailResponse])
                res.controllers_system_detail_response = out

        return res

    def export_advisories(self, request: operations.ExportAdvisoriesRequest, security: operations.ExportAdvisoriesSecurity) -> operations.ExportAdvisoriesResponse:
        r"""Export applicable advisories for all my systems
        Export applicable advisories for all my systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/export/advisories'
        
        query_params = utils.get_query_params(operations.ExportAdvisoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAdvisoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersAdvisoryInlineItem]])
                res.controllers_advisory_inline_items = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content

        return res

    def export_advisory_systems(self, request: operations.ExportAdvisorySystemsRequest, security: operations.ExportAdvisorySystemsSecurity) -> operations.ExportAdvisorySystemsResponse:
        r"""Export systems for my account
        Export systems for my account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportAdvisorySystemsRequest, base_url, '/api/patch/v1/export/advisories/{advisory_id}/systems', request)
        
        query_params = utils.get_query_params(operations.ExportAdvisorySystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportAdvisorySystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersSystemInlineItem]])
                res.controllers_system_inline_items = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content

        return res

    def export_package_systems(self, request: operations.ExportPackageSystemsRequest, security: operations.ExportPackageSystemsSecurity) -> operations.ExportPackageSystemsResponse:
        r"""Show me all my systems which have a package installed
        Show me all my systems which have a package installed
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportPackageSystemsRequest, base_url, '/api/patch/v1/export/packages/{package_name}/systems', request)
        
        query_params = utils.get_query_params(operations.ExportPackageSystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportPackageSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersPackageSystemItem]])
                res.controllers_package_system_items = out

        return res

    def export_packages(self, request: operations.ExportPackagesRequest, security: operations.ExportPackagesSecurity) -> operations.ExportPackagesResponse:
        r"""Show me all installed packages across my systems
        Show me all installed packages across my systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/export/packages'
        
        query_params = utils.get_query_params(operations.ExportPackagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportPackagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersPackageItem]])
                res.controllers_package_items = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content

        return res

    def export_system_advisories(self, request: operations.ExportSystemAdvisoriesRequest, security: operations.ExportSystemAdvisoriesSecurity) -> operations.ExportSystemAdvisoriesResponse:
        r"""Export applicable advisories for all my systems
        Export applicable advisories for all my systems
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportSystemAdvisoriesRequest, base_url, '/api/patch/v1/export/systems/{inventory_id}/advisories', request)
        
        query_params = utils.get_query_params(operations.ExportSystemAdvisoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSystemAdvisoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersSystemAdvisoriesDBLookup]])
                res.controllers_system_advisories_db_lookups = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content

        return res

    def export_system_packages(self, request: operations.ExportSystemPackagesRequest, security: operations.ExportSystemPackagesSecurity) -> operations.ExportSystemPackagesResponse:
        r"""Show me details about a system packages by given inventory id
        Show me details about a system packages by given inventory id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportSystemPackagesRequest, base_url, '/api/patch/v1/export/systems/{inventory_id}/packages', request)
        
        query_params = utils.get_query_params(operations.ExportSystemPackagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSystemPackagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersSystemPackageInline]])
                res.controllers_system_package_inlines = out

        return res

    def export_systems(self, request: operations.ExportSystemsRequest, security: operations.ExportSystemsSecurity) -> operations.ExportSystemsResponse:
        r"""Export systems for my account
        Export systems for my account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/export/systems'
        
        query_params = utils.get_query_params(operations.ExportSystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ControllersSystemInlineItem]])
                res.controllers_system_inline_items = out
            if utils.match_content_type(content_type, 'text/csv'):
                res.body = http_res.content

        return res

    def list_advisories(self, request: operations.ListAdvisoriesRequest, security: operations.ListAdvisoriesSecurity) -> operations.ListAdvisoriesResponse:
        r"""Show me all applicable advisories for all my systems
        Show me all applicable advisories for all my systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/advisories'
        
        query_params = utils.get_query_params(operations.ListAdvisoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAdvisoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersAdvisoriesResponse])
                res.controllers_advisories_response = out

        return res

    def list_advisory_systems(self, request: operations.ListAdvisorySystemsRequest, security: operations.ListAdvisorySystemsSecurity) -> operations.ListAdvisorySystemsResponse:
        r"""Show me systems on which the given advisory is applicable
        Show me systems on which the given advisory is applicable
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListAdvisorySystemsRequest, base_url, '/api/patch/v1/advisories/{advisory_id}/systems', request)
        
        query_params = utils.get_query_params(operations.ListAdvisorySystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAdvisorySystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersAdvisorySystemsResponse])
                res.controllers_advisory_systems_response = out

        return res

    def list_packages(self, request: operations.ListPackagesRequest, security: operations.ListPackagesSecurity) -> operations.ListPackagesResponse:
        r"""Show me all installed packages across my systems
        Show me all installed packages across my systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/packages/'
        
        query_params = utils.get_query_params(operations.ListPackagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPackagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersPackagesResponse])
                res.controllers_packages_response = out

        return res

    def list_system_advisories(self, request: operations.ListSystemAdvisoriesRequest, security: operations.ListSystemAdvisoriesSecurity) -> operations.ListSystemAdvisoriesResponse:
        r"""Show me advisories for a system by given inventory id
        Show me advisories for a system by given inventory id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListSystemAdvisoriesRequest, base_url, '/api/patch/v1/systems/{inventory_id}/advisories', request)
        
        query_params = utils.get_query_params(operations.ListSystemAdvisoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSystemAdvisoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersSystemAdvisoriesResponse])
                res.controllers_system_advisories_response = out

        return res

    def list_systems(self, request: operations.ListSystemsRequest, security: operations.ListSystemsSecurity) -> operations.ListSystemsResponse:
        r"""Show me all my systems
        Show me all my systems
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/systems'
        
        query_params = utils.get_query_params(operations.ListSystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersSystemsResponse])
                res.controllers_systems_response = out

        return res

    def package_systems(self, request: operations.PackageSystemsRequest, security: operations.PackageSystemsSecurity) -> operations.PackageSystemsResponse:
        r"""Show me all my systems which have a package installed
        Show me all my systems which have a package installed
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageSystemsRequest, base_url, '/api/patch/v1/packages/{package_name}/systems', request)
        
        query_params = utils.get_query_params(operations.PackageSystemsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersPackageSystemsResponse])
                res.controllers_package_systems_response = out

        return res

    def package_versions(self, request: operations.PackageVersionsRequest, security: operations.PackageVersionsSecurity) -> operations.PackageVersionsResponse:
        r"""Show me all package versions installed on some system
        Show me all package versions installed on some system
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageVersionsRequest, base_url, '/api/patch/v1/packages/{package_name}/versions', request)
        
        query_params = utils.get_query_params(operations.PackageVersionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersPackageVersionsResponse])
                res.controllers_package_versions_response = out

        return res

    def system_packages(self, request: operations.SystemPackagesRequest, security: operations.SystemPackagesSecurity) -> operations.SystemPackagesResponse:
        r"""Show me details about a system packages by given inventory id
        Show me details about a system packages by given inventory id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SystemPackagesRequest, base_url, '/api/patch/v1/systems/{inventory_id}/packages', request)
        
        query_params = utils.get_query_params(operations.SystemPackagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SystemPackagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersSystemPackageResponse])
                res.controllers_system_package_response = out

        return res

    def view_advisories_systems(self, request: shared.ControllersSystemsAdvisoriesRequest, security: operations.ViewAdvisoriesSystemsSecurity) -> operations.ViewAdvisoriesSystemsResponse:
        r"""View advisory-system pairs for selected systems and advisories
        View advisory-system pairs for selected systems and advisories
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/views/advisories/systems'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewAdvisoriesSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersAdvisoriesSystemsResponse])
                res.controllers_advisories_systems_response = out

        return res

    def view_systems_advisories(self, request: shared.ControllersSystemsAdvisoriesRequest, security: operations.ViewSystemsAdvisoriesSecurity) -> operations.ViewSystemsAdvisoriesResponse:
        r"""View system-advisory pairs for selected systems and advisories
        View system-advisory pairs for selected systems and advisories
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/patch/v1/views/systems/advisories'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewSystemsAdvisoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ControllersSystemsAdvisoriesResponse])
                res.controllers_systems_advisories_response = out

        return res

    