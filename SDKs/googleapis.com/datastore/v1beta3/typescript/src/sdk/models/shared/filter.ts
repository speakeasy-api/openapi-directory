/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CompositeFilter } from "./compositefilter";
import { PropertyFilter } from "./propertyfilter";
import { Expose, Type } from "class-transformer";

/**
 * A holder for any type of filter.
 */
export class Filter extends SpeakeasyBase {
  /**
   * A filter that merges multiple other filters using the given operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compositeFilter" })
  @Type(() => CompositeFilter)
  compositeFilter?: CompositeFilter;

  /**
   * A filter on a specific property.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "propertyFilter" })
  @Type(() => PropertyFilter)
  propertyFilter?: PropertyFilter;
}
