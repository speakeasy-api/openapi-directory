/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BlacklistEntry } from "./blacklistentry";
import { Expose, Transform } from "class-transformer";

/**
 * An object that contains information about blacklist events.
 */
export class GetBlacklistReportsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: BlacklistEntry, elemDepth: 2 })
  @Expose({ name: "BlacklistReport" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, BlacklistEntry[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], BlacklistEntry);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  blacklistReport: Record<string, BlacklistEntry[]>;
}
