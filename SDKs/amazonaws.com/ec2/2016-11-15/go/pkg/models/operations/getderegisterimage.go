// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeregisterImageActionEnum
type GETDeregisterImageActionEnum string

const (
	GETDeregisterImageActionEnumDeregisterImage GETDeregisterImageActionEnum = "DeregisterImage"
)

func (e *GETDeregisterImageActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeregisterImage":
		*e = GETDeregisterImageActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterImageActionEnum: %s", s)
	}
}

// GETDeregisterImageVersionEnum
type GETDeregisterImageVersionEnum string

const (
	GETDeregisterImageVersionEnumTwoThousandAndSixteen1115 GETDeregisterImageVersionEnum = "2016-11-15"
)

func (e *GETDeregisterImageVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETDeregisterImageVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeregisterImageVersionEnum: %s", s)
	}
}

type GETDeregisterImageQueryParams struct {
	Action GETDeregisterImageActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the AMI.
	ImageID string                        `queryParam:"style=form,explode=true,name=ImageId"`
	Version GETDeregisterImageVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeregisterImageHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeregisterImageRequest struct {
	QueryParams GETDeregisterImageQueryParams
	Headers     GETDeregisterImageHeaders
}

type GETDeregisterImageResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
