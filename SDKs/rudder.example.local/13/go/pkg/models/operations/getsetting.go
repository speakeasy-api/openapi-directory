// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSettingPathParams struct {
	// Id of the setting to set
	SettingID string `pathParam:"style=simple,explode=false,name=settingId"`
}

type GetSettingRequest struct {
	PathParams GetSettingPathParams
}

// GetSetting200ApplicationJSONActionEnum - The id of the action
type GetSetting200ApplicationJSONActionEnum string

const (
	GetSetting200ApplicationJSONActionEnumGetSetting GetSetting200ApplicationJSONActionEnum = "getSetting"
)

func (e *GetSetting200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getSetting":
		*e = GetSetting200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSetting200ApplicationJSONActionEnum: %s", s)
	}
}

// GetSetting200ApplicationJSONData - Information about the setting
type GetSetting200ApplicationJSONData struct {
	// Id and value of the property
	SettingID *string `json:"settingId,omitempty"`
}

// GetSetting200ApplicationJSONResultEnum - Result of the request
type GetSetting200ApplicationJSONResultEnum string

const (
	GetSetting200ApplicationJSONResultEnumSuccess GetSetting200ApplicationJSONResultEnum = "success"
	GetSetting200ApplicationJSONResultEnumError   GetSetting200ApplicationJSONResultEnum = "error"
)

func (e *GetSetting200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetSetting200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSetting200ApplicationJSONResultEnum: %s", s)
	}
}

// GetSetting200ApplicationJSON - Settings
type GetSetting200ApplicationJSON struct {
	// The id of the action
	Action GetSetting200ApplicationJSONActionEnum `json:"action"`
	// Information about the setting
	Data GetSetting200ApplicationJSONData `json:"data"`
	// Id of the setting
	ID string `json:"id"`
	// Result of the request
	Result GetSetting200ApplicationJSONResultEnum `json:"result"`
}

type GetSettingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	GetSetting200ApplicationJSONObject *GetSetting200ApplicationJSON
}
