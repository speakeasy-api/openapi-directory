// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// PaymentWritePaymentProductEnum - Payment product
type PaymentWritePaymentProductEnum string

const (
	PaymentWritePaymentProductEnumT2P  PaymentWritePaymentProductEnum = "T2P"
	PaymentWritePaymentProductEnumSct  PaymentWritePaymentProductEnum = "SCT"
	PaymentWritePaymentProductEnumIsct PaymentWritePaymentProductEnum = "ISCT"
	PaymentWritePaymentProductEnumCbct PaymentWritePaymentProductEnum = "CBCT"
)

func (e *PaymentWritePaymentProductEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "T2P":
		fallthrough
	case "SCT":
		fallthrough
	case "ISCT":
		fallthrough
	case "CBCT":
		*e = PaymentWritePaymentProductEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentWritePaymentProductEnum: %s", s)
	}
}

// PaymentWritePaymentStatusEnum - Payment end to end identification
type PaymentWritePaymentStatusEnum string

const (
	PaymentWritePaymentStatusEnumInit PaymentWritePaymentStatusEnum = "INIT"
	PaymentWritePaymentStatusEnumErre PaymentWritePaymentStatusEnum = "ERRE"
	PaymentWritePaymentStatusEnumErrs PaymentWritePaymentStatusEnum = "ERRS"
	PaymentWritePaymentStatusEnumAccc PaymentWritePaymentStatusEnum = "ACCC"
	PaymentWritePaymentStatusEnumAccp PaymentWritePaymentStatusEnum = "ACCP"
	PaymentWritePaymentStatusEnumAcsc PaymentWritePaymentStatusEnum = "ACSC"
	PaymentWritePaymentStatusEnumAcsp PaymentWritePaymentStatusEnum = "ACSP"
	PaymentWritePaymentStatusEnumActc PaymentWritePaymentStatusEnum = "ACTC"
	PaymentWritePaymentStatusEnumAcwc PaymentWritePaymentStatusEnum = "ACWC"
	PaymentWritePaymentStatusEnumAcwp PaymentWritePaymentStatusEnum = "ACWP"
	PaymentWritePaymentStatusEnumRcvd PaymentWritePaymentStatusEnum = "RCVD"
	PaymentWritePaymentStatusEnumPdng PaymentWritePaymentStatusEnum = "PDNG"
	PaymentWritePaymentStatusEnumRjct PaymentWritePaymentStatusEnum = "RJCT"
	PaymentWritePaymentStatusEnumCanc PaymentWritePaymentStatusEnum = "CANC"
	PaymentWritePaymentStatusEnumAcfc PaymentWritePaymentStatusEnum = "ACFC"
	PaymentWritePaymentStatusEnumPatc PaymentWritePaymentStatusEnum = "PATC"
	PaymentWritePaymentStatusEnumPart PaymentWritePaymentStatusEnum = "PART"
)

func (e *PaymentWritePaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INIT":
		fallthrough
	case "ERRE":
		fallthrough
	case "ERRS":
		fallthrough
	case "ACCC":
		fallthrough
	case "ACCP":
		fallthrough
	case "ACSC":
		fallthrough
	case "ACSP":
		fallthrough
	case "ACTC":
		fallthrough
	case "ACWC":
		fallthrough
	case "ACWP":
		fallthrough
	case "RCVD":
		fallthrough
	case "PDNG":
		fallthrough
	case "RJCT":
		fallthrough
	case "CANC":
		fallthrough
	case "ACFC":
		fallthrough
	case "PATC":
		fallthrough
	case "PART":
		*e = PaymentWritePaymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentWritePaymentStatusEnum: %s", s)
	}
}

// PaymentWritePaymentTypeEnum - Payment Type
type PaymentWritePaymentTypeEnum string

const (
	PaymentWritePaymentTypeEnumSinglePayment   PaymentWritePaymentTypeEnum = "single-payment"
	PaymentWritePaymentTypeEnumBulkPayment     PaymentWritePaymentTypeEnum = "bulk-payment"
	PaymentWritePaymentTypeEnumPeriodicPayment PaymentWritePaymentTypeEnum = "periodic-payment"
)

func (e *PaymentWritePaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single-payment":
		fallthrough
	case "bulk-payment":
		fallthrough
	case "periodic-payment":
		*e = PaymentWritePaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentWritePaymentTypeEnum: %s", s)
	}
}

// PaymentWrite - PaymentWriteSerializer.
type PaymentWrite struct {
	// Registered creditor account
	CreditorAccount string `json:"creditor_account"`
	// Payment Custom Payment ID
	CustomPaymentID *string `json:"custom_payment_id,omitempty"`
	// Payment description
	Description *string `json:"description,omitempty"`
	// Instructed amount
	InstructedAmount InstructedAmount `json:"instructed_amount"`
	// Link to initiate authorization with Institution
	Link *string `json:"link,omitempty"`
	// Payment ID
	PaymentID *string `json:"payment_id,omitempty"`
	// Payment product
	PaymentProduct *PaymentWritePaymentProductEnum `json:"payment_product,omitempty"`
	// Payment end to end identification
	PaymentStatus *PaymentWritePaymentStatusEnum `json:"payment_status,omitempty"`
	// Payment Type
	PaymentType *PaymentWritePaymentTypeEnum `json:"payment_type,omitempty"`
	// Periodic Payment Serializer.
	PeriodicPayment *PeriodicPayment `json:"periodic_payment,omitempty"`
	// Redirect URL to your application after payment is done
	Redirect string `json:"redirect"`
	// Payment Execution date (for periodic payments)
	RequestedExecutionDate *types.Date `json:"requested_execution_date,omitempty"`
}
