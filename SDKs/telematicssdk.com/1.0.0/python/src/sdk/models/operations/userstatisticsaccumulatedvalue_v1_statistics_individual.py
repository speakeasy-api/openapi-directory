"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class UserStatisticsAccumulatedValueV1StatisticsIndividualRequest:
    
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSONResult:
    
    acceleration_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccelerationCount'), 'exclude': lambda f: f is None }})  
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppId'), 'exclude': lambda f: f is None }})  
    average_speed_kmh: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageSpeedKmh'), 'exclude': lambda f: f is None }})  
    average_speed_mileh: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageSpeedMileh'), 'exclude': lambda f: f is None }})  
    breaking_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BreakingCount'), 'exclude': lambda f: f is None }})  
    company_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyId'), 'exclude': lambda f: f is None }})  
    cornering_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CorneringCount'), 'exclude': lambda f: f is None }})  
    day_driving_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DayDrivingTime'), 'exclude': lambda f: f is None }})  
    device_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeviceToken'), 'exclude': lambda f: f is None }})  
    driver_trips_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DriverTripsCount'), 'exclude': lambda f: f is None }})  
    driving_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DrivingTime'), 'exclude': lambda f: f is None }})  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceId'), 'exclude': lambda f: f is None }})  
    max_speed_kmh: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxSpeedKmh'), 'exclude': lambda f: f is None }})  
    max_speed_mileh: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxSpeedMileh'), 'exclude': lambda f: f is None }})  
    mileage_km: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MileageKm'), 'exclude': lambda f: f is None }})  
    mileage_mile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MileageMile'), 'exclude': lambda f: f is None }})  
    night_driving_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NightDrivingTime'), 'exclude': lambda f: f is None }})  
    other_trips_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OtherTripsCount'), 'exclude': lambda f: f is None }})  
    phone_usage_distance_km: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageDistanceKm'), 'exclude': lambda f: f is None }})  
    phone_usage_distance_mile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageDistanceMile'), 'exclude': lambda f: f is None }})  
    phone_usage_duration_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageDurationMin'), 'exclude': lambda f: f is None }})  
    phone_usage_over_speed_distance_km: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageOverSpeedDistanceKm'), 'exclude': lambda f: f is None }})  
    phone_usage_over_speed_distance_mile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageOverSpeedDistanceMile'), 'exclude': lambda f: f is None }})  
    phone_usage_over_speed_duration_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PhoneUsageOverSpeedDurationMin'), 'exclude': lambda f: f is None }})  
    rush_hours_driving_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RushHoursDrivingTime'), 'exclude': lambda f: f is None }})  
    total_speeding_km: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalSpeedingKm'), 'exclude': lambda f: f is None }})  
    total_speeding_mile: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalSpeedingMile'), 'exclude': lambda f: f is None }})  
    trips_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TripsCount'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSON:
    r"""Success"""
    
    errors: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Errors'), 'exclude': lambda f: f is None }})  
    result: Optional[UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSONResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Result'), 'exclude': lambda f: f is None }})  
    status: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UserStatisticsAccumulatedValueV1StatisticsIndividualResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_statistics_accumulated_value_v1_statistics_individual_200_application_json_object: Optional[UserStatisticsAccumulatedValueV1StatisticsIndividual200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    