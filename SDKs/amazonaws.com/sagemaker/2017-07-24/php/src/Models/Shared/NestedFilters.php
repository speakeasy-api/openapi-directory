<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * NestedFilters - <p>A list of nested <a>Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a>Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code> </p> </li> <li> <p> <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'</code> </p> </li> </ul>
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class NestedFilters
{
    /**
     * $filters
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\Filter> $filters
     */
	#[\JMS\Serializer\Annotation\SerializedName('Filters')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Filter>')]
    public array $filters;
    
	#[\JMS\Serializer\Annotation\SerializedName('NestedPropertyName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nestedPropertyName;
    
	public function __construct()
	{
		$this->filters = [];
		$this->nestedPropertyName = "";
	}
}
