"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class SubscriptionsAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def subscriptions_api_count(self, request: Any) -> operations.SubscriptionsAPICountResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Count'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPICountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.subscriptions_api_count_200_application_json_one_of = out

        return res

    def subscriptions_api_delete_subscription(self, request: operations.SubscriptionsAPIDeleteSubscriptionRequest) -> operations.SubscriptionsAPIDeleteSubscriptionResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscriptionsAPIDeleteSubscriptionRequest, base_url, '/v1/SubscriptionsApi/{serial}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SubscriptionsAPIDeleteSubscriptionRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIDeleteSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_delete_subscription2(self, request: operations.SubscriptionsAPIDeleteSubscription2Request) -> operations.SubscriptionsAPIDeleteSubscription2Response:
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubscriptionsAPIDeleteSubscription2Request, base_url, '/v1/SubscriptionsApi/{serial}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SubscriptionsAPIDeleteSubscription2Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIDeleteSubscription2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_disable(self, request: Any) -> operations.SubscriptionsAPIDisableResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Disable'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIDisableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_disable2(self, request: Any) -> operations.SubscriptionsAPIDisable2Response:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Disable'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIDisable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_enable(self, request: Any) -> operations.SubscriptionsAPIEnableResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Enable'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIEnableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_enable2(self, request: Any) -> operations.SubscriptionsAPIEnable2Response:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Enable'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIEnable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_find(self, request: Any) -> operations.SubscriptionsAPIFindResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Find'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIFindResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.subscriptions_api_find_200_application_json_one_of = out

        return res

    def subscriptions_api_list(self, request: operations.SubscriptionsAPIListRequest) -> operations.SubscriptionsAPIListResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/List'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SubscriptionsAPIListRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SubscriptionView]])
                res.subscription_views = out

        return res

    def subscriptions_api_put_subscription(self, request: Any) -> operations.SubscriptionsAPIPutSubscriptionResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIPutSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_put_subscription2(self, request: Any) -> operations.SubscriptionsAPIPutSubscription2Response:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPIPutSubscription2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def subscriptions_api_save(self, request: Any) -> operations.SubscriptionsAPISaveResponse:
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/SubscriptionsApi/Save'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscriptionsAPISaveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.subscriptions_api_save_201_application_json_one_of = out

        return res

    