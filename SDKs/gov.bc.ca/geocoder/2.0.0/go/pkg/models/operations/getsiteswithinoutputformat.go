// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetSitesWithinOutputFormatOutputFormatEnum - Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
type GetSitesWithinOutputFormatOutputFormatEnum string

const (
	GetSitesWithinOutputFormatOutputFormatEnumJSON    GetSitesWithinOutputFormatOutputFormatEnum = "json"
	GetSitesWithinOutputFormatOutputFormatEnumGeojson GetSitesWithinOutputFormatOutputFormatEnum = "geojson"
	GetSitesWithinOutputFormatOutputFormatEnumXhtml   GetSitesWithinOutputFormatOutputFormatEnum = "xhtml"
	GetSitesWithinOutputFormatOutputFormatEnumKml     GetSitesWithinOutputFormatOutputFormatEnum = "kml"
	GetSitesWithinOutputFormatOutputFormatEnumGml     GetSitesWithinOutputFormatOutputFormatEnum = "gml"
	GetSitesWithinOutputFormatOutputFormatEnumCsv     GetSitesWithinOutputFormatOutputFormatEnum = "csv"
	GetSitesWithinOutputFormatOutputFormatEnumShpz    GetSitesWithinOutputFormatOutputFormatEnum = "shpz"
)

func (e *GetSitesWithinOutputFormatOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "geojson":
		fallthrough
	case "xhtml":
		fallthrough
	case "kml":
		fallthrough
	case "gml":
		fallthrough
	case "csv":
		fallthrough
	case "shpz":
		*e = GetSitesWithinOutputFormatOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesWithinOutputFormatOutputFormatEnum: %s", s)
	}
}

type GetSitesWithinOutputFormatPathParams struct {
	// Results format. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputFormat target="_blank">outputFormat</a>
	OutputFormat GetSitesWithinOutputFormatOutputFormatEnum `pathParam:"style=simple,explode=false,name=outputFormat"`
}

// GetSitesWithinOutputFormatLocationDescriptorEnum - Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
type GetSitesWithinOutputFormatLocationDescriptorEnum string

const (
	GetSitesWithinOutputFormatLocationDescriptorEnumAny            GetSitesWithinOutputFormatLocationDescriptorEnum = "any"
	GetSitesWithinOutputFormatLocationDescriptorEnumAccessPoint    GetSitesWithinOutputFormatLocationDescriptorEnum = "accessPoint"
	GetSitesWithinOutputFormatLocationDescriptorEnumFrontDoorPoint GetSitesWithinOutputFormatLocationDescriptorEnum = "frontDoorPoint"
	GetSitesWithinOutputFormatLocationDescriptorEnumParcelPoint    GetSitesWithinOutputFormatLocationDescriptorEnum = "parcelPoint"
	GetSitesWithinOutputFormatLocationDescriptorEnumRooftopPoint   GetSitesWithinOutputFormatLocationDescriptorEnum = "rooftopPoint"
	GetSitesWithinOutputFormatLocationDescriptorEnumRoutingPoint   GetSitesWithinOutputFormatLocationDescriptorEnum = "routingPoint"
)

func (e *GetSitesWithinOutputFormatLocationDescriptorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "accessPoint":
		fallthrough
	case "frontDoorPoint":
		fallthrough
	case "parcelPoint":
		fallthrough
	case "rooftopPoint":
		fallthrough
	case "routingPoint":
		*e = GetSitesWithinOutputFormatLocationDescriptorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesWithinOutputFormatLocationDescriptorEnum: %s", s)
	}
}

// GetSitesWithinOutputFormatOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
type GetSitesWithinOutputFormatOutputSrsEnum string

const (
	GetSitesWithinOutputFormatOutputSrsEnumFourThousandThreeHundredAndTwentySix  GetSitesWithinOutputFormatOutputSrsEnum = "4326"
	GetSitesWithinOutputFormatOutputSrsEnumFourThousandTwoHundredAndSixtyNine    GetSitesWithinOutputFormatOutputSrsEnum = "4269"
	GetSitesWithinOutputFormatOutputSrsEnumThreeThousandAndFive                  GetSitesWithinOutputFormatOutputSrsEnum = "3005"
	GetSitesWithinOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndSeven  GetSitesWithinOutputFormatOutputSrsEnum = "26907"
	GetSitesWithinOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEight  GetSitesWithinOutputFormatOutputSrsEnum = "26908"
	GetSitesWithinOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndNine   GetSitesWithinOutputFormatOutputSrsEnum = "26909"
	GetSitesWithinOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndTen    GetSitesWithinOutputFormatOutputSrsEnum = "26910"
	GetSitesWithinOutputFormatOutputSrsEnumTwentySixThousandNineHundredAndEleven GetSitesWithinOutputFormatOutputSrsEnum = "26911"
)

func (e *GetSitesWithinOutputFormatOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetSitesWithinOutputFormatOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSitesWithinOutputFormatOutputSrsEnum: %s", s)
	}
}

type GetSitesWithinOutputFormatQueryParams struct {
	// A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#bbox target="_blank">bbox</a>
	Bbox string `queryParam:"style=form,explode=true,name=bbox"`
	// If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
	Brief *bool `queryParam:"style=form,explode=true,name=brief"`
	// If true, excludes sites that are units of a parent site
	ExcludeUnits *bool `queryParam:"style=form,explode=true,name=excludeUnits"`
	// Describes the nature of the address location. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#locationDescriptor target="_blank">locationDescriptor</a>
	LocationDescriptor *GetSitesWithinOutputFormatLocationDescriptorEnum `queryParam:"style=form,explode=true,name=locationDescriptor"`
	// The maximum number of search results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// If true, excludes sites without a civic address
	OnlyCivic *bool `queryParam:"style=form,explode=true,name=onlyCivic"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/api-specs/blob/master/geocoder/glossary.md#outputSRS target="_blank">outputSRS</a>
	OutputSRS *GetSitesWithinOutputFormatOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SetBack *int64 `queryParam:"style=form,explode=true,name=setBack"`
}

type GetSitesWithinOutputFormatRequest struct {
	PathParams  GetSitesWithinOutputFormatPathParams
	QueryParams GetSitesWithinOutputFormatQueryParams
}

type GetSitesWithinOutputFormatResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
