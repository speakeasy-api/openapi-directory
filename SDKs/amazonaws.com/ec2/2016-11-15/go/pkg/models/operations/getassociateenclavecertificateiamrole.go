// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAssociateEnclaveCertificateIamRoleActionEnum
type GETAssociateEnclaveCertificateIamRoleActionEnum string

const (
	GETAssociateEnclaveCertificateIamRoleActionEnumAssociateEnclaveCertificateIamRole GETAssociateEnclaveCertificateIamRoleActionEnum = "AssociateEnclaveCertificateIamRole"
)

func (e GETAssociateEnclaveCertificateIamRoleActionEnum) ToPointer() *GETAssociateEnclaveCertificateIamRoleActionEnum {
	return &e
}

func (e *GETAssociateEnclaveCertificateIamRoleActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AssociateEnclaveCertificateIamRole":
		*e = GETAssociateEnclaveCertificateIamRoleActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateEnclaveCertificateIamRoleActionEnum: %v", v)
	}
}

// GETAssociateEnclaveCertificateIamRoleVersionEnum
type GETAssociateEnclaveCertificateIamRoleVersionEnum string

const (
	GETAssociateEnclaveCertificateIamRoleVersionEnumTwoThousandAndSixteen1115 GETAssociateEnclaveCertificateIamRoleVersionEnum = "2016-11-15"
)

func (e GETAssociateEnclaveCertificateIamRoleVersionEnum) ToPointer() *GETAssociateEnclaveCertificateIamRoleVersionEnum {
	return &e
}

func (e *GETAssociateEnclaveCertificateIamRoleVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETAssociateEnclaveCertificateIamRoleVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAssociateEnclaveCertificateIamRoleVersionEnum: %v", v)
	}
}

type GETAssociateEnclaveCertificateIamRoleRequest struct {
	Action GETAssociateEnclaveCertificateIamRoleActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ARN of the ACM certificate with which to associate the IAM role.
	CertificateArn string `queryParam:"style=form,explode=true,name=CertificateArn"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
	RoleArn           string                                           `queryParam:"style=form,explode=true,name=RoleArn"`
	Version           GETAssociateEnclaveCertificateIamRoleVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAssociateEnclaveCertificateIamRoleResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
