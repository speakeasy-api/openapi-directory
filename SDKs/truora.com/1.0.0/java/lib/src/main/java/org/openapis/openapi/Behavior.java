/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Allows to anonymously report a person behavior. This information is fed to our machine learning platform to determine the reputational score of a person and produces a dataset; thus helping identify easily whether a candidate is reliable or not, based on all of their reputation against feedback reporters, visible via check API or user interface.
 */
public class Behavior {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Behavior(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Report Behavior
     * Creates a behavior item to report employee conducts that do not or might not be included in their background check. This report includes both possitive and negative behaviors and sorts them by severity.
     * 
     * ### Reasons to report a person
     * 
     * &lt;table&gt;
     *   &lt;tr&gt;
     *     &lt;td style="width: 100px"&gt;&lt;center&gt;&lt;b&gt;Very High&lt;/b&gt;&lt;br&gt;(Score: 1)&lt;/td&gt;
     *     &lt;td&gt;Rape, Drug Dealing, Sexual Harassment&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;&lt;center&gt;&lt;b&gt;High&lt;/b&gt;&lt;br&gt;(Score: 0.8)&lt;/td&gt;
     *     &lt;td&gt;Theft, Fights, Aggressive Behaviour, Identity Fraud, Drunk, Drug Possession&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;&lt;center&gt;&lt;b&gt;Medium&lt;/b&gt;&lt;br&gt;(Score: 0.6)&lt;/td&gt;
     *     &lt;td&gt;Absences&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;&lt;center&gt;&lt;b&gt;Low&lt;/b&gt;&lt;br&gt;(Score: 0.4)&lt;/td&gt;
     *     &lt;td&gt;Tardiness, Confidentiality Breach&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;&lt;center&gt;&lt;b&gt;None&lt;/b&gt;&lt;br&gt;(Score: 0)&lt;/td&gt;
     *     &lt;td&gt;Good Reputation&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;&lt;center&gt;&lt;b&gt;Unknown&lt;/b&gt;&lt;/td&gt;
     *     &lt;td&gt;No information&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     * 
     * **NOTE:** If the reason of your report is not here, please contact Truora support team.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ReportBehaviorResponse reportBehavior(org.openapis.openapi.models.shared.CreateBehaviorInput request, org.openapis.openapi.models.operations.ReportBehaviorSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/behavior");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ReportBehaviorResponse res = new org.openapis.openapi.models.operations.ReportBehaviorResponse() {{
            behaviourOutput = null;
            errors = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BehaviourOutput out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BehaviourOutput.class);
                res.behaviourOutput = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Error[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Error[].class);
                res.errors = out;
            }
        }

        return res;
    }
}