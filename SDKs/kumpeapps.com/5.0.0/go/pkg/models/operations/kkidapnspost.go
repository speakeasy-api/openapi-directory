// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KkidApnsPostSecurity struct {
	AuthKey string `security:"scheme,type=apiKey,subtype=header,name=X-Auth"`
}

// KkidApnsPostPriorityEnum - Notification section name (optional for send, default is active)
type KkidApnsPostPriorityEnum string

const (
	KkidApnsPostPriorityEnumPassive       KkidApnsPostPriorityEnum = "passive"
	KkidApnsPostPriorityEnumActive        KkidApnsPostPriorityEnum = "active"
	KkidApnsPostPriorityEnumTimeSensitive KkidApnsPostPriorityEnum = "time-sensitive"
	KkidApnsPostPriorityEnumCritical      KkidApnsPostPriorityEnum = "critical"
)

func (e *KkidApnsPostPriorityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "passive":
		fallthrough
	case "active":
		fallthrough
	case "time-sensitive":
		fallthrough
	case "critical":
		*e = KkidApnsPostPriorityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidApnsPostPriorityEnum: %s", s)
	}
}

// KkidApnsPostSectionEnum - Notification section name (required for send/subscribe/unsubscribe)
type KkidApnsPostSectionEnum string

const (
	KkidApnsPostSectionEnumChores          KkidApnsPostSectionEnum = "Chores"
	KkidApnsPostSectionEnumChoresNew       KkidApnsPostSectionEnum = "Chores-New"
	KkidApnsPostSectionEnumChoresReminders KkidApnsPostSectionEnum = "Chores-Reminders"
	KkidApnsPostSectionEnumAllowance       KkidApnsPostSectionEnum = "Allowance"
	KkidApnsPostSectionEnumAllowanceNew    KkidApnsPostSectionEnum = "Allowance-New"
	KkidApnsPostSectionEnumWishList        KkidApnsPostSectionEnum = "WishList"
)

func (e *KkidApnsPostSectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Chores":
		fallthrough
	case "Chores-New":
		fallthrough
	case "Chores-Reminders":
		fallthrough
	case "Allowance":
		fallthrough
	case "Allowance-New":
		fallthrough
	case "WishList":
		*e = KkidApnsPostSectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidApnsPostSectionEnum: %s", s)
	}
}

// KkidApnsPostToolEnum - tool you wish to talk to
type KkidApnsPostToolEnum string

const (
	KkidApnsPostToolEnumRegister    KkidApnsPostToolEnum = "register"
	KkidApnsPostToolEnumSubscribe   KkidApnsPostToolEnum = "subscribe"
	KkidApnsPostToolEnumUnsubscribe KkidApnsPostToolEnum = "unsubscribe"
	KkidApnsPostToolEnumSend        KkidApnsPostToolEnum = "send"
)

func (e *KkidApnsPostToolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "register":
		fallthrough
	case "subscribe":
		fallthrough
	case "unsubscribe":
		fallthrough
	case "send":
		*e = KkidApnsPostToolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidApnsPostToolEnum: %s", s)
	}
}

type KkidApnsPostRequest struct {
	// Number for badge icon (optional for send)
	Badge *int64 `queryParam:"style=form,explode=true,name=badge"`
	// Name of device to associate to token (required for register)
	Devicename *string `queryParam:"style=form,explode=true,name=devicename"`
	// userID of the kid
	KidUserID int64 `queryParam:"style=form,explode=true,name=kidUserId"`
	// APNS message body (required for send)
	Message *string `queryParam:"style=form,explode=true,name=message"`
	// Notification section name (optional for send, default is active)
	Priority *KkidApnsPostPriorityEnum `queryParam:"style=form,explode=true,name=priority"`
	// Notification section name (required for send/subscribe/unsubscribe)
	Section *KkidApnsPostSectionEnum `queryParam:"style=form,explode=true,name=section"`
	// Name of sound file to play for send notification (optional for send)
	Sound *string `queryParam:"style=form,explode=true,name=sound"`
	// title of APNS message (required for send)
	Title *string `queryParam:"style=form,explode=true,name=title"`
	// device APNS token (required for register)
	Token *string `queryParam:"style=form,explode=true,name=token"`
	// tool you wish to talk to
	Tool KkidApnsPostToolEnum `queryParam:"style=form,explode=true,name=tool"`
}

type KkidApnsPostResponse struct {
	// Method Not Allowed- API user does not have access to use this method
	FourHundredAndFive *shared.FourHundredAndFive
	// API Access Denied! Your API key is invalid, expired, or not supplied!
	FourHundredAndTwelve *shared.FourHundredAndTwelve
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
	// No Data Returned
	Nodata *shared.Nodata
	// search results matching criteria
	Success *shared.Success
}
