/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Status of the query job.
 *
 * @remarks
 *
 */
export enum DataQueryJobCancelledQueryStatusEnum {
  Cancelled = "cancelled",
}

/**
 * A cancelled data query job.
 *
 * @remarks
 *
 */
export class DataQueryJobCancelled extends SpeakeasyBase {
  /**
   * The query job creator's Id.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  /**
   * Internal identifier of the query job.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The query that was submitted.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query?: string;

  /**
   * Status of the query job.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "queryStatus" })
  queryStatus?: DataQueryJobCancelledQueryStatusEnum;

  /**
   * The number of times that Zuora will retry the query if Zuora is unable to perform the query.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remainingRetries" })
  remainingRetries?: number;

  /**
   * Date and time when the query job was last updated, in ISO 8601 format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updatedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedOn?: Date;
}
