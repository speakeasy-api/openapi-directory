<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Addresses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create client address
     * 
     * Creates new address for a given client profile.
     * 
     * 
     * > The `id` field returned by this request is the `addressId` used to retrieve or update information of a specific address later.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressResponse
     */
	public function createClientAddress(
        \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses', \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "address", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateClientAddressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateClientAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createClientAddress201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete address
     * 
     * Deletes a client's address by `profileId` and `addressId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
     */
	public function deleteAddress(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get address
     * 
     * Retrieves information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
     * 
     * 
     * > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked address.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
     */
	public function getAddress(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAddressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get address by version
     * 
     * Retrieves information of a specific version address of a given client.
     * 
     * 
     * > For security and privacy reasons, this request returns masked address data by version. For unmasked information, see Get unmasked address by version.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionResponse
     */
	public function getAddressByVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}', \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressByVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressByVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get client addresses
     * 
     * Retrieves information of all addresses of a given client, by its `profileId`.
     * 
     * 
     * > For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked client addresses.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesResponse
     */
	public function getClientAddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses', \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetClientAddressesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetClientAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getClientAddresses200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked address
     * 
     * Retrieves unmasked information of a specific address of a given client, by its respectives `adderssId` and `profileId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressResponse
     */
	public function getUnmaskedAddress(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedAddress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked address by version
     * 
     * Retrieves unmasked information of a specific address version of a given client.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionResponse
     */
	public function getUnmaskedAddressByVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedAddressByVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedAddressByVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get unmasked client addresses
     * 
     * Retrieves unmasked information of all addresses of a given client, by its `profileId`.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesResponse
     */
	public function getUnmaskedClientAddresses(
        \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/unmask', \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUnmaskedClientAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getUnmaskedClientAddresses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update client address
     * 
     * Updates one or more fields of an existing address for a given client profile.
     * 
     * 
     * > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressResponse
     */
	public function updateClientAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}', \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateClientAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateClientAddress200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}