<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UserResponse - The type that defines the fields for the getUser method.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UserResponse
{
    /**
     * Indicates the user account type. This is determined when the user registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in the following countries: EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:AccountTypeEnum'>eBay API documentation</a>
     * 
     * @var ?string $accountType
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountType = null;
    
    /**
     * The type that defines the fields for the business account information.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BusinessAccount $businessAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('businessAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BusinessAccount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BusinessAccount $businessAccount = null;
    
    /**
     * The type that defines the fields for the information of an individual account.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\IndividualAccount $individualAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('individualAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\IndividualAccount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?IndividualAccount $individualAccount = null;
    
    /**
     * The eBay site on which the account is registered. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/bas:MarketplaceIdEnum'>eBay API documentation</a>
     * 
     * @var ?string $registrationMarketplaceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('registrationMarketplaceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $registrationMarketplaceId = null;
    
    /**
     * Indicates the user's account status. Possible values: CONFIRMED, UNCONFIRMED, ACCOUNTONHOLD and UNDETERMINED. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:UserStatusEnum'>eBay API documentation</a>
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * The eBay immutable user ID of the user's account and can always be used to identify the user.
     * 
     * @var ?string $userId
     */
	#[\JMS\Serializer\Annotation\SerializedName('userId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userId = null;
    
    /**
     * The user name, which was specific by the user when they created the account. Note: This value can be changed by the user.
     * 
     * @var ?string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $username = null;
    
	public function __construct()
	{
		$this->accountType = null;
		$this->businessAccount = null;
		$this->individualAccount = null;
		$this->registrationMarketplaceId = null;
		$this->status = null;
		$this->userId = null;
		$this->username = null;
	}
}
