<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SlaDomainDefinition - SLA Domain definition. The SLA domain accepts two backup windows, one for a regular backup or snapshot and one for the first full backup or snapshot. Specify times using Rubrik cluster timezone.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SlaDomainDefinition
{
    /**
     * $allowedBackupWindows
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\BackupWindow> $allowedBackupWindows
     */
	#[\JMS\Serializer\Annotation\SerializedName('allowedBackupWindows')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\BackupWindow>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allowedBackupWindows = null;
    
    /**
     * $archivalSpecs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ArchivalSpec> $archivalSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('archivalSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ArchivalSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $archivalSpecs = null;
    
    /**
     * $firstFullAllowedBackupWindows
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\BackupWindow> $firstFullAllowedBackupWindows
     */
	#[\JMS\Serializer\Annotation\SerializedName('firstFullAllowedBackupWindows')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\BackupWindow>')]
    public array $firstFullAllowedBackupWindows;
    
    /**
     * $frequencies
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\SlaFrequency> $frequencies
     */
	#[\JMS\Serializer\Annotation\SerializedName('frequencies')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SlaFrequency>')]
    public array $frequencies;
    
    /**
     * Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.
     * 
     * @var ?bool $isRetentionLocked
     */
	#[\JMS\Serializer\Annotation\SerializedName('isRetentionLocked')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isRetentionLocked = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('localRetentionLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $localRetentionLimit = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * $replicationSpecs
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ReplicationSpec> $replicationSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('replicationSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ReplicationSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $replicationSpecs = null;
    
	public function __construct()
	{
		$this->allowedBackupWindows = null;
		$this->archivalSpecs = null;
		$this->firstFullAllowedBackupWindows = [];
		$this->frequencies = [];
		$this->isRetentionLocked = null;
		$this->localRetentionLimit = null;
		$this->name = "";
		$this->replicationSpecs = null;
	}
}
