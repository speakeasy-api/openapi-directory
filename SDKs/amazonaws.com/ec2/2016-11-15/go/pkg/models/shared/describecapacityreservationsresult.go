// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum - The usage type. <code>used</code> indicates that the instance capacity is in use by instances that are running in the Capacity Reservation.
type DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnumUsed DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum = "used"
)

func (e DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "used":
		*e = DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservationsCapacityAllocations - Information about instance capacity usage for a Capacity Reservation.
type DescribeCapacityReservationsResultCapacityReservationsCapacityAllocations struct {
	AllocationType *DescribeCapacityReservationsResultCapacityReservationsCapacityAllocationsAllocationTypeEnum
	Count          *int64
}

// DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum - <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p> </li> </ul>
type DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnumUnlimited DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum = "unlimited"
	DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnumLimited   DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum = "limited"
)

func (e DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unlimited":
		fallthrough
	case "limited":
		*e = DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum - <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul>
type DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnumOpen     DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum = "open"
	DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnumTargeted DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum = "targeted"
)

func (e DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "targeted":
		*e = DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum - The type of operating system for which the Capacity Reservation reserves capacity.
type DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumLinuxUnix                        DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Linux/UNIX"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRedHatEnterpriseLinux            DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Red Hat Enterprise Linux"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumSuseLinux                        DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "SUSE Linux"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumWindows                          DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Windows"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumWindowsWithSQLServer             DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Windows with SQL Server"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumWindowsWithSQLServerEnterprise   DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Windows with SQL Server Enterprise"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumWindowsWithSQLServerStandard     DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Windows with SQL Server Standard"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumWindowsWithSQLServerWeb          DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Windows with SQL Server Web"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumLinuxWithSQLServerStandard       DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Linux with SQL Server Standard"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumLinuxWithSQLServerWeb            DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Linux with SQL Server Web"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumLinuxWithSQLServerEnterprise     DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "Linux with SQL Server Enterprise"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithSQLServerStandard        DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with SQL Server Standard"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithSQLServerEnterprise      DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with SQL Server Enterprise"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithSQLServerWeb             DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with SQL Server Web"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithHa                       DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with HA"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithHaAndSQLServerStandard   DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with HA and SQL Server Standard"
	DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnumRhelWithHaAndSQLServerEnterprise DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum = "RHEL with HA and SQL Server Enterprise"
)

func (e DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Linux/UNIX":
		fallthrough
	case "Red Hat Enterprise Linux":
		fallthrough
	case "SUSE Linux":
		fallthrough
	case "Windows":
		fallthrough
	case "Windows with SQL Server":
		fallthrough
	case "Windows with SQL Server Enterprise":
		fallthrough
	case "Windows with SQL Server Standard":
		fallthrough
	case "Windows with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Standard":
		fallthrough
	case "Linux with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Standard":
		fallthrough
	case "RHEL with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Web":
		fallthrough
	case "RHEL with HA":
		fallthrough
	case "RHEL with HA and SQL Server Standard":
		fallthrough
	case "RHEL with HA and SQL Server Enterprise":
		*e = DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservationsStateEnum - <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul>
type DescribeCapacityReservationsResultCapacityReservationsStateEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsStateEnumActive    DescribeCapacityReservationsResultCapacityReservationsStateEnum = "active"
	DescribeCapacityReservationsResultCapacityReservationsStateEnumExpired   DescribeCapacityReservationsResultCapacityReservationsStateEnum = "expired"
	DescribeCapacityReservationsResultCapacityReservationsStateEnumCancelled DescribeCapacityReservationsResultCapacityReservationsStateEnum = "cancelled"
	DescribeCapacityReservationsResultCapacityReservationsStateEnumPending   DescribeCapacityReservationsResultCapacityReservationsStateEnum = "pending"
	DescribeCapacityReservationsResultCapacityReservationsStateEnumFailed    DescribeCapacityReservationsResultCapacityReservationsStateEnum = "failed"
)

func (e DescribeCapacityReservationsResultCapacityReservationsStateEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsStateEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "cancelled":
		fallthrough
	case "pending":
		fallthrough
	case "failed":
		*e = DescribeCapacityReservationsResultCapacityReservationsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsStateEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservationsTags - Describes a tag.
type DescribeCapacityReservationsResultCapacityReservationsTags struct {
	Key   *string
	Value *string
}

// DescribeCapacityReservationsResultCapacityReservationsTenancyEnum - <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.</p> </li> </ul>
type DescribeCapacityReservationsResultCapacityReservationsTenancyEnum string

const (
	DescribeCapacityReservationsResultCapacityReservationsTenancyEnumDefault   DescribeCapacityReservationsResultCapacityReservationsTenancyEnum = "default"
	DescribeCapacityReservationsResultCapacityReservationsTenancyEnumDedicated DescribeCapacityReservationsResultCapacityReservationsTenancyEnum = "dedicated"
)

func (e DescribeCapacityReservationsResultCapacityReservationsTenancyEnum) ToPointer() *DescribeCapacityReservationsResultCapacityReservationsTenancyEnum {
	return &e
}

func (e *DescribeCapacityReservationsResultCapacityReservationsTenancyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "dedicated":
		*e = DescribeCapacityReservationsResultCapacityReservationsTenancyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeCapacityReservationsResultCapacityReservationsTenancyEnum: %v", v)
	}
}

// DescribeCapacityReservationsResultCapacityReservations - Describes a Capacity Reservation.
type DescribeCapacityReservationsResultCapacityReservations struct {
	AvailabilityZone           *string
	AvailabilityZoneID         *string
	AvailableInstanceCount     *int64
	CapacityAllocations        []DescribeCapacityReservationsResultCapacityReservationsCapacityAllocations
	CapacityReservationArn     *string
	CapacityReservationFleetID *string
	CapacityReservationID      *string
	CreateDate                 *time.Time
	EbsOptimized               *bool
	EndDate                    *time.Time
	EndDateType                *DescribeCapacityReservationsResultCapacityReservationsEndDateTypeEnum
	EphemeralStorage           *bool
	InstanceMatchCriteria      *DescribeCapacityReservationsResultCapacityReservationsInstanceMatchCriteriaEnum
	InstancePlatform           *DescribeCapacityReservationsResultCapacityReservationsInstancePlatformEnum
	InstanceType               *string
	OutpostArn                 *string
	OwnerID                    *string
	PlacementGroupArn          *string
	StartDate                  *time.Time
	State                      *DescribeCapacityReservationsResultCapacityReservationsStateEnum
	Tags                       []DescribeCapacityReservationsResultCapacityReservationsTags
	Tenancy                    *DescribeCapacityReservationsResultCapacityReservationsTenancyEnum
	TotalInstanceCount         *int64
}

// DescribeCapacityReservationsResult - Success
type DescribeCapacityReservationsResult struct {
	CapacityReservations []DescribeCapacityReservationsResultCapacityReservations
	NextToken            *string
}
