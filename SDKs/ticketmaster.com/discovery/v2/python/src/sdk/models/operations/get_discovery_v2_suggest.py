"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetDiscoveryV2SuggestIncludeFuzzyEnum(str, Enum):
    r"""yes, to include fuzzy matches in the search. This has performance impact."""
    YES = 'yes'
    NO = ' no'

class GetDiscoveryV2SuggestIncludeLicensedContentEnum(str, Enum):
    r"""Yes if you want to display licensed content"""
    YES = 'yes'
    NO = ' no'

class GetDiscoveryV2SuggestIncludeSpellcheckEnum(str, Enum):
    r"""yes, to include spell check suggestions in the response."""
    YES = 'yes'
    NO = ' no'

class GetDiscoveryV2SuggestIncludeTbaEnum(str, Enum):
    r"""True, to include events with date to be announce (TBA)"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class GetDiscoveryV2SuggestIncludeTbdEnum(str, Enum):
    r"""True, to include event with a date to be defined (TBD)"""
    YES = 'yes'
    NO = ' no'
    ONLY = ' only'

class GetDiscoveryV2SuggestSourceEnum(str, Enum):
    r"""Filter entities by its source name"""
    TICKETMASTER = 'ticketmaster'
    UNIVERSE = ' universe'
    FRONTGATE = ' frontgate'
    TMR = ' tmr'

class GetDiscoveryV2SuggestUnitEnum(str, Enum):
    r"""Unit of the radius"""
    MILES = 'miles'
    KM = 'km'


@dataclasses.dataclass
class GetDiscoveryV2SuggestRequest:
    
    client_visibility: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientVisibility', 'style': 'form', 'explode': True }})
    r"""Filter events to clientName"""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'countryCode', 'style': 'form', 'explode': True }})
    r"""Filter suggestions by country code"""  
    geo_point: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'geoPoint', 'style': 'form', 'explode': True }})
    r"""filter events by geoHash"""  
    include_fuzzy: Optional[GetDiscoveryV2SuggestIncludeFuzzyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeFuzzy', 'style': 'form', 'explode': True }})
    r"""yes, to include fuzzy matches in the search. This has performance impact."""  
    include_licensed_content: Optional[GetDiscoveryV2SuggestIncludeLicensedContentEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeLicensedContent', 'style': 'form', 'explode': True }})
    r"""Yes if you want to display licensed content"""  
    include_spellcheck: Optional[GetDiscoveryV2SuggestIncludeSpellcheckEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeSpellcheck', 'style': 'form', 'explode': True }})
    r"""yes, to include spell check suggestions in the response."""  
    include_tba: Optional[GetDiscoveryV2SuggestIncludeTbaEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTBA', 'style': 'form', 'explode': True }})
    r"""True, to include events with date to be announce (TBA)"""  
    include_tbd: Optional[GetDiscoveryV2SuggestIncludeTbdEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTBD', 'style': 'form', 'explode': True }})
    r"""True, to include event with a date to be defined (TBD)"""  
    keyword: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keyword', 'style': 'form', 'explode': True }})
    r"""Keyword to search on"""  
    latlong: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latlong', 'style': 'form', 'explode': True }})
    r"""Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead"""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*')"""  
    radius: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""Radius of the area in which we want to search for events."""  
    segment_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segmentId', 'style': 'form', 'explode': True }})
    r"""Filter suggestions by segment id"""  
    size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'size', 'style': 'form', 'explode': True }})
    r"""Size of every entity returned in the response"""  
    source: Optional[GetDiscoveryV2SuggestSourceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""Filter entities by its source name"""  
    unit: Optional[GetDiscoveryV2SuggestUnitEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})
    r"""Unit of the radius"""  
    

@dataclasses.dataclass
class GetDiscoveryV2SuggestResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_discovery_v2_suggest_200_application_hal_plus_json_string: Optional[str] = dataclasses.field(default=None)
    r"""successful operation"""  
    get_discovery_v2_suggest_200_application_json_string: Optional[str] = dataclasses.field(default=None)
    r"""successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    