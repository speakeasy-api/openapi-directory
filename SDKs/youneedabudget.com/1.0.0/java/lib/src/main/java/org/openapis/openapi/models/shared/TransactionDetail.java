/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class TransactionDetail {
    @JsonProperty("account_id")
    public String accountId;

    public TransactionDetail withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    @JsonProperty("account_name")
    public String accountName;

    public TransactionDetail withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }
    
    /**
     * The transaction amount in milliunits format
     */
    @JsonProperty("amount")
    public Long amount;

    public TransactionDetail withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Whether or not the transaction is approved
     */
    @JsonProperty("approved")
    public Boolean approved;

    public TransactionDetail withApproved(Boolean approved) {
        this.approved = approved;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    public String categoryId;

    public TransactionDetail withCategoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * The name of the category.  If a split transaction, this will be 'Split'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_name")
    public String categoryName;

    public TransactionDetail withCategoryName(String categoryName) {
        this.categoryName = categoryName;
        return this;
    }
    
    /**
     * The cleared status of the transaction
     */
    @JsonProperty("cleared")
    public TransactionDetailClearedEnum cleared;

    public TransactionDetail withCleared(TransactionDetailClearedEnum cleared) {
        this.cleared = cleared;
        return this;
    }
    
    /**
     * The transaction date in ISO format (e.g. 2016-12-01)
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("date")
    public LocalDate date;

    public TransactionDetail withDate(LocalDate date) {
        this.date = date;
        return this;
    }
    
    /**
     * If the transaction is a debt/loan account transaction, the type of transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debt_transaction_type")
    public TransactionDetailDebtTransactionTypeEnum debtTransactionType;

    public TransactionDetail withDebtTransactionType(TransactionDetailDebtTransactionTypeEnum debtTransactionType) {
        this.debtTransactionType = debtTransactionType;
        return this;
    }
    
    /**
     * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
     */
    @JsonProperty("deleted")
    public Boolean deleted;

    public TransactionDetail withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The transaction flag
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flag_color")
    public TransactionDetailFlagColorEnum flagColor;

    public TransactionDetail withFlagColor(TransactionDetailFlagColorEnum flagColor) {
        this.flagColor = flagColor;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public TransactionDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("import_id")
    public String importId;

    public TransactionDetail withImportId(String importId) {
        this.importId = importId;
        return this;
    }
    
    /**
     * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("import_payee_name")
    public String importPayeeName;

    public TransactionDetail withImportPayeeName(String importPayeeName) {
        this.importPayeeName = importPayeeName;
        return this;
    }
    
    /**
     * If the transaction was imported, the original payee name as it appeared on the statement
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("import_payee_name_original")
    public String importPayeeNameOriginal;

    public TransactionDetail withImportPayeeNameOriginal(String importPayeeNameOriginal) {
        this.importPayeeNameOriginal = importPayeeNameOriginal;
        return this;
    }
    
    /**
     * If transaction is matched, the id of the matched transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matched_transaction_id")
    public String matchedTransactionId;

    public TransactionDetail withMatchedTransactionId(String matchedTransactionId) {
        this.matchedTransactionId = matchedTransactionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memo")
    public String memo;

    public TransactionDetail withMemo(String memo) {
        this.memo = memo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_id")
    public String payeeId;

    public TransactionDetail withPayeeId(String payeeId) {
        this.payeeId = payeeId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payee_name")
    public String payeeName;

    public TransactionDetail withPayeeName(String payeeName) {
        this.payeeName = payeeName;
        return this;
    }
    
    /**
     * If a split transaction, the subtransactions.
     */
    @JsonProperty("subtransactions")
    public SubTransaction[] subtransactions;

    public TransactionDetail withSubtransactions(SubTransaction[] subtransactions) {
        this.subtransactions = subtransactions;
        return this;
    }
    
    /**
     * If a transfer transaction, the account to which it transfers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_account_id")
    public String transferAccountId;

    public TransactionDetail withTransferAccountId(String transferAccountId) {
        this.transferAccountId = transferAccountId;
        return this;
    }
    
    /**
     * If a transfer transaction, the id of transaction on the other side of the transfer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_transaction_id")
    public String transferTransactionId;

    public TransactionDetail withTransferTransactionId(String transferTransactionId) {
        this.transferTransactionId = transferTransactionId;
        return this;
    }
    
    public TransactionDetail(@JsonProperty("account_id") String accountId, @JsonProperty("account_name") String accountName, @JsonProperty("amount") Long amount, @JsonProperty("approved") Boolean approved, @JsonProperty("cleared") TransactionDetailClearedEnum cleared, @JsonProperty("date") LocalDate date, @JsonProperty("deleted") Boolean deleted, @JsonProperty("id") String id, @JsonProperty("subtransactions") SubTransaction[] subtransactions) {
        this.accountId = accountId;
        this.accountName = accountName;
        this.amount = amount;
        this.approved = approved;
        this.cleared = cleared;
        this.date = date;
        this.deleted = deleted;
        this.id = id;
        this.subtransactions = subtransactions;
  }
}
