"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import activatedrule as shared_activatedrule
from ..shared import wafaction as shared_wafaction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebACL:
    r"""<note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>Contains the <code>Rules</code> that identify the requests that you want to allow, block, or count. In a <code>WebACL</code>, you also specify a default action (<code>ALLOW</code> or <code>BLOCK</code>), and the action for each <code>Rule</code> that you add to a <code>WebACL</code>, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the <code>WebACL</code> with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one <code>Rule</code> to a <code>WebACL</code>, a request needs to match only one of the specifications to be allowed, blocked, or counted. For more information, see <a>UpdateWebACL</a>.</p>"""
    
    default_action: shared_wafaction.WafAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultAction') }})  
    rules: list[shared_activatedrule.ActivatedRule] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rules') }})  
    web_acl_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebACLId') }})  
    metric_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricName'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    web_acl_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WebACLArn'), 'exclude': lambda f: f is None }})  
    