"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Asps:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_asps_delete(self, request: operations.DirectoryAspsDeleteRequest, security: operations.DirectoryAspsDeleteSecurity) -> operations.DirectoryAspsDeleteResponse:
        r"""Deletes an ASP issued by a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryAspsDeleteRequest, base_url, '/admin/directory/v1/users/{userKey}/asps/{codeId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryAspsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryAspsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_asps_get(self, request: operations.DirectoryAspsGetRequest, security: operations.DirectoryAspsGetSecurity) -> operations.DirectoryAspsGetResponse:
        r"""Gets information about an ASP issued by a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryAspsGetRequest, base_url, '/admin/directory/v1/users/{userKey}/asps/{codeId}', request)
        
        query_params = utils.get_query_params(operations.DirectoryAspsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryAspsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asp])
                res.asp = out

        return res

    def directory_asps_list(self, request: operations.DirectoryAspsListRequest, security: operations.DirectoryAspsListSecurity) -> operations.DirectoryAspsListResponse:
        r"""Lists the ASPs issued by a user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryAspsListRequest, base_url, '/admin/directory/v1/users/{userKey}/asps', request)
        
        query_params = utils.get_query_params(operations.DirectoryAspsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryAspsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asps])
                res.asps = out

        return res

    