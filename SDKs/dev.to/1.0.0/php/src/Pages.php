<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Pages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * remove a page
     * 
     * This endpoint allows the client to delete a single Page object, specified by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdResponse
     */
	public function deleteApiPagesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pages/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiPagesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * show details for all pages
     * 
     * This endpoint allows the client to retrieve details for all Page objects.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiPagesResponse
     */
	public function getApiPages(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiPagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pages');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiPagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pages = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Page>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * show details for a page
     * 
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdResponse
     */
	public function getApiPagesId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pages/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiPagesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * pages
     * 
     * This endpoint allows the client to create a new page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiPagesRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiPagesResponse
     */
	public function postApiPages(
        \OpenAPI\OpenAPI\Models\Operations\PostApiPagesRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiPagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiPagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * update details for a page
     * 
     * This endpoint allows the client to retrieve details for a single Page object, specified by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdResponse
     */
	public function putApiPagesId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/pages/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "page", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiPagesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}