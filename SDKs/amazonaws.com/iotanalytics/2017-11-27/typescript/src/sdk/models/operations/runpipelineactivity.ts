/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An activity that performs a transformation on a message.
 */
export class RunPipelineActivityRequestBodyPipelineActivity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "addAttributes" })
  @Type(() => shared.AddAttributesActivity)
  addAttributes?: shared.AddAttributesActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => shared.ChannelActivity)
  channel?: shared.ChannelActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "datastore" })
  @Type(() => shared.DatastoreActivity)
  datastore?: shared.DatastoreActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceRegistryEnrich" })
  @Type(() => shared.DeviceRegistryEnrichActivity)
  deviceRegistryEnrich?: shared.DeviceRegistryEnrichActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "deviceShadowEnrich" })
  @Type(() => shared.DeviceShadowEnrichActivity)
  deviceShadowEnrich?: shared.DeviceShadowEnrichActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "filter" })
  @Type(() => shared.FilterActivity)
  filter?: shared.FilterActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "lambda" })
  @Type(() => shared.LambdaActivity)
  lambda?: shared.LambdaActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "math" })
  @Type(() => shared.MathActivity)
  math?: shared.MathActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "removeAttributes" })
  @Type(() => shared.RemoveAttributesActivity)
  removeAttributes?: shared.RemoveAttributesActivity;

  @SpeakeasyMetadata()
  @Expose({ name: "selectAttributes" })
  @Type(() => shared.SelectAttributesActivity)
  selectAttributes?: shared.SelectAttributesActivity;
}

export class RunPipelineActivityRequestBody extends SpeakeasyBase {
  /**
   * The sample message payloads on which the pipeline activity is run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payloads" })
  payloads: string[];

  /**
   * An activity that performs a transformation on a message.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pipelineActivity" })
  @Type(() => RunPipelineActivityRequestBodyPipelineActivity)
  pipelineActivity: RunPipelineActivityRequestBodyPipelineActivity;
}

export class RunPipelineActivityRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RunPipelineActivityRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RunPipelineActivityResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  runPipelineActivityResponse?: shared.RunPipelineActivityResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
