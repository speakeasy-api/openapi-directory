"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appspecification as shared_appspecification
from ..shared import experimentconfig as shared_experimentconfig
from ..shared import networkconfig as shared_networkconfig
from ..shared import processinginput as shared_processinginput
from ..shared import processingoutputconfig as shared_processingoutputconfig
from ..shared import processingresources as shared_processingresources
from ..shared import processingstoppingcondition as shared_processingstoppingcondition
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateProcessingJobRequest:
    
    app_specification: shared_appspecification.AppSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppSpecification') }})  
    processing_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingJobName') }})  
    processing_resources: shared_processingresources.ProcessingResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingResources') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    experiment_config: Optional[shared_experimentconfig.ExperimentConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExperimentConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a>CreateProcessingJob</a> </p> </li> <li> <p> <a>CreateTrainingJob</a> </p> </li> <li> <p> <a>CreateTransformJob</a> </p> </li> </ul>"""  
    network_config: Optional[shared_networkconfig.NetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfig'), 'exclude': lambda f: f is None }})  
    processing_inputs: Optional[list[shared_processinginput.ProcessingInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingInputs'), 'exclude': lambda f: f is None }})  
    processing_output_config: Optional[shared_processingoutputconfig.ProcessingOutputConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProcessingOutputConfig'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_processingstoppingcondition.ProcessingStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    