"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cellformat as shared_cellformat
from ..shared import datasourceformula as shared_datasourceformula
from ..shared import datasourcetable as shared_datasourcetable
from ..shared import datavalidationrule as shared_datavalidationrule
from ..shared import extendedvalue as shared_extendedvalue
from ..shared import pivottable as shared_pivottable
from ..shared import textformatrun as shared_textformatrun
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CellData:
    r"""Data about a specific cell."""
    
    data_source_formula: Optional[shared_datasourceformula.DataSourceFormula] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceFormula'), 'exclude': lambda f: f is None }})
    r"""A data source formula."""  
    data_source_table: Optional[shared_datasourcetable.DataSourceTable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceTable'), 'exclude': lambda f: f is None }})
    r"""A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as \\"Extract\\" in the Sheets editor."""  
    data_validation: Optional[shared_datavalidationrule.DataValidationRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataValidation'), 'exclude': lambda f: f is None }})
    r"""A data validation rule."""  
    effective_format: Optional[shared_cellformat.CellFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveFormat'), 'exclude': lambda f: f is None }})
    r"""The format of a cell."""  
    effective_value: Optional[shared_extendedvalue.ExtendedValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effectiveValue'), 'exclude': lambda f: f is None }})
    r"""The kinds of value that a cell in a spreadsheet can have."""  
    formatted_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedValue'), 'exclude': lambda f: f is None }})
    r"""The formatted value of the cell. This is the value as it's shown to the user. This field is read-only."""  
    hyperlink: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperlink'), 'exclude': lambda f: f is None }})
    r"""A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell."""  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""Any note on the cell."""  
    pivot_table: Optional[shared_pivottable.PivotTable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pivotTable'), 'exclude': lambda f: f is None }})
    r"""A pivot table."""  
    text_format_runs: Optional[list[shared_textformatrun.TextFormatRun]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textFormatRuns'), 'exclude': lambda f: f is None }})
    r"""Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased."""  
    user_entered_format: Optional[shared_cellformat.CellFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEnteredFormat'), 'exclude': lambda f: f is None }})
    r"""The format of a cell."""  
    user_entered_value: Optional[shared_extendedvalue.ExtendedValue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userEnteredValue'), 'exclude': lambda f: f is None }})
    r"""The kinds of value that a cell in a spreadsheet can have."""  
    