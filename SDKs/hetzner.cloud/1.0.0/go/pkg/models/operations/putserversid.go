// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PutServersIDPathParams struct {
	// ID of the Server
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type PutServersIDUpdateServerRequest struct {
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	// New name to set
	Name *string `json:"name,omitempty"`
}

type PutServersIDRequest struct {
	PathParams PutServersIDPathParams
	Request    *PutServersIDUpdateServerRequest `request:"mediaType=application/json"`
}

type PutServersID200ApplicationJSONServerDatacenterLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PutServersID200ApplicationJSONServerDatacenterServerTypes - The Server types the Datacenter can handle
type PutServersID200ApplicationJSONServerDatacenterServerTypes struct {
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	Available []float64 `json:"available"`
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	AvailableForMigration []float64 `json:"available_for_migration"`
	// IDs of Server types that are supported in the Datacenter
	Supported []float64 `json:"supported"`
}

// PutServersID200ApplicationJSONServerDatacenter - Datacenter this Resource is located at
type PutServersID200ApplicationJSONServerDatacenter struct {
	// Description of the Datacenter
	Description string `json:"description"`
	// ID of the Resource
	ID       int64                                                  `json:"id"`
	Location PutServersID200ApplicationJSONServerDatacenterLocation `json:"location"`
	// Unique identifier of the Datacenter
	Name string `json:"name"`
	// The Server types the Datacenter can handle
	ServerTypes PutServersID200ApplicationJSONServerDatacenterServerTypes `json:"server_types"`
}

// PutServersID200ApplicationJSONServerImageCreatedFrom - Information about the Server the Image was created from
type PutServersID200ApplicationJSONServerImageCreatedFrom struct {
	// ID of the Server the Image was created from
	ID int64 `json:"id"`
	// Server name at the time the Image was created
	Name string `json:"name"`
}

// PutServersID200ApplicationJSONServerImageOsFlavorEnum - Flavor of operating system contained in the Image
type PutServersID200ApplicationJSONServerImageOsFlavorEnum string

const (
	PutServersID200ApplicationJSONServerImageOsFlavorEnumUbuntu  PutServersID200ApplicationJSONServerImageOsFlavorEnum = "ubuntu"
	PutServersID200ApplicationJSONServerImageOsFlavorEnumCentos  PutServersID200ApplicationJSONServerImageOsFlavorEnum = "centos"
	PutServersID200ApplicationJSONServerImageOsFlavorEnumDebian  PutServersID200ApplicationJSONServerImageOsFlavorEnum = "debian"
	PutServersID200ApplicationJSONServerImageOsFlavorEnumFedora  PutServersID200ApplicationJSONServerImageOsFlavorEnum = "fedora"
	PutServersID200ApplicationJSONServerImageOsFlavorEnumUnknown PutServersID200ApplicationJSONServerImageOsFlavorEnum = "unknown"
)

func (e *PutServersID200ApplicationJSONServerImageOsFlavorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ubuntu":
		fallthrough
	case "centos":
		fallthrough
	case "debian":
		fallthrough
	case "fedora":
		fallthrough
	case "unknown":
		*e = PutServersID200ApplicationJSONServerImageOsFlavorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerImageOsFlavorEnum: %s", s)
	}
}

// PutServersID200ApplicationJSONServerImageProtection - Protection configuration for the Resource
type PutServersID200ApplicationJSONServerImageProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PutServersID200ApplicationJSONServerImageStatusEnum - Whether the Image can be used or if it's still being created or unavailable
type PutServersID200ApplicationJSONServerImageStatusEnum string

const (
	PutServersID200ApplicationJSONServerImageStatusEnumAvailable   PutServersID200ApplicationJSONServerImageStatusEnum = "available"
	PutServersID200ApplicationJSONServerImageStatusEnumCreating    PutServersID200ApplicationJSONServerImageStatusEnum = "creating"
	PutServersID200ApplicationJSONServerImageStatusEnumUnavailable PutServersID200ApplicationJSONServerImageStatusEnum = "unavailable"
)

func (e *PutServersID200ApplicationJSONServerImageStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "creating":
		fallthrough
	case "unavailable":
		*e = PutServersID200ApplicationJSONServerImageStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerImageStatusEnum: %s", s)
	}
}

// PutServersID200ApplicationJSONServerImageTypeEnum - Type of the Image
type PutServersID200ApplicationJSONServerImageTypeEnum string

const (
	PutServersID200ApplicationJSONServerImageTypeEnumSystem    PutServersID200ApplicationJSONServerImageTypeEnum = "system"
	PutServersID200ApplicationJSONServerImageTypeEnumApp       PutServersID200ApplicationJSONServerImageTypeEnum = "app"
	PutServersID200ApplicationJSONServerImageTypeEnumSnapshot  PutServersID200ApplicationJSONServerImageTypeEnum = "snapshot"
	PutServersID200ApplicationJSONServerImageTypeEnumBackup    PutServersID200ApplicationJSONServerImageTypeEnum = "backup"
	PutServersID200ApplicationJSONServerImageTypeEnumTemporary PutServersID200ApplicationJSONServerImageTypeEnum = "temporary"
)

func (e *PutServersID200ApplicationJSONServerImageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "system":
		fallthrough
	case "app":
		fallthrough
	case "snapshot":
		fallthrough
	case "backup":
		fallthrough
	case "temporary":
		*e = PutServersID200ApplicationJSONServerImageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerImageTypeEnum: %s", s)
	}
}

type PutServersID200ApplicationJSONServerImage struct {
	// ID of Server the Image is bound to. Only set for Images of type `backup`.
	BoundTo int64 `json:"bound_to"`
	// Build ID of the Image
	BuildID *string `json:"build_id,omitempty"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Information about the Server the Image was created from
	CreatedFrom PutServersID200ApplicationJSONServerImageCreatedFrom `json:"created_from"`
	// Point in time where the Image was deleted (in ISO-8601 format)
	Deleted string `json:"deleted"`
	// Point in time when the Image is considered to be deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Image
	Description string `json:"description"`
	// Size of the disk contained in the Image in GB
	DiskSize float64 `json:"disk_size"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
	ImageSize float64 `json:"image_size"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Unique identifier of the Image. This value is only set for system Images.
	Name string `json:"name"`
	// Flavor of operating system contained in the Image
	OsFlavor PutServersID200ApplicationJSONServerImageOsFlavorEnum `json:"os_flavor"`
	// Operating system version
	OsVersion string `json:"os_version"`
	// Protection configuration for the Resource
	Protection PutServersID200ApplicationJSONServerImageProtection `json:"protection"`
	// Indicates that rapid deploy of the Image is available
	RapidDeploy *bool `json:"rapid_deploy,omitempty"`
	// Whether the Image can be used or if it's still being created or unavailable
	Status PutServersID200ApplicationJSONServerImageStatusEnum `json:"status"`
	// Type of the Image
	Type PutServersID200ApplicationJSONServerImageTypeEnum `json:"type"`
}

// PutServersID200ApplicationJSONServerIsoTypeEnum - Type of the ISO
type PutServersID200ApplicationJSONServerIsoTypeEnum string

const (
	PutServersID200ApplicationJSONServerIsoTypeEnumPublic  PutServersID200ApplicationJSONServerIsoTypeEnum = "public"
	PutServersID200ApplicationJSONServerIsoTypeEnumPrivate PutServersID200ApplicationJSONServerIsoTypeEnum = "private"
)

func (e *PutServersID200ApplicationJSONServerIsoTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "private":
		*e = PutServersID200ApplicationJSONServerIsoTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerIsoTypeEnum: %s", s)
	}
}

// PutServersID200ApplicationJSONServerIso - ISO Image that is attached to this Server. Null if no ISO is attached.
type PutServersID200ApplicationJSONServerIso struct {
	// ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
	Deprecated string `json:"deprecated"`
	// Description of the ISO
	Description string `json:"description"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Unique identifier of the ISO. Only set for public ISOs
	Name string `json:"name"`
	// Type of the ISO
	Type PutServersID200ApplicationJSONServerIsoTypeEnum `json:"type"`
}

// PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum - Type of the Placement Group
type PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum string

const (
	PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnumSpread PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum = "spread"
)

func (e *PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "spread":
		*e = PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum: %s", s)
	}
}

type PutServersID200ApplicationJSONServerPlacementGroupNullable struct {
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Array of IDs of Servers that are part of this Placement Group
	Servers []int64 `json:"servers"`
	// Type of the Placement Group
	Type PutServersID200ApplicationJSONServerPlacementGroupNullableTypeEnum `json:"type"`
}

type PutServersID200ApplicationJSONServerPrivateNet struct {
	AliasIps   []string `json:"alias_ips,omitempty"`
	IP         *string  `json:"ip,omitempty"`
	MacAddress *string  `json:"mac_address,omitempty"`
	Network    *int64   `json:"network,omitempty"`
}

// PutServersID200ApplicationJSONServerProtection - Protection configuration for the Server
type PutServersID200ApplicationJSONServerProtection struct {
	// If true, prevents the Server from being deleted
	Delete bool `json:"delete"`
	// If true, prevents the Server from being rebuilt
	Rebuild bool `json:"rebuild"`
}

// PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum - Status of the Firewall on the Server
type PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum string

const (
	PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnumApplied PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum = "applied"
	PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnumPending PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum = "pending"
)

func (e *PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "applied":
		fallthrough
	case "pending":
		*e = PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum: %s", s)
	}
}

type PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewall struct {
	// ID of the Resource
	ID *int64 `json:"id,omitempty"`
	// Status of the Firewall on the Server
	Status *PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewallStatusEnum `json:"status,omitempty"`
}

// PutServersID200ApplicationJSONServerPublicNetIpv4 - IP address (v4) and its reverse DNS entry of this Server
type PutServersID200ApplicationJSONServerPublicNetIpv4 struct {
	// If the IP is blocked by our anti abuse dept
	Blocked bool `json:"blocked"`
	// Reverse DNS PTR entry for the IPv4 addresses of this Server
	DNSPtr string `json:"dns_ptr"`
	// IP address (v4) of this Server
	IP string `json:"ip"`
}

type PutServersID200ApplicationJSONServerPublicNetIpv6DNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv6 address of this Server for which the reverse DNS entry has been set up
	IP string `json:"ip"`
}

// PutServersID200ApplicationJSONServerPublicNetIpv6 - IPv6 network assigned to this Server and its reverse DNS entry
type PutServersID200ApplicationJSONServerPublicNetIpv6 struct {
	// If the IP is blocked by our anti abuse dept
	Blocked bool `json:"blocked"`
	// Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default
	DNSPtr []PutServersID200ApplicationJSONServerPublicNetIpv6DNSPtr `json:"dns_ptr"`
	// IP address (v4) of this Server
	IP string `json:"ip"`
}

// PutServersID200ApplicationJSONServerPublicNet - Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
type PutServersID200ApplicationJSONServerPublicNet struct {
	// Firewalls applied to the public network interface of this Server
	Firewalls []PutServersID200ApplicationJSONServerPublicNetServerPublicNetFirewall `json:"firewalls,omitempty"`
	// IDs of Floating IPs assigned to this Server
	FloatingIps []int64 `json:"floating_ips"`
	// IP address (v4) and its reverse DNS entry of this Server
	Ipv4 PutServersID200ApplicationJSONServerPublicNetIpv4 `json:"ipv4"`
	// IPv6 network assigned to this Server and its reverse DNS entry
	Ipv6 PutServersID200ApplicationJSONServerPublicNetIpv6 `json:"ipv6"`
}

// PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum - Type of cpu
type PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum string

const (
	PutServersID200ApplicationJSONServerServerTypeCPUTypeEnumShared    PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum = "shared"
	PutServersID200ApplicationJSONServerServerTypeCPUTypeEnumDedicated PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum = "dedicated"
)

func (e *PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared":
		fallthrough
	case "dedicated":
		*e = PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum: %s", s)
	}
}

// PutServersID200ApplicationJSONServerServerTypePricesPriceHourly - Hourly costs for a Server type in this Location
type PutServersID200ApplicationJSONServerServerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// PutServersID200ApplicationJSONServerServerTypePricesPriceMonthly - Monthly costs for a Server type in this Location
type PutServersID200ApplicationJSONServerServerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type PutServersID200ApplicationJSONServerServerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Server type in this Location
	PriceHourly PutServersID200ApplicationJSONServerServerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Server type in this Location
	PriceMonthly PutServersID200ApplicationJSONServerServerTypePricesPriceMonthly `json:"price_monthly"`
}

// PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum - Type of Server boot drive. Local has higher speed. Network has better availability.
type PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum string

const (
	PutServersID200ApplicationJSONServerServerTypeStorageTypeEnumLocal   PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum = "local"
	PutServersID200ApplicationJSONServerServerTypeStorageTypeEnumNetwork PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum = "network"
)

func (e *PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "network":
		*e = PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum: %s", s)
	}
}

// PutServersID200ApplicationJSONServerServerType - Type of Server - determines how much ram, disk and cpu a Server has
type PutServersID200ApplicationJSONServerServerType struct {
	// Number of cpu cores a Server of this type will have
	Cores float64 `json:"cores"`
	// Type of cpu
	CPUType PutServersID200ApplicationJSONServerServerTypeCPUTypeEnum `json:"cpu_type"`
	// True if Server type is deprecated
	Deprecated bool `json:"deprecated"`
	// Description of the Server type
	Description string `json:"description"`
	// Disk size a Server of this type will have in GB
	Disk float64 `json:"disk"`
	// ID of the Server type
	ID int64 `json:"id"`
	// Memory a Server of this type will have in GB
	Memory float64 `json:"memory"`
	// Unique identifier of the Server type
	Name string `json:"name"`
	// Prices in different Locations
	Prices []PutServersID200ApplicationJSONServerServerTypePrices `json:"prices"`
	// Type of Server boot drive. Local has higher speed. Network has better availability.
	StorageType PutServersID200ApplicationJSONServerServerTypeStorageTypeEnum `json:"storage_type"`
}

// PutServersID200ApplicationJSONServerStatusEnum - Status of the Server
type PutServersID200ApplicationJSONServerStatusEnum string

const (
	PutServersID200ApplicationJSONServerStatusEnumRunning      PutServersID200ApplicationJSONServerStatusEnum = "running"
	PutServersID200ApplicationJSONServerStatusEnumInitializing PutServersID200ApplicationJSONServerStatusEnum = "initializing"
	PutServersID200ApplicationJSONServerStatusEnumStarting     PutServersID200ApplicationJSONServerStatusEnum = "starting"
	PutServersID200ApplicationJSONServerStatusEnumStopping     PutServersID200ApplicationJSONServerStatusEnum = "stopping"
	PutServersID200ApplicationJSONServerStatusEnumOff          PutServersID200ApplicationJSONServerStatusEnum = "off"
	PutServersID200ApplicationJSONServerStatusEnumDeleting     PutServersID200ApplicationJSONServerStatusEnum = "deleting"
	PutServersID200ApplicationJSONServerStatusEnumMigrating    PutServersID200ApplicationJSONServerStatusEnum = "migrating"
	PutServersID200ApplicationJSONServerStatusEnumRebuilding   PutServersID200ApplicationJSONServerStatusEnum = "rebuilding"
	PutServersID200ApplicationJSONServerStatusEnumUnknown      PutServersID200ApplicationJSONServerStatusEnum = "unknown"
)

func (e *PutServersID200ApplicationJSONServerStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "running":
		fallthrough
	case "initializing":
		fallthrough
	case "starting":
		fallthrough
	case "stopping":
		fallthrough
	case "off":
		fallthrough
	case "deleting":
		fallthrough
	case "migrating":
		fallthrough
	case "rebuilding":
		fallthrough
	case "unknown":
		*e = PutServersID200ApplicationJSONServerStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutServersID200ApplicationJSONServerStatusEnum: %s", s)
	}
}

type PutServersID200ApplicationJSONServer struct {
	// Time window (UTC) in which the backup will run, or null if the backups are not enabled
	BackupWindow string `json:"backup_window"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Datacenter this Resource is located at
	Datacenter PutServersID200ApplicationJSONServerDatacenter `json:"datacenter"`
	// ID of the Resource
	ID    int64                                     `json:"id"`
	Image PutServersID200ApplicationJSONServerImage `json:"image"`
	// Free Traffic for the current billing period in bytes
	IncludedTraffic float64 `json:"included_traffic"`
	// Inbound Traffic for the current billing period in bytes
	IngoingTraffic float64 `json:"ingoing_traffic"`
	// ISO Image that is attached to this Server. Null if no ISO is attached.
	Iso PutServersID200ApplicationJSONServerIso `json:"iso"`
	// User-defined labels (key-value pairs)
	Labels        map[string]string `json:"labels"`
	LoadBalancers []int64           `json:"load_balancers,omitempty"`
	// True if Server has been locked and is not available to user
	Locked bool `json:"locked"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Outbound Traffic for the current billing period in bytes
	OutgoingTraffic float64                                                     `json:"outgoing_traffic"`
	PlacementGroup  *PutServersID200ApplicationJSONServerPlacementGroupNullable `json:"placement_group,omitempty"`
	// Size of the primary Disk
	PrimaryDiskSize float64 `json:"primary_disk_size"`
	// Private networks information
	PrivateNet []PutServersID200ApplicationJSONServerPrivateNet `json:"private_net"`
	// Protection configuration for the Server
	Protection PutServersID200ApplicationJSONServerProtection `json:"protection"`
	// Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`
	PublicNet PutServersID200ApplicationJSONServerPublicNet `json:"public_net"`
	// True if rescue mode is enabled. Server will then boot into rescue system on next reboot
	RescueEnabled bool `json:"rescue_enabled"`
	// Type of Server - determines how much ram, disk and cpu a Server has
	ServerType PutServersID200ApplicationJSONServerServerType `json:"server_type"`
	// Status of the Server
	Status PutServersID200ApplicationJSONServerStatusEnum `json:"status"`
	// IDs of Volumes assigned to this Server
	Volumes []int64 `json:"volumes,omitempty"`
}

// PutServersID200ApplicationJSON - The `server` key in the reply contains the updated Server
type PutServersID200ApplicationJSON struct {
	Server *PutServersID200ApplicationJSONServer `json:"server,omitempty"`
}

type PutServersIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `server` key in the reply contains the updated Server
	PutServersID200ApplicationJSONObject *PutServersID200ApplicationJSON
}
