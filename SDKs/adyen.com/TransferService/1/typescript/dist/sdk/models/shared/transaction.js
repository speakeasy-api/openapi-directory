"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.TransactionTypeEnum = exports.TransactionStatusEnum = exports.TransactionCategoryEnum = void 0;
var utils_1 = require("../../../internal/utils");
var amount_1 = require("./amount");
var counterparty_1 = require("./counterparty");
var class_transformer_1 = require("class-transformer");
/**
 * The category of the transaction indicating the type of activity.
 *
 * @remarks
 *
 *  Possible values:
 *
 * * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
 *
 * * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
 *
 * * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
 *
 * * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
 *
 *
 */
var TransactionCategoryEnum;
(function (TransactionCategoryEnum) {
    TransactionCategoryEnum["Bank"] = "bank";
    TransactionCategoryEnum["Grants"] = "grants";
    TransactionCategoryEnum["Internal"] = "internal";
    TransactionCategoryEnum["IssuedCard"] = "issuedCard";
    TransactionCategoryEnum["PlatformPayment"] = "platformPayment";
})(TransactionCategoryEnum = exports.TransactionCategoryEnum || (exports.TransactionCategoryEnum = {}));
/**
 * The status of the transaction.
 *
 * @remarks
 *
 *  Possible values:
 *
 * * **pending**: The transaction is still pending.
 *
 * * **booked**: The transaction has been booked to the balance account.
 *
 *
 */
var TransactionStatusEnum;
(function (TransactionStatusEnum) {
    TransactionStatusEnum["Booked"] = "booked";
    TransactionStatusEnum["Pending"] = "pending";
})(TransactionStatusEnum = exports.TransactionStatusEnum || (exports.TransactionStatusEnum = {}));
/**
 * The type of the transaction.
 *
 * @remarks
 *
 *  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
 */
var TransactionTypeEnum;
(function (TransactionTypeEnum) {
    TransactionTypeEnum["AtmWithdrawal"] = "atmWithdrawal";
    TransactionTypeEnum["AtmWithdrawalReversal"] = "atmWithdrawalReversal";
    TransactionTypeEnum["BalanceAdjustment"] = "balanceAdjustment";
    TransactionTypeEnum["BalanceRollover"] = "balanceRollover";
    TransactionTypeEnum["BankTransfer"] = "bankTransfer";
    TransactionTypeEnum["Capture"] = "capture";
    TransactionTypeEnum["CaptureReversal"] = "captureReversal";
    TransactionTypeEnum["Chargeback"] = "chargeback";
    TransactionTypeEnum["ChargebackReversal"] = "chargebackReversal";
    TransactionTypeEnum["DepositCorrection"] = "depositCorrection";
    TransactionTypeEnum["Fee"] = "fee";
    TransactionTypeEnum["Grant"] = "grant";
    TransactionTypeEnum["Installment"] = "installment";
    TransactionTypeEnum["InstallmentReversal"] = "installmentReversal";
    TransactionTypeEnum["InternalTransfer"] = "internalTransfer";
    TransactionTypeEnum["InvoiceDeduction"] = "invoiceDeduction";
    TransactionTypeEnum["Leftover"] = "leftover";
    TransactionTypeEnum["ManualCorrection"] = "manualCorrection";
    TransactionTypeEnum["MiscCost"] = "miscCost";
    TransactionTypeEnum["Payment"] = "payment";
    TransactionTypeEnum["PaymentCost"] = "paymentCost";
    TransactionTypeEnum["Refund"] = "refund";
    TransactionTypeEnum["RefundReversal"] = "refundReversal";
    TransactionTypeEnum["Repayment"] = "repayment";
    TransactionTypeEnum["ReserveAdjustment"] = "reserveAdjustment";
    TransactionTypeEnum["SecondChargeback"] = "secondChargeback";
})(TransactionTypeEnum = exports.TransactionTypeEnum || (exports.TransactionTypeEnum = {}));
/**
 * OK - the request has succeeded.
 */
var Transaction = /** @class */ (function (_super) {
    __extends(Transaction, _super);
    function Transaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountHolderId" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "accountHolderId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "amount" }),
        (0, class_transformer_1.Type)(function () { return amount_1.Amount; }),
        __metadata("design:type", amount_1.Amount)
    ], Transaction.prototype, "amount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "balanceAccountId" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "balanceAccountId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "balancePlatform" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "balancePlatform", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bookingDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "bookingDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "category" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "category", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "counterparty" }),
        (0, class_transformer_1.Type)(function () { return counterparty_1.Counterparty; }),
        __metadata("design:type", counterparty_1.Counterparty)
    ], Transaction.prototype, "counterparty", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instructedAmount" }),
        (0, class_transformer_1.Type)(function () { return amount_1.Amount; }),
        __metadata("design:type", amount_1.Amount)
    ], Transaction.prototype, "instructedAmount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentInstrumentId" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "paymentInstrumentId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reference" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "reference", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "referenceForBeneficiary" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "referenceForBeneficiary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transferId" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "transferId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Transaction.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "valueDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Transaction.prototype, "valueDate", void 0);
    return Transaction;
}(utils_1.SpeakeasyBase));
exports.Transaction = Transaction;
