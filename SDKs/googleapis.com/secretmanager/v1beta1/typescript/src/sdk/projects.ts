/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists information about the supported locations for this service.
   */
  secretmanagerProjectsLocationsList(
    req: operations.SecretmanagerProjectsLocationsListRequest,
    security: operations.SecretmanagerProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsLocationsListResponse =
        new operations.SecretmanagerProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new SecretVersion containing secret data and attaches it to an existing Secret.
   */
  secretmanagerProjectsSecretsAddVersion(
    req: operations.SecretmanagerProjectsSecretsAddVersionRequest,
    security: operations.SecretmanagerProjectsSecretsAddVersionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsAddVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsAddVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}:addVersion",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addSecretVersionRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsAddVersionSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsAddVersionResponse =
        new operations.SecretmanagerProjectsSecretsAddVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretVersion = utils.objectToClass(
              httpRes?.data,
              shared.SecretVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Secret containing no SecretVersions.
   */
  secretmanagerProjectsSecretsCreate(
    req: operations.SecretmanagerProjectsSecretsCreateRequest,
    security: operations.SecretmanagerProjectsSecretsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/secrets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "secretInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsCreateResponse =
        new operations.SecretmanagerProjectsSecretsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secret = utils.objectToClass(httpRes?.data, shared.Secret);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Secret.
   */
  secretmanagerProjectsSecretsDelete(
    req: operations.SecretmanagerProjectsSecretsDeleteRequest,
    security: operations.SecretmanagerProjectsSecretsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsDeleteResponse =
        new operations.SecretmanagerProjectsSecretsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.
   */
  secretmanagerProjectsSecretsGetIamPolicy(
    req: operations.SecretmanagerProjectsSecretsGetIamPolicyRequest,
    security: operations.SecretmanagerProjectsSecretsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsGetIamPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsGetIamPolicyResponse =
        new operations.SecretmanagerProjectsSecretsGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Secrets.
   */
  secretmanagerProjectsSecretsList(
    req: operations.SecretmanagerProjectsSecretsListRequest,
    security: operations.SecretmanagerProjectsSecretsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/secrets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsListResponse =
        new operations.SecretmanagerProjectsSecretsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSecretsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSecretsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates metadata of an existing Secret.
   */
  secretmanagerProjectsSecretsPatch(
    req: operations.SecretmanagerProjectsSecretsPatchRequest,
    security: operations.SecretmanagerProjectsSecretsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "secretInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsPatchResponse =
        new operations.SecretmanagerProjectsSecretsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secret = utils.objectToClass(httpRes?.data, shared.Secret);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.
   */
  secretmanagerProjectsSecretsSetIamPolicy(
    req: operations.SecretmanagerProjectsSecretsSetIamPolicyRequest,
    security: operations.SecretmanagerProjectsSecretsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsSetIamPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsSetIamPolicyResponse =
        new operations.SecretmanagerProjectsSecretsSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  secretmanagerProjectsSecretsTestIamPermissions(
    req: operations.SecretmanagerProjectsSecretsTestIamPermissionsRequest,
    security: operations.SecretmanagerProjectsSecretsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.SecretmanagerProjectsSecretsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsTestIamPermissionsResponse =
        new operations.SecretmanagerProjectsSecretsTestIamPermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Accesses a SecretVersion. This call returns the secret data. `projects/* /secrets/* /versions/latest` is an alias to the `latest` SecretVersion.
   */
  secretmanagerProjectsSecretsVersionsAccess(
    req: operations.SecretmanagerProjectsSecretsVersionsAccessRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsAccessSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsAccessResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsAccessRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:access",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsVersionsAccessSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsAccessResponse =
        new operations.SecretmanagerProjectsSecretsVersionsAccessResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessSecretVersionResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccessSecretVersionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.
   */
  secretmanagerProjectsSecretsVersionsDestroy(
    req: operations.SecretmanagerProjectsSecretsVersionsDestroyRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsDestroySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsDestroyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsDestroyRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:destroy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsVersionsDestroySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsDestroyResponse =
        new operations.SecretmanagerProjectsSecretsVersionsDestroyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretVersion = utils.objectToClass(
              httpRes?.data,
              shared.SecretVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED.
   */
  secretmanagerProjectsSecretsVersionsDisable(
    req: operations.SecretmanagerProjectsSecretsVersionsDisableRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsDisableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsDisableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsDisableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:disable",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsVersionsDisableSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsDisableResponse =
        new operations.SecretmanagerProjectsSecretsVersionsDisableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretVersion = utils.objectToClass(
              httpRes?.data,
              shared.SecretVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.
   */
  secretmanagerProjectsSecretsVersionsEnable(
    req: operations.SecretmanagerProjectsSecretsVersionsEnableRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsEnableSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsEnableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsEnableRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{name}:enable",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsVersionsEnableSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsEnableResponse =
        new operations.SecretmanagerProjectsSecretsVersionsEnableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretVersion = utils.objectToClass(
              httpRes?.data,
              shared.SecretVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets metadata for a SecretVersion. `projects/* /secrets/* /versions/latest` is an alias to the `latest` SecretVersion.
   */
  secretmanagerProjectsSecretsVersionsGet(
    req: operations.SecretmanagerProjectsSecretsVersionsGetRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1beta1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SecretmanagerProjectsSecretsVersionsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsGetResponse =
        new operations.SecretmanagerProjectsSecretsVersionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.secretVersion = utils.objectToClass(
              httpRes?.data,
              shared.SecretVersion
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists SecretVersions. This call does not return secret data.
   */
  secretmanagerProjectsSecretsVersionsList(
    req: operations.SecretmanagerProjectsSecretsVersionsListRequest,
    security: operations.SecretmanagerProjectsSecretsVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SecretmanagerProjectsSecretsVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SecretmanagerProjectsSecretsVersionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/{parent}/versions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.SecretmanagerProjectsSecretsVersionsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SecretmanagerProjectsSecretsVersionsListResponse =
        new operations.SecretmanagerProjectsSecretsVersionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSecretVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListSecretVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
