// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// StudioComponent - <p>A studio component represents a network resource to be used by a studio's users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.</p> <p>Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.</p> <p>A studio component also has a set of initialization scripts that are returned by <code>GetLaunchProfileInitialization</code>. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.</p>
type StudioComponent struct {
	Arn                         *string                               `json:"arn,omitempty"`
	Configuration               *StudioComponentConfiguration         `json:"configuration,omitempty"`
	CreatedAt                   *time.Time                            `json:"createdAt,omitempty"`
	CreatedBy                   *string                               `json:"createdBy,omitempty"`
	Description                 *string                               `json:"description,omitempty"`
	Ec2SecurityGroupIds         []string                              `json:"ec2SecurityGroupIds,omitempty"`
	InitializationScripts       []StudioComponentInitializationScript `json:"initializationScripts,omitempty"`
	Name                        *string                               `json:"name,omitempty"`
	RuntimeRoleArn              *string                               `json:"runtimeRoleArn,omitempty"`
	ScriptParameters            []ScriptParameterKeyValue             `json:"scriptParameters,omitempty"`
	SecureInitializationRoleArn *string                               `json:"secureInitializationRoleArn,omitempty"`
	State                       *StudioComponentStateEnum             `json:"state,omitempty"`
	StatusCode                  *StudioComponentStatusCodeEnum        `json:"statusCode,omitempty"`
	StatusMessage               *string                               `json:"statusMessage,omitempty"`
	StudioComponentID           *string                               `json:"studioComponentId,omitempty"`
	Subtype                     *StudioComponentSubtypeEnum           `json:"subtype,omitempty"`
	Tags                        map[string]string                     `json:"tags,omitempty"`
	Type                        *StudioComponentTypeEnum              `json:"type,omitempty"`
	UpdatedAt                   *time.Time                            `json:"updatedAt,omitempty"`
	UpdatedBy                   *string                               `json:"updatedBy,omitempty"`
}
