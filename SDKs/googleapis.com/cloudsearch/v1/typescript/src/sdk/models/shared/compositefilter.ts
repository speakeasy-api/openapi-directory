/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Filter } from "./filter";
import { Expose, Type } from "class-transformer";

/**
 * The logic operator of the sub filter.
 */
export enum CompositeFilterLogicOperatorEnum {
  And = "AND",
  Or = "OR",
  Not = "NOT",
}

export class CompositeFilter extends SpeakeasyBase {
  /**
   * The logic operator of the sub filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logicOperator" })
  logicOperator?: CompositeFilterLogicOperatorEnum;

  /**
   * Sub filters.
   */
  @SpeakeasyMetadata({ elemType: Filter })
  @Expose({ name: "subFilters" })
  @Type(() => Filter)
  subFilters?: Filter[];
}
