/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ParagraphStyle - Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
 */
public class ParagraphStyle {
    /**
     * The text alignment for this paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alignment")
    public ParagraphStyleAlignmentEnum alignment;

    public ParagraphStyle withAlignment(ParagraphStyleAlignmentEnum alignment) {
        this.alignment = alignment;
        return this;
    }
    
    /**
     * Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avoidWidowAndOrphan")
    public Boolean avoidWidowAndOrphan;

    public ParagraphStyle withAvoidWidowAndOrphan(Boolean avoidWidowAndOrphan) {
        this.avoidWidowAndOrphan = avoidWidowAndOrphan;
        return this;
    }
    
    /**
     * A border around a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("borderBetween")
    public ParagraphBorder borderBetween;

    public ParagraphStyle withBorderBetween(ParagraphBorder borderBetween) {
        this.borderBetween = borderBetween;
        return this;
    }
    
    /**
     * A border around a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("borderBottom")
    public ParagraphBorder borderBottom;

    public ParagraphStyle withBorderBottom(ParagraphBorder borderBottom) {
        this.borderBottom = borderBottom;
        return this;
    }
    
    /**
     * A border around a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("borderLeft")
    public ParagraphBorder borderLeft;

    public ParagraphStyle withBorderLeft(ParagraphBorder borderLeft) {
        this.borderLeft = borderLeft;
        return this;
    }
    
    /**
     * A border around a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("borderRight")
    public ParagraphBorder borderRight;

    public ParagraphStyle withBorderRight(ParagraphBorder borderRight) {
        this.borderRight = borderRight;
        return this;
    }
    
    /**
     * A border around a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("borderTop")
    public ParagraphBorder borderTop;

    public ParagraphStyle withBorderTop(ParagraphBorder borderTop) {
        this.borderTop = borderTop;
        return this;
    }
    
    /**
     * The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction")
    public ParagraphStyleDirectionEnum direction;

    public ParagraphStyle withDirection(ParagraphStyleDirectionEnum direction) {
        this.direction = direction;
        return this;
    }
    
    /**
     * The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headingId")
    public String headingId;

    public ParagraphStyle withHeadingId(String headingId) {
        this.headingId = headingId;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indentEnd")
    public Dimension indentEnd;

    public ParagraphStyle withIndentEnd(Dimension indentEnd) {
        this.indentEnd = indentEnd;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indentFirstLine")
    public Dimension indentFirstLine;

    public ParagraphStyle withIndentFirstLine(Dimension indentFirstLine) {
        this.indentFirstLine = indentFirstLine;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indentStart")
    public Dimension indentStart;

    public ParagraphStyle withIndentStart(Dimension indentStart) {
        this.indentStart = indentStart;
        return this;
    }
    
    /**
     * Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keepLinesTogether")
    public Boolean keepLinesTogether;

    public ParagraphStyle withKeepLinesTogether(Boolean keepLinesTogether) {
        this.keepLinesTogether = keepLinesTogether;
        return this;
    }
    
    /**
     * Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keepWithNext")
    public Boolean keepWithNext;

    public ParagraphStyle withKeepWithNext(Boolean keepWithNext) {
        this.keepWithNext = keepWithNext;
        return this;
    }
    
    /**
     * The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineSpacing")
    public Float lineSpacing;

    public ParagraphStyle withLineSpacing(Float lineSpacing) {
        this.lineSpacing = lineSpacing;
        return this;
    }
    
    /**
     * The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedStyleType")
    public ParagraphStyleNamedStyleTypeEnum namedStyleType;

    public ParagraphStyle withNamedStyleType(ParagraphStyleNamedStyleTypeEnum namedStyleType) {
        this.namedStyleType = namedStyleType;
        return this;
    }
    
    /**
     * Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageBreakBefore")
    public Boolean pageBreakBefore;

    public ParagraphStyle withPageBreakBefore(Boolean pageBreakBefore) {
        this.pageBreakBefore = pageBreakBefore;
        return this;
    }
    
    /**
     * The shading of a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shading")
    public Shading shading;

    public ParagraphStyle withShading(Shading shading) {
        this.shading = shading;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spaceAbove")
    public Dimension spaceAbove;

    public ParagraphStyle withSpaceAbove(Dimension spaceAbove) {
        this.spaceAbove = spaceAbove;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spaceBelow")
    public Dimension spaceBelow;

    public ParagraphStyle withSpaceBelow(Dimension spaceBelow) {
        this.spaceBelow = spaceBelow;
        return this;
    }
    
    /**
     * The spacing mode for the paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spacingMode")
    public ParagraphStyleSpacingModeEnum spacingMode;

    public ParagraphStyle withSpacingMode(ParagraphStyleSpacingModeEnum spacingMode) {
        this.spacingMode = spacingMode;
        return this;
    }
    
    /**
     * A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tabStops")
    public TabStop[] tabStops;

    public ParagraphStyle withTabStops(TabStop[] tabStops) {
        this.tabStops = tabStops;
        return this;
    }
    
    public ParagraphStyle(){}
}
