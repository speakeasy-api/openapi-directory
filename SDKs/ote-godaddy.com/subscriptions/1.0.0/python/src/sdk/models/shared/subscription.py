"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import subscriptionaddon as shared_subscriptionaddon
from ..shared import subscriptionbilling as shared_subscriptionbilling
from ..shared import subscriptionproduct as shared_subscriptionproduct
from ..shared import subscriptionrelations as shared_subscriptionrelations
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SubscriptionStatusEnum(str, Enum):
    r"""Whether the Subscription is active or the specific non-active state"""
    ACTIVE = 'ACTIVE'
    PENDING = 'PENDING'
    CANCELED = 'CANCELED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subscription:
    r"""Request was successful"""
    
    billing: shared_subscriptionbilling.SubscriptionBilling = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing') }})  
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt') }})
    r"""When the Subscription was created"""  
    price_locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceLocked') }})
    r"""Whether the renewal price will be based from the list price or a locked-in price for this shopper"""  
    product: shared_subscriptionproduct.SubscriptionProduct = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product') }})  
    renewable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewable') }})
    r"""Whether or not the Subscription is allowed to be renewed"""  
    renew_auto: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewAuto') }})
    r"""Whether or not the Subscription is set to be automatically renewed via the billing agent"""  
    status: SubscriptionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Whether the Subscription is active or the specific non-active state"""  
    subscription_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId') }})
    r"""Unique identifier of the Subscription"""  
    upgradeable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeable') }})
    r"""Whether or not the Subscription is allowed to be upgraded"""  
    addons: Optional[list[shared_subscriptionaddon.SubscriptionAddon]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addons'), 'exclude': lambda f: f is None }})
    r"""An array of additional products that have been purchased to augment this Subscription"""  
    cancelable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelable'), 'exclude': lambda f: f is None }})
    r"""Whether or not the Subscription is allowed to be canceled"""  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiresAt'), 'exclude': lambda f: f is None }})
    r"""When the Subscription will expire"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""A human readable description of this Subscription"""  
    launch_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('launchUrl'), 'exclude': lambda f: f is None }})
    r"""The url to use or manage this Subscription's active product"""  
    payment_profile_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentProfileId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the payment profile that will be used to automatically renew this Subscription"""  
    relations: Optional[shared_subscriptionrelations.SubscriptionRelations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})  
    