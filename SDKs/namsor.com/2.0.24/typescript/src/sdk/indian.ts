/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * INDIAN special features
 */
export class Indian {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name.
   */
  castegroupIndianFull(
    req: operations.CastegroupIndianFullRequest,
    security: operations.CastegroupIndianFullSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CastegroupIndianFullResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CastegroupIndianFullRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/castegroupIndianFull/{subDivisionIso31662}/{personalNameFull}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CastegroupIndianFullSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CastegroupIndianFullResponse =
        new operations.CastegroupIndianFullResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameCastegroupOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameCastegroupOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.
   */
  castegroupIndianFullBatch(
    req: shared.BatchPersonalNameSubdivisionIn,
    security: operations.CastegroupIndianFullBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CastegroupIndianFullBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameSubdivisionIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/castegroupIndianFullBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CastegroupIndianFullBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CastegroupIndianFullBatchResponse =
        new operations.CastegroupIndianFullBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameCastegroupOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameCastegroupOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint).
   */
  religion(
    req: operations.ReligionRequest,
    security: operations.ReligionSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReligionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ReligionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/religionIndianFull/{subDivisionIso31662}/{personalNameFull}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReligionSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReligionResponse = new operations.ReligionResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.personalNameReligionedOut = utils.objectToClass(
              httpRes?.data,
              shared.PersonalNameReligionedOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint).
   */
  religionIndianFullBatch(
    req: shared.BatchPersonalNameSubdivisionIn,
    security: operations.ReligionIndianFullBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ReligionIndianFullBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchPersonalNameSubdivisionIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/religionIndianFullBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ReligionIndianFullBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ReligionIndianFullBatchResponse =
        new operations.ReligionIndianFullBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPersonalNameReligionedOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchPersonalNameReligionedOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name.
   */
  subclassificationIndian(
    req: operations.SubclassificationIndianRequest,
    security: operations.SubclassificationIndianSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubclassificationIndianResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubclassificationIndianRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api2/json/subclassificationIndian/{firstName}/{lastName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubclassificationIndianSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubclassificationIndianResponse =
        new operations.SubclassificationIndianResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firstLastNameGeoSubclassificationOut = utils.objectToClass(
              httpRes?.data,
              shared.FirstLastNameGeoSubclassificationOut
            );
          }
          break;
        case [401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * [USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names.
   */
  subclassificationIndianBatch(
    req: shared.BatchFirstLastNameGeoIn,
    security: operations.SubclassificationIndianBatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubclassificationIndianBatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BatchFirstLastNameGeoIn(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api2/json/subclassificationIndianBatch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubclassificationIndianBatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubclassificationIndianBatchResponse =
        new operations.SubclassificationIndianBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchFirstLastNameGeoSubclassificationOut = utils.objectToClass(
              httpRes?.data,
              shared.BatchFirstLastNameGeoSubclassificationOut
            );
          }
          break;
        case [400, 401, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
