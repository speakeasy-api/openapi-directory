/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum RespondToAuthChallengeXAmzTargetEnum {
  AWSCognitoIdentityProviderServiceRespondToAuthChallenge = "AWSCognitoIdentityProviderService.RespondToAuthChallenge",
}

export class RespondToAuthChallengeRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  respondToAuthChallengeRequest: shared.RespondToAuthChallengeRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: RespondToAuthChallengeXAmzTargetEnum;
}

export class RespondToAuthChallengeResponse extends SpeakeasyBase {
  /**
   * AliasExistsException
   */
  @SpeakeasyMetadata()
  aliasExistsException?: any;

  /**
   * CodeMismatchException
   */
  @SpeakeasyMetadata()
  codeMismatchException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ExpiredCodeException
   */
  @SpeakeasyMetadata()
  expiredCodeException?: any;

  /**
   * ForbiddenException
   */
  @SpeakeasyMetadata()
  forbiddenException?: any;

  /**
   * InternalErrorException
   */
  @SpeakeasyMetadata()
  internalErrorException?: any;

  /**
   * InvalidLambdaResponseException
   */
  @SpeakeasyMetadata()
  invalidLambdaResponseException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * InvalidPasswordException
   */
  @SpeakeasyMetadata()
  invalidPasswordException?: any;

  /**
   * InvalidSmsRoleAccessPolicyException
   */
  @SpeakeasyMetadata()
  invalidSmsRoleAccessPolicyException?: any;

  /**
   * InvalidSmsRoleTrustRelationshipException
   */
  @SpeakeasyMetadata()
  invalidSmsRoleTrustRelationshipException?: any;

  /**
   * InvalidUserPoolConfigurationException
   */
  @SpeakeasyMetadata()
  invalidUserPoolConfigurationException?: any;

  /**
   * MFAMethodNotFoundException
   */
  @SpeakeasyMetadata()
  mfaMethodNotFoundException?: any;

  /**
   * NotAuthorizedException
   */
  @SpeakeasyMetadata()
  notAuthorizedException?: any;

  /**
   * PasswordResetRequiredException
   */
  @SpeakeasyMetadata()
  passwordResetRequiredException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  respondToAuthChallengeResponse?: shared.RespondToAuthChallengeResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SoftwareTokenMFANotFoundException
   */
  @SpeakeasyMetadata()
  softwareTokenMFANotFoundException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * UnexpectedLambdaException
   */
  @SpeakeasyMetadata()
  unexpectedLambdaException?: any;

  /**
   * UserLambdaValidationException
   */
  @SpeakeasyMetadata()
  userLambdaValidationException?: any;

  /**
   * UserNotConfirmedException
   */
  @SpeakeasyMetadata()
  userNotConfirmedException?: any;

  /**
   * UserNotFoundException
   */
  @SpeakeasyMetadata()
  userNotFoundException?: any;
}
