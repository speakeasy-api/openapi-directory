<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - **Base API URL**: https://api.configcat.com
 * 
 * 
 * If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).
 * 
 * The purpose of this API is to access the ConfigCat platform programmatically. 
 * You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat. 
 * 
 * The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON 
 * and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).
 * 
 * 
 * # OpenAPI Specification
 * 
 * The complete specification is publicly available here: [swagger.json](v1/swagger.json). 
 * You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or
 * [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.
 * 
 * # Authentication
 * This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication). 
 * 
 * <!-- ReDoc-Inject: <security-definitions> -->
 * 
 * # Throttling and rate limits
 * All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:
 * 
 * | Header | Description |
 * | :- | :- |
 * | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |
 * | X-Rate-Limit-Reset     | The time	when the current rate limit period resets.						  |
 * 
 * When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.configcat.com',
	];
  	
    /**
     * Access audit log entries.
     * 
     * @var AuditLogs $$auditLogs
     */
	public AuditLogs $auditLogs;
	
    /**
     * With this endpoint you can upload Feature Flag and Setting usage references that will be shown on the ConfigCat Dashboard.
     * 
     * 
     * <a href="https://configcat.com/docs/advanced/code-references/overview/" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Code References.
     * 
     * @var CodeReferences $$codeReferences
     */
	public CodeReferences $codeReferences;
	
    /**
     * With these endpoints you can manage your Configs.
     * 
     * This also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their 
     * [served values](#tag/Feature-Flag-and-Setting-values) through this API.
     * 
     * <a href="https://configcat.com/docs/main-concepts/#config" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Configs.
     * 
     * @var Configs $$configs
     */
	public Configs $configs;
	
    /**
     * With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products). 
     * 
     * 
     * <a href="https://configcat.com/docs/main-concepts/#environment" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Environments.
     * 
     * @var Environments $$environments
     */
	public Environments $environments;
	
    /**
     * With these endpoints you can control how your existing Feature Flags and Settings should serve their values. 
     * 
     * You can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.
     * 
     * To determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be
     * obtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
     * 
     * You also have to specify in which Environment you want to change the served value configuration by its
     * `environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint.
     * 
     * @var FeatureFlagAndSettingValues $$featureFlagAndSettingValues
     */
	public FeatureFlagAndSettingValues $featureFlagAndSettingValues;
	
    /**
     * With these endpoints you can control how your existing Feature Flags and Settings should serve their values. 
     * 
     * You can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.
     * 
     * These endpoints are determining the Environment and Config by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in
     * the `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change, 
     * you can use either its `settingId` or `key` attribute. You can get those attributes 
     * from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
     * 
     * @var FeatureFlagAndSettingValuesUsingSDKKey $$featureFlagAndSettingValuesUsingSDKKey
     */
	public FeatureFlagAndSettingValuesUsingSDKKey $featureFlagAndSettingValuesUsingSDKKey;
	
    /**
     * With these endpoints you can manage your Feature Flags or Settings within a Config. 
     * 
     * However you can't use them for manipulating the values of your Feature Flags and Settings,
     * to do that please visit the [Feature Flag & Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)
     * and [Feature Flag & Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.
     * 
     * For using these endpoints, first you have to select which Config you want to work with by its `configId` 
     * which can be obtained from the [List Configs](#operation/get-configs) endpoint. 
     * Then you can use it to create new Feature Flags or to get information about existing ones.
     * 
     * Then you can obtain the `settingId` or `key` of your desired Feature Flag or Setting 
     * to use them for further operations in this API. 
     * 
     * <a href="https://configcat.com/docs/main-concepts/#setting" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Settings.
     * 
     * @var FeatureFlagsAndSettings $$featureFlagsAndSettings
     */
	public FeatureFlagsAndSettings $featureFlagsAndSettings;
	
	public IntegrationLinks $integrationLinks;
	
    /**
     * Information about the current user.
     * 
     * @var Me $$me
     */
	public Me $me;
	
    /**
     * With these endpoints you can manage your Members.
     * 
     * 
     * <a href="https://configcat.com/docs/advanced/team-collaboration" target="_blank" rel="noopener noreferrer">Here</a> you can read more about Team Collaboration.
     * 
     * @var Members $$members
     */
	public Members $members;
	
    /**
     * With these endpoints you can get useful information about your Organizations.
     * 
     * This also can be used to manage your [Products](#tag/Products).
     * 
     * <a href="https://configcat.com/docs/organization/" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the Organizations.
     * 
     * @var Organizations $$organizations
     */
	public Organizations $organizations;
	
    /**
     * With these endpoints you can manage your Permission Groups.
     * 
     * 
     * <a href="https://configcat.com/docs/advanced/team-collaboration#permissions--groups" target="_blank" rel="noopener noreferrer">Here</a> you can read more about Permissions.
     * 
     * @var PermissionGroups $$permissionGroups
     */
	public PermissionGroups $permissionGroups;
	
    /**
     * With these endpoints you can manage your Products.
     * 
     * This also can be used to manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags) and [Permission Groups](#tag/Permission-Groups) through this API.
     * 
     * <a href="https://configcat.com/docs/main-concepts/#product" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Products.
     * 
     * @var Products $$products
     */
	public Products $products;
	
    /**
     * With these endpoints you can manage your SDK Keys.
     * 
     * @var SDKKeys $$sdkKeys
     */
	public SDKKeys $sdkKeys;
	
    /**
     * With these endpoints you can manage your Segments.
     * 
     * Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
     * 
     * @var Segments $$segments
     */
	public Segments $segments;
	
    /**
     * With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint.
     * 
     * @var Tags $$tags
     */
	public Tags $tags;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->auditLogs = new AuditLogs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->codeReferences = new CodeReferences(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->configs = new Configs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->environments = new Environments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->featureFlagAndSettingValues = new FeatureFlagAndSettingValues(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->featureFlagAndSettingValuesUsingSDKKey = new FeatureFlagAndSettingValuesUsingSDKKey(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->featureFlagsAndSettings = new FeatureFlagsAndSettings(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->integrationLinks = new IntegrationLinks(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->me = new Me(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->members = new Members(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organizations = new Organizations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->permissionGroups = new PermissionGroups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->products = new Products(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->sdkKeys = new SDKKeys(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->segments = new Segments(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->tags = new Tags(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}