"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import billbee_interfaces_billbeeapi_model_orderitemattribute as shared_billbee_interfaces_billbeeapi_model_orderitemattribute
from ..shared import billbee_interfaces_billbeeapi_model_soldproduct as shared_billbee_interfaces_billbeeapi_model_soldproduct
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelOrderItemInput:
    
    attributes: Optional[list[shared_billbee_interfaces_billbeeapi_model_orderitemattribute.BillbeeInterfacesBillbeeAPIModelOrderItemAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})
    r"""A list of product attributes for this position"""  
    billbee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillbeeId'), 'exclude': lambda f: f is None }})
    r"""The billbee id of this item"""  
    discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Discount'), 'exclude': lambda f: f is None }})
    r"""Sets the discount in percent"""  
    dont_adjust_stock: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DontAdjustStock'), 'exclude': lambda f: f is None }})
    r"""If true, the import of this order won't adjust the stock level at billbee."""  
    get_price_from_article_if_any: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetPriceFromArticleIfAny'), 'exclude': lambda f: f is None }})
    r"""If true, the price will be overwritten by the known article price in billbee if available"""  
    invoice_sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceSKU'), 'exclude': lambda f: f is None }})
    r"""Contains the SKU from OrderDetail (if available) or from Product"""  
    is_coupon: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCoupon'), 'exclude': lambda f: f is None }})
    r"""Determines if it is a coupon, which is interpreted as tax-free payment"""  
    product: Optional[shared_billbee_interfaces_billbeeapi_model_soldproduct.BillbeeInterfacesBillbeeAPIModelSoldProductInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Product'), 'exclude': lambda f: f is None }})  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})
    r"""The sold quantity"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerialNumber'), 'exclude': lambda f: f is None }})
    r"""Contains the used serial number"""  
    shipping_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileId'), 'exclude': lambda f: f is None }})
    r"""Determines if it is a coupon, which is interpreted as tax-free payment"""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""The tax amount in the total price"""  
    tax_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxIndex'), 'exclude': lambda f: f is None }})
    r"""The tax index."""  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalPrice'), 'exclude': lambda f: f is None }})
    r"""The total price (unit price * quantity)"""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransactionId'), 'exclude': lambda f: f is None }})
    r"""Id of the individual transaction. Only required by Ebay to detect aggregated orders"""  
    unrebated_total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnrebatedTotalPrice'), 'exclude': lambda f: f is None }})
    r"""Is just used for the billbee api"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BillbeeInterfacesBillbeeAPIModelOrderItem:
    
    attributes: Optional[list[shared_billbee_interfaces_billbeeapi_model_orderitemattribute.BillbeeInterfacesBillbeeAPIModelOrderItemAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})
    r"""A list of product attributes for this position"""  
    billbee_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BillbeeId'), 'exclude': lambda f: f is None }})
    r"""The billbee id of this item"""  
    discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Discount'), 'exclude': lambda f: f is None }})
    r"""Sets the discount in percent"""  
    dont_adjust_stock: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DontAdjustStock'), 'exclude': lambda f: f is None }})
    r"""If true, the import of this order won't adjust the stock level at billbee."""  
    get_price_from_article_if_any: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GetPriceFromArticleIfAny'), 'exclude': lambda f: f is None }})
    r"""If true, the price will be overwritten by the known article price in billbee if available"""  
    invoice_sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceSKU'), 'exclude': lambda f: f is None }})
    r"""Contains the SKU from OrderDetail (if available) or from Product"""  
    is_coupon: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsCoupon'), 'exclude': lambda f: f is None }})
    r"""Determines if it is a coupon, which is interpreted as tax-free payment"""  
    product: Optional[shared_billbee_interfaces_billbeeapi_model_soldproduct.BillbeeInterfacesBillbeeAPIModelSoldProduct] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Product'), 'exclude': lambda f: f is None }})  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})
    r"""The sold quantity"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SerialNumber'), 'exclude': lambda f: f is None }})
    r"""Contains the used serial number"""  
    shipping_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShippingProfileId'), 'exclude': lambda f: f is None }})
    r"""Determines if it is a coupon, which is interpreted as tax-free payment"""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""The tax amount in the total price"""  
    tax_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxIndex'), 'exclude': lambda f: f is None }})
    r"""The tax index."""  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalPrice'), 'exclude': lambda f: f is None }})
    r"""The total price (unit price * quantity)"""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransactionId'), 'exclude': lambda f: f is None }})
    r"""Id of the individual transaction. Only required by Ebay to detect aggregated orders"""  
    unrebated_total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UnrebatedTotalPrice'), 'exclude': lambda f: f is None }})
    r"""Is just used for the billbee api"""  
    